""" Cisco_IOS_XR_ip_bfd_oper 

This module contains a collection of YANG definitions
for Cisco IOS\-XR ip\-bfd package operational data.

This module contains definitions
for the following management objects\:
  bfd\: Bidirectional Forwarding Detection(BFD) operational data

Copyright (c) 2013\-2016 by Cisco Systems, Inc.
All rights reserved.

"""


import re
import collections

from enum import Enum

from ydk.types import Empty, YList, YLeafList, DELETE, Decimal64, FixedBitsDict

from ydk.errors import YPYError, YPYModelError



class BfdAfIdEnum(Enum):
    """
    BfdAfIdEnum

    Bfd af id

    .. data:: bfd_af_id_none = 0

    	No Address

    .. data:: bfd_af_id_ipv4 = 2

    	IPv4 AFI

    .. data:: bfd_af_id_ipv6 = 10

    	IPv6 AFI

    """

    bfd_af_id_none = 0

    bfd_af_id_ipv4 = 2

    bfd_af_id_ipv6 = 10


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
        return meta._meta_table['BfdAfIdEnum']


class BfdApiFecEnum(Enum):
    """
    BfdApiFecEnum

    Bfd api fec

    .. data:: bfd_api_fec_type_none = 0

    	bfd api fec type none

    .. data:: bfd_api_fec_type_p2p_te = 1

    	bfd api fec type p2p te

    """

    bfd_api_fec_type_none = 0

    bfd_api_fec_type_p2p_te = 1


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
        return meta._meta_table['BfdApiFecEnum']


class BfdMgmtPktDisplayEnum(Enum):
    """
    BfdMgmtPktDisplayEnum

    BFD session type

    .. data:: bfd_mgmt_pkt_display_type_none = 0

    	None

    .. data:: bfd_mgmt_pkt_display_type_bob_mbr = 1

    	Display Type Bundle RTR Member

    .. data:: bfd_mgmt_pkt_display_type_max = 2

    	Display Type Enum Max Value

    """

    bfd_mgmt_pkt_display_type_none = 0

    bfd_mgmt_pkt_display_type_bob_mbr = 1

    bfd_mgmt_pkt_display_type_max = 2


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
        return meta._meta_table['BfdMgmtPktDisplayEnum']


class BfdMgmtSessionDiagEnum(Enum):
    """
    BfdMgmtSessionDiagEnum

    BFD session diagnostic

    .. data:: bfd_mgmt_session_diag_none = 0

    	No diagnostic

    .. data:: bfd_mgmt_session_diag_control_detect_expired = 1

    	Control Detection Time Expired

    .. data:: bfd_mgmt_session_diag_echo_function_failed = 2

    	Echo Function Failed

    .. data:: bfd_mgmt_session_diag_nb_or_signaled_down = 3

    	Neighbor Signaled Session Down

    .. data:: bfd_mgmt_session_diag_fwding_plane_reset = 4

    	Forwarding Plane Reset

    .. data:: bfd_mgmt_session_diag_path_down = 5

    	Path Down

    .. data:: bfd_mgmt_session_diag_conc_path_down = 6

    	Concatenated Path Down

    .. data:: bfd_mgmt_session_diag_admin_down = 7

    	Administratively Down

    .. data:: bfd_mgmt_session_diag_rev_conc_path_down = 8

    	Reverse Concatenated Path Down

    .. data:: bfd_mgmt_session_diag_num = 10

    	Unknown diagnostic state

    """

    bfd_mgmt_session_diag_none = 0

    bfd_mgmt_session_diag_control_detect_expired = 1

    bfd_mgmt_session_diag_echo_function_failed = 2

    bfd_mgmt_session_diag_nb_or_signaled_down = 3

    bfd_mgmt_session_diag_fwding_plane_reset = 4

    bfd_mgmt_session_diag_path_down = 5

    bfd_mgmt_session_diag_conc_path_down = 6

    bfd_mgmt_session_diag_admin_down = 7

    bfd_mgmt_session_diag_rev_conc_path_down = 8

    bfd_mgmt_session_diag_num = 10


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
        return meta._meta_table['BfdMgmtSessionDiagEnum']


class BfdMgmtSessionStateEnum(Enum):
    """
    BfdMgmtSessionStateEnum

    BFD session states

    .. data:: bfd_mgmt_session_state_admin_down = 0

    	Session in Administratively Shutdown State

    .. data:: bfd_mgmt_session_state_down = 1

    	Session in Down State

    .. data:: bfd_mgmt_session_state_init = 2

    	Session in Initializing State

    .. data:: bfd_mgmt_session_state_up = 3

    	Session in Up State

    .. data:: bfd_mgmt_session_state_failing = 4

    	Session in Failing State

    .. data:: bfd_mgmt_session_state_unknown = 6

    	Session in Unknown State

    """

    bfd_mgmt_session_state_admin_down = 0

    bfd_mgmt_session_state_down = 1

    bfd_mgmt_session_state_init = 2

    bfd_mgmt_session_state_up = 3

    bfd_mgmt_session_state_failing = 4

    bfd_mgmt_session_state_unknown = 6


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
        return meta._meta_table['BfdMgmtSessionStateEnum']


class BfdMpDownloadStateEnum(Enum):
    """
    BfdMpDownloadStateEnum

    Bfd mp download state

    .. data:: bfd_mp_download_none = 0

    	bfd mp download none

    .. data:: bfd_mp_download_no_lc = 1

    	bfd mp download no lc

    .. data:: bfd_mp_download_downloaded = 2

    	bfd mp download downloaded

    .. data:: bfd_mp_download_ack = 3

    	bfd mp download ack

    .. data:: bfd_mp_download_nack = 4

    	bfd mp download nack

    .. data:: bfd_mp_download_delete = 5

    	bfd mp download delete

    """

    bfd_mp_download_none = 0

    bfd_mp_download_no_lc = 1

    bfd_mp_download_downloaded = 2

    bfd_mp_download_ack = 3

    bfd_mp_download_nack = 4

    bfd_mp_download_delete = 5


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
        return meta._meta_table['BfdMpDownloadStateEnum']


class BfdSessionEnum(Enum):
    """
    BfdSessionEnum

    BFD session type

    .. data:: undefined = 0

    	Session type is undefined

    .. data:: bundle_member = 1

    	Session type is bundle member

    .. data:: bundle_interface = 2

    	Session type is bundle interface

    .. data:: state_inheriting = 3

    	Session type is state inheriting

    .. data:: bundle_vlan = 4

    	Session type is bundle vlan

    .. data:: mpls_tp = 5

    	Session type is MPLS-TP

    .. data:: gre = 6

    	Session type is GRE tunnel

    .. data:: pseudowire_headend = 7

    	Session type is PW-HE

    .. data:: ip_single_hop = 8

    	Session type is IP single hop

    """

    undefined = 0

    bundle_member = 1

    bundle_interface = 2

    state_inheriting = 3

    bundle_vlan = 4

    mpls_tp = 5

    gre = 6

    pseudowire_headend = 7

    ip_single_hop = 8


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
        return meta._meta_table['BfdSessionEnum']


class MplsLibCEnum(Enum):
    """
    MplsLibCEnum

    Mpls lib c

    .. data:: mpls_lib_c_type_null = 0

    	NULL Ctype

    .. data:: mpls_lib_c_type_ipv4 = 1

    	IPv4 UDP

    .. data:: mpls_lib_c_type_ipv4_p2p_tunnel = 7

    	IPv4 point-to-point TE tunnel

    .. data:: mpls_lib_c_type_ipv6_p2p_tunnel = 8

    	IPv6 point-to-point TE tunnel

    .. data:: mpls_lib_c_type_ipv4_uni = 9

    	IPv4 unicast

    .. data:: mpls_lib_c_type_ipv4_p2mp_tunnel = 13

    	IPv4 point-to-point TE tunnel

    .. data:: mpls_lib_c_type_ipv6_p2mp_tunnel = 14

    	IPv6 point-to-point TE tunnel

    .. data:: mpls_lib_c_type_ipv4_tp_tunnel = 15

    	IPv4 transport protocol tunnel

    .. data:: mpls_lib_c_type_ipv6_tp_tunnel = 16

    	IPv6 transport protocol tunnel

    .. data:: mpls_lib_c_type_p2p_binding_label = 17

    	P2P transport tunnel binding label

    """

    mpls_lib_c_type_null = 0

    mpls_lib_c_type_ipv4 = 1

    mpls_lib_c_type_ipv4_p2p_tunnel = 7

    mpls_lib_c_type_ipv6_p2p_tunnel = 8

    mpls_lib_c_type_ipv4_uni = 9

    mpls_lib_c_type_ipv4_p2mp_tunnel = 13

    mpls_lib_c_type_ipv6_p2mp_tunnel = 14

    mpls_lib_c_type_ipv4_tp_tunnel = 15

    mpls_lib_c_type_ipv6_tp_tunnel = 16

    mpls_lib_c_type_p2p_binding_label = 17


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
        return meta._meta_table['MplsLibCEnum']



class Bfd(object):
    """
    Bidirectional Forwarding Detection(BFD)
    operational data
    
    .. attribute:: client_briefs
    
    	Table of Brief information about BFD clients
    	**type**\:   :py:class:`ClientBriefs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.ClientBriefs>`
    
    .. attribute:: client_details
    
    	Table of detailed information about BFD clients
    	**type**\:   :py:class:`ClientDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.ClientDetails>`
    
    .. attribute:: counters
    
    	Counters
    	**type**\:   :py:class:`Counters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Counters>`
    
    .. attribute:: generic_summaries
    
    	Generic summary information about BFD location
    	**type**\:   :py:class:`GenericSummaries <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.GenericSummaries>`
    
    .. attribute:: ipv4_multi_hop_counters
    
    	IPv4 multiple hop Counters
    	**type**\:   :py:class:`Ipv4MultiHopCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopCounters>`
    
    .. attribute:: ipv4_multi_hop_multi_paths
    
    	IPv4 multi\-hop multipath
    	**type**\:   :py:class:`Ipv4MultiHopMultiPaths <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopMultiPaths>`
    
    .. attribute:: ipv4_multi_hop_node_location_summaries
    
    	Table of summary information about BFD IPv4 multihop sessions per location
    	**type**\:   :py:class:`Ipv4MultiHopNodeLocationSummaries <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopNodeLocationSummaries>`
    
    .. attribute:: ipv4_multi_hop_session_briefs
    
    	Table of brief information about all IPv4 multihop BFD sessions in the System
    	**type**\:   :py:class:`Ipv4MultiHopSessionBriefs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopSessionBriefs>`
    
    .. attribute:: ipv4_multi_hop_session_details
    
    	Table of detailed information about all IPv4 multihop BFD sessions in the System 
    	**type**\:   :py:class:`Ipv4MultiHopSessionDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopSessionDetails>`
    
    .. attribute:: ipv4_multi_hop_summary
    
    	Summary information of BFD IPv4 multihop sessions
    	**type**\:   :py:class:`Ipv4MultiHopSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopSummary>`
    
    .. attribute:: ipv4_single_hop_counters
    
    	IPv4 single hop Counters
    	**type**\:   :py:class:`Ipv4SingleHopCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopCounters>`
    
    .. attribute:: ipv4_single_hop_location_summaries
    
    	Table of summary information about IPv4 singlehop BFD sessions for location
    	**type**\:   :py:class:`Ipv4SingleHopLocationSummaries <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopLocationSummaries>`
    
    .. attribute:: ipv4_single_hop_multi_paths
    
    	IPv4 single hop multipath
    	**type**\:   :py:class:`Ipv4SingleHopMultiPaths <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopMultiPaths>`
    
    .. attribute:: ipv4_single_hop_node_location_summaries
    
    	Table of summary information about BFD IPv4 singlehop sessions per location
    	**type**\:   :py:class:`Ipv4SingleHopNodeLocationSummaries <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopNodeLocationSummaries>`
    
    .. attribute:: ipv4_single_hop_session_briefs
    
    	Table of brief information about all IPv4 singlehop BFD sessions in the System
    	**type**\:   :py:class:`Ipv4SingleHopSessionBriefs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopSessionBriefs>`
    
    .. attribute:: ipv4_single_hop_session_details
    
    	Table of detailed information about all IPv4 singlehop BFD sessions in the System 
    	**type**\:   :py:class:`Ipv4SingleHopSessionDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopSessionDetails>`
    
    .. attribute:: ipv4_single_hop_summary
    
    	Summary information of BFD IPv4 singlehop sessions
    	**type**\:   :py:class:`Ipv4SingleHopSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopSummary>`
    
    .. attribute:: ipv4bf_do_mplste_head_counters
    
    	IPv4 BFD over MPLS\-TE Counters
    	**type**\:   :py:class:`Ipv4BfDoMplsteHeadCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadCounters>`
    
    .. attribute:: ipv4bf_do_mplste_head_multi_paths
    
    	IPv4 BFD over MPLS\-TE Head multipath
    	**type**\:   :py:class:`Ipv4BfDoMplsteHeadMultiPaths <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadMultiPaths>`
    
    .. attribute:: ipv4bf_do_mplste_head_session_briefs
    
    	Table of brief information about all IPv4 BFD over MPLS\-TE Head sessions in the System
    	**type**\:   :py:class:`Ipv4BfDoMplsteHeadSessionBriefs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadSessionBriefs>`
    
    .. attribute:: ipv4bf_do_mplste_head_session_details
    
    	Table of detailed information about all IPv4 BFD over MPLS\-TE Head sessions in the System
    	**type**\:   :py:class:`Ipv4BfDoMplsteHeadSessionDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadSessionDetails>`
    
    .. attribute:: ipv4bf_do_mplste_head_summary
    
    	Summary information of IPv4 BFD over MPLS\-TE Head
    	**type**\:   :py:class:`Ipv4BfDoMplsteHeadSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadSummary>`
    
    .. attribute:: ipv4bf_do_mplste_tail_counters
    
    	IPv4 BFD over MPLS\-TE Counters
    	**type**\:   :py:class:`Ipv4BfDoMplsteTailCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailCounters>`
    
    .. attribute:: ipv4bf_do_mplste_tail_multi_paths
    
    	IPv4 BFD over MPLS\-TE Tail multipath
    	**type**\:   :py:class:`Ipv4BfDoMplsteTailMultiPaths <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailMultiPaths>`
    
    .. attribute:: ipv4bf_do_mplste_tail_session_briefs
    
    	Table of brief information about all IPv4 BFD over MPLS\-TE Tail sessions in the System
    	**type**\:   :py:class:`Ipv4BfDoMplsteTailSessionBriefs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailSessionBriefs>`
    
    .. attribute:: ipv4bf_do_mplste_tail_session_details
    
    	Table of detailed information about all IPv4 BFD over MPLS\-TE Tail sessions in the System
    	**type**\:   :py:class:`Ipv4BfDoMplsteTailSessionDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailSessionDetails>`
    
    .. attribute:: ipv4bf_do_mplste_tail_summary
    
    	Summary information of IPv4 BFD over MPLS\-TE Tail
    	**type**\:   :py:class:`Ipv4BfDoMplsteTailSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailSummary>`
    
    .. attribute:: ipv4bfd_mplste_head_summary_nodes
    
    	Table of summary about IPv4 TE head BFD sessions for location
    	**type**\:   :py:class:`Ipv4BfdMplsteHeadSummaryNodes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfdMplsteHeadSummaryNodes>`
    
    .. attribute:: ipv4bfd_mplste_tail_node_summaries
    
    	Table of summary about IPv4 TE tail BFD sessions for location
    	**type**\:   :py:class:`Ipv4BfdMplsteTailNodeSummaries <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfdMplsteTailNodeSummaries>`
    
    .. attribute:: ipv6_multi_hop_counters
    
    	IPv6 multiple hop Counters
    	**type**\:   :py:class:`Ipv6MultiHopCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopCounters>`
    
    .. attribute:: ipv6_multi_hop_multi_paths
    
    	IPv6 multi hop multipath
    	**type**\:   :py:class:`Ipv6MultiHopMultiPaths <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopMultiPaths>`
    
    .. attribute:: ipv6_multi_hop_node_location_summaries
    
    	Table of summary information about BFD IPv6 multihop sessions per location
    	**type**\:   :py:class:`Ipv6MultiHopNodeLocationSummaries <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopNodeLocationSummaries>`
    
    .. attribute:: ipv6_multi_hop_session_briefs
    
    	Table of brief information about all IPv6 multihop BFD sessions in the System
    	**type**\:   :py:class:`Ipv6MultiHopSessionBriefs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopSessionBriefs>`
    
    .. attribute:: ipv6_multi_hop_session_details
    
    	Table of detailed information about all IPv6 multihop BFD sessions in the System 
    	**type**\:   :py:class:`Ipv6MultiHopSessionDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopSessionDetails>`
    
    .. attribute:: ipv6_multi_hop_summary
    
    	Summary information of BFD IPv6 multihop sessions
    	**type**\:   :py:class:`Ipv6MultiHopSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopSummary>`
    
    .. attribute:: ipv6_single_hop_counters
    
    	IPv6 single hop Counters
    	**type**\:   :py:class:`Ipv6SingleHopCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopCounters>`
    
    .. attribute:: ipv6_single_hop_location_summaries
    
    	Table of summary information about BFD IPv6 singlehop sessions per location
    	**type**\:   :py:class:`Ipv6SingleHopLocationSummaries <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopLocationSummaries>`
    
    .. attribute:: ipv6_single_hop_multi_paths
    
    	IPv6 single hop multipath
    	**type**\:   :py:class:`Ipv6SingleHopMultiPaths <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopMultiPaths>`
    
    .. attribute:: ipv6_single_hop_node_location_summaries
    
    	Table of summary information about BFD IPv6 singlehop sessions per location
    	**type**\:   :py:class:`Ipv6SingleHopNodeLocationSummaries <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopNodeLocationSummaries>`
    
    .. attribute:: ipv6_single_hop_session_briefs
    
    	Table of brief information about all IPv6 singlehop BFD sessions in the System
    	**type**\:   :py:class:`Ipv6SingleHopSessionBriefs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopSessionBriefs>`
    
    .. attribute:: ipv6_single_hop_session_details
    
    	Table of detailed information about all IPv6 singlehop BFD sessions in the System 
    	**type**\:   :py:class:`Ipv6SingleHopSessionDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopSessionDetails>`
    
    .. attribute:: ipv6_single_hop_summary
    
    	Summary information of BFD IPv6 singlehop sessions
    	**type**\:   :py:class:`Ipv6SingleHopSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopSummary>`
    
    .. attribute:: label_counters
    
    	Label Counters
    	**type**\:   :py:class:`LabelCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelCounters>`
    
    .. attribute:: label_multi_paths
    
    	Label multipath
    	**type**\:   :py:class:`LabelMultiPaths <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelMultiPaths>`
    
    .. attribute:: label_session_briefs
    
    	Table of brief information about all Label BFD sessions in the System
    	**type**\:   :py:class:`LabelSessionBriefs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSessionBriefs>`
    
    .. attribute:: label_session_details
    
    	Table of detailed information about all Label BFD sessions in the System 
    	**type**\:   :py:class:`LabelSessionDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSessionDetails>`
    
    .. attribute:: label_summary
    
    	Summary information of Label BFD
    	**type**\:   :py:class:`LabelSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSummary>`
    
    .. attribute:: label_summary_nodes
    
    	Table of summary about Label BFD sessions for location
    	**type**\:   :py:class:`LabelSummaryNodes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSummaryNodes>`
    
    .. attribute:: relation_briefs
    
    	Table of brief information about all BFD relations in the System
    	**type**\:   :py:class:`RelationBriefs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.RelationBriefs>`
    
    .. attribute:: relation_details
    
    	Table of detail information about all BFD relations in the System
    	**type**\:   :py:class:`RelationDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.RelationDetails>`
    
    .. attribute:: session_briefs
    
    	Table of brief information about singlehop IPv4 BFD sessions in the System
    	**type**\:   :py:class:`SessionBriefs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.SessionBriefs>`
    
    .. attribute:: session_details
    
    	Table of detailed information about IPv4 singlehop BFD sessions in the System 
    	**type**\:   :py:class:`SessionDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.SessionDetails>`
    
    .. attribute:: session_mibs
    
    	BFD session MIB database
    	**type**\:   :py:class:`SessionMibs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.SessionMibs>`
    
    .. attribute:: summary
    
    	Summary information of BFD IPv4 singlehop sessions
    	**type**\:   :py:class:`Summary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Summary>`
    
    

    """

    _prefix = 'ip-bfd-oper'
    _revision = '2015-11-09'

    def __init__(self):
        self.client_briefs = Bfd.ClientBriefs()
        self.client_briefs.parent = self
        self.client_details = Bfd.ClientDetails()
        self.client_details.parent = self
        self.counters = Bfd.Counters()
        self.counters.parent = self
        self.generic_summaries = Bfd.GenericSummaries()
        self.generic_summaries.parent = self
        self.ipv4_multi_hop_counters = Bfd.Ipv4MultiHopCounters()
        self.ipv4_multi_hop_counters.parent = self
        self.ipv4_multi_hop_multi_paths = Bfd.Ipv4MultiHopMultiPaths()
        self.ipv4_multi_hop_multi_paths.parent = self
        self.ipv4_multi_hop_node_location_summaries = Bfd.Ipv4MultiHopNodeLocationSummaries()
        self.ipv4_multi_hop_node_location_summaries.parent = self
        self.ipv4_multi_hop_session_briefs = Bfd.Ipv4MultiHopSessionBriefs()
        self.ipv4_multi_hop_session_briefs.parent = self
        self.ipv4_multi_hop_session_details = Bfd.Ipv4MultiHopSessionDetails()
        self.ipv4_multi_hop_session_details.parent = self
        self.ipv4_multi_hop_summary = Bfd.Ipv4MultiHopSummary()
        self.ipv4_multi_hop_summary.parent = self
        self.ipv4_single_hop_counters = Bfd.Ipv4SingleHopCounters()
        self.ipv4_single_hop_counters.parent = self
        self.ipv4_single_hop_location_summaries = Bfd.Ipv4SingleHopLocationSummaries()
        self.ipv4_single_hop_location_summaries.parent = self
        self.ipv4_single_hop_multi_paths = Bfd.Ipv4SingleHopMultiPaths()
        self.ipv4_single_hop_multi_paths.parent = self
        self.ipv4_single_hop_node_location_summaries = Bfd.Ipv4SingleHopNodeLocationSummaries()
        self.ipv4_single_hop_node_location_summaries.parent = self
        self.ipv4_single_hop_session_briefs = Bfd.Ipv4SingleHopSessionBriefs()
        self.ipv4_single_hop_session_briefs.parent = self
        self.ipv4_single_hop_session_details = Bfd.Ipv4SingleHopSessionDetails()
        self.ipv4_single_hop_session_details.parent = self
        self.ipv4_single_hop_summary = Bfd.Ipv4SingleHopSummary()
        self.ipv4_single_hop_summary.parent = self
        self.ipv4bf_do_mplste_head_counters = Bfd.Ipv4BfDoMplsteHeadCounters()
        self.ipv4bf_do_mplste_head_counters.parent = self
        self.ipv4bf_do_mplste_head_multi_paths = Bfd.Ipv4BfDoMplsteHeadMultiPaths()
        self.ipv4bf_do_mplste_head_multi_paths.parent = self
        self.ipv4bf_do_mplste_head_session_briefs = Bfd.Ipv4BfDoMplsteHeadSessionBriefs()
        self.ipv4bf_do_mplste_head_session_briefs.parent = self
        self.ipv4bf_do_mplste_head_session_details = Bfd.Ipv4BfDoMplsteHeadSessionDetails()
        self.ipv4bf_do_mplste_head_session_details.parent = self
        self.ipv4bf_do_mplste_head_summary = Bfd.Ipv4BfDoMplsteHeadSummary()
        self.ipv4bf_do_mplste_head_summary.parent = self
        self.ipv4bf_do_mplste_tail_counters = Bfd.Ipv4BfDoMplsteTailCounters()
        self.ipv4bf_do_mplste_tail_counters.parent = self
        self.ipv4bf_do_mplste_tail_multi_paths = Bfd.Ipv4BfDoMplsteTailMultiPaths()
        self.ipv4bf_do_mplste_tail_multi_paths.parent = self
        self.ipv4bf_do_mplste_tail_session_briefs = Bfd.Ipv4BfDoMplsteTailSessionBriefs()
        self.ipv4bf_do_mplste_tail_session_briefs.parent = self
        self.ipv4bf_do_mplste_tail_session_details = Bfd.Ipv4BfDoMplsteTailSessionDetails()
        self.ipv4bf_do_mplste_tail_session_details.parent = self
        self.ipv4bf_do_mplste_tail_summary = Bfd.Ipv4BfDoMplsteTailSummary()
        self.ipv4bf_do_mplste_tail_summary.parent = self
        self.ipv4bfd_mplste_head_summary_nodes = Bfd.Ipv4BfdMplsteHeadSummaryNodes()
        self.ipv4bfd_mplste_head_summary_nodes.parent = self
        self.ipv4bfd_mplste_tail_node_summaries = Bfd.Ipv4BfdMplsteTailNodeSummaries()
        self.ipv4bfd_mplste_tail_node_summaries.parent = self
        self.ipv6_multi_hop_counters = Bfd.Ipv6MultiHopCounters()
        self.ipv6_multi_hop_counters.parent = self
        self.ipv6_multi_hop_multi_paths = Bfd.Ipv6MultiHopMultiPaths()
        self.ipv6_multi_hop_multi_paths.parent = self
        self.ipv6_multi_hop_node_location_summaries = Bfd.Ipv6MultiHopNodeLocationSummaries()
        self.ipv6_multi_hop_node_location_summaries.parent = self
        self.ipv6_multi_hop_session_briefs = Bfd.Ipv6MultiHopSessionBriefs()
        self.ipv6_multi_hop_session_briefs.parent = self
        self.ipv6_multi_hop_session_details = Bfd.Ipv6MultiHopSessionDetails()
        self.ipv6_multi_hop_session_details.parent = self
        self.ipv6_multi_hop_summary = Bfd.Ipv6MultiHopSummary()
        self.ipv6_multi_hop_summary.parent = self
        self.ipv6_single_hop_counters = Bfd.Ipv6SingleHopCounters()
        self.ipv6_single_hop_counters.parent = self
        self.ipv6_single_hop_location_summaries = Bfd.Ipv6SingleHopLocationSummaries()
        self.ipv6_single_hop_location_summaries.parent = self
        self.ipv6_single_hop_multi_paths = Bfd.Ipv6SingleHopMultiPaths()
        self.ipv6_single_hop_multi_paths.parent = self
        self.ipv6_single_hop_node_location_summaries = Bfd.Ipv6SingleHopNodeLocationSummaries()
        self.ipv6_single_hop_node_location_summaries.parent = self
        self.ipv6_single_hop_session_briefs = Bfd.Ipv6SingleHopSessionBriefs()
        self.ipv6_single_hop_session_briefs.parent = self
        self.ipv6_single_hop_session_details = Bfd.Ipv6SingleHopSessionDetails()
        self.ipv6_single_hop_session_details.parent = self
        self.ipv6_single_hop_summary = Bfd.Ipv6SingleHopSummary()
        self.ipv6_single_hop_summary.parent = self
        self.label_counters = Bfd.LabelCounters()
        self.label_counters.parent = self
        self.label_multi_paths = Bfd.LabelMultiPaths()
        self.label_multi_paths.parent = self
        self.label_session_briefs = Bfd.LabelSessionBriefs()
        self.label_session_briefs.parent = self
        self.label_session_details = Bfd.LabelSessionDetails()
        self.label_session_details.parent = self
        self.label_summary = Bfd.LabelSummary()
        self.label_summary.parent = self
        self.label_summary_nodes = Bfd.LabelSummaryNodes()
        self.label_summary_nodes.parent = self
        self.relation_briefs = Bfd.RelationBriefs()
        self.relation_briefs.parent = self
        self.relation_details = Bfd.RelationDetails()
        self.relation_details.parent = self
        self.session_briefs = Bfd.SessionBriefs()
        self.session_briefs.parent = self
        self.session_details = Bfd.SessionDetails()
        self.session_details.parent = self
        self.session_mibs = Bfd.SessionMibs()
        self.session_mibs.parent = self
        self.summary = Bfd.Summary()
        self.summary.parent = self


    class LabelSessionBriefs(object):
        """
        Table of brief information about all Label BFD
        sessions in the System
        
        .. attribute:: label_session_brief
        
        	Brief information for a single Label BFD session
        	**type**\: list of    :py:class:`LabelSessionBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSessionBriefs.LabelSessionBrief>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.label_session_brief = YList()
            self.label_session_brief.parent = self
            self.label_session_brief.name = 'label_session_brief'


        class LabelSessionBrief(object):
            """
            Brief information for a single Label BFD
            session
            
            .. attribute:: incoming_label
            
            	Incoming Label
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: interface_name
            
            	Interface Name
            	**type**\:  str
            
            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
            
            .. attribute:: location
            
            	Location
            	**type**\:  str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: node_id
            
            	Location where session is housed
            	**type**\:  str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: session_flags
            
            	Session Flags
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: session_subtype
            
            	Session subtype
            	**type**\:  str
            
            .. attribute:: session_type
            
            	Session type
            	**type**\:   :py:class:`BfdSessionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdSessionEnum>`
            
            .. attribute:: state
            
            	State
            	**type**\:   :py:class:`BfdMgmtSessionStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionStateEnum>`
            
            .. attribute:: status_brief_information
            
            	Brief Status Information
            	**type**\:   :py:class:`StatusBriefInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSessionBriefs.LabelSessionBrief.StatusBriefInformation>`
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.incoming_label = None
                self.interface_name = None
                self.location = None
                self.node_id = None
                self.session_flags = None
                self.session_subtype = None
                self.session_type = None
                self.state = None
                self.status_brief_information = Bfd.LabelSessionBriefs.LabelSessionBrief.StatusBriefInformation()
                self.status_brief_information.parent = self


            class StatusBriefInformation(object):
                """
                Brief Status Information
                
                .. attribute:: async_interval_multiplier
                
                	Async Interval and Detect Multiplier Information
                	**type**\:   :py:class:`AsyncIntervalMultiplier <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSessionBriefs.LabelSessionBrief.StatusBriefInformation.AsyncIntervalMultiplier>`
                
                .. attribute:: echo_interval_multiplier
                
                	Echo Interval and Detect Multiplier Information
                	**type**\:   :py:class:`EchoIntervalMultiplier <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSessionBriefs.LabelSessionBrief.StatusBriefInformation.EchoIntervalMultiplier>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.async_interval_multiplier = Bfd.LabelSessionBriefs.LabelSessionBrief.StatusBriefInformation.AsyncIntervalMultiplier()
                    self.async_interval_multiplier.parent = self
                    self.echo_interval_multiplier = Bfd.LabelSessionBriefs.LabelSessionBrief.StatusBriefInformation.EchoIntervalMultiplier()
                    self.echo_interval_multiplier.parent = self


                class AsyncIntervalMultiplier(object):
                    """
                    Async Interval and Detect Multiplier Information
                    
                    .. attribute:: detection_multiplier
                    
                    	Detection Multiplier
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: detection_time
                    
                    	Detection time in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: negotiated_local_transmit_interval
                    
                    	Negotiated local transmit interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: negotiated_remote_transmit_interval
                    
                    	Negotiated remote transmit interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.detection_multiplier = None
                        self.detection_time = None
                        self.negotiated_local_transmit_interval = None
                        self.negotiated_remote_transmit_interval = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:label-session-briefs/Cisco-IOS-XR-ip-bfd-oper:label-session-brief/Cisco-IOS-XR-ip-bfd-oper:status-brief-information/Cisco-IOS-XR-ip-bfd-oper:async-interval-multiplier'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.detection_multiplier is not None:
                            return True

                        if self.detection_time is not None:
                            return True

                        if self.negotiated_local_transmit_interval is not None:
                            return True

                        if self.negotiated_remote_transmit_interval is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.LabelSessionBriefs.LabelSessionBrief.StatusBriefInformation.AsyncIntervalMultiplier']['meta_info']


                class EchoIntervalMultiplier(object):
                    """
                    Echo Interval and Detect Multiplier Information
                    
                    .. attribute:: detection_multiplier
                    
                    	Detection Multiplier
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: detection_time
                    
                    	Detection time in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: negotiated_transmit_interval
                    
                    	Negotiated transmit interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.detection_multiplier = None
                        self.detection_time = None
                        self.negotiated_transmit_interval = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:label-session-briefs/Cisco-IOS-XR-ip-bfd-oper:label-session-brief/Cisco-IOS-XR-ip-bfd-oper:status-brief-information/Cisco-IOS-XR-ip-bfd-oper:echo-interval-multiplier'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.detection_multiplier is not None:
                            return True

                        if self.detection_time is not None:
                            return True

                        if self.negotiated_transmit_interval is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.LabelSessionBriefs.LabelSessionBrief.StatusBriefInformation.EchoIntervalMultiplier']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:label-session-briefs/Cisco-IOS-XR-ip-bfd-oper:label-session-brief/Cisco-IOS-XR-ip-bfd-oper:status-brief-information'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.async_interval_multiplier is not None and self.async_interval_multiplier._has_data():
                        return True

                    if self.echo_interval_multiplier is not None and self.echo_interval_multiplier._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.LabelSessionBriefs.LabelSessionBrief.StatusBriefInformation']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:label-session-briefs/Cisco-IOS-XR-ip-bfd-oper:label-session-brief'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.incoming_label is not None:
                    return True

                if self.interface_name is not None:
                    return True

                if self.location is not None:
                    return True

                if self.node_id is not None:
                    return True

                if self.session_flags is not None:
                    return True

                if self.session_subtype is not None:
                    return True

                if self.session_type is not None:
                    return True

                if self.state is not None:
                    return True

                if self.status_brief_information is not None and self.status_brief_information._has_data():
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                return meta._meta_table['Bfd.LabelSessionBriefs.LabelSessionBrief']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:label-session-briefs'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.label_session_brief is not None:
                for child_ref in self.label_session_brief:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
            return meta._meta_table['Bfd.LabelSessionBriefs']['meta_info']


    class Ipv4BfDoMplsteTailSummary(object):
        """
        Summary information of IPv4 BFD over MPLS\-TE
        Tail
        
        .. attribute:: session_state
        
        	Statistics of states for sessions
        	**type**\:   :py:class:`SessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailSummary.SessionState>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.session_state = Bfd.Ipv4BfDoMplsteTailSummary.SessionState()
            self.session_state.parent = self


        class SessionState(object):
            """
            Statistics of states for sessions
            
            .. attribute:: down_count
            
            	Number of sessions in down state
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: total_count
            
            	Number of sessions in database
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: unknown_count
            
            	Number of sessions in unknown state
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: up_count
            
            	Number of sessions in up state
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.down_count = None
                self.total_count = None
                self.unknown_count = None
                self.up_count = None

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-summary/Cisco-IOS-XR-ip-bfd-oper:session-state'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.down_count is not None:
                    return True

                if self.total_count is not None:
                    return True

                if self.unknown_count is not None:
                    return True

                if self.up_count is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                return meta._meta_table['Bfd.Ipv4BfDoMplsteTailSummary.SessionState']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-summary'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.session_state is not None and self.session_state._has_data():
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
            return meta._meta_table['Bfd.Ipv4BfDoMplsteTailSummary']['meta_info']


    class Ipv6SingleHopCounters(object):
        """
        IPv6 single hop Counters
        
        .. attribute:: ipv6_single_hop_packet_counters
        
        	Table of IPv6 single hop Packet counters
        	**type**\:   :py:class:`Ipv6SingleHopPacketCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopCounters.Ipv6SingleHopPacketCounters>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.ipv6_single_hop_packet_counters = Bfd.Ipv6SingleHopCounters.Ipv6SingleHopPacketCounters()
            self.ipv6_single_hop_packet_counters.parent = self


        class Ipv6SingleHopPacketCounters(object):
            """
            Table of IPv6 single hop Packet counters
            
            .. attribute:: ipv6_single_hop_packet_counter
            
            	Interface IPv6 single hop Packet counters
            	**type**\: list of    :py:class:`Ipv6SingleHopPacketCounter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopCounters.Ipv6SingleHopPacketCounters.Ipv6SingleHopPacketCounter>`
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.ipv6_single_hop_packet_counter = YList()
                self.ipv6_single_hop_packet_counter.parent = self
                self.ipv6_single_hop_packet_counter.name = 'ipv6_single_hop_packet_counter'


            class Ipv6SingleHopPacketCounter(object):
                """
                Interface IPv6 single hop Packet counters
                
                .. attribute:: interface_name  <key>
                
                	Interface Name
                	**type**\:  str
                
                	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                
                .. attribute:: display_type
                
                	Packet Display Type
                	**type**\:   :py:class:`BfdMgmtPktDisplayEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtPktDisplayEnum>`
                
                .. attribute:: echo_receive_count
                
                	Number of echo packets received
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: echo_transmit_count
                
                	Number of echo packets transmitted
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: hello_receive_count
                
                	Number of Hellos received
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: hello_transmit_count
                
                	Number of Hellos transmitted
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.interface_name = None
                    self.display_type = None
                    self.echo_receive_count = None
                    self.echo_transmit_count = None
                    self.hello_receive_count = None
                    self.hello_transmit_count = None

                @property
                def _common_path(self):
                    if self.interface_name is None:
                        raise YPYModelError('Key property interface_name is None')

                    return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-counters/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-packet-counters/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-packet-counter[Cisco-IOS-XR-ip-bfd-oper:interface-name = ' + str(self.interface_name) + ']'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.interface_name is not None:
                        return True

                    if self.display_type is not None:
                        return True

                    if self.echo_receive_count is not None:
                        return True

                    if self.echo_transmit_count is not None:
                        return True

                    if self.hello_receive_count is not None:
                        return True

                    if self.hello_transmit_count is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.Ipv6SingleHopCounters.Ipv6SingleHopPacketCounters.Ipv6SingleHopPacketCounter']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-counters/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-packet-counters'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.ipv6_single_hop_packet_counter is not None:
                    for child_ref in self.ipv6_single_hop_packet_counter:
                        if child_ref._has_data():
                            return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                return meta._meta_table['Bfd.Ipv6SingleHopCounters.Ipv6SingleHopPacketCounters']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-counters'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.ipv6_single_hop_packet_counters is not None and self.ipv6_single_hop_packet_counters._has_data():
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
            return meta._meta_table['Bfd.Ipv6SingleHopCounters']['meta_info']


    class Counters(object):
        """
        Counters
        
        .. attribute:: packet_counters
        
        	Table of Packet counters
        	**type**\:   :py:class:`PacketCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Counters.PacketCounters>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.packet_counters = Bfd.Counters.PacketCounters()
            self.packet_counters.parent = self


        class PacketCounters(object):
            """
            Table of Packet counters
            
            .. attribute:: packet_counter
            
            	Interface Packet counters
            	**type**\: list of    :py:class:`PacketCounter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Counters.PacketCounters.PacketCounter>`
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.packet_counter = YList()
                self.packet_counter.parent = self
                self.packet_counter.name = 'packet_counter'


            class PacketCounter(object):
                """
                Interface Packet counters
                
                .. attribute:: interface_name  <key>
                
                	Interface Name
                	**type**\:  str
                
                	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                
                .. attribute:: display_type
                
                	Packet Display Type
                	**type**\:   :py:class:`BfdMgmtPktDisplayEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtPktDisplayEnum>`
                
                .. attribute:: echo_receive_count
                
                	Number of echo packets received
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: echo_transmit_count
                
                	Number of echo packets transmitted
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: hello_receive_count
                
                	Number of Hellos received
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: hello_transmit_count
                
                	Number of Hellos transmitted
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.interface_name = None
                    self.display_type = None
                    self.echo_receive_count = None
                    self.echo_transmit_count = None
                    self.hello_receive_count = None
                    self.hello_transmit_count = None

                @property
                def _common_path(self):
                    if self.interface_name is None:
                        raise YPYModelError('Key property interface_name is None')

                    return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:counters/Cisco-IOS-XR-ip-bfd-oper:packet-counters/Cisco-IOS-XR-ip-bfd-oper:packet-counter[Cisco-IOS-XR-ip-bfd-oper:interface-name = ' + str(self.interface_name) + ']'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.interface_name is not None:
                        return True

                    if self.display_type is not None:
                        return True

                    if self.echo_receive_count is not None:
                        return True

                    if self.echo_transmit_count is not None:
                        return True

                    if self.hello_receive_count is not None:
                        return True

                    if self.hello_transmit_count is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.Counters.PacketCounters.PacketCounter']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:counters/Cisco-IOS-XR-ip-bfd-oper:packet-counters'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.packet_counter is not None:
                    for child_ref in self.packet_counter:
                        if child_ref._has_data():
                            return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                return meta._meta_table['Bfd.Counters.PacketCounters']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:counters'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.packet_counters is not None and self.packet_counters._has_data():
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
            return meta._meta_table['Bfd.Counters']['meta_info']


    class ClientDetails(object):
        """
        Table of detailed information about BFD clients
        
        .. attribute:: client_detail
        
        	Detailed information of client
        	**type**\: list of    :py:class:`ClientDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.ClientDetails.ClientDetail>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.client_detail = YList()
            self.client_detail.parent = self
            self.client_detail.name = 'client_detail'


        class ClientDetail(object):
            """
            Detailed information of client
            
            .. attribute:: client_name  <key>
            
            	Client Name
            	**type**\:  str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            .. attribute:: brief
            
            	Brief client information
            	**type**\:   :py:class:`Brief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.ClientDetails.ClientDetail.Brief>`
            
            .. attribute:: flags
            
            	The BFD Client Flags
            	**type**\:   :py:class:`Flags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.ClientDetails.ClientDetail.Flags>`
            
            .. attribute:: recreate_time
            
            	Recreate Time in Seconds
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            	**units**\: second
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.client_name = None
                self.brief = Bfd.ClientDetails.ClientDetail.Brief()
                self.brief.parent = self
                self.flags = Bfd.ClientDetails.ClientDetail.Flags()
                self.flags.parent = self
                self.recreate_time = None


            class Brief(object):
                """
                Brief client information
                
                .. attribute:: name_xr
                
                	Client process name
                	**type**\:  str
                
                	**length:** 0..257
                
                .. attribute:: node_id
                
                	Location where client resides
                	**type**\:  str
                
                	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
                
                .. attribute:: session_count
                
                	Number of sessions created by this client
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.name_xr = None
                    self.node_id = None
                    self.session_count = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ip-bfd-oper:brief'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.name_xr is not None:
                        return True

                    if self.node_id is not None:
                        return True

                    if self.session_count is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.ClientDetails.ClientDetail.Brief']['meta_info']


            class Flags(object):
                """
                The BFD Client Flags
                
                .. attribute:: is_recreate_state
                
                	Client is in Recreate State
                	**type**\:  int
                
                	**range:** \-2147483648..2147483647
                
                .. attribute:: is_zombie_state
                
                	Client is in Zombie State
                	**type**\:  int
                
                	**range:** \-2147483648..2147483647
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.is_recreate_state = None
                    self.is_zombie_state = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ip-bfd-oper:flags'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.is_recreate_state is not None:
                        return True

                    if self.is_zombie_state is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.ClientDetails.ClientDetail.Flags']['meta_info']

            @property
            def _common_path(self):
                if self.client_name is None:
                    raise YPYModelError('Key property client_name is None')

                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:client-details/Cisco-IOS-XR-ip-bfd-oper:client-detail[Cisco-IOS-XR-ip-bfd-oper:client-name = ' + str(self.client_name) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.client_name is not None:
                    return True

                if self.brief is not None and self.brief._has_data():
                    return True

                if self.flags is not None and self.flags._has_data():
                    return True

                if self.recreate_time is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                return meta._meta_table['Bfd.ClientDetails.ClientDetail']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:client-details'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.client_detail is not None:
                for child_ref in self.client_detail:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
            return meta._meta_table['Bfd.ClientDetails']['meta_info']


    class Ipv4SingleHopSummary(object):
        """
        Summary information of BFD IPv4 singlehop
        sessions
        
        .. attribute:: session_state
        
        	Statistics of states for sessions
        	**type**\:   :py:class:`SessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopSummary.SessionState>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.session_state = Bfd.Ipv4SingleHopSummary.SessionState()
            self.session_state.parent = self


        class SessionState(object):
            """
            Statistics of states for sessions
            
            .. attribute:: down_count
            
            	Number of sessions in down state
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: total_count
            
            	Number of sessions in database
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: unknown_count
            
            	Number of sessions in unknown state
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: up_count
            
            	Number of sessions in up state
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.down_count = None
                self.total_count = None
                self.unknown_count = None
                self.up_count = None

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-summary/Cisco-IOS-XR-ip-bfd-oper:session-state'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.down_count is not None:
                    return True

                if self.total_count is not None:
                    return True

                if self.unknown_count is not None:
                    return True

                if self.up_count is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                return meta._meta_table['Bfd.Ipv4SingleHopSummary.SessionState']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-summary'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.session_state is not None and self.session_state._has_data():
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
            return meta._meta_table['Bfd.Ipv4SingleHopSummary']['meta_info']


    class Ipv6SingleHopSummary(object):
        """
        Summary information of BFD IPv6 singlehop
        sessions
        
        .. attribute:: session_state
        
        	Statistics of states for sessions
        	**type**\:   :py:class:`SessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopSummary.SessionState>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.session_state = Bfd.Ipv6SingleHopSummary.SessionState()
            self.session_state.parent = self


        class SessionState(object):
            """
            Statistics of states for sessions
            
            .. attribute:: down_count
            
            	Number of sessions in down state
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: total_count
            
            	Number of sessions in database
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: unknown_count
            
            	Number of sessions in unknown state
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: up_count
            
            	Number of sessions in up state
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.down_count = None
                self.total_count = None
                self.unknown_count = None
                self.up_count = None

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-summary/Cisco-IOS-XR-ip-bfd-oper:session-state'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.down_count is not None:
                    return True

                if self.total_count is not None:
                    return True

                if self.unknown_count is not None:
                    return True

                if self.up_count is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                return meta._meta_table['Bfd.Ipv6SingleHopSummary.SessionState']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-summary'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.session_state is not None and self.session_state._has_data():
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
            return meta._meta_table['Bfd.Ipv6SingleHopSummary']['meta_info']


    class LabelMultiPaths(object):
        """
        Label multipath
        
        .. attribute:: label_multi_path
        
        	Label multipath table
        	**type**\: list of    :py:class:`LabelMultiPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelMultiPaths.LabelMultiPath>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.label_multi_path = YList()
            self.label_multi_path.parent = self
            self.label_multi_path.name = 'label_multi_path'


        class LabelMultiPath(object):
            """
            Label multipath table
            
            .. attribute:: incoming_label
            
            	Incoming Label
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: incoming_label_xr
            
            	Incoming Label
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: interface_name
            
            	Interface Name
            	**type**\:  str
            
            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
            
            .. attribute:: local_discriminator
            
            	Session's Local discriminator
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: location
            
            	Location
            	**type**\:  str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: node_id
            
            	Location where session is housed
            	**type**\:  str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: session_interface_name
            
            	Interface name
            	**type**\:  str
            
            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
            
            .. attribute:: session_subtype
            
            	Session subtype
            	**type**\:  str
            
            .. attribute:: state
            
            	State
            	**type**\:   :py:class:`BfdMgmtSessionStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionStateEnum>`
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.incoming_label = None
                self.incoming_label_xr = None
                self.interface_name = None
                self.local_discriminator = None
                self.location = None
                self.node_id = None
                self.session_interface_name = None
                self.session_subtype = None
                self.state = None

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:label-multi-paths/Cisco-IOS-XR-ip-bfd-oper:label-multi-path'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.incoming_label is not None:
                    return True

                if self.incoming_label_xr is not None:
                    return True

                if self.interface_name is not None:
                    return True

                if self.local_discriminator is not None:
                    return True

                if self.location is not None:
                    return True

                if self.node_id is not None:
                    return True

                if self.session_interface_name is not None:
                    return True

                if self.session_subtype is not None:
                    return True

                if self.state is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                return meta._meta_table['Bfd.LabelMultiPaths.LabelMultiPath']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:label-multi-paths'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.label_multi_path is not None:
                for child_ref in self.label_multi_path:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
            return meta._meta_table['Bfd.LabelMultiPaths']['meta_info']


    class Ipv4MultiHopSessionDetails(object):
        """
        Table of detailed information about all IPv4
        multihop BFD sessions in the System 
        
        .. attribute:: ipv4_multi_hop_session_detail
        
        	Detailed information for a single IPv4 multihop BFD session
        	**type**\: list of    :py:class:`Ipv4MultiHopSessionDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.ipv4_multi_hop_session_detail = YList()
            self.ipv4_multi_hop_session_detail.parent = self
            self.ipv4_multi_hop_session_detail.name = 'ipv4_multi_hop_session_detail'


        class Ipv4MultiHopSessionDetail(object):
            """
            Detailed information for a single IPv4 multihop
            BFD session
            
            .. attribute:: association_information
            
            	Association session information
            	**type**\: list of    :py:class:`AssociationInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.AssociationInformation>`
            
            .. attribute:: destination_address
            
            	Destination Address
            	**type**\: one of the below types:
            
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            
            ----
            	**type**\:  str
            
            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
            
            
            ----
            .. attribute:: location
            
            	Location
            	**type**\:  str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: lsp_ping_info
            
            	LSP Ping Info
            	**type**\:   :py:class:`LspPingInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.LspPingInfo>`
            
            .. attribute:: mp_download_state
            
            	MP Dowload State
            	**type**\:   :py:class:`MpDownloadState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.MpDownloadState>`
            
            .. attribute:: owner_information
            
            	Client applications owning the session
            	**type**\: list of    :py:class:`OwnerInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.OwnerInformation>`
            
            .. attribute:: source_address
            
            	Source Address
            	**type**\: one of the below types:
            
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            
            ----
            	**type**\:  str
            
            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
            
            
            ----
            .. attribute:: status_information
            
            	Session status information
            	**type**\:   :py:class:`StatusInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation>`
            
            .. attribute:: vrf_name
            
            	VRF name
            	**type**\:  str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.association_information = YList()
                self.association_information.parent = self
                self.association_information.name = 'association_information'
                self.destination_address = None
                self.location = None
                self.lsp_ping_info = Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.LspPingInfo()
                self.lsp_ping_info.parent = self
                self.mp_download_state = Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.MpDownloadState()
                self.mp_download_state.parent = self
                self.owner_information = YList()
                self.owner_information.parent = self
                self.owner_information.name = 'owner_information'
                self.source_address = None
                self.status_information = Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation()
                self.status_information.parent = self
                self.vrf_name = None


            class StatusInformation(object):
                """
                Session status information
                
                .. attribute:: async_receive_statistics
                
                	Statistics of Interval between Async Packets Received (in milli\-seconds)
                	**type**\:   :py:class:`AsyncReceiveStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.AsyncReceiveStatistics>`
                
                .. attribute:: async_transmit_statistics
                
                	Statistics of Interval between Async Packets Transmitted (in milli\-seconds)
                	**type**\:   :py:class:`AsyncTransmitStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.AsyncTransmitStatistics>`
                
                .. attribute:: desired_minimum_echo_transmit_interval
                
                	Desired minimum echo transmit interval in milli\-seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: millisecond
                
                .. attribute:: echo_received_statistics
                
                	Statistics of Interval between Echo Packets Received (in milli\-seconds)
                	**type**\:   :py:class:`EchoReceivedStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.EchoReceivedStatistics>`
                
                .. attribute:: echo_transmit_statistics
                
                	Statistics of Interval between Echo Packets Transmitted (in milli\-seconds)
                	**type**\:   :py:class:`EchoTransmitStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.EchoTransmitStatistics>`
                
                .. attribute:: internal_label
                
                	Internal Label
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: last_state_change
                
                	Time since last state change
                	**type**\:   :py:class:`LastStateChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.LastStateChange>`
                
                .. attribute:: latency_average
                
                	Average value of Latency (in micro\-seconds)
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: microsecond
                
                .. attribute:: latency_maximum
                
                	Maximum value of Latency (in micro\-seconds)
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: microsecond
                
                .. attribute:: latency_minimum
                
                	Minimum value of Latency (in micro\-seconds)
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: microsecond
                
                .. attribute:: latency_number
                
                	Number of Latency Samples. Time between Transmit and Receive
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: local_discriminator
                
                	Session's Local discriminator
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: node_id
                
                	Location where session is housed
                	**type**\:  str
                
                	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
                
                .. attribute:: receive_packet
                
                	Receive Packet
                	**type**\:   :py:class:`ReceivePacket <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.ReceivePacket>`
                
                .. attribute:: remote_discriminator
                
                	Session's Remote discriminator
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: remote_negotiated_interval
                
                	Remote Negotiated Interval in milli\-seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: millisecond
                
                .. attribute:: session_subtype
                
                	Session subtype
                	**type**\:  str
                
                .. attribute:: sessiontype
                
                	Session type
                	**type**\:   :py:class:`BfdSessionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdSessionEnum>`
                
                .. attribute:: source_address
                
                	Source address
                	**type**\:   :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.SourceAddress>`
                
                .. attribute:: state
                
                	State
                	**type**\:   :py:class:`BfdMgmtSessionStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionStateEnum>`
                
                .. attribute:: status_brief_information
                
                	Brief Status Information
                	**type**\:   :py:class:`StatusBriefInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.StatusBriefInformation>`
                
                .. attribute:: to_up_state_count
                
                	Number of times session state went to UP
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: transmit_packet
                
                	Transmit Packet
                	**type**\:   :py:class:`TransmitPacket <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.TransmitPacket>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.async_receive_statistics = Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.AsyncReceiveStatistics()
                    self.async_receive_statistics.parent = self
                    self.async_transmit_statistics = Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.AsyncTransmitStatistics()
                    self.async_transmit_statistics.parent = self
                    self.desired_minimum_echo_transmit_interval = None
                    self.echo_received_statistics = Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.EchoReceivedStatistics()
                    self.echo_received_statistics.parent = self
                    self.echo_transmit_statistics = Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.EchoTransmitStatistics()
                    self.echo_transmit_statistics.parent = self
                    self.internal_label = None
                    self.last_state_change = Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.LastStateChange()
                    self.last_state_change.parent = self
                    self.latency_average = None
                    self.latency_maximum = None
                    self.latency_minimum = None
                    self.latency_number = None
                    self.local_discriminator = None
                    self.node_id = None
                    self.receive_packet = Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.ReceivePacket()
                    self.receive_packet.parent = self
                    self.remote_discriminator = None
                    self.remote_negotiated_interval = None
                    self.session_subtype = None
                    self.sessiontype = None
                    self.source_address = Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.SourceAddress()
                    self.source_address.parent = self
                    self.state = None
                    self.status_brief_information = Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.StatusBriefInformation()
                    self.status_brief_information.parent = self
                    self.to_up_state_count = None
                    self.transmit_packet = Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.TransmitPacket()
                    self.transmit_packet.parent = self


                class SourceAddress(object):
                    """
                    Source address
                    
                    .. attribute:: afi
                    
                    	AFI
                    	**type**\:   :py:class:`BfdAfIdEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdAfIdEnum>`
                    
                    .. attribute:: dummy
                    
                    	No Address
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    .. attribute:: ipv4
                    
                    	IPv4 address type
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: ipv6
                    
                    	IPv6 address type
                    	**type**\:  str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.afi = None
                        self.dummy = None
                        self.ipv4 = None
                        self.ipv6 = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:source-address'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.afi is not None:
                            return True

                        if self.dummy is not None:
                            return True

                        if self.ipv4 is not None:
                            return True

                        if self.ipv6 is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.SourceAddress']['meta_info']


                class LastStateChange(object):
                    """
                    Time since last state change
                    
                    .. attribute:: days
                    
                    	Number of days since last session state transition
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: day
                    
                    .. attribute:: hours
                    
                    	Number of hours since last session state transition
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    	**units**\: hour
                    
                    .. attribute:: minutes
                    
                    	Number of mins since last session state transition
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    	**units**\: minute
                    
                    .. attribute:: seconds
                    
                    	Number of seconds since last session state transition
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    	**units**\: second
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.days = None
                        self.hours = None
                        self.minutes = None
                        self.seconds = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:last-state-change'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.days is not None:
                            return True

                        if self.hours is not None:
                            return True

                        if self.minutes is not None:
                            return True

                        if self.seconds is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.LastStateChange']['meta_info']


                class TransmitPacket(object):
                    """
                    Transmit Packet
                    
                    .. attribute:: authentication_present
                    
                    	Requesting authentication for the session
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: control_plane_independent
                    
                    	BFD implementation does not share fate with its control plane
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: demand
                    
                    	Demand mode
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: desired_minimum_transmit_interval
                    
                    	Desired minimum transmit interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: detection_multiplier
                    
                    	Detection Multiplier
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: diagnostic
                    
                    	Diagnostic
                    	**type**\:   :py:class:`BfdMgmtSessionDiagEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionDiagEnum>`
                    
                    .. attribute:: final
                    
                    	Final bit
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: ihear_you
                    
                    	I Hear You (v0)
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: length
                    
                    	Length
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: my_discriminator
                    
                    	My Discriminator
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: poll
                    
                    	Poll bit
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: required_minimum_echo_receive_interval
                    
                    	Required echo receive interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: required_minimum_receive_interval
                    
                    	Required receive interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: state
                    
                    	State (v1)
                    	**type**\:   :py:class:`BfdMgmtSessionStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionStateEnum>`
                    
                    .. attribute:: version
                    
                    	Version
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    .. attribute:: your_discriminator
                    
                    	Your Discriminator
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.authentication_present = None
                        self.control_plane_independent = None
                        self.demand = None
                        self.desired_minimum_transmit_interval = None
                        self.detection_multiplier = None
                        self.diagnostic = None
                        self.final = None
                        self.ihear_you = None
                        self.length = None
                        self.my_discriminator = None
                        self.poll = None
                        self.required_minimum_echo_receive_interval = None
                        self.required_minimum_receive_interval = None
                        self.state = None
                        self.version = None
                        self.your_discriminator = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:transmit-packet'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.authentication_present is not None:
                            return True

                        if self.control_plane_independent is not None:
                            return True

                        if self.demand is not None:
                            return True

                        if self.desired_minimum_transmit_interval is not None:
                            return True

                        if self.detection_multiplier is not None:
                            return True

                        if self.diagnostic is not None:
                            return True

                        if self.final is not None:
                            return True

                        if self.ihear_you is not None:
                            return True

                        if self.length is not None:
                            return True

                        if self.my_discriminator is not None:
                            return True

                        if self.poll is not None:
                            return True

                        if self.required_minimum_echo_receive_interval is not None:
                            return True

                        if self.required_minimum_receive_interval is not None:
                            return True

                        if self.state is not None:
                            return True

                        if self.version is not None:
                            return True

                        if self.your_discriminator is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.TransmitPacket']['meta_info']


                class ReceivePacket(object):
                    """
                    Receive Packet
                    
                    .. attribute:: authentication_present
                    
                    	Requesting authentication for the session
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: control_plane_independent
                    
                    	BFD implementation does not share fate with its control plane
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: demand
                    
                    	Demand mode
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: desired_minimum_transmit_interval
                    
                    	Desired minimum transmit interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: detection_multiplier
                    
                    	Detection Multiplier
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: diagnostic
                    
                    	Diagnostic
                    	**type**\:   :py:class:`BfdMgmtSessionDiagEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionDiagEnum>`
                    
                    .. attribute:: final
                    
                    	Final bit
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: ihear_you
                    
                    	I Hear You (v0)
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: length
                    
                    	Length
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: my_discriminator
                    
                    	My Discriminator
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: poll
                    
                    	Poll bit
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: required_minimum_echo_receive_interval
                    
                    	Required echo receive interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: required_minimum_receive_interval
                    
                    	Required receive interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: state
                    
                    	State (v1)
                    	**type**\:   :py:class:`BfdMgmtSessionStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionStateEnum>`
                    
                    .. attribute:: version
                    
                    	Version
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    .. attribute:: your_discriminator
                    
                    	Your Discriminator
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.authentication_present = None
                        self.control_plane_independent = None
                        self.demand = None
                        self.desired_minimum_transmit_interval = None
                        self.detection_multiplier = None
                        self.diagnostic = None
                        self.final = None
                        self.ihear_you = None
                        self.length = None
                        self.my_discriminator = None
                        self.poll = None
                        self.required_minimum_echo_receive_interval = None
                        self.required_minimum_receive_interval = None
                        self.state = None
                        self.version = None
                        self.your_discriminator = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:receive-packet'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.authentication_present is not None:
                            return True

                        if self.control_plane_independent is not None:
                            return True

                        if self.demand is not None:
                            return True

                        if self.desired_minimum_transmit_interval is not None:
                            return True

                        if self.detection_multiplier is not None:
                            return True

                        if self.diagnostic is not None:
                            return True

                        if self.final is not None:
                            return True

                        if self.ihear_you is not None:
                            return True

                        if self.length is not None:
                            return True

                        if self.my_discriminator is not None:
                            return True

                        if self.poll is not None:
                            return True

                        if self.required_minimum_echo_receive_interval is not None:
                            return True

                        if self.required_minimum_receive_interval is not None:
                            return True

                        if self.state is not None:
                            return True

                        if self.version is not None:
                            return True

                        if self.your_discriminator is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.ReceivePacket']['meta_info']


                class StatusBriefInformation(object):
                    """
                    Brief Status Information
                    
                    .. attribute:: async_interval_multiplier
                    
                    	Async Interval and Detect Multiplier Information
                    	**type**\:   :py:class:`AsyncIntervalMultiplier <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.StatusBriefInformation.AsyncIntervalMultiplier>`
                    
                    .. attribute:: echo_interval_multiplier
                    
                    	Echo Interval and Detect Multiplier Information
                    	**type**\:   :py:class:`EchoIntervalMultiplier <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.StatusBriefInformation.EchoIntervalMultiplier>`
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.async_interval_multiplier = Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.StatusBriefInformation.AsyncIntervalMultiplier()
                        self.async_interval_multiplier.parent = self
                        self.echo_interval_multiplier = Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.StatusBriefInformation.EchoIntervalMultiplier()
                        self.echo_interval_multiplier.parent = self


                    class AsyncIntervalMultiplier(object):
                        """
                        Async Interval and Detect Multiplier Information
                        
                        .. attribute:: detection_multiplier
                        
                        	Detection Multiplier
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: detection_time
                        
                        	Detection time in micro\-seconds
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        .. attribute:: negotiated_local_transmit_interval
                        
                        	Negotiated local transmit interval in micro\-seconds
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        .. attribute:: negotiated_remote_transmit_interval
                        
                        	Negotiated remote transmit interval in micro\-seconds
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        

                        """

                        _prefix = 'ip-bfd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.detection_multiplier = None
                            self.detection_time = None
                            self.negotiated_local_transmit_interval = None
                            self.negotiated_remote_transmit_interval = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:status-brief-information/Cisco-IOS-XR-ip-bfd-oper:async-interval-multiplier'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.detection_multiplier is not None:
                                return True

                            if self.detection_time is not None:
                                return True

                            if self.negotiated_local_transmit_interval is not None:
                                return True

                            if self.negotiated_remote_transmit_interval is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                            return meta._meta_table['Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.StatusBriefInformation.AsyncIntervalMultiplier']['meta_info']


                    class EchoIntervalMultiplier(object):
                        """
                        Echo Interval and Detect Multiplier Information
                        
                        .. attribute:: detection_multiplier
                        
                        	Detection Multiplier
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: detection_time
                        
                        	Detection time in micro\-seconds
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        .. attribute:: negotiated_transmit_interval
                        
                        	Negotiated transmit interval in micro\-seconds
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        

                        """

                        _prefix = 'ip-bfd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.detection_multiplier = None
                            self.detection_time = None
                            self.negotiated_transmit_interval = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:status-brief-information/Cisco-IOS-XR-ip-bfd-oper:echo-interval-multiplier'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.detection_multiplier is not None:
                                return True

                            if self.detection_time is not None:
                                return True

                            if self.negotiated_transmit_interval is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                            return meta._meta_table['Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.StatusBriefInformation.EchoIntervalMultiplier']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:status-brief-information'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.async_interval_multiplier is not None and self.async_interval_multiplier._has_data():
                            return True

                        if self.echo_interval_multiplier is not None and self.echo_interval_multiplier._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.StatusBriefInformation']['meta_info']


                class AsyncTransmitStatistics(object):
                    """
                    Statistics of Interval between Async Packets
                    Transmitted (in milli\-seconds)
                    
                    .. attribute:: average
                    
                    	Average of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: last
                    
                    	Time since last Transmit/Receive (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: maximum
                    
                    	Maximum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: minimum
                    
                    	Minimum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: number
                    
                    	Number of Interval Samples between Packets sent/received
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.average = None
                        self.last = None
                        self.maximum = None
                        self.minimum = None
                        self.number = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:async-transmit-statistics'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.average is not None:
                            return True

                        if self.last is not None:
                            return True

                        if self.maximum is not None:
                            return True

                        if self.minimum is not None:
                            return True

                        if self.number is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.AsyncTransmitStatistics']['meta_info']


                class AsyncReceiveStatistics(object):
                    """
                    Statistics of Interval between Async Packets
                    Received (in milli\-seconds)
                    
                    .. attribute:: average
                    
                    	Average of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: last
                    
                    	Time since last Transmit/Receive (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: maximum
                    
                    	Maximum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: minimum
                    
                    	Minimum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: number
                    
                    	Number of Interval Samples between Packets sent/received
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.average = None
                        self.last = None
                        self.maximum = None
                        self.minimum = None
                        self.number = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:async-receive-statistics'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.average is not None:
                            return True

                        if self.last is not None:
                            return True

                        if self.maximum is not None:
                            return True

                        if self.minimum is not None:
                            return True

                        if self.number is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.AsyncReceiveStatistics']['meta_info']


                class EchoTransmitStatistics(object):
                    """
                    Statistics of Interval between Echo Packets
                    Transmitted (in milli\-seconds)
                    
                    .. attribute:: average
                    
                    	Average of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: last
                    
                    	Time since last Transmit/Receive (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: maximum
                    
                    	Maximum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: minimum
                    
                    	Minimum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: number
                    
                    	Number of Interval Samples between Packets sent/received
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.average = None
                        self.last = None
                        self.maximum = None
                        self.minimum = None
                        self.number = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:echo-transmit-statistics'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.average is not None:
                            return True

                        if self.last is not None:
                            return True

                        if self.maximum is not None:
                            return True

                        if self.minimum is not None:
                            return True

                        if self.number is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.EchoTransmitStatistics']['meta_info']


                class EchoReceivedStatistics(object):
                    """
                    Statistics of Interval between Echo Packets
                    Received (in milli\-seconds)
                    
                    .. attribute:: average
                    
                    	Average of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: last
                    
                    	Time since last Transmit/Receive (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: maximum
                    
                    	Maximum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: minimum
                    
                    	Minimum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: number
                    
                    	Number of Interval Samples between Packets sent/received
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.average = None
                        self.last = None
                        self.maximum = None
                        self.minimum = None
                        self.number = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:echo-received-statistics'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.average is not None:
                            return True

                        if self.last is not None:
                            return True

                        if self.maximum is not None:
                            return True

                        if self.minimum is not None:
                            return True

                        if self.number is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.EchoReceivedStatistics']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.async_receive_statistics is not None and self.async_receive_statistics._has_data():
                        return True

                    if self.async_transmit_statistics is not None and self.async_transmit_statistics._has_data():
                        return True

                    if self.desired_minimum_echo_transmit_interval is not None:
                        return True

                    if self.echo_received_statistics is not None and self.echo_received_statistics._has_data():
                        return True

                    if self.echo_transmit_statistics is not None and self.echo_transmit_statistics._has_data():
                        return True

                    if self.internal_label is not None:
                        return True

                    if self.last_state_change is not None and self.last_state_change._has_data():
                        return True

                    if self.latency_average is not None:
                        return True

                    if self.latency_maximum is not None:
                        return True

                    if self.latency_minimum is not None:
                        return True

                    if self.latency_number is not None:
                        return True

                    if self.local_discriminator is not None:
                        return True

                    if self.node_id is not None:
                        return True

                    if self.receive_packet is not None and self.receive_packet._has_data():
                        return True

                    if self.remote_discriminator is not None:
                        return True

                    if self.remote_negotiated_interval is not None:
                        return True

                    if self.session_subtype is not None:
                        return True

                    if self.sessiontype is not None:
                        return True

                    if self.source_address is not None and self.source_address._has_data():
                        return True

                    if self.state is not None:
                        return True

                    if self.status_brief_information is not None and self.status_brief_information._has_data():
                        return True

                    if self.to_up_state_count is not None:
                        return True

                    if self.transmit_packet is not None and self.transmit_packet._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation']['meta_info']


            class MpDownloadState(object):
                """
                MP Dowload State
                
                .. attribute:: change_time
                
                	Change time
                	**type**\:   :py:class:`ChangeTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.MpDownloadState.ChangeTime>`
                
                .. attribute:: mp_download_state
                
                	MP Download State
                	**type**\:   :py:class:`BfdMpDownloadStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMpDownloadStateEnum>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.change_time = Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.MpDownloadState.ChangeTime()
                    self.change_time.parent = self
                    self.mp_download_state = None


                class ChangeTime(object):
                    """
                    Change time
                    
                    .. attribute:: nanoseconds
                    
                    	nanoseconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: nanosecond
                    
                    .. attribute:: seconds
                    
                    	seconds
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: second
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.nanoseconds = None
                        self.seconds = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:mp-download-state/Cisco-IOS-XR-ip-bfd-oper:change-time'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.nanoseconds is not None:
                            return True

                        if self.seconds is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.MpDownloadState.ChangeTime']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:mp-download-state'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.change_time is not None and self.change_time._has_data():
                        return True

                    if self.mp_download_state is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.MpDownloadState']['meta_info']


            class LspPingInfo(object):
                """
                LSP Ping Info
                
                .. attribute:: lsp_ping_rx_count
                
                	LSP Ping numer of times received
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_ping_rx_last_code
                
                	LSP Ping Rx Last Code
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: lsp_ping_rx_last_discr
                
                	LSP Ping Rx last received discriminator
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_ping_rx_last_output
                
                	LSP Ping Rx Last Output
                	**type**\:  str
                
                .. attribute:: lsp_ping_rx_last_subcode
                
                	LSP Ping Rx Last Subcode
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: lsp_ping_rx_last_time
                
                	LSP Ping last received time
                	**type**\:   :py:class:`LspPingRxLastTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.LspPingInfo.LspPingRxLastTime>`
                
                .. attribute:: lsp_ping_tx_count
                
                	LSP Ping Tx count
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_ping_tx_error_count
                
                	LSP Ping Tx error count
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_ping_tx_last_error_rc
                
                	LSP Ping Tx last error
                	**type**\:  str
                
                .. attribute:: lsp_ping_tx_last_error_time
                
                	LSP Ping last error time
                	**type**\:   :py:class:`LspPingTxLastErrorTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.LspPingInfo.LspPingTxLastErrorTime>`
                
                .. attribute:: lsp_ping_tx_last_rc
                
                	LSP Ping Tx last result
                	**type**\:  str
                
                .. attribute:: lsp_ping_tx_last_time
                
                	LSP Ping last sent time
                	**type**\:   :py:class:`LspPingTxLastTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.LspPingInfo.LspPingTxLastTime>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.lsp_ping_rx_count = None
                    self.lsp_ping_rx_last_code = None
                    self.lsp_ping_rx_last_discr = None
                    self.lsp_ping_rx_last_output = None
                    self.lsp_ping_rx_last_subcode = None
                    self.lsp_ping_rx_last_time = Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.LspPingInfo.LspPingRxLastTime()
                    self.lsp_ping_rx_last_time.parent = self
                    self.lsp_ping_tx_count = None
                    self.lsp_ping_tx_error_count = None
                    self.lsp_ping_tx_last_error_rc = None
                    self.lsp_ping_tx_last_error_time = Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.LspPingInfo.LspPingTxLastErrorTime()
                    self.lsp_ping_tx_last_error_time.parent = self
                    self.lsp_ping_tx_last_rc = None
                    self.lsp_ping_tx_last_time = Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.LspPingInfo.LspPingTxLastTime()
                    self.lsp_ping_tx_last_time.parent = self


                class LspPingTxLastTime(object):
                    """
                    LSP Ping last sent time
                    
                    .. attribute:: nanoseconds
                    
                    	nanoseconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: nanosecond
                    
                    .. attribute:: seconds
                    
                    	seconds
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: second
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.nanoseconds = None
                        self.seconds = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:lsp-ping-info/Cisco-IOS-XR-ip-bfd-oper:lsp-ping-tx-last-time'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.nanoseconds is not None:
                            return True

                        if self.seconds is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.LspPingInfo.LspPingTxLastTime']['meta_info']


                class LspPingTxLastErrorTime(object):
                    """
                    LSP Ping last error time
                    
                    .. attribute:: nanoseconds
                    
                    	nanoseconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: nanosecond
                    
                    .. attribute:: seconds
                    
                    	seconds
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: second
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.nanoseconds = None
                        self.seconds = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:lsp-ping-info/Cisco-IOS-XR-ip-bfd-oper:lsp-ping-tx-last-error-time'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.nanoseconds is not None:
                            return True

                        if self.seconds is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.LspPingInfo.LspPingTxLastErrorTime']['meta_info']


                class LspPingRxLastTime(object):
                    """
                    LSP Ping last received time
                    
                    .. attribute:: nanoseconds
                    
                    	nanoseconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: nanosecond
                    
                    .. attribute:: seconds
                    
                    	seconds
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: second
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.nanoseconds = None
                        self.seconds = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:lsp-ping-info/Cisco-IOS-XR-ip-bfd-oper:lsp-ping-rx-last-time'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.nanoseconds is not None:
                            return True

                        if self.seconds is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.LspPingInfo.LspPingRxLastTime']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:lsp-ping-info'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.lsp_ping_rx_count is not None:
                        return True

                    if self.lsp_ping_rx_last_code is not None:
                        return True

                    if self.lsp_ping_rx_last_discr is not None:
                        return True

                    if self.lsp_ping_rx_last_output is not None:
                        return True

                    if self.lsp_ping_rx_last_subcode is not None:
                        return True

                    if self.lsp_ping_rx_last_time is not None and self.lsp_ping_rx_last_time._has_data():
                        return True

                    if self.lsp_ping_tx_count is not None:
                        return True

                    if self.lsp_ping_tx_error_count is not None:
                        return True

                    if self.lsp_ping_tx_last_error_rc is not None:
                        return True

                    if self.lsp_ping_tx_last_error_time is not None and self.lsp_ping_tx_last_error_time._has_data():
                        return True

                    if self.lsp_ping_tx_last_rc is not None:
                        return True

                    if self.lsp_ping_tx_last_time is not None and self.lsp_ping_tx_last_time._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.LspPingInfo']['meta_info']


            class OwnerInformation(object):
                """
                Client applications owning the session
                
                .. attribute:: adjusted_detection_multiplier
                
                	Adjusted detection multiplier to compute detection time
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: adjusted_interval
                
                	Adjusted minimum transmit interval in milli\-seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: millisecond
                
                .. attribute:: detection_multiplier
                
                	Client specified detection multiplier to compute detection time
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: interval
                
                	Client specified minimum transmit interval in micro\-seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: microsecond
                
                .. attribute:: name
                
                	Client process name
                	**type**\:  str
                
                	**length:** 0..257
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.adjusted_detection_multiplier = None
                    self.adjusted_interval = None
                    self.detection_multiplier = None
                    self.interval = None
                    self.name = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:owner-information'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.adjusted_detection_multiplier is not None:
                        return True

                    if self.adjusted_interval is not None:
                        return True

                    if self.detection_multiplier is not None:
                        return True

                    if self.interval is not None:
                        return True

                    if self.name is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.OwnerInformation']['meta_info']


            class AssociationInformation(object):
                """
                Association session information
                
                .. attribute:: local_discriminator
                
                	Session's Local discriminator
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: owner_information
                
                	Client applications owning the session
                	**type**\: list of    :py:class:`OwnerInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.AssociationInformation.OwnerInformation>`
                
                .. attribute:: session_key
                
                	Session Key
                	**type**\:   :py:class:`SessionKey <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.AssociationInformation.SessionKey>`
                
                .. attribute:: sessiontype
                
                	Session type
                	**type**\:   :py:class:`BfdSessionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdSessionEnum>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.local_discriminator = None
                    self.owner_information = YList()
                    self.owner_information.parent = self
                    self.owner_information.name = 'owner_information'
                    self.session_key = Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.AssociationInformation.SessionKey()
                    self.session_key.parent = self
                    self.sessiontype = None


                class SessionKey(object):
                    """
                    Session Key
                    
                    .. attribute:: bfdfec
                    
                    	Union of FECs
                    	**type**\:   :py:class:`Bfdfec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.AssociationInformation.SessionKey.Bfdfec>`
                    
                    .. attribute:: incoming_label
                    
                    	Incoming Label
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: interface_name
                    
                    	Session Interface Name
                    	**type**\:  str
                    
                    	**length:** 0..64
                    
                    .. attribute:: ip_destination_address
                    
                    	IPv4/v6 dest address
                    	**type**\:   :py:class:`IpDestinationAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.AssociationInformation.SessionKey.IpDestinationAddress>`
                    
                    .. attribute:: ip_source_address
                    
                    	IPv4/v6 source address
                    	**type**\:   :py:class:`IpSourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.AssociationInformation.SessionKey.IpSourceAddress>`
                    
                    .. attribute:: sbfd_enabled
                    
                    	SBFD enable flag
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: sbfd_target_type
                    
                    	SBFD target type
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: session_key_type
                    
                    	Session Key Type
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: target_address
                    
                    	sbfd target address
                    	**type**\:   :py:class:`TargetAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.AssociationInformation.SessionKey.TargetAddress>`
                    
                    .. attribute:: vrf_name
                    
                    	Session VRF Name
                    	**type**\:  str
                    
                    	**length:** 0..120
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.bfdfec = Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.AssociationInformation.SessionKey.Bfdfec()
                        self.bfdfec.parent = self
                        self.incoming_label = None
                        self.interface_name = None
                        self.ip_destination_address = Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.AssociationInformation.SessionKey.IpDestinationAddress()
                        self.ip_destination_address.parent = self
                        self.ip_source_address = Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.AssociationInformation.SessionKey.IpSourceAddress()
                        self.ip_source_address.parent = self
                        self.sbfd_enabled = None
                        self.sbfd_target_type = None
                        self.session_key_type = None
                        self.target_address = Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.AssociationInformation.SessionKey.TargetAddress()
                        self.target_address.parent = self
                        self.vrf_name = None


                    class IpDestinationAddress(object):
                        """
                        IPv4/v6 dest address
                        
                        .. attribute:: afi
                        
                        	AFI
                        	**type**\:   :py:class:`BfdAfIdEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdAfIdEnum>`
                        
                        .. attribute:: dummy
                        
                        	No Address
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: ipv4
                        
                        	IPv4 address type
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: ipv6
                        
                        	IPv6 address type
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-bfd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.afi = None
                            self.dummy = None
                            self.ipv4 = None
                            self.ipv6 = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:session-key/Cisco-IOS-XR-ip-bfd-oper:ip-destination-address'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.afi is not None:
                                return True

                            if self.dummy is not None:
                                return True

                            if self.ipv4 is not None:
                                return True

                            if self.ipv6 is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                            return meta._meta_table['Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.AssociationInformation.SessionKey.IpDestinationAddress']['meta_info']


                    class IpSourceAddress(object):
                        """
                        IPv4/v6 source address
                        
                        .. attribute:: afi
                        
                        	AFI
                        	**type**\:   :py:class:`BfdAfIdEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdAfIdEnum>`
                        
                        .. attribute:: dummy
                        
                        	No Address
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: ipv4
                        
                        	IPv4 address type
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: ipv6
                        
                        	IPv6 address type
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-bfd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.afi = None
                            self.dummy = None
                            self.ipv4 = None
                            self.ipv6 = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:session-key/Cisco-IOS-XR-ip-bfd-oper:ip-source-address'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.afi is not None:
                                return True

                            if self.dummy is not None:
                                return True

                            if self.ipv4 is not None:
                                return True

                            if self.ipv6 is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                            return meta._meta_table['Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.AssociationInformation.SessionKey.IpSourceAddress']['meta_info']


                    class Bfdfec(object):
                        """
                        Union of FECs
                        
                        .. attribute:: bfdfe_ctype
                        
                        	BFDFECType
                        	**type**\:   :py:class:`BfdApiFecEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdApiFecEnum>`
                        
                        .. attribute:: dummy
                        
                        	dummy
                        	**type**\:   :py:class:`Dummy <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.AssociationInformation.SessionKey.Bfdfec.Dummy>`
                        
                        .. attribute:: te_s2l_fec
                        
                        	te s2l fec
                        	**type**\:   :py:class:`TeS2LFec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.AssociationInformation.SessionKey.Bfdfec.TeS2LFec>`
                        
                        

                        """

                        _prefix = 'ip-bfd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.bfdfe_ctype = None
                            self.dummy = Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.AssociationInformation.SessionKey.Bfdfec.Dummy()
                            self.dummy.parent = self
                            self.te_s2l_fec = Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.AssociationInformation.SessionKey.Bfdfec.TeS2LFec()
                            self.te_s2l_fec.parent = self


                        class Dummy(object):
                            """
                            dummy
                            
                            .. attribute:: dummy
                            
                            	dummy
                            	**type**\:  str
                            
                            	**pattern:** ([0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2})\*)?
                            
                            

                            """

                            _prefix = 'ip-bfd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.dummy = None

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:session-key/Cisco-IOS-XR-ip-bfd-oper:bfdfec/Cisco-IOS-XR-ip-bfd-oper:dummy'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.dummy is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                                return meta._meta_table['Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.AssociationInformation.SessionKey.Bfdfec.Dummy']['meta_info']


                        class TeS2LFec(object):
                            """
                            te s2l fec
                            
                            .. attribute:: s2l_fec_ctype
                            
                            	Session identifier (ctype)
                            	**type**\:   :py:class:`MplsLibCEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.MplsLibCEnum>`
                            
                            .. attribute:: s2l_fec_dest
                            
                            	sub\-LSP destination address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: s2l_fec_extended_tunnel_id
                            
                            	Extended tunnel ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: s2l_fec_lsp_id
                            
                            	LSP ID
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: s2l_fec_p2mp_id
                            
                            	P2MP ID
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: s2l_fec_source
                            
                            	LSP source address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: s2l_fec_subgroup_id
                            
                            	sub\-LSP subgroup ID
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: s2l_fec_subgroup_originator
                            
                            	Subgroup Originator
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: s2l_fec_tunnel_id
                            
                            	Tunnel ID
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: s2l_fec_vrf
                            
                            	VRF; currently only for GMPLS tunnels
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'ip-bfd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.s2l_fec_ctype = None
                                self.s2l_fec_dest = None
                                self.s2l_fec_extended_tunnel_id = None
                                self.s2l_fec_lsp_id = None
                                self.s2l_fec_p2mp_id = None
                                self.s2l_fec_source = None
                                self.s2l_fec_subgroup_id = None
                                self.s2l_fec_subgroup_originator = None
                                self.s2l_fec_tunnel_id = None
                                self.s2l_fec_vrf = None

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:session-key/Cisco-IOS-XR-ip-bfd-oper:bfdfec/Cisco-IOS-XR-ip-bfd-oper:te-s2l-fec'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.s2l_fec_ctype is not None:
                                    return True

                                if self.s2l_fec_dest is not None:
                                    return True

                                if self.s2l_fec_extended_tunnel_id is not None:
                                    return True

                                if self.s2l_fec_lsp_id is not None:
                                    return True

                                if self.s2l_fec_p2mp_id is not None:
                                    return True

                                if self.s2l_fec_source is not None:
                                    return True

                                if self.s2l_fec_subgroup_id is not None:
                                    return True

                                if self.s2l_fec_subgroup_originator is not None:
                                    return True

                                if self.s2l_fec_tunnel_id is not None:
                                    return True

                                if self.s2l_fec_vrf is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                                return meta._meta_table['Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.AssociationInformation.SessionKey.Bfdfec.TeS2LFec']['meta_info']

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:session-key/Cisco-IOS-XR-ip-bfd-oper:bfdfec'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.bfdfe_ctype is not None:
                                return True

                            if self.dummy is not None and self.dummy._has_data():
                                return True

                            if self.te_s2l_fec is not None and self.te_s2l_fec._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                            return meta._meta_table['Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.AssociationInformation.SessionKey.Bfdfec']['meta_info']


                    class TargetAddress(object):
                        """
                        sbfd target address
                        
                        .. attribute:: afi
                        
                        	AFI
                        	**type**\:   :py:class:`BfdAfIdEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdAfIdEnum>`
                        
                        .. attribute:: dummy
                        
                        	No Address
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: ipv4
                        
                        	IPv4 address type
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: ipv6
                        
                        	IPv6 address type
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-bfd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.afi = None
                            self.dummy = None
                            self.ipv4 = None
                            self.ipv6 = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:session-key/Cisco-IOS-XR-ip-bfd-oper:target-address'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.afi is not None:
                                return True

                            if self.dummy is not None:
                                return True

                            if self.ipv4 is not None:
                                return True

                            if self.ipv6 is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                            return meta._meta_table['Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.AssociationInformation.SessionKey.TargetAddress']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:session-key'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.bfdfec is not None and self.bfdfec._has_data():
                            return True

                        if self.incoming_label is not None:
                            return True

                        if self.interface_name is not None:
                            return True

                        if self.ip_destination_address is not None and self.ip_destination_address._has_data():
                            return True

                        if self.ip_source_address is not None and self.ip_source_address._has_data():
                            return True

                        if self.sbfd_enabled is not None:
                            return True

                        if self.sbfd_target_type is not None:
                            return True

                        if self.session_key_type is not None:
                            return True

                        if self.target_address is not None and self.target_address._has_data():
                            return True

                        if self.vrf_name is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.AssociationInformation.SessionKey']['meta_info']


                class OwnerInformation(object):
                    """
                    Client applications owning the session
                    
                    .. attribute:: adjusted_detection_multiplier
                    
                    	Adjusted detection multiplier to compute detection time
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: adjusted_interval
                    
                    	Adjusted minimum transmit interval in milli\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: detection_multiplier
                    
                    	Client specified detection multiplier to compute detection time
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: interval
                    
                    	Client specified minimum transmit interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: name
                    
                    	Client process name
                    	**type**\:  str
                    
                    	**length:** 0..257
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.adjusted_detection_multiplier = None
                        self.adjusted_interval = None
                        self.detection_multiplier = None
                        self.interval = None
                        self.name = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:owner-information'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.adjusted_detection_multiplier is not None:
                            return True

                        if self.adjusted_interval is not None:
                            return True

                        if self.detection_multiplier is not None:
                            return True

                        if self.interval is not None:
                            return True

                        if self.name is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.AssociationInformation.OwnerInformation']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.local_discriminator is not None:
                        return True

                    if self.owner_information is not None:
                        for child_ref in self.owner_information:
                            if child_ref._has_data():
                                return True

                    if self.session_key is not None and self.session_key._has_data():
                        return True

                    if self.sessiontype is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.AssociationInformation']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-session-detail'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.association_information is not None:
                    for child_ref in self.association_information:
                        if child_ref._has_data():
                            return True

                if self.destination_address is not None:
                    return True

                if self.location is not None:
                    return True

                if self.lsp_ping_info is not None and self.lsp_ping_info._has_data():
                    return True

                if self.mp_download_state is not None and self.mp_download_state._has_data():
                    return True

                if self.owner_information is not None:
                    for child_ref in self.owner_information:
                        if child_ref._has_data():
                            return True

                if self.source_address is not None:
                    return True

                if self.status_information is not None and self.status_information._has_data():
                    return True

                if self.vrf_name is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                return meta._meta_table['Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-session-details'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.ipv4_multi_hop_session_detail is not None:
                for child_ref in self.ipv4_multi_hop_session_detail:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
            return meta._meta_table['Bfd.Ipv4MultiHopSessionDetails']['meta_info']


    class Ipv4SingleHopSessionDetails(object):
        """
        Table of detailed information about all IPv4
        singlehop BFD sessions in the System 
        
        .. attribute:: ipv4_single_hop_session_detail
        
        	Detailed information for a single IPv4 singlehop BFD session
        	**type**\: list of    :py:class:`Ipv4SingleHopSessionDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.ipv4_single_hop_session_detail = YList()
            self.ipv4_single_hop_session_detail.parent = self
            self.ipv4_single_hop_session_detail.name = 'ipv4_single_hop_session_detail'


        class Ipv4SingleHopSessionDetail(object):
            """
            Detailed information for a single IPv4
            singlehop BFD session
            
            .. attribute:: association_information
            
            	Association session information
            	**type**\: list of    :py:class:`AssociationInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.AssociationInformation>`
            
            .. attribute:: destination_address
            
            	Destination Address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: interface_name
            
            	Interface Name
            	**type**\:  str
            
            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
            
            .. attribute:: location
            
            	Location
            	**type**\:  str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: lsp_ping_info
            
            	LSP Ping Info
            	**type**\:   :py:class:`LspPingInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.LspPingInfo>`
            
            .. attribute:: mp_download_state
            
            	MP Dowload State
            	**type**\:   :py:class:`MpDownloadState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.MpDownloadState>`
            
            .. attribute:: owner_information
            
            	Client applications owning the session
            	**type**\: list of    :py:class:`OwnerInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.OwnerInformation>`
            
            .. attribute:: status_information
            
            	Session status information
            	**type**\:   :py:class:`StatusInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation>`
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.association_information = YList()
                self.association_information.parent = self
                self.association_information.name = 'association_information'
                self.destination_address = None
                self.interface_name = None
                self.location = None
                self.lsp_ping_info = Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.LspPingInfo()
                self.lsp_ping_info.parent = self
                self.mp_download_state = Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.MpDownloadState()
                self.mp_download_state.parent = self
                self.owner_information = YList()
                self.owner_information.parent = self
                self.owner_information.name = 'owner_information'
                self.status_information = Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation()
                self.status_information.parent = self


            class StatusInformation(object):
                """
                Session status information
                
                .. attribute:: async_receive_statistics
                
                	Statistics of Interval between Async Packets Received (in milli\-seconds)
                	**type**\:   :py:class:`AsyncReceiveStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.AsyncReceiveStatistics>`
                
                .. attribute:: async_transmit_statistics
                
                	Statistics of Interval between Async Packets Transmitted (in milli\-seconds)
                	**type**\:   :py:class:`AsyncTransmitStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.AsyncTransmitStatistics>`
                
                .. attribute:: desired_minimum_echo_transmit_interval
                
                	Desired minimum echo transmit interval in milli\-seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: millisecond
                
                .. attribute:: echo_received_statistics
                
                	Statistics of Interval between Echo Packets Received (in milli\-seconds)
                	**type**\:   :py:class:`EchoReceivedStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.EchoReceivedStatistics>`
                
                .. attribute:: echo_transmit_statistics
                
                	Statistics of Interval between Echo Packets Transmitted (in milli\-seconds)
                	**type**\:   :py:class:`EchoTransmitStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.EchoTransmitStatistics>`
                
                .. attribute:: internal_label
                
                	Internal Label
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: last_state_change
                
                	Time since last state change
                	**type**\:   :py:class:`LastStateChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.LastStateChange>`
                
                .. attribute:: latency_average
                
                	Average value of Latency (in micro\-seconds)
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: microsecond
                
                .. attribute:: latency_maximum
                
                	Maximum value of Latency (in micro\-seconds)
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: microsecond
                
                .. attribute:: latency_minimum
                
                	Minimum value of Latency (in micro\-seconds)
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: microsecond
                
                .. attribute:: latency_number
                
                	Number of Latency Samples. Time between Transmit and Receive
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: local_discriminator
                
                	Session's Local discriminator
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: node_id
                
                	Location where session is housed
                	**type**\:  str
                
                	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
                
                .. attribute:: receive_packet
                
                	Receive Packet
                	**type**\:   :py:class:`ReceivePacket <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.ReceivePacket>`
                
                .. attribute:: remote_discriminator
                
                	Session's Remote discriminator
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: remote_negotiated_interval
                
                	Remote Negotiated Interval in milli\-seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: millisecond
                
                .. attribute:: session_subtype
                
                	Session subtype
                	**type**\:  str
                
                .. attribute:: sessiontype
                
                	Session type
                	**type**\:   :py:class:`BfdSessionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdSessionEnum>`
                
                .. attribute:: source_address
                
                	Source address
                	**type**\:   :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.SourceAddress>`
                
                .. attribute:: state
                
                	State
                	**type**\:   :py:class:`BfdMgmtSessionStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionStateEnum>`
                
                .. attribute:: status_brief_information
                
                	Brief Status Information
                	**type**\:   :py:class:`StatusBriefInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.StatusBriefInformation>`
                
                .. attribute:: to_up_state_count
                
                	Number of times session state went to UP
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: transmit_packet
                
                	Transmit Packet
                	**type**\:   :py:class:`TransmitPacket <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.TransmitPacket>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.async_receive_statistics = Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.AsyncReceiveStatistics()
                    self.async_receive_statistics.parent = self
                    self.async_transmit_statistics = Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.AsyncTransmitStatistics()
                    self.async_transmit_statistics.parent = self
                    self.desired_minimum_echo_transmit_interval = None
                    self.echo_received_statistics = Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.EchoReceivedStatistics()
                    self.echo_received_statistics.parent = self
                    self.echo_transmit_statistics = Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.EchoTransmitStatistics()
                    self.echo_transmit_statistics.parent = self
                    self.internal_label = None
                    self.last_state_change = Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.LastStateChange()
                    self.last_state_change.parent = self
                    self.latency_average = None
                    self.latency_maximum = None
                    self.latency_minimum = None
                    self.latency_number = None
                    self.local_discriminator = None
                    self.node_id = None
                    self.receive_packet = Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.ReceivePacket()
                    self.receive_packet.parent = self
                    self.remote_discriminator = None
                    self.remote_negotiated_interval = None
                    self.session_subtype = None
                    self.sessiontype = None
                    self.source_address = Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.SourceAddress()
                    self.source_address.parent = self
                    self.state = None
                    self.status_brief_information = Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.StatusBriefInformation()
                    self.status_brief_information.parent = self
                    self.to_up_state_count = None
                    self.transmit_packet = Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.TransmitPacket()
                    self.transmit_packet.parent = self


                class SourceAddress(object):
                    """
                    Source address
                    
                    .. attribute:: afi
                    
                    	AFI
                    	**type**\:   :py:class:`BfdAfIdEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdAfIdEnum>`
                    
                    .. attribute:: dummy
                    
                    	No Address
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    .. attribute:: ipv4
                    
                    	IPv4 address type
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: ipv6
                    
                    	IPv6 address type
                    	**type**\:  str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.afi = None
                        self.dummy = None
                        self.ipv4 = None
                        self.ipv6 = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:source-address'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.afi is not None:
                            return True

                        if self.dummy is not None:
                            return True

                        if self.ipv4 is not None:
                            return True

                        if self.ipv6 is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.SourceAddress']['meta_info']


                class LastStateChange(object):
                    """
                    Time since last state change
                    
                    .. attribute:: days
                    
                    	Number of days since last session state transition
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: day
                    
                    .. attribute:: hours
                    
                    	Number of hours since last session state transition
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    	**units**\: hour
                    
                    .. attribute:: minutes
                    
                    	Number of mins since last session state transition
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    	**units**\: minute
                    
                    .. attribute:: seconds
                    
                    	Number of seconds since last session state transition
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    	**units**\: second
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.days = None
                        self.hours = None
                        self.minutes = None
                        self.seconds = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:last-state-change'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.days is not None:
                            return True

                        if self.hours is not None:
                            return True

                        if self.minutes is not None:
                            return True

                        if self.seconds is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.LastStateChange']['meta_info']


                class TransmitPacket(object):
                    """
                    Transmit Packet
                    
                    .. attribute:: authentication_present
                    
                    	Requesting authentication for the session
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: control_plane_independent
                    
                    	BFD implementation does not share fate with its control plane
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: demand
                    
                    	Demand mode
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: desired_minimum_transmit_interval
                    
                    	Desired minimum transmit interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: detection_multiplier
                    
                    	Detection Multiplier
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: diagnostic
                    
                    	Diagnostic
                    	**type**\:   :py:class:`BfdMgmtSessionDiagEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionDiagEnum>`
                    
                    .. attribute:: final
                    
                    	Final bit
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: ihear_you
                    
                    	I Hear You (v0)
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: length
                    
                    	Length
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: my_discriminator
                    
                    	My Discriminator
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: poll
                    
                    	Poll bit
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: required_minimum_echo_receive_interval
                    
                    	Required echo receive interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: required_minimum_receive_interval
                    
                    	Required receive interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: state
                    
                    	State (v1)
                    	**type**\:   :py:class:`BfdMgmtSessionStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionStateEnum>`
                    
                    .. attribute:: version
                    
                    	Version
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    .. attribute:: your_discriminator
                    
                    	Your Discriminator
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.authentication_present = None
                        self.control_plane_independent = None
                        self.demand = None
                        self.desired_minimum_transmit_interval = None
                        self.detection_multiplier = None
                        self.diagnostic = None
                        self.final = None
                        self.ihear_you = None
                        self.length = None
                        self.my_discriminator = None
                        self.poll = None
                        self.required_minimum_echo_receive_interval = None
                        self.required_minimum_receive_interval = None
                        self.state = None
                        self.version = None
                        self.your_discriminator = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:transmit-packet'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.authentication_present is not None:
                            return True

                        if self.control_plane_independent is not None:
                            return True

                        if self.demand is not None:
                            return True

                        if self.desired_minimum_transmit_interval is not None:
                            return True

                        if self.detection_multiplier is not None:
                            return True

                        if self.diagnostic is not None:
                            return True

                        if self.final is not None:
                            return True

                        if self.ihear_you is not None:
                            return True

                        if self.length is not None:
                            return True

                        if self.my_discriminator is not None:
                            return True

                        if self.poll is not None:
                            return True

                        if self.required_minimum_echo_receive_interval is not None:
                            return True

                        if self.required_minimum_receive_interval is not None:
                            return True

                        if self.state is not None:
                            return True

                        if self.version is not None:
                            return True

                        if self.your_discriminator is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.TransmitPacket']['meta_info']


                class ReceivePacket(object):
                    """
                    Receive Packet
                    
                    .. attribute:: authentication_present
                    
                    	Requesting authentication for the session
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: control_plane_independent
                    
                    	BFD implementation does not share fate with its control plane
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: demand
                    
                    	Demand mode
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: desired_minimum_transmit_interval
                    
                    	Desired minimum transmit interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: detection_multiplier
                    
                    	Detection Multiplier
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: diagnostic
                    
                    	Diagnostic
                    	**type**\:   :py:class:`BfdMgmtSessionDiagEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionDiagEnum>`
                    
                    .. attribute:: final
                    
                    	Final bit
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: ihear_you
                    
                    	I Hear You (v0)
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: length
                    
                    	Length
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: my_discriminator
                    
                    	My Discriminator
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: poll
                    
                    	Poll bit
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: required_minimum_echo_receive_interval
                    
                    	Required echo receive interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: required_minimum_receive_interval
                    
                    	Required receive interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: state
                    
                    	State (v1)
                    	**type**\:   :py:class:`BfdMgmtSessionStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionStateEnum>`
                    
                    .. attribute:: version
                    
                    	Version
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    .. attribute:: your_discriminator
                    
                    	Your Discriminator
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.authentication_present = None
                        self.control_plane_independent = None
                        self.demand = None
                        self.desired_minimum_transmit_interval = None
                        self.detection_multiplier = None
                        self.diagnostic = None
                        self.final = None
                        self.ihear_you = None
                        self.length = None
                        self.my_discriminator = None
                        self.poll = None
                        self.required_minimum_echo_receive_interval = None
                        self.required_minimum_receive_interval = None
                        self.state = None
                        self.version = None
                        self.your_discriminator = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:receive-packet'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.authentication_present is not None:
                            return True

                        if self.control_plane_independent is not None:
                            return True

                        if self.demand is not None:
                            return True

                        if self.desired_minimum_transmit_interval is not None:
                            return True

                        if self.detection_multiplier is not None:
                            return True

                        if self.diagnostic is not None:
                            return True

                        if self.final is not None:
                            return True

                        if self.ihear_you is not None:
                            return True

                        if self.length is not None:
                            return True

                        if self.my_discriminator is not None:
                            return True

                        if self.poll is not None:
                            return True

                        if self.required_minimum_echo_receive_interval is not None:
                            return True

                        if self.required_minimum_receive_interval is not None:
                            return True

                        if self.state is not None:
                            return True

                        if self.version is not None:
                            return True

                        if self.your_discriminator is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.ReceivePacket']['meta_info']


                class StatusBriefInformation(object):
                    """
                    Brief Status Information
                    
                    .. attribute:: async_interval_multiplier
                    
                    	Async Interval and Detect Multiplier Information
                    	**type**\:   :py:class:`AsyncIntervalMultiplier <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.StatusBriefInformation.AsyncIntervalMultiplier>`
                    
                    .. attribute:: echo_interval_multiplier
                    
                    	Echo Interval and Detect Multiplier Information
                    	**type**\:   :py:class:`EchoIntervalMultiplier <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.StatusBriefInformation.EchoIntervalMultiplier>`
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.async_interval_multiplier = Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.StatusBriefInformation.AsyncIntervalMultiplier()
                        self.async_interval_multiplier.parent = self
                        self.echo_interval_multiplier = Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.StatusBriefInformation.EchoIntervalMultiplier()
                        self.echo_interval_multiplier.parent = self


                    class AsyncIntervalMultiplier(object):
                        """
                        Async Interval and Detect Multiplier Information
                        
                        .. attribute:: detection_multiplier
                        
                        	Detection Multiplier
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: detection_time
                        
                        	Detection time in micro\-seconds
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        .. attribute:: negotiated_local_transmit_interval
                        
                        	Negotiated local transmit interval in micro\-seconds
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        .. attribute:: negotiated_remote_transmit_interval
                        
                        	Negotiated remote transmit interval in micro\-seconds
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        

                        """

                        _prefix = 'ip-bfd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.detection_multiplier = None
                            self.detection_time = None
                            self.negotiated_local_transmit_interval = None
                            self.negotiated_remote_transmit_interval = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:status-brief-information/Cisco-IOS-XR-ip-bfd-oper:async-interval-multiplier'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.detection_multiplier is not None:
                                return True

                            if self.detection_time is not None:
                                return True

                            if self.negotiated_local_transmit_interval is not None:
                                return True

                            if self.negotiated_remote_transmit_interval is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                            return meta._meta_table['Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.StatusBriefInformation.AsyncIntervalMultiplier']['meta_info']


                    class EchoIntervalMultiplier(object):
                        """
                        Echo Interval and Detect Multiplier Information
                        
                        .. attribute:: detection_multiplier
                        
                        	Detection Multiplier
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: detection_time
                        
                        	Detection time in micro\-seconds
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        .. attribute:: negotiated_transmit_interval
                        
                        	Negotiated transmit interval in micro\-seconds
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        

                        """

                        _prefix = 'ip-bfd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.detection_multiplier = None
                            self.detection_time = None
                            self.negotiated_transmit_interval = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:status-brief-information/Cisco-IOS-XR-ip-bfd-oper:echo-interval-multiplier'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.detection_multiplier is not None:
                                return True

                            if self.detection_time is not None:
                                return True

                            if self.negotiated_transmit_interval is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                            return meta._meta_table['Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.StatusBriefInformation.EchoIntervalMultiplier']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:status-brief-information'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.async_interval_multiplier is not None and self.async_interval_multiplier._has_data():
                            return True

                        if self.echo_interval_multiplier is not None and self.echo_interval_multiplier._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.StatusBriefInformation']['meta_info']


                class AsyncTransmitStatistics(object):
                    """
                    Statistics of Interval between Async Packets
                    Transmitted (in milli\-seconds)
                    
                    .. attribute:: average
                    
                    	Average of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: last
                    
                    	Time since last Transmit/Receive (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: maximum
                    
                    	Maximum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: minimum
                    
                    	Minimum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: number
                    
                    	Number of Interval Samples between Packets sent/received
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.average = None
                        self.last = None
                        self.maximum = None
                        self.minimum = None
                        self.number = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:async-transmit-statistics'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.average is not None:
                            return True

                        if self.last is not None:
                            return True

                        if self.maximum is not None:
                            return True

                        if self.minimum is not None:
                            return True

                        if self.number is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.AsyncTransmitStatistics']['meta_info']


                class AsyncReceiveStatistics(object):
                    """
                    Statistics of Interval between Async Packets
                    Received (in milli\-seconds)
                    
                    .. attribute:: average
                    
                    	Average of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: last
                    
                    	Time since last Transmit/Receive (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: maximum
                    
                    	Maximum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: minimum
                    
                    	Minimum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: number
                    
                    	Number of Interval Samples between Packets sent/received
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.average = None
                        self.last = None
                        self.maximum = None
                        self.minimum = None
                        self.number = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:async-receive-statistics'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.average is not None:
                            return True

                        if self.last is not None:
                            return True

                        if self.maximum is not None:
                            return True

                        if self.minimum is not None:
                            return True

                        if self.number is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.AsyncReceiveStatistics']['meta_info']


                class EchoTransmitStatistics(object):
                    """
                    Statistics of Interval between Echo Packets
                    Transmitted (in milli\-seconds)
                    
                    .. attribute:: average
                    
                    	Average of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: last
                    
                    	Time since last Transmit/Receive (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: maximum
                    
                    	Maximum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: minimum
                    
                    	Minimum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: number
                    
                    	Number of Interval Samples between Packets sent/received
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.average = None
                        self.last = None
                        self.maximum = None
                        self.minimum = None
                        self.number = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:echo-transmit-statistics'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.average is not None:
                            return True

                        if self.last is not None:
                            return True

                        if self.maximum is not None:
                            return True

                        if self.minimum is not None:
                            return True

                        if self.number is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.EchoTransmitStatistics']['meta_info']


                class EchoReceivedStatistics(object):
                    """
                    Statistics of Interval between Echo Packets
                    Received (in milli\-seconds)
                    
                    .. attribute:: average
                    
                    	Average of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: last
                    
                    	Time since last Transmit/Receive (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: maximum
                    
                    	Maximum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: minimum
                    
                    	Minimum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: number
                    
                    	Number of Interval Samples between Packets sent/received
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.average = None
                        self.last = None
                        self.maximum = None
                        self.minimum = None
                        self.number = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:echo-received-statistics'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.average is not None:
                            return True

                        if self.last is not None:
                            return True

                        if self.maximum is not None:
                            return True

                        if self.minimum is not None:
                            return True

                        if self.number is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.EchoReceivedStatistics']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.async_receive_statistics is not None and self.async_receive_statistics._has_data():
                        return True

                    if self.async_transmit_statistics is not None and self.async_transmit_statistics._has_data():
                        return True

                    if self.desired_minimum_echo_transmit_interval is not None:
                        return True

                    if self.echo_received_statistics is not None and self.echo_received_statistics._has_data():
                        return True

                    if self.echo_transmit_statistics is not None and self.echo_transmit_statistics._has_data():
                        return True

                    if self.internal_label is not None:
                        return True

                    if self.last_state_change is not None and self.last_state_change._has_data():
                        return True

                    if self.latency_average is not None:
                        return True

                    if self.latency_maximum is not None:
                        return True

                    if self.latency_minimum is not None:
                        return True

                    if self.latency_number is not None:
                        return True

                    if self.local_discriminator is not None:
                        return True

                    if self.node_id is not None:
                        return True

                    if self.receive_packet is not None and self.receive_packet._has_data():
                        return True

                    if self.remote_discriminator is not None:
                        return True

                    if self.remote_negotiated_interval is not None:
                        return True

                    if self.session_subtype is not None:
                        return True

                    if self.sessiontype is not None:
                        return True

                    if self.source_address is not None and self.source_address._has_data():
                        return True

                    if self.state is not None:
                        return True

                    if self.status_brief_information is not None and self.status_brief_information._has_data():
                        return True

                    if self.to_up_state_count is not None:
                        return True

                    if self.transmit_packet is not None and self.transmit_packet._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation']['meta_info']


            class MpDownloadState(object):
                """
                MP Dowload State
                
                .. attribute:: change_time
                
                	Change time
                	**type**\:   :py:class:`ChangeTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.MpDownloadState.ChangeTime>`
                
                .. attribute:: mp_download_state
                
                	MP Download State
                	**type**\:   :py:class:`BfdMpDownloadStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMpDownloadStateEnum>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.change_time = Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.MpDownloadState.ChangeTime()
                    self.change_time.parent = self
                    self.mp_download_state = None


                class ChangeTime(object):
                    """
                    Change time
                    
                    .. attribute:: nanoseconds
                    
                    	nanoseconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: nanosecond
                    
                    .. attribute:: seconds
                    
                    	seconds
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: second
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.nanoseconds = None
                        self.seconds = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:mp-download-state/Cisco-IOS-XR-ip-bfd-oper:change-time'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.nanoseconds is not None:
                            return True

                        if self.seconds is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.MpDownloadState.ChangeTime']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:mp-download-state'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.change_time is not None and self.change_time._has_data():
                        return True

                    if self.mp_download_state is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.MpDownloadState']['meta_info']


            class LspPingInfo(object):
                """
                LSP Ping Info
                
                .. attribute:: lsp_ping_rx_count
                
                	LSP Ping numer of times received
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_ping_rx_last_code
                
                	LSP Ping Rx Last Code
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: lsp_ping_rx_last_discr
                
                	LSP Ping Rx last received discriminator
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_ping_rx_last_output
                
                	LSP Ping Rx Last Output
                	**type**\:  str
                
                .. attribute:: lsp_ping_rx_last_subcode
                
                	LSP Ping Rx Last Subcode
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: lsp_ping_rx_last_time
                
                	LSP Ping last received time
                	**type**\:   :py:class:`LspPingRxLastTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.LspPingInfo.LspPingRxLastTime>`
                
                .. attribute:: lsp_ping_tx_count
                
                	LSP Ping Tx count
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_ping_tx_error_count
                
                	LSP Ping Tx error count
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_ping_tx_last_error_rc
                
                	LSP Ping Tx last error
                	**type**\:  str
                
                .. attribute:: lsp_ping_tx_last_error_time
                
                	LSP Ping last error time
                	**type**\:   :py:class:`LspPingTxLastErrorTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.LspPingInfo.LspPingTxLastErrorTime>`
                
                .. attribute:: lsp_ping_tx_last_rc
                
                	LSP Ping Tx last result
                	**type**\:  str
                
                .. attribute:: lsp_ping_tx_last_time
                
                	LSP Ping last sent time
                	**type**\:   :py:class:`LspPingTxLastTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.LspPingInfo.LspPingTxLastTime>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.lsp_ping_rx_count = None
                    self.lsp_ping_rx_last_code = None
                    self.lsp_ping_rx_last_discr = None
                    self.lsp_ping_rx_last_output = None
                    self.lsp_ping_rx_last_subcode = None
                    self.lsp_ping_rx_last_time = Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.LspPingInfo.LspPingRxLastTime()
                    self.lsp_ping_rx_last_time.parent = self
                    self.lsp_ping_tx_count = None
                    self.lsp_ping_tx_error_count = None
                    self.lsp_ping_tx_last_error_rc = None
                    self.lsp_ping_tx_last_error_time = Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.LspPingInfo.LspPingTxLastErrorTime()
                    self.lsp_ping_tx_last_error_time.parent = self
                    self.lsp_ping_tx_last_rc = None
                    self.lsp_ping_tx_last_time = Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.LspPingInfo.LspPingTxLastTime()
                    self.lsp_ping_tx_last_time.parent = self


                class LspPingTxLastTime(object):
                    """
                    LSP Ping last sent time
                    
                    .. attribute:: nanoseconds
                    
                    	nanoseconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: nanosecond
                    
                    .. attribute:: seconds
                    
                    	seconds
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: second
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.nanoseconds = None
                        self.seconds = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:lsp-ping-info/Cisco-IOS-XR-ip-bfd-oper:lsp-ping-tx-last-time'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.nanoseconds is not None:
                            return True

                        if self.seconds is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.LspPingInfo.LspPingTxLastTime']['meta_info']


                class LspPingTxLastErrorTime(object):
                    """
                    LSP Ping last error time
                    
                    .. attribute:: nanoseconds
                    
                    	nanoseconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: nanosecond
                    
                    .. attribute:: seconds
                    
                    	seconds
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: second
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.nanoseconds = None
                        self.seconds = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:lsp-ping-info/Cisco-IOS-XR-ip-bfd-oper:lsp-ping-tx-last-error-time'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.nanoseconds is not None:
                            return True

                        if self.seconds is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.LspPingInfo.LspPingTxLastErrorTime']['meta_info']


                class LspPingRxLastTime(object):
                    """
                    LSP Ping last received time
                    
                    .. attribute:: nanoseconds
                    
                    	nanoseconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: nanosecond
                    
                    .. attribute:: seconds
                    
                    	seconds
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: second
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.nanoseconds = None
                        self.seconds = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:lsp-ping-info/Cisco-IOS-XR-ip-bfd-oper:lsp-ping-rx-last-time'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.nanoseconds is not None:
                            return True

                        if self.seconds is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.LspPingInfo.LspPingRxLastTime']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:lsp-ping-info'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.lsp_ping_rx_count is not None:
                        return True

                    if self.lsp_ping_rx_last_code is not None:
                        return True

                    if self.lsp_ping_rx_last_discr is not None:
                        return True

                    if self.lsp_ping_rx_last_output is not None:
                        return True

                    if self.lsp_ping_rx_last_subcode is not None:
                        return True

                    if self.lsp_ping_rx_last_time is not None and self.lsp_ping_rx_last_time._has_data():
                        return True

                    if self.lsp_ping_tx_count is not None:
                        return True

                    if self.lsp_ping_tx_error_count is not None:
                        return True

                    if self.lsp_ping_tx_last_error_rc is not None:
                        return True

                    if self.lsp_ping_tx_last_error_time is not None and self.lsp_ping_tx_last_error_time._has_data():
                        return True

                    if self.lsp_ping_tx_last_rc is not None:
                        return True

                    if self.lsp_ping_tx_last_time is not None and self.lsp_ping_tx_last_time._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.LspPingInfo']['meta_info']


            class OwnerInformation(object):
                """
                Client applications owning the session
                
                .. attribute:: adjusted_detection_multiplier
                
                	Adjusted detection multiplier to compute detection time
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: adjusted_interval
                
                	Adjusted minimum transmit interval in milli\-seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: millisecond
                
                .. attribute:: detection_multiplier
                
                	Client specified detection multiplier to compute detection time
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: interval
                
                	Client specified minimum transmit interval in micro\-seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: microsecond
                
                .. attribute:: name
                
                	Client process name
                	**type**\:  str
                
                	**length:** 0..257
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.adjusted_detection_multiplier = None
                    self.adjusted_interval = None
                    self.detection_multiplier = None
                    self.interval = None
                    self.name = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:owner-information'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.adjusted_detection_multiplier is not None:
                        return True

                    if self.adjusted_interval is not None:
                        return True

                    if self.detection_multiplier is not None:
                        return True

                    if self.interval is not None:
                        return True

                    if self.name is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.OwnerInformation']['meta_info']


            class AssociationInformation(object):
                """
                Association session information
                
                .. attribute:: local_discriminator
                
                	Session's Local discriminator
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: owner_information
                
                	Client applications owning the session
                	**type**\: list of    :py:class:`OwnerInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.AssociationInformation.OwnerInformation>`
                
                .. attribute:: session_key
                
                	Session Key
                	**type**\:   :py:class:`SessionKey <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.AssociationInformation.SessionKey>`
                
                .. attribute:: sessiontype
                
                	Session type
                	**type**\:   :py:class:`BfdSessionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdSessionEnum>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.local_discriminator = None
                    self.owner_information = YList()
                    self.owner_information.parent = self
                    self.owner_information.name = 'owner_information'
                    self.session_key = Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.AssociationInformation.SessionKey()
                    self.session_key.parent = self
                    self.sessiontype = None


                class SessionKey(object):
                    """
                    Session Key
                    
                    .. attribute:: bfdfec
                    
                    	Union of FECs
                    	**type**\:   :py:class:`Bfdfec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.AssociationInformation.SessionKey.Bfdfec>`
                    
                    .. attribute:: incoming_label
                    
                    	Incoming Label
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: interface_name
                    
                    	Session Interface Name
                    	**type**\:  str
                    
                    	**length:** 0..64
                    
                    .. attribute:: ip_destination_address
                    
                    	IPv4/v6 dest address
                    	**type**\:   :py:class:`IpDestinationAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.AssociationInformation.SessionKey.IpDestinationAddress>`
                    
                    .. attribute:: ip_source_address
                    
                    	IPv4/v6 source address
                    	**type**\:   :py:class:`IpSourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.AssociationInformation.SessionKey.IpSourceAddress>`
                    
                    .. attribute:: sbfd_enabled
                    
                    	SBFD enable flag
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: sbfd_target_type
                    
                    	SBFD target type
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: session_key_type
                    
                    	Session Key Type
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: target_address
                    
                    	sbfd target address
                    	**type**\:   :py:class:`TargetAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.AssociationInformation.SessionKey.TargetAddress>`
                    
                    .. attribute:: vrf_name
                    
                    	Session VRF Name
                    	**type**\:  str
                    
                    	**length:** 0..120
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.bfdfec = Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.AssociationInformation.SessionKey.Bfdfec()
                        self.bfdfec.parent = self
                        self.incoming_label = None
                        self.interface_name = None
                        self.ip_destination_address = Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.AssociationInformation.SessionKey.IpDestinationAddress()
                        self.ip_destination_address.parent = self
                        self.ip_source_address = Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.AssociationInformation.SessionKey.IpSourceAddress()
                        self.ip_source_address.parent = self
                        self.sbfd_enabled = None
                        self.sbfd_target_type = None
                        self.session_key_type = None
                        self.target_address = Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.AssociationInformation.SessionKey.TargetAddress()
                        self.target_address.parent = self
                        self.vrf_name = None


                    class IpDestinationAddress(object):
                        """
                        IPv4/v6 dest address
                        
                        .. attribute:: afi
                        
                        	AFI
                        	**type**\:   :py:class:`BfdAfIdEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdAfIdEnum>`
                        
                        .. attribute:: dummy
                        
                        	No Address
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: ipv4
                        
                        	IPv4 address type
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: ipv6
                        
                        	IPv6 address type
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-bfd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.afi = None
                            self.dummy = None
                            self.ipv4 = None
                            self.ipv6 = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:session-key/Cisco-IOS-XR-ip-bfd-oper:ip-destination-address'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.afi is not None:
                                return True

                            if self.dummy is not None:
                                return True

                            if self.ipv4 is not None:
                                return True

                            if self.ipv6 is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                            return meta._meta_table['Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.AssociationInformation.SessionKey.IpDestinationAddress']['meta_info']


                    class IpSourceAddress(object):
                        """
                        IPv4/v6 source address
                        
                        .. attribute:: afi
                        
                        	AFI
                        	**type**\:   :py:class:`BfdAfIdEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdAfIdEnum>`
                        
                        .. attribute:: dummy
                        
                        	No Address
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: ipv4
                        
                        	IPv4 address type
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: ipv6
                        
                        	IPv6 address type
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-bfd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.afi = None
                            self.dummy = None
                            self.ipv4 = None
                            self.ipv6 = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:session-key/Cisco-IOS-XR-ip-bfd-oper:ip-source-address'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.afi is not None:
                                return True

                            if self.dummy is not None:
                                return True

                            if self.ipv4 is not None:
                                return True

                            if self.ipv6 is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                            return meta._meta_table['Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.AssociationInformation.SessionKey.IpSourceAddress']['meta_info']


                    class Bfdfec(object):
                        """
                        Union of FECs
                        
                        .. attribute:: bfdfe_ctype
                        
                        	BFDFECType
                        	**type**\:   :py:class:`BfdApiFecEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdApiFecEnum>`
                        
                        .. attribute:: dummy
                        
                        	dummy
                        	**type**\:   :py:class:`Dummy <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.AssociationInformation.SessionKey.Bfdfec.Dummy>`
                        
                        .. attribute:: te_s2l_fec
                        
                        	te s2l fec
                        	**type**\:   :py:class:`TeS2LFec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.AssociationInformation.SessionKey.Bfdfec.TeS2LFec>`
                        
                        

                        """

                        _prefix = 'ip-bfd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.bfdfe_ctype = None
                            self.dummy = Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.AssociationInformation.SessionKey.Bfdfec.Dummy()
                            self.dummy.parent = self
                            self.te_s2l_fec = Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.AssociationInformation.SessionKey.Bfdfec.TeS2LFec()
                            self.te_s2l_fec.parent = self


                        class Dummy(object):
                            """
                            dummy
                            
                            .. attribute:: dummy
                            
                            	dummy
                            	**type**\:  str
                            
                            	**pattern:** ([0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2})\*)?
                            
                            

                            """

                            _prefix = 'ip-bfd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.dummy = None

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:session-key/Cisco-IOS-XR-ip-bfd-oper:bfdfec/Cisco-IOS-XR-ip-bfd-oper:dummy'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.dummy is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                                return meta._meta_table['Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.AssociationInformation.SessionKey.Bfdfec.Dummy']['meta_info']


                        class TeS2LFec(object):
                            """
                            te s2l fec
                            
                            .. attribute:: s2l_fec_ctype
                            
                            	Session identifier (ctype)
                            	**type**\:   :py:class:`MplsLibCEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.MplsLibCEnum>`
                            
                            .. attribute:: s2l_fec_dest
                            
                            	sub\-LSP destination address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: s2l_fec_extended_tunnel_id
                            
                            	Extended tunnel ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: s2l_fec_lsp_id
                            
                            	LSP ID
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: s2l_fec_p2mp_id
                            
                            	P2MP ID
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: s2l_fec_source
                            
                            	LSP source address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: s2l_fec_subgroup_id
                            
                            	sub\-LSP subgroup ID
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: s2l_fec_subgroup_originator
                            
                            	Subgroup Originator
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: s2l_fec_tunnel_id
                            
                            	Tunnel ID
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: s2l_fec_vrf
                            
                            	VRF; currently only for GMPLS tunnels
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'ip-bfd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.s2l_fec_ctype = None
                                self.s2l_fec_dest = None
                                self.s2l_fec_extended_tunnel_id = None
                                self.s2l_fec_lsp_id = None
                                self.s2l_fec_p2mp_id = None
                                self.s2l_fec_source = None
                                self.s2l_fec_subgroup_id = None
                                self.s2l_fec_subgroup_originator = None
                                self.s2l_fec_tunnel_id = None
                                self.s2l_fec_vrf = None

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:session-key/Cisco-IOS-XR-ip-bfd-oper:bfdfec/Cisco-IOS-XR-ip-bfd-oper:te-s2l-fec'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.s2l_fec_ctype is not None:
                                    return True

                                if self.s2l_fec_dest is not None:
                                    return True

                                if self.s2l_fec_extended_tunnel_id is not None:
                                    return True

                                if self.s2l_fec_lsp_id is not None:
                                    return True

                                if self.s2l_fec_p2mp_id is not None:
                                    return True

                                if self.s2l_fec_source is not None:
                                    return True

                                if self.s2l_fec_subgroup_id is not None:
                                    return True

                                if self.s2l_fec_subgroup_originator is not None:
                                    return True

                                if self.s2l_fec_tunnel_id is not None:
                                    return True

                                if self.s2l_fec_vrf is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                                return meta._meta_table['Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.AssociationInformation.SessionKey.Bfdfec.TeS2LFec']['meta_info']

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:session-key/Cisco-IOS-XR-ip-bfd-oper:bfdfec'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.bfdfe_ctype is not None:
                                return True

                            if self.dummy is not None and self.dummy._has_data():
                                return True

                            if self.te_s2l_fec is not None and self.te_s2l_fec._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                            return meta._meta_table['Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.AssociationInformation.SessionKey.Bfdfec']['meta_info']


                    class TargetAddress(object):
                        """
                        sbfd target address
                        
                        .. attribute:: afi
                        
                        	AFI
                        	**type**\:   :py:class:`BfdAfIdEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdAfIdEnum>`
                        
                        .. attribute:: dummy
                        
                        	No Address
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: ipv4
                        
                        	IPv4 address type
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: ipv6
                        
                        	IPv6 address type
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-bfd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.afi = None
                            self.dummy = None
                            self.ipv4 = None
                            self.ipv6 = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:session-key/Cisco-IOS-XR-ip-bfd-oper:target-address'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.afi is not None:
                                return True

                            if self.dummy is not None:
                                return True

                            if self.ipv4 is not None:
                                return True

                            if self.ipv6 is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                            return meta._meta_table['Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.AssociationInformation.SessionKey.TargetAddress']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:session-key'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.bfdfec is not None and self.bfdfec._has_data():
                            return True

                        if self.incoming_label is not None:
                            return True

                        if self.interface_name is not None:
                            return True

                        if self.ip_destination_address is not None and self.ip_destination_address._has_data():
                            return True

                        if self.ip_source_address is not None and self.ip_source_address._has_data():
                            return True

                        if self.sbfd_enabled is not None:
                            return True

                        if self.sbfd_target_type is not None:
                            return True

                        if self.session_key_type is not None:
                            return True

                        if self.target_address is not None and self.target_address._has_data():
                            return True

                        if self.vrf_name is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.AssociationInformation.SessionKey']['meta_info']


                class OwnerInformation(object):
                    """
                    Client applications owning the session
                    
                    .. attribute:: adjusted_detection_multiplier
                    
                    	Adjusted detection multiplier to compute detection time
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: adjusted_interval
                    
                    	Adjusted minimum transmit interval in milli\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: detection_multiplier
                    
                    	Client specified detection multiplier to compute detection time
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: interval
                    
                    	Client specified minimum transmit interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: name
                    
                    	Client process name
                    	**type**\:  str
                    
                    	**length:** 0..257
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.adjusted_detection_multiplier = None
                        self.adjusted_interval = None
                        self.detection_multiplier = None
                        self.interval = None
                        self.name = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:owner-information'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.adjusted_detection_multiplier is not None:
                            return True

                        if self.adjusted_interval is not None:
                            return True

                        if self.detection_multiplier is not None:
                            return True

                        if self.interval is not None:
                            return True

                        if self.name is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.AssociationInformation.OwnerInformation']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.local_discriminator is not None:
                        return True

                    if self.owner_information is not None:
                        for child_ref in self.owner_information:
                            if child_ref._has_data():
                                return True

                    if self.session_key is not None and self.session_key._has_data():
                        return True

                    if self.sessiontype is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.AssociationInformation']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-session-detail'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.association_information is not None:
                    for child_ref in self.association_information:
                        if child_ref._has_data():
                            return True

                if self.destination_address is not None:
                    return True

                if self.interface_name is not None:
                    return True

                if self.location is not None:
                    return True

                if self.lsp_ping_info is not None and self.lsp_ping_info._has_data():
                    return True

                if self.mp_download_state is not None and self.mp_download_state._has_data():
                    return True

                if self.owner_information is not None:
                    for child_ref in self.owner_information:
                        if child_ref._has_data():
                            return True

                if self.status_information is not None and self.status_information._has_data():
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                return meta._meta_table['Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-session-details'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.ipv4_single_hop_session_detail is not None:
                for child_ref in self.ipv4_single_hop_session_detail:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
            return meta._meta_table['Bfd.Ipv4SingleHopSessionDetails']['meta_info']


    class Ipv4MultiHopSessionBriefs(object):
        """
        Table of brief information about all IPv4
        multihop BFD sessions in the System
        
        .. attribute:: ipv4_multi_hop_session_brief
        
        	Brief information for a single IPv4 multihop BFD session
        	**type**\: list of    :py:class:`Ipv4MultiHopSessionBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopSessionBriefs.Ipv4MultiHopSessionBrief>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.ipv4_multi_hop_session_brief = YList()
            self.ipv4_multi_hop_session_brief.parent = self
            self.ipv4_multi_hop_session_brief.name = 'ipv4_multi_hop_session_brief'


        class Ipv4MultiHopSessionBrief(object):
            """
            Brief information for a single IPv4 multihop
            BFD session
            
            .. attribute:: destination_address
            
            	Destination Address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: location
            
            	Location
            	**type**\:  str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: node_id
            
            	Location where session is housed
            	**type**\:  str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: session_flags
            
            	Session Flags
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: session_subtype
            
            	Session subtype
            	**type**\:  str
            
            .. attribute:: session_type
            
            	Session type
            	**type**\:   :py:class:`BfdSessionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdSessionEnum>`
            
            .. attribute:: source_address
            
            	Source Address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: state
            
            	State
            	**type**\:   :py:class:`BfdMgmtSessionStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionStateEnum>`
            
            .. attribute:: status_brief_information
            
            	Brief Status Information
            	**type**\:   :py:class:`StatusBriefInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopSessionBriefs.Ipv4MultiHopSessionBrief.StatusBriefInformation>`
            
            .. attribute:: vrf_name
            
            	VRF name
            	**type**\:  str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.destination_address = None
                self.location = None
                self.node_id = None
                self.session_flags = None
                self.session_subtype = None
                self.session_type = None
                self.source_address = None
                self.state = None
                self.status_brief_information = Bfd.Ipv4MultiHopSessionBriefs.Ipv4MultiHopSessionBrief.StatusBriefInformation()
                self.status_brief_information.parent = self
                self.vrf_name = None


            class StatusBriefInformation(object):
                """
                Brief Status Information
                
                .. attribute:: async_interval_multiplier
                
                	Async Interval and Detect Multiplier Information
                	**type**\:   :py:class:`AsyncIntervalMultiplier <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopSessionBriefs.Ipv4MultiHopSessionBrief.StatusBriefInformation.AsyncIntervalMultiplier>`
                
                .. attribute:: echo_interval_multiplier
                
                	Echo Interval and Detect Multiplier Information
                	**type**\:   :py:class:`EchoIntervalMultiplier <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopSessionBriefs.Ipv4MultiHopSessionBrief.StatusBriefInformation.EchoIntervalMultiplier>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.async_interval_multiplier = Bfd.Ipv4MultiHopSessionBriefs.Ipv4MultiHopSessionBrief.StatusBriefInformation.AsyncIntervalMultiplier()
                    self.async_interval_multiplier.parent = self
                    self.echo_interval_multiplier = Bfd.Ipv4MultiHopSessionBriefs.Ipv4MultiHopSessionBrief.StatusBriefInformation.EchoIntervalMultiplier()
                    self.echo_interval_multiplier.parent = self


                class AsyncIntervalMultiplier(object):
                    """
                    Async Interval and Detect Multiplier Information
                    
                    .. attribute:: detection_multiplier
                    
                    	Detection Multiplier
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: detection_time
                    
                    	Detection time in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: negotiated_local_transmit_interval
                    
                    	Negotiated local transmit interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: negotiated_remote_transmit_interval
                    
                    	Negotiated remote transmit interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.detection_multiplier = None
                        self.detection_time = None
                        self.negotiated_local_transmit_interval = None
                        self.negotiated_remote_transmit_interval = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-session-briefs/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-session-brief/Cisco-IOS-XR-ip-bfd-oper:status-brief-information/Cisco-IOS-XR-ip-bfd-oper:async-interval-multiplier'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.detection_multiplier is not None:
                            return True

                        if self.detection_time is not None:
                            return True

                        if self.negotiated_local_transmit_interval is not None:
                            return True

                        if self.negotiated_remote_transmit_interval is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv4MultiHopSessionBriefs.Ipv4MultiHopSessionBrief.StatusBriefInformation.AsyncIntervalMultiplier']['meta_info']


                class EchoIntervalMultiplier(object):
                    """
                    Echo Interval and Detect Multiplier Information
                    
                    .. attribute:: detection_multiplier
                    
                    	Detection Multiplier
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: detection_time
                    
                    	Detection time in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: negotiated_transmit_interval
                    
                    	Negotiated transmit interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.detection_multiplier = None
                        self.detection_time = None
                        self.negotiated_transmit_interval = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-session-briefs/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-session-brief/Cisco-IOS-XR-ip-bfd-oper:status-brief-information/Cisco-IOS-XR-ip-bfd-oper:echo-interval-multiplier'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.detection_multiplier is not None:
                            return True

                        if self.detection_time is not None:
                            return True

                        if self.negotiated_transmit_interval is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv4MultiHopSessionBriefs.Ipv4MultiHopSessionBrief.StatusBriefInformation.EchoIntervalMultiplier']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-session-briefs/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-session-brief/Cisco-IOS-XR-ip-bfd-oper:status-brief-information'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.async_interval_multiplier is not None and self.async_interval_multiplier._has_data():
                        return True

                    if self.echo_interval_multiplier is not None and self.echo_interval_multiplier._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.Ipv4MultiHopSessionBriefs.Ipv4MultiHopSessionBrief.StatusBriefInformation']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-session-briefs/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-session-brief'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.destination_address is not None:
                    return True

                if self.location is not None:
                    return True

                if self.node_id is not None:
                    return True

                if self.session_flags is not None:
                    return True

                if self.session_subtype is not None:
                    return True

                if self.session_type is not None:
                    return True

                if self.source_address is not None:
                    return True

                if self.state is not None:
                    return True

                if self.status_brief_information is not None and self.status_brief_information._has_data():
                    return True

                if self.vrf_name is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                return meta._meta_table['Bfd.Ipv4MultiHopSessionBriefs.Ipv4MultiHopSessionBrief']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-session-briefs'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.ipv4_multi_hop_session_brief is not None:
                for child_ref in self.ipv4_multi_hop_session_brief:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
            return meta._meta_table['Bfd.Ipv4MultiHopSessionBriefs']['meta_info']


    class GenericSummaries(object):
        """
        Generic summary information about BFD location
        
        .. attribute:: generic_summary
        
        	Generic summary information for bfd location table
        	**type**\: list of    :py:class:`GenericSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.GenericSummaries.GenericSummary>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.generic_summary = YList()
            self.generic_summary.parent = self
            self.generic_summary.name = 'generic_summary'


        class GenericSummary(object):
            """
            Generic summary information for bfd location
            table
            
            .. attribute:: location  <key>
            
            	Location
            	**type**\:  str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: max_session_number
            
            	Max Session Number
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: mp_session_number
            
            	MP Session Number
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: node_id
            
            	Node ID
            	**type**\:  str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: pps_allocated_value
            
            	Allocated PPS value
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: pps_max_value
            
            	Max PPS value
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: ppsmp_allocated_value
            
            	Allocated MP PPS value
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: ppsmp_max_value
            
            	Max MP PPS value
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: total_session_number
            
            	Total Session Number
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.location = None
                self.max_session_number = None
                self.mp_session_number = None
                self.node_id = None
                self.pps_allocated_value = None
                self.pps_max_value = None
                self.ppsmp_allocated_value = None
                self.ppsmp_max_value = None
                self.total_session_number = None

            @property
            def _common_path(self):
                if self.location is None:
                    raise YPYModelError('Key property location is None')

                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:generic-summaries/Cisco-IOS-XR-ip-bfd-oper:generic-summary[Cisco-IOS-XR-ip-bfd-oper:location = ' + str(self.location) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.location is not None:
                    return True

                if self.max_session_number is not None:
                    return True

                if self.mp_session_number is not None:
                    return True

                if self.node_id is not None:
                    return True

                if self.pps_allocated_value is not None:
                    return True

                if self.pps_max_value is not None:
                    return True

                if self.ppsmp_allocated_value is not None:
                    return True

                if self.ppsmp_max_value is not None:
                    return True

                if self.total_session_number is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                return meta._meta_table['Bfd.GenericSummaries.GenericSummary']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:generic-summaries'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.generic_summary is not None:
                for child_ref in self.generic_summary:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
            return meta._meta_table['Bfd.GenericSummaries']['meta_info']


    class Ipv6SingleHopMultiPaths(object):
        """
        IPv6 single hop multipath
        
        .. attribute:: ipv6_single_hop_multi_path
        
        	IPv6 single hop multipath table
        	**type**\: list of    :py:class:`Ipv6SingleHopMultiPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopMultiPaths.Ipv6SingleHopMultiPath>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.ipv6_single_hop_multi_path = YList()
            self.ipv6_single_hop_multi_path.parent = self
            self.ipv6_single_hop_multi_path.name = 'ipv6_single_hop_multi_path'


        class Ipv6SingleHopMultiPath(object):
            """
            IPv6 single hop multipath table
            
            .. attribute:: destination_address
            
            	Destination address
            	**type**\: one of the below types:
            
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            
            ----
            	**type**\:  str
            
            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
            
            
            ----
            .. attribute:: incoming_label_xr
            
            	Incoming Label
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: interface_name
            
            	Interface name
            	**type**\:  str
            
            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
            
            .. attribute:: local_discriminator
            
            	Session's Local discriminator
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: location
            
            	Location
            	**type**\:  str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: node_id
            
            	Location where session is housed
            	**type**\:  str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: session_interface_name
            
            	Interface name
            	**type**\:  str
            
            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
            
            .. attribute:: session_subtype
            
            	Session subtype
            	**type**\:  str
            
            .. attribute:: state
            
            	State
            	**type**\:   :py:class:`BfdMgmtSessionStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionStateEnum>`
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.destination_address = None
                self.incoming_label_xr = None
                self.interface_name = None
                self.local_discriminator = None
                self.location = None
                self.node_id = None
                self.session_interface_name = None
                self.session_subtype = None
                self.state = None

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-multi-paths/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-multi-path'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.destination_address is not None:
                    return True

                if self.incoming_label_xr is not None:
                    return True

                if self.interface_name is not None:
                    return True

                if self.local_discriminator is not None:
                    return True

                if self.location is not None:
                    return True

                if self.node_id is not None:
                    return True

                if self.session_interface_name is not None:
                    return True

                if self.session_subtype is not None:
                    return True

                if self.state is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                return meta._meta_table['Bfd.Ipv6SingleHopMultiPaths.Ipv6SingleHopMultiPath']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-multi-paths'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.ipv6_single_hop_multi_path is not None:
                for child_ref in self.ipv6_single_hop_multi_path:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
            return meta._meta_table['Bfd.Ipv6SingleHopMultiPaths']['meta_info']


    class Ipv4SingleHopNodeLocationSummaries(object):
        """
        Table of summary information about BFD IPv4
        singlehop sessions per location
        
        .. attribute:: ipv4_single_hop_node_location_summary
        
        	Summary information for BFD IPv4 singlehop sessions for location
        	**type**\: list of    :py:class:`Ipv4SingleHopNodeLocationSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopNodeLocationSummaries.Ipv4SingleHopNodeLocationSummary>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.ipv4_single_hop_node_location_summary = YList()
            self.ipv4_single_hop_node_location_summary.parent = self
            self.ipv4_single_hop_node_location_summary.name = 'ipv4_single_hop_node_location_summary'


        class Ipv4SingleHopNodeLocationSummary(object):
            """
            Summary information for BFD IPv4 singlehop
            sessions for location
            
            .. attribute:: location  <key>
            
            	Location
            	**type**\:  str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: session_state
            
            	Statistics of states for sessions
            	**type**\:   :py:class:`SessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopNodeLocationSummaries.Ipv4SingleHopNodeLocationSummary.SessionState>`
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.location = None
                self.session_state = Bfd.Ipv4SingleHopNodeLocationSummaries.Ipv4SingleHopNodeLocationSummary.SessionState()
                self.session_state.parent = self


            class SessionState(object):
                """
                Statistics of states for sessions
                
                .. attribute:: down_count
                
                	Number of sessions in down state
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: retry_count
                
                	Number of sessions in retry state
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: standby_count
                
                	Number of sessions in standby state
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: total_count
                
                	Number of sessions in database
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: unknown_count
                
                	Number of sessions in unknown state
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: up_count
                
                	Number of sessions in up state
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.down_count = None
                    self.retry_count = None
                    self.standby_count = None
                    self.total_count = None
                    self.unknown_count = None
                    self.up_count = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ip-bfd-oper:session-state'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.down_count is not None:
                        return True

                    if self.retry_count is not None:
                        return True

                    if self.standby_count is not None:
                        return True

                    if self.total_count is not None:
                        return True

                    if self.unknown_count is not None:
                        return True

                    if self.up_count is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.Ipv4SingleHopNodeLocationSummaries.Ipv4SingleHopNodeLocationSummary.SessionState']['meta_info']

            @property
            def _common_path(self):
                if self.location is None:
                    raise YPYModelError('Key property location is None')

                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-node-location-summaries/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-node-location-summary[Cisco-IOS-XR-ip-bfd-oper:location = ' + str(self.location) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.location is not None:
                    return True

                if self.session_state is not None and self.session_state._has_data():
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                return meta._meta_table['Bfd.Ipv4SingleHopNodeLocationSummaries.Ipv4SingleHopNodeLocationSummary']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-node-location-summaries'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.ipv4_single_hop_node_location_summary is not None:
                for child_ref in self.ipv4_single_hop_node_location_summary:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
            return meta._meta_table['Bfd.Ipv4SingleHopNodeLocationSummaries']['meta_info']


    class LabelSummary(object):
        """
        Summary information of Label BFD
        
        .. attribute:: session_state
        
        	Statistics of states for sessions
        	**type**\:   :py:class:`SessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSummary.SessionState>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.session_state = Bfd.LabelSummary.SessionState()
            self.session_state.parent = self


        class SessionState(object):
            """
            Statistics of states for sessions
            
            .. attribute:: down_count
            
            	Number of sessions in down state
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: total_count
            
            	Number of sessions in database
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: unknown_count
            
            	Number of sessions in unknown state
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: up_count
            
            	Number of sessions in up state
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.down_count = None
                self.total_count = None
                self.unknown_count = None
                self.up_count = None

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:label-summary/Cisco-IOS-XR-ip-bfd-oper:session-state'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.down_count is not None:
                    return True

                if self.total_count is not None:
                    return True

                if self.unknown_count is not None:
                    return True

                if self.up_count is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                return meta._meta_table['Bfd.LabelSummary.SessionState']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:label-summary'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.session_state is not None and self.session_state._has_data():
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
            return meta._meta_table['Bfd.LabelSummary']['meta_info']


    class Ipv4BfDoMplsteHeadSessionBriefs(object):
        """
        Table of brief information about all IPv4 BFD
        over MPLS\-TE Head sessions in the System
        
        .. attribute:: ipv4bf_do_mplste_head_session_brief
        
        	Brief information for a single IPv4 BFD over MPLS\-TE Head session
        	**type**\: list of    :py:class:`Ipv4BfDoMplsteHeadSessionBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadSessionBriefs.Ipv4BfDoMplsteHeadSessionBrief>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.ipv4bf_do_mplste_head_session_brief = YList()
            self.ipv4bf_do_mplste_head_session_brief.parent = self
            self.ipv4bf_do_mplste_head_session_brief.name = 'ipv4bf_do_mplste_head_session_brief'


        class Ipv4BfDoMplsteHeadSessionBrief(object):
            """
            Brief information for a single IPv4 BFD over
            MPLS\-TE Head session
            
            .. attribute:: fe_ctype
            
            	FEC Type
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: fec_ctype
            
            	FEC C Type
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: fec_destination
            
            	FEC Destination
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: fec_extended_tunnel_id
            
            	FEC Extended Tunnel ID
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: fec_source
            
            	FEC Source
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: fec_subgroup_id
            
            	FEC Subgroup ID
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: fec_subgroup_originator
            
            	FEC Subgroup originator
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: fec_tunnel_id
            
            	FEC Tunnel ID
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: feclspid
            
            	FEC LSP ID
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: fecp2mpid
            
            	FEC P2MP ID
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: incoming_label
            
            	Incoming Label
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: interface_name
            
            	Interface Name
            	**type**\:  str
            
            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
            
            .. attribute:: location
            
            	Location
            	**type**\:  str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: node_id
            
            	Location where session is housed
            	**type**\:  str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: session_flags
            
            	Session Flags
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: session_subtype
            
            	Session subtype
            	**type**\:  str
            
            .. attribute:: session_type
            
            	Session type
            	**type**\:   :py:class:`BfdSessionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdSessionEnum>`
            
            .. attribute:: state
            
            	State
            	**type**\:   :py:class:`BfdMgmtSessionStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionStateEnum>`
            
            .. attribute:: status_brief_information
            
            	Brief Status Information
            	**type**\:   :py:class:`StatusBriefInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadSessionBriefs.Ipv4BfDoMplsteHeadSessionBrief.StatusBriefInformation>`
            
            .. attribute:: vrf_name
            
            	VRF name
            	**type**\:  str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.fe_ctype = None
                self.fec_ctype = None
                self.fec_destination = None
                self.fec_extended_tunnel_id = None
                self.fec_source = None
                self.fec_subgroup_id = None
                self.fec_subgroup_originator = None
                self.fec_tunnel_id = None
                self.feclspid = None
                self.fecp2mpid = None
                self.incoming_label = None
                self.interface_name = None
                self.location = None
                self.node_id = None
                self.session_flags = None
                self.session_subtype = None
                self.session_type = None
                self.state = None
                self.status_brief_information = Bfd.Ipv4BfDoMplsteHeadSessionBriefs.Ipv4BfDoMplsteHeadSessionBrief.StatusBriefInformation()
                self.status_brief_information.parent = self
                self.vrf_name = None


            class StatusBriefInformation(object):
                """
                Brief Status Information
                
                .. attribute:: async_interval_multiplier
                
                	Async Interval and Detect Multiplier Information
                	**type**\:   :py:class:`AsyncIntervalMultiplier <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadSessionBriefs.Ipv4BfDoMplsteHeadSessionBrief.StatusBriefInformation.AsyncIntervalMultiplier>`
                
                .. attribute:: echo_interval_multiplier
                
                	Echo Interval and Detect Multiplier Information
                	**type**\:   :py:class:`EchoIntervalMultiplier <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadSessionBriefs.Ipv4BfDoMplsteHeadSessionBrief.StatusBriefInformation.EchoIntervalMultiplier>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.async_interval_multiplier = Bfd.Ipv4BfDoMplsteHeadSessionBriefs.Ipv4BfDoMplsteHeadSessionBrief.StatusBriefInformation.AsyncIntervalMultiplier()
                    self.async_interval_multiplier.parent = self
                    self.echo_interval_multiplier = Bfd.Ipv4BfDoMplsteHeadSessionBriefs.Ipv4BfDoMplsteHeadSessionBrief.StatusBriefInformation.EchoIntervalMultiplier()
                    self.echo_interval_multiplier.parent = self


                class AsyncIntervalMultiplier(object):
                    """
                    Async Interval and Detect Multiplier Information
                    
                    .. attribute:: detection_multiplier
                    
                    	Detection Multiplier
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: detection_time
                    
                    	Detection time in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: negotiated_local_transmit_interval
                    
                    	Negotiated local transmit interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: negotiated_remote_transmit_interval
                    
                    	Negotiated remote transmit interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.detection_multiplier = None
                        self.detection_time = None
                        self.negotiated_local_transmit_interval = None
                        self.negotiated_remote_transmit_interval = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-session-briefs/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-session-brief/Cisco-IOS-XR-ip-bfd-oper:status-brief-information/Cisco-IOS-XR-ip-bfd-oper:async-interval-multiplier'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.detection_multiplier is not None:
                            return True

                        if self.detection_time is not None:
                            return True

                        if self.negotiated_local_transmit_interval is not None:
                            return True

                        if self.negotiated_remote_transmit_interval is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv4BfDoMplsteHeadSessionBriefs.Ipv4BfDoMplsteHeadSessionBrief.StatusBriefInformation.AsyncIntervalMultiplier']['meta_info']


                class EchoIntervalMultiplier(object):
                    """
                    Echo Interval and Detect Multiplier Information
                    
                    .. attribute:: detection_multiplier
                    
                    	Detection Multiplier
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: detection_time
                    
                    	Detection time in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: negotiated_transmit_interval
                    
                    	Negotiated transmit interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.detection_multiplier = None
                        self.detection_time = None
                        self.negotiated_transmit_interval = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-session-briefs/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-session-brief/Cisco-IOS-XR-ip-bfd-oper:status-brief-information/Cisco-IOS-XR-ip-bfd-oper:echo-interval-multiplier'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.detection_multiplier is not None:
                            return True

                        if self.detection_time is not None:
                            return True

                        if self.negotiated_transmit_interval is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv4BfDoMplsteHeadSessionBriefs.Ipv4BfDoMplsteHeadSessionBrief.StatusBriefInformation.EchoIntervalMultiplier']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-session-briefs/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-session-brief/Cisco-IOS-XR-ip-bfd-oper:status-brief-information'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.async_interval_multiplier is not None and self.async_interval_multiplier._has_data():
                        return True

                    if self.echo_interval_multiplier is not None and self.echo_interval_multiplier._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.Ipv4BfDoMplsteHeadSessionBriefs.Ipv4BfDoMplsteHeadSessionBrief.StatusBriefInformation']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-session-briefs/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-session-brief'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.fe_ctype is not None:
                    return True

                if self.fec_ctype is not None:
                    return True

                if self.fec_destination is not None:
                    return True

                if self.fec_extended_tunnel_id is not None:
                    return True

                if self.fec_source is not None:
                    return True

                if self.fec_subgroup_id is not None:
                    return True

                if self.fec_subgroup_originator is not None:
                    return True

                if self.fec_tunnel_id is not None:
                    return True

                if self.feclspid is not None:
                    return True

                if self.fecp2mpid is not None:
                    return True

                if self.incoming_label is not None:
                    return True

                if self.interface_name is not None:
                    return True

                if self.location is not None:
                    return True

                if self.node_id is not None:
                    return True

                if self.session_flags is not None:
                    return True

                if self.session_subtype is not None:
                    return True

                if self.session_type is not None:
                    return True

                if self.state is not None:
                    return True

                if self.status_brief_information is not None and self.status_brief_information._has_data():
                    return True

                if self.vrf_name is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                return meta._meta_table['Bfd.Ipv4BfDoMplsteHeadSessionBriefs.Ipv4BfDoMplsteHeadSessionBrief']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-session-briefs'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.ipv4bf_do_mplste_head_session_brief is not None:
                for child_ref in self.ipv4bf_do_mplste_head_session_brief:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
            return meta._meta_table['Bfd.Ipv4BfDoMplsteHeadSessionBriefs']['meta_info']


    class Ipv4BfDoMplsteTailSessionDetails(object):
        """
        Table of detailed information about all IPv4 BFD
        over MPLS\-TE Tail sessions in the System
        
        .. attribute:: ipv4bf_do_mplste_tail_session_detail
        
        	Detailed information for a single IPv4 BFD over MPLS\-TE Tail session
        	**type**\: list of    :py:class:`Ipv4BfDoMplsteTailSessionDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.ipv4bf_do_mplste_tail_session_detail = YList()
            self.ipv4bf_do_mplste_tail_session_detail.parent = self
            self.ipv4bf_do_mplste_tail_session_detail.name = 'ipv4bf_do_mplste_tail_session_detail'


        class Ipv4BfDoMplsteTailSessionDetail(object):
            """
            Detailed information for a single IPv4 BFD over
            MPLS\-TE Tail session
            
            .. attribute:: association_information
            
            	Association session information
            	**type**\: list of    :py:class:`AssociationInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.AssociationInformation>`
            
            .. attribute:: fe_ctype
            
            	FEC Type
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: fec_ctype
            
            	FEC C Type
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: fec_destination
            
            	FEC Destination
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: fec_extended_tunnel_id
            
            	FEC Extended Tunnel ID
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: fec_source
            
            	FEC Source
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: fec_subgroup_id
            
            	FEC Subgroup ID
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: fec_subgroup_originator
            
            	FEC Subgroup originator
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: fec_tunnel_id
            
            	FEC Tunnel ID
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: feclspid
            
            	FEC LSP ID
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: fecp2mpid
            
            	FEC P2MP ID
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: incoming_label
            
            	Incoming Label
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: location
            
            	Location
            	**type**\:  str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: lsp_ping_info
            
            	LSP Ping Info
            	**type**\:   :py:class:`LspPingInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.LspPingInfo>`
            
            .. attribute:: mp_download_state
            
            	MP Dowload State
            	**type**\:   :py:class:`MpDownloadState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.MpDownloadState>`
            
            .. attribute:: owner_information
            
            	Client applications owning the session
            	**type**\: list of    :py:class:`OwnerInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.OwnerInformation>`
            
            .. attribute:: status_information
            
            	Session status information
            	**type**\:   :py:class:`StatusInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation>`
            
            .. attribute:: vrf_name
            
            	VRF name
            	**type**\:  str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.association_information = YList()
                self.association_information.parent = self
                self.association_information.name = 'association_information'
                self.fe_ctype = None
                self.fec_ctype = None
                self.fec_destination = None
                self.fec_extended_tunnel_id = None
                self.fec_source = None
                self.fec_subgroup_id = None
                self.fec_subgroup_originator = None
                self.fec_tunnel_id = None
                self.feclspid = None
                self.fecp2mpid = None
                self.incoming_label = None
                self.location = None
                self.lsp_ping_info = Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.LspPingInfo()
                self.lsp_ping_info.parent = self
                self.mp_download_state = Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.MpDownloadState()
                self.mp_download_state.parent = self
                self.owner_information = YList()
                self.owner_information.parent = self
                self.owner_information.name = 'owner_information'
                self.status_information = Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation()
                self.status_information.parent = self
                self.vrf_name = None


            class StatusInformation(object):
                """
                Session status information
                
                .. attribute:: async_receive_statistics
                
                	Statistics of Interval between Async Packets Received (in milli\-seconds)
                	**type**\:   :py:class:`AsyncReceiveStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.AsyncReceiveStatistics>`
                
                .. attribute:: async_transmit_statistics
                
                	Statistics of Interval between Async Packets Transmitted (in milli\-seconds)
                	**type**\:   :py:class:`AsyncTransmitStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.AsyncTransmitStatistics>`
                
                .. attribute:: desired_minimum_echo_transmit_interval
                
                	Desired minimum echo transmit interval in milli\-seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: millisecond
                
                .. attribute:: echo_received_statistics
                
                	Statistics of Interval between Echo Packets Received (in milli\-seconds)
                	**type**\:   :py:class:`EchoReceivedStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.EchoReceivedStatistics>`
                
                .. attribute:: echo_transmit_statistics
                
                	Statistics of Interval between Echo Packets Transmitted (in milli\-seconds)
                	**type**\:   :py:class:`EchoTransmitStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.EchoTransmitStatistics>`
                
                .. attribute:: internal_label
                
                	Internal Label
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: last_state_change
                
                	Time since last state change
                	**type**\:   :py:class:`LastStateChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.LastStateChange>`
                
                .. attribute:: latency_average
                
                	Average value of Latency (in micro\-seconds)
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: microsecond
                
                .. attribute:: latency_maximum
                
                	Maximum value of Latency (in micro\-seconds)
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: microsecond
                
                .. attribute:: latency_minimum
                
                	Minimum value of Latency (in micro\-seconds)
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: microsecond
                
                .. attribute:: latency_number
                
                	Number of Latency Samples. Time between Transmit and Receive
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: local_discriminator
                
                	Session's Local discriminator
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: node_id
                
                	Location where session is housed
                	**type**\:  str
                
                	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
                
                .. attribute:: receive_packet
                
                	Receive Packet
                	**type**\:   :py:class:`ReceivePacket <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.ReceivePacket>`
                
                .. attribute:: remote_discriminator
                
                	Session's Remote discriminator
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: remote_negotiated_interval
                
                	Remote Negotiated Interval in milli\-seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: millisecond
                
                .. attribute:: session_subtype
                
                	Session subtype
                	**type**\:  str
                
                .. attribute:: sessiontype
                
                	Session type
                	**type**\:   :py:class:`BfdSessionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdSessionEnum>`
                
                .. attribute:: source_address
                
                	Source address
                	**type**\:   :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.SourceAddress>`
                
                .. attribute:: state
                
                	State
                	**type**\:   :py:class:`BfdMgmtSessionStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionStateEnum>`
                
                .. attribute:: status_brief_information
                
                	Brief Status Information
                	**type**\:   :py:class:`StatusBriefInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.StatusBriefInformation>`
                
                .. attribute:: to_up_state_count
                
                	Number of times session state went to UP
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: transmit_packet
                
                	Transmit Packet
                	**type**\:   :py:class:`TransmitPacket <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.TransmitPacket>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.async_receive_statistics = Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.AsyncReceiveStatistics()
                    self.async_receive_statistics.parent = self
                    self.async_transmit_statistics = Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.AsyncTransmitStatistics()
                    self.async_transmit_statistics.parent = self
                    self.desired_minimum_echo_transmit_interval = None
                    self.echo_received_statistics = Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.EchoReceivedStatistics()
                    self.echo_received_statistics.parent = self
                    self.echo_transmit_statistics = Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.EchoTransmitStatistics()
                    self.echo_transmit_statistics.parent = self
                    self.internal_label = None
                    self.last_state_change = Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.LastStateChange()
                    self.last_state_change.parent = self
                    self.latency_average = None
                    self.latency_maximum = None
                    self.latency_minimum = None
                    self.latency_number = None
                    self.local_discriminator = None
                    self.node_id = None
                    self.receive_packet = Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.ReceivePacket()
                    self.receive_packet.parent = self
                    self.remote_discriminator = None
                    self.remote_negotiated_interval = None
                    self.session_subtype = None
                    self.sessiontype = None
                    self.source_address = Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.SourceAddress()
                    self.source_address.parent = self
                    self.state = None
                    self.status_brief_information = Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.StatusBriefInformation()
                    self.status_brief_information.parent = self
                    self.to_up_state_count = None
                    self.transmit_packet = Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.TransmitPacket()
                    self.transmit_packet.parent = self


                class SourceAddress(object):
                    """
                    Source address
                    
                    .. attribute:: afi
                    
                    	AFI
                    	**type**\:   :py:class:`BfdAfIdEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdAfIdEnum>`
                    
                    .. attribute:: dummy
                    
                    	No Address
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    .. attribute:: ipv4
                    
                    	IPv4 address type
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: ipv6
                    
                    	IPv6 address type
                    	**type**\:  str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.afi = None
                        self.dummy = None
                        self.ipv4 = None
                        self.ipv6 = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:source-address'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.afi is not None:
                            return True

                        if self.dummy is not None:
                            return True

                        if self.ipv4 is not None:
                            return True

                        if self.ipv6 is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.SourceAddress']['meta_info']


                class LastStateChange(object):
                    """
                    Time since last state change
                    
                    .. attribute:: days
                    
                    	Number of days since last session state transition
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: day
                    
                    .. attribute:: hours
                    
                    	Number of hours since last session state transition
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    	**units**\: hour
                    
                    .. attribute:: minutes
                    
                    	Number of mins since last session state transition
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    	**units**\: minute
                    
                    .. attribute:: seconds
                    
                    	Number of seconds since last session state transition
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    	**units**\: second
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.days = None
                        self.hours = None
                        self.minutes = None
                        self.seconds = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:last-state-change'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.days is not None:
                            return True

                        if self.hours is not None:
                            return True

                        if self.minutes is not None:
                            return True

                        if self.seconds is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.LastStateChange']['meta_info']


                class TransmitPacket(object):
                    """
                    Transmit Packet
                    
                    .. attribute:: authentication_present
                    
                    	Requesting authentication for the session
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: control_plane_independent
                    
                    	BFD implementation does not share fate with its control plane
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: demand
                    
                    	Demand mode
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: desired_minimum_transmit_interval
                    
                    	Desired minimum transmit interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: detection_multiplier
                    
                    	Detection Multiplier
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: diagnostic
                    
                    	Diagnostic
                    	**type**\:   :py:class:`BfdMgmtSessionDiagEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionDiagEnum>`
                    
                    .. attribute:: final
                    
                    	Final bit
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: ihear_you
                    
                    	I Hear You (v0)
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: length
                    
                    	Length
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: my_discriminator
                    
                    	My Discriminator
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: poll
                    
                    	Poll bit
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: required_minimum_echo_receive_interval
                    
                    	Required echo receive interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: required_minimum_receive_interval
                    
                    	Required receive interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: state
                    
                    	State (v1)
                    	**type**\:   :py:class:`BfdMgmtSessionStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionStateEnum>`
                    
                    .. attribute:: version
                    
                    	Version
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    .. attribute:: your_discriminator
                    
                    	Your Discriminator
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.authentication_present = None
                        self.control_plane_independent = None
                        self.demand = None
                        self.desired_minimum_transmit_interval = None
                        self.detection_multiplier = None
                        self.diagnostic = None
                        self.final = None
                        self.ihear_you = None
                        self.length = None
                        self.my_discriminator = None
                        self.poll = None
                        self.required_minimum_echo_receive_interval = None
                        self.required_minimum_receive_interval = None
                        self.state = None
                        self.version = None
                        self.your_discriminator = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:transmit-packet'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.authentication_present is not None:
                            return True

                        if self.control_plane_independent is not None:
                            return True

                        if self.demand is not None:
                            return True

                        if self.desired_minimum_transmit_interval is not None:
                            return True

                        if self.detection_multiplier is not None:
                            return True

                        if self.diagnostic is not None:
                            return True

                        if self.final is not None:
                            return True

                        if self.ihear_you is not None:
                            return True

                        if self.length is not None:
                            return True

                        if self.my_discriminator is not None:
                            return True

                        if self.poll is not None:
                            return True

                        if self.required_minimum_echo_receive_interval is not None:
                            return True

                        if self.required_minimum_receive_interval is not None:
                            return True

                        if self.state is not None:
                            return True

                        if self.version is not None:
                            return True

                        if self.your_discriminator is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.TransmitPacket']['meta_info']


                class ReceivePacket(object):
                    """
                    Receive Packet
                    
                    .. attribute:: authentication_present
                    
                    	Requesting authentication for the session
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: control_plane_independent
                    
                    	BFD implementation does not share fate with its control plane
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: demand
                    
                    	Demand mode
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: desired_minimum_transmit_interval
                    
                    	Desired minimum transmit interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: detection_multiplier
                    
                    	Detection Multiplier
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: diagnostic
                    
                    	Diagnostic
                    	**type**\:   :py:class:`BfdMgmtSessionDiagEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionDiagEnum>`
                    
                    .. attribute:: final
                    
                    	Final bit
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: ihear_you
                    
                    	I Hear You (v0)
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: length
                    
                    	Length
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: my_discriminator
                    
                    	My Discriminator
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: poll
                    
                    	Poll bit
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: required_minimum_echo_receive_interval
                    
                    	Required echo receive interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: required_minimum_receive_interval
                    
                    	Required receive interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: state
                    
                    	State (v1)
                    	**type**\:   :py:class:`BfdMgmtSessionStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionStateEnum>`
                    
                    .. attribute:: version
                    
                    	Version
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    .. attribute:: your_discriminator
                    
                    	Your Discriminator
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.authentication_present = None
                        self.control_plane_independent = None
                        self.demand = None
                        self.desired_minimum_transmit_interval = None
                        self.detection_multiplier = None
                        self.diagnostic = None
                        self.final = None
                        self.ihear_you = None
                        self.length = None
                        self.my_discriminator = None
                        self.poll = None
                        self.required_minimum_echo_receive_interval = None
                        self.required_minimum_receive_interval = None
                        self.state = None
                        self.version = None
                        self.your_discriminator = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:receive-packet'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.authentication_present is not None:
                            return True

                        if self.control_plane_independent is not None:
                            return True

                        if self.demand is not None:
                            return True

                        if self.desired_minimum_transmit_interval is not None:
                            return True

                        if self.detection_multiplier is not None:
                            return True

                        if self.diagnostic is not None:
                            return True

                        if self.final is not None:
                            return True

                        if self.ihear_you is not None:
                            return True

                        if self.length is not None:
                            return True

                        if self.my_discriminator is not None:
                            return True

                        if self.poll is not None:
                            return True

                        if self.required_minimum_echo_receive_interval is not None:
                            return True

                        if self.required_minimum_receive_interval is not None:
                            return True

                        if self.state is not None:
                            return True

                        if self.version is not None:
                            return True

                        if self.your_discriminator is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.ReceivePacket']['meta_info']


                class StatusBriefInformation(object):
                    """
                    Brief Status Information
                    
                    .. attribute:: async_interval_multiplier
                    
                    	Async Interval and Detect Multiplier Information
                    	**type**\:   :py:class:`AsyncIntervalMultiplier <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.StatusBriefInformation.AsyncIntervalMultiplier>`
                    
                    .. attribute:: echo_interval_multiplier
                    
                    	Echo Interval and Detect Multiplier Information
                    	**type**\:   :py:class:`EchoIntervalMultiplier <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.StatusBriefInformation.EchoIntervalMultiplier>`
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.async_interval_multiplier = Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.StatusBriefInformation.AsyncIntervalMultiplier()
                        self.async_interval_multiplier.parent = self
                        self.echo_interval_multiplier = Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.StatusBriefInformation.EchoIntervalMultiplier()
                        self.echo_interval_multiplier.parent = self


                    class AsyncIntervalMultiplier(object):
                        """
                        Async Interval and Detect Multiplier Information
                        
                        .. attribute:: detection_multiplier
                        
                        	Detection Multiplier
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: detection_time
                        
                        	Detection time in micro\-seconds
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        .. attribute:: negotiated_local_transmit_interval
                        
                        	Negotiated local transmit interval in micro\-seconds
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        .. attribute:: negotiated_remote_transmit_interval
                        
                        	Negotiated remote transmit interval in micro\-seconds
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        

                        """

                        _prefix = 'ip-bfd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.detection_multiplier = None
                            self.detection_time = None
                            self.negotiated_local_transmit_interval = None
                            self.negotiated_remote_transmit_interval = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:status-brief-information/Cisco-IOS-XR-ip-bfd-oper:async-interval-multiplier'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.detection_multiplier is not None:
                                return True

                            if self.detection_time is not None:
                                return True

                            if self.negotiated_local_transmit_interval is not None:
                                return True

                            if self.negotiated_remote_transmit_interval is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                            return meta._meta_table['Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.StatusBriefInformation.AsyncIntervalMultiplier']['meta_info']


                    class EchoIntervalMultiplier(object):
                        """
                        Echo Interval and Detect Multiplier Information
                        
                        .. attribute:: detection_multiplier
                        
                        	Detection Multiplier
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: detection_time
                        
                        	Detection time in micro\-seconds
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        .. attribute:: negotiated_transmit_interval
                        
                        	Negotiated transmit interval in micro\-seconds
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        

                        """

                        _prefix = 'ip-bfd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.detection_multiplier = None
                            self.detection_time = None
                            self.negotiated_transmit_interval = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:status-brief-information/Cisco-IOS-XR-ip-bfd-oper:echo-interval-multiplier'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.detection_multiplier is not None:
                                return True

                            if self.detection_time is not None:
                                return True

                            if self.negotiated_transmit_interval is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                            return meta._meta_table['Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.StatusBriefInformation.EchoIntervalMultiplier']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:status-brief-information'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.async_interval_multiplier is not None and self.async_interval_multiplier._has_data():
                            return True

                        if self.echo_interval_multiplier is not None and self.echo_interval_multiplier._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.StatusBriefInformation']['meta_info']


                class AsyncTransmitStatistics(object):
                    """
                    Statistics of Interval between Async Packets
                    Transmitted (in milli\-seconds)
                    
                    .. attribute:: average
                    
                    	Average of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: last
                    
                    	Time since last Transmit/Receive (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: maximum
                    
                    	Maximum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: minimum
                    
                    	Minimum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: number
                    
                    	Number of Interval Samples between Packets sent/received
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.average = None
                        self.last = None
                        self.maximum = None
                        self.minimum = None
                        self.number = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:async-transmit-statistics'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.average is not None:
                            return True

                        if self.last is not None:
                            return True

                        if self.maximum is not None:
                            return True

                        if self.minimum is not None:
                            return True

                        if self.number is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.AsyncTransmitStatistics']['meta_info']


                class AsyncReceiveStatistics(object):
                    """
                    Statistics of Interval between Async Packets
                    Received (in milli\-seconds)
                    
                    .. attribute:: average
                    
                    	Average of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: last
                    
                    	Time since last Transmit/Receive (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: maximum
                    
                    	Maximum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: minimum
                    
                    	Minimum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: number
                    
                    	Number of Interval Samples between Packets sent/received
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.average = None
                        self.last = None
                        self.maximum = None
                        self.minimum = None
                        self.number = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:async-receive-statistics'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.average is not None:
                            return True

                        if self.last is not None:
                            return True

                        if self.maximum is not None:
                            return True

                        if self.minimum is not None:
                            return True

                        if self.number is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.AsyncReceiveStatistics']['meta_info']


                class EchoTransmitStatistics(object):
                    """
                    Statistics of Interval between Echo Packets
                    Transmitted (in milli\-seconds)
                    
                    .. attribute:: average
                    
                    	Average of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: last
                    
                    	Time since last Transmit/Receive (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: maximum
                    
                    	Maximum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: minimum
                    
                    	Minimum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: number
                    
                    	Number of Interval Samples between Packets sent/received
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.average = None
                        self.last = None
                        self.maximum = None
                        self.minimum = None
                        self.number = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:echo-transmit-statistics'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.average is not None:
                            return True

                        if self.last is not None:
                            return True

                        if self.maximum is not None:
                            return True

                        if self.minimum is not None:
                            return True

                        if self.number is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.EchoTransmitStatistics']['meta_info']


                class EchoReceivedStatistics(object):
                    """
                    Statistics of Interval between Echo Packets
                    Received (in milli\-seconds)
                    
                    .. attribute:: average
                    
                    	Average of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: last
                    
                    	Time since last Transmit/Receive (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: maximum
                    
                    	Maximum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: minimum
                    
                    	Minimum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: number
                    
                    	Number of Interval Samples between Packets sent/received
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.average = None
                        self.last = None
                        self.maximum = None
                        self.minimum = None
                        self.number = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:echo-received-statistics'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.average is not None:
                            return True

                        if self.last is not None:
                            return True

                        if self.maximum is not None:
                            return True

                        if self.minimum is not None:
                            return True

                        if self.number is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.EchoReceivedStatistics']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.async_receive_statistics is not None and self.async_receive_statistics._has_data():
                        return True

                    if self.async_transmit_statistics is not None and self.async_transmit_statistics._has_data():
                        return True

                    if self.desired_minimum_echo_transmit_interval is not None:
                        return True

                    if self.echo_received_statistics is not None and self.echo_received_statistics._has_data():
                        return True

                    if self.echo_transmit_statistics is not None and self.echo_transmit_statistics._has_data():
                        return True

                    if self.internal_label is not None:
                        return True

                    if self.last_state_change is not None and self.last_state_change._has_data():
                        return True

                    if self.latency_average is not None:
                        return True

                    if self.latency_maximum is not None:
                        return True

                    if self.latency_minimum is not None:
                        return True

                    if self.latency_number is not None:
                        return True

                    if self.local_discriminator is not None:
                        return True

                    if self.node_id is not None:
                        return True

                    if self.receive_packet is not None and self.receive_packet._has_data():
                        return True

                    if self.remote_discriminator is not None:
                        return True

                    if self.remote_negotiated_interval is not None:
                        return True

                    if self.session_subtype is not None:
                        return True

                    if self.sessiontype is not None:
                        return True

                    if self.source_address is not None and self.source_address._has_data():
                        return True

                    if self.state is not None:
                        return True

                    if self.status_brief_information is not None and self.status_brief_information._has_data():
                        return True

                    if self.to_up_state_count is not None:
                        return True

                    if self.transmit_packet is not None and self.transmit_packet._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation']['meta_info']


            class MpDownloadState(object):
                """
                MP Dowload State
                
                .. attribute:: change_time
                
                	Change time
                	**type**\:   :py:class:`ChangeTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.MpDownloadState.ChangeTime>`
                
                .. attribute:: mp_download_state
                
                	MP Download State
                	**type**\:   :py:class:`BfdMpDownloadStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMpDownloadStateEnum>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.change_time = Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.MpDownloadState.ChangeTime()
                    self.change_time.parent = self
                    self.mp_download_state = None


                class ChangeTime(object):
                    """
                    Change time
                    
                    .. attribute:: nanoseconds
                    
                    	nanoseconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: nanosecond
                    
                    .. attribute:: seconds
                    
                    	seconds
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: second
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.nanoseconds = None
                        self.seconds = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-session-detail/Cisco-IOS-XR-ip-bfd-oper:mp-download-state/Cisco-IOS-XR-ip-bfd-oper:change-time'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.nanoseconds is not None:
                            return True

                        if self.seconds is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.MpDownloadState.ChangeTime']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-session-detail/Cisco-IOS-XR-ip-bfd-oper:mp-download-state'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.change_time is not None and self.change_time._has_data():
                        return True

                    if self.mp_download_state is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.MpDownloadState']['meta_info']


            class LspPingInfo(object):
                """
                LSP Ping Info
                
                .. attribute:: lsp_ping_rx_count
                
                	LSP Ping numer of times received
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_ping_rx_last_code
                
                	LSP Ping Rx Last Code
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: lsp_ping_rx_last_discr
                
                	LSP Ping Rx last received discriminator
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_ping_rx_last_output
                
                	LSP Ping Rx Last Output
                	**type**\:  str
                
                .. attribute:: lsp_ping_rx_last_subcode
                
                	LSP Ping Rx Last Subcode
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: lsp_ping_rx_last_time
                
                	LSP Ping last received time
                	**type**\:   :py:class:`LspPingRxLastTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.LspPingInfo.LspPingRxLastTime>`
                
                .. attribute:: lsp_ping_tx_count
                
                	LSP Ping Tx count
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_ping_tx_error_count
                
                	LSP Ping Tx error count
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_ping_tx_last_error_rc
                
                	LSP Ping Tx last error
                	**type**\:  str
                
                .. attribute:: lsp_ping_tx_last_error_time
                
                	LSP Ping last error time
                	**type**\:   :py:class:`LspPingTxLastErrorTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.LspPingInfo.LspPingTxLastErrorTime>`
                
                .. attribute:: lsp_ping_tx_last_rc
                
                	LSP Ping Tx last result
                	**type**\:  str
                
                .. attribute:: lsp_ping_tx_last_time
                
                	LSP Ping last sent time
                	**type**\:   :py:class:`LspPingTxLastTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.LspPingInfo.LspPingTxLastTime>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.lsp_ping_rx_count = None
                    self.lsp_ping_rx_last_code = None
                    self.lsp_ping_rx_last_discr = None
                    self.lsp_ping_rx_last_output = None
                    self.lsp_ping_rx_last_subcode = None
                    self.lsp_ping_rx_last_time = Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.LspPingInfo.LspPingRxLastTime()
                    self.lsp_ping_rx_last_time.parent = self
                    self.lsp_ping_tx_count = None
                    self.lsp_ping_tx_error_count = None
                    self.lsp_ping_tx_last_error_rc = None
                    self.lsp_ping_tx_last_error_time = Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.LspPingInfo.LspPingTxLastErrorTime()
                    self.lsp_ping_tx_last_error_time.parent = self
                    self.lsp_ping_tx_last_rc = None
                    self.lsp_ping_tx_last_time = Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.LspPingInfo.LspPingTxLastTime()
                    self.lsp_ping_tx_last_time.parent = self


                class LspPingTxLastTime(object):
                    """
                    LSP Ping last sent time
                    
                    .. attribute:: nanoseconds
                    
                    	nanoseconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: nanosecond
                    
                    .. attribute:: seconds
                    
                    	seconds
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: second
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.nanoseconds = None
                        self.seconds = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-session-detail/Cisco-IOS-XR-ip-bfd-oper:lsp-ping-info/Cisco-IOS-XR-ip-bfd-oper:lsp-ping-tx-last-time'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.nanoseconds is not None:
                            return True

                        if self.seconds is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.LspPingInfo.LspPingTxLastTime']['meta_info']


                class LspPingTxLastErrorTime(object):
                    """
                    LSP Ping last error time
                    
                    .. attribute:: nanoseconds
                    
                    	nanoseconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: nanosecond
                    
                    .. attribute:: seconds
                    
                    	seconds
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: second
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.nanoseconds = None
                        self.seconds = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-session-detail/Cisco-IOS-XR-ip-bfd-oper:lsp-ping-info/Cisco-IOS-XR-ip-bfd-oper:lsp-ping-tx-last-error-time'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.nanoseconds is not None:
                            return True

                        if self.seconds is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.LspPingInfo.LspPingTxLastErrorTime']['meta_info']


                class LspPingRxLastTime(object):
                    """
                    LSP Ping last received time
                    
                    .. attribute:: nanoseconds
                    
                    	nanoseconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: nanosecond
                    
                    .. attribute:: seconds
                    
                    	seconds
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: second
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.nanoseconds = None
                        self.seconds = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-session-detail/Cisco-IOS-XR-ip-bfd-oper:lsp-ping-info/Cisco-IOS-XR-ip-bfd-oper:lsp-ping-rx-last-time'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.nanoseconds is not None:
                            return True

                        if self.seconds is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.LspPingInfo.LspPingRxLastTime']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-session-detail/Cisco-IOS-XR-ip-bfd-oper:lsp-ping-info'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.lsp_ping_rx_count is not None:
                        return True

                    if self.lsp_ping_rx_last_code is not None:
                        return True

                    if self.lsp_ping_rx_last_discr is not None:
                        return True

                    if self.lsp_ping_rx_last_output is not None:
                        return True

                    if self.lsp_ping_rx_last_subcode is not None:
                        return True

                    if self.lsp_ping_rx_last_time is not None and self.lsp_ping_rx_last_time._has_data():
                        return True

                    if self.lsp_ping_tx_count is not None:
                        return True

                    if self.lsp_ping_tx_error_count is not None:
                        return True

                    if self.lsp_ping_tx_last_error_rc is not None:
                        return True

                    if self.lsp_ping_tx_last_error_time is not None and self.lsp_ping_tx_last_error_time._has_data():
                        return True

                    if self.lsp_ping_tx_last_rc is not None:
                        return True

                    if self.lsp_ping_tx_last_time is not None and self.lsp_ping_tx_last_time._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.LspPingInfo']['meta_info']


            class OwnerInformation(object):
                """
                Client applications owning the session
                
                .. attribute:: adjusted_detection_multiplier
                
                	Adjusted detection multiplier to compute detection time
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: adjusted_interval
                
                	Adjusted minimum transmit interval in milli\-seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: millisecond
                
                .. attribute:: detection_multiplier
                
                	Client specified detection multiplier to compute detection time
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: interval
                
                	Client specified minimum transmit interval in micro\-seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: microsecond
                
                .. attribute:: name
                
                	Client process name
                	**type**\:  str
                
                	**length:** 0..257
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.adjusted_detection_multiplier = None
                    self.adjusted_interval = None
                    self.detection_multiplier = None
                    self.interval = None
                    self.name = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-session-detail/Cisco-IOS-XR-ip-bfd-oper:owner-information'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.adjusted_detection_multiplier is not None:
                        return True

                    if self.adjusted_interval is not None:
                        return True

                    if self.detection_multiplier is not None:
                        return True

                    if self.interval is not None:
                        return True

                    if self.name is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.OwnerInformation']['meta_info']


            class AssociationInformation(object):
                """
                Association session information
                
                .. attribute:: local_discriminator
                
                	Session's Local discriminator
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: owner_information
                
                	Client applications owning the session
                	**type**\: list of    :py:class:`OwnerInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.AssociationInformation.OwnerInformation>`
                
                .. attribute:: session_key
                
                	Session Key
                	**type**\:   :py:class:`SessionKey <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.AssociationInformation.SessionKey>`
                
                .. attribute:: sessiontype
                
                	Session type
                	**type**\:   :py:class:`BfdSessionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdSessionEnum>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.local_discriminator = None
                    self.owner_information = YList()
                    self.owner_information.parent = self
                    self.owner_information.name = 'owner_information'
                    self.session_key = Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.AssociationInformation.SessionKey()
                    self.session_key.parent = self
                    self.sessiontype = None


                class SessionKey(object):
                    """
                    Session Key
                    
                    .. attribute:: bfdfec
                    
                    	Union of FECs
                    	**type**\:   :py:class:`Bfdfec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.AssociationInformation.SessionKey.Bfdfec>`
                    
                    .. attribute:: incoming_label
                    
                    	Incoming Label
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: interface_name
                    
                    	Session Interface Name
                    	**type**\:  str
                    
                    	**length:** 0..64
                    
                    .. attribute:: ip_destination_address
                    
                    	IPv4/v6 dest address
                    	**type**\:   :py:class:`IpDestinationAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.AssociationInformation.SessionKey.IpDestinationAddress>`
                    
                    .. attribute:: ip_source_address
                    
                    	IPv4/v6 source address
                    	**type**\:   :py:class:`IpSourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.AssociationInformation.SessionKey.IpSourceAddress>`
                    
                    .. attribute:: sbfd_enabled
                    
                    	SBFD enable flag
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: sbfd_target_type
                    
                    	SBFD target type
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: session_key_type
                    
                    	Session Key Type
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: target_address
                    
                    	sbfd target address
                    	**type**\:   :py:class:`TargetAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.AssociationInformation.SessionKey.TargetAddress>`
                    
                    .. attribute:: vrf_name
                    
                    	Session VRF Name
                    	**type**\:  str
                    
                    	**length:** 0..120
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.bfdfec = Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.AssociationInformation.SessionKey.Bfdfec()
                        self.bfdfec.parent = self
                        self.incoming_label = None
                        self.interface_name = None
                        self.ip_destination_address = Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.AssociationInformation.SessionKey.IpDestinationAddress()
                        self.ip_destination_address.parent = self
                        self.ip_source_address = Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.AssociationInformation.SessionKey.IpSourceAddress()
                        self.ip_source_address.parent = self
                        self.sbfd_enabled = None
                        self.sbfd_target_type = None
                        self.session_key_type = None
                        self.target_address = Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.AssociationInformation.SessionKey.TargetAddress()
                        self.target_address.parent = self
                        self.vrf_name = None


                    class IpDestinationAddress(object):
                        """
                        IPv4/v6 dest address
                        
                        .. attribute:: afi
                        
                        	AFI
                        	**type**\:   :py:class:`BfdAfIdEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdAfIdEnum>`
                        
                        .. attribute:: dummy
                        
                        	No Address
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: ipv4
                        
                        	IPv4 address type
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: ipv6
                        
                        	IPv6 address type
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-bfd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.afi = None
                            self.dummy = None
                            self.ipv4 = None
                            self.ipv6 = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:session-key/Cisco-IOS-XR-ip-bfd-oper:ip-destination-address'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.afi is not None:
                                return True

                            if self.dummy is not None:
                                return True

                            if self.ipv4 is not None:
                                return True

                            if self.ipv6 is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                            return meta._meta_table['Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.AssociationInformation.SessionKey.IpDestinationAddress']['meta_info']


                    class IpSourceAddress(object):
                        """
                        IPv4/v6 source address
                        
                        .. attribute:: afi
                        
                        	AFI
                        	**type**\:   :py:class:`BfdAfIdEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdAfIdEnum>`
                        
                        .. attribute:: dummy
                        
                        	No Address
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: ipv4
                        
                        	IPv4 address type
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: ipv6
                        
                        	IPv6 address type
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-bfd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.afi = None
                            self.dummy = None
                            self.ipv4 = None
                            self.ipv6 = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:session-key/Cisco-IOS-XR-ip-bfd-oper:ip-source-address'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.afi is not None:
                                return True

                            if self.dummy is not None:
                                return True

                            if self.ipv4 is not None:
                                return True

                            if self.ipv6 is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                            return meta._meta_table['Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.AssociationInformation.SessionKey.IpSourceAddress']['meta_info']


                    class Bfdfec(object):
                        """
                        Union of FECs
                        
                        .. attribute:: bfdfe_ctype
                        
                        	BFDFECType
                        	**type**\:   :py:class:`BfdApiFecEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdApiFecEnum>`
                        
                        .. attribute:: dummy
                        
                        	dummy
                        	**type**\:   :py:class:`Dummy <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.AssociationInformation.SessionKey.Bfdfec.Dummy>`
                        
                        .. attribute:: te_s2l_fec
                        
                        	te s2l fec
                        	**type**\:   :py:class:`TeS2LFec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.AssociationInformation.SessionKey.Bfdfec.TeS2LFec>`
                        
                        

                        """

                        _prefix = 'ip-bfd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.bfdfe_ctype = None
                            self.dummy = Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.AssociationInformation.SessionKey.Bfdfec.Dummy()
                            self.dummy.parent = self
                            self.te_s2l_fec = Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.AssociationInformation.SessionKey.Bfdfec.TeS2LFec()
                            self.te_s2l_fec.parent = self


                        class Dummy(object):
                            """
                            dummy
                            
                            .. attribute:: dummy
                            
                            	dummy
                            	**type**\:  str
                            
                            	**pattern:** ([0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2})\*)?
                            
                            

                            """

                            _prefix = 'ip-bfd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.dummy = None

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:session-key/Cisco-IOS-XR-ip-bfd-oper:bfdfec/Cisco-IOS-XR-ip-bfd-oper:dummy'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.dummy is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                                return meta._meta_table['Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.AssociationInformation.SessionKey.Bfdfec.Dummy']['meta_info']


                        class TeS2LFec(object):
                            """
                            te s2l fec
                            
                            .. attribute:: s2l_fec_ctype
                            
                            	Session identifier (ctype)
                            	**type**\:   :py:class:`MplsLibCEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.MplsLibCEnum>`
                            
                            .. attribute:: s2l_fec_dest
                            
                            	sub\-LSP destination address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: s2l_fec_extended_tunnel_id
                            
                            	Extended tunnel ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: s2l_fec_lsp_id
                            
                            	LSP ID
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: s2l_fec_p2mp_id
                            
                            	P2MP ID
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: s2l_fec_source
                            
                            	LSP source address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: s2l_fec_subgroup_id
                            
                            	sub\-LSP subgroup ID
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: s2l_fec_subgroup_originator
                            
                            	Subgroup Originator
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: s2l_fec_tunnel_id
                            
                            	Tunnel ID
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: s2l_fec_vrf
                            
                            	VRF; currently only for GMPLS tunnels
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'ip-bfd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.s2l_fec_ctype = None
                                self.s2l_fec_dest = None
                                self.s2l_fec_extended_tunnel_id = None
                                self.s2l_fec_lsp_id = None
                                self.s2l_fec_p2mp_id = None
                                self.s2l_fec_source = None
                                self.s2l_fec_subgroup_id = None
                                self.s2l_fec_subgroup_originator = None
                                self.s2l_fec_tunnel_id = None
                                self.s2l_fec_vrf = None

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:session-key/Cisco-IOS-XR-ip-bfd-oper:bfdfec/Cisco-IOS-XR-ip-bfd-oper:te-s2l-fec'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.s2l_fec_ctype is not None:
                                    return True

                                if self.s2l_fec_dest is not None:
                                    return True

                                if self.s2l_fec_extended_tunnel_id is not None:
                                    return True

                                if self.s2l_fec_lsp_id is not None:
                                    return True

                                if self.s2l_fec_p2mp_id is not None:
                                    return True

                                if self.s2l_fec_source is not None:
                                    return True

                                if self.s2l_fec_subgroup_id is not None:
                                    return True

                                if self.s2l_fec_subgroup_originator is not None:
                                    return True

                                if self.s2l_fec_tunnel_id is not None:
                                    return True

                                if self.s2l_fec_vrf is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                                return meta._meta_table['Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.AssociationInformation.SessionKey.Bfdfec.TeS2LFec']['meta_info']

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:session-key/Cisco-IOS-XR-ip-bfd-oper:bfdfec'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.bfdfe_ctype is not None:
                                return True

                            if self.dummy is not None and self.dummy._has_data():
                                return True

                            if self.te_s2l_fec is not None and self.te_s2l_fec._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                            return meta._meta_table['Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.AssociationInformation.SessionKey.Bfdfec']['meta_info']


                    class TargetAddress(object):
                        """
                        sbfd target address
                        
                        .. attribute:: afi
                        
                        	AFI
                        	**type**\:   :py:class:`BfdAfIdEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdAfIdEnum>`
                        
                        .. attribute:: dummy
                        
                        	No Address
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: ipv4
                        
                        	IPv4 address type
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: ipv6
                        
                        	IPv6 address type
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-bfd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.afi = None
                            self.dummy = None
                            self.ipv4 = None
                            self.ipv6 = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:session-key/Cisco-IOS-XR-ip-bfd-oper:target-address'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.afi is not None:
                                return True

                            if self.dummy is not None:
                                return True

                            if self.ipv4 is not None:
                                return True

                            if self.ipv6 is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                            return meta._meta_table['Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.AssociationInformation.SessionKey.TargetAddress']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:session-key'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.bfdfec is not None and self.bfdfec._has_data():
                            return True

                        if self.incoming_label is not None:
                            return True

                        if self.interface_name is not None:
                            return True

                        if self.ip_destination_address is not None and self.ip_destination_address._has_data():
                            return True

                        if self.ip_source_address is not None and self.ip_source_address._has_data():
                            return True

                        if self.sbfd_enabled is not None:
                            return True

                        if self.sbfd_target_type is not None:
                            return True

                        if self.session_key_type is not None:
                            return True

                        if self.target_address is not None and self.target_address._has_data():
                            return True

                        if self.vrf_name is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.AssociationInformation.SessionKey']['meta_info']


                class OwnerInformation(object):
                    """
                    Client applications owning the session
                    
                    .. attribute:: adjusted_detection_multiplier
                    
                    	Adjusted detection multiplier to compute detection time
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: adjusted_interval
                    
                    	Adjusted minimum transmit interval in milli\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: detection_multiplier
                    
                    	Client specified detection multiplier to compute detection time
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: interval
                    
                    	Client specified minimum transmit interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: name
                    
                    	Client process name
                    	**type**\:  str
                    
                    	**length:** 0..257
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.adjusted_detection_multiplier = None
                        self.adjusted_interval = None
                        self.detection_multiplier = None
                        self.interval = None
                        self.name = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:owner-information'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.adjusted_detection_multiplier is not None:
                            return True

                        if self.adjusted_interval is not None:
                            return True

                        if self.detection_multiplier is not None:
                            return True

                        if self.interval is not None:
                            return True

                        if self.name is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.AssociationInformation.OwnerInformation']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.local_discriminator is not None:
                        return True

                    if self.owner_information is not None:
                        for child_ref in self.owner_information:
                            if child_ref._has_data():
                                return True

                    if self.session_key is not None and self.session_key._has_data():
                        return True

                    if self.sessiontype is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.AssociationInformation']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-session-detail'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.association_information is not None:
                    for child_ref in self.association_information:
                        if child_ref._has_data():
                            return True

                if self.fe_ctype is not None:
                    return True

                if self.fec_ctype is not None:
                    return True

                if self.fec_destination is not None:
                    return True

                if self.fec_extended_tunnel_id is not None:
                    return True

                if self.fec_source is not None:
                    return True

                if self.fec_subgroup_id is not None:
                    return True

                if self.fec_subgroup_originator is not None:
                    return True

                if self.fec_tunnel_id is not None:
                    return True

                if self.feclspid is not None:
                    return True

                if self.fecp2mpid is not None:
                    return True

                if self.incoming_label is not None:
                    return True

                if self.location is not None:
                    return True

                if self.lsp_ping_info is not None and self.lsp_ping_info._has_data():
                    return True

                if self.mp_download_state is not None and self.mp_download_state._has_data():
                    return True

                if self.owner_information is not None:
                    for child_ref in self.owner_information:
                        if child_ref._has_data():
                            return True

                if self.status_information is not None and self.status_information._has_data():
                    return True

                if self.vrf_name is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                return meta._meta_table['Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-session-details'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.ipv4bf_do_mplste_tail_session_detail is not None:
                for child_ref in self.ipv4bf_do_mplste_tail_session_detail:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
            return meta._meta_table['Bfd.Ipv4BfDoMplsteTailSessionDetails']['meta_info']


    class Ipv4MultiHopNodeLocationSummaries(object):
        """
        Table of summary information about BFD IPv4
        multihop sessions per location
        
        .. attribute:: ipv4_multi_hop_node_location_summary
        
        	Summary information for BFD IPv4 multihop sessions for location
        	**type**\: list of    :py:class:`Ipv4MultiHopNodeLocationSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopNodeLocationSummaries.Ipv4MultiHopNodeLocationSummary>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.ipv4_multi_hop_node_location_summary = YList()
            self.ipv4_multi_hop_node_location_summary.parent = self
            self.ipv4_multi_hop_node_location_summary.name = 'ipv4_multi_hop_node_location_summary'


        class Ipv4MultiHopNodeLocationSummary(object):
            """
            Summary information for BFD IPv4 multihop
            sessions for location
            
            .. attribute:: location  <key>
            
            	Location
            	**type**\:  str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: session_state
            
            	Statistics of states for sessions
            	**type**\:   :py:class:`SessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopNodeLocationSummaries.Ipv4MultiHopNodeLocationSummary.SessionState>`
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.location = None
                self.session_state = Bfd.Ipv4MultiHopNodeLocationSummaries.Ipv4MultiHopNodeLocationSummary.SessionState()
                self.session_state.parent = self


            class SessionState(object):
                """
                Statistics of states for sessions
                
                .. attribute:: down_count
                
                	Number of sessions in down state
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: retry_count
                
                	Number of sessions in retry state
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: standby_count
                
                	Number of sessions in standby state
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: total_count
                
                	Number of sessions in database
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: unknown_count
                
                	Number of sessions in unknown state
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: up_count
                
                	Number of sessions in up state
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.down_count = None
                    self.retry_count = None
                    self.standby_count = None
                    self.total_count = None
                    self.unknown_count = None
                    self.up_count = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ip-bfd-oper:session-state'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.down_count is not None:
                        return True

                    if self.retry_count is not None:
                        return True

                    if self.standby_count is not None:
                        return True

                    if self.total_count is not None:
                        return True

                    if self.unknown_count is not None:
                        return True

                    if self.up_count is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.Ipv4MultiHopNodeLocationSummaries.Ipv4MultiHopNodeLocationSummary.SessionState']['meta_info']

            @property
            def _common_path(self):
                if self.location is None:
                    raise YPYModelError('Key property location is None')

                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-node-location-summaries/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-node-location-summary[Cisco-IOS-XR-ip-bfd-oper:location = ' + str(self.location) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.location is not None:
                    return True

                if self.session_state is not None and self.session_state._has_data():
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                return meta._meta_table['Bfd.Ipv4MultiHopNodeLocationSummaries.Ipv4MultiHopNodeLocationSummary']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-node-location-summaries'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.ipv4_multi_hop_node_location_summary is not None:
                for child_ref in self.ipv4_multi_hop_node_location_summary:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
            return meta._meta_table['Bfd.Ipv4MultiHopNodeLocationSummaries']['meta_info']


    class Ipv4BfDoMplsteTailSessionBriefs(object):
        """
        Table of brief information about all IPv4 BFD
        over MPLS\-TE Tail sessions in the System
        
        .. attribute:: ipv4bf_do_mplste_tail_session_brief
        
        	Brief information for a single IPv4 BFD over MPLS\-TE session
        	**type**\: list of    :py:class:`Ipv4BfDoMplsteTailSessionBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailSessionBriefs.Ipv4BfDoMplsteTailSessionBrief>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.ipv4bf_do_mplste_tail_session_brief = YList()
            self.ipv4bf_do_mplste_tail_session_brief.parent = self
            self.ipv4bf_do_mplste_tail_session_brief.name = 'ipv4bf_do_mplste_tail_session_brief'


        class Ipv4BfDoMplsteTailSessionBrief(object):
            """
            Brief information for a single IPv4 BFD over
            MPLS\-TE session
            
            .. attribute:: fe_ctype
            
            	FEC Type
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: fec_ctype
            
            	FEC C Type
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: fec_destination
            
            	FEC Destination
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: fec_extended_tunnel_id
            
            	FEC Extended Tunnel ID
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: fec_source
            
            	FEC Source
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: fec_subgroup_id
            
            	FEC Subgroup ID
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: fec_subgroup_originator
            
            	FEC Subgroup originator
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: fec_tunnel_id
            
            	FEC Tunnel ID
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: feclspid
            
            	FEC LSP ID
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: fecp2mpid
            
            	FEC P2MP ID
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: incoming_label
            
            	Incoming Label
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: location
            
            	Location
            	**type**\:  str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: node_id
            
            	Location where session is housed
            	**type**\:  str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: session_flags
            
            	Session Flags
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: session_subtype
            
            	Session subtype
            	**type**\:  str
            
            .. attribute:: session_type
            
            	Session type
            	**type**\:   :py:class:`BfdSessionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdSessionEnum>`
            
            .. attribute:: state
            
            	State
            	**type**\:   :py:class:`BfdMgmtSessionStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionStateEnum>`
            
            .. attribute:: status_brief_information
            
            	Brief Status Information
            	**type**\:   :py:class:`StatusBriefInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailSessionBriefs.Ipv4BfDoMplsteTailSessionBrief.StatusBriefInformation>`
            
            .. attribute:: vrf_name
            
            	VRF name
            	**type**\:  str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.fe_ctype = None
                self.fec_ctype = None
                self.fec_destination = None
                self.fec_extended_tunnel_id = None
                self.fec_source = None
                self.fec_subgroup_id = None
                self.fec_subgroup_originator = None
                self.fec_tunnel_id = None
                self.feclspid = None
                self.fecp2mpid = None
                self.incoming_label = None
                self.location = None
                self.node_id = None
                self.session_flags = None
                self.session_subtype = None
                self.session_type = None
                self.state = None
                self.status_brief_information = Bfd.Ipv4BfDoMplsteTailSessionBriefs.Ipv4BfDoMplsteTailSessionBrief.StatusBriefInformation()
                self.status_brief_information.parent = self
                self.vrf_name = None


            class StatusBriefInformation(object):
                """
                Brief Status Information
                
                .. attribute:: async_interval_multiplier
                
                	Async Interval and Detect Multiplier Information
                	**type**\:   :py:class:`AsyncIntervalMultiplier <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailSessionBriefs.Ipv4BfDoMplsteTailSessionBrief.StatusBriefInformation.AsyncIntervalMultiplier>`
                
                .. attribute:: echo_interval_multiplier
                
                	Echo Interval and Detect Multiplier Information
                	**type**\:   :py:class:`EchoIntervalMultiplier <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailSessionBriefs.Ipv4BfDoMplsteTailSessionBrief.StatusBriefInformation.EchoIntervalMultiplier>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.async_interval_multiplier = Bfd.Ipv4BfDoMplsteTailSessionBriefs.Ipv4BfDoMplsteTailSessionBrief.StatusBriefInformation.AsyncIntervalMultiplier()
                    self.async_interval_multiplier.parent = self
                    self.echo_interval_multiplier = Bfd.Ipv4BfDoMplsteTailSessionBriefs.Ipv4BfDoMplsteTailSessionBrief.StatusBriefInformation.EchoIntervalMultiplier()
                    self.echo_interval_multiplier.parent = self


                class AsyncIntervalMultiplier(object):
                    """
                    Async Interval and Detect Multiplier Information
                    
                    .. attribute:: detection_multiplier
                    
                    	Detection Multiplier
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: detection_time
                    
                    	Detection time in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: negotiated_local_transmit_interval
                    
                    	Negotiated local transmit interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: negotiated_remote_transmit_interval
                    
                    	Negotiated remote transmit interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.detection_multiplier = None
                        self.detection_time = None
                        self.negotiated_local_transmit_interval = None
                        self.negotiated_remote_transmit_interval = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-session-briefs/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-session-brief/Cisco-IOS-XR-ip-bfd-oper:status-brief-information/Cisco-IOS-XR-ip-bfd-oper:async-interval-multiplier'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.detection_multiplier is not None:
                            return True

                        if self.detection_time is not None:
                            return True

                        if self.negotiated_local_transmit_interval is not None:
                            return True

                        if self.negotiated_remote_transmit_interval is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv4BfDoMplsteTailSessionBriefs.Ipv4BfDoMplsteTailSessionBrief.StatusBriefInformation.AsyncIntervalMultiplier']['meta_info']


                class EchoIntervalMultiplier(object):
                    """
                    Echo Interval and Detect Multiplier Information
                    
                    .. attribute:: detection_multiplier
                    
                    	Detection Multiplier
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: detection_time
                    
                    	Detection time in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: negotiated_transmit_interval
                    
                    	Negotiated transmit interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.detection_multiplier = None
                        self.detection_time = None
                        self.negotiated_transmit_interval = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-session-briefs/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-session-brief/Cisco-IOS-XR-ip-bfd-oper:status-brief-information/Cisco-IOS-XR-ip-bfd-oper:echo-interval-multiplier'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.detection_multiplier is not None:
                            return True

                        if self.detection_time is not None:
                            return True

                        if self.negotiated_transmit_interval is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv4BfDoMplsteTailSessionBriefs.Ipv4BfDoMplsteTailSessionBrief.StatusBriefInformation.EchoIntervalMultiplier']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-session-briefs/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-session-brief/Cisco-IOS-XR-ip-bfd-oper:status-brief-information'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.async_interval_multiplier is not None and self.async_interval_multiplier._has_data():
                        return True

                    if self.echo_interval_multiplier is not None and self.echo_interval_multiplier._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.Ipv4BfDoMplsteTailSessionBriefs.Ipv4BfDoMplsteTailSessionBrief.StatusBriefInformation']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-session-briefs/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-session-brief'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.fe_ctype is not None:
                    return True

                if self.fec_ctype is not None:
                    return True

                if self.fec_destination is not None:
                    return True

                if self.fec_extended_tunnel_id is not None:
                    return True

                if self.fec_source is not None:
                    return True

                if self.fec_subgroup_id is not None:
                    return True

                if self.fec_subgroup_originator is not None:
                    return True

                if self.fec_tunnel_id is not None:
                    return True

                if self.feclspid is not None:
                    return True

                if self.fecp2mpid is not None:
                    return True

                if self.incoming_label is not None:
                    return True

                if self.location is not None:
                    return True

                if self.node_id is not None:
                    return True

                if self.session_flags is not None:
                    return True

                if self.session_subtype is not None:
                    return True

                if self.session_type is not None:
                    return True

                if self.state is not None:
                    return True

                if self.status_brief_information is not None and self.status_brief_information._has_data():
                    return True

                if self.vrf_name is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                return meta._meta_table['Bfd.Ipv4BfDoMplsteTailSessionBriefs.Ipv4BfDoMplsteTailSessionBrief']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-session-briefs'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.ipv4bf_do_mplste_tail_session_brief is not None:
                for child_ref in self.ipv4bf_do_mplste_tail_session_brief:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
            return meta._meta_table['Bfd.Ipv4BfDoMplsteTailSessionBriefs']['meta_info']


    class Ipv6MultiHopNodeLocationSummaries(object):
        """
        Table of summary information about BFD IPv6
        multihop sessions per location
        
        .. attribute:: ipv6_multi_hop_node_location_summary
        
        	Summary information for BFD IPv6 multihop sessions for location
        	**type**\: list of    :py:class:`Ipv6MultiHopNodeLocationSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopNodeLocationSummaries.Ipv6MultiHopNodeLocationSummary>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.ipv6_multi_hop_node_location_summary = YList()
            self.ipv6_multi_hop_node_location_summary.parent = self
            self.ipv6_multi_hop_node_location_summary.name = 'ipv6_multi_hop_node_location_summary'


        class Ipv6MultiHopNodeLocationSummary(object):
            """
            Summary information for BFD IPv6 multihop
            sessions for location
            
            .. attribute:: location  <key>
            
            	Location
            	**type**\:  str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: session_state
            
            	Statistics of states for sessions
            	**type**\:   :py:class:`SessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopNodeLocationSummaries.Ipv6MultiHopNodeLocationSummary.SessionState>`
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.location = None
                self.session_state = Bfd.Ipv6MultiHopNodeLocationSummaries.Ipv6MultiHopNodeLocationSummary.SessionState()
                self.session_state.parent = self


            class SessionState(object):
                """
                Statistics of states for sessions
                
                .. attribute:: down_count
                
                	Number of sessions in down state
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: retry_count
                
                	Number of sessions in retry state
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: standby_count
                
                	Number of sessions in standby state
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: total_count
                
                	Number of sessions in database
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: unknown_count
                
                	Number of sessions in unknown state
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: up_count
                
                	Number of sessions in up state
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.down_count = None
                    self.retry_count = None
                    self.standby_count = None
                    self.total_count = None
                    self.unknown_count = None
                    self.up_count = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ip-bfd-oper:session-state'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.down_count is not None:
                        return True

                    if self.retry_count is not None:
                        return True

                    if self.standby_count is not None:
                        return True

                    if self.total_count is not None:
                        return True

                    if self.unknown_count is not None:
                        return True

                    if self.up_count is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.Ipv6MultiHopNodeLocationSummaries.Ipv6MultiHopNodeLocationSummary.SessionState']['meta_info']

            @property
            def _common_path(self):
                if self.location is None:
                    raise YPYModelError('Key property location is None')

                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-node-location-summaries/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-node-location-summary[Cisco-IOS-XR-ip-bfd-oper:location = ' + str(self.location) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.location is not None:
                    return True

                if self.session_state is not None and self.session_state._has_data():
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                return meta._meta_table['Bfd.Ipv6MultiHopNodeLocationSummaries.Ipv6MultiHopNodeLocationSummary']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-node-location-summaries'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.ipv6_multi_hop_node_location_summary is not None:
                for child_ref in self.ipv6_multi_hop_node_location_summary:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
            return meta._meta_table['Bfd.Ipv6MultiHopNodeLocationSummaries']['meta_info']


    class Ipv4MultiHopSummary(object):
        """
        Summary information of BFD IPv4 multihop
        sessions
        
        .. attribute:: session_state
        
        	Statistics of states for sessions
        	**type**\:   :py:class:`SessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopSummary.SessionState>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.session_state = Bfd.Ipv4MultiHopSummary.SessionState()
            self.session_state.parent = self


        class SessionState(object):
            """
            Statistics of states for sessions
            
            .. attribute:: down_count
            
            	Number of sessions in down state
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: total_count
            
            	Number of sessions in database
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: unknown_count
            
            	Number of sessions in unknown state
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: up_count
            
            	Number of sessions in up state
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.down_count = None
                self.total_count = None
                self.unknown_count = None
                self.up_count = None

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-summary/Cisco-IOS-XR-ip-bfd-oper:session-state'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.down_count is not None:
                    return True

                if self.total_count is not None:
                    return True

                if self.unknown_count is not None:
                    return True

                if self.up_count is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                return meta._meta_table['Bfd.Ipv4MultiHopSummary.SessionState']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-summary'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.session_state is not None and self.session_state._has_data():
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
            return meta._meta_table['Bfd.Ipv4MultiHopSummary']['meta_info']


    class Ipv4SingleHopCounters(object):
        """
        IPv4 single hop Counters
        
        .. attribute:: ipv4_single_hop_packet_counters
        
        	Table of IPv4 single hop Packet counters
        	**type**\:   :py:class:`Ipv4SingleHopPacketCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopCounters.Ipv4SingleHopPacketCounters>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.ipv4_single_hop_packet_counters = Bfd.Ipv4SingleHopCounters.Ipv4SingleHopPacketCounters()
            self.ipv4_single_hop_packet_counters.parent = self


        class Ipv4SingleHopPacketCounters(object):
            """
            Table of IPv4 single hop Packet counters
            
            .. attribute:: ipv4_single_hop_packet_counter
            
            	Interface IPv4 single hop Packet counters
            	**type**\: list of    :py:class:`Ipv4SingleHopPacketCounter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopCounters.Ipv4SingleHopPacketCounters.Ipv4SingleHopPacketCounter>`
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.ipv4_single_hop_packet_counter = YList()
                self.ipv4_single_hop_packet_counter.parent = self
                self.ipv4_single_hop_packet_counter.name = 'ipv4_single_hop_packet_counter'


            class Ipv4SingleHopPacketCounter(object):
                """
                Interface IPv4 single hop Packet counters
                
                .. attribute:: interface_name  <key>
                
                	Interface Name
                	**type**\:  str
                
                	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                
                .. attribute:: display_type
                
                	Packet Display Type
                	**type**\:   :py:class:`BfdMgmtPktDisplayEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtPktDisplayEnum>`
                
                .. attribute:: echo_receive_count
                
                	Number of echo packets received
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: echo_transmit_count
                
                	Number of echo packets transmitted
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: hello_receive_count
                
                	Number of Hellos received
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: hello_transmit_count
                
                	Number of Hellos transmitted
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.interface_name = None
                    self.display_type = None
                    self.echo_receive_count = None
                    self.echo_transmit_count = None
                    self.hello_receive_count = None
                    self.hello_transmit_count = None

                @property
                def _common_path(self):
                    if self.interface_name is None:
                        raise YPYModelError('Key property interface_name is None')

                    return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-counters/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-packet-counters/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-packet-counter[Cisco-IOS-XR-ip-bfd-oper:interface-name = ' + str(self.interface_name) + ']'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.interface_name is not None:
                        return True

                    if self.display_type is not None:
                        return True

                    if self.echo_receive_count is not None:
                        return True

                    if self.echo_transmit_count is not None:
                        return True

                    if self.hello_receive_count is not None:
                        return True

                    if self.hello_transmit_count is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.Ipv4SingleHopCounters.Ipv4SingleHopPacketCounters.Ipv4SingleHopPacketCounter']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-counters/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-packet-counters'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.ipv4_single_hop_packet_counter is not None:
                    for child_ref in self.ipv4_single_hop_packet_counter:
                        if child_ref._has_data():
                            return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                return meta._meta_table['Bfd.Ipv4SingleHopCounters.Ipv4SingleHopPacketCounters']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-counters'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.ipv4_single_hop_packet_counters is not None and self.ipv4_single_hop_packet_counters._has_data():
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
            return meta._meta_table['Bfd.Ipv4SingleHopCounters']['meta_info']


    class Ipv6MultiHopSessionDetails(object):
        """
        Table of detailed information about all IPv6
        multihop BFD sessions in the System 
        
        .. attribute:: ipv6_multi_hop_session_detail
        
        	Detailed information for a single IPv6 multihop BFD session
        	**type**\: list of    :py:class:`Ipv6MultiHopSessionDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.ipv6_multi_hop_session_detail = YList()
            self.ipv6_multi_hop_session_detail.parent = self
            self.ipv6_multi_hop_session_detail.name = 'ipv6_multi_hop_session_detail'


        class Ipv6MultiHopSessionDetail(object):
            """
            Detailed information for a single IPv6 multihop
            BFD session
            
            .. attribute:: association_information
            
            	Association session information
            	**type**\: list of    :py:class:`AssociationInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.AssociationInformation>`
            
            .. attribute:: destination_address
            
            	Destination Address
            	**type**\: one of the below types:
            
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            
            ----
            	**type**\:  str
            
            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
            
            
            ----
            .. attribute:: location
            
            	Location
            	**type**\:  str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: lsp_ping_info
            
            	LSP Ping Info
            	**type**\:   :py:class:`LspPingInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.LspPingInfo>`
            
            .. attribute:: mp_download_state
            
            	MP Dowload State
            	**type**\:   :py:class:`MpDownloadState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.MpDownloadState>`
            
            .. attribute:: owner_information
            
            	Client applications owning the session
            	**type**\: list of    :py:class:`OwnerInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.OwnerInformation>`
            
            .. attribute:: source_address
            
            	Source Address
            	**type**\: one of the below types:
            
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            
            ----
            	**type**\:  str
            
            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
            
            
            ----
            .. attribute:: status_information
            
            	Session status information
            	**type**\:   :py:class:`StatusInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation>`
            
            .. attribute:: vrf_name
            
            	VRF name
            	**type**\:  str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.association_information = YList()
                self.association_information.parent = self
                self.association_information.name = 'association_information'
                self.destination_address = None
                self.location = None
                self.lsp_ping_info = Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.LspPingInfo()
                self.lsp_ping_info.parent = self
                self.mp_download_state = Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.MpDownloadState()
                self.mp_download_state.parent = self
                self.owner_information = YList()
                self.owner_information.parent = self
                self.owner_information.name = 'owner_information'
                self.source_address = None
                self.status_information = Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation()
                self.status_information.parent = self
                self.vrf_name = None


            class StatusInformation(object):
                """
                Session status information
                
                .. attribute:: async_receive_statistics
                
                	Statistics of Interval between Async Packets Received (in milli\-seconds)
                	**type**\:   :py:class:`AsyncReceiveStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.AsyncReceiveStatistics>`
                
                .. attribute:: async_transmit_statistics
                
                	Statistics of Interval between Async Packets Transmitted (in milli\-seconds)
                	**type**\:   :py:class:`AsyncTransmitStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.AsyncTransmitStatistics>`
                
                .. attribute:: desired_minimum_echo_transmit_interval
                
                	Desired minimum echo transmit interval in milli\-seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: millisecond
                
                .. attribute:: echo_received_statistics
                
                	Statistics of Interval between Echo Packets Received (in milli\-seconds)
                	**type**\:   :py:class:`EchoReceivedStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.EchoReceivedStatistics>`
                
                .. attribute:: echo_transmit_statistics
                
                	Statistics of Interval between Echo Packets Transmitted (in milli\-seconds)
                	**type**\:   :py:class:`EchoTransmitStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.EchoTransmitStatistics>`
                
                .. attribute:: internal_label
                
                	Internal Label
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: last_state_change
                
                	Time since last state change
                	**type**\:   :py:class:`LastStateChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.LastStateChange>`
                
                .. attribute:: latency_average
                
                	Average value of Latency (in micro\-seconds)
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: microsecond
                
                .. attribute:: latency_maximum
                
                	Maximum value of Latency (in micro\-seconds)
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: microsecond
                
                .. attribute:: latency_minimum
                
                	Minimum value of Latency (in micro\-seconds)
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: microsecond
                
                .. attribute:: latency_number
                
                	Number of Latency Samples. Time between Transmit and Receive
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: local_discriminator
                
                	Session's Local discriminator
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: node_id
                
                	Location where session is housed
                	**type**\:  str
                
                	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
                
                .. attribute:: receive_packet
                
                	Receive Packet
                	**type**\:   :py:class:`ReceivePacket <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.ReceivePacket>`
                
                .. attribute:: remote_discriminator
                
                	Session's Remote discriminator
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: remote_negotiated_interval
                
                	Remote Negotiated Interval in milli\-seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: millisecond
                
                .. attribute:: session_subtype
                
                	Session subtype
                	**type**\:  str
                
                .. attribute:: sessiontype
                
                	Session type
                	**type**\:   :py:class:`BfdSessionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdSessionEnum>`
                
                .. attribute:: source_address
                
                	Source address
                	**type**\:   :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.SourceAddress>`
                
                .. attribute:: state
                
                	State
                	**type**\:   :py:class:`BfdMgmtSessionStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionStateEnum>`
                
                .. attribute:: status_brief_information
                
                	Brief Status Information
                	**type**\:   :py:class:`StatusBriefInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.StatusBriefInformation>`
                
                .. attribute:: to_up_state_count
                
                	Number of times session state went to UP
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: transmit_packet
                
                	Transmit Packet
                	**type**\:   :py:class:`TransmitPacket <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.TransmitPacket>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.async_receive_statistics = Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.AsyncReceiveStatistics()
                    self.async_receive_statistics.parent = self
                    self.async_transmit_statistics = Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.AsyncTransmitStatistics()
                    self.async_transmit_statistics.parent = self
                    self.desired_minimum_echo_transmit_interval = None
                    self.echo_received_statistics = Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.EchoReceivedStatistics()
                    self.echo_received_statistics.parent = self
                    self.echo_transmit_statistics = Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.EchoTransmitStatistics()
                    self.echo_transmit_statistics.parent = self
                    self.internal_label = None
                    self.last_state_change = Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.LastStateChange()
                    self.last_state_change.parent = self
                    self.latency_average = None
                    self.latency_maximum = None
                    self.latency_minimum = None
                    self.latency_number = None
                    self.local_discriminator = None
                    self.node_id = None
                    self.receive_packet = Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.ReceivePacket()
                    self.receive_packet.parent = self
                    self.remote_discriminator = None
                    self.remote_negotiated_interval = None
                    self.session_subtype = None
                    self.sessiontype = None
                    self.source_address = Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.SourceAddress()
                    self.source_address.parent = self
                    self.state = None
                    self.status_brief_information = Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.StatusBriefInformation()
                    self.status_brief_information.parent = self
                    self.to_up_state_count = None
                    self.transmit_packet = Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.TransmitPacket()
                    self.transmit_packet.parent = self


                class SourceAddress(object):
                    """
                    Source address
                    
                    .. attribute:: afi
                    
                    	AFI
                    	**type**\:   :py:class:`BfdAfIdEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdAfIdEnum>`
                    
                    .. attribute:: dummy
                    
                    	No Address
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    .. attribute:: ipv4
                    
                    	IPv4 address type
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: ipv6
                    
                    	IPv6 address type
                    	**type**\:  str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.afi = None
                        self.dummy = None
                        self.ipv4 = None
                        self.ipv6 = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:source-address'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.afi is not None:
                            return True

                        if self.dummy is not None:
                            return True

                        if self.ipv4 is not None:
                            return True

                        if self.ipv6 is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.SourceAddress']['meta_info']


                class LastStateChange(object):
                    """
                    Time since last state change
                    
                    .. attribute:: days
                    
                    	Number of days since last session state transition
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: day
                    
                    .. attribute:: hours
                    
                    	Number of hours since last session state transition
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    	**units**\: hour
                    
                    .. attribute:: minutes
                    
                    	Number of mins since last session state transition
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    	**units**\: minute
                    
                    .. attribute:: seconds
                    
                    	Number of seconds since last session state transition
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    	**units**\: second
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.days = None
                        self.hours = None
                        self.minutes = None
                        self.seconds = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:last-state-change'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.days is not None:
                            return True

                        if self.hours is not None:
                            return True

                        if self.minutes is not None:
                            return True

                        if self.seconds is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.LastStateChange']['meta_info']


                class TransmitPacket(object):
                    """
                    Transmit Packet
                    
                    .. attribute:: authentication_present
                    
                    	Requesting authentication for the session
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: control_plane_independent
                    
                    	BFD implementation does not share fate with its control plane
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: demand
                    
                    	Demand mode
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: desired_minimum_transmit_interval
                    
                    	Desired minimum transmit interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: detection_multiplier
                    
                    	Detection Multiplier
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: diagnostic
                    
                    	Diagnostic
                    	**type**\:   :py:class:`BfdMgmtSessionDiagEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionDiagEnum>`
                    
                    .. attribute:: final
                    
                    	Final bit
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: ihear_you
                    
                    	I Hear You (v0)
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: length
                    
                    	Length
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: my_discriminator
                    
                    	My Discriminator
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: poll
                    
                    	Poll bit
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: required_minimum_echo_receive_interval
                    
                    	Required echo receive interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: required_minimum_receive_interval
                    
                    	Required receive interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: state
                    
                    	State (v1)
                    	**type**\:   :py:class:`BfdMgmtSessionStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionStateEnum>`
                    
                    .. attribute:: version
                    
                    	Version
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    .. attribute:: your_discriminator
                    
                    	Your Discriminator
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.authentication_present = None
                        self.control_plane_independent = None
                        self.demand = None
                        self.desired_minimum_transmit_interval = None
                        self.detection_multiplier = None
                        self.diagnostic = None
                        self.final = None
                        self.ihear_you = None
                        self.length = None
                        self.my_discriminator = None
                        self.poll = None
                        self.required_minimum_echo_receive_interval = None
                        self.required_minimum_receive_interval = None
                        self.state = None
                        self.version = None
                        self.your_discriminator = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:transmit-packet'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.authentication_present is not None:
                            return True

                        if self.control_plane_independent is not None:
                            return True

                        if self.demand is not None:
                            return True

                        if self.desired_minimum_transmit_interval is not None:
                            return True

                        if self.detection_multiplier is not None:
                            return True

                        if self.diagnostic is not None:
                            return True

                        if self.final is not None:
                            return True

                        if self.ihear_you is not None:
                            return True

                        if self.length is not None:
                            return True

                        if self.my_discriminator is not None:
                            return True

                        if self.poll is not None:
                            return True

                        if self.required_minimum_echo_receive_interval is not None:
                            return True

                        if self.required_minimum_receive_interval is not None:
                            return True

                        if self.state is not None:
                            return True

                        if self.version is not None:
                            return True

                        if self.your_discriminator is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.TransmitPacket']['meta_info']


                class ReceivePacket(object):
                    """
                    Receive Packet
                    
                    .. attribute:: authentication_present
                    
                    	Requesting authentication for the session
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: control_plane_independent
                    
                    	BFD implementation does not share fate with its control plane
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: demand
                    
                    	Demand mode
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: desired_minimum_transmit_interval
                    
                    	Desired minimum transmit interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: detection_multiplier
                    
                    	Detection Multiplier
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: diagnostic
                    
                    	Diagnostic
                    	**type**\:   :py:class:`BfdMgmtSessionDiagEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionDiagEnum>`
                    
                    .. attribute:: final
                    
                    	Final bit
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: ihear_you
                    
                    	I Hear You (v0)
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: length
                    
                    	Length
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: my_discriminator
                    
                    	My Discriminator
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: poll
                    
                    	Poll bit
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: required_minimum_echo_receive_interval
                    
                    	Required echo receive interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: required_minimum_receive_interval
                    
                    	Required receive interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: state
                    
                    	State (v1)
                    	**type**\:   :py:class:`BfdMgmtSessionStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionStateEnum>`
                    
                    .. attribute:: version
                    
                    	Version
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    .. attribute:: your_discriminator
                    
                    	Your Discriminator
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.authentication_present = None
                        self.control_plane_independent = None
                        self.demand = None
                        self.desired_minimum_transmit_interval = None
                        self.detection_multiplier = None
                        self.diagnostic = None
                        self.final = None
                        self.ihear_you = None
                        self.length = None
                        self.my_discriminator = None
                        self.poll = None
                        self.required_minimum_echo_receive_interval = None
                        self.required_minimum_receive_interval = None
                        self.state = None
                        self.version = None
                        self.your_discriminator = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:receive-packet'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.authentication_present is not None:
                            return True

                        if self.control_plane_independent is not None:
                            return True

                        if self.demand is not None:
                            return True

                        if self.desired_minimum_transmit_interval is not None:
                            return True

                        if self.detection_multiplier is not None:
                            return True

                        if self.diagnostic is not None:
                            return True

                        if self.final is not None:
                            return True

                        if self.ihear_you is not None:
                            return True

                        if self.length is not None:
                            return True

                        if self.my_discriminator is not None:
                            return True

                        if self.poll is not None:
                            return True

                        if self.required_minimum_echo_receive_interval is not None:
                            return True

                        if self.required_minimum_receive_interval is not None:
                            return True

                        if self.state is not None:
                            return True

                        if self.version is not None:
                            return True

                        if self.your_discriminator is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.ReceivePacket']['meta_info']


                class StatusBriefInformation(object):
                    """
                    Brief Status Information
                    
                    .. attribute:: async_interval_multiplier
                    
                    	Async Interval and Detect Multiplier Information
                    	**type**\:   :py:class:`AsyncIntervalMultiplier <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.StatusBriefInformation.AsyncIntervalMultiplier>`
                    
                    .. attribute:: echo_interval_multiplier
                    
                    	Echo Interval and Detect Multiplier Information
                    	**type**\:   :py:class:`EchoIntervalMultiplier <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.StatusBriefInformation.EchoIntervalMultiplier>`
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.async_interval_multiplier = Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.StatusBriefInformation.AsyncIntervalMultiplier()
                        self.async_interval_multiplier.parent = self
                        self.echo_interval_multiplier = Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.StatusBriefInformation.EchoIntervalMultiplier()
                        self.echo_interval_multiplier.parent = self


                    class AsyncIntervalMultiplier(object):
                        """
                        Async Interval and Detect Multiplier Information
                        
                        .. attribute:: detection_multiplier
                        
                        	Detection Multiplier
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: detection_time
                        
                        	Detection time in micro\-seconds
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        .. attribute:: negotiated_local_transmit_interval
                        
                        	Negotiated local transmit interval in micro\-seconds
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        .. attribute:: negotiated_remote_transmit_interval
                        
                        	Negotiated remote transmit interval in micro\-seconds
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        

                        """

                        _prefix = 'ip-bfd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.detection_multiplier = None
                            self.detection_time = None
                            self.negotiated_local_transmit_interval = None
                            self.negotiated_remote_transmit_interval = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:status-brief-information/Cisco-IOS-XR-ip-bfd-oper:async-interval-multiplier'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.detection_multiplier is not None:
                                return True

                            if self.detection_time is not None:
                                return True

                            if self.negotiated_local_transmit_interval is not None:
                                return True

                            if self.negotiated_remote_transmit_interval is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                            return meta._meta_table['Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.StatusBriefInformation.AsyncIntervalMultiplier']['meta_info']


                    class EchoIntervalMultiplier(object):
                        """
                        Echo Interval and Detect Multiplier Information
                        
                        .. attribute:: detection_multiplier
                        
                        	Detection Multiplier
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: detection_time
                        
                        	Detection time in micro\-seconds
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        .. attribute:: negotiated_transmit_interval
                        
                        	Negotiated transmit interval in micro\-seconds
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        

                        """

                        _prefix = 'ip-bfd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.detection_multiplier = None
                            self.detection_time = None
                            self.negotiated_transmit_interval = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:status-brief-information/Cisco-IOS-XR-ip-bfd-oper:echo-interval-multiplier'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.detection_multiplier is not None:
                                return True

                            if self.detection_time is not None:
                                return True

                            if self.negotiated_transmit_interval is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                            return meta._meta_table['Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.StatusBriefInformation.EchoIntervalMultiplier']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:status-brief-information'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.async_interval_multiplier is not None and self.async_interval_multiplier._has_data():
                            return True

                        if self.echo_interval_multiplier is not None and self.echo_interval_multiplier._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.StatusBriefInformation']['meta_info']


                class AsyncTransmitStatistics(object):
                    """
                    Statistics of Interval between Async Packets
                    Transmitted (in milli\-seconds)
                    
                    .. attribute:: average
                    
                    	Average of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: last
                    
                    	Time since last Transmit/Receive (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: maximum
                    
                    	Maximum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: minimum
                    
                    	Minimum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: number
                    
                    	Number of Interval Samples between Packets sent/received
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.average = None
                        self.last = None
                        self.maximum = None
                        self.minimum = None
                        self.number = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:async-transmit-statistics'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.average is not None:
                            return True

                        if self.last is not None:
                            return True

                        if self.maximum is not None:
                            return True

                        if self.minimum is not None:
                            return True

                        if self.number is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.AsyncTransmitStatistics']['meta_info']


                class AsyncReceiveStatistics(object):
                    """
                    Statistics of Interval between Async Packets
                    Received (in milli\-seconds)
                    
                    .. attribute:: average
                    
                    	Average of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: last
                    
                    	Time since last Transmit/Receive (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: maximum
                    
                    	Maximum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: minimum
                    
                    	Minimum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: number
                    
                    	Number of Interval Samples between Packets sent/received
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.average = None
                        self.last = None
                        self.maximum = None
                        self.minimum = None
                        self.number = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:async-receive-statistics'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.average is not None:
                            return True

                        if self.last is not None:
                            return True

                        if self.maximum is not None:
                            return True

                        if self.minimum is not None:
                            return True

                        if self.number is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.AsyncReceiveStatistics']['meta_info']


                class EchoTransmitStatistics(object):
                    """
                    Statistics of Interval between Echo Packets
                    Transmitted (in milli\-seconds)
                    
                    .. attribute:: average
                    
                    	Average of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: last
                    
                    	Time since last Transmit/Receive (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: maximum
                    
                    	Maximum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: minimum
                    
                    	Minimum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: number
                    
                    	Number of Interval Samples between Packets sent/received
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.average = None
                        self.last = None
                        self.maximum = None
                        self.minimum = None
                        self.number = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:echo-transmit-statistics'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.average is not None:
                            return True

                        if self.last is not None:
                            return True

                        if self.maximum is not None:
                            return True

                        if self.minimum is not None:
                            return True

                        if self.number is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.EchoTransmitStatistics']['meta_info']


                class EchoReceivedStatistics(object):
                    """
                    Statistics of Interval between Echo Packets
                    Received (in milli\-seconds)
                    
                    .. attribute:: average
                    
                    	Average of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: last
                    
                    	Time since last Transmit/Receive (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: maximum
                    
                    	Maximum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: minimum
                    
                    	Minimum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: number
                    
                    	Number of Interval Samples between Packets sent/received
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.average = None
                        self.last = None
                        self.maximum = None
                        self.minimum = None
                        self.number = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:echo-received-statistics'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.average is not None:
                            return True

                        if self.last is not None:
                            return True

                        if self.maximum is not None:
                            return True

                        if self.minimum is not None:
                            return True

                        if self.number is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.EchoReceivedStatistics']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.async_receive_statistics is not None and self.async_receive_statistics._has_data():
                        return True

                    if self.async_transmit_statistics is not None and self.async_transmit_statistics._has_data():
                        return True

                    if self.desired_minimum_echo_transmit_interval is not None:
                        return True

                    if self.echo_received_statistics is not None and self.echo_received_statistics._has_data():
                        return True

                    if self.echo_transmit_statistics is not None and self.echo_transmit_statistics._has_data():
                        return True

                    if self.internal_label is not None:
                        return True

                    if self.last_state_change is not None and self.last_state_change._has_data():
                        return True

                    if self.latency_average is not None:
                        return True

                    if self.latency_maximum is not None:
                        return True

                    if self.latency_minimum is not None:
                        return True

                    if self.latency_number is not None:
                        return True

                    if self.local_discriminator is not None:
                        return True

                    if self.node_id is not None:
                        return True

                    if self.receive_packet is not None and self.receive_packet._has_data():
                        return True

                    if self.remote_discriminator is not None:
                        return True

                    if self.remote_negotiated_interval is not None:
                        return True

                    if self.session_subtype is not None:
                        return True

                    if self.sessiontype is not None:
                        return True

                    if self.source_address is not None and self.source_address._has_data():
                        return True

                    if self.state is not None:
                        return True

                    if self.status_brief_information is not None and self.status_brief_information._has_data():
                        return True

                    if self.to_up_state_count is not None:
                        return True

                    if self.transmit_packet is not None and self.transmit_packet._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation']['meta_info']


            class MpDownloadState(object):
                """
                MP Dowload State
                
                .. attribute:: change_time
                
                	Change time
                	**type**\:   :py:class:`ChangeTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.MpDownloadState.ChangeTime>`
                
                .. attribute:: mp_download_state
                
                	MP Download State
                	**type**\:   :py:class:`BfdMpDownloadStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMpDownloadStateEnum>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.change_time = Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.MpDownloadState.ChangeTime()
                    self.change_time.parent = self
                    self.mp_download_state = None


                class ChangeTime(object):
                    """
                    Change time
                    
                    .. attribute:: nanoseconds
                    
                    	nanoseconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: nanosecond
                    
                    .. attribute:: seconds
                    
                    	seconds
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: second
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.nanoseconds = None
                        self.seconds = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:mp-download-state/Cisco-IOS-XR-ip-bfd-oper:change-time'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.nanoseconds is not None:
                            return True

                        if self.seconds is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.MpDownloadState.ChangeTime']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:mp-download-state'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.change_time is not None and self.change_time._has_data():
                        return True

                    if self.mp_download_state is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.MpDownloadState']['meta_info']


            class LspPingInfo(object):
                """
                LSP Ping Info
                
                .. attribute:: lsp_ping_rx_count
                
                	LSP Ping numer of times received
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_ping_rx_last_code
                
                	LSP Ping Rx Last Code
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: lsp_ping_rx_last_discr
                
                	LSP Ping Rx last received discriminator
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_ping_rx_last_output
                
                	LSP Ping Rx Last Output
                	**type**\:  str
                
                .. attribute:: lsp_ping_rx_last_subcode
                
                	LSP Ping Rx Last Subcode
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: lsp_ping_rx_last_time
                
                	LSP Ping last received time
                	**type**\:   :py:class:`LspPingRxLastTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.LspPingInfo.LspPingRxLastTime>`
                
                .. attribute:: lsp_ping_tx_count
                
                	LSP Ping Tx count
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_ping_tx_error_count
                
                	LSP Ping Tx error count
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_ping_tx_last_error_rc
                
                	LSP Ping Tx last error
                	**type**\:  str
                
                .. attribute:: lsp_ping_tx_last_error_time
                
                	LSP Ping last error time
                	**type**\:   :py:class:`LspPingTxLastErrorTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.LspPingInfo.LspPingTxLastErrorTime>`
                
                .. attribute:: lsp_ping_tx_last_rc
                
                	LSP Ping Tx last result
                	**type**\:  str
                
                .. attribute:: lsp_ping_tx_last_time
                
                	LSP Ping last sent time
                	**type**\:   :py:class:`LspPingTxLastTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.LspPingInfo.LspPingTxLastTime>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.lsp_ping_rx_count = None
                    self.lsp_ping_rx_last_code = None
                    self.lsp_ping_rx_last_discr = None
                    self.lsp_ping_rx_last_output = None
                    self.lsp_ping_rx_last_subcode = None
                    self.lsp_ping_rx_last_time = Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.LspPingInfo.LspPingRxLastTime()
                    self.lsp_ping_rx_last_time.parent = self
                    self.lsp_ping_tx_count = None
                    self.lsp_ping_tx_error_count = None
                    self.lsp_ping_tx_last_error_rc = None
                    self.lsp_ping_tx_last_error_time = Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.LspPingInfo.LspPingTxLastErrorTime()
                    self.lsp_ping_tx_last_error_time.parent = self
                    self.lsp_ping_tx_last_rc = None
                    self.lsp_ping_tx_last_time = Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.LspPingInfo.LspPingTxLastTime()
                    self.lsp_ping_tx_last_time.parent = self


                class LspPingTxLastTime(object):
                    """
                    LSP Ping last sent time
                    
                    .. attribute:: nanoseconds
                    
                    	nanoseconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: nanosecond
                    
                    .. attribute:: seconds
                    
                    	seconds
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: second
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.nanoseconds = None
                        self.seconds = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:lsp-ping-info/Cisco-IOS-XR-ip-bfd-oper:lsp-ping-tx-last-time'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.nanoseconds is not None:
                            return True

                        if self.seconds is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.LspPingInfo.LspPingTxLastTime']['meta_info']


                class LspPingTxLastErrorTime(object):
                    """
                    LSP Ping last error time
                    
                    .. attribute:: nanoseconds
                    
                    	nanoseconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: nanosecond
                    
                    .. attribute:: seconds
                    
                    	seconds
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: second
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.nanoseconds = None
                        self.seconds = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:lsp-ping-info/Cisco-IOS-XR-ip-bfd-oper:lsp-ping-tx-last-error-time'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.nanoseconds is not None:
                            return True

                        if self.seconds is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.LspPingInfo.LspPingTxLastErrorTime']['meta_info']


                class LspPingRxLastTime(object):
                    """
                    LSP Ping last received time
                    
                    .. attribute:: nanoseconds
                    
                    	nanoseconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: nanosecond
                    
                    .. attribute:: seconds
                    
                    	seconds
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: second
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.nanoseconds = None
                        self.seconds = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:lsp-ping-info/Cisco-IOS-XR-ip-bfd-oper:lsp-ping-rx-last-time'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.nanoseconds is not None:
                            return True

                        if self.seconds is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.LspPingInfo.LspPingRxLastTime']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:lsp-ping-info'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.lsp_ping_rx_count is not None:
                        return True

                    if self.lsp_ping_rx_last_code is not None:
                        return True

                    if self.lsp_ping_rx_last_discr is not None:
                        return True

                    if self.lsp_ping_rx_last_output is not None:
                        return True

                    if self.lsp_ping_rx_last_subcode is not None:
                        return True

                    if self.lsp_ping_rx_last_time is not None and self.lsp_ping_rx_last_time._has_data():
                        return True

                    if self.lsp_ping_tx_count is not None:
                        return True

                    if self.lsp_ping_tx_error_count is not None:
                        return True

                    if self.lsp_ping_tx_last_error_rc is not None:
                        return True

                    if self.lsp_ping_tx_last_error_time is not None and self.lsp_ping_tx_last_error_time._has_data():
                        return True

                    if self.lsp_ping_tx_last_rc is not None:
                        return True

                    if self.lsp_ping_tx_last_time is not None and self.lsp_ping_tx_last_time._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.LspPingInfo']['meta_info']


            class OwnerInformation(object):
                """
                Client applications owning the session
                
                .. attribute:: adjusted_detection_multiplier
                
                	Adjusted detection multiplier to compute detection time
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: adjusted_interval
                
                	Adjusted minimum transmit interval in milli\-seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: millisecond
                
                .. attribute:: detection_multiplier
                
                	Client specified detection multiplier to compute detection time
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: interval
                
                	Client specified minimum transmit interval in micro\-seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: microsecond
                
                .. attribute:: name
                
                	Client process name
                	**type**\:  str
                
                	**length:** 0..257
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.adjusted_detection_multiplier = None
                    self.adjusted_interval = None
                    self.detection_multiplier = None
                    self.interval = None
                    self.name = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:owner-information'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.adjusted_detection_multiplier is not None:
                        return True

                    if self.adjusted_interval is not None:
                        return True

                    if self.detection_multiplier is not None:
                        return True

                    if self.interval is not None:
                        return True

                    if self.name is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.OwnerInformation']['meta_info']


            class AssociationInformation(object):
                """
                Association session information
                
                .. attribute:: local_discriminator
                
                	Session's Local discriminator
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: owner_information
                
                	Client applications owning the session
                	**type**\: list of    :py:class:`OwnerInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.AssociationInformation.OwnerInformation>`
                
                .. attribute:: session_key
                
                	Session Key
                	**type**\:   :py:class:`SessionKey <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.AssociationInformation.SessionKey>`
                
                .. attribute:: sessiontype
                
                	Session type
                	**type**\:   :py:class:`BfdSessionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdSessionEnum>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.local_discriminator = None
                    self.owner_information = YList()
                    self.owner_information.parent = self
                    self.owner_information.name = 'owner_information'
                    self.session_key = Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.AssociationInformation.SessionKey()
                    self.session_key.parent = self
                    self.sessiontype = None


                class SessionKey(object):
                    """
                    Session Key
                    
                    .. attribute:: bfdfec
                    
                    	Union of FECs
                    	**type**\:   :py:class:`Bfdfec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.AssociationInformation.SessionKey.Bfdfec>`
                    
                    .. attribute:: incoming_label
                    
                    	Incoming Label
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: interface_name
                    
                    	Session Interface Name
                    	**type**\:  str
                    
                    	**length:** 0..64
                    
                    .. attribute:: ip_destination_address
                    
                    	IPv4/v6 dest address
                    	**type**\:   :py:class:`IpDestinationAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.AssociationInformation.SessionKey.IpDestinationAddress>`
                    
                    .. attribute:: ip_source_address
                    
                    	IPv4/v6 source address
                    	**type**\:   :py:class:`IpSourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.AssociationInformation.SessionKey.IpSourceAddress>`
                    
                    .. attribute:: sbfd_enabled
                    
                    	SBFD enable flag
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: sbfd_target_type
                    
                    	SBFD target type
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: session_key_type
                    
                    	Session Key Type
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: target_address
                    
                    	sbfd target address
                    	**type**\:   :py:class:`TargetAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.AssociationInformation.SessionKey.TargetAddress>`
                    
                    .. attribute:: vrf_name
                    
                    	Session VRF Name
                    	**type**\:  str
                    
                    	**length:** 0..120
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.bfdfec = Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.AssociationInformation.SessionKey.Bfdfec()
                        self.bfdfec.parent = self
                        self.incoming_label = None
                        self.interface_name = None
                        self.ip_destination_address = Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.AssociationInformation.SessionKey.IpDestinationAddress()
                        self.ip_destination_address.parent = self
                        self.ip_source_address = Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.AssociationInformation.SessionKey.IpSourceAddress()
                        self.ip_source_address.parent = self
                        self.sbfd_enabled = None
                        self.sbfd_target_type = None
                        self.session_key_type = None
                        self.target_address = Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.AssociationInformation.SessionKey.TargetAddress()
                        self.target_address.parent = self
                        self.vrf_name = None


                    class IpDestinationAddress(object):
                        """
                        IPv4/v6 dest address
                        
                        .. attribute:: afi
                        
                        	AFI
                        	**type**\:   :py:class:`BfdAfIdEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdAfIdEnum>`
                        
                        .. attribute:: dummy
                        
                        	No Address
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: ipv4
                        
                        	IPv4 address type
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: ipv6
                        
                        	IPv6 address type
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-bfd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.afi = None
                            self.dummy = None
                            self.ipv4 = None
                            self.ipv6 = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:session-key/Cisco-IOS-XR-ip-bfd-oper:ip-destination-address'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.afi is not None:
                                return True

                            if self.dummy is not None:
                                return True

                            if self.ipv4 is not None:
                                return True

                            if self.ipv6 is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                            return meta._meta_table['Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.AssociationInformation.SessionKey.IpDestinationAddress']['meta_info']


                    class IpSourceAddress(object):
                        """
                        IPv4/v6 source address
                        
                        .. attribute:: afi
                        
                        	AFI
                        	**type**\:   :py:class:`BfdAfIdEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdAfIdEnum>`
                        
                        .. attribute:: dummy
                        
                        	No Address
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: ipv4
                        
                        	IPv4 address type
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: ipv6
                        
                        	IPv6 address type
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-bfd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.afi = None
                            self.dummy = None
                            self.ipv4 = None
                            self.ipv6 = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:session-key/Cisco-IOS-XR-ip-bfd-oper:ip-source-address'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.afi is not None:
                                return True

                            if self.dummy is not None:
                                return True

                            if self.ipv4 is not None:
                                return True

                            if self.ipv6 is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                            return meta._meta_table['Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.AssociationInformation.SessionKey.IpSourceAddress']['meta_info']


                    class Bfdfec(object):
                        """
                        Union of FECs
                        
                        .. attribute:: bfdfe_ctype
                        
                        	BFDFECType
                        	**type**\:   :py:class:`BfdApiFecEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdApiFecEnum>`
                        
                        .. attribute:: dummy
                        
                        	dummy
                        	**type**\:   :py:class:`Dummy <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.AssociationInformation.SessionKey.Bfdfec.Dummy>`
                        
                        .. attribute:: te_s2l_fec
                        
                        	te s2l fec
                        	**type**\:   :py:class:`TeS2LFec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.AssociationInformation.SessionKey.Bfdfec.TeS2LFec>`
                        
                        

                        """

                        _prefix = 'ip-bfd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.bfdfe_ctype = None
                            self.dummy = Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.AssociationInformation.SessionKey.Bfdfec.Dummy()
                            self.dummy.parent = self
                            self.te_s2l_fec = Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.AssociationInformation.SessionKey.Bfdfec.TeS2LFec()
                            self.te_s2l_fec.parent = self


                        class Dummy(object):
                            """
                            dummy
                            
                            .. attribute:: dummy
                            
                            	dummy
                            	**type**\:  str
                            
                            	**pattern:** ([0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2})\*)?
                            
                            

                            """

                            _prefix = 'ip-bfd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.dummy = None

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:session-key/Cisco-IOS-XR-ip-bfd-oper:bfdfec/Cisco-IOS-XR-ip-bfd-oper:dummy'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.dummy is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                                return meta._meta_table['Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.AssociationInformation.SessionKey.Bfdfec.Dummy']['meta_info']


                        class TeS2LFec(object):
                            """
                            te s2l fec
                            
                            .. attribute:: s2l_fec_ctype
                            
                            	Session identifier (ctype)
                            	**type**\:   :py:class:`MplsLibCEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.MplsLibCEnum>`
                            
                            .. attribute:: s2l_fec_dest
                            
                            	sub\-LSP destination address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: s2l_fec_extended_tunnel_id
                            
                            	Extended tunnel ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: s2l_fec_lsp_id
                            
                            	LSP ID
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: s2l_fec_p2mp_id
                            
                            	P2MP ID
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: s2l_fec_source
                            
                            	LSP source address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: s2l_fec_subgroup_id
                            
                            	sub\-LSP subgroup ID
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: s2l_fec_subgroup_originator
                            
                            	Subgroup Originator
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: s2l_fec_tunnel_id
                            
                            	Tunnel ID
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: s2l_fec_vrf
                            
                            	VRF; currently only for GMPLS tunnels
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'ip-bfd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.s2l_fec_ctype = None
                                self.s2l_fec_dest = None
                                self.s2l_fec_extended_tunnel_id = None
                                self.s2l_fec_lsp_id = None
                                self.s2l_fec_p2mp_id = None
                                self.s2l_fec_source = None
                                self.s2l_fec_subgroup_id = None
                                self.s2l_fec_subgroup_originator = None
                                self.s2l_fec_tunnel_id = None
                                self.s2l_fec_vrf = None

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:session-key/Cisco-IOS-XR-ip-bfd-oper:bfdfec/Cisco-IOS-XR-ip-bfd-oper:te-s2l-fec'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.s2l_fec_ctype is not None:
                                    return True

                                if self.s2l_fec_dest is not None:
                                    return True

                                if self.s2l_fec_extended_tunnel_id is not None:
                                    return True

                                if self.s2l_fec_lsp_id is not None:
                                    return True

                                if self.s2l_fec_p2mp_id is not None:
                                    return True

                                if self.s2l_fec_source is not None:
                                    return True

                                if self.s2l_fec_subgroup_id is not None:
                                    return True

                                if self.s2l_fec_subgroup_originator is not None:
                                    return True

                                if self.s2l_fec_tunnel_id is not None:
                                    return True

                                if self.s2l_fec_vrf is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                                return meta._meta_table['Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.AssociationInformation.SessionKey.Bfdfec.TeS2LFec']['meta_info']

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:session-key/Cisco-IOS-XR-ip-bfd-oper:bfdfec'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.bfdfe_ctype is not None:
                                return True

                            if self.dummy is not None and self.dummy._has_data():
                                return True

                            if self.te_s2l_fec is not None and self.te_s2l_fec._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                            return meta._meta_table['Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.AssociationInformation.SessionKey.Bfdfec']['meta_info']


                    class TargetAddress(object):
                        """
                        sbfd target address
                        
                        .. attribute:: afi
                        
                        	AFI
                        	**type**\:   :py:class:`BfdAfIdEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdAfIdEnum>`
                        
                        .. attribute:: dummy
                        
                        	No Address
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: ipv4
                        
                        	IPv4 address type
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: ipv6
                        
                        	IPv6 address type
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-bfd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.afi = None
                            self.dummy = None
                            self.ipv4 = None
                            self.ipv6 = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:session-key/Cisco-IOS-XR-ip-bfd-oper:target-address'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.afi is not None:
                                return True

                            if self.dummy is not None:
                                return True

                            if self.ipv4 is not None:
                                return True

                            if self.ipv6 is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                            return meta._meta_table['Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.AssociationInformation.SessionKey.TargetAddress']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:session-key'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.bfdfec is not None and self.bfdfec._has_data():
                            return True

                        if self.incoming_label is not None:
                            return True

                        if self.interface_name is not None:
                            return True

                        if self.ip_destination_address is not None and self.ip_destination_address._has_data():
                            return True

                        if self.ip_source_address is not None and self.ip_source_address._has_data():
                            return True

                        if self.sbfd_enabled is not None:
                            return True

                        if self.sbfd_target_type is not None:
                            return True

                        if self.session_key_type is not None:
                            return True

                        if self.target_address is not None and self.target_address._has_data():
                            return True

                        if self.vrf_name is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.AssociationInformation.SessionKey']['meta_info']


                class OwnerInformation(object):
                    """
                    Client applications owning the session
                    
                    .. attribute:: adjusted_detection_multiplier
                    
                    	Adjusted detection multiplier to compute detection time
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: adjusted_interval
                    
                    	Adjusted minimum transmit interval in milli\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: detection_multiplier
                    
                    	Client specified detection multiplier to compute detection time
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: interval
                    
                    	Client specified minimum transmit interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: name
                    
                    	Client process name
                    	**type**\:  str
                    
                    	**length:** 0..257
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.adjusted_detection_multiplier = None
                        self.adjusted_interval = None
                        self.detection_multiplier = None
                        self.interval = None
                        self.name = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:owner-information'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.adjusted_detection_multiplier is not None:
                            return True

                        if self.adjusted_interval is not None:
                            return True

                        if self.detection_multiplier is not None:
                            return True

                        if self.interval is not None:
                            return True

                        if self.name is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.AssociationInformation.OwnerInformation']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.local_discriminator is not None:
                        return True

                    if self.owner_information is not None:
                        for child_ref in self.owner_information:
                            if child_ref._has_data():
                                return True

                    if self.session_key is not None and self.session_key._has_data():
                        return True

                    if self.sessiontype is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.AssociationInformation']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-session-detail'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.association_information is not None:
                    for child_ref in self.association_information:
                        if child_ref._has_data():
                            return True

                if self.destination_address is not None:
                    return True

                if self.location is not None:
                    return True

                if self.lsp_ping_info is not None and self.lsp_ping_info._has_data():
                    return True

                if self.mp_download_state is not None and self.mp_download_state._has_data():
                    return True

                if self.owner_information is not None:
                    for child_ref in self.owner_information:
                        if child_ref._has_data():
                            return True

                if self.source_address is not None:
                    return True

                if self.status_information is not None and self.status_information._has_data():
                    return True

                if self.vrf_name is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                return meta._meta_table['Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-session-details'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.ipv6_multi_hop_session_detail is not None:
                for child_ref in self.ipv6_multi_hop_session_detail:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
            return meta._meta_table['Bfd.Ipv6MultiHopSessionDetails']['meta_info']


    class Ipv6MultiHopMultiPaths(object):
        """
        IPv6 multi hop multipath
        
        .. attribute:: ipv6_multi_hop_multi_path
        
        	IPv6 multihop multipath table
        	**type**\: list of    :py:class:`Ipv6MultiHopMultiPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopMultiPaths.Ipv6MultiHopMultiPath>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.ipv6_multi_hop_multi_path = YList()
            self.ipv6_multi_hop_multi_path.parent = self
            self.ipv6_multi_hop_multi_path.name = 'ipv6_multi_hop_multi_path'


        class Ipv6MultiHopMultiPath(object):
            """
            IPv6 multihop multipath table
            
            .. attribute:: destination_address
            
            	Destination address
            	**type**\: one of the below types:
            
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            
            ----
            	**type**\:  str
            
            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
            
            
            ----
            .. attribute:: incoming_label_xr
            
            	Incoming Label
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: local_discriminator
            
            	Session's Local discriminator
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: location
            
            	Location
            	**type**\:  str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: node_id
            
            	Location where session is housed
            	**type**\:  str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: session_interface_name
            
            	Interface name
            	**type**\:  str
            
            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
            
            .. attribute:: session_subtype
            
            	Session subtype
            	**type**\:  str
            
            .. attribute:: source_address
            
            	Source address
            	**type**\: one of the below types:
            
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            
            ----
            	**type**\:  str
            
            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
            
            
            ----
            .. attribute:: state
            
            	State
            	**type**\:   :py:class:`BfdMgmtSessionStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionStateEnum>`
            
            .. attribute:: vrf_name
            
            	VRF name
            	**type**\:  str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.destination_address = None
                self.incoming_label_xr = None
                self.local_discriminator = None
                self.location = None
                self.node_id = None
                self.session_interface_name = None
                self.session_subtype = None
                self.source_address = None
                self.state = None
                self.vrf_name = None

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-multi-paths/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-multi-path'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.destination_address is not None:
                    return True

                if self.incoming_label_xr is not None:
                    return True

                if self.local_discriminator is not None:
                    return True

                if self.location is not None:
                    return True

                if self.node_id is not None:
                    return True

                if self.session_interface_name is not None:
                    return True

                if self.session_subtype is not None:
                    return True

                if self.source_address is not None:
                    return True

                if self.state is not None:
                    return True

                if self.vrf_name is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                return meta._meta_table['Bfd.Ipv6MultiHopMultiPaths.Ipv6MultiHopMultiPath']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-multi-paths'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.ipv6_multi_hop_multi_path is not None:
                for child_ref in self.ipv6_multi_hop_multi_path:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
            return meta._meta_table['Bfd.Ipv6MultiHopMultiPaths']['meta_info']


    class Ipv4BfDoMplsteHeadCounters(object):
        """
        IPv4 BFD over MPLS\-TE Counters
        
        .. attribute:: ipv4bf_do_mplste_head_packet_counters
        
        	Table of IPv4 BFD over MPLS\-TE Packet counters
        	**type**\:   :py:class:`Ipv4BfDoMplsteHeadPacketCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadCounters.Ipv4BfDoMplsteHeadPacketCounters>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.ipv4bf_do_mplste_head_packet_counters = Bfd.Ipv4BfDoMplsteHeadCounters.Ipv4BfDoMplsteHeadPacketCounters()
            self.ipv4bf_do_mplste_head_packet_counters.parent = self


        class Ipv4BfDoMplsteHeadPacketCounters(object):
            """
            Table of IPv4 BFD over MPLS\-TE Packet counters
            
            .. attribute:: ipv4bf_do_mplste_head_packet_counter
            
            	Interface  IPv4 BFD over MPLS\-TE Packet counters
            	**type**\: list of    :py:class:`Ipv4BfDoMplsteHeadPacketCounter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadCounters.Ipv4BfDoMplsteHeadPacketCounters.Ipv4BfDoMplsteHeadPacketCounter>`
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.ipv4bf_do_mplste_head_packet_counter = YList()
                self.ipv4bf_do_mplste_head_packet_counter.parent = self
                self.ipv4bf_do_mplste_head_packet_counter.name = 'ipv4bf_do_mplste_head_packet_counter'


            class Ipv4BfDoMplsteHeadPacketCounter(object):
                """
                Interface  IPv4 BFD over MPLS\-TE Packet
                counters
                
                .. attribute:: display_type
                
                	Packet Display Type
                	**type**\:   :py:class:`BfdMgmtPktDisplayEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtPktDisplayEnum>`
                
                .. attribute:: echo_receive_count
                
                	Number of echo packets received
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: echo_transmit_count
                
                	Number of echo packets transmitted
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: hello_receive_count
                
                	Number of Hellos received
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: hello_transmit_count
                
                	Number of Hellos transmitted
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: interface_name
                
                	Interface Name
                	**type**\:  str
                
                	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                
                .. attribute:: location
                
                	Location
                	**type**\:  str
                
                	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.display_type = None
                    self.echo_receive_count = None
                    self.echo_transmit_count = None
                    self.hello_receive_count = None
                    self.hello_transmit_count = None
                    self.interface_name = None
                    self.location = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-counters/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-packet-counters/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-packet-counter'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.display_type is not None:
                        return True

                    if self.echo_receive_count is not None:
                        return True

                    if self.echo_transmit_count is not None:
                        return True

                    if self.hello_receive_count is not None:
                        return True

                    if self.hello_transmit_count is not None:
                        return True

                    if self.interface_name is not None:
                        return True

                    if self.location is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.Ipv4BfDoMplsteHeadCounters.Ipv4BfDoMplsteHeadPacketCounters.Ipv4BfDoMplsteHeadPacketCounter']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-counters/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-packet-counters'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.ipv4bf_do_mplste_head_packet_counter is not None:
                    for child_ref in self.ipv4bf_do_mplste_head_packet_counter:
                        if child_ref._has_data():
                            return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                return meta._meta_table['Bfd.Ipv4BfDoMplsteHeadCounters.Ipv4BfDoMplsteHeadPacketCounters']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-counters'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.ipv4bf_do_mplste_head_packet_counters is not None and self.ipv4bf_do_mplste_head_packet_counters._has_data():
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
            return meta._meta_table['Bfd.Ipv4BfDoMplsteHeadCounters']['meta_info']


    class SessionMibs(object):
        """
        BFD session MIB database
        
        .. attribute:: session_mib
        
        	Brief information for BFD session MIB
        	**type**\: list of    :py:class:`SessionMib <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.SessionMibs.SessionMib>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.session_mib = YList()
            self.session_mib.parent = self
            self.session_mib.name = 'session_mib'


        class SessionMib(object):
            """
            Brief information for BFD session MIB
            
            .. attribute:: discriminator  <key>
            
            	Sesison Discr 
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: desired_min_tx_interval
            
            	Desired Min TX Interval
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: dest_address
            
            	Session Destination address
            	**type**\:   :py:class:`DestAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.SessionMibs.SessionMib.DestAddress>`
            
            .. attribute:: detection_multiplier
            
            	Detection Multiplier
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: int_handle
            
            	Session Interface Handle
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: interface_name
            
            	Session Interface Name
            	**type**\:  str
            
            	**length:** 0..64
            
            .. attribute:: last_down_diag
            
            	Last Session Down Diag
            	**type**\:   :py:class:`BfdMgmtSessionDiagEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionDiagEnum>`
            
            .. attribute:: last_down_time_nsec
            
            	Last Session Down Time (nanoseconds)
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            	**units**\: nanosecond
            
            .. attribute:: last_down_time_sec
            
            	Last Session Down Time (seconds)
            	**type**\:  int
            
            	**range:** 0..18446744073709551615
            
            	**units**\: second
            
            .. attribute:: last_time_cached
            
            	Last Time Session Info Queried
            	**type**\:  int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: last_up_time_nsec
            
            	Last Session Up Time (nanoseconds)
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            	**units**\: nanosecond
            
            .. attribute:: last_up_time_sec
            
            	Last Session Up Time (seconds)
            	**type**\:  int
            
            	**range:** 0..18446744073709551615
            
            	**units**\: second
            
            .. attribute:: local_discriminator
            
            	Sessions' Local Discriminator
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: pkt_in
            
            	Packet In Counter
            	**type**\:  int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: pkt_out
            
            	Packet Out Counter
            	**type**\:  int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: remote_discriminator
            
            	Sessions' Remote Discriminator
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: required_min_rx_echo_interval
            
            	Required Min RX Echo Interval
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: required_min_rx_interval
            
            	Required Min RX Interval
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: session_state
            
            	Session State
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: sessionversion
            
            	Session BFD Version
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: trap_bitmap
            
            	Trap Generator Bitmap
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: up_counter
            
            	Up Count
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.discriminator = None
                self.desired_min_tx_interval = None
                self.dest_address = Bfd.SessionMibs.SessionMib.DestAddress()
                self.dest_address.parent = self
                self.detection_multiplier = None
                self.int_handle = None
                self.interface_name = None
                self.last_down_diag = None
                self.last_down_time_nsec = None
                self.last_down_time_sec = None
                self.last_time_cached = None
                self.last_up_time_nsec = None
                self.last_up_time_sec = None
                self.local_discriminator = None
                self.pkt_in = None
                self.pkt_out = None
                self.remote_discriminator = None
                self.required_min_rx_echo_interval = None
                self.required_min_rx_interval = None
                self.session_state = None
                self.sessionversion = None
                self.trap_bitmap = None
                self.up_counter = None


            class DestAddress(object):
                """
                Session Destination address
                
                .. attribute:: afi
                
                	AFI
                	**type**\:   :py:class:`BfdAfIdEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdAfIdEnum>`
                
                .. attribute:: dummy
                
                	No Address
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: ipv4
                
                	IPv4 address type
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: ipv6
                
                	IPv6 address type
                	**type**\:  str
                
                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.afi = None
                    self.dummy = None
                    self.ipv4 = None
                    self.ipv6 = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ip-bfd-oper:dest-address'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.afi is not None:
                        return True

                    if self.dummy is not None:
                        return True

                    if self.ipv4 is not None:
                        return True

                    if self.ipv6 is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.SessionMibs.SessionMib.DestAddress']['meta_info']

            @property
            def _common_path(self):
                if self.discriminator is None:
                    raise YPYModelError('Key property discriminator is None')

                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:session-mibs/Cisco-IOS-XR-ip-bfd-oper:session-mib[Cisco-IOS-XR-ip-bfd-oper:discriminator = ' + str(self.discriminator) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.discriminator is not None:
                    return True

                if self.desired_min_tx_interval is not None:
                    return True

                if self.dest_address is not None and self.dest_address._has_data():
                    return True

                if self.detection_multiplier is not None:
                    return True

                if self.int_handle is not None:
                    return True

                if self.interface_name is not None:
                    return True

                if self.last_down_diag is not None:
                    return True

                if self.last_down_time_nsec is not None:
                    return True

                if self.last_down_time_sec is not None:
                    return True

                if self.last_time_cached is not None:
                    return True

                if self.last_up_time_nsec is not None:
                    return True

                if self.last_up_time_sec is not None:
                    return True

                if self.local_discriminator is not None:
                    return True

                if self.pkt_in is not None:
                    return True

                if self.pkt_out is not None:
                    return True

                if self.remote_discriminator is not None:
                    return True

                if self.required_min_rx_echo_interval is not None:
                    return True

                if self.required_min_rx_interval is not None:
                    return True

                if self.session_state is not None:
                    return True

                if self.sessionversion is not None:
                    return True

                if self.trap_bitmap is not None:
                    return True

                if self.up_counter is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                return meta._meta_table['Bfd.SessionMibs.SessionMib']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:session-mibs'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.session_mib is not None:
                for child_ref in self.session_mib:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
            return meta._meta_table['Bfd.SessionMibs']['meta_info']


    class Ipv6MultiHopSummary(object):
        """
        Summary information of BFD IPv6 multihop
        sessions
        
        .. attribute:: session_state
        
        	Statistics of states for sessions
        	**type**\:   :py:class:`SessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopSummary.SessionState>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.session_state = Bfd.Ipv6MultiHopSummary.SessionState()
            self.session_state.parent = self


        class SessionState(object):
            """
            Statistics of states for sessions
            
            .. attribute:: down_count
            
            	Number of sessions in down state
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: total_count
            
            	Number of sessions in database
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: unknown_count
            
            	Number of sessions in unknown state
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: up_count
            
            	Number of sessions in up state
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.down_count = None
                self.total_count = None
                self.unknown_count = None
                self.up_count = None

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-summary/Cisco-IOS-XR-ip-bfd-oper:session-state'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.down_count is not None:
                    return True

                if self.total_count is not None:
                    return True

                if self.unknown_count is not None:
                    return True

                if self.up_count is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                return meta._meta_table['Bfd.Ipv6MultiHopSummary.SessionState']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-summary'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.session_state is not None and self.session_state._has_data():
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
            return meta._meta_table['Bfd.Ipv6MultiHopSummary']['meta_info']


    class LabelSummaryNodes(object):
        """
        Table of summary about Label BFD sessions for
        location
        
        .. attribute:: label_summary_node
        
        	Summary of Label BFD 
        	**type**\: list of    :py:class:`LabelSummaryNode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSummaryNodes.LabelSummaryNode>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.label_summary_node = YList()
            self.label_summary_node.parent = self
            self.label_summary_node.name = 'label_summary_node'


        class LabelSummaryNode(object):
            """
            Summary of Label BFD 
            
            .. attribute:: location_name  <key>
            
            	Location name
            	**type**\:  str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            .. attribute:: session_state
            
            	Statistics of states for sessions
            	**type**\:   :py:class:`SessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSummaryNodes.LabelSummaryNode.SessionState>`
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.location_name = None
                self.session_state = Bfd.LabelSummaryNodes.LabelSummaryNode.SessionState()
                self.session_state.parent = self


            class SessionState(object):
                """
                Statistics of states for sessions
                
                .. attribute:: down_count
                
                	Number of sessions in down state
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: retry_count
                
                	Number of sessions in retry state
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: standby_count
                
                	Number of sessions in standby state
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: total_count
                
                	Number of sessions in database
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: unknown_count
                
                	Number of sessions in unknown state
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: up_count
                
                	Number of sessions in up state
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.down_count = None
                    self.retry_count = None
                    self.standby_count = None
                    self.total_count = None
                    self.unknown_count = None
                    self.up_count = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ip-bfd-oper:session-state'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.down_count is not None:
                        return True

                    if self.retry_count is not None:
                        return True

                    if self.standby_count is not None:
                        return True

                    if self.total_count is not None:
                        return True

                    if self.unknown_count is not None:
                        return True

                    if self.up_count is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.LabelSummaryNodes.LabelSummaryNode.SessionState']['meta_info']

            @property
            def _common_path(self):
                if self.location_name is None:
                    raise YPYModelError('Key property location_name is None')

                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:label-summary-nodes/Cisco-IOS-XR-ip-bfd-oper:label-summary-node[Cisco-IOS-XR-ip-bfd-oper:location-name = ' + str(self.location_name) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.location_name is not None:
                    return True

                if self.session_state is not None and self.session_state._has_data():
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                return meta._meta_table['Bfd.LabelSummaryNodes.LabelSummaryNode']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:label-summary-nodes'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.label_summary_node is not None:
                for child_ref in self.label_summary_node:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
            return meta._meta_table['Bfd.LabelSummaryNodes']['meta_info']


    class Ipv6MultiHopSessionBriefs(object):
        """
        Table of brief information about all IPv6
        multihop BFD sessions in the System
        
        .. attribute:: ipv6_multi_hop_session_brief
        
        	Brief information for a single IPv6 multihop BFD session
        	**type**\: list of    :py:class:`Ipv6MultiHopSessionBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopSessionBriefs.Ipv6MultiHopSessionBrief>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.ipv6_multi_hop_session_brief = YList()
            self.ipv6_multi_hop_session_brief.parent = self
            self.ipv6_multi_hop_session_brief.name = 'ipv6_multi_hop_session_brief'


        class Ipv6MultiHopSessionBrief(object):
            """
            Brief information for a single IPv6 multihop
            BFD session
            
            .. attribute:: destination_address
            
            	Destination Address
            	**type**\: one of the below types:
            
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            
            ----
            	**type**\:  str
            
            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
            
            
            ----
            .. attribute:: location
            
            	Location
            	**type**\:  str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: node_id
            
            	Location where session is housed
            	**type**\:  str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: session_flags
            
            	Session Flags
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: session_subtype
            
            	Session subtype
            	**type**\:  str
            
            .. attribute:: session_type
            
            	Session type
            	**type**\:   :py:class:`BfdSessionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdSessionEnum>`
            
            .. attribute:: source_address
            
            	Source Address
            	**type**\: one of the below types:
            
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            
            ----
            	**type**\:  str
            
            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
            
            
            ----
            .. attribute:: state
            
            	State
            	**type**\:   :py:class:`BfdMgmtSessionStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionStateEnum>`
            
            .. attribute:: status_brief_information
            
            	Brief Status Information
            	**type**\:   :py:class:`StatusBriefInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopSessionBriefs.Ipv6MultiHopSessionBrief.StatusBriefInformation>`
            
            .. attribute:: vrf_name
            
            	VRF name
            	**type**\:  str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.destination_address = None
                self.location = None
                self.node_id = None
                self.session_flags = None
                self.session_subtype = None
                self.session_type = None
                self.source_address = None
                self.state = None
                self.status_brief_information = Bfd.Ipv6MultiHopSessionBriefs.Ipv6MultiHopSessionBrief.StatusBriefInformation()
                self.status_brief_information.parent = self
                self.vrf_name = None


            class StatusBriefInformation(object):
                """
                Brief Status Information
                
                .. attribute:: async_interval_multiplier
                
                	Async Interval and Detect Multiplier Information
                	**type**\:   :py:class:`AsyncIntervalMultiplier <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopSessionBriefs.Ipv6MultiHopSessionBrief.StatusBriefInformation.AsyncIntervalMultiplier>`
                
                .. attribute:: echo_interval_multiplier
                
                	Echo Interval and Detect Multiplier Information
                	**type**\:   :py:class:`EchoIntervalMultiplier <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopSessionBriefs.Ipv6MultiHopSessionBrief.StatusBriefInformation.EchoIntervalMultiplier>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.async_interval_multiplier = Bfd.Ipv6MultiHopSessionBriefs.Ipv6MultiHopSessionBrief.StatusBriefInformation.AsyncIntervalMultiplier()
                    self.async_interval_multiplier.parent = self
                    self.echo_interval_multiplier = Bfd.Ipv6MultiHopSessionBriefs.Ipv6MultiHopSessionBrief.StatusBriefInformation.EchoIntervalMultiplier()
                    self.echo_interval_multiplier.parent = self


                class AsyncIntervalMultiplier(object):
                    """
                    Async Interval and Detect Multiplier Information
                    
                    .. attribute:: detection_multiplier
                    
                    	Detection Multiplier
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: detection_time
                    
                    	Detection time in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: negotiated_local_transmit_interval
                    
                    	Negotiated local transmit interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: negotiated_remote_transmit_interval
                    
                    	Negotiated remote transmit interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.detection_multiplier = None
                        self.detection_time = None
                        self.negotiated_local_transmit_interval = None
                        self.negotiated_remote_transmit_interval = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-session-briefs/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-session-brief/Cisco-IOS-XR-ip-bfd-oper:status-brief-information/Cisco-IOS-XR-ip-bfd-oper:async-interval-multiplier'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.detection_multiplier is not None:
                            return True

                        if self.detection_time is not None:
                            return True

                        if self.negotiated_local_transmit_interval is not None:
                            return True

                        if self.negotiated_remote_transmit_interval is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv6MultiHopSessionBriefs.Ipv6MultiHopSessionBrief.StatusBriefInformation.AsyncIntervalMultiplier']['meta_info']


                class EchoIntervalMultiplier(object):
                    """
                    Echo Interval and Detect Multiplier Information
                    
                    .. attribute:: detection_multiplier
                    
                    	Detection Multiplier
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: detection_time
                    
                    	Detection time in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: negotiated_transmit_interval
                    
                    	Negotiated transmit interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.detection_multiplier = None
                        self.detection_time = None
                        self.negotiated_transmit_interval = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-session-briefs/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-session-brief/Cisco-IOS-XR-ip-bfd-oper:status-brief-information/Cisco-IOS-XR-ip-bfd-oper:echo-interval-multiplier'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.detection_multiplier is not None:
                            return True

                        if self.detection_time is not None:
                            return True

                        if self.negotiated_transmit_interval is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv6MultiHopSessionBriefs.Ipv6MultiHopSessionBrief.StatusBriefInformation.EchoIntervalMultiplier']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-session-briefs/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-session-brief/Cisco-IOS-XR-ip-bfd-oper:status-brief-information'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.async_interval_multiplier is not None and self.async_interval_multiplier._has_data():
                        return True

                    if self.echo_interval_multiplier is not None and self.echo_interval_multiplier._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.Ipv6MultiHopSessionBriefs.Ipv6MultiHopSessionBrief.StatusBriefInformation']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-session-briefs/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-session-brief'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.destination_address is not None:
                    return True

                if self.location is not None:
                    return True

                if self.node_id is not None:
                    return True

                if self.session_flags is not None:
                    return True

                if self.session_subtype is not None:
                    return True

                if self.session_type is not None:
                    return True

                if self.source_address is not None:
                    return True

                if self.state is not None:
                    return True

                if self.status_brief_information is not None and self.status_brief_information._has_data():
                    return True

                if self.vrf_name is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                return meta._meta_table['Bfd.Ipv6MultiHopSessionBriefs.Ipv6MultiHopSessionBrief']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-session-briefs'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.ipv6_multi_hop_session_brief is not None:
                for child_ref in self.ipv6_multi_hop_session_brief:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
            return meta._meta_table['Bfd.Ipv6MultiHopSessionBriefs']['meta_info']


    class SessionBriefs(object):
        """
        Table of brief information about singlehop IPv4
        BFD sessions in the System
        
        .. attribute:: session_brief
        
        	Brief information for a single IPv4 singlehop BFD session
        	**type**\: list of    :py:class:`SessionBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.SessionBriefs.SessionBrief>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.session_brief = YList()
            self.session_brief.parent = self
            self.session_brief.name = 'session_brief'


        class SessionBrief(object):
            """
            Brief information for a single IPv4 singlehop
            BFD session
            
            .. attribute:: destination_address
            
            	Destination Address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: interface_name
            
            	Interface Name
            	**type**\:  str
            
            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
            
            .. attribute:: location
            
            	Location
            	**type**\:  str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: node_id
            
            	Location where session is housed
            	**type**\:  str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: session_flags
            
            	Session Flags
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: session_subtype
            
            	Session subtype
            	**type**\:  str
            
            .. attribute:: session_type
            
            	Session type
            	**type**\:   :py:class:`BfdSessionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdSessionEnum>`
            
            .. attribute:: state
            
            	State
            	**type**\:   :py:class:`BfdMgmtSessionStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionStateEnum>`
            
            .. attribute:: status_brief_information
            
            	Brief Status Information
            	**type**\:   :py:class:`StatusBriefInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.SessionBriefs.SessionBrief.StatusBriefInformation>`
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.destination_address = None
                self.interface_name = None
                self.location = None
                self.node_id = None
                self.session_flags = None
                self.session_subtype = None
                self.session_type = None
                self.state = None
                self.status_brief_information = Bfd.SessionBriefs.SessionBrief.StatusBriefInformation()
                self.status_brief_information.parent = self


            class StatusBriefInformation(object):
                """
                Brief Status Information
                
                .. attribute:: async_interval_multiplier
                
                	Async Interval and Detect Multiplier Information
                	**type**\:   :py:class:`AsyncIntervalMultiplier <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.SessionBriefs.SessionBrief.StatusBriefInformation.AsyncIntervalMultiplier>`
                
                .. attribute:: echo_interval_multiplier
                
                	Echo Interval and Detect Multiplier Information
                	**type**\:   :py:class:`EchoIntervalMultiplier <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.SessionBriefs.SessionBrief.StatusBriefInformation.EchoIntervalMultiplier>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.async_interval_multiplier = Bfd.SessionBriefs.SessionBrief.StatusBriefInformation.AsyncIntervalMultiplier()
                    self.async_interval_multiplier.parent = self
                    self.echo_interval_multiplier = Bfd.SessionBriefs.SessionBrief.StatusBriefInformation.EchoIntervalMultiplier()
                    self.echo_interval_multiplier.parent = self


                class AsyncIntervalMultiplier(object):
                    """
                    Async Interval and Detect Multiplier Information
                    
                    .. attribute:: detection_multiplier
                    
                    	Detection Multiplier
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: detection_time
                    
                    	Detection time in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: negotiated_local_transmit_interval
                    
                    	Negotiated local transmit interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: negotiated_remote_transmit_interval
                    
                    	Negotiated remote transmit interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.detection_multiplier = None
                        self.detection_time = None
                        self.negotiated_local_transmit_interval = None
                        self.negotiated_remote_transmit_interval = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:session-briefs/Cisco-IOS-XR-ip-bfd-oper:session-brief/Cisco-IOS-XR-ip-bfd-oper:status-brief-information/Cisco-IOS-XR-ip-bfd-oper:async-interval-multiplier'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.detection_multiplier is not None:
                            return True

                        if self.detection_time is not None:
                            return True

                        if self.negotiated_local_transmit_interval is not None:
                            return True

                        if self.negotiated_remote_transmit_interval is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.SessionBriefs.SessionBrief.StatusBriefInformation.AsyncIntervalMultiplier']['meta_info']


                class EchoIntervalMultiplier(object):
                    """
                    Echo Interval and Detect Multiplier Information
                    
                    .. attribute:: detection_multiplier
                    
                    	Detection Multiplier
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: detection_time
                    
                    	Detection time in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: negotiated_transmit_interval
                    
                    	Negotiated transmit interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.detection_multiplier = None
                        self.detection_time = None
                        self.negotiated_transmit_interval = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:session-briefs/Cisco-IOS-XR-ip-bfd-oper:session-brief/Cisco-IOS-XR-ip-bfd-oper:status-brief-information/Cisco-IOS-XR-ip-bfd-oper:echo-interval-multiplier'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.detection_multiplier is not None:
                            return True

                        if self.detection_time is not None:
                            return True

                        if self.negotiated_transmit_interval is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.SessionBriefs.SessionBrief.StatusBriefInformation.EchoIntervalMultiplier']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:session-briefs/Cisco-IOS-XR-ip-bfd-oper:session-brief/Cisco-IOS-XR-ip-bfd-oper:status-brief-information'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.async_interval_multiplier is not None and self.async_interval_multiplier._has_data():
                        return True

                    if self.echo_interval_multiplier is not None and self.echo_interval_multiplier._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.SessionBriefs.SessionBrief.StatusBriefInformation']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:session-briefs/Cisco-IOS-XR-ip-bfd-oper:session-brief'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.destination_address is not None:
                    return True

                if self.interface_name is not None:
                    return True

                if self.location is not None:
                    return True

                if self.node_id is not None:
                    return True

                if self.session_flags is not None:
                    return True

                if self.session_subtype is not None:
                    return True

                if self.session_type is not None:
                    return True

                if self.state is not None:
                    return True

                if self.status_brief_information is not None and self.status_brief_information._has_data():
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                return meta._meta_table['Bfd.SessionBriefs.SessionBrief']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:session-briefs'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.session_brief is not None:
                for child_ref in self.session_brief:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
            return meta._meta_table['Bfd.SessionBriefs']['meta_info']


    class Ipv6SingleHopNodeLocationSummaries(object):
        """
        Table of summary information about BFD IPv6
        singlehop sessions per location
        
        .. attribute:: ipv6_single_hop_node_location_summary
        
        	Summary information for BFD IPv6 singlehop sessions for location
        	**type**\: list of    :py:class:`Ipv6SingleHopNodeLocationSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopNodeLocationSummaries.Ipv6SingleHopNodeLocationSummary>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.ipv6_single_hop_node_location_summary = YList()
            self.ipv6_single_hop_node_location_summary.parent = self
            self.ipv6_single_hop_node_location_summary.name = 'ipv6_single_hop_node_location_summary'


        class Ipv6SingleHopNodeLocationSummary(object):
            """
            Summary information for BFD IPv6 singlehop
            sessions for location
            
            .. attribute:: location  <key>
            
            	Location
            	**type**\:  str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: session_state
            
            	Statistics of states for sessions
            	**type**\:   :py:class:`SessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopNodeLocationSummaries.Ipv6SingleHopNodeLocationSummary.SessionState>`
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.location = None
                self.session_state = Bfd.Ipv6SingleHopNodeLocationSummaries.Ipv6SingleHopNodeLocationSummary.SessionState()
                self.session_state.parent = self


            class SessionState(object):
                """
                Statistics of states for sessions
                
                .. attribute:: down_count
                
                	Number of sessions in down state
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: retry_count
                
                	Number of sessions in retry state
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: standby_count
                
                	Number of sessions in standby state
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: total_count
                
                	Number of sessions in database
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: unknown_count
                
                	Number of sessions in unknown state
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: up_count
                
                	Number of sessions in up state
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.down_count = None
                    self.retry_count = None
                    self.standby_count = None
                    self.total_count = None
                    self.unknown_count = None
                    self.up_count = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ip-bfd-oper:session-state'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.down_count is not None:
                        return True

                    if self.retry_count is not None:
                        return True

                    if self.standby_count is not None:
                        return True

                    if self.total_count is not None:
                        return True

                    if self.unknown_count is not None:
                        return True

                    if self.up_count is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.Ipv6SingleHopNodeLocationSummaries.Ipv6SingleHopNodeLocationSummary.SessionState']['meta_info']

            @property
            def _common_path(self):
                if self.location is None:
                    raise YPYModelError('Key property location is None')

                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-node-location-summaries/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-node-location-summary[Cisco-IOS-XR-ip-bfd-oper:location = ' + str(self.location) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.location is not None:
                    return True

                if self.session_state is not None and self.session_state._has_data():
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                return meta._meta_table['Bfd.Ipv6SingleHopNodeLocationSummaries.Ipv6SingleHopNodeLocationSummary']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-node-location-summaries'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.ipv6_single_hop_node_location_summary is not None:
                for child_ref in self.ipv6_single_hop_node_location_summary:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
            return meta._meta_table['Bfd.Ipv6SingleHopNodeLocationSummaries']['meta_info']


    class Summary(object):
        """
        Summary information of BFD IPv4 singlehop
        sessions
        
        .. attribute:: session_state
        
        	Statistics of states for sessions
        	**type**\:   :py:class:`SessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Summary.SessionState>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.session_state = Bfd.Summary.SessionState()
            self.session_state.parent = self


        class SessionState(object):
            """
            Statistics of states for sessions
            
            .. attribute:: down_count
            
            	Number of sessions in down state
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: total_count
            
            	Number of sessions in database
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: unknown_count
            
            	Number of sessions in unknown state
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: up_count
            
            	Number of sessions in up state
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.down_count = None
                self.total_count = None
                self.unknown_count = None
                self.up_count = None

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:summary/Cisco-IOS-XR-ip-bfd-oper:session-state'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.down_count is not None:
                    return True

                if self.total_count is not None:
                    return True

                if self.unknown_count is not None:
                    return True

                if self.up_count is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                return meta._meta_table['Bfd.Summary.SessionState']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:summary'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.session_state is not None and self.session_state._has_data():
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
            return meta._meta_table['Bfd.Summary']['meta_info']


    class Ipv4BfdMplsteTailNodeSummaries(object):
        """
        Table of summary about IPv4 TE tail BFD sessions
        for location
        
        .. attribute:: ipv4bfd_mplste_tail_node_summary
        
        	Summary of IPv4 BFD over MPLS\-TE tail
        	**type**\: list of    :py:class:`Ipv4BfdMplsteTailNodeSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfdMplsteTailNodeSummaries.Ipv4BfdMplsteTailNodeSummary>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.ipv4bfd_mplste_tail_node_summary = YList()
            self.ipv4bfd_mplste_tail_node_summary.parent = self
            self.ipv4bfd_mplste_tail_node_summary.name = 'ipv4bfd_mplste_tail_node_summary'


        class Ipv4BfdMplsteTailNodeSummary(object):
            """
            Summary of IPv4 BFD over MPLS\-TE tail
            
            .. attribute:: location_name  <key>
            
            	Location name
            	**type**\:  str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            .. attribute:: session_state
            
            	Statistics of states for sessions
            	**type**\:   :py:class:`SessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfdMplsteTailNodeSummaries.Ipv4BfdMplsteTailNodeSummary.SessionState>`
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.location_name = None
                self.session_state = Bfd.Ipv4BfdMplsteTailNodeSummaries.Ipv4BfdMplsteTailNodeSummary.SessionState()
                self.session_state.parent = self


            class SessionState(object):
                """
                Statistics of states for sessions
                
                .. attribute:: down_count
                
                	Number of sessions in down state
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: retry_count
                
                	Number of sessions in retry state
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: standby_count
                
                	Number of sessions in standby state
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: total_count
                
                	Number of sessions in database
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: unknown_count
                
                	Number of sessions in unknown state
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: up_count
                
                	Number of sessions in up state
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.down_count = None
                    self.retry_count = None
                    self.standby_count = None
                    self.total_count = None
                    self.unknown_count = None
                    self.up_count = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ip-bfd-oper:session-state'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.down_count is not None:
                        return True

                    if self.retry_count is not None:
                        return True

                    if self.standby_count is not None:
                        return True

                    if self.total_count is not None:
                        return True

                    if self.unknown_count is not None:
                        return True

                    if self.up_count is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.Ipv4BfdMplsteTailNodeSummaries.Ipv4BfdMplsteTailNodeSummary.SessionState']['meta_info']

            @property
            def _common_path(self):
                if self.location_name is None:
                    raise YPYModelError('Key property location_name is None')

                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bfd-mplste-tail-node-summaries/Cisco-IOS-XR-ip-bfd-oper:ipv4bfd-mplste-tail-node-summary[Cisco-IOS-XR-ip-bfd-oper:location-name = ' + str(self.location_name) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.location_name is not None:
                    return True

                if self.session_state is not None and self.session_state._has_data():
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                return meta._meta_table['Bfd.Ipv4BfdMplsteTailNodeSummaries.Ipv4BfdMplsteTailNodeSummary']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bfd-mplste-tail-node-summaries'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.ipv4bfd_mplste_tail_node_summary is not None:
                for child_ref in self.ipv4bfd_mplste_tail_node_summary:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
            return meta._meta_table['Bfd.Ipv4BfdMplsteTailNodeSummaries']['meta_info']


    class Ipv4SingleHopLocationSummaries(object):
        """
        Table of summary information about IPv4
        singlehop BFD sessions for location
        
        .. attribute:: ipv4_single_hop_location_summary
        
        	Summary information for BFD IPv4 singlehop sessions for location
        	**type**\: list of    :py:class:`Ipv4SingleHopLocationSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopLocationSummaries.Ipv4SingleHopLocationSummary>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.ipv4_single_hop_location_summary = YList()
            self.ipv4_single_hop_location_summary.parent = self
            self.ipv4_single_hop_location_summary.name = 'ipv4_single_hop_location_summary'


        class Ipv4SingleHopLocationSummary(object):
            """
            Summary information for BFD IPv4 singlehop
            sessions for location
            
            .. attribute:: location_name  <key>
            
            	Location Name
            	**type**\:  str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            .. attribute:: session_state
            
            	Statistics of states for sessions
            	**type**\:   :py:class:`SessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopLocationSummaries.Ipv4SingleHopLocationSummary.SessionState>`
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.location_name = None
                self.session_state = Bfd.Ipv4SingleHopLocationSummaries.Ipv4SingleHopLocationSummary.SessionState()
                self.session_state.parent = self


            class SessionState(object):
                """
                Statistics of states for sessions
                
                .. attribute:: down_count
                
                	Number of sessions in down state
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: retry_count
                
                	Number of sessions in retry state
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: standby_count
                
                	Number of sessions in standby state
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: total_count
                
                	Number of sessions in database
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: unknown_count
                
                	Number of sessions in unknown state
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: up_count
                
                	Number of sessions in up state
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.down_count = None
                    self.retry_count = None
                    self.standby_count = None
                    self.total_count = None
                    self.unknown_count = None
                    self.up_count = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ip-bfd-oper:session-state'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.down_count is not None:
                        return True

                    if self.retry_count is not None:
                        return True

                    if self.standby_count is not None:
                        return True

                    if self.total_count is not None:
                        return True

                    if self.unknown_count is not None:
                        return True

                    if self.up_count is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.Ipv4SingleHopLocationSummaries.Ipv4SingleHopLocationSummary.SessionState']['meta_info']

            @property
            def _common_path(self):
                if self.location_name is None:
                    raise YPYModelError('Key property location_name is None')

                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-location-summaries/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-location-summary[Cisco-IOS-XR-ip-bfd-oper:location-name = ' + str(self.location_name) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.location_name is not None:
                    return True

                if self.session_state is not None and self.session_state._has_data():
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                return meta._meta_table['Bfd.Ipv4SingleHopLocationSummaries.Ipv4SingleHopLocationSummary']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-location-summaries'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.ipv4_single_hop_location_summary is not None:
                for child_ref in self.ipv4_single_hop_location_summary:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
            return meta._meta_table['Bfd.Ipv4SingleHopLocationSummaries']['meta_info']


    class Ipv4BfdMplsteHeadSummaryNodes(object):
        """
        Table of summary about IPv4 TE head BFD sessions
        for location
        
        .. attribute:: ipv4bfd_mplste_head_summary_node
        
        	Summary of IPv4 BFD over MPLS\-TE head
        	**type**\: list of    :py:class:`Ipv4BfdMplsteHeadSummaryNode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfdMplsteHeadSummaryNodes.Ipv4BfdMplsteHeadSummaryNode>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.ipv4bfd_mplste_head_summary_node = YList()
            self.ipv4bfd_mplste_head_summary_node.parent = self
            self.ipv4bfd_mplste_head_summary_node.name = 'ipv4bfd_mplste_head_summary_node'


        class Ipv4BfdMplsteHeadSummaryNode(object):
            """
            Summary of IPv4 BFD over MPLS\-TE head
            
            .. attribute:: location_name  <key>
            
            	Location name
            	**type**\:  str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            .. attribute:: session_state
            
            	Statistics of states for sessions
            	**type**\:   :py:class:`SessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfdMplsteHeadSummaryNodes.Ipv4BfdMplsteHeadSummaryNode.SessionState>`
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.location_name = None
                self.session_state = Bfd.Ipv4BfdMplsteHeadSummaryNodes.Ipv4BfdMplsteHeadSummaryNode.SessionState()
                self.session_state.parent = self


            class SessionState(object):
                """
                Statistics of states for sessions
                
                .. attribute:: down_count
                
                	Number of sessions in down state
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: retry_count
                
                	Number of sessions in retry state
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: standby_count
                
                	Number of sessions in standby state
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: total_count
                
                	Number of sessions in database
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: unknown_count
                
                	Number of sessions in unknown state
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: up_count
                
                	Number of sessions in up state
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.down_count = None
                    self.retry_count = None
                    self.standby_count = None
                    self.total_count = None
                    self.unknown_count = None
                    self.up_count = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ip-bfd-oper:session-state'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.down_count is not None:
                        return True

                    if self.retry_count is not None:
                        return True

                    if self.standby_count is not None:
                        return True

                    if self.total_count is not None:
                        return True

                    if self.unknown_count is not None:
                        return True

                    if self.up_count is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.Ipv4BfdMplsteHeadSummaryNodes.Ipv4BfdMplsteHeadSummaryNode.SessionState']['meta_info']

            @property
            def _common_path(self):
                if self.location_name is None:
                    raise YPYModelError('Key property location_name is None')

                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bfd-mplste-head-summary-nodes/Cisco-IOS-XR-ip-bfd-oper:ipv4bfd-mplste-head-summary-node[Cisco-IOS-XR-ip-bfd-oper:location-name = ' + str(self.location_name) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.location_name is not None:
                    return True

                if self.session_state is not None and self.session_state._has_data():
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                return meta._meta_table['Bfd.Ipv4BfdMplsteHeadSummaryNodes.Ipv4BfdMplsteHeadSummaryNode']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bfd-mplste-head-summary-nodes'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.ipv4bfd_mplste_head_summary_node is not None:
                for child_ref in self.ipv4bfd_mplste_head_summary_node:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
            return meta._meta_table['Bfd.Ipv4BfdMplsteHeadSummaryNodes']['meta_info']


    class LabelSessionDetails(object):
        """
        Table of detailed information about all Label
        BFD sessions in the System 
        
        .. attribute:: label_session_detail
        
        	Detailed information for a single BFD session
        	**type**\: list of    :py:class:`LabelSessionDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSessionDetails.LabelSessionDetail>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.label_session_detail = YList()
            self.label_session_detail.parent = self
            self.label_session_detail.name = 'label_session_detail'


        class LabelSessionDetail(object):
            """
            Detailed information for a single BFD session
            
            .. attribute:: association_information
            
            	Association session information
            	**type**\: list of    :py:class:`AssociationInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSessionDetails.LabelSessionDetail.AssociationInformation>`
            
            .. attribute:: incoming_label
            
            	Incoming Label
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: interface_name
            
            	Interface Name
            	**type**\:  str
            
            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
            
            .. attribute:: location
            
            	Location
            	**type**\:  str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: lsp_ping_info
            
            	LSP Ping Info
            	**type**\:   :py:class:`LspPingInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSessionDetails.LabelSessionDetail.LspPingInfo>`
            
            .. attribute:: mp_download_state
            
            	MP Dowload State
            	**type**\:   :py:class:`MpDownloadState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSessionDetails.LabelSessionDetail.MpDownloadState>`
            
            .. attribute:: owner_information
            
            	Client applications owning the session
            	**type**\: list of    :py:class:`OwnerInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSessionDetails.LabelSessionDetail.OwnerInformation>`
            
            .. attribute:: status_information
            
            	Session status information
            	**type**\:   :py:class:`StatusInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation>`
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.association_information = YList()
                self.association_information.parent = self
                self.association_information.name = 'association_information'
                self.incoming_label = None
                self.interface_name = None
                self.location = None
                self.lsp_ping_info = Bfd.LabelSessionDetails.LabelSessionDetail.LspPingInfo()
                self.lsp_ping_info.parent = self
                self.mp_download_state = Bfd.LabelSessionDetails.LabelSessionDetail.MpDownloadState()
                self.mp_download_state.parent = self
                self.owner_information = YList()
                self.owner_information.parent = self
                self.owner_information.name = 'owner_information'
                self.status_information = Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation()
                self.status_information.parent = self


            class StatusInformation(object):
                """
                Session status information
                
                .. attribute:: async_receive_statistics
                
                	Statistics of Interval between Async Packets Received (in milli\-seconds)
                	**type**\:   :py:class:`AsyncReceiveStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.AsyncReceiveStatistics>`
                
                .. attribute:: async_transmit_statistics
                
                	Statistics of Interval between Async Packets Transmitted (in milli\-seconds)
                	**type**\:   :py:class:`AsyncTransmitStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.AsyncTransmitStatistics>`
                
                .. attribute:: desired_minimum_echo_transmit_interval
                
                	Desired minimum echo transmit interval in milli\-seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: millisecond
                
                .. attribute:: echo_received_statistics
                
                	Statistics of Interval between Echo Packets Received (in milli\-seconds)
                	**type**\:   :py:class:`EchoReceivedStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.EchoReceivedStatistics>`
                
                .. attribute:: echo_transmit_statistics
                
                	Statistics of Interval between Echo Packets Transmitted (in milli\-seconds)
                	**type**\:   :py:class:`EchoTransmitStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.EchoTransmitStatistics>`
                
                .. attribute:: internal_label
                
                	Internal Label
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: last_state_change
                
                	Time since last state change
                	**type**\:   :py:class:`LastStateChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.LastStateChange>`
                
                .. attribute:: latency_average
                
                	Average value of Latency (in micro\-seconds)
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: microsecond
                
                .. attribute:: latency_maximum
                
                	Maximum value of Latency (in micro\-seconds)
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: microsecond
                
                .. attribute:: latency_minimum
                
                	Minimum value of Latency (in micro\-seconds)
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: microsecond
                
                .. attribute:: latency_number
                
                	Number of Latency Samples. Time between Transmit and Receive
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: local_discriminator
                
                	Session's Local discriminator
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: node_id
                
                	Location where session is housed
                	**type**\:  str
                
                	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
                
                .. attribute:: receive_packet
                
                	Receive Packet
                	**type**\:   :py:class:`ReceivePacket <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.ReceivePacket>`
                
                .. attribute:: remote_discriminator
                
                	Session's Remote discriminator
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: remote_negotiated_interval
                
                	Remote Negotiated Interval in milli\-seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: millisecond
                
                .. attribute:: session_subtype
                
                	Session subtype
                	**type**\:  str
                
                .. attribute:: sessiontype
                
                	Session type
                	**type**\:   :py:class:`BfdSessionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdSessionEnum>`
                
                .. attribute:: source_address
                
                	Source address
                	**type**\:   :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.SourceAddress>`
                
                .. attribute:: state
                
                	State
                	**type**\:   :py:class:`BfdMgmtSessionStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionStateEnum>`
                
                .. attribute:: status_brief_information
                
                	Brief Status Information
                	**type**\:   :py:class:`StatusBriefInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.StatusBriefInformation>`
                
                .. attribute:: to_up_state_count
                
                	Number of times session state went to UP
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: transmit_packet
                
                	Transmit Packet
                	**type**\:   :py:class:`TransmitPacket <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.TransmitPacket>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.async_receive_statistics = Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.AsyncReceiveStatistics()
                    self.async_receive_statistics.parent = self
                    self.async_transmit_statistics = Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.AsyncTransmitStatistics()
                    self.async_transmit_statistics.parent = self
                    self.desired_minimum_echo_transmit_interval = None
                    self.echo_received_statistics = Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.EchoReceivedStatistics()
                    self.echo_received_statistics.parent = self
                    self.echo_transmit_statistics = Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.EchoTransmitStatistics()
                    self.echo_transmit_statistics.parent = self
                    self.internal_label = None
                    self.last_state_change = Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.LastStateChange()
                    self.last_state_change.parent = self
                    self.latency_average = None
                    self.latency_maximum = None
                    self.latency_minimum = None
                    self.latency_number = None
                    self.local_discriminator = None
                    self.node_id = None
                    self.receive_packet = Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.ReceivePacket()
                    self.receive_packet.parent = self
                    self.remote_discriminator = None
                    self.remote_negotiated_interval = None
                    self.session_subtype = None
                    self.sessiontype = None
                    self.source_address = Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.SourceAddress()
                    self.source_address.parent = self
                    self.state = None
                    self.status_brief_information = Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.StatusBriefInformation()
                    self.status_brief_information.parent = self
                    self.to_up_state_count = None
                    self.transmit_packet = Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.TransmitPacket()
                    self.transmit_packet.parent = self


                class SourceAddress(object):
                    """
                    Source address
                    
                    .. attribute:: afi
                    
                    	AFI
                    	**type**\:   :py:class:`BfdAfIdEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdAfIdEnum>`
                    
                    .. attribute:: dummy
                    
                    	No Address
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    .. attribute:: ipv4
                    
                    	IPv4 address type
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: ipv6
                    
                    	IPv6 address type
                    	**type**\:  str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.afi = None
                        self.dummy = None
                        self.ipv4 = None
                        self.ipv6 = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:label-session-details/Cisco-IOS-XR-ip-bfd-oper:label-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:source-address'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.afi is not None:
                            return True

                        if self.dummy is not None:
                            return True

                        if self.ipv4 is not None:
                            return True

                        if self.ipv6 is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.SourceAddress']['meta_info']


                class LastStateChange(object):
                    """
                    Time since last state change
                    
                    .. attribute:: days
                    
                    	Number of days since last session state transition
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: day
                    
                    .. attribute:: hours
                    
                    	Number of hours since last session state transition
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    	**units**\: hour
                    
                    .. attribute:: minutes
                    
                    	Number of mins since last session state transition
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    	**units**\: minute
                    
                    .. attribute:: seconds
                    
                    	Number of seconds since last session state transition
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    	**units**\: second
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.days = None
                        self.hours = None
                        self.minutes = None
                        self.seconds = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:label-session-details/Cisco-IOS-XR-ip-bfd-oper:label-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:last-state-change'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.days is not None:
                            return True

                        if self.hours is not None:
                            return True

                        if self.minutes is not None:
                            return True

                        if self.seconds is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.LastStateChange']['meta_info']


                class TransmitPacket(object):
                    """
                    Transmit Packet
                    
                    .. attribute:: authentication_present
                    
                    	Requesting authentication for the session
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: control_plane_independent
                    
                    	BFD implementation does not share fate with its control plane
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: demand
                    
                    	Demand mode
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: desired_minimum_transmit_interval
                    
                    	Desired minimum transmit interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: detection_multiplier
                    
                    	Detection Multiplier
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: diagnostic
                    
                    	Diagnostic
                    	**type**\:   :py:class:`BfdMgmtSessionDiagEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionDiagEnum>`
                    
                    .. attribute:: final
                    
                    	Final bit
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: ihear_you
                    
                    	I Hear You (v0)
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: length
                    
                    	Length
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: my_discriminator
                    
                    	My Discriminator
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: poll
                    
                    	Poll bit
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: required_minimum_echo_receive_interval
                    
                    	Required echo receive interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: required_minimum_receive_interval
                    
                    	Required receive interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: state
                    
                    	State (v1)
                    	**type**\:   :py:class:`BfdMgmtSessionStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionStateEnum>`
                    
                    .. attribute:: version
                    
                    	Version
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    .. attribute:: your_discriminator
                    
                    	Your Discriminator
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.authentication_present = None
                        self.control_plane_independent = None
                        self.demand = None
                        self.desired_minimum_transmit_interval = None
                        self.detection_multiplier = None
                        self.diagnostic = None
                        self.final = None
                        self.ihear_you = None
                        self.length = None
                        self.my_discriminator = None
                        self.poll = None
                        self.required_minimum_echo_receive_interval = None
                        self.required_minimum_receive_interval = None
                        self.state = None
                        self.version = None
                        self.your_discriminator = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:label-session-details/Cisco-IOS-XR-ip-bfd-oper:label-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:transmit-packet'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.authentication_present is not None:
                            return True

                        if self.control_plane_independent is not None:
                            return True

                        if self.demand is not None:
                            return True

                        if self.desired_minimum_transmit_interval is not None:
                            return True

                        if self.detection_multiplier is not None:
                            return True

                        if self.diagnostic is not None:
                            return True

                        if self.final is not None:
                            return True

                        if self.ihear_you is not None:
                            return True

                        if self.length is not None:
                            return True

                        if self.my_discriminator is not None:
                            return True

                        if self.poll is not None:
                            return True

                        if self.required_minimum_echo_receive_interval is not None:
                            return True

                        if self.required_minimum_receive_interval is not None:
                            return True

                        if self.state is not None:
                            return True

                        if self.version is not None:
                            return True

                        if self.your_discriminator is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.TransmitPacket']['meta_info']


                class ReceivePacket(object):
                    """
                    Receive Packet
                    
                    .. attribute:: authentication_present
                    
                    	Requesting authentication for the session
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: control_plane_independent
                    
                    	BFD implementation does not share fate with its control plane
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: demand
                    
                    	Demand mode
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: desired_minimum_transmit_interval
                    
                    	Desired minimum transmit interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: detection_multiplier
                    
                    	Detection Multiplier
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: diagnostic
                    
                    	Diagnostic
                    	**type**\:   :py:class:`BfdMgmtSessionDiagEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionDiagEnum>`
                    
                    .. attribute:: final
                    
                    	Final bit
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: ihear_you
                    
                    	I Hear You (v0)
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: length
                    
                    	Length
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: my_discriminator
                    
                    	My Discriminator
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: poll
                    
                    	Poll bit
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: required_minimum_echo_receive_interval
                    
                    	Required echo receive interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: required_minimum_receive_interval
                    
                    	Required receive interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: state
                    
                    	State (v1)
                    	**type**\:   :py:class:`BfdMgmtSessionStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionStateEnum>`
                    
                    .. attribute:: version
                    
                    	Version
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    .. attribute:: your_discriminator
                    
                    	Your Discriminator
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.authentication_present = None
                        self.control_plane_independent = None
                        self.demand = None
                        self.desired_minimum_transmit_interval = None
                        self.detection_multiplier = None
                        self.diagnostic = None
                        self.final = None
                        self.ihear_you = None
                        self.length = None
                        self.my_discriminator = None
                        self.poll = None
                        self.required_minimum_echo_receive_interval = None
                        self.required_minimum_receive_interval = None
                        self.state = None
                        self.version = None
                        self.your_discriminator = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:label-session-details/Cisco-IOS-XR-ip-bfd-oper:label-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:receive-packet'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.authentication_present is not None:
                            return True

                        if self.control_plane_independent is not None:
                            return True

                        if self.demand is not None:
                            return True

                        if self.desired_minimum_transmit_interval is not None:
                            return True

                        if self.detection_multiplier is not None:
                            return True

                        if self.diagnostic is not None:
                            return True

                        if self.final is not None:
                            return True

                        if self.ihear_you is not None:
                            return True

                        if self.length is not None:
                            return True

                        if self.my_discriminator is not None:
                            return True

                        if self.poll is not None:
                            return True

                        if self.required_minimum_echo_receive_interval is not None:
                            return True

                        if self.required_minimum_receive_interval is not None:
                            return True

                        if self.state is not None:
                            return True

                        if self.version is not None:
                            return True

                        if self.your_discriminator is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.ReceivePacket']['meta_info']


                class StatusBriefInformation(object):
                    """
                    Brief Status Information
                    
                    .. attribute:: async_interval_multiplier
                    
                    	Async Interval and Detect Multiplier Information
                    	**type**\:   :py:class:`AsyncIntervalMultiplier <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.StatusBriefInformation.AsyncIntervalMultiplier>`
                    
                    .. attribute:: echo_interval_multiplier
                    
                    	Echo Interval and Detect Multiplier Information
                    	**type**\:   :py:class:`EchoIntervalMultiplier <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.StatusBriefInformation.EchoIntervalMultiplier>`
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.async_interval_multiplier = Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.StatusBriefInformation.AsyncIntervalMultiplier()
                        self.async_interval_multiplier.parent = self
                        self.echo_interval_multiplier = Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.StatusBriefInformation.EchoIntervalMultiplier()
                        self.echo_interval_multiplier.parent = self


                    class AsyncIntervalMultiplier(object):
                        """
                        Async Interval and Detect Multiplier Information
                        
                        .. attribute:: detection_multiplier
                        
                        	Detection Multiplier
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: detection_time
                        
                        	Detection time in micro\-seconds
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        .. attribute:: negotiated_local_transmit_interval
                        
                        	Negotiated local transmit interval in micro\-seconds
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        .. attribute:: negotiated_remote_transmit_interval
                        
                        	Negotiated remote transmit interval in micro\-seconds
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        

                        """

                        _prefix = 'ip-bfd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.detection_multiplier = None
                            self.detection_time = None
                            self.negotiated_local_transmit_interval = None
                            self.negotiated_remote_transmit_interval = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:label-session-details/Cisco-IOS-XR-ip-bfd-oper:label-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:status-brief-information/Cisco-IOS-XR-ip-bfd-oper:async-interval-multiplier'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.detection_multiplier is not None:
                                return True

                            if self.detection_time is not None:
                                return True

                            if self.negotiated_local_transmit_interval is not None:
                                return True

                            if self.negotiated_remote_transmit_interval is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                            return meta._meta_table['Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.StatusBriefInformation.AsyncIntervalMultiplier']['meta_info']


                    class EchoIntervalMultiplier(object):
                        """
                        Echo Interval and Detect Multiplier Information
                        
                        .. attribute:: detection_multiplier
                        
                        	Detection Multiplier
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: detection_time
                        
                        	Detection time in micro\-seconds
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        .. attribute:: negotiated_transmit_interval
                        
                        	Negotiated transmit interval in micro\-seconds
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        

                        """

                        _prefix = 'ip-bfd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.detection_multiplier = None
                            self.detection_time = None
                            self.negotiated_transmit_interval = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:label-session-details/Cisco-IOS-XR-ip-bfd-oper:label-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:status-brief-information/Cisco-IOS-XR-ip-bfd-oper:echo-interval-multiplier'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.detection_multiplier is not None:
                                return True

                            if self.detection_time is not None:
                                return True

                            if self.negotiated_transmit_interval is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                            return meta._meta_table['Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.StatusBriefInformation.EchoIntervalMultiplier']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:label-session-details/Cisco-IOS-XR-ip-bfd-oper:label-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:status-brief-information'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.async_interval_multiplier is not None and self.async_interval_multiplier._has_data():
                            return True

                        if self.echo_interval_multiplier is not None and self.echo_interval_multiplier._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.StatusBriefInformation']['meta_info']


                class AsyncTransmitStatistics(object):
                    """
                    Statistics of Interval between Async Packets
                    Transmitted (in milli\-seconds)
                    
                    .. attribute:: average
                    
                    	Average of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: last
                    
                    	Time since last Transmit/Receive (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: maximum
                    
                    	Maximum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: minimum
                    
                    	Minimum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: number
                    
                    	Number of Interval Samples between Packets sent/received
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.average = None
                        self.last = None
                        self.maximum = None
                        self.minimum = None
                        self.number = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:label-session-details/Cisco-IOS-XR-ip-bfd-oper:label-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:async-transmit-statistics'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.average is not None:
                            return True

                        if self.last is not None:
                            return True

                        if self.maximum is not None:
                            return True

                        if self.minimum is not None:
                            return True

                        if self.number is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.AsyncTransmitStatistics']['meta_info']


                class AsyncReceiveStatistics(object):
                    """
                    Statistics of Interval between Async Packets
                    Received (in milli\-seconds)
                    
                    .. attribute:: average
                    
                    	Average of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: last
                    
                    	Time since last Transmit/Receive (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: maximum
                    
                    	Maximum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: minimum
                    
                    	Minimum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: number
                    
                    	Number of Interval Samples between Packets sent/received
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.average = None
                        self.last = None
                        self.maximum = None
                        self.minimum = None
                        self.number = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:label-session-details/Cisco-IOS-XR-ip-bfd-oper:label-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:async-receive-statistics'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.average is not None:
                            return True

                        if self.last is not None:
                            return True

                        if self.maximum is not None:
                            return True

                        if self.minimum is not None:
                            return True

                        if self.number is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.AsyncReceiveStatistics']['meta_info']


                class EchoTransmitStatistics(object):
                    """
                    Statistics of Interval between Echo Packets
                    Transmitted (in milli\-seconds)
                    
                    .. attribute:: average
                    
                    	Average of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: last
                    
                    	Time since last Transmit/Receive (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: maximum
                    
                    	Maximum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: minimum
                    
                    	Minimum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: number
                    
                    	Number of Interval Samples between Packets sent/received
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.average = None
                        self.last = None
                        self.maximum = None
                        self.minimum = None
                        self.number = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:label-session-details/Cisco-IOS-XR-ip-bfd-oper:label-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:echo-transmit-statistics'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.average is not None:
                            return True

                        if self.last is not None:
                            return True

                        if self.maximum is not None:
                            return True

                        if self.minimum is not None:
                            return True

                        if self.number is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.EchoTransmitStatistics']['meta_info']


                class EchoReceivedStatistics(object):
                    """
                    Statistics of Interval between Echo Packets
                    Received (in milli\-seconds)
                    
                    .. attribute:: average
                    
                    	Average of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: last
                    
                    	Time since last Transmit/Receive (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: maximum
                    
                    	Maximum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: minimum
                    
                    	Minimum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: number
                    
                    	Number of Interval Samples between Packets sent/received
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.average = None
                        self.last = None
                        self.maximum = None
                        self.minimum = None
                        self.number = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:label-session-details/Cisco-IOS-XR-ip-bfd-oper:label-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:echo-received-statistics'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.average is not None:
                            return True

                        if self.last is not None:
                            return True

                        if self.maximum is not None:
                            return True

                        if self.minimum is not None:
                            return True

                        if self.number is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.EchoReceivedStatistics']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:label-session-details/Cisco-IOS-XR-ip-bfd-oper:label-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.async_receive_statistics is not None and self.async_receive_statistics._has_data():
                        return True

                    if self.async_transmit_statistics is not None and self.async_transmit_statistics._has_data():
                        return True

                    if self.desired_minimum_echo_transmit_interval is not None:
                        return True

                    if self.echo_received_statistics is not None and self.echo_received_statistics._has_data():
                        return True

                    if self.echo_transmit_statistics is not None and self.echo_transmit_statistics._has_data():
                        return True

                    if self.internal_label is not None:
                        return True

                    if self.last_state_change is not None and self.last_state_change._has_data():
                        return True

                    if self.latency_average is not None:
                        return True

                    if self.latency_maximum is not None:
                        return True

                    if self.latency_minimum is not None:
                        return True

                    if self.latency_number is not None:
                        return True

                    if self.local_discriminator is not None:
                        return True

                    if self.node_id is not None:
                        return True

                    if self.receive_packet is not None and self.receive_packet._has_data():
                        return True

                    if self.remote_discriminator is not None:
                        return True

                    if self.remote_negotiated_interval is not None:
                        return True

                    if self.session_subtype is not None:
                        return True

                    if self.sessiontype is not None:
                        return True

                    if self.source_address is not None and self.source_address._has_data():
                        return True

                    if self.state is not None:
                        return True

                    if self.status_brief_information is not None and self.status_brief_information._has_data():
                        return True

                    if self.to_up_state_count is not None:
                        return True

                    if self.transmit_packet is not None and self.transmit_packet._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation']['meta_info']


            class MpDownloadState(object):
                """
                MP Dowload State
                
                .. attribute:: change_time
                
                	Change time
                	**type**\:   :py:class:`ChangeTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSessionDetails.LabelSessionDetail.MpDownloadState.ChangeTime>`
                
                .. attribute:: mp_download_state
                
                	MP Download State
                	**type**\:   :py:class:`BfdMpDownloadStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMpDownloadStateEnum>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.change_time = Bfd.LabelSessionDetails.LabelSessionDetail.MpDownloadState.ChangeTime()
                    self.change_time.parent = self
                    self.mp_download_state = None


                class ChangeTime(object):
                    """
                    Change time
                    
                    .. attribute:: nanoseconds
                    
                    	nanoseconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: nanosecond
                    
                    .. attribute:: seconds
                    
                    	seconds
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: second
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.nanoseconds = None
                        self.seconds = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:label-session-details/Cisco-IOS-XR-ip-bfd-oper:label-session-detail/Cisco-IOS-XR-ip-bfd-oper:mp-download-state/Cisco-IOS-XR-ip-bfd-oper:change-time'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.nanoseconds is not None:
                            return True

                        if self.seconds is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.LabelSessionDetails.LabelSessionDetail.MpDownloadState.ChangeTime']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:label-session-details/Cisco-IOS-XR-ip-bfd-oper:label-session-detail/Cisco-IOS-XR-ip-bfd-oper:mp-download-state'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.change_time is not None and self.change_time._has_data():
                        return True

                    if self.mp_download_state is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.LabelSessionDetails.LabelSessionDetail.MpDownloadState']['meta_info']


            class LspPingInfo(object):
                """
                LSP Ping Info
                
                .. attribute:: lsp_ping_rx_count
                
                	LSP Ping numer of times received
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_ping_rx_last_code
                
                	LSP Ping Rx Last Code
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: lsp_ping_rx_last_discr
                
                	LSP Ping Rx last received discriminator
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_ping_rx_last_output
                
                	LSP Ping Rx Last Output
                	**type**\:  str
                
                .. attribute:: lsp_ping_rx_last_subcode
                
                	LSP Ping Rx Last Subcode
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: lsp_ping_rx_last_time
                
                	LSP Ping last received time
                	**type**\:   :py:class:`LspPingRxLastTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSessionDetails.LabelSessionDetail.LspPingInfo.LspPingRxLastTime>`
                
                .. attribute:: lsp_ping_tx_count
                
                	LSP Ping Tx count
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_ping_tx_error_count
                
                	LSP Ping Tx error count
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_ping_tx_last_error_rc
                
                	LSP Ping Tx last error
                	**type**\:  str
                
                .. attribute:: lsp_ping_tx_last_error_time
                
                	LSP Ping last error time
                	**type**\:   :py:class:`LspPingTxLastErrorTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSessionDetails.LabelSessionDetail.LspPingInfo.LspPingTxLastErrorTime>`
                
                .. attribute:: lsp_ping_tx_last_rc
                
                	LSP Ping Tx last result
                	**type**\:  str
                
                .. attribute:: lsp_ping_tx_last_time
                
                	LSP Ping last sent time
                	**type**\:   :py:class:`LspPingTxLastTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSessionDetails.LabelSessionDetail.LspPingInfo.LspPingTxLastTime>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.lsp_ping_rx_count = None
                    self.lsp_ping_rx_last_code = None
                    self.lsp_ping_rx_last_discr = None
                    self.lsp_ping_rx_last_output = None
                    self.lsp_ping_rx_last_subcode = None
                    self.lsp_ping_rx_last_time = Bfd.LabelSessionDetails.LabelSessionDetail.LspPingInfo.LspPingRxLastTime()
                    self.lsp_ping_rx_last_time.parent = self
                    self.lsp_ping_tx_count = None
                    self.lsp_ping_tx_error_count = None
                    self.lsp_ping_tx_last_error_rc = None
                    self.lsp_ping_tx_last_error_time = Bfd.LabelSessionDetails.LabelSessionDetail.LspPingInfo.LspPingTxLastErrorTime()
                    self.lsp_ping_tx_last_error_time.parent = self
                    self.lsp_ping_tx_last_rc = None
                    self.lsp_ping_tx_last_time = Bfd.LabelSessionDetails.LabelSessionDetail.LspPingInfo.LspPingTxLastTime()
                    self.lsp_ping_tx_last_time.parent = self


                class LspPingTxLastTime(object):
                    """
                    LSP Ping last sent time
                    
                    .. attribute:: nanoseconds
                    
                    	nanoseconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: nanosecond
                    
                    .. attribute:: seconds
                    
                    	seconds
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: second
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.nanoseconds = None
                        self.seconds = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:label-session-details/Cisco-IOS-XR-ip-bfd-oper:label-session-detail/Cisco-IOS-XR-ip-bfd-oper:lsp-ping-info/Cisco-IOS-XR-ip-bfd-oper:lsp-ping-tx-last-time'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.nanoseconds is not None:
                            return True

                        if self.seconds is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.LabelSessionDetails.LabelSessionDetail.LspPingInfo.LspPingTxLastTime']['meta_info']


                class LspPingTxLastErrorTime(object):
                    """
                    LSP Ping last error time
                    
                    .. attribute:: nanoseconds
                    
                    	nanoseconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: nanosecond
                    
                    .. attribute:: seconds
                    
                    	seconds
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: second
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.nanoseconds = None
                        self.seconds = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:label-session-details/Cisco-IOS-XR-ip-bfd-oper:label-session-detail/Cisco-IOS-XR-ip-bfd-oper:lsp-ping-info/Cisco-IOS-XR-ip-bfd-oper:lsp-ping-tx-last-error-time'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.nanoseconds is not None:
                            return True

                        if self.seconds is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.LabelSessionDetails.LabelSessionDetail.LspPingInfo.LspPingTxLastErrorTime']['meta_info']


                class LspPingRxLastTime(object):
                    """
                    LSP Ping last received time
                    
                    .. attribute:: nanoseconds
                    
                    	nanoseconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: nanosecond
                    
                    .. attribute:: seconds
                    
                    	seconds
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: second
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.nanoseconds = None
                        self.seconds = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:label-session-details/Cisco-IOS-XR-ip-bfd-oper:label-session-detail/Cisco-IOS-XR-ip-bfd-oper:lsp-ping-info/Cisco-IOS-XR-ip-bfd-oper:lsp-ping-rx-last-time'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.nanoseconds is not None:
                            return True

                        if self.seconds is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.LabelSessionDetails.LabelSessionDetail.LspPingInfo.LspPingRxLastTime']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:label-session-details/Cisco-IOS-XR-ip-bfd-oper:label-session-detail/Cisco-IOS-XR-ip-bfd-oper:lsp-ping-info'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.lsp_ping_rx_count is not None:
                        return True

                    if self.lsp_ping_rx_last_code is not None:
                        return True

                    if self.lsp_ping_rx_last_discr is not None:
                        return True

                    if self.lsp_ping_rx_last_output is not None:
                        return True

                    if self.lsp_ping_rx_last_subcode is not None:
                        return True

                    if self.lsp_ping_rx_last_time is not None and self.lsp_ping_rx_last_time._has_data():
                        return True

                    if self.lsp_ping_tx_count is not None:
                        return True

                    if self.lsp_ping_tx_error_count is not None:
                        return True

                    if self.lsp_ping_tx_last_error_rc is not None:
                        return True

                    if self.lsp_ping_tx_last_error_time is not None and self.lsp_ping_tx_last_error_time._has_data():
                        return True

                    if self.lsp_ping_tx_last_rc is not None:
                        return True

                    if self.lsp_ping_tx_last_time is not None and self.lsp_ping_tx_last_time._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.LabelSessionDetails.LabelSessionDetail.LspPingInfo']['meta_info']


            class OwnerInformation(object):
                """
                Client applications owning the session
                
                .. attribute:: adjusted_detection_multiplier
                
                	Adjusted detection multiplier to compute detection time
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: adjusted_interval
                
                	Adjusted minimum transmit interval in milli\-seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: millisecond
                
                .. attribute:: detection_multiplier
                
                	Client specified detection multiplier to compute detection time
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: interval
                
                	Client specified minimum transmit interval in micro\-seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: microsecond
                
                .. attribute:: name
                
                	Client process name
                	**type**\:  str
                
                	**length:** 0..257
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.adjusted_detection_multiplier = None
                    self.adjusted_interval = None
                    self.detection_multiplier = None
                    self.interval = None
                    self.name = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:label-session-details/Cisco-IOS-XR-ip-bfd-oper:label-session-detail/Cisco-IOS-XR-ip-bfd-oper:owner-information'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.adjusted_detection_multiplier is not None:
                        return True

                    if self.adjusted_interval is not None:
                        return True

                    if self.detection_multiplier is not None:
                        return True

                    if self.interval is not None:
                        return True

                    if self.name is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.LabelSessionDetails.LabelSessionDetail.OwnerInformation']['meta_info']


            class AssociationInformation(object):
                """
                Association session information
                
                .. attribute:: local_discriminator
                
                	Session's Local discriminator
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: owner_information
                
                	Client applications owning the session
                	**type**\: list of    :py:class:`OwnerInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSessionDetails.LabelSessionDetail.AssociationInformation.OwnerInformation>`
                
                .. attribute:: session_key
                
                	Session Key
                	**type**\:   :py:class:`SessionKey <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSessionDetails.LabelSessionDetail.AssociationInformation.SessionKey>`
                
                .. attribute:: sessiontype
                
                	Session type
                	**type**\:   :py:class:`BfdSessionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdSessionEnum>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.local_discriminator = None
                    self.owner_information = YList()
                    self.owner_information.parent = self
                    self.owner_information.name = 'owner_information'
                    self.session_key = Bfd.LabelSessionDetails.LabelSessionDetail.AssociationInformation.SessionKey()
                    self.session_key.parent = self
                    self.sessiontype = None


                class SessionKey(object):
                    """
                    Session Key
                    
                    .. attribute:: bfdfec
                    
                    	Union of FECs
                    	**type**\:   :py:class:`Bfdfec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSessionDetails.LabelSessionDetail.AssociationInformation.SessionKey.Bfdfec>`
                    
                    .. attribute:: incoming_label
                    
                    	Incoming Label
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: interface_name
                    
                    	Session Interface Name
                    	**type**\:  str
                    
                    	**length:** 0..64
                    
                    .. attribute:: ip_destination_address
                    
                    	IPv4/v6 dest address
                    	**type**\:   :py:class:`IpDestinationAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSessionDetails.LabelSessionDetail.AssociationInformation.SessionKey.IpDestinationAddress>`
                    
                    .. attribute:: ip_source_address
                    
                    	IPv4/v6 source address
                    	**type**\:   :py:class:`IpSourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSessionDetails.LabelSessionDetail.AssociationInformation.SessionKey.IpSourceAddress>`
                    
                    .. attribute:: sbfd_enabled
                    
                    	SBFD enable flag
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: sbfd_target_type
                    
                    	SBFD target type
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: session_key_type
                    
                    	Session Key Type
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: target_address
                    
                    	sbfd target address
                    	**type**\:   :py:class:`TargetAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSessionDetails.LabelSessionDetail.AssociationInformation.SessionKey.TargetAddress>`
                    
                    .. attribute:: vrf_name
                    
                    	Session VRF Name
                    	**type**\:  str
                    
                    	**length:** 0..120
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.bfdfec = Bfd.LabelSessionDetails.LabelSessionDetail.AssociationInformation.SessionKey.Bfdfec()
                        self.bfdfec.parent = self
                        self.incoming_label = None
                        self.interface_name = None
                        self.ip_destination_address = Bfd.LabelSessionDetails.LabelSessionDetail.AssociationInformation.SessionKey.IpDestinationAddress()
                        self.ip_destination_address.parent = self
                        self.ip_source_address = Bfd.LabelSessionDetails.LabelSessionDetail.AssociationInformation.SessionKey.IpSourceAddress()
                        self.ip_source_address.parent = self
                        self.sbfd_enabled = None
                        self.sbfd_target_type = None
                        self.session_key_type = None
                        self.target_address = Bfd.LabelSessionDetails.LabelSessionDetail.AssociationInformation.SessionKey.TargetAddress()
                        self.target_address.parent = self
                        self.vrf_name = None


                    class IpDestinationAddress(object):
                        """
                        IPv4/v6 dest address
                        
                        .. attribute:: afi
                        
                        	AFI
                        	**type**\:   :py:class:`BfdAfIdEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdAfIdEnum>`
                        
                        .. attribute:: dummy
                        
                        	No Address
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: ipv4
                        
                        	IPv4 address type
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: ipv6
                        
                        	IPv6 address type
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-bfd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.afi = None
                            self.dummy = None
                            self.ipv4 = None
                            self.ipv6 = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:label-session-details/Cisco-IOS-XR-ip-bfd-oper:label-session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:session-key/Cisco-IOS-XR-ip-bfd-oper:ip-destination-address'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.afi is not None:
                                return True

                            if self.dummy is not None:
                                return True

                            if self.ipv4 is not None:
                                return True

                            if self.ipv6 is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                            return meta._meta_table['Bfd.LabelSessionDetails.LabelSessionDetail.AssociationInformation.SessionKey.IpDestinationAddress']['meta_info']


                    class IpSourceAddress(object):
                        """
                        IPv4/v6 source address
                        
                        .. attribute:: afi
                        
                        	AFI
                        	**type**\:   :py:class:`BfdAfIdEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdAfIdEnum>`
                        
                        .. attribute:: dummy
                        
                        	No Address
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: ipv4
                        
                        	IPv4 address type
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: ipv6
                        
                        	IPv6 address type
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-bfd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.afi = None
                            self.dummy = None
                            self.ipv4 = None
                            self.ipv6 = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:label-session-details/Cisco-IOS-XR-ip-bfd-oper:label-session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:session-key/Cisco-IOS-XR-ip-bfd-oper:ip-source-address'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.afi is not None:
                                return True

                            if self.dummy is not None:
                                return True

                            if self.ipv4 is not None:
                                return True

                            if self.ipv6 is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                            return meta._meta_table['Bfd.LabelSessionDetails.LabelSessionDetail.AssociationInformation.SessionKey.IpSourceAddress']['meta_info']


                    class Bfdfec(object):
                        """
                        Union of FECs
                        
                        .. attribute:: bfdfe_ctype
                        
                        	BFDFECType
                        	**type**\:   :py:class:`BfdApiFecEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdApiFecEnum>`
                        
                        .. attribute:: dummy
                        
                        	dummy
                        	**type**\:   :py:class:`Dummy <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSessionDetails.LabelSessionDetail.AssociationInformation.SessionKey.Bfdfec.Dummy>`
                        
                        .. attribute:: te_s2l_fec
                        
                        	te s2l fec
                        	**type**\:   :py:class:`TeS2LFec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSessionDetails.LabelSessionDetail.AssociationInformation.SessionKey.Bfdfec.TeS2LFec>`
                        
                        

                        """

                        _prefix = 'ip-bfd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.bfdfe_ctype = None
                            self.dummy = Bfd.LabelSessionDetails.LabelSessionDetail.AssociationInformation.SessionKey.Bfdfec.Dummy()
                            self.dummy.parent = self
                            self.te_s2l_fec = Bfd.LabelSessionDetails.LabelSessionDetail.AssociationInformation.SessionKey.Bfdfec.TeS2LFec()
                            self.te_s2l_fec.parent = self


                        class Dummy(object):
                            """
                            dummy
                            
                            .. attribute:: dummy
                            
                            	dummy
                            	**type**\:  str
                            
                            	**pattern:** ([0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2})\*)?
                            
                            

                            """

                            _prefix = 'ip-bfd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.dummy = None

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:label-session-details/Cisco-IOS-XR-ip-bfd-oper:label-session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:session-key/Cisco-IOS-XR-ip-bfd-oper:bfdfec/Cisco-IOS-XR-ip-bfd-oper:dummy'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.dummy is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                                return meta._meta_table['Bfd.LabelSessionDetails.LabelSessionDetail.AssociationInformation.SessionKey.Bfdfec.Dummy']['meta_info']


                        class TeS2LFec(object):
                            """
                            te s2l fec
                            
                            .. attribute:: s2l_fec_ctype
                            
                            	Session identifier (ctype)
                            	**type**\:   :py:class:`MplsLibCEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.MplsLibCEnum>`
                            
                            .. attribute:: s2l_fec_dest
                            
                            	sub\-LSP destination address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: s2l_fec_extended_tunnel_id
                            
                            	Extended tunnel ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: s2l_fec_lsp_id
                            
                            	LSP ID
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: s2l_fec_p2mp_id
                            
                            	P2MP ID
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: s2l_fec_source
                            
                            	LSP source address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: s2l_fec_subgroup_id
                            
                            	sub\-LSP subgroup ID
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: s2l_fec_subgroup_originator
                            
                            	Subgroup Originator
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: s2l_fec_tunnel_id
                            
                            	Tunnel ID
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: s2l_fec_vrf
                            
                            	VRF; currently only for GMPLS tunnels
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'ip-bfd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.s2l_fec_ctype = None
                                self.s2l_fec_dest = None
                                self.s2l_fec_extended_tunnel_id = None
                                self.s2l_fec_lsp_id = None
                                self.s2l_fec_p2mp_id = None
                                self.s2l_fec_source = None
                                self.s2l_fec_subgroup_id = None
                                self.s2l_fec_subgroup_originator = None
                                self.s2l_fec_tunnel_id = None
                                self.s2l_fec_vrf = None

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:label-session-details/Cisco-IOS-XR-ip-bfd-oper:label-session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:session-key/Cisco-IOS-XR-ip-bfd-oper:bfdfec/Cisco-IOS-XR-ip-bfd-oper:te-s2l-fec'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.s2l_fec_ctype is not None:
                                    return True

                                if self.s2l_fec_dest is not None:
                                    return True

                                if self.s2l_fec_extended_tunnel_id is not None:
                                    return True

                                if self.s2l_fec_lsp_id is not None:
                                    return True

                                if self.s2l_fec_p2mp_id is not None:
                                    return True

                                if self.s2l_fec_source is not None:
                                    return True

                                if self.s2l_fec_subgroup_id is not None:
                                    return True

                                if self.s2l_fec_subgroup_originator is not None:
                                    return True

                                if self.s2l_fec_tunnel_id is not None:
                                    return True

                                if self.s2l_fec_vrf is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                                return meta._meta_table['Bfd.LabelSessionDetails.LabelSessionDetail.AssociationInformation.SessionKey.Bfdfec.TeS2LFec']['meta_info']

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:label-session-details/Cisco-IOS-XR-ip-bfd-oper:label-session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:session-key/Cisco-IOS-XR-ip-bfd-oper:bfdfec'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.bfdfe_ctype is not None:
                                return True

                            if self.dummy is not None and self.dummy._has_data():
                                return True

                            if self.te_s2l_fec is not None and self.te_s2l_fec._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                            return meta._meta_table['Bfd.LabelSessionDetails.LabelSessionDetail.AssociationInformation.SessionKey.Bfdfec']['meta_info']


                    class TargetAddress(object):
                        """
                        sbfd target address
                        
                        .. attribute:: afi
                        
                        	AFI
                        	**type**\:   :py:class:`BfdAfIdEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdAfIdEnum>`
                        
                        .. attribute:: dummy
                        
                        	No Address
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: ipv4
                        
                        	IPv4 address type
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: ipv6
                        
                        	IPv6 address type
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-bfd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.afi = None
                            self.dummy = None
                            self.ipv4 = None
                            self.ipv6 = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:label-session-details/Cisco-IOS-XR-ip-bfd-oper:label-session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:session-key/Cisco-IOS-XR-ip-bfd-oper:target-address'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.afi is not None:
                                return True

                            if self.dummy is not None:
                                return True

                            if self.ipv4 is not None:
                                return True

                            if self.ipv6 is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                            return meta._meta_table['Bfd.LabelSessionDetails.LabelSessionDetail.AssociationInformation.SessionKey.TargetAddress']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:label-session-details/Cisco-IOS-XR-ip-bfd-oper:label-session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:session-key'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.bfdfec is not None and self.bfdfec._has_data():
                            return True

                        if self.incoming_label is not None:
                            return True

                        if self.interface_name is not None:
                            return True

                        if self.ip_destination_address is not None and self.ip_destination_address._has_data():
                            return True

                        if self.ip_source_address is not None and self.ip_source_address._has_data():
                            return True

                        if self.sbfd_enabled is not None:
                            return True

                        if self.sbfd_target_type is not None:
                            return True

                        if self.session_key_type is not None:
                            return True

                        if self.target_address is not None and self.target_address._has_data():
                            return True

                        if self.vrf_name is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.LabelSessionDetails.LabelSessionDetail.AssociationInformation.SessionKey']['meta_info']


                class OwnerInformation(object):
                    """
                    Client applications owning the session
                    
                    .. attribute:: adjusted_detection_multiplier
                    
                    	Adjusted detection multiplier to compute detection time
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: adjusted_interval
                    
                    	Adjusted minimum transmit interval in milli\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: detection_multiplier
                    
                    	Client specified detection multiplier to compute detection time
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: interval
                    
                    	Client specified minimum transmit interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: name
                    
                    	Client process name
                    	**type**\:  str
                    
                    	**length:** 0..257
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.adjusted_detection_multiplier = None
                        self.adjusted_interval = None
                        self.detection_multiplier = None
                        self.interval = None
                        self.name = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:label-session-details/Cisco-IOS-XR-ip-bfd-oper:label-session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:owner-information'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.adjusted_detection_multiplier is not None:
                            return True

                        if self.adjusted_interval is not None:
                            return True

                        if self.detection_multiplier is not None:
                            return True

                        if self.interval is not None:
                            return True

                        if self.name is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.LabelSessionDetails.LabelSessionDetail.AssociationInformation.OwnerInformation']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:label-session-details/Cisco-IOS-XR-ip-bfd-oper:label-session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.local_discriminator is not None:
                        return True

                    if self.owner_information is not None:
                        for child_ref in self.owner_information:
                            if child_ref._has_data():
                                return True

                    if self.session_key is not None and self.session_key._has_data():
                        return True

                    if self.sessiontype is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.LabelSessionDetails.LabelSessionDetail.AssociationInformation']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:label-session-details/Cisco-IOS-XR-ip-bfd-oper:label-session-detail'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.association_information is not None:
                    for child_ref in self.association_information:
                        if child_ref._has_data():
                            return True

                if self.incoming_label is not None:
                    return True

                if self.interface_name is not None:
                    return True

                if self.location is not None:
                    return True

                if self.lsp_ping_info is not None and self.lsp_ping_info._has_data():
                    return True

                if self.mp_download_state is not None and self.mp_download_state._has_data():
                    return True

                if self.owner_information is not None:
                    for child_ref in self.owner_information:
                        if child_ref._has_data():
                            return True

                if self.status_information is not None and self.status_information._has_data():
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                return meta._meta_table['Bfd.LabelSessionDetails.LabelSessionDetail']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:label-session-details'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.label_session_detail is not None:
                for child_ref in self.label_session_detail:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
            return meta._meta_table['Bfd.LabelSessionDetails']['meta_info']


    class Ipv6SingleHopSessionDetails(object):
        """
        Table of detailed information about all IPv6
        singlehop BFD sessions in the System 
        
        .. attribute:: ipv6_single_hop_session_detail
        
        	Detailed information for a single IPv6 singlehop BFD session
        	**type**\: list of    :py:class:`Ipv6SingleHopSessionDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.ipv6_single_hop_session_detail = YList()
            self.ipv6_single_hop_session_detail.parent = self
            self.ipv6_single_hop_session_detail.name = 'ipv6_single_hop_session_detail'


        class Ipv6SingleHopSessionDetail(object):
            """
            Detailed information for a single IPv6
            singlehop BFD session
            
            .. attribute:: association_information
            
            	Association session information
            	**type**\: list of    :py:class:`AssociationInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.AssociationInformation>`
            
            .. attribute:: destination_address
            
            	Destination Address
            	**type**\: one of the below types:
            
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            
            ----
            	**type**\:  str
            
            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
            
            
            ----
            .. attribute:: interface_name
            
            	Interface Name
            	**type**\:  str
            
            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
            
            .. attribute:: location
            
            	Location
            	**type**\:  str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: lsp_ping_info
            
            	LSP Ping Info
            	**type**\:   :py:class:`LspPingInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.LspPingInfo>`
            
            .. attribute:: mp_download_state
            
            	MP Dowload State
            	**type**\:   :py:class:`MpDownloadState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.MpDownloadState>`
            
            .. attribute:: owner_information
            
            	Client applications owning the session
            	**type**\: list of    :py:class:`OwnerInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.OwnerInformation>`
            
            .. attribute:: status_information
            
            	Session status information
            	**type**\:   :py:class:`StatusInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation>`
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.association_information = YList()
                self.association_information.parent = self
                self.association_information.name = 'association_information'
                self.destination_address = None
                self.interface_name = None
                self.location = None
                self.lsp_ping_info = Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.LspPingInfo()
                self.lsp_ping_info.parent = self
                self.mp_download_state = Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.MpDownloadState()
                self.mp_download_state.parent = self
                self.owner_information = YList()
                self.owner_information.parent = self
                self.owner_information.name = 'owner_information'
                self.status_information = Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation()
                self.status_information.parent = self


            class StatusInformation(object):
                """
                Session status information
                
                .. attribute:: async_receive_statistics
                
                	Statistics of Interval between Async Packets Received (in milli\-seconds)
                	**type**\:   :py:class:`AsyncReceiveStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.AsyncReceiveStatistics>`
                
                .. attribute:: async_transmit_statistics
                
                	Statistics of Interval between Async Packets Transmitted (in milli\-seconds)
                	**type**\:   :py:class:`AsyncTransmitStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.AsyncTransmitStatistics>`
                
                .. attribute:: desired_minimum_echo_transmit_interval
                
                	Desired minimum echo transmit interval in milli\-seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: millisecond
                
                .. attribute:: echo_received_statistics
                
                	Statistics of Interval between Echo Packets Received (in milli\-seconds)
                	**type**\:   :py:class:`EchoReceivedStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.EchoReceivedStatistics>`
                
                .. attribute:: echo_transmit_statistics
                
                	Statistics of Interval between Echo Packets Transmitted (in milli\-seconds)
                	**type**\:   :py:class:`EchoTransmitStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.EchoTransmitStatistics>`
                
                .. attribute:: internal_label
                
                	Internal Label
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: last_state_change
                
                	Time since last state change
                	**type**\:   :py:class:`LastStateChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.LastStateChange>`
                
                .. attribute:: latency_average
                
                	Average value of Latency (in micro\-seconds)
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: microsecond
                
                .. attribute:: latency_maximum
                
                	Maximum value of Latency (in micro\-seconds)
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: microsecond
                
                .. attribute:: latency_minimum
                
                	Minimum value of Latency (in micro\-seconds)
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: microsecond
                
                .. attribute:: latency_number
                
                	Number of Latency Samples. Time between Transmit and Receive
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: local_discriminator
                
                	Session's Local discriminator
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: node_id
                
                	Location where session is housed
                	**type**\:  str
                
                	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
                
                .. attribute:: receive_packet
                
                	Receive Packet
                	**type**\:   :py:class:`ReceivePacket <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.ReceivePacket>`
                
                .. attribute:: remote_discriminator
                
                	Session's Remote discriminator
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: remote_negotiated_interval
                
                	Remote Negotiated Interval in milli\-seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: millisecond
                
                .. attribute:: session_subtype
                
                	Session subtype
                	**type**\:  str
                
                .. attribute:: sessiontype
                
                	Session type
                	**type**\:   :py:class:`BfdSessionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdSessionEnum>`
                
                .. attribute:: source_address
                
                	Source address
                	**type**\:   :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.SourceAddress>`
                
                .. attribute:: state
                
                	State
                	**type**\:   :py:class:`BfdMgmtSessionStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionStateEnum>`
                
                .. attribute:: status_brief_information
                
                	Brief Status Information
                	**type**\:   :py:class:`StatusBriefInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.StatusBriefInformation>`
                
                .. attribute:: to_up_state_count
                
                	Number of times session state went to UP
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: transmit_packet
                
                	Transmit Packet
                	**type**\:   :py:class:`TransmitPacket <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.TransmitPacket>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.async_receive_statistics = Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.AsyncReceiveStatistics()
                    self.async_receive_statistics.parent = self
                    self.async_transmit_statistics = Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.AsyncTransmitStatistics()
                    self.async_transmit_statistics.parent = self
                    self.desired_minimum_echo_transmit_interval = None
                    self.echo_received_statistics = Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.EchoReceivedStatistics()
                    self.echo_received_statistics.parent = self
                    self.echo_transmit_statistics = Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.EchoTransmitStatistics()
                    self.echo_transmit_statistics.parent = self
                    self.internal_label = None
                    self.last_state_change = Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.LastStateChange()
                    self.last_state_change.parent = self
                    self.latency_average = None
                    self.latency_maximum = None
                    self.latency_minimum = None
                    self.latency_number = None
                    self.local_discriminator = None
                    self.node_id = None
                    self.receive_packet = Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.ReceivePacket()
                    self.receive_packet.parent = self
                    self.remote_discriminator = None
                    self.remote_negotiated_interval = None
                    self.session_subtype = None
                    self.sessiontype = None
                    self.source_address = Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.SourceAddress()
                    self.source_address.parent = self
                    self.state = None
                    self.status_brief_information = Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.StatusBriefInformation()
                    self.status_brief_information.parent = self
                    self.to_up_state_count = None
                    self.transmit_packet = Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.TransmitPacket()
                    self.transmit_packet.parent = self


                class SourceAddress(object):
                    """
                    Source address
                    
                    .. attribute:: afi
                    
                    	AFI
                    	**type**\:   :py:class:`BfdAfIdEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdAfIdEnum>`
                    
                    .. attribute:: dummy
                    
                    	No Address
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    .. attribute:: ipv4
                    
                    	IPv4 address type
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: ipv6
                    
                    	IPv6 address type
                    	**type**\:  str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.afi = None
                        self.dummy = None
                        self.ipv4 = None
                        self.ipv6 = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:source-address'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.afi is not None:
                            return True

                        if self.dummy is not None:
                            return True

                        if self.ipv4 is not None:
                            return True

                        if self.ipv6 is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.SourceAddress']['meta_info']


                class LastStateChange(object):
                    """
                    Time since last state change
                    
                    .. attribute:: days
                    
                    	Number of days since last session state transition
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: day
                    
                    .. attribute:: hours
                    
                    	Number of hours since last session state transition
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    	**units**\: hour
                    
                    .. attribute:: minutes
                    
                    	Number of mins since last session state transition
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    	**units**\: minute
                    
                    .. attribute:: seconds
                    
                    	Number of seconds since last session state transition
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    	**units**\: second
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.days = None
                        self.hours = None
                        self.minutes = None
                        self.seconds = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:last-state-change'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.days is not None:
                            return True

                        if self.hours is not None:
                            return True

                        if self.minutes is not None:
                            return True

                        if self.seconds is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.LastStateChange']['meta_info']


                class TransmitPacket(object):
                    """
                    Transmit Packet
                    
                    .. attribute:: authentication_present
                    
                    	Requesting authentication for the session
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: control_plane_independent
                    
                    	BFD implementation does not share fate with its control plane
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: demand
                    
                    	Demand mode
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: desired_minimum_transmit_interval
                    
                    	Desired minimum transmit interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: detection_multiplier
                    
                    	Detection Multiplier
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: diagnostic
                    
                    	Diagnostic
                    	**type**\:   :py:class:`BfdMgmtSessionDiagEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionDiagEnum>`
                    
                    .. attribute:: final
                    
                    	Final bit
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: ihear_you
                    
                    	I Hear You (v0)
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: length
                    
                    	Length
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: my_discriminator
                    
                    	My Discriminator
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: poll
                    
                    	Poll bit
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: required_minimum_echo_receive_interval
                    
                    	Required echo receive interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: required_minimum_receive_interval
                    
                    	Required receive interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: state
                    
                    	State (v1)
                    	**type**\:   :py:class:`BfdMgmtSessionStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionStateEnum>`
                    
                    .. attribute:: version
                    
                    	Version
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    .. attribute:: your_discriminator
                    
                    	Your Discriminator
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.authentication_present = None
                        self.control_plane_independent = None
                        self.demand = None
                        self.desired_minimum_transmit_interval = None
                        self.detection_multiplier = None
                        self.diagnostic = None
                        self.final = None
                        self.ihear_you = None
                        self.length = None
                        self.my_discriminator = None
                        self.poll = None
                        self.required_minimum_echo_receive_interval = None
                        self.required_minimum_receive_interval = None
                        self.state = None
                        self.version = None
                        self.your_discriminator = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:transmit-packet'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.authentication_present is not None:
                            return True

                        if self.control_plane_independent is not None:
                            return True

                        if self.demand is not None:
                            return True

                        if self.desired_minimum_transmit_interval is not None:
                            return True

                        if self.detection_multiplier is not None:
                            return True

                        if self.diagnostic is not None:
                            return True

                        if self.final is not None:
                            return True

                        if self.ihear_you is not None:
                            return True

                        if self.length is not None:
                            return True

                        if self.my_discriminator is not None:
                            return True

                        if self.poll is not None:
                            return True

                        if self.required_minimum_echo_receive_interval is not None:
                            return True

                        if self.required_minimum_receive_interval is not None:
                            return True

                        if self.state is not None:
                            return True

                        if self.version is not None:
                            return True

                        if self.your_discriminator is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.TransmitPacket']['meta_info']


                class ReceivePacket(object):
                    """
                    Receive Packet
                    
                    .. attribute:: authentication_present
                    
                    	Requesting authentication for the session
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: control_plane_independent
                    
                    	BFD implementation does not share fate with its control plane
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: demand
                    
                    	Demand mode
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: desired_minimum_transmit_interval
                    
                    	Desired minimum transmit interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: detection_multiplier
                    
                    	Detection Multiplier
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: diagnostic
                    
                    	Diagnostic
                    	**type**\:   :py:class:`BfdMgmtSessionDiagEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionDiagEnum>`
                    
                    .. attribute:: final
                    
                    	Final bit
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: ihear_you
                    
                    	I Hear You (v0)
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: length
                    
                    	Length
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: my_discriminator
                    
                    	My Discriminator
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: poll
                    
                    	Poll bit
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: required_minimum_echo_receive_interval
                    
                    	Required echo receive interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: required_minimum_receive_interval
                    
                    	Required receive interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: state
                    
                    	State (v1)
                    	**type**\:   :py:class:`BfdMgmtSessionStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionStateEnum>`
                    
                    .. attribute:: version
                    
                    	Version
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    .. attribute:: your_discriminator
                    
                    	Your Discriminator
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.authentication_present = None
                        self.control_plane_independent = None
                        self.demand = None
                        self.desired_minimum_transmit_interval = None
                        self.detection_multiplier = None
                        self.diagnostic = None
                        self.final = None
                        self.ihear_you = None
                        self.length = None
                        self.my_discriminator = None
                        self.poll = None
                        self.required_minimum_echo_receive_interval = None
                        self.required_minimum_receive_interval = None
                        self.state = None
                        self.version = None
                        self.your_discriminator = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:receive-packet'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.authentication_present is not None:
                            return True

                        if self.control_plane_independent is not None:
                            return True

                        if self.demand is not None:
                            return True

                        if self.desired_minimum_transmit_interval is not None:
                            return True

                        if self.detection_multiplier is not None:
                            return True

                        if self.diagnostic is not None:
                            return True

                        if self.final is not None:
                            return True

                        if self.ihear_you is not None:
                            return True

                        if self.length is not None:
                            return True

                        if self.my_discriminator is not None:
                            return True

                        if self.poll is not None:
                            return True

                        if self.required_minimum_echo_receive_interval is not None:
                            return True

                        if self.required_minimum_receive_interval is not None:
                            return True

                        if self.state is not None:
                            return True

                        if self.version is not None:
                            return True

                        if self.your_discriminator is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.ReceivePacket']['meta_info']


                class StatusBriefInformation(object):
                    """
                    Brief Status Information
                    
                    .. attribute:: async_interval_multiplier
                    
                    	Async Interval and Detect Multiplier Information
                    	**type**\:   :py:class:`AsyncIntervalMultiplier <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.StatusBriefInformation.AsyncIntervalMultiplier>`
                    
                    .. attribute:: echo_interval_multiplier
                    
                    	Echo Interval and Detect Multiplier Information
                    	**type**\:   :py:class:`EchoIntervalMultiplier <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.StatusBriefInformation.EchoIntervalMultiplier>`
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.async_interval_multiplier = Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.StatusBriefInformation.AsyncIntervalMultiplier()
                        self.async_interval_multiplier.parent = self
                        self.echo_interval_multiplier = Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.StatusBriefInformation.EchoIntervalMultiplier()
                        self.echo_interval_multiplier.parent = self


                    class AsyncIntervalMultiplier(object):
                        """
                        Async Interval and Detect Multiplier Information
                        
                        .. attribute:: detection_multiplier
                        
                        	Detection Multiplier
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: detection_time
                        
                        	Detection time in micro\-seconds
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        .. attribute:: negotiated_local_transmit_interval
                        
                        	Negotiated local transmit interval in micro\-seconds
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        .. attribute:: negotiated_remote_transmit_interval
                        
                        	Negotiated remote transmit interval in micro\-seconds
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        

                        """

                        _prefix = 'ip-bfd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.detection_multiplier = None
                            self.detection_time = None
                            self.negotiated_local_transmit_interval = None
                            self.negotiated_remote_transmit_interval = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:status-brief-information/Cisco-IOS-XR-ip-bfd-oper:async-interval-multiplier'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.detection_multiplier is not None:
                                return True

                            if self.detection_time is not None:
                                return True

                            if self.negotiated_local_transmit_interval is not None:
                                return True

                            if self.negotiated_remote_transmit_interval is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                            return meta._meta_table['Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.StatusBriefInformation.AsyncIntervalMultiplier']['meta_info']


                    class EchoIntervalMultiplier(object):
                        """
                        Echo Interval and Detect Multiplier Information
                        
                        .. attribute:: detection_multiplier
                        
                        	Detection Multiplier
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: detection_time
                        
                        	Detection time in micro\-seconds
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        .. attribute:: negotiated_transmit_interval
                        
                        	Negotiated transmit interval in micro\-seconds
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        

                        """

                        _prefix = 'ip-bfd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.detection_multiplier = None
                            self.detection_time = None
                            self.negotiated_transmit_interval = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:status-brief-information/Cisco-IOS-XR-ip-bfd-oper:echo-interval-multiplier'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.detection_multiplier is not None:
                                return True

                            if self.detection_time is not None:
                                return True

                            if self.negotiated_transmit_interval is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                            return meta._meta_table['Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.StatusBriefInformation.EchoIntervalMultiplier']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:status-brief-information'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.async_interval_multiplier is not None and self.async_interval_multiplier._has_data():
                            return True

                        if self.echo_interval_multiplier is not None and self.echo_interval_multiplier._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.StatusBriefInformation']['meta_info']


                class AsyncTransmitStatistics(object):
                    """
                    Statistics of Interval between Async Packets
                    Transmitted (in milli\-seconds)
                    
                    .. attribute:: average
                    
                    	Average of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: last
                    
                    	Time since last Transmit/Receive (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: maximum
                    
                    	Maximum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: minimum
                    
                    	Minimum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: number
                    
                    	Number of Interval Samples between Packets sent/received
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.average = None
                        self.last = None
                        self.maximum = None
                        self.minimum = None
                        self.number = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:async-transmit-statistics'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.average is not None:
                            return True

                        if self.last is not None:
                            return True

                        if self.maximum is not None:
                            return True

                        if self.minimum is not None:
                            return True

                        if self.number is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.AsyncTransmitStatistics']['meta_info']


                class AsyncReceiveStatistics(object):
                    """
                    Statistics of Interval between Async Packets
                    Received (in milli\-seconds)
                    
                    .. attribute:: average
                    
                    	Average of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: last
                    
                    	Time since last Transmit/Receive (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: maximum
                    
                    	Maximum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: minimum
                    
                    	Minimum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: number
                    
                    	Number of Interval Samples between Packets sent/received
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.average = None
                        self.last = None
                        self.maximum = None
                        self.minimum = None
                        self.number = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:async-receive-statistics'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.average is not None:
                            return True

                        if self.last is not None:
                            return True

                        if self.maximum is not None:
                            return True

                        if self.minimum is not None:
                            return True

                        if self.number is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.AsyncReceiveStatistics']['meta_info']


                class EchoTransmitStatistics(object):
                    """
                    Statistics of Interval between Echo Packets
                    Transmitted (in milli\-seconds)
                    
                    .. attribute:: average
                    
                    	Average of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: last
                    
                    	Time since last Transmit/Receive (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: maximum
                    
                    	Maximum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: minimum
                    
                    	Minimum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: number
                    
                    	Number of Interval Samples between Packets sent/received
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.average = None
                        self.last = None
                        self.maximum = None
                        self.minimum = None
                        self.number = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:echo-transmit-statistics'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.average is not None:
                            return True

                        if self.last is not None:
                            return True

                        if self.maximum is not None:
                            return True

                        if self.minimum is not None:
                            return True

                        if self.number is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.EchoTransmitStatistics']['meta_info']


                class EchoReceivedStatistics(object):
                    """
                    Statistics of Interval between Echo Packets
                    Received (in milli\-seconds)
                    
                    .. attribute:: average
                    
                    	Average of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: last
                    
                    	Time since last Transmit/Receive (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: maximum
                    
                    	Maximum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: minimum
                    
                    	Minimum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: number
                    
                    	Number of Interval Samples between Packets sent/received
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.average = None
                        self.last = None
                        self.maximum = None
                        self.minimum = None
                        self.number = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:echo-received-statistics'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.average is not None:
                            return True

                        if self.last is not None:
                            return True

                        if self.maximum is not None:
                            return True

                        if self.minimum is not None:
                            return True

                        if self.number is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.EchoReceivedStatistics']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.async_receive_statistics is not None and self.async_receive_statistics._has_data():
                        return True

                    if self.async_transmit_statistics is not None and self.async_transmit_statistics._has_data():
                        return True

                    if self.desired_minimum_echo_transmit_interval is not None:
                        return True

                    if self.echo_received_statistics is not None and self.echo_received_statistics._has_data():
                        return True

                    if self.echo_transmit_statistics is not None and self.echo_transmit_statistics._has_data():
                        return True

                    if self.internal_label is not None:
                        return True

                    if self.last_state_change is not None and self.last_state_change._has_data():
                        return True

                    if self.latency_average is not None:
                        return True

                    if self.latency_maximum is not None:
                        return True

                    if self.latency_minimum is not None:
                        return True

                    if self.latency_number is not None:
                        return True

                    if self.local_discriminator is not None:
                        return True

                    if self.node_id is not None:
                        return True

                    if self.receive_packet is not None and self.receive_packet._has_data():
                        return True

                    if self.remote_discriminator is not None:
                        return True

                    if self.remote_negotiated_interval is not None:
                        return True

                    if self.session_subtype is not None:
                        return True

                    if self.sessiontype is not None:
                        return True

                    if self.source_address is not None and self.source_address._has_data():
                        return True

                    if self.state is not None:
                        return True

                    if self.status_brief_information is not None and self.status_brief_information._has_data():
                        return True

                    if self.to_up_state_count is not None:
                        return True

                    if self.transmit_packet is not None and self.transmit_packet._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation']['meta_info']


            class MpDownloadState(object):
                """
                MP Dowload State
                
                .. attribute:: change_time
                
                	Change time
                	**type**\:   :py:class:`ChangeTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.MpDownloadState.ChangeTime>`
                
                .. attribute:: mp_download_state
                
                	MP Download State
                	**type**\:   :py:class:`BfdMpDownloadStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMpDownloadStateEnum>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.change_time = Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.MpDownloadState.ChangeTime()
                    self.change_time.parent = self
                    self.mp_download_state = None


                class ChangeTime(object):
                    """
                    Change time
                    
                    .. attribute:: nanoseconds
                    
                    	nanoseconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: nanosecond
                    
                    .. attribute:: seconds
                    
                    	seconds
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: second
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.nanoseconds = None
                        self.seconds = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:mp-download-state/Cisco-IOS-XR-ip-bfd-oper:change-time'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.nanoseconds is not None:
                            return True

                        if self.seconds is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.MpDownloadState.ChangeTime']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:mp-download-state'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.change_time is not None and self.change_time._has_data():
                        return True

                    if self.mp_download_state is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.MpDownloadState']['meta_info']


            class LspPingInfo(object):
                """
                LSP Ping Info
                
                .. attribute:: lsp_ping_rx_count
                
                	LSP Ping numer of times received
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_ping_rx_last_code
                
                	LSP Ping Rx Last Code
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: lsp_ping_rx_last_discr
                
                	LSP Ping Rx last received discriminator
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_ping_rx_last_output
                
                	LSP Ping Rx Last Output
                	**type**\:  str
                
                .. attribute:: lsp_ping_rx_last_subcode
                
                	LSP Ping Rx Last Subcode
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: lsp_ping_rx_last_time
                
                	LSP Ping last received time
                	**type**\:   :py:class:`LspPingRxLastTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.LspPingInfo.LspPingRxLastTime>`
                
                .. attribute:: lsp_ping_tx_count
                
                	LSP Ping Tx count
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_ping_tx_error_count
                
                	LSP Ping Tx error count
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_ping_tx_last_error_rc
                
                	LSP Ping Tx last error
                	**type**\:  str
                
                .. attribute:: lsp_ping_tx_last_error_time
                
                	LSP Ping last error time
                	**type**\:   :py:class:`LspPingTxLastErrorTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.LspPingInfo.LspPingTxLastErrorTime>`
                
                .. attribute:: lsp_ping_tx_last_rc
                
                	LSP Ping Tx last result
                	**type**\:  str
                
                .. attribute:: lsp_ping_tx_last_time
                
                	LSP Ping last sent time
                	**type**\:   :py:class:`LspPingTxLastTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.LspPingInfo.LspPingTxLastTime>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.lsp_ping_rx_count = None
                    self.lsp_ping_rx_last_code = None
                    self.lsp_ping_rx_last_discr = None
                    self.lsp_ping_rx_last_output = None
                    self.lsp_ping_rx_last_subcode = None
                    self.lsp_ping_rx_last_time = Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.LspPingInfo.LspPingRxLastTime()
                    self.lsp_ping_rx_last_time.parent = self
                    self.lsp_ping_tx_count = None
                    self.lsp_ping_tx_error_count = None
                    self.lsp_ping_tx_last_error_rc = None
                    self.lsp_ping_tx_last_error_time = Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.LspPingInfo.LspPingTxLastErrorTime()
                    self.lsp_ping_tx_last_error_time.parent = self
                    self.lsp_ping_tx_last_rc = None
                    self.lsp_ping_tx_last_time = Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.LspPingInfo.LspPingTxLastTime()
                    self.lsp_ping_tx_last_time.parent = self


                class LspPingTxLastTime(object):
                    """
                    LSP Ping last sent time
                    
                    .. attribute:: nanoseconds
                    
                    	nanoseconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: nanosecond
                    
                    .. attribute:: seconds
                    
                    	seconds
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: second
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.nanoseconds = None
                        self.seconds = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:lsp-ping-info/Cisco-IOS-XR-ip-bfd-oper:lsp-ping-tx-last-time'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.nanoseconds is not None:
                            return True

                        if self.seconds is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.LspPingInfo.LspPingTxLastTime']['meta_info']


                class LspPingTxLastErrorTime(object):
                    """
                    LSP Ping last error time
                    
                    .. attribute:: nanoseconds
                    
                    	nanoseconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: nanosecond
                    
                    .. attribute:: seconds
                    
                    	seconds
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: second
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.nanoseconds = None
                        self.seconds = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:lsp-ping-info/Cisco-IOS-XR-ip-bfd-oper:lsp-ping-tx-last-error-time'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.nanoseconds is not None:
                            return True

                        if self.seconds is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.LspPingInfo.LspPingTxLastErrorTime']['meta_info']


                class LspPingRxLastTime(object):
                    """
                    LSP Ping last received time
                    
                    .. attribute:: nanoseconds
                    
                    	nanoseconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: nanosecond
                    
                    .. attribute:: seconds
                    
                    	seconds
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: second
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.nanoseconds = None
                        self.seconds = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:lsp-ping-info/Cisco-IOS-XR-ip-bfd-oper:lsp-ping-rx-last-time'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.nanoseconds is not None:
                            return True

                        if self.seconds is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.LspPingInfo.LspPingRxLastTime']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:lsp-ping-info'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.lsp_ping_rx_count is not None:
                        return True

                    if self.lsp_ping_rx_last_code is not None:
                        return True

                    if self.lsp_ping_rx_last_discr is not None:
                        return True

                    if self.lsp_ping_rx_last_output is not None:
                        return True

                    if self.lsp_ping_rx_last_subcode is not None:
                        return True

                    if self.lsp_ping_rx_last_time is not None and self.lsp_ping_rx_last_time._has_data():
                        return True

                    if self.lsp_ping_tx_count is not None:
                        return True

                    if self.lsp_ping_tx_error_count is not None:
                        return True

                    if self.lsp_ping_tx_last_error_rc is not None:
                        return True

                    if self.lsp_ping_tx_last_error_time is not None and self.lsp_ping_tx_last_error_time._has_data():
                        return True

                    if self.lsp_ping_tx_last_rc is not None:
                        return True

                    if self.lsp_ping_tx_last_time is not None and self.lsp_ping_tx_last_time._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.LspPingInfo']['meta_info']


            class OwnerInformation(object):
                """
                Client applications owning the session
                
                .. attribute:: adjusted_detection_multiplier
                
                	Adjusted detection multiplier to compute detection time
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: adjusted_interval
                
                	Adjusted minimum transmit interval in milli\-seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: millisecond
                
                .. attribute:: detection_multiplier
                
                	Client specified detection multiplier to compute detection time
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: interval
                
                	Client specified minimum transmit interval in micro\-seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: microsecond
                
                .. attribute:: name
                
                	Client process name
                	**type**\:  str
                
                	**length:** 0..257
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.adjusted_detection_multiplier = None
                    self.adjusted_interval = None
                    self.detection_multiplier = None
                    self.interval = None
                    self.name = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:owner-information'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.adjusted_detection_multiplier is not None:
                        return True

                    if self.adjusted_interval is not None:
                        return True

                    if self.detection_multiplier is not None:
                        return True

                    if self.interval is not None:
                        return True

                    if self.name is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.OwnerInformation']['meta_info']


            class AssociationInformation(object):
                """
                Association session information
                
                .. attribute:: local_discriminator
                
                	Session's Local discriminator
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: owner_information
                
                	Client applications owning the session
                	**type**\: list of    :py:class:`OwnerInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.AssociationInformation.OwnerInformation>`
                
                .. attribute:: session_key
                
                	Session Key
                	**type**\:   :py:class:`SessionKey <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.AssociationInformation.SessionKey>`
                
                .. attribute:: sessiontype
                
                	Session type
                	**type**\:   :py:class:`BfdSessionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdSessionEnum>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.local_discriminator = None
                    self.owner_information = YList()
                    self.owner_information.parent = self
                    self.owner_information.name = 'owner_information'
                    self.session_key = Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.AssociationInformation.SessionKey()
                    self.session_key.parent = self
                    self.sessiontype = None


                class SessionKey(object):
                    """
                    Session Key
                    
                    .. attribute:: bfdfec
                    
                    	Union of FECs
                    	**type**\:   :py:class:`Bfdfec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.AssociationInformation.SessionKey.Bfdfec>`
                    
                    .. attribute:: incoming_label
                    
                    	Incoming Label
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: interface_name
                    
                    	Session Interface Name
                    	**type**\:  str
                    
                    	**length:** 0..64
                    
                    .. attribute:: ip_destination_address
                    
                    	IPv4/v6 dest address
                    	**type**\:   :py:class:`IpDestinationAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.AssociationInformation.SessionKey.IpDestinationAddress>`
                    
                    .. attribute:: ip_source_address
                    
                    	IPv4/v6 source address
                    	**type**\:   :py:class:`IpSourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.AssociationInformation.SessionKey.IpSourceAddress>`
                    
                    .. attribute:: sbfd_enabled
                    
                    	SBFD enable flag
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: sbfd_target_type
                    
                    	SBFD target type
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: session_key_type
                    
                    	Session Key Type
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: target_address
                    
                    	sbfd target address
                    	**type**\:   :py:class:`TargetAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.AssociationInformation.SessionKey.TargetAddress>`
                    
                    .. attribute:: vrf_name
                    
                    	Session VRF Name
                    	**type**\:  str
                    
                    	**length:** 0..120
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.bfdfec = Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.AssociationInformation.SessionKey.Bfdfec()
                        self.bfdfec.parent = self
                        self.incoming_label = None
                        self.interface_name = None
                        self.ip_destination_address = Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.AssociationInformation.SessionKey.IpDestinationAddress()
                        self.ip_destination_address.parent = self
                        self.ip_source_address = Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.AssociationInformation.SessionKey.IpSourceAddress()
                        self.ip_source_address.parent = self
                        self.sbfd_enabled = None
                        self.sbfd_target_type = None
                        self.session_key_type = None
                        self.target_address = Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.AssociationInformation.SessionKey.TargetAddress()
                        self.target_address.parent = self
                        self.vrf_name = None


                    class IpDestinationAddress(object):
                        """
                        IPv4/v6 dest address
                        
                        .. attribute:: afi
                        
                        	AFI
                        	**type**\:   :py:class:`BfdAfIdEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdAfIdEnum>`
                        
                        .. attribute:: dummy
                        
                        	No Address
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: ipv4
                        
                        	IPv4 address type
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: ipv6
                        
                        	IPv6 address type
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-bfd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.afi = None
                            self.dummy = None
                            self.ipv4 = None
                            self.ipv6 = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:session-key/Cisco-IOS-XR-ip-bfd-oper:ip-destination-address'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.afi is not None:
                                return True

                            if self.dummy is not None:
                                return True

                            if self.ipv4 is not None:
                                return True

                            if self.ipv6 is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                            return meta._meta_table['Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.AssociationInformation.SessionKey.IpDestinationAddress']['meta_info']


                    class IpSourceAddress(object):
                        """
                        IPv4/v6 source address
                        
                        .. attribute:: afi
                        
                        	AFI
                        	**type**\:   :py:class:`BfdAfIdEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdAfIdEnum>`
                        
                        .. attribute:: dummy
                        
                        	No Address
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: ipv4
                        
                        	IPv4 address type
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: ipv6
                        
                        	IPv6 address type
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-bfd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.afi = None
                            self.dummy = None
                            self.ipv4 = None
                            self.ipv6 = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:session-key/Cisco-IOS-XR-ip-bfd-oper:ip-source-address'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.afi is not None:
                                return True

                            if self.dummy is not None:
                                return True

                            if self.ipv4 is not None:
                                return True

                            if self.ipv6 is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                            return meta._meta_table['Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.AssociationInformation.SessionKey.IpSourceAddress']['meta_info']


                    class Bfdfec(object):
                        """
                        Union of FECs
                        
                        .. attribute:: bfdfe_ctype
                        
                        	BFDFECType
                        	**type**\:   :py:class:`BfdApiFecEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdApiFecEnum>`
                        
                        .. attribute:: dummy
                        
                        	dummy
                        	**type**\:   :py:class:`Dummy <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.AssociationInformation.SessionKey.Bfdfec.Dummy>`
                        
                        .. attribute:: te_s2l_fec
                        
                        	te s2l fec
                        	**type**\:   :py:class:`TeS2LFec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.AssociationInformation.SessionKey.Bfdfec.TeS2LFec>`
                        
                        

                        """

                        _prefix = 'ip-bfd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.bfdfe_ctype = None
                            self.dummy = Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.AssociationInformation.SessionKey.Bfdfec.Dummy()
                            self.dummy.parent = self
                            self.te_s2l_fec = Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.AssociationInformation.SessionKey.Bfdfec.TeS2LFec()
                            self.te_s2l_fec.parent = self


                        class Dummy(object):
                            """
                            dummy
                            
                            .. attribute:: dummy
                            
                            	dummy
                            	**type**\:  str
                            
                            	**pattern:** ([0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2})\*)?
                            
                            

                            """

                            _prefix = 'ip-bfd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.dummy = None

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:session-key/Cisco-IOS-XR-ip-bfd-oper:bfdfec/Cisco-IOS-XR-ip-bfd-oper:dummy'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.dummy is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                                return meta._meta_table['Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.AssociationInformation.SessionKey.Bfdfec.Dummy']['meta_info']


                        class TeS2LFec(object):
                            """
                            te s2l fec
                            
                            .. attribute:: s2l_fec_ctype
                            
                            	Session identifier (ctype)
                            	**type**\:   :py:class:`MplsLibCEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.MplsLibCEnum>`
                            
                            .. attribute:: s2l_fec_dest
                            
                            	sub\-LSP destination address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: s2l_fec_extended_tunnel_id
                            
                            	Extended tunnel ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: s2l_fec_lsp_id
                            
                            	LSP ID
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: s2l_fec_p2mp_id
                            
                            	P2MP ID
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: s2l_fec_source
                            
                            	LSP source address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: s2l_fec_subgroup_id
                            
                            	sub\-LSP subgroup ID
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: s2l_fec_subgroup_originator
                            
                            	Subgroup Originator
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: s2l_fec_tunnel_id
                            
                            	Tunnel ID
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: s2l_fec_vrf
                            
                            	VRF; currently only for GMPLS tunnels
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'ip-bfd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.s2l_fec_ctype = None
                                self.s2l_fec_dest = None
                                self.s2l_fec_extended_tunnel_id = None
                                self.s2l_fec_lsp_id = None
                                self.s2l_fec_p2mp_id = None
                                self.s2l_fec_source = None
                                self.s2l_fec_subgroup_id = None
                                self.s2l_fec_subgroup_originator = None
                                self.s2l_fec_tunnel_id = None
                                self.s2l_fec_vrf = None

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:session-key/Cisco-IOS-XR-ip-bfd-oper:bfdfec/Cisco-IOS-XR-ip-bfd-oper:te-s2l-fec'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.s2l_fec_ctype is not None:
                                    return True

                                if self.s2l_fec_dest is not None:
                                    return True

                                if self.s2l_fec_extended_tunnel_id is not None:
                                    return True

                                if self.s2l_fec_lsp_id is not None:
                                    return True

                                if self.s2l_fec_p2mp_id is not None:
                                    return True

                                if self.s2l_fec_source is not None:
                                    return True

                                if self.s2l_fec_subgroup_id is not None:
                                    return True

                                if self.s2l_fec_subgroup_originator is not None:
                                    return True

                                if self.s2l_fec_tunnel_id is not None:
                                    return True

                                if self.s2l_fec_vrf is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                                return meta._meta_table['Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.AssociationInformation.SessionKey.Bfdfec.TeS2LFec']['meta_info']

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:session-key/Cisco-IOS-XR-ip-bfd-oper:bfdfec'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.bfdfe_ctype is not None:
                                return True

                            if self.dummy is not None and self.dummy._has_data():
                                return True

                            if self.te_s2l_fec is not None and self.te_s2l_fec._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                            return meta._meta_table['Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.AssociationInformation.SessionKey.Bfdfec']['meta_info']


                    class TargetAddress(object):
                        """
                        sbfd target address
                        
                        .. attribute:: afi
                        
                        	AFI
                        	**type**\:   :py:class:`BfdAfIdEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdAfIdEnum>`
                        
                        .. attribute:: dummy
                        
                        	No Address
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: ipv4
                        
                        	IPv4 address type
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: ipv6
                        
                        	IPv6 address type
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-bfd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.afi = None
                            self.dummy = None
                            self.ipv4 = None
                            self.ipv6 = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:session-key/Cisco-IOS-XR-ip-bfd-oper:target-address'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.afi is not None:
                                return True

                            if self.dummy is not None:
                                return True

                            if self.ipv4 is not None:
                                return True

                            if self.ipv6 is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                            return meta._meta_table['Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.AssociationInformation.SessionKey.TargetAddress']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:session-key'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.bfdfec is not None and self.bfdfec._has_data():
                            return True

                        if self.incoming_label is not None:
                            return True

                        if self.interface_name is not None:
                            return True

                        if self.ip_destination_address is not None and self.ip_destination_address._has_data():
                            return True

                        if self.ip_source_address is not None and self.ip_source_address._has_data():
                            return True

                        if self.sbfd_enabled is not None:
                            return True

                        if self.sbfd_target_type is not None:
                            return True

                        if self.session_key_type is not None:
                            return True

                        if self.target_address is not None and self.target_address._has_data():
                            return True

                        if self.vrf_name is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.AssociationInformation.SessionKey']['meta_info']


                class OwnerInformation(object):
                    """
                    Client applications owning the session
                    
                    .. attribute:: adjusted_detection_multiplier
                    
                    	Adjusted detection multiplier to compute detection time
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: adjusted_interval
                    
                    	Adjusted minimum transmit interval in milli\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: detection_multiplier
                    
                    	Client specified detection multiplier to compute detection time
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: interval
                    
                    	Client specified minimum transmit interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: name
                    
                    	Client process name
                    	**type**\:  str
                    
                    	**length:** 0..257
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.adjusted_detection_multiplier = None
                        self.adjusted_interval = None
                        self.detection_multiplier = None
                        self.interval = None
                        self.name = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:owner-information'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.adjusted_detection_multiplier is not None:
                            return True

                        if self.adjusted_interval is not None:
                            return True

                        if self.detection_multiplier is not None:
                            return True

                        if self.interval is not None:
                            return True

                        if self.name is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.AssociationInformation.OwnerInformation']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.local_discriminator is not None:
                        return True

                    if self.owner_information is not None:
                        for child_ref in self.owner_information:
                            if child_ref._has_data():
                                return True

                    if self.session_key is not None and self.session_key._has_data():
                        return True

                    if self.sessiontype is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.AssociationInformation']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-session-detail'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.association_information is not None:
                    for child_ref in self.association_information:
                        if child_ref._has_data():
                            return True

                if self.destination_address is not None:
                    return True

                if self.interface_name is not None:
                    return True

                if self.location is not None:
                    return True

                if self.lsp_ping_info is not None and self.lsp_ping_info._has_data():
                    return True

                if self.mp_download_state is not None and self.mp_download_state._has_data():
                    return True

                if self.owner_information is not None:
                    for child_ref in self.owner_information:
                        if child_ref._has_data():
                            return True

                if self.status_information is not None and self.status_information._has_data():
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                return meta._meta_table['Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-session-details'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.ipv6_single_hop_session_detail is not None:
                for child_ref in self.ipv6_single_hop_session_detail:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
            return meta._meta_table['Bfd.Ipv6SingleHopSessionDetails']['meta_info']


    class Ipv4MultiHopCounters(object):
        """
        IPv4 multiple hop Counters
        
        .. attribute:: ipv4_multi_hop_packet_counters
        
        	Table of IPv4 multiple hop Packet counters
        	**type**\:   :py:class:`Ipv4MultiHopPacketCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopCounters.Ipv4MultiHopPacketCounters>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.ipv4_multi_hop_packet_counters = Bfd.Ipv4MultiHopCounters.Ipv4MultiHopPacketCounters()
            self.ipv4_multi_hop_packet_counters.parent = self


        class Ipv4MultiHopPacketCounters(object):
            """
            Table of IPv4 multiple hop Packet counters
            
            .. attribute:: ipv4_multi_hop_packet_counter
            
            	IPv4 multiple hop Packet counters
            	**type**\: list of    :py:class:`Ipv4MultiHopPacketCounter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopCounters.Ipv4MultiHopPacketCounters.Ipv4MultiHopPacketCounter>`
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.ipv4_multi_hop_packet_counter = YList()
                self.ipv4_multi_hop_packet_counter.parent = self
                self.ipv4_multi_hop_packet_counter.name = 'ipv4_multi_hop_packet_counter'


            class Ipv4MultiHopPacketCounter(object):
                """
                IPv4 multiple hop Packet counters
                
                .. attribute:: destination_address
                
                	Destination Address
                	**type**\: one of the below types:
                
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                
                ----
                	**type**\:  str
                
                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                
                
                ----
                .. attribute:: display_type
                
                	Packet Display Type
                	**type**\:   :py:class:`BfdMgmtPktDisplayEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtPktDisplayEnum>`
                
                .. attribute:: echo_receive_count
                
                	Number of echo packets received
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: echo_transmit_count
                
                	Number of echo packets transmitted
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: hello_receive_count
                
                	Number of Hellos received
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: hello_transmit_count
                
                	Number of Hellos transmitted
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: location
                
                	Location
                	**type**\:  str
                
                	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
                
                .. attribute:: source_address
                
                	Source Address
                	**type**\: one of the below types:
                
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                
                ----
                	**type**\:  str
                
                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                
                
                ----
                .. attribute:: vrf_name
                
                	VRF name
                	**type**\:  str
                
                	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.destination_address = None
                    self.display_type = None
                    self.echo_receive_count = None
                    self.echo_transmit_count = None
                    self.hello_receive_count = None
                    self.hello_transmit_count = None
                    self.location = None
                    self.source_address = None
                    self.vrf_name = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-counters/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-packet-counters/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-packet-counter'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.destination_address is not None:
                        return True

                    if self.display_type is not None:
                        return True

                    if self.echo_receive_count is not None:
                        return True

                    if self.echo_transmit_count is not None:
                        return True

                    if self.hello_receive_count is not None:
                        return True

                    if self.hello_transmit_count is not None:
                        return True

                    if self.location is not None:
                        return True

                    if self.source_address is not None:
                        return True

                    if self.vrf_name is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.Ipv4MultiHopCounters.Ipv4MultiHopPacketCounters.Ipv4MultiHopPacketCounter']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-counters/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-packet-counters'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.ipv4_multi_hop_packet_counter is not None:
                    for child_ref in self.ipv4_multi_hop_packet_counter:
                        if child_ref._has_data():
                            return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                return meta._meta_table['Bfd.Ipv4MultiHopCounters.Ipv4MultiHopPacketCounters']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-counters'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.ipv4_multi_hop_packet_counters is not None and self.ipv4_multi_hop_packet_counters._has_data():
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
            return meta._meta_table['Bfd.Ipv4MultiHopCounters']['meta_info']


    class SessionDetails(object):
        """
        Table of detailed information about IPv4
        singlehop BFD sessions in the System 
        
        .. attribute:: session_detail
        
        	Detailed information for a single IPv4 singlehop BFD session
        	**type**\: list of    :py:class:`SessionDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.SessionDetails.SessionDetail>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.session_detail = YList()
            self.session_detail.parent = self
            self.session_detail.name = 'session_detail'


        class SessionDetail(object):
            """
            Detailed information for a single IPv4
            singlehop BFD session
            
            .. attribute:: association_information
            
            	Association session information
            	**type**\: list of    :py:class:`AssociationInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.SessionDetails.SessionDetail.AssociationInformation>`
            
            .. attribute:: destination_address
            
            	Destination Address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: interface_name
            
            	Interface Name
            	**type**\:  str
            
            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
            
            .. attribute:: location
            
            	Location
            	**type**\:  str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: lsp_ping_info
            
            	LSP Ping Info
            	**type**\:   :py:class:`LspPingInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.SessionDetails.SessionDetail.LspPingInfo>`
            
            .. attribute:: mp_download_state
            
            	MP Dowload State
            	**type**\:   :py:class:`MpDownloadState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.SessionDetails.SessionDetail.MpDownloadState>`
            
            .. attribute:: owner_information
            
            	Client applications owning the session
            	**type**\: list of    :py:class:`OwnerInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.SessionDetails.SessionDetail.OwnerInformation>`
            
            .. attribute:: status_information
            
            	Session status information
            	**type**\:   :py:class:`StatusInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.SessionDetails.SessionDetail.StatusInformation>`
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.association_information = YList()
                self.association_information.parent = self
                self.association_information.name = 'association_information'
                self.destination_address = None
                self.interface_name = None
                self.location = None
                self.lsp_ping_info = Bfd.SessionDetails.SessionDetail.LspPingInfo()
                self.lsp_ping_info.parent = self
                self.mp_download_state = Bfd.SessionDetails.SessionDetail.MpDownloadState()
                self.mp_download_state.parent = self
                self.owner_information = YList()
                self.owner_information.parent = self
                self.owner_information.name = 'owner_information'
                self.status_information = Bfd.SessionDetails.SessionDetail.StatusInformation()
                self.status_information.parent = self


            class StatusInformation(object):
                """
                Session status information
                
                .. attribute:: async_receive_statistics
                
                	Statistics of Interval between Async Packets Received (in milli\-seconds)
                	**type**\:   :py:class:`AsyncReceiveStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.SessionDetails.SessionDetail.StatusInformation.AsyncReceiveStatistics>`
                
                .. attribute:: async_transmit_statistics
                
                	Statistics of Interval between Async Packets Transmitted (in milli\-seconds)
                	**type**\:   :py:class:`AsyncTransmitStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.SessionDetails.SessionDetail.StatusInformation.AsyncTransmitStatistics>`
                
                .. attribute:: desired_minimum_echo_transmit_interval
                
                	Desired minimum echo transmit interval in milli\-seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: millisecond
                
                .. attribute:: echo_received_statistics
                
                	Statistics of Interval between Echo Packets Received (in milli\-seconds)
                	**type**\:   :py:class:`EchoReceivedStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.SessionDetails.SessionDetail.StatusInformation.EchoReceivedStatistics>`
                
                .. attribute:: echo_transmit_statistics
                
                	Statistics of Interval between Echo Packets Transmitted (in milli\-seconds)
                	**type**\:   :py:class:`EchoTransmitStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.SessionDetails.SessionDetail.StatusInformation.EchoTransmitStatistics>`
                
                .. attribute:: internal_label
                
                	Internal Label
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: last_state_change
                
                	Time since last state change
                	**type**\:   :py:class:`LastStateChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.SessionDetails.SessionDetail.StatusInformation.LastStateChange>`
                
                .. attribute:: latency_average
                
                	Average value of Latency (in micro\-seconds)
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: microsecond
                
                .. attribute:: latency_maximum
                
                	Maximum value of Latency (in micro\-seconds)
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: microsecond
                
                .. attribute:: latency_minimum
                
                	Minimum value of Latency (in micro\-seconds)
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: microsecond
                
                .. attribute:: latency_number
                
                	Number of Latency Samples. Time between Transmit and Receive
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: local_discriminator
                
                	Session's Local discriminator
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: node_id
                
                	Location where session is housed
                	**type**\:  str
                
                	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
                
                .. attribute:: receive_packet
                
                	Receive Packet
                	**type**\:   :py:class:`ReceivePacket <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.SessionDetails.SessionDetail.StatusInformation.ReceivePacket>`
                
                .. attribute:: remote_discriminator
                
                	Session's Remote discriminator
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: remote_negotiated_interval
                
                	Remote Negotiated Interval in milli\-seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: millisecond
                
                .. attribute:: session_subtype
                
                	Session subtype
                	**type**\:  str
                
                .. attribute:: sessiontype
                
                	Session type
                	**type**\:   :py:class:`BfdSessionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdSessionEnum>`
                
                .. attribute:: source_address
                
                	Source address
                	**type**\:   :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.SessionDetails.SessionDetail.StatusInformation.SourceAddress>`
                
                .. attribute:: state
                
                	State
                	**type**\:   :py:class:`BfdMgmtSessionStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionStateEnum>`
                
                .. attribute:: status_brief_information
                
                	Brief Status Information
                	**type**\:   :py:class:`StatusBriefInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.SessionDetails.SessionDetail.StatusInformation.StatusBriefInformation>`
                
                .. attribute:: to_up_state_count
                
                	Number of times session state went to UP
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: transmit_packet
                
                	Transmit Packet
                	**type**\:   :py:class:`TransmitPacket <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.SessionDetails.SessionDetail.StatusInformation.TransmitPacket>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.async_receive_statistics = Bfd.SessionDetails.SessionDetail.StatusInformation.AsyncReceiveStatistics()
                    self.async_receive_statistics.parent = self
                    self.async_transmit_statistics = Bfd.SessionDetails.SessionDetail.StatusInformation.AsyncTransmitStatistics()
                    self.async_transmit_statistics.parent = self
                    self.desired_minimum_echo_transmit_interval = None
                    self.echo_received_statistics = Bfd.SessionDetails.SessionDetail.StatusInformation.EchoReceivedStatistics()
                    self.echo_received_statistics.parent = self
                    self.echo_transmit_statistics = Bfd.SessionDetails.SessionDetail.StatusInformation.EchoTransmitStatistics()
                    self.echo_transmit_statistics.parent = self
                    self.internal_label = None
                    self.last_state_change = Bfd.SessionDetails.SessionDetail.StatusInformation.LastStateChange()
                    self.last_state_change.parent = self
                    self.latency_average = None
                    self.latency_maximum = None
                    self.latency_minimum = None
                    self.latency_number = None
                    self.local_discriminator = None
                    self.node_id = None
                    self.receive_packet = Bfd.SessionDetails.SessionDetail.StatusInformation.ReceivePacket()
                    self.receive_packet.parent = self
                    self.remote_discriminator = None
                    self.remote_negotiated_interval = None
                    self.session_subtype = None
                    self.sessiontype = None
                    self.source_address = Bfd.SessionDetails.SessionDetail.StatusInformation.SourceAddress()
                    self.source_address.parent = self
                    self.state = None
                    self.status_brief_information = Bfd.SessionDetails.SessionDetail.StatusInformation.StatusBriefInformation()
                    self.status_brief_information.parent = self
                    self.to_up_state_count = None
                    self.transmit_packet = Bfd.SessionDetails.SessionDetail.StatusInformation.TransmitPacket()
                    self.transmit_packet.parent = self


                class SourceAddress(object):
                    """
                    Source address
                    
                    .. attribute:: afi
                    
                    	AFI
                    	**type**\:   :py:class:`BfdAfIdEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdAfIdEnum>`
                    
                    .. attribute:: dummy
                    
                    	No Address
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    .. attribute:: ipv4
                    
                    	IPv4 address type
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: ipv6
                    
                    	IPv6 address type
                    	**type**\:  str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.afi = None
                        self.dummy = None
                        self.ipv4 = None
                        self.ipv6 = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:session-details/Cisco-IOS-XR-ip-bfd-oper:session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:source-address'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.afi is not None:
                            return True

                        if self.dummy is not None:
                            return True

                        if self.ipv4 is not None:
                            return True

                        if self.ipv6 is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.SessionDetails.SessionDetail.StatusInformation.SourceAddress']['meta_info']


                class LastStateChange(object):
                    """
                    Time since last state change
                    
                    .. attribute:: days
                    
                    	Number of days since last session state transition
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: day
                    
                    .. attribute:: hours
                    
                    	Number of hours since last session state transition
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    	**units**\: hour
                    
                    .. attribute:: minutes
                    
                    	Number of mins since last session state transition
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    	**units**\: minute
                    
                    .. attribute:: seconds
                    
                    	Number of seconds since last session state transition
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    	**units**\: second
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.days = None
                        self.hours = None
                        self.minutes = None
                        self.seconds = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:session-details/Cisco-IOS-XR-ip-bfd-oper:session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:last-state-change'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.days is not None:
                            return True

                        if self.hours is not None:
                            return True

                        if self.minutes is not None:
                            return True

                        if self.seconds is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.SessionDetails.SessionDetail.StatusInformation.LastStateChange']['meta_info']


                class TransmitPacket(object):
                    """
                    Transmit Packet
                    
                    .. attribute:: authentication_present
                    
                    	Requesting authentication for the session
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: control_plane_independent
                    
                    	BFD implementation does not share fate with its control plane
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: demand
                    
                    	Demand mode
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: desired_minimum_transmit_interval
                    
                    	Desired minimum transmit interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: detection_multiplier
                    
                    	Detection Multiplier
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: diagnostic
                    
                    	Diagnostic
                    	**type**\:   :py:class:`BfdMgmtSessionDiagEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionDiagEnum>`
                    
                    .. attribute:: final
                    
                    	Final bit
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: ihear_you
                    
                    	I Hear You (v0)
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: length
                    
                    	Length
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: my_discriminator
                    
                    	My Discriminator
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: poll
                    
                    	Poll bit
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: required_minimum_echo_receive_interval
                    
                    	Required echo receive interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: required_minimum_receive_interval
                    
                    	Required receive interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: state
                    
                    	State (v1)
                    	**type**\:   :py:class:`BfdMgmtSessionStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionStateEnum>`
                    
                    .. attribute:: version
                    
                    	Version
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    .. attribute:: your_discriminator
                    
                    	Your Discriminator
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.authentication_present = None
                        self.control_plane_independent = None
                        self.demand = None
                        self.desired_minimum_transmit_interval = None
                        self.detection_multiplier = None
                        self.diagnostic = None
                        self.final = None
                        self.ihear_you = None
                        self.length = None
                        self.my_discriminator = None
                        self.poll = None
                        self.required_minimum_echo_receive_interval = None
                        self.required_minimum_receive_interval = None
                        self.state = None
                        self.version = None
                        self.your_discriminator = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:session-details/Cisco-IOS-XR-ip-bfd-oper:session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:transmit-packet'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.authentication_present is not None:
                            return True

                        if self.control_plane_independent is not None:
                            return True

                        if self.demand is not None:
                            return True

                        if self.desired_minimum_transmit_interval is not None:
                            return True

                        if self.detection_multiplier is not None:
                            return True

                        if self.diagnostic is not None:
                            return True

                        if self.final is not None:
                            return True

                        if self.ihear_you is not None:
                            return True

                        if self.length is not None:
                            return True

                        if self.my_discriminator is not None:
                            return True

                        if self.poll is not None:
                            return True

                        if self.required_minimum_echo_receive_interval is not None:
                            return True

                        if self.required_minimum_receive_interval is not None:
                            return True

                        if self.state is not None:
                            return True

                        if self.version is not None:
                            return True

                        if self.your_discriminator is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.SessionDetails.SessionDetail.StatusInformation.TransmitPacket']['meta_info']


                class ReceivePacket(object):
                    """
                    Receive Packet
                    
                    .. attribute:: authentication_present
                    
                    	Requesting authentication for the session
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: control_plane_independent
                    
                    	BFD implementation does not share fate with its control plane
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: demand
                    
                    	Demand mode
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: desired_minimum_transmit_interval
                    
                    	Desired minimum transmit interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: detection_multiplier
                    
                    	Detection Multiplier
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: diagnostic
                    
                    	Diagnostic
                    	**type**\:   :py:class:`BfdMgmtSessionDiagEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionDiagEnum>`
                    
                    .. attribute:: final
                    
                    	Final bit
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: ihear_you
                    
                    	I Hear You (v0)
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: length
                    
                    	Length
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: my_discriminator
                    
                    	My Discriminator
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: poll
                    
                    	Poll bit
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: required_minimum_echo_receive_interval
                    
                    	Required echo receive interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: required_minimum_receive_interval
                    
                    	Required receive interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: state
                    
                    	State (v1)
                    	**type**\:   :py:class:`BfdMgmtSessionStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionStateEnum>`
                    
                    .. attribute:: version
                    
                    	Version
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    .. attribute:: your_discriminator
                    
                    	Your Discriminator
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.authentication_present = None
                        self.control_plane_independent = None
                        self.demand = None
                        self.desired_minimum_transmit_interval = None
                        self.detection_multiplier = None
                        self.diagnostic = None
                        self.final = None
                        self.ihear_you = None
                        self.length = None
                        self.my_discriminator = None
                        self.poll = None
                        self.required_minimum_echo_receive_interval = None
                        self.required_minimum_receive_interval = None
                        self.state = None
                        self.version = None
                        self.your_discriminator = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:session-details/Cisco-IOS-XR-ip-bfd-oper:session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:receive-packet'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.authentication_present is not None:
                            return True

                        if self.control_plane_independent is not None:
                            return True

                        if self.demand is not None:
                            return True

                        if self.desired_minimum_transmit_interval is not None:
                            return True

                        if self.detection_multiplier is not None:
                            return True

                        if self.diagnostic is not None:
                            return True

                        if self.final is not None:
                            return True

                        if self.ihear_you is not None:
                            return True

                        if self.length is not None:
                            return True

                        if self.my_discriminator is not None:
                            return True

                        if self.poll is not None:
                            return True

                        if self.required_minimum_echo_receive_interval is not None:
                            return True

                        if self.required_minimum_receive_interval is not None:
                            return True

                        if self.state is not None:
                            return True

                        if self.version is not None:
                            return True

                        if self.your_discriminator is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.SessionDetails.SessionDetail.StatusInformation.ReceivePacket']['meta_info']


                class StatusBriefInformation(object):
                    """
                    Brief Status Information
                    
                    .. attribute:: async_interval_multiplier
                    
                    	Async Interval and Detect Multiplier Information
                    	**type**\:   :py:class:`AsyncIntervalMultiplier <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.SessionDetails.SessionDetail.StatusInformation.StatusBriefInformation.AsyncIntervalMultiplier>`
                    
                    .. attribute:: echo_interval_multiplier
                    
                    	Echo Interval and Detect Multiplier Information
                    	**type**\:   :py:class:`EchoIntervalMultiplier <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.SessionDetails.SessionDetail.StatusInformation.StatusBriefInformation.EchoIntervalMultiplier>`
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.async_interval_multiplier = Bfd.SessionDetails.SessionDetail.StatusInformation.StatusBriefInformation.AsyncIntervalMultiplier()
                        self.async_interval_multiplier.parent = self
                        self.echo_interval_multiplier = Bfd.SessionDetails.SessionDetail.StatusInformation.StatusBriefInformation.EchoIntervalMultiplier()
                        self.echo_interval_multiplier.parent = self


                    class AsyncIntervalMultiplier(object):
                        """
                        Async Interval and Detect Multiplier Information
                        
                        .. attribute:: detection_multiplier
                        
                        	Detection Multiplier
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: detection_time
                        
                        	Detection time in micro\-seconds
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        .. attribute:: negotiated_local_transmit_interval
                        
                        	Negotiated local transmit interval in micro\-seconds
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        .. attribute:: negotiated_remote_transmit_interval
                        
                        	Negotiated remote transmit interval in micro\-seconds
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        

                        """

                        _prefix = 'ip-bfd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.detection_multiplier = None
                            self.detection_time = None
                            self.negotiated_local_transmit_interval = None
                            self.negotiated_remote_transmit_interval = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:session-details/Cisco-IOS-XR-ip-bfd-oper:session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:status-brief-information/Cisco-IOS-XR-ip-bfd-oper:async-interval-multiplier'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.detection_multiplier is not None:
                                return True

                            if self.detection_time is not None:
                                return True

                            if self.negotiated_local_transmit_interval is not None:
                                return True

                            if self.negotiated_remote_transmit_interval is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                            return meta._meta_table['Bfd.SessionDetails.SessionDetail.StatusInformation.StatusBriefInformation.AsyncIntervalMultiplier']['meta_info']


                    class EchoIntervalMultiplier(object):
                        """
                        Echo Interval and Detect Multiplier Information
                        
                        .. attribute:: detection_multiplier
                        
                        	Detection Multiplier
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: detection_time
                        
                        	Detection time in micro\-seconds
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        .. attribute:: negotiated_transmit_interval
                        
                        	Negotiated transmit interval in micro\-seconds
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        

                        """

                        _prefix = 'ip-bfd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.detection_multiplier = None
                            self.detection_time = None
                            self.negotiated_transmit_interval = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:session-details/Cisco-IOS-XR-ip-bfd-oper:session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:status-brief-information/Cisco-IOS-XR-ip-bfd-oper:echo-interval-multiplier'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.detection_multiplier is not None:
                                return True

                            if self.detection_time is not None:
                                return True

                            if self.negotiated_transmit_interval is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                            return meta._meta_table['Bfd.SessionDetails.SessionDetail.StatusInformation.StatusBriefInformation.EchoIntervalMultiplier']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:session-details/Cisco-IOS-XR-ip-bfd-oper:session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:status-brief-information'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.async_interval_multiplier is not None and self.async_interval_multiplier._has_data():
                            return True

                        if self.echo_interval_multiplier is not None and self.echo_interval_multiplier._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.SessionDetails.SessionDetail.StatusInformation.StatusBriefInformation']['meta_info']


                class AsyncTransmitStatistics(object):
                    """
                    Statistics of Interval between Async Packets
                    Transmitted (in milli\-seconds)
                    
                    .. attribute:: average
                    
                    	Average of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: last
                    
                    	Time since last Transmit/Receive (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: maximum
                    
                    	Maximum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: minimum
                    
                    	Minimum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: number
                    
                    	Number of Interval Samples between Packets sent/received
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.average = None
                        self.last = None
                        self.maximum = None
                        self.minimum = None
                        self.number = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:session-details/Cisco-IOS-XR-ip-bfd-oper:session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:async-transmit-statistics'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.average is not None:
                            return True

                        if self.last is not None:
                            return True

                        if self.maximum is not None:
                            return True

                        if self.minimum is not None:
                            return True

                        if self.number is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.SessionDetails.SessionDetail.StatusInformation.AsyncTransmitStatistics']['meta_info']


                class AsyncReceiveStatistics(object):
                    """
                    Statistics of Interval between Async Packets
                    Received (in milli\-seconds)
                    
                    .. attribute:: average
                    
                    	Average of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: last
                    
                    	Time since last Transmit/Receive (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: maximum
                    
                    	Maximum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: minimum
                    
                    	Minimum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: number
                    
                    	Number of Interval Samples between Packets sent/received
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.average = None
                        self.last = None
                        self.maximum = None
                        self.minimum = None
                        self.number = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:session-details/Cisco-IOS-XR-ip-bfd-oper:session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:async-receive-statistics'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.average is not None:
                            return True

                        if self.last is not None:
                            return True

                        if self.maximum is not None:
                            return True

                        if self.minimum is not None:
                            return True

                        if self.number is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.SessionDetails.SessionDetail.StatusInformation.AsyncReceiveStatistics']['meta_info']


                class EchoTransmitStatistics(object):
                    """
                    Statistics of Interval between Echo Packets
                    Transmitted (in milli\-seconds)
                    
                    .. attribute:: average
                    
                    	Average of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: last
                    
                    	Time since last Transmit/Receive (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: maximum
                    
                    	Maximum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: minimum
                    
                    	Minimum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: number
                    
                    	Number of Interval Samples between Packets sent/received
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.average = None
                        self.last = None
                        self.maximum = None
                        self.minimum = None
                        self.number = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:session-details/Cisco-IOS-XR-ip-bfd-oper:session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:echo-transmit-statistics'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.average is not None:
                            return True

                        if self.last is not None:
                            return True

                        if self.maximum is not None:
                            return True

                        if self.minimum is not None:
                            return True

                        if self.number is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.SessionDetails.SessionDetail.StatusInformation.EchoTransmitStatistics']['meta_info']


                class EchoReceivedStatistics(object):
                    """
                    Statistics of Interval between Echo Packets
                    Received (in milli\-seconds)
                    
                    .. attribute:: average
                    
                    	Average of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: last
                    
                    	Time since last Transmit/Receive (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: maximum
                    
                    	Maximum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: minimum
                    
                    	Minimum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: number
                    
                    	Number of Interval Samples between Packets sent/received
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.average = None
                        self.last = None
                        self.maximum = None
                        self.minimum = None
                        self.number = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:session-details/Cisco-IOS-XR-ip-bfd-oper:session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:echo-received-statistics'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.average is not None:
                            return True

                        if self.last is not None:
                            return True

                        if self.maximum is not None:
                            return True

                        if self.minimum is not None:
                            return True

                        if self.number is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.SessionDetails.SessionDetail.StatusInformation.EchoReceivedStatistics']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:session-details/Cisco-IOS-XR-ip-bfd-oper:session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.async_receive_statistics is not None and self.async_receive_statistics._has_data():
                        return True

                    if self.async_transmit_statistics is not None and self.async_transmit_statistics._has_data():
                        return True

                    if self.desired_minimum_echo_transmit_interval is not None:
                        return True

                    if self.echo_received_statistics is not None and self.echo_received_statistics._has_data():
                        return True

                    if self.echo_transmit_statistics is not None and self.echo_transmit_statistics._has_data():
                        return True

                    if self.internal_label is not None:
                        return True

                    if self.last_state_change is not None and self.last_state_change._has_data():
                        return True

                    if self.latency_average is not None:
                        return True

                    if self.latency_maximum is not None:
                        return True

                    if self.latency_minimum is not None:
                        return True

                    if self.latency_number is not None:
                        return True

                    if self.local_discriminator is not None:
                        return True

                    if self.node_id is not None:
                        return True

                    if self.receive_packet is not None and self.receive_packet._has_data():
                        return True

                    if self.remote_discriminator is not None:
                        return True

                    if self.remote_negotiated_interval is not None:
                        return True

                    if self.session_subtype is not None:
                        return True

                    if self.sessiontype is not None:
                        return True

                    if self.source_address is not None and self.source_address._has_data():
                        return True

                    if self.state is not None:
                        return True

                    if self.status_brief_information is not None and self.status_brief_information._has_data():
                        return True

                    if self.to_up_state_count is not None:
                        return True

                    if self.transmit_packet is not None and self.transmit_packet._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.SessionDetails.SessionDetail.StatusInformation']['meta_info']


            class MpDownloadState(object):
                """
                MP Dowload State
                
                .. attribute:: change_time
                
                	Change time
                	**type**\:   :py:class:`ChangeTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.SessionDetails.SessionDetail.MpDownloadState.ChangeTime>`
                
                .. attribute:: mp_download_state
                
                	MP Download State
                	**type**\:   :py:class:`BfdMpDownloadStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMpDownloadStateEnum>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.change_time = Bfd.SessionDetails.SessionDetail.MpDownloadState.ChangeTime()
                    self.change_time.parent = self
                    self.mp_download_state = None


                class ChangeTime(object):
                    """
                    Change time
                    
                    .. attribute:: nanoseconds
                    
                    	nanoseconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: nanosecond
                    
                    .. attribute:: seconds
                    
                    	seconds
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: second
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.nanoseconds = None
                        self.seconds = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:session-details/Cisco-IOS-XR-ip-bfd-oper:session-detail/Cisco-IOS-XR-ip-bfd-oper:mp-download-state/Cisco-IOS-XR-ip-bfd-oper:change-time'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.nanoseconds is not None:
                            return True

                        if self.seconds is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.SessionDetails.SessionDetail.MpDownloadState.ChangeTime']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:session-details/Cisco-IOS-XR-ip-bfd-oper:session-detail/Cisco-IOS-XR-ip-bfd-oper:mp-download-state'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.change_time is not None and self.change_time._has_data():
                        return True

                    if self.mp_download_state is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.SessionDetails.SessionDetail.MpDownloadState']['meta_info']


            class LspPingInfo(object):
                """
                LSP Ping Info
                
                .. attribute:: lsp_ping_rx_count
                
                	LSP Ping numer of times received
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_ping_rx_last_code
                
                	LSP Ping Rx Last Code
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: lsp_ping_rx_last_discr
                
                	LSP Ping Rx last received discriminator
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_ping_rx_last_output
                
                	LSP Ping Rx Last Output
                	**type**\:  str
                
                .. attribute:: lsp_ping_rx_last_subcode
                
                	LSP Ping Rx Last Subcode
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: lsp_ping_rx_last_time
                
                	LSP Ping last received time
                	**type**\:   :py:class:`LspPingRxLastTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.SessionDetails.SessionDetail.LspPingInfo.LspPingRxLastTime>`
                
                .. attribute:: lsp_ping_tx_count
                
                	LSP Ping Tx count
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_ping_tx_error_count
                
                	LSP Ping Tx error count
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_ping_tx_last_error_rc
                
                	LSP Ping Tx last error
                	**type**\:  str
                
                .. attribute:: lsp_ping_tx_last_error_time
                
                	LSP Ping last error time
                	**type**\:   :py:class:`LspPingTxLastErrorTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.SessionDetails.SessionDetail.LspPingInfo.LspPingTxLastErrorTime>`
                
                .. attribute:: lsp_ping_tx_last_rc
                
                	LSP Ping Tx last result
                	**type**\:  str
                
                .. attribute:: lsp_ping_tx_last_time
                
                	LSP Ping last sent time
                	**type**\:   :py:class:`LspPingTxLastTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.SessionDetails.SessionDetail.LspPingInfo.LspPingTxLastTime>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.lsp_ping_rx_count = None
                    self.lsp_ping_rx_last_code = None
                    self.lsp_ping_rx_last_discr = None
                    self.lsp_ping_rx_last_output = None
                    self.lsp_ping_rx_last_subcode = None
                    self.lsp_ping_rx_last_time = Bfd.SessionDetails.SessionDetail.LspPingInfo.LspPingRxLastTime()
                    self.lsp_ping_rx_last_time.parent = self
                    self.lsp_ping_tx_count = None
                    self.lsp_ping_tx_error_count = None
                    self.lsp_ping_tx_last_error_rc = None
                    self.lsp_ping_tx_last_error_time = Bfd.SessionDetails.SessionDetail.LspPingInfo.LspPingTxLastErrorTime()
                    self.lsp_ping_tx_last_error_time.parent = self
                    self.lsp_ping_tx_last_rc = None
                    self.lsp_ping_tx_last_time = Bfd.SessionDetails.SessionDetail.LspPingInfo.LspPingTxLastTime()
                    self.lsp_ping_tx_last_time.parent = self


                class LspPingTxLastTime(object):
                    """
                    LSP Ping last sent time
                    
                    .. attribute:: nanoseconds
                    
                    	nanoseconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: nanosecond
                    
                    .. attribute:: seconds
                    
                    	seconds
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: second
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.nanoseconds = None
                        self.seconds = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:session-details/Cisco-IOS-XR-ip-bfd-oper:session-detail/Cisco-IOS-XR-ip-bfd-oper:lsp-ping-info/Cisco-IOS-XR-ip-bfd-oper:lsp-ping-tx-last-time'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.nanoseconds is not None:
                            return True

                        if self.seconds is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.SessionDetails.SessionDetail.LspPingInfo.LspPingTxLastTime']['meta_info']


                class LspPingTxLastErrorTime(object):
                    """
                    LSP Ping last error time
                    
                    .. attribute:: nanoseconds
                    
                    	nanoseconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: nanosecond
                    
                    .. attribute:: seconds
                    
                    	seconds
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: second
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.nanoseconds = None
                        self.seconds = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:session-details/Cisco-IOS-XR-ip-bfd-oper:session-detail/Cisco-IOS-XR-ip-bfd-oper:lsp-ping-info/Cisco-IOS-XR-ip-bfd-oper:lsp-ping-tx-last-error-time'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.nanoseconds is not None:
                            return True

                        if self.seconds is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.SessionDetails.SessionDetail.LspPingInfo.LspPingTxLastErrorTime']['meta_info']


                class LspPingRxLastTime(object):
                    """
                    LSP Ping last received time
                    
                    .. attribute:: nanoseconds
                    
                    	nanoseconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: nanosecond
                    
                    .. attribute:: seconds
                    
                    	seconds
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: second
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.nanoseconds = None
                        self.seconds = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:session-details/Cisco-IOS-XR-ip-bfd-oper:session-detail/Cisco-IOS-XR-ip-bfd-oper:lsp-ping-info/Cisco-IOS-XR-ip-bfd-oper:lsp-ping-rx-last-time'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.nanoseconds is not None:
                            return True

                        if self.seconds is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.SessionDetails.SessionDetail.LspPingInfo.LspPingRxLastTime']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:session-details/Cisco-IOS-XR-ip-bfd-oper:session-detail/Cisco-IOS-XR-ip-bfd-oper:lsp-ping-info'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.lsp_ping_rx_count is not None:
                        return True

                    if self.lsp_ping_rx_last_code is not None:
                        return True

                    if self.lsp_ping_rx_last_discr is not None:
                        return True

                    if self.lsp_ping_rx_last_output is not None:
                        return True

                    if self.lsp_ping_rx_last_subcode is not None:
                        return True

                    if self.lsp_ping_rx_last_time is not None and self.lsp_ping_rx_last_time._has_data():
                        return True

                    if self.lsp_ping_tx_count is not None:
                        return True

                    if self.lsp_ping_tx_error_count is not None:
                        return True

                    if self.lsp_ping_tx_last_error_rc is not None:
                        return True

                    if self.lsp_ping_tx_last_error_time is not None and self.lsp_ping_tx_last_error_time._has_data():
                        return True

                    if self.lsp_ping_tx_last_rc is not None:
                        return True

                    if self.lsp_ping_tx_last_time is not None and self.lsp_ping_tx_last_time._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.SessionDetails.SessionDetail.LspPingInfo']['meta_info']


            class OwnerInformation(object):
                """
                Client applications owning the session
                
                .. attribute:: adjusted_detection_multiplier
                
                	Adjusted detection multiplier to compute detection time
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: adjusted_interval
                
                	Adjusted minimum transmit interval in milli\-seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: millisecond
                
                .. attribute:: detection_multiplier
                
                	Client specified detection multiplier to compute detection time
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: interval
                
                	Client specified minimum transmit interval in micro\-seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: microsecond
                
                .. attribute:: name
                
                	Client process name
                	**type**\:  str
                
                	**length:** 0..257
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.adjusted_detection_multiplier = None
                    self.adjusted_interval = None
                    self.detection_multiplier = None
                    self.interval = None
                    self.name = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:session-details/Cisco-IOS-XR-ip-bfd-oper:session-detail/Cisco-IOS-XR-ip-bfd-oper:owner-information'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.adjusted_detection_multiplier is not None:
                        return True

                    if self.adjusted_interval is not None:
                        return True

                    if self.detection_multiplier is not None:
                        return True

                    if self.interval is not None:
                        return True

                    if self.name is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.SessionDetails.SessionDetail.OwnerInformation']['meta_info']


            class AssociationInformation(object):
                """
                Association session information
                
                .. attribute:: local_discriminator
                
                	Session's Local discriminator
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: owner_information
                
                	Client applications owning the session
                	**type**\: list of    :py:class:`OwnerInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.SessionDetails.SessionDetail.AssociationInformation.OwnerInformation>`
                
                .. attribute:: session_key
                
                	Session Key
                	**type**\:   :py:class:`SessionKey <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.SessionDetails.SessionDetail.AssociationInformation.SessionKey>`
                
                .. attribute:: sessiontype
                
                	Session type
                	**type**\:   :py:class:`BfdSessionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdSessionEnum>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.local_discriminator = None
                    self.owner_information = YList()
                    self.owner_information.parent = self
                    self.owner_information.name = 'owner_information'
                    self.session_key = Bfd.SessionDetails.SessionDetail.AssociationInformation.SessionKey()
                    self.session_key.parent = self
                    self.sessiontype = None


                class SessionKey(object):
                    """
                    Session Key
                    
                    .. attribute:: bfdfec
                    
                    	Union of FECs
                    	**type**\:   :py:class:`Bfdfec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.SessionDetails.SessionDetail.AssociationInformation.SessionKey.Bfdfec>`
                    
                    .. attribute:: incoming_label
                    
                    	Incoming Label
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: interface_name
                    
                    	Session Interface Name
                    	**type**\:  str
                    
                    	**length:** 0..64
                    
                    .. attribute:: ip_destination_address
                    
                    	IPv4/v6 dest address
                    	**type**\:   :py:class:`IpDestinationAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.SessionDetails.SessionDetail.AssociationInformation.SessionKey.IpDestinationAddress>`
                    
                    .. attribute:: ip_source_address
                    
                    	IPv4/v6 source address
                    	**type**\:   :py:class:`IpSourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.SessionDetails.SessionDetail.AssociationInformation.SessionKey.IpSourceAddress>`
                    
                    .. attribute:: sbfd_enabled
                    
                    	SBFD enable flag
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: sbfd_target_type
                    
                    	SBFD target type
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: session_key_type
                    
                    	Session Key Type
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: target_address
                    
                    	sbfd target address
                    	**type**\:   :py:class:`TargetAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.SessionDetails.SessionDetail.AssociationInformation.SessionKey.TargetAddress>`
                    
                    .. attribute:: vrf_name
                    
                    	Session VRF Name
                    	**type**\:  str
                    
                    	**length:** 0..120
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.bfdfec = Bfd.SessionDetails.SessionDetail.AssociationInformation.SessionKey.Bfdfec()
                        self.bfdfec.parent = self
                        self.incoming_label = None
                        self.interface_name = None
                        self.ip_destination_address = Bfd.SessionDetails.SessionDetail.AssociationInformation.SessionKey.IpDestinationAddress()
                        self.ip_destination_address.parent = self
                        self.ip_source_address = Bfd.SessionDetails.SessionDetail.AssociationInformation.SessionKey.IpSourceAddress()
                        self.ip_source_address.parent = self
                        self.sbfd_enabled = None
                        self.sbfd_target_type = None
                        self.session_key_type = None
                        self.target_address = Bfd.SessionDetails.SessionDetail.AssociationInformation.SessionKey.TargetAddress()
                        self.target_address.parent = self
                        self.vrf_name = None


                    class IpDestinationAddress(object):
                        """
                        IPv4/v6 dest address
                        
                        .. attribute:: afi
                        
                        	AFI
                        	**type**\:   :py:class:`BfdAfIdEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdAfIdEnum>`
                        
                        .. attribute:: dummy
                        
                        	No Address
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: ipv4
                        
                        	IPv4 address type
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: ipv6
                        
                        	IPv6 address type
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-bfd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.afi = None
                            self.dummy = None
                            self.ipv4 = None
                            self.ipv6 = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:session-details/Cisco-IOS-XR-ip-bfd-oper:session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:session-key/Cisco-IOS-XR-ip-bfd-oper:ip-destination-address'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.afi is not None:
                                return True

                            if self.dummy is not None:
                                return True

                            if self.ipv4 is not None:
                                return True

                            if self.ipv6 is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                            return meta._meta_table['Bfd.SessionDetails.SessionDetail.AssociationInformation.SessionKey.IpDestinationAddress']['meta_info']


                    class IpSourceAddress(object):
                        """
                        IPv4/v6 source address
                        
                        .. attribute:: afi
                        
                        	AFI
                        	**type**\:   :py:class:`BfdAfIdEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdAfIdEnum>`
                        
                        .. attribute:: dummy
                        
                        	No Address
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: ipv4
                        
                        	IPv4 address type
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: ipv6
                        
                        	IPv6 address type
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-bfd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.afi = None
                            self.dummy = None
                            self.ipv4 = None
                            self.ipv6 = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:session-details/Cisco-IOS-XR-ip-bfd-oper:session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:session-key/Cisco-IOS-XR-ip-bfd-oper:ip-source-address'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.afi is not None:
                                return True

                            if self.dummy is not None:
                                return True

                            if self.ipv4 is not None:
                                return True

                            if self.ipv6 is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                            return meta._meta_table['Bfd.SessionDetails.SessionDetail.AssociationInformation.SessionKey.IpSourceAddress']['meta_info']


                    class Bfdfec(object):
                        """
                        Union of FECs
                        
                        .. attribute:: bfdfe_ctype
                        
                        	BFDFECType
                        	**type**\:   :py:class:`BfdApiFecEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdApiFecEnum>`
                        
                        .. attribute:: dummy
                        
                        	dummy
                        	**type**\:   :py:class:`Dummy <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.SessionDetails.SessionDetail.AssociationInformation.SessionKey.Bfdfec.Dummy>`
                        
                        .. attribute:: te_s2l_fec
                        
                        	te s2l fec
                        	**type**\:   :py:class:`TeS2LFec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.SessionDetails.SessionDetail.AssociationInformation.SessionKey.Bfdfec.TeS2LFec>`
                        
                        

                        """

                        _prefix = 'ip-bfd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.bfdfe_ctype = None
                            self.dummy = Bfd.SessionDetails.SessionDetail.AssociationInformation.SessionKey.Bfdfec.Dummy()
                            self.dummy.parent = self
                            self.te_s2l_fec = Bfd.SessionDetails.SessionDetail.AssociationInformation.SessionKey.Bfdfec.TeS2LFec()
                            self.te_s2l_fec.parent = self


                        class Dummy(object):
                            """
                            dummy
                            
                            .. attribute:: dummy
                            
                            	dummy
                            	**type**\:  str
                            
                            	**pattern:** ([0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2})\*)?
                            
                            

                            """

                            _prefix = 'ip-bfd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.dummy = None

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:session-details/Cisco-IOS-XR-ip-bfd-oper:session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:session-key/Cisco-IOS-XR-ip-bfd-oper:bfdfec/Cisco-IOS-XR-ip-bfd-oper:dummy'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.dummy is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                                return meta._meta_table['Bfd.SessionDetails.SessionDetail.AssociationInformation.SessionKey.Bfdfec.Dummy']['meta_info']


                        class TeS2LFec(object):
                            """
                            te s2l fec
                            
                            .. attribute:: s2l_fec_ctype
                            
                            	Session identifier (ctype)
                            	**type**\:   :py:class:`MplsLibCEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.MplsLibCEnum>`
                            
                            .. attribute:: s2l_fec_dest
                            
                            	sub\-LSP destination address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: s2l_fec_extended_tunnel_id
                            
                            	Extended tunnel ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: s2l_fec_lsp_id
                            
                            	LSP ID
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: s2l_fec_p2mp_id
                            
                            	P2MP ID
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: s2l_fec_source
                            
                            	LSP source address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: s2l_fec_subgroup_id
                            
                            	sub\-LSP subgroup ID
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: s2l_fec_subgroup_originator
                            
                            	Subgroup Originator
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: s2l_fec_tunnel_id
                            
                            	Tunnel ID
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: s2l_fec_vrf
                            
                            	VRF; currently only for GMPLS tunnels
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'ip-bfd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.s2l_fec_ctype = None
                                self.s2l_fec_dest = None
                                self.s2l_fec_extended_tunnel_id = None
                                self.s2l_fec_lsp_id = None
                                self.s2l_fec_p2mp_id = None
                                self.s2l_fec_source = None
                                self.s2l_fec_subgroup_id = None
                                self.s2l_fec_subgroup_originator = None
                                self.s2l_fec_tunnel_id = None
                                self.s2l_fec_vrf = None

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:session-details/Cisco-IOS-XR-ip-bfd-oper:session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:session-key/Cisco-IOS-XR-ip-bfd-oper:bfdfec/Cisco-IOS-XR-ip-bfd-oper:te-s2l-fec'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.s2l_fec_ctype is not None:
                                    return True

                                if self.s2l_fec_dest is not None:
                                    return True

                                if self.s2l_fec_extended_tunnel_id is not None:
                                    return True

                                if self.s2l_fec_lsp_id is not None:
                                    return True

                                if self.s2l_fec_p2mp_id is not None:
                                    return True

                                if self.s2l_fec_source is not None:
                                    return True

                                if self.s2l_fec_subgroup_id is not None:
                                    return True

                                if self.s2l_fec_subgroup_originator is not None:
                                    return True

                                if self.s2l_fec_tunnel_id is not None:
                                    return True

                                if self.s2l_fec_vrf is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                                return meta._meta_table['Bfd.SessionDetails.SessionDetail.AssociationInformation.SessionKey.Bfdfec.TeS2LFec']['meta_info']

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:session-details/Cisco-IOS-XR-ip-bfd-oper:session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:session-key/Cisco-IOS-XR-ip-bfd-oper:bfdfec'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.bfdfe_ctype is not None:
                                return True

                            if self.dummy is not None and self.dummy._has_data():
                                return True

                            if self.te_s2l_fec is not None and self.te_s2l_fec._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                            return meta._meta_table['Bfd.SessionDetails.SessionDetail.AssociationInformation.SessionKey.Bfdfec']['meta_info']


                    class TargetAddress(object):
                        """
                        sbfd target address
                        
                        .. attribute:: afi
                        
                        	AFI
                        	**type**\:   :py:class:`BfdAfIdEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdAfIdEnum>`
                        
                        .. attribute:: dummy
                        
                        	No Address
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: ipv4
                        
                        	IPv4 address type
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: ipv6
                        
                        	IPv6 address type
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-bfd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.afi = None
                            self.dummy = None
                            self.ipv4 = None
                            self.ipv6 = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:session-details/Cisco-IOS-XR-ip-bfd-oper:session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:session-key/Cisco-IOS-XR-ip-bfd-oper:target-address'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.afi is not None:
                                return True

                            if self.dummy is not None:
                                return True

                            if self.ipv4 is not None:
                                return True

                            if self.ipv6 is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                            return meta._meta_table['Bfd.SessionDetails.SessionDetail.AssociationInformation.SessionKey.TargetAddress']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:session-details/Cisco-IOS-XR-ip-bfd-oper:session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:session-key'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.bfdfec is not None and self.bfdfec._has_data():
                            return True

                        if self.incoming_label is not None:
                            return True

                        if self.interface_name is not None:
                            return True

                        if self.ip_destination_address is not None and self.ip_destination_address._has_data():
                            return True

                        if self.ip_source_address is not None and self.ip_source_address._has_data():
                            return True

                        if self.sbfd_enabled is not None:
                            return True

                        if self.sbfd_target_type is not None:
                            return True

                        if self.session_key_type is not None:
                            return True

                        if self.target_address is not None and self.target_address._has_data():
                            return True

                        if self.vrf_name is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.SessionDetails.SessionDetail.AssociationInformation.SessionKey']['meta_info']


                class OwnerInformation(object):
                    """
                    Client applications owning the session
                    
                    .. attribute:: adjusted_detection_multiplier
                    
                    	Adjusted detection multiplier to compute detection time
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: adjusted_interval
                    
                    	Adjusted minimum transmit interval in milli\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: detection_multiplier
                    
                    	Client specified detection multiplier to compute detection time
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: interval
                    
                    	Client specified minimum transmit interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: name
                    
                    	Client process name
                    	**type**\:  str
                    
                    	**length:** 0..257
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.adjusted_detection_multiplier = None
                        self.adjusted_interval = None
                        self.detection_multiplier = None
                        self.interval = None
                        self.name = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:session-details/Cisco-IOS-XR-ip-bfd-oper:session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:owner-information'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.adjusted_detection_multiplier is not None:
                            return True

                        if self.adjusted_interval is not None:
                            return True

                        if self.detection_multiplier is not None:
                            return True

                        if self.interval is not None:
                            return True

                        if self.name is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.SessionDetails.SessionDetail.AssociationInformation.OwnerInformation']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:session-details/Cisco-IOS-XR-ip-bfd-oper:session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.local_discriminator is not None:
                        return True

                    if self.owner_information is not None:
                        for child_ref in self.owner_information:
                            if child_ref._has_data():
                                return True

                    if self.session_key is not None and self.session_key._has_data():
                        return True

                    if self.sessiontype is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.SessionDetails.SessionDetail.AssociationInformation']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:session-details/Cisco-IOS-XR-ip-bfd-oper:session-detail'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.association_information is not None:
                    for child_ref in self.association_information:
                        if child_ref._has_data():
                            return True

                if self.destination_address is not None:
                    return True

                if self.interface_name is not None:
                    return True

                if self.location is not None:
                    return True

                if self.lsp_ping_info is not None and self.lsp_ping_info._has_data():
                    return True

                if self.mp_download_state is not None and self.mp_download_state._has_data():
                    return True

                if self.owner_information is not None:
                    for child_ref in self.owner_information:
                        if child_ref._has_data():
                            return True

                if self.status_information is not None and self.status_information._has_data():
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                return meta._meta_table['Bfd.SessionDetails.SessionDetail']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:session-details'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.session_detail is not None:
                for child_ref in self.session_detail:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
            return meta._meta_table['Bfd.SessionDetails']['meta_info']


    class Ipv4SingleHopMultiPaths(object):
        """
        IPv4 single hop multipath
        
        .. attribute:: ipv4_single_hop_multi_path
        
        	IPv4 single hop multipath table
        	**type**\: list of    :py:class:`Ipv4SingleHopMultiPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopMultiPaths.Ipv4SingleHopMultiPath>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.ipv4_single_hop_multi_path = YList()
            self.ipv4_single_hop_multi_path.parent = self
            self.ipv4_single_hop_multi_path.name = 'ipv4_single_hop_multi_path'


        class Ipv4SingleHopMultiPath(object):
            """
            IPv4 single hop multipath table
            
            .. attribute:: destination_address
            
            	Destination Address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: incoming_label_xr
            
            	Incoming Label
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: interface_name
            
            	Interface Name
            	**type**\:  str
            
            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
            
            .. attribute:: local_discriminator
            
            	Session's Local discriminator
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: location
            
            	Location
            	**type**\:  str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: node_id
            
            	Location where session is housed
            	**type**\:  str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: session_interface_name
            
            	Interface name
            	**type**\:  str
            
            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
            
            .. attribute:: session_subtype
            
            	Session subtype
            	**type**\:  str
            
            .. attribute:: state
            
            	State
            	**type**\:   :py:class:`BfdMgmtSessionStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionStateEnum>`
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.destination_address = None
                self.incoming_label_xr = None
                self.interface_name = None
                self.local_discriminator = None
                self.location = None
                self.node_id = None
                self.session_interface_name = None
                self.session_subtype = None
                self.state = None

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-multi-paths/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-multi-path'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.destination_address is not None:
                    return True

                if self.incoming_label_xr is not None:
                    return True

                if self.interface_name is not None:
                    return True

                if self.local_discriminator is not None:
                    return True

                if self.location is not None:
                    return True

                if self.node_id is not None:
                    return True

                if self.session_interface_name is not None:
                    return True

                if self.session_subtype is not None:
                    return True

                if self.state is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                return meta._meta_table['Bfd.Ipv4SingleHopMultiPaths.Ipv4SingleHopMultiPath']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-multi-paths'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.ipv4_single_hop_multi_path is not None:
                for child_ref in self.ipv4_single_hop_multi_path:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
            return meta._meta_table['Bfd.Ipv4SingleHopMultiPaths']['meta_info']


    class Ipv4SingleHopSessionBriefs(object):
        """
        Table of brief information about all IPv4
        singlehop BFD sessions in the System
        
        .. attribute:: ipv4_single_hop_session_brief
        
        	Brief information for a single IPv4 singlehop BFD session
        	**type**\: list of    :py:class:`Ipv4SingleHopSessionBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopSessionBriefs.Ipv4SingleHopSessionBrief>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.ipv4_single_hop_session_brief = YList()
            self.ipv4_single_hop_session_brief.parent = self
            self.ipv4_single_hop_session_brief.name = 'ipv4_single_hop_session_brief'


        class Ipv4SingleHopSessionBrief(object):
            """
            Brief information for a single IPv4 singlehop
            BFD session
            
            .. attribute:: destination_address
            
            	Destination Address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: interface_name
            
            	Interface Name
            	**type**\:  str
            
            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
            
            .. attribute:: location
            
            	Location
            	**type**\:  str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: node_id
            
            	Location where session is housed
            	**type**\:  str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: session_flags
            
            	Session Flags
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: session_subtype
            
            	Session subtype
            	**type**\:  str
            
            .. attribute:: session_type
            
            	Session type
            	**type**\:   :py:class:`BfdSessionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdSessionEnum>`
            
            .. attribute:: state
            
            	State
            	**type**\:   :py:class:`BfdMgmtSessionStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionStateEnum>`
            
            .. attribute:: status_brief_information
            
            	Brief Status Information
            	**type**\:   :py:class:`StatusBriefInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopSessionBriefs.Ipv4SingleHopSessionBrief.StatusBriefInformation>`
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.destination_address = None
                self.interface_name = None
                self.location = None
                self.node_id = None
                self.session_flags = None
                self.session_subtype = None
                self.session_type = None
                self.state = None
                self.status_brief_information = Bfd.Ipv4SingleHopSessionBriefs.Ipv4SingleHopSessionBrief.StatusBriefInformation()
                self.status_brief_information.parent = self


            class StatusBriefInformation(object):
                """
                Brief Status Information
                
                .. attribute:: async_interval_multiplier
                
                	Async Interval and Detect Multiplier Information
                	**type**\:   :py:class:`AsyncIntervalMultiplier <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopSessionBriefs.Ipv4SingleHopSessionBrief.StatusBriefInformation.AsyncIntervalMultiplier>`
                
                .. attribute:: echo_interval_multiplier
                
                	Echo Interval and Detect Multiplier Information
                	**type**\:   :py:class:`EchoIntervalMultiplier <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopSessionBriefs.Ipv4SingleHopSessionBrief.StatusBriefInformation.EchoIntervalMultiplier>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.async_interval_multiplier = Bfd.Ipv4SingleHopSessionBriefs.Ipv4SingleHopSessionBrief.StatusBriefInformation.AsyncIntervalMultiplier()
                    self.async_interval_multiplier.parent = self
                    self.echo_interval_multiplier = Bfd.Ipv4SingleHopSessionBriefs.Ipv4SingleHopSessionBrief.StatusBriefInformation.EchoIntervalMultiplier()
                    self.echo_interval_multiplier.parent = self


                class AsyncIntervalMultiplier(object):
                    """
                    Async Interval and Detect Multiplier Information
                    
                    .. attribute:: detection_multiplier
                    
                    	Detection Multiplier
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: detection_time
                    
                    	Detection time in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: negotiated_local_transmit_interval
                    
                    	Negotiated local transmit interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: negotiated_remote_transmit_interval
                    
                    	Negotiated remote transmit interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.detection_multiplier = None
                        self.detection_time = None
                        self.negotiated_local_transmit_interval = None
                        self.negotiated_remote_transmit_interval = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-session-briefs/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-session-brief/Cisco-IOS-XR-ip-bfd-oper:status-brief-information/Cisco-IOS-XR-ip-bfd-oper:async-interval-multiplier'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.detection_multiplier is not None:
                            return True

                        if self.detection_time is not None:
                            return True

                        if self.negotiated_local_transmit_interval is not None:
                            return True

                        if self.negotiated_remote_transmit_interval is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv4SingleHopSessionBriefs.Ipv4SingleHopSessionBrief.StatusBriefInformation.AsyncIntervalMultiplier']['meta_info']


                class EchoIntervalMultiplier(object):
                    """
                    Echo Interval and Detect Multiplier Information
                    
                    .. attribute:: detection_multiplier
                    
                    	Detection Multiplier
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: detection_time
                    
                    	Detection time in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: negotiated_transmit_interval
                    
                    	Negotiated transmit interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.detection_multiplier = None
                        self.detection_time = None
                        self.negotiated_transmit_interval = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-session-briefs/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-session-brief/Cisco-IOS-XR-ip-bfd-oper:status-brief-information/Cisco-IOS-XR-ip-bfd-oper:echo-interval-multiplier'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.detection_multiplier is not None:
                            return True

                        if self.detection_time is not None:
                            return True

                        if self.negotiated_transmit_interval is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv4SingleHopSessionBriefs.Ipv4SingleHopSessionBrief.StatusBriefInformation.EchoIntervalMultiplier']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-session-briefs/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-session-brief/Cisco-IOS-XR-ip-bfd-oper:status-brief-information'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.async_interval_multiplier is not None and self.async_interval_multiplier._has_data():
                        return True

                    if self.echo_interval_multiplier is not None and self.echo_interval_multiplier._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.Ipv4SingleHopSessionBriefs.Ipv4SingleHopSessionBrief.StatusBriefInformation']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-session-briefs/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-session-brief'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.destination_address is not None:
                    return True

                if self.interface_name is not None:
                    return True

                if self.location is not None:
                    return True

                if self.node_id is not None:
                    return True

                if self.session_flags is not None:
                    return True

                if self.session_subtype is not None:
                    return True

                if self.session_type is not None:
                    return True

                if self.state is not None:
                    return True

                if self.status_brief_information is not None and self.status_brief_information._has_data():
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                return meta._meta_table['Bfd.Ipv4SingleHopSessionBriefs.Ipv4SingleHopSessionBrief']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-single-hop-session-briefs'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.ipv4_single_hop_session_brief is not None:
                for child_ref in self.ipv4_single_hop_session_brief:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
            return meta._meta_table['Bfd.Ipv4SingleHopSessionBriefs']['meta_info']


    class Ipv6MultiHopCounters(object):
        """
        IPv6 multiple hop Counters
        
        .. attribute:: ipv6_multi_hop_packet_counters
        
        	Table of IPv6 multiple hop Packet counters
        	**type**\:   :py:class:`Ipv6MultiHopPacketCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopCounters.Ipv6MultiHopPacketCounters>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.ipv6_multi_hop_packet_counters = Bfd.Ipv6MultiHopCounters.Ipv6MultiHopPacketCounters()
            self.ipv6_multi_hop_packet_counters.parent = self


        class Ipv6MultiHopPacketCounters(object):
            """
            Table of IPv6 multiple hop Packet counters
            
            .. attribute:: ipv6_multi_hop_packet_counter
            
            	IPv4 multiple hop Packet counters
            	**type**\: list of    :py:class:`Ipv6MultiHopPacketCounter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopCounters.Ipv6MultiHopPacketCounters.Ipv6MultiHopPacketCounter>`
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.ipv6_multi_hop_packet_counter = YList()
                self.ipv6_multi_hop_packet_counter.parent = self
                self.ipv6_multi_hop_packet_counter.name = 'ipv6_multi_hop_packet_counter'


            class Ipv6MultiHopPacketCounter(object):
                """
                IPv4 multiple hop Packet counters
                
                .. attribute:: destination_address
                
                	Destination Address
                	**type**\: one of the below types:
                
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                
                ----
                	**type**\:  str
                
                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                
                
                ----
                .. attribute:: display_type
                
                	Packet Display Type
                	**type**\:   :py:class:`BfdMgmtPktDisplayEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtPktDisplayEnum>`
                
                .. attribute:: echo_receive_count
                
                	Number of echo packets received
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: echo_transmit_count
                
                	Number of echo packets transmitted
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: hello_receive_count
                
                	Number of Hellos received
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: hello_transmit_count
                
                	Number of Hellos transmitted
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: location
                
                	Location
                	**type**\:  str
                
                	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
                
                .. attribute:: source_address
                
                	Source Address
                	**type**\: one of the below types:
                
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                
                ----
                	**type**\:  str
                
                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                
                
                ----
                .. attribute:: vrf_name
                
                	VRF name
                	**type**\:  str
                
                	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.destination_address = None
                    self.display_type = None
                    self.echo_receive_count = None
                    self.echo_transmit_count = None
                    self.hello_receive_count = None
                    self.hello_transmit_count = None
                    self.location = None
                    self.source_address = None
                    self.vrf_name = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-counters/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-packet-counters/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-packet-counter'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.destination_address is not None:
                        return True

                    if self.display_type is not None:
                        return True

                    if self.echo_receive_count is not None:
                        return True

                    if self.echo_transmit_count is not None:
                        return True

                    if self.hello_receive_count is not None:
                        return True

                    if self.hello_transmit_count is not None:
                        return True

                    if self.location is not None:
                        return True

                    if self.source_address is not None:
                        return True

                    if self.vrf_name is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.Ipv6MultiHopCounters.Ipv6MultiHopPacketCounters.Ipv6MultiHopPacketCounter']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-counters/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-packet-counters'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.ipv6_multi_hop_packet_counter is not None:
                    for child_ref in self.ipv6_multi_hop_packet_counter:
                        if child_ref._has_data():
                            return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                return meta._meta_table['Bfd.Ipv6MultiHopCounters.Ipv6MultiHopPacketCounters']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-multi-hop-counters'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.ipv6_multi_hop_packet_counters is not None and self.ipv6_multi_hop_packet_counters._has_data():
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
            return meta._meta_table['Bfd.Ipv6MultiHopCounters']['meta_info']


    class Ipv6SingleHopLocationSummaries(object):
        """
        Table of summary information about BFD IPv6
        singlehop sessions per location
        
        .. attribute:: ipv6_single_hop_location_summary
        
        	Summary information for BFD IPv6 singlehop sessions for location
        	**type**\: list of    :py:class:`Ipv6SingleHopLocationSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopLocationSummaries.Ipv6SingleHopLocationSummary>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.ipv6_single_hop_location_summary = YList()
            self.ipv6_single_hop_location_summary.parent = self
            self.ipv6_single_hop_location_summary.name = 'ipv6_single_hop_location_summary'


        class Ipv6SingleHopLocationSummary(object):
            """
            Summary information for BFD IPv6 singlehop
            sessions for location
            
            .. attribute:: location_name  <key>
            
            	Location Name
            	**type**\:  str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            .. attribute:: session_state
            
            	Statistics of states for sessions
            	**type**\:   :py:class:`SessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopLocationSummaries.Ipv6SingleHopLocationSummary.SessionState>`
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.location_name = None
                self.session_state = Bfd.Ipv6SingleHopLocationSummaries.Ipv6SingleHopLocationSummary.SessionState()
                self.session_state.parent = self


            class SessionState(object):
                """
                Statistics of states for sessions
                
                .. attribute:: down_count
                
                	Number of sessions in down state
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: retry_count
                
                	Number of sessions in retry state
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: standby_count
                
                	Number of sessions in standby state
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: total_count
                
                	Number of sessions in database
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: unknown_count
                
                	Number of sessions in unknown state
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: up_count
                
                	Number of sessions in up state
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.down_count = None
                    self.retry_count = None
                    self.standby_count = None
                    self.total_count = None
                    self.unknown_count = None
                    self.up_count = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ip-bfd-oper:session-state'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.down_count is not None:
                        return True

                    if self.retry_count is not None:
                        return True

                    if self.standby_count is not None:
                        return True

                    if self.total_count is not None:
                        return True

                    if self.unknown_count is not None:
                        return True

                    if self.up_count is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.Ipv6SingleHopLocationSummaries.Ipv6SingleHopLocationSummary.SessionState']['meta_info']

            @property
            def _common_path(self):
                if self.location_name is None:
                    raise YPYModelError('Key property location_name is None')

                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-location-summaries/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-location-summary[Cisco-IOS-XR-ip-bfd-oper:location-name = ' + str(self.location_name) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.location_name is not None:
                    return True

                if self.session_state is not None and self.session_state._has_data():
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                return meta._meta_table['Bfd.Ipv6SingleHopLocationSummaries.Ipv6SingleHopLocationSummary']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-location-summaries'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.ipv6_single_hop_location_summary is not None:
                for child_ref in self.ipv6_single_hop_location_summary:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
            return meta._meta_table['Bfd.Ipv6SingleHopLocationSummaries']['meta_info']


    class LabelCounters(object):
        """
        Label Counters
        
        .. attribute:: label_packet_counters
        
        	Table of Label Packet counters
        	**type**\:   :py:class:`LabelPacketCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelCounters.LabelPacketCounters>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.label_packet_counters = Bfd.LabelCounters.LabelPacketCounters()
            self.label_packet_counters.parent = self


        class LabelPacketCounters(object):
            """
            Table of Label Packet counters
            
            .. attribute:: label_packet_counter
            
            	Interface Label Packet counters
            	**type**\: list of    :py:class:`LabelPacketCounter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelCounters.LabelPacketCounters.LabelPacketCounter>`
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.label_packet_counter = YList()
                self.label_packet_counter.parent = self
                self.label_packet_counter.name = 'label_packet_counter'


            class LabelPacketCounter(object):
                """
                Interface Label Packet counters
                
                .. attribute:: display_type
                
                	Packet Display Type
                	**type**\:   :py:class:`BfdMgmtPktDisplayEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtPktDisplayEnum>`
                
                .. attribute:: echo_receive_count
                
                	Number of echo packets received
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: echo_transmit_count
                
                	Number of echo packets transmitted
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: hello_receive_count
                
                	Number of Hellos received
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: hello_transmit_count
                
                	Number of Hellos transmitted
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: interface_name
                
                	Interface Name
                	**type**\:  str
                
                	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                
                .. attribute:: location
                
                	Location
                	**type**\:  str
                
                	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.display_type = None
                    self.echo_receive_count = None
                    self.echo_transmit_count = None
                    self.hello_receive_count = None
                    self.hello_transmit_count = None
                    self.interface_name = None
                    self.location = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:label-counters/Cisco-IOS-XR-ip-bfd-oper:label-packet-counters/Cisco-IOS-XR-ip-bfd-oper:label-packet-counter'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.display_type is not None:
                        return True

                    if self.echo_receive_count is not None:
                        return True

                    if self.echo_transmit_count is not None:
                        return True

                    if self.hello_receive_count is not None:
                        return True

                    if self.hello_transmit_count is not None:
                        return True

                    if self.interface_name is not None:
                        return True

                    if self.location is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.LabelCounters.LabelPacketCounters.LabelPacketCounter']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:label-counters/Cisco-IOS-XR-ip-bfd-oper:label-packet-counters'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.label_packet_counter is not None:
                    for child_ref in self.label_packet_counter:
                        if child_ref._has_data():
                            return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                return meta._meta_table['Bfd.LabelCounters.LabelPacketCounters']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:label-counters'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.label_packet_counters is not None and self.label_packet_counters._has_data():
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
            return meta._meta_table['Bfd.LabelCounters']['meta_info']


    class Ipv4BfDoMplsteHeadSessionDetails(object):
        """
        Table of detailed information about all IPv4 BFD
        over MPLS\-TE Head sessions in the System
        
        .. attribute:: ipv4bf_do_mplste_head_session_detail
        
        	Detailed information for a single IPv4 BFD over MPLS\-TE head session
        	**type**\: list of    :py:class:`Ipv4BfDoMplsteHeadSessionDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.ipv4bf_do_mplste_head_session_detail = YList()
            self.ipv4bf_do_mplste_head_session_detail.parent = self
            self.ipv4bf_do_mplste_head_session_detail.name = 'ipv4bf_do_mplste_head_session_detail'


        class Ipv4BfDoMplsteHeadSessionDetail(object):
            """
            Detailed information for a single IPv4 BFD over
            MPLS\-TE head session
            
            .. attribute:: association_information
            
            	Association session information
            	**type**\: list of    :py:class:`AssociationInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.AssociationInformation>`
            
            .. attribute:: fe_ctype
            
            	FEC Type
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: fec_ctype
            
            	FEC C Type
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: fec_destination
            
            	FEC Destination
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: fec_extended_tunnel_id
            
            	FEC Extended Tunnel ID
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: fec_source
            
            	FEC Source
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: fec_subgroup_id
            
            	FEC Subgroup ID
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: fec_subgroup_originator
            
            	FEC Subgroup originator
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: fec_tunnel_id
            
            	FEC Tunnel ID
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: feclspid
            
            	FEC LSP ID
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: fecp2mpid
            
            	FEC P2MP ID
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: incoming_label
            
            	Incoming Label
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: interface_name
            
            	Interface Name
            	**type**\:  str
            
            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
            
            .. attribute:: location
            
            	Location
            	**type**\:  str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: lsp_ping_info
            
            	LSP Ping Info
            	**type**\:   :py:class:`LspPingInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.LspPingInfo>`
            
            .. attribute:: mp_download_state
            
            	MP Dowload State
            	**type**\:   :py:class:`MpDownloadState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.MpDownloadState>`
            
            .. attribute:: owner_information
            
            	Client applications owning the session
            	**type**\: list of    :py:class:`OwnerInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.OwnerInformation>`
            
            .. attribute:: status_information
            
            	Session status information
            	**type**\:   :py:class:`StatusInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation>`
            
            .. attribute:: vrf_name
            
            	VRF name
            	**type**\:  str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.association_information = YList()
                self.association_information.parent = self
                self.association_information.name = 'association_information'
                self.fe_ctype = None
                self.fec_ctype = None
                self.fec_destination = None
                self.fec_extended_tunnel_id = None
                self.fec_source = None
                self.fec_subgroup_id = None
                self.fec_subgroup_originator = None
                self.fec_tunnel_id = None
                self.feclspid = None
                self.fecp2mpid = None
                self.incoming_label = None
                self.interface_name = None
                self.location = None
                self.lsp_ping_info = Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.LspPingInfo()
                self.lsp_ping_info.parent = self
                self.mp_download_state = Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.MpDownloadState()
                self.mp_download_state.parent = self
                self.owner_information = YList()
                self.owner_information.parent = self
                self.owner_information.name = 'owner_information'
                self.status_information = Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation()
                self.status_information.parent = self
                self.vrf_name = None


            class StatusInformation(object):
                """
                Session status information
                
                .. attribute:: async_receive_statistics
                
                	Statistics of Interval between Async Packets Received (in milli\-seconds)
                	**type**\:   :py:class:`AsyncReceiveStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.AsyncReceiveStatistics>`
                
                .. attribute:: async_transmit_statistics
                
                	Statistics of Interval between Async Packets Transmitted (in milli\-seconds)
                	**type**\:   :py:class:`AsyncTransmitStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.AsyncTransmitStatistics>`
                
                .. attribute:: desired_minimum_echo_transmit_interval
                
                	Desired minimum echo transmit interval in milli\-seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: millisecond
                
                .. attribute:: echo_received_statistics
                
                	Statistics of Interval between Echo Packets Received (in milli\-seconds)
                	**type**\:   :py:class:`EchoReceivedStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.EchoReceivedStatistics>`
                
                .. attribute:: echo_transmit_statistics
                
                	Statistics of Interval between Echo Packets Transmitted (in milli\-seconds)
                	**type**\:   :py:class:`EchoTransmitStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.EchoTransmitStatistics>`
                
                .. attribute:: internal_label
                
                	Internal Label
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: last_state_change
                
                	Time since last state change
                	**type**\:   :py:class:`LastStateChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.LastStateChange>`
                
                .. attribute:: latency_average
                
                	Average value of Latency (in micro\-seconds)
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: microsecond
                
                .. attribute:: latency_maximum
                
                	Maximum value of Latency (in micro\-seconds)
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: microsecond
                
                .. attribute:: latency_minimum
                
                	Minimum value of Latency (in micro\-seconds)
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: microsecond
                
                .. attribute:: latency_number
                
                	Number of Latency Samples. Time between Transmit and Receive
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: local_discriminator
                
                	Session's Local discriminator
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: node_id
                
                	Location where session is housed
                	**type**\:  str
                
                	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
                
                .. attribute:: receive_packet
                
                	Receive Packet
                	**type**\:   :py:class:`ReceivePacket <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.ReceivePacket>`
                
                .. attribute:: remote_discriminator
                
                	Session's Remote discriminator
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: remote_negotiated_interval
                
                	Remote Negotiated Interval in milli\-seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: millisecond
                
                .. attribute:: session_subtype
                
                	Session subtype
                	**type**\:  str
                
                .. attribute:: sessiontype
                
                	Session type
                	**type**\:   :py:class:`BfdSessionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdSessionEnum>`
                
                .. attribute:: source_address
                
                	Source address
                	**type**\:   :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.SourceAddress>`
                
                .. attribute:: state
                
                	State
                	**type**\:   :py:class:`BfdMgmtSessionStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionStateEnum>`
                
                .. attribute:: status_brief_information
                
                	Brief Status Information
                	**type**\:   :py:class:`StatusBriefInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.StatusBriefInformation>`
                
                .. attribute:: to_up_state_count
                
                	Number of times session state went to UP
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: transmit_packet
                
                	Transmit Packet
                	**type**\:   :py:class:`TransmitPacket <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.TransmitPacket>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.async_receive_statistics = Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.AsyncReceiveStatistics()
                    self.async_receive_statistics.parent = self
                    self.async_transmit_statistics = Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.AsyncTransmitStatistics()
                    self.async_transmit_statistics.parent = self
                    self.desired_minimum_echo_transmit_interval = None
                    self.echo_received_statistics = Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.EchoReceivedStatistics()
                    self.echo_received_statistics.parent = self
                    self.echo_transmit_statistics = Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.EchoTransmitStatistics()
                    self.echo_transmit_statistics.parent = self
                    self.internal_label = None
                    self.last_state_change = Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.LastStateChange()
                    self.last_state_change.parent = self
                    self.latency_average = None
                    self.latency_maximum = None
                    self.latency_minimum = None
                    self.latency_number = None
                    self.local_discriminator = None
                    self.node_id = None
                    self.receive_packet = Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.ReceivePacket()
                    self.receive_packet.parent = self
                    self.remote_discriminator = None
                    self.remote_negotiated_interval = None
                    self.session_subtype = None
                    self.sessiontype = None
                    self.source_address = Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.SourceAddress()
                    self.source_address.parent = self
                    self.state = None
                    self.status_brief_information = Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.StatusBriefInformation()
                    self.status_brief_information.parent = self
                    self.to_up_state_count = None
                    self.transmit_packet = Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.TransmitPacket()
                    self.transmit_packet.parent = self


                class SourceAddress(object):
                    """
                    Source address
                    
                    .. attribute:: afi
                    
                    	AFI
                    	**type**\:   :py:class:`BfdAfIdEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdAfIdEnum>`
                    
                    .. attribute:: dummy
                    
                    	No Address
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    .. attribute:: ipv4
                    
                    	IPv4 address type
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: ipv6
                    
                    	IPv6 address type
                    	**type**\:  str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.afi = None
                        self.dummy = None
                        self.ipv4 = None
                        self.ipv6 = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:source-address'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.afi is not None:
                            return True

                        if self.dummy is not None:
                            return True

                        if self.ipv4 is not None:
                            return True

                        if self.ipv6 is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.SourceAddress']['meta_info']


                class LastStateChange(object):
                    """
                    Time since last state change
                    
                    .. attribute:: days
                    
                    	Number of days since last session state transition
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: day
                    
                    .. attribute:: hours
                    
                    	Number of hours since last session state transition
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    	**units**\: hour
                    
                    .. attribute:: minutes
                    
                    	Number of mins since last session state transition
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    	**units**\: minute
                    
                    .. attribute:: seconds
                    
                    	Number of seconds since last session state transition
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    	**units**\: second
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.days = None
                        self.hours = None
                        self.minutes = None
                        self.seconds = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:last-state-change'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.days is not None:
                            return True

                        if self.hours is not None:
                            return True

                        if self.minutes is not None:
                            return True

                        if self.seconds is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.LastStateChange']['meta_info']


                class TransmitPacket(object):
                    """
                    Transmit Packet
                    
                    .. attribute:: authentication_present
                    
                    	Requesting authentication for the session
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: control_plane_independent
                    
                    	BFD implementation does not share fate with its control plane
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: demand
                    
                    	Demand mode
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: desired_minimum_transmit_interval
                    
                    	Desired minimum transmit interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: detection_multiplier
                    
                    	Detection Multiplier
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: diagnostic
                    
                    	Diagnostic
                    	**type**\:   :py:class:`BfdMgmtSessionDiagEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionDiagEnum>`
                    
                    .. attribute:: final
                    
                    	Final bit
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: ihear_you
                    
                    	I Hear You (v0)
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: length
                    
                    	Length
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: my_discriminator
                    
                    	My Discriminator
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: poll
                    
                    	Poll bit
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: required_minimum_echo_receive_interval
                    
                    	Required echo receive interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: required_minimum_receive_interval
                    
                    	Required receive interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: state
                    
                    	State (v1)
                    	**type**\:   :py:class:`BfdMgmtSessionStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionStateEnum>`
                    
                    .. attribute:: version
                    
                    	Version
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    .. attribute:: your_discriminator
                    
                    	Your Discriminator
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.authentication_present = None
                        self.control_plane_independent = None
                        self.demand = None
                        self.desired_minimum_transmit_interval = None
                        self.detection_multiplier = None
                        self.diagnostic = None
                        self.final = None
                        self.ihear_you = None
                        self.length = None
                        self.my_discriminator = None
                        self.poll = None
                        self.required_minimum_echo_receive_interval = None
                        self.required_minimum_receive_interval = None
                        self.state = None
                        self.version = None
                        self.your_discriminator = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:transmit-packet'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.authentication_present is not None:
                            return True

                        if self.control_plane_independent is not None:
                            return True

                        if self.demand is not None:
                            return True

                        if self.desired_minimum_transmit_interval is not None:
                            return True

                        if self.detection_multiplier is not None:
                            return True

                        if self.diagnostic is not None:
                            return True

                        if self.final is not None:
                            return True

                        if self.ihear_you is not None:
                            return True

                        if self.length is not None:
                            return True

                        if self.my_discriminator is not None:
                            return True

                        if self.poll is not None:
                            return True

                        if self.required_minimum_echo_receive_interval is not None:
                            return True

                        if self.required_minimum_receive_interval is not None:
                            return True

                        if self.state is not None:
                            return True

                        if self.version is not None:
                            return True

                        if self.your_discriminator is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.TransmitPacket']['meta_info']


                class ReceivePacket(object):
                    """
                    Receive Packet
                    
                    .. attribute:: authentication_present
                    
                    	Requesting authentication for the session
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: control_plane_independent
                    
                    	BFD implementation does not share fate with its control plane
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: demand
                    
                    	Demand mode
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: desired_minimum_transmit_interval
                    
                    	Desired minimum transmit interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: detection_multiplier
                    
                    	Detection Multiplier
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: diagnostic
                    
                    	Diagnostic
                    	**type**\:   :py:class:`BfdMgmtSessionDiagEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionDiagEnum>`
                    
                    .. attribute:: final
                    
                    	Final bit
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: ihear_you
                    
                    	I Hear You (v0)
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: length
                    
                    	Length
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: my_discriminator
                    
                    	My Discriminator
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: poll
                    
                    	Poll bit
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: required_minimum_echo_receive_interval
                    
                    	Required echo receive interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: required_minimum_receive_interval
                    
                    	Required receive interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: state
                    
                    	State (v1)
                    	**type**\:   :py:class:`BfdMgmtSessionStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionStateEnum>`
                    
                    .. attribute:: version
                    
                    	Version
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    .. attribute:: your_discriminator
                    
                    	Your Discriminator
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.authentication_present = None
                        self.control_plane_independent = None
                        self.demand = None
                        self.desired_minimum_transmit_interval = None
                        self.detection_multiplier = None
                        self.diagnostic = None
                        self.final = None
                        self.ihear_you = None
                        self.length = None
                        self.my_discriminator = None
                        self.poll = None
                        self.required_minimum_echo_receive_interval = None
                        self.required_minimum_receive_interval = None
                        self.state = None
                        self.version = None
                        self.your_discriminator = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:receive-packet'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.authentication_present is not None:
                            return True

                        if self.control_plane_independent is not None:
                            return True

                        if self.demand is not None:
                            return True

                        if self.desired_minimum_transmit_interval is not None:
                            return True

                        if self.detection_multiplier is not None:
                            return True

                        if self.diagnostic is not None:
                            return True

                        if self.final is not None:
                            return True

                        if self.ihear_you is not None:
                            return True

                        if self.length is not None:
                            return True

                        if self.my_discriminator is not None:
                            return True

                        if self.poll is not None:
                            return True

                        if self.required_minimum_echo_receive_interval is not None:
                            return True

                        if self.required_minimum_receive_interval is not None:
                            return True

                        if self.state is not None:
                            return True

                        if self.version is not None:
                            return True

                        if self.your_discriminator is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.ReceivePacket']['meta_info']


                class StatusBriefInformation(object):
                    """
                    Brief Status Information
                    
                    .. attribute:: async_interval_multiplier
                    
                    	Async Interval and Detect Multiplier Information
                    	**type**\:   :py:class:`AsyncIntervalMultiplier <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.StatusBriefInformation.AsyncIntervalMultiplier>`
                    
                    .. attribute:: echo_interval_multiplier
                    
                    	Echo Interval and Detect Multiplier Information
                    	**type**\:   :py:class:`EchoIntervalMultiplier <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.StatusBriefInformation.EchoIntervalMultiplier>`
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.async_interval_multiplier = Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.StatusBriefInformation.AsyncIntervalMultiplier()
                        self.async_interval_multiplier.parent = self
                        self.echo_interval_multiplier = Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.StatusBriefInformation.EchoIntervalMultiplier()
                        self.echo_interval_multiplier.parent = self


                    class AsyncIntervalMultiplier(object):
                        """
                        Async Interval and Detect Multiplier Information
                        
                        .. attribute:: detection_multiplier
                        
                        	Detection Multiplier
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: detection_time
                        
                        	Detection time in micro\-seconds
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        .. attribute:: negotiated_local_transmit_interval
                        
                        	Negotiated local transmit interval in micro\-seconds
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        .. attribute:: negotiated_remote_transmit_interval
                        
                        	Negotiated remote transmit interval in micro\-seconds
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        

                        """

                        _prefix = 'ip-bfd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.detection_multiplier = None
                            self.detection_time = None
                            self.negotiated_local_transmit_interval = None
                            self.negotiated_remote_transmit_interval = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:status-brief-information/Cisco-IOS-XR-ip-bfd-oper:async-interval-multiplier'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.detection_multiplier is not None:
                                return True

                            if self.detection_time is not None:
                                return True

                            if self.negotiated_local_transmit_interval is not None:
                                return True

                            if self.negotiated_remote_transmit_interval is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                            return meta._meta_table['Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.StatusBriefInformation.AsyncIntervalMultiplier']['meta_info']


                    class EchoIntervalMultiplier(object):
                        """
                        Echo Interval and Detect Multiplier Information
                        
                        .. attribute:: detection_multiplier
                        
                        	Detection Multiplier
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: detection_time
                        
                        	Detection time in micro\-seconds
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        .. attribute:: negotiated_transmit_interval
                        
                        	Negotiated transmit interval in micro\-seconds
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        

                        """

                        _prefix = 'ip-bfd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.detection_multiplier = None
                            self.detection_time = None
                            self.negotiated_transmit_interval = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:status-brief-information/Cisco-IOS-XR-ip-bfd-oper:echo-interval-multiplier'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.detection_multiplier is not None:
                                return True

                            if self.detection_time is not None:
                                return True

                            if self.negotiated_transmit_interval is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                            return meta._meta_table['Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.StatusBriefInformation.EchoIntervalMultiplier']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:status-brief-information'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.async_interval_multiplier is not None and self.async_interval_multiplier._has_data():
                            return True

                        if self.echo_interval_multiplier is not None and self.echo_interval_multiplier._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.StatusBriefInformation']['meta_info']


                class AsyncTransmitStatistics(object):
                    """
                    Statistics of Interval between Async Packets
                    Transmitted (in milli\-seconds)
                    
                    .. attribute:: average
                    
                    	Average of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: last
                    
                    	Time since last Transmit/Receive (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: maximum
                    
                    	Maximum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: minimum
                    
                    	Minimum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: number
                    
                    	Number of Interval Samples between Packets sent/received
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.average = None
                        self.last = None
                        self.maximum = None
                        self.minimum = None
                        self.number = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:async-transmit-statistics'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.average is not None:
                            return True

                        if self.last is not None:
                            return True

                        if self.maximum is not None:
                            return True

                        if self.minimum is not None:
                            return True

                        if self.number is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.AsyncTransmitStatistics']['meta_info']


                class AsyncReceiveStatistics(object):
                    """
                    Statistics of Interval between Async Packets
                    Received (in milli\-seconds)
                    
                    .. attribute:: average
                    
                    	Average of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: last
                    
                    	Time since last Transmit/Receive (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: maximum
                    
                    	Maximum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: minimum
                    
                    	Minimum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: number
                    
                    	Number of Interval Samples between Packets sent/received
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.average = None
                        self.last = None
                        self.maximum = None
                        self.minimum = None
                        self.number = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:async-receive-statistics'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.average is not None:
                            return True

                        if self.last is not None:
                            return True

                        if self.maximum is not None:
                            return True

                        if self.minimum is not None:
                            return True

                        if self.number is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.AsyncReceiveStatistics']['meta_info']


                class EchoTransmitStatistics(object):
                    """
                    Statistics of Interval between Echo Packets
                    Transmitted (in milli\-seconds)
                    
                    .. attribute:: average
                    
                    	Average of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: last
                    
                    	Time since last Transmit/Receive (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: maximum
                    
                    	Maximum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: minimum
                    
                    	Minimum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: number
                    
                    	Number of Interval Samples between Packets sent/received
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.average = None
                        self.last = None
                        self.maximum = None
                        self.minimum = None
                        self.number = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:echo-transmit-statistics'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.average is not None:
                            return True

                        if self.last is not None:
                            return True

                        if self.maximum is not None:
                            return True

                        if self.minimum is not None:
                            return True

                        if self.number is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.EchoTransmitStatistics']['meta_info']


                class EchoReceivedStatistics(object):
                    """
                    Statistics of Interval between Echo Packets
                    Received (in milli\-seconds)
                    
                    .. attribute:: average
                    
                    	Average of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: last
                    
                    	Time since last Transmit/Receive (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: maximum
                    
                    	Maximum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: minimum
                    
                    	Minimum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: number
                    
                    	Number of Interval Samples between Packets sent/received
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.average = None
                        self.last = None
                        self.maximum = None
                        self.minimum = None
                        self.number = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information/Cisco-IOS-XR-ip-bfd-oper:echo-received-statistics'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.average is not None:
                            return True

                        if self.last is not None:
                            return True

                        if self.maximum is not None:
                            return True

                        if self.minimum is not None:
                            return True

                        if self.number is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.EchoReceivedStatistics']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-session-detail/Cisco-IOS-XR-ip-bfd-oper:status-information'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.async_receive_statistics is not None and self.async_receive_statistics._has_data():
                        return True

                    if self.async_transmit_statistics is not None and self.async_transmit_statistics._has_data():
                        return True

                    if self.desired_minimum_echo_transmit_interval is not None:
                        return True

                    if self.echo_received_statistics is not None and self.echo_received_statistics._has_data():
                        return True

                    if self.echo_transmit_statistics is not None and self.echo_transmit_statistics._has_data():
                        return True

                    if self.internal_label is not None:
                        return True

                    if self.last_state_change is not None and self.last_state_change._has_data():
                        return True

                    if self.latency_average is not None:
                        return True

                    if self.latency_maximum is not None:
                        return True

                    if self.latency_minimum is not None:
                        return True

                    if self.latency_number is not None:
                        return True

                    if self.local_discriminator is not None:
                        return True

                    if self.node_id is not None:
                        return True

                    if self.receive_packet is not None and self.receive_packet._has_data():
                        return True

                    if self.remote_discriminator is not None:
                        return True

                    if self.remote_negotiated_interval is not None:
                        return True

                    if self.session_subtype is not None:
                        return True

                    if self.sessiontype is not None:
                        return True

                    if self.source_address is not None and self.source_address._has_data():
                        return True

                    if self.state is not None:
                        return True

                    if self.status_brief_information is not None and self.status_brief_information._has_data():
                        return True

                    if self.to_up_state_count is not None:
                        return True

                    if self.transmit_packet is not None and self.transmit_packet._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation']['meta_info']


            class MpDownloadState(object):
                """
                MP Dowload State
                
                .. attribute:: change_time
                
                	Change time
                	**type**\:   :py:class:`ChangeTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.MpDownloadState.ChangeTime>`
                
                .. attribute:: mp_download_state
                
                	MP Download State
                	**type**\:   :py:class:`BfdMpDownloadStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMpDownloadStateEnum>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.change_time = Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.MpDownloadState.ChangeTime()
                    self.change_time.parent = self
                    self.mp_download_state = None


                class ChangeTime(object):
                    """
                    Change time
                    
                    .. attribute:: nanoseconds
                    
                    	nanoseconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: nanosecond
                    
                    .. attribute:: seconds
                    
                    	seconds
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: second
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.nanoseconds = None
                        self.seconds = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-session-detail/Cisco-IOS-XR-ip-bfd-oper:mp-download-state/Cisco-IOS-XR-ip-bfd-oper:change-time'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.nanoseconds is not None:
                            return True

                        if self.seconds is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.MpDownloadState.ChangeTime']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-session-detail/Cisco-IOS-XR-ip-bfd-oper:mp-download-state'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.change_time is not None and self.change_time._has_data():
                        return True

                    if self.mp_download_state is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.MpDownloadState']['meta_info']


            class LspPingInfo(object):
                """
                LSP Ping Info
                
                .. attribute:: lsp_ping_rx_count
                
                	LSP Ping numer of times received
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_ping_rx_last_code
                
                	LSP Ping Rx Last Code
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: lsp_ping_rx_last_discr
                
                	LSP Ping Rx last received discriminator
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_ping_rx_last_output
                
                	LSP Ping Rx Last Output
                	**type**\:  str
                
                .. attribute:: lsp_ping_rx_last_subcode
                
                	LSP Ping Rx Last Subcode
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: lsp_ping_rx_last_time
                
                	LSP Ping last received time
                	**type**\:   :py:class:`LspPingRxLastTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.LspPingInfo.LspPingRxLastTime>`
                
                .. attribute:: lsp_ping_tx_count
                
                	LSP Ping Tx count
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_ping_tx_error_count
                
                	LSP Ping Tx error count
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_ping_tx_last_error_rc
                
                	LSP Ping Tx last error
                	**type**\:  str
                
                .. attribute:: lsp_ping_tx_last_error_time
                
                	LSP Ping last error time
                	**type**\:   :py:class:`LspPingTxLastErrorTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.LspPingInfo.LspPingTxLastErrorTime>`
                
                .. attribute:: lsp_ping_tx_last_rc
                
                	LSP Ping Tx last result
                	**type**\:  str
                
                .. attribute:: lsp_ping_tx_last_time
                
                	LSP Ping last sent time
                	**type**\:   :py:class:`LspPingTxLastTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.LspPingInfo.LspPingTxLastTime>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.lsp_ping_rx_count = None
                    self.lsp_ping_rx_last_code = None
                    self.lsp_ping_rx_last_discr = None
                    self.lsp_ping_rx_last_output = None
                    self.lsp_ping_rx_last_subcode = None
                    self.lsp_ping_rx_last_time = Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.LspPingInfo.LspPingRxLastTime()
                    self.lsp_ping_rx_last_time.parent = self
                    self.lsp_ping_tx_count = None
                    self.lsp_ping_tx_error_count = None
                    self.lsp_ping_tx_last_error_rc = None
                    self.lsp_ping_tx_last_error_time = Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.LspPingInfo.LspPingTxLastErrorTime()
                    self.lsp_ping_tx_last_error_time.parent = self
                    self.lsp_ping_tx_last_rc = None
                    self.lsp_ping_tx_last_time = Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.LspPingInfo.LspPingTxLastTime()
                    self.lsp_ping_tx_last_time.parent = self


                class LspPingTxLastTime(object):
                    """
                    LSP Ping last sent time
                    
                    .. attribute:: nanoseconds
                    
                    	nanoseconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: nanosecond
                    
                    .. attribute:: seconds
                    
                    	seconds
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: second
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.nanoseconds = None
                        self.seconds = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-session-detail/Cisco-IOS-XR-ip-bfd-oper:lsp-ping-info/Cisco-IOS-XR-ip-bfd-oper:lsp-ping-tx-last-time'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.nanoseconds is not None:
                            return True

                        if self.seconds is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.LspPingInfo.LspPingTxLastTime']['meta_info']


                class LspPingTxLastErrorTime(object):
                    """
                    LSP Ping last error time
                    
                    .. attribute:: nanoseconds
                    
                    	nanoseconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: nanosecond
                    
                    .. attribute:: seconds
                    
                    	seconds
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: second
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.nanoseconds = None
                        self.seconds = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-session-detail/Cisco-IOS-XR-ip-bfd-oper:lsp-ping-info/Cisco-IOS-XR-ip-bfd-oper:lsp-ping-tx-last-error-time'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.nanoseconds is not None:
                            return True

                        if self.seconds is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.LspPingInfo.LspPingTxLastErrorTime']['meta_info']


                class LspPingRxLastTime(object):
                    """
                    LSP Ping last received time
                    
                    .. attribute:: nanoseconds
                    
                    	nanoseconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: nanosecond
                    
                    .. attribute:: seconds
                    
                    	seconds
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: second
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.nanoseconds = None
                        self.seconds = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-session-detail/Cisco-IOS-XR-ip-bfd-oper:lsp-ping-info/Cisco-IOS-XR-ip-bfd-oper:lsp-ping-rx-last-time'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.nanoseconds is not None:
                            return True

                        if self.seconds is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.LspPingInfo.LspPingRxLastTime']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-session-detail/Cisco-IOS-XR-ip-bfd-oper:lsp-ping-info'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.lsp_ping_rx_count is not None:
                        return True

                    if self.lsp_ping_rx_last_code is not None:
                        return True

                    if self.lsp_ping_rx_last_discr is not None:
                        return True

                    if self.lsp_ping_rx_last_output is not None:
                        return True

                    if self.lsp_ping_rx_last_subcode is not None:
                        return True

                    if self.lsp_ping_rx_last_time is not None and self.lsp_ping_rx_last_time._has_data():
                        return True

                    if self.lsp_ping_tx_count is not None:
                        return True

                    if self.lsp_ping_tx_error_count is not None:
                        return True

                    if self.lsp_ping_tx_last_error_rc is not None:
                        return True

                    if self.lsp_ping_tx_last_error_time is not None and self.lsp_ping_tx_last_error_time._has_data():
                        return True

                    if self.lsp_ping_tx_last_rc is not None:
                        return True

                    if self.lsp_ping_tx_last_time is not None and self.lsp_ping_tx_last_time._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.LspPingInfo']['meta_info']


            class OwnerInformation(object):
                """
                Client applications owning the session
                
                .. attribute:: adjusted_detection_multiplier
                
                	Adjusted detection multiplier to compute detection time
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: adjusted_interval
                
                	Adjusted minimum transmit interval in milli\-seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: millisecond
                
                .. attribute:: detection_multiplier
                
                	Client specified detection multiplier to compute detection time
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: interval
                
                	Client specified minimum transmit interval in micro\-seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: microsecond
                
                .. attribute:: name
                
                	Client process name
                	**type**\:  str
                
                	**length:** 0..257
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.adjusted_detection_multiplier = None
                    self.adjusted_interval = None
                    self.detection_multiplier = None
                    self.interval = None
                    self.name = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-session-detail/Cisco-IOS-XR-ip-bfd-oper:owner-information'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.adjusted_detection_multiplier is not None:
                        return True

                    if self.adjusted_interval is not None:
                        return True

                    if self.detection_multiplier is not None:
                        return True

                    if self.interval is not None:
                        return True

                    if self.name is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.OwnerInformation']['meta_info']


            class AssociationInformation(object):
                """
                Association session information
                
                .. attribute:: local_discriminator
                
                	Session's Local discriminator
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: owner_information
                
                	Client applications owning the session
                	**type**\: list of    :py:class:`OwnerInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.AssociationInformation.OwnerInformation>`
                
                .. attribute:: session_key
                
                	Session Key
                	**type**\:   :py:class:`SessionKey <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.AssociationInformation.SessionKey>`
                
                .. attribute:: sessiontype
                
                	Session type
                	**type**\:   :py:class:`BfdSessionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdSessionEnum>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.local_discriminator = None
                    self.owner_information = YList()
                    self.owner_information.parent = self
                    self.owner_information.name = 'owner_information'
                    self.session_key = Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.AssociationInformation.SessionKey()
                    self.session_key.parent = self
                    self.sessiontype = None


                class SessionKey(object):
                    """
                    Session Key
                    
                    .. attribute:: bfdfec
                    
                    	Union of FECs
                    	**type**\:   :py:class:`Bfdfec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.AssociationInformation.SessionKey.Bfdfec>`
                    
                    .. attribute:: incoming_label
                    
                    	Incoming Label
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: interface_name
                    
                    	Session Interface Name
                    	**type**\:  str
                    
                    	**length:** 0..64
                    
                    .. attribute:: ip_destination_address
                    
                    	IPv4/v6 dest address
                    	**type**\:   :py:class:`IpDestinationAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.AssociationInformation.SessionKey.IpDestinationAddress>`
                    
                    .. attribute:: ip_source_address
                    
                    	IPv4/v6 source address
                    	**type**\:   :py:class:`IpSourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.AssociationInformation.SessionKey.IpSourceAddress>`
                    
                    .. attribute:: sbfd_enabled
                    
                    	SBFD enable flag
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: sbfd_target_type
                    
                    	SBFD target type
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: session_key_type
                    
                    	Session Key Type
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: target_address
                    
                    	sbfd target address
                    	**type**\:   :py:class:`TargetAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.AssociationInformation.SessionKey.TargetAddress>`
                    
                    .. attribute:: vrf_name
                    
                    	Session VRF Name
                    	**type**\:  str
                    
                    	**length:** 0..120
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.bfdfec = Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.AssociationInformation.SessionKey.Bfdfec()
                        self.bfdfec.parent = self
                        self.incoming_label = None
                        self.interface_name = None
                        self.ip_destination_address = Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.AssociationInformation.SessionKey.IpDestinationAddress()
                        self.ip_destination_address.parent = self
                        self.ip_source_address = Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.AssociationInformation.SessionKey.IpSourceAddress()
                        self.ip_source_address.parent = self
                        self.sbfd_enabled = None
                        self.sbfd_target_type = None
                        self.session_key_type = None
                        self.target_address = Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.AssociationInformation.SessionKey.TargetAddress()
                        self.target_address.parent = self
                        self.vrf_name = None


                    class IpDestinationAddress(object):
                        """
                        IPv4/v6 dest address
                        
                        .. attribute:: afi
                        
                        	AFI
                        	**type**\:   :py:class:`BfdAfIdEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdAfIdEnum>`
                        
                        .. attribute:: dummy
                        
                        	No Address
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: ipv4
                        
                        	IPv4 address type
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: ipv6
                        
                        	IPv6 address type
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-bfd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.afi = None
                            self.dummy = None
                            self.ipv4 = None
                            self.ipv6 = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:session-key/Cisco-IOS-XR-ip-bfd-oper:ip-destination-address'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.afi is not None:
                                return True

                            if self.dummy is not None:
                                return True

                            if self.ipv4 is not None:
                                return True

                            if self.ipv6 is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                            return meta._meta_table['Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.AssociationInformation.SessionKey.IpDestinationAddress']['meta_info']


                    class IpSourceAddress(object):
                        """
                        IPv4/v6 source address
                        
                        .. attribute:: afi
                        
                        	AFI
                        	**type**\:   :py:class:`BfdAfIdEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdAfIdEnum>`
                        
                        .. attribute:: dummy
                        
                        	No Address
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: ipv4
                        
                        	IPv4 address type
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: ipv6
                        
                        	IPv6 address type
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-bfd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.afi = None
                            self.dummy = None
                            self.ipv4 = None
                            self.ipv6 = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:session-key/Cisco-IOS-XR-ip-bfd-oper:ip-source-address'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.afi is not None:
                                return True

                            if self.dummy is not None:
                                return True

                            if self.ipv4 is not None:
                                return True

                            if self.ipv6 is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                            return meta._meta_table['Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.AssociationInformation.SessionKey.IpSourceAddress']['meta_info']


                    class Bfdfec(object):
                        """
                        Union of FECs
                        
                        .. attribute:: bfdfe_ctype
                        
                        	BFDFECType
                        	**type**\:   :py:class:`BfdApiFecEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdApiFecEnum>`
                        
                        .. attribute:: dummy
                        
                        	dummy
                        	**type**\:   :py:class:`Dummy <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.AssociationInformation.SessionKey.Bfdfec.Dummy>`
                        
                        .. attribute:: te_s2l_fec
                        
                        	te s2l fec
                        	**type**\:   :py:class:`TeS2LFec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.AssociationInformation.SessionKey.Bfdfec.TeS2LFec>`
                        
                        

                        """

                        _prefix = 'ip-bfd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.bfdfe_ctype = None
                            self.dummy = Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.AssociationInformation.SessionKey.Bfdfec.Dummy()
                            self.dummy.parent = self
                            self.te_s2l_fec = Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.AssociationInformation.SessionKey.Bfdfec.TeS2LFec()
                            self.te_s2l_fec.parent = self


                        class Dummy(object):
                            """
                            dummy
                            
                            .. attribute:: dummy
                            
                            	dummy
                            	**type**\:  str
                            
                            	**pattern:** ([0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2})\*)?
                            
                            

                            """

                            _prefix = 'ip-bfd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.dummy = None

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:session-key/Cisco-IOS-XR-ip-bfd-oper:bfdfec/Cisco-IOS-XR-ip-bfd-oper:dummy'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.dummy is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                                return meta._meta_table['Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.AssociationInformation.SessionKey.Bfdfec.Dummy']['meta_info']


                        class TeS2LFec(object):
                            """
                            te s2l fec
                            
                            .. attribute:: s2l_fec_ctype
                            
                            	Session identifier (ctype)
                            	**type**\:   :py:class:`MplsLibCEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.MplsLibCEnum>`
                            
                            .. attribute:: s2l_fec_dest
                            
                            	sub\-LSP destination address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: s2l_fec_extended_tunnel_id
                            
                            	Extended tunnel ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: s2l_fec_lsp_id
                            
                            	LSP ID
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: s2l_fec_p2mp_id
                            
                            	P2MP ID
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: s2l_fec_source
                            
                            	LSP source address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: s2l_fec_subgroup_id
                            
                            	sub\-LSP subgroup ID
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: s2l_fec_subgroup_originator
                            
                            	Subgroup Originator
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: s2l_fec_tunnel_id
                            
                            	Tunnel ID
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: s2l_fec_vrf
                            
                            	VRF; currently only for GMPLS tunnels
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'ip-bfd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.s2l_fec_ctype = None
                                self.s2l_fec_dest = None
                                self.s2l_fec_extended_tunnel_id = None
                                self.s2l_fec_lsp_id = None
                                self.s2l_fec_p2mp_id = None
                                self.s2l_fec_source = None
                                self.s2l_fec_subgroup_id = None
                                self.s2l_fec_subgroup_originator = None
                                self.s2l_fec_tunnel_id = None
                                self.s2l_fec_vrf = None

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:session-key/Cisco-IOS-XR-ip-bfd-oper:bfdfec/Cisco-IOS-XR-ip-bfd-oper:te-s2l-fec'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.s2l_fec_ctype is not None:
                                    return True

                                if self.s2l_fec_dest is not None:
                                    return True

                                if self.s2l_fec_extended_tunnel_id is not None:
                                    return True

                                if self.s2l_fec_lsp_id is not None:
                                    return True

                                if self.s2l_fec_p2mp_id is not None:
                                    return True

                                if self.s2l_fec_source is not None:
                                    return True

                                if self.s2l_fec_subgroup_id is not None:
                                    return True

                                if self.s2l_fec_subgroup_originator is not None:
                                    return True

                                if self.s2l_fec_tunnel_id is not None:
                                    return True

                                if self.s2l_fec_vrf is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                                return meta._meta_table['Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.AssociationInformation.SessionKey.Bfdfec.TeS2LFec']['meta_info']

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:session-key/Cisco-IOS-XR-ip-bfd-oper:bfdfec'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.bfdfe_ctype is not None:
                                return True

                            if self.dummy is not None and self.dummy._has_data():
                                return True

                            if self.te_s2l_fec is not None and self.te_s2l_fec._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                            return meta._meta_table['Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.AssociationInformation.SessionKey.Bfdfec']['meta_info']


                    class TargetAddress(object):
                        """
                        sbfd target address
                        
                        .. attribute:: afi
                        
                        	AFI
                        	**type**\:   :py:class:`BfdAfIdEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdAfIdEnum>`
                        
                        .. attribute:: dummy
                        
                        	No Address
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: ipv4
                        
                        	IPv4 address type
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: ipv6
                        
                        	IPv6 address type
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-bfd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.afi = None
                            self.dummy = None
                            self.ipv4 = None
                            self.ipv6 = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:session-key/Cisco-IOS-XR-ip-bfd-oper:target-address'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.afi is not None:
                                return True

                            if self.dummy is not None:
                                return True

                            if self.ipv4 is not None:
                                return True

                            if self.ipv6 is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                            return meta._meta_table['Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.AssociationInformation.SessionKey.TargetAddress']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:session-key'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.bfdfec is not None and self.bfdfec._has_data():
                            return True

                        if self.incoming_label is not None:
                            return True

                        if self.interface_name is not None:
                            return True

                        if self.ip_destination_address is not None and self.ip_destination_address._has_data():
                            return True

                        if self.ip_source_address is not None and self.ip_source_address._has_data():
                            return True

                        if self.sbfd_enabled is not None:
                            return True

                        if self.sbfd_target_type is not None:
                            return True

                        if self.session_key_type is not None:
                            return True

                        if self.target_address is not None and self.target_address._has_data():
                            return True

                        if self.vrf_name is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.AssociationInformation.SessionKey']['meta_info']


                class OwnerInformation(object):
                    """
                    Client applications owning the session
                    
                    .. attribute:: adjusted_detection_multiplier
                    
                    	Adjusted detection multiplier to compute detection time
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: adjusted_interval
                    
                    	Adjusted minimum transmit interval in milli\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: detection_multiplier
                    
                    	Client specified detection multiplier to compute detection time
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: interval
                    
                    	Client specified minimum transmit interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: name
                    
                    	Client process name
                    	**type**\:  str
                    
                    	**length:** 0..257
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.adjusted_detection_multiplier = None
                        self.adjusted_interval = None
                        self.detection_multiplier = None
                        self.interval = None
                        self.name = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:owner-information'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.adjusted_detection_multiplier is not None:
                            return True

                        if self.adjusted_interval is not None:
                            return True

                        if self.detection_multiplier is not None:
                            return True

                        if self.interval is not None:
                            return True

                        if self.name is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.AssociationInformation.OwnerInformation']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-session-detail/Cisco-IOS-XR-ip-bfd-oper:association-information'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.local_discriminator is not None:
                        return True

                    if self.owner_information is not None:
                        for child_ref in self.owner_information:
                            if child_ref._has_data():
                                return True

                    if self.session_key is not None and self.session_key._has_data():
                        return True

                    if self.sessiontype is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.AssociationInformation']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-session-details/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-session-detail'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.association_information is not None:
                    for child_ref in self.association_information:
                        if child_ref._has_data():
                            return True

                if self.fe_ctype is not None:
                    return True

                if self.fec_ctype is not None:
                    return True

                if self.fec_destination is not None:
                    return True

                if self.fec_extended_tunnel_id is not None:
                    return True

                if self.fec_source is not None:
                    return True

                if self.fec_subgroup_id is not None:
                    return True

                if self.fec_subgroup_originator is not None:
                    return True

                if self.fec_tunnel_id is not None:
                    return True

                if self.feclspid is not None:
                    return True

                if self.fecp2mpid is not None:
                    return True

                if self.incoming_label is not None:
                    return True

                if self.interface_name is not None:
                    return True

                if self.location is not None:
                    return True

                if self.lsp_ping_info is not None and self.lsp_ping_info._has_data():
                    return True

                if self.mp_download_state is not None and self.mp_download_state._has_data():
                    return True

                if self.owner_information is not None:
                    for child_ref in self.owner_information:
                        if child_ref._has_data():
                            return True

                if self.status_information is not None and self.status_information._has_data():
                    return True

                if self.vrf_name is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                return meta._meta_table['Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-session-details'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.ipv4bf_do_mplste_head_session_detail is not None:
                for child_ref in self.ipv4bf_do_mplste_head_session_detail:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
            return meta._meta_table['Bfd.Ipv4BfDoMplsteHeadSessionDetails']['meta_info']


    class RelationBriefs(object):
        """
        Table of brief information about all BFD
        relations in the System
        
        .. attribute:: relation_brief
        
        	Brief information for relation of a single BFD session
        	**type**\: list of    :py:class:`RelationBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.RelationBriefs.RelationBrief>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.relation_brief = YList()
            self.relation_brief.parent = self
            self.relation_brief.name = 'relation_brief'


        class RelationBrief(object):
            """
            Brief information for relation of a single BFD
            session
            
            .. attribute:: destination_address
            
            	Destination Address
            	**type**\: one of the below types:
            
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            
            ----
            	**type**\:  str
            
            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
            
            
            ----
            .. attribute:: interface_name
            
            	Interface Name
            	**type**\:  str
            
            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
            
            .. attribute:: link_information
            
            	Brief Member Link Information
            	**type**\: list of    :py:class:`LinkInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.RelationBriefs.RelationBrief.LinkInformation>`
            
            .. attribute:: state
            
            	State
            	**type**\:   :py:class:`BfdMgmtSessionStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionStateEnum>`
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.destination_address = None
                self.interface_name = None
                self.link_information = YList()
                self.link_information.parent = self
                self.link_information.name = 'link_information'
                self.state = None


            class LinkInformation(object):
                """
                Brief Member Link Information
                
                .. attribute:: interface_name
                
                	Session Interface Name
                	**type**\:  str
                
                	**length:** 0..64
                
                .. attribute:: state
                
                	State
                	**type**\:   :py:class:`BfdMgmtSessionStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionStateEnum>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.interface_name = None
                    self.state = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:relation-briefs/Cisco-IOS-XR-ip-bfd-oper:relation-brief/Cisco-IOS-XR-ip-bfd-oper:link-information'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.interface_name is not None:
                        return True

                    if self.state is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.RelationBriefs.RelationBrief.LinkInformation']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:relation-briefs/Cisco-IOS-XR-ip-bfd-oper:relation-brief'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.destination_address is not None:
                    return True

                if self.interface_name is not None:
                    return True

                if self.link_information is not None:
                    for child_ref in self.link_information:
                        if child_ref._has_data():
                            return True

                if self.state is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                return meta._meta_table['Bfd.RelationBriefs.RelationBrief']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:relation-briefs'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.relation_brief is not None:
                for child_ref in self.relation_brief:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
            return meta._meta_table['Bfd.RelationBriefs']['meta_info']


    class ClientBriefs(object):
        """
        Table of Brief information about BFD clients
        
        .. attribute:: client_brief
        
        	Brief information of client
        	**type**\: list of    :py:class:`ClientBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.ClientBriefs.ClientBrief>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.client_brief = YList()
            self.client_brief.parent = self
            self.client_brief.name = 'client_brief'


        class ClientBrief(object):
            """
            Brief information of client
            
            .. attribute:: name  <key>
            
            	Client Name
            	**type**\:  str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            .. attribute:: name_xr
            
            	Client process name
            	**type**\:  str
            
            	**length:** 0..257
            
            .. attribute:: node_id
            
            	Location where client resides
            	**type**\:  str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: session_count
            
            	Number of sessions created by this client
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.name = None
                self.name_xr = None
                self.node_id = None
                self.session_count = None

            @property
            def _common_path(self):
                if self.name is None:
                    raise YPYModelError('Key property name is None')

                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:client-briefs/Cisco-IOS-XR-ip-bfd-oper:client-brief[Cisco-IOS-XR-ip-bfd-oper:name = ' + str(self.name) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.name is not None:
                    return True

                if self.name_xr is not None:
                    return True

                if self.node_id is not None:
                    return True

                if self.session_count is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                return meta._meta_table['Bfd.ClientBriefs.ClientBrief']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:client-briefs'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.client_brief is not None:
                for child_ref in self.client_brief:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
            return meta._meta_table['Bfd.ClientBriefs']['meta_info']


    class Ipv4BfDoMplsteHeadMultiPaths(object):
        """
        IPv4 BFD over MPLS\-TE Head multipath
        
        .. attribute:: ipv4bf_do_mplste_head_multi_path
        
        	Label multipath table
        	**type**\: list of    :py:class:`Ipv4BfDoMplsteHeadMultiPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadMultiPaths.Ipv4BfDoMplsteHeadMultiPath>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.ipv4bf_do_mplste_head_multi_path = YList()
            self.ipv4bf_do_mplste_head_multi_path.parent = self
            self.ipv4bf_do_mplste_head_multi_path.name = 'ipv4bf_do_mplste_head_multi_path'


        class Ipv4BfDoMplsteHeadMultiPath(object):
            """
            Label multipath table
            
            .. attribute:: fe_ctype
            
            	FEC Type
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: fec_ctype
            
            	FEC C Type
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: fec_destination
            
            	FEC Destination
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: fec_extended_tunnel_id
            
            	FEC Extended Tunnel ID
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: fec_source
            
            	FEC Source
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: fec_subgroup_id
            
            	FEC Subgroup ID
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: fec_subgroup_originator
            
            	FEC Subgroup originator
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: fec_tunnel_id
            
            	FEC Tunnel ID
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: feclspid
            
            	FEC LSP ID
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: fecp2mpid
            
            	FEC P2MP ID
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: incoming_label
            
            	Incoming Label
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: incoming_label_xr
            
            	Incoming Label
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: interface_name
            
            	Interface Name
            	**type**\:  str
            
            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
            
            .. attribute:: local_discriminator
            
            	Session's Local discriminator
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: location
            
            	Location
            	**type**\:  str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: node_id
            
            	Location where session is housed
            	**type**\:  str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: session_interface_name
            
            	Interface name
            	**type**\:  str
            
            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
            
            .. attribute:: session_subtype
            
            	Session subtype
            	**type**\:  str
            
            .. attribute:: state
            
            	State
            	**type**\:   :py:class:`BfdMgmtSessionStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionStateEnum>`
            
            .. attribute:: vrf_name
            
            	VRF name
            	**type**\:  str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.fe_ctype = None
                self.fec_ctype = None
                self.fec_destination = None
                self.fec_extended_tunnel_id = None
                self.fec_source = None
                self.fec_subgroup_id = None
                self.fec_subgroup_originator = None
                self.fec_tunnel_id = None
                self.feclspid = None
                self.fecp2mpid = None
                self.incoming_label = None
                self.incoming_label_xr = None
                self.interface_name = None
                self.local_discriminator = None
                self.location = None
                self.node_id = None
                self.session_interface_name = None
                self.session_subtype = None
                self.state = None
                self.vrf_name = None

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-multi-paths/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-multi-path'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.fe_ctype is not None:
                    return True

                if self.fec_ctype is not None:
                    return True

                if self.fec_destination is not None:
                    return True

                if self.fec_extended_tunnel_id is not None:
                    return True

                if self.fec_source is not None:
                    return True

                if self.fec_subgroup_id is not None:
                    return True

                if self.fec_subgroup_originator is not None:
                    return True

                if self.fec_tunnel_id is not None:
                    return True

                if self.feclspid is not None:
                    return True

                if self.fecp2mpid is not None:
                    return True

                if self.incoming_label is not None:
                    return True

                if self.incoming_label_xr is not None:
                    return True

                if self.interface_name is not None:
                    return True

                if self.local_discriminator is not None:
                    return True

                if self.location is not None:
                    return True

                if self.node_id is not None:
                    return True

                if self.session_interface_name is not None:
                    return True

                if self.session_subtype is not None:
                    return True

                if self.state is not None:
                    return True

                if self.vrf_name is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                return meta._meta_table['Bfd.Ipv4BfDoMplsteHeadMultiPaths.Ipv4BfDoMplsteHeadMultiPath']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-multi-paths'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.ipv4bf_do_mplste_head_multi_path is not None:
                for child_ref in self.ipv4bf_do_mplste_head_multi_path:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
            return meta._meta_table['Bfd.Ipv4BfDoMplsteHeadMultiPaths']['meta_info']


    class RelationDetails(object):
        """
        Table of detail information about all BFD
        relations in the System
        
        .. attribute:: relation_detail
        
        	Detail information for relation of a single BFD session
        	**type**\: list of    :py:class:`RelationDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.RelationDetails.RelationDetail>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.relation_detail = YList()
            self.relation_detail.parent = self
            self.relation_detail.name = 'relation_detail'


        class RelationDetail(object):
            """
            Detail information for relation of a single BFD
            session
            
            .. attribute:: association_information
            
            	Association session information
            	**type**\: list of    :py:class:`AssociationInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.RelationDetails.RelationDetail.AssociationInformation>`
            
            .. attribute:: destination_address
            
            	Destination Address
            	**type**\: one of the below types:
            
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            
            ----
            	**type**\:  str
            
            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
            
            
            ----
            .. attribute:: interface_name
            
            	Interface Name
            	**type**\:  str
            
            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
            
            .. attribute:: link_information
            
            	Detail Member Link Information
            	**type**\: list of    :py:class:`LinkInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.RelationDetails.RelationDetail.LinkInformation>`
            
            .. attribute:: local_discriminator
            
            	Session's Local discriminator
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: state
            
            	State
            	**type**\:   :py:class:`BfdMgmtSessionStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionStateEnum>`
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.association_information = YList()
                self.association_information.parent = self
                self.association_information.name = 'association_information'
                self.destination_address = None
                self.interface_name = None
                self.link_information = YList()
                self.link_information.parent = self
                self.link_information.name = 'link_information'
                self.local_discriminator = None
                self.state = None


            class LinkInformation(object):
                """
                Detail Member Link Information
                
                .. attribute:: interface_name
                
                	Session Interface Name
                	**type**\:  str
                
                	**length:** 0..64
                
                .. attribute:: local_discriminator
                
                	Session's Local discriminator
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: state
                
                	State
                	**type**\:   :py:class:`BfdMgmtSessionStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionStateEnum>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.interface_name = None
                    self.local_discriminator = None
                    self.state = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:relation-details/Cisco-IOS-XR-ip-bfd-oper:relation-detail/Cisco-IOS-XR-ip-bfd-oper:link-information'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.interface_name is not None:
                        return True

                    if self.local_discriminator is not None:
                        return True

                    if self.state is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.RelationDetails.RelationDetail.LinkInformation']['meta_info']


            class AssociationInformation(object):
                """
                Association session information
                
                .. attribute:: local_discriminator
                
                	Session's Local discriminator
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: owner_information
                
                	Client applications owning the session
                	**type**\: list of    :py:class:`OwnerInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.RelationDetails.RelationDetail.AssociationInformation.OwnerInformation>`
                
                .. attribute:: session_key
                
                	Session Key
                	**type**\:   :py:class:`SessionKey <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.RelationDetails.RelationDetail.AssociationInformation.SessionKey>`
                
                .. attribute:: sessiontype
                
                	Session type
                	**type**\:   :py:class:`BfdSessionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdSessionEnum>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.local_discriminator = None
                    self.owner_information = YList()
                    self.owner_information.parent = self
                    self.owner_information.name = 'owner_information'
                    self.session_key = Bfd.RelationDetails.RelationDetail.AssociationInformation.SessionKey()
                    self.session_key.parent = self
                    self.sessiontype = None


                class SessionKey(object):
                    """
                    Session Key
                    
                    .. attribute:: bfdfec
                    
                    	Union of FECs
                    	**type**\:   :py:class:`Bfdfec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.RelationDetails.RelationDetail.AssociationInformation.SessionKey.Bfdfec>`
                    
                    .. attribute:: incoming_label
                    
                    	Incoming Label
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: interface_name
                    
                    	Session Interface Name
                    	**type**\:  str
                    
                    	**length:** 0..64
                    
                    .. attribute:: ip_destination_address
                    
                    	IPv4/v6 dest address
                    	**type**\:   :py:class:`IpDestinationAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.RelationDetails.RelationDetail.AssociationInformation.SessionKey.IpDestinationAddress>`
                    
                    .. attribute:: ip_source_address
                    
                    	IPv4/v6 source address
                    	**type**\:   :py:class:`IpSourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.RelationDetails.RelationDetail.AssociationInformation.SessionKey.IpSourceAddress>`
                    
                    .. attribute:: sbfd_enabled
                    
                    	SBFD enable flag
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: sbfd_target_type
                    
                    	SBFD target type
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: session_key_type
                    
                    	Session Key Type
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: target_address
                    
                    	sbfd target address
                    	**type**\:   :py:class:`TargetAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.RelationDetails.RelationDetail.AssociationInformation.SessionKey.TargetAddress>`
                    
                    .. attribute:: vrf_name
                    
                    	Session VRF Name
                    	**type**\:  str
                    
                    	**length:** 0..120
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.bfdfec = Bfd.RelationDetails.RelationDetail.AssociationInformation.SessionKey.Bfdfec()
                        self.bfdfec.parent = self
                        self.incoming_label = None
                        self.interface_name = None
                        self.ip_destination_address = Bfd.RelationDetails.RelationDetail.AssociationInformation.SessionKey.IpDestinationAddress()
                        self.ip_destination_address.parent = self
                        self.ip_source_address = Bfd.RelationDetails.RelationDetail.AssociationInformation.SessionKey.IpSourceAddress()
                        self.ip_source_address.parent = self
                        self.sbfd_enabled = None
                        self.sbfd_target_type = None
                        self.session_key_type = None
                        self.target_address = Bfd.RelationDetails.RelationDetail.AssociationInformation.SessionKey.TargetAddress()
                        self.target_address.parent = self
                        self.vrf_name = None


                    class IpDestinationAddress(object):
                        """
                        IPv4/v6 dest address
                        
                        .. attribute:: afi
                        
                        	AFI
                        	**type**\:   :py:class:`BfdAfIdEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdAfIdEnum>`
                        
                        .. attribute:: dummy
                        
                        	No Address
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: ipv4
                        
                        	IPv4 address type
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: ipv6
                        
                        	IPv6 address type
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-bfd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.afi = None
                            self.dummy = None
                            self.ipv4 = None
                            self.ipv6 = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:relation-details/Cisco-IOS-XR-ip-bfd-oper:relation-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:session-key/Cisco-IOS-XR-ip-bfd-oper:ip-destination-address'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.afi is not None:
                                return True

                            if self.dummy is not None:
                                return True

                            if self.ipv4 is not None:
                                return True

                            if self.ipv6 is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                            return meta._meta_table['Bfd.RelationDetails.RelationDetail.AssociationInformation.SessionKey.IpDestinationAddress']['meta_info']


                    class IpSourceAddress(object):
                        """
                        IPv4/v6 source address
                        
                        .. attribute:: afi
                        
                        	AFI
                        	**type**\:   :py:class:`BfdAfIdEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdAfIdEnum>`
                        
                        .. attribute:: dummy
                        
                        	No Address
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: ipv4
                        
                        	IPv4 address type
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: ipv6
                        
                        	IPv6 address type
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-bfd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.afi = None
                            self.dummy = None
                            self.ipv4 = None
                            self.ipv6 = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:relation-details/Cisco-IOS-XR-ip-bfd-oper:relation-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:session-key/Cisco-IOS-XR-ip-bfd-oper:ip-source-address'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.afi is not None:
                                return True

                            if self.dummy is not None:
                                return True

                            if self.ipv4 is not None:
                                return True

                            if self.ipv6 is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                            return meta._meta_table['Bfd.RelationDetails.RelationDetail.AssociationInformation.SessionKey.IpSourceAddress']['meta_info']


                    class Bfdfec(object):
                        """
                        Union of FECs
                        
                        .. attribute:: bfdfe_ctype
                        
                        	BFDFECType
                        	**type**\:   :py:class:`BfdApiFecEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdApiFecEnum>`
                        
                        .. attribute:: dummy
                        
                        	dummy
                        	**type**\:   :py:class:`Dummy <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.RelationDetails.RelationDetail.AssociationInformation.SessionKey.Bfdfec.Dummy>`
                        
                        .. attribute:: te_s2l_fec
                        
                        	te s2l fec
                        	**type**\:   :py:class:`TeS2LFec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.RelationDetails.RelationDetail.AssociationInformation.SessionKey.Bfdfec.TeS2LFec>`
                        
                        

                        """

                        _prefix = 'ip-bfd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.bfdfe_ctype = None
                            self.dummy = Bfd.RelationDetails.RelationDetail.AssociationInformation.SessionKey.Bfdfec.Dummy()
                            self.dummy.parent = self
                            self.te_s2l_fec = Bfd.RelationDetails.RelationDetail.AssociationInformation.SessionKey.Bfdfec.TeS2LFec()
                            self.te_s2l_fec.parent = self


                        class Dummy(object):
                            """
                            dummy
                            
                            .. attribute:: dummy
                            
                            	dummy
                            	**type**\:  str
                            
                            	**pattern:** ([0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2})\*)?
                            
                            

                            """

                            _prefix = 'ip-bfd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.dummy = None

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:relation-details/Cisco-IOS-XR-ip-bfd-oper:relation-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:session-key/Cisco-IOS-XR-ip-bfd-oper:bfdfec/Cisco-IOS-XR-ip-bfd-oper:dummy'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.dummy is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                                return meta._meta_table['Bfd.RelationDetails.RelationDetail.AssociationInformation.SessionKey.Bfdfec.Dummy']['meta_info']


                        class TeS2LFec(object):
                            """
                            te s2l fec
                            
                            .. attribute:: s2l_fec_ctype
                            
                            	Session identifier (ctype)
                            	**type**\:   :py:class:`MplsLibCEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.MplsLibCEnum>`
                            
                            .. attribute:: s2l_fec_dest
                            
                            	sub\-LSP destination address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: s2l_fec_extended_tunnel_id
                            
                            	Extended tunnel ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: s2l_fec_lsp_id
                            
                            	LSP ID
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: s2l_fec_p2mp_id
                            
                            	P2MP ID
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: s2l_fec_source
                            
                            	LSP source address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: s2l_fec_subgroup_id
                            
                            	sub\-LSP subgroup ID
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: s2l_fec_subgroup_originator
                            
                            	Subgroup Originator
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: s2l_fec_tunnel_id
                            
                            	Tunnel ID
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: s2l_fec_vrf
                            
                            	VRF; currently only for GMPLS tunnels
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'ip-bfd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.s2l_fec_ctype = None
                                self.s2l_fec_dest = None
                                self.s2l_fec_extended_tunnel_id = None
                                self.s2l_fec_lsp_id = None
                                self.s2l_fec_p2mp_id = None
                                self.s2l_fec_source = None
                                self.s2l_fec_subgroup_id = None
                                self.s2l_fec_subgroup_originator = None
                                self.s2l_fec_tunnel_id = None
                                self.s2l_fec_vrf = None

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:relation-details/Cisco-IOS-XR-ip-bfd-oper:relation-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:session-key/Cisco-IOS-XR-ip-bfd-oper:bfdfec/Cisco-IOS-XR-ip-bfd-oper:te-s2l-fec'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.s2l_fec_ctype is not None:
                                    return True

                                if self.s2l_fec_dest is not None:
                                    return True

                                if self.s2l_fec_extended_tunnel_id is not None:
                                    return True

                                if self.s2l_fec_lsp_id is not None:
                                    return True

                                if self.s2l_fec_p2mp_id is not None:
                                    return True

                                if self.s2l_fec_source is not None:
                                    return True

                                if self.s2l_fec_subgroup_id is not None:
                                    return True

                                if self.s2l_fec_subgroup_originator is not None:
                                    return True

                                if self.s2l_fec_tunnel_id is not None:
                                    return True

                                if self.s2l_fec_vrf is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                                return meta._meta_table['Bfd.RelationDetails.RelationDetail.AssociationInformation.SessionKey.Bfdfec.TeS2LFec']['meta_info']

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:relation-details/Cisco-IOS-XR-ip-bfd-oper:relation-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:session-key/Cisco-IOS-XR-ip-bfd-oper:bfdfec'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.bfdfe_ctype is not None:
                                return True

                            if self.dummy is not None and self.dummy._has_data():
                                return True

                            if self.te_s2l_fec is not None and self.te_s2l_fec._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                            return meta._meta_table['Bfd.RelationDetails.RelationDetail.AssociationInformation.SessionKey.Bfdfec']['meta_info']


                    class TargetAddress(object):
                        """
                        sbfd target address
                        
                        .. attribute:: afi
                        
                        	AFI
                        	**type**\:   :py:class:`BfdAfIdEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdAfIdEnum>`
                        
                        .. attribute:: dummy
                        
                        	No Address
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: ipv4
                        
                        	IPv4 address type
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: ipv6
                        
                        	IPv6 address type
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-bfd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.afi = None
                            self.dummy = None
                            self.ipv4 = None
                            self.ipv6 = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:relation-details/Cisco-IOS-XR-ip-bfd-oper:relation-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:session-key/Cisco-IOS-XR-ip-bfd-oper:target-address'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.afi is not None:
                                return True

                            if self.dummy is not None:
                                return True

                            if self.ipv4 is not None:
                                return True

                            if self.ipv6 is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                            return meta._meta_table['Bfd.RelationDetails.RelationDetail.AssociationInformation.SessionKey.TargetAddress']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:relation-details/Cisco-IOS-XR-ip-bfd-oper:relation-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:session-key'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.bfdfec is not None and self.bfdfec._has_data():
                            return True

                        if self.incoming_label is not None:
                            return True

                        if self.interface_name is not None:
                            return True

                        if self.ip_destination_address is not None and self.ip_destination_address._has_data():
                            return True

                        if self.ip_source_address is not None and self.ip_source_address._has_data():
                            return True

                        if self.sbfd_enabled is not None:
                            return True

                        if self.sbfd_target_type is not None:
                            return True

                        if self.session_key_type is not None:
                            return True

                        if self.target_address is not None and self.target_address._has_data():
                            return True

                        if self.vrf_name is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.RelationDetails.RelationDetail.AssociationInformation.SessionKey']['meta_info']


                class OwnerInformation(object):
                    """
                    Client applications owning the session
                    
                    .. attribute:: adjusted_detection_multiplier
                    
                    	Adjusted detection multiplier to compute detection time
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: adjusted_interval
                    
                    	Adjusted minimum transmit interval in milli\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: detection_multiplier
                    
                    	Client specified detection multiplier to compute detection time
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: interval
                    
                    	Client specified minimum transmit interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: name
                    
                    	Client process name
                    	**type**\:  str
                    
                    	**length:** 0..257
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.adjusted_detection_multiplier = None
                        self.adjusted_interval = None
                        self.detection_multiplier = None
                        self.interval = None
                        self.name = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:relation-details/Cisco-IOS-XR-ip-bfd-oper:relation-detail/Cisco-IOS-XR-ip-bfd-oper:association-information/Cisco-IOS-XR-ip-bfd-oper:owner-information'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.adjusted_detection_multiplier is not None:
                            return True

                        if self.adjusted_interval is not None:
                            return True

                        if self.detection_multiplier is not None:
                            return True

                        if self.interval is not None:
                            return True

                        if self.name is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.RelationDetails.RelationDetail.AssociationInformation.OwnerInformation']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:relation-details/Cisco-IOS-XR-ip-bfd-oper:relation-detail/Cisco-IOS-XR-ip-bfd-oper:association-information'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.local_discriminator is not None:
                        return True

                    if self.owner_information is not None:
                        for child_ref in self.owner_information:
                            if child_ref._has_data():
                                return True

                    if self.session_key is not None and self.session_key._has_data():
                        return True

                    if self.sessiontype is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.RelationDetails.RelationDetail.AssociationInformation']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:relation-details/Cisco-IOS-XR-ip-bfd-oper:relation-detail'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.association_information is not None:
                    for child_ref in self.association_information:
                        if child_ref._has_data():
                            return True

                if self.destination_address is not None:
                    return True

                if self.interface_name is not None:
                    return True

                if self.link_information is not None:
                    for child_ref in self.link_information:
                        if child_ref._has_data():
                            return True

                if self.local_discriminator is not None:
                    return True

                if self.state is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                return meta._meta_table['Bfd.RelationDetails.RelationDetail']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:relation-details'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.relation_detail is not None:
                for child_ref in self.relation_detail:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
            return meta._meta_table['Bfd.RelationDetails']['meta_info']


    class Ipv4BfDoMplsteTailCounters(object):
        """
        IPv4 BFD over MPLS\-TE Counters
        
        .. attribute:: ipv4bf_do_mplste_tail_packet_counters
        
        	Table of IPv4 BFD over MPLS\-TE Packet counters
        	**type**\:   :py:class:`Ipv4BfDoMplsteTailPacketCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailCounters.Ipv4BfDoMplsteTailPacketCounters>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.ipv4bf_do_mplste_tail_packet_counters = Bfd.Ipv4BfDoMplsteTailCounters.Ipv4BfDoMplsteTailPacketCounters()
            self.ipv4bf_do_mplste_tail_packet_counters.parent = self


        class Ipv4BfDoMplsteTailPacketCounters(object):
            """
            Table of IPv4 BFD over MPLS\-TE Packet counters
            
            .. attribute:: ipv4bf_do_mplste_tail_packet_counter
            
            	Interface  IPv4 BFD over MPLS\-TE Packet counters
            	**type**\: list of    :py:class:`Ipv4BfDoMplsteTailPacketCounter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailCounters.Ipv4BfDoMplsteTailPacketCounters.Ipv4BfDoMplsteTailPacketCounter>`
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.ipv4bf_do_mplste_tail_packet_counter = YList()
                self.ipv4bf_do_mplste_tail_packet_counter.parent = self
                self.ipv4bf_do_mplste_tail_packet_counter.name = 'ipv4bf_do_mplste_tail_packet_counter'


            class Ipv4BfDoMplsteTailPacketCounter(object):
                """
                Interface  IPv4 BFD over MPLS\-TE Packet
                counters
                
                .. attribute:: display_type
                
                	Packet Display Type
                	**type**\:   :py:class:`BfdMgmtPktDisplayEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtPktDisplayEnum>`
                
                .. attribute:: echo_receive_count
                
                	Number of echo packets received
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: echo_transmit_count
                
                	Number of echo packets transmitted
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: fe_ctype
                
                	FEC Type
                	**type**\:  int
                
                	**range:** \-2147483648..2147483647
                
                .. attribute:: fec_ctype
                
                	FEC C Type
                	**type**\:  int
                
                	**range:** \-2147483648..2147483647
                
                .. attribute:: fec_destination
                
                	FEC Destination
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: fec_extended_tunnel_id
                
                	FEC Extended Tunnel ID
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: fec_source
                
                	FEC Source
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: fec_subgroup_id
                
                	FEC Subgroup ID
                	**type**\:  int
                
                	**range:** \-2147483648..2147483647
                
                .. attribute:: fec_subgroup_originator
                
                	FEC Subgroup originator
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: fec_tunnel_id
                
                	FEC Tunnel ID
                	**type**\:  int
                
                	**range:** \-2147483648..2147483647
                
                .. attribute:: feclspid
                
                	FEC LSP ID
                	**type**\:  int
                
                	**range:** \-2147483648..2147483647
                
                .. attribute:: fecp2mpid
                
                	FEC P2MP ID
                	**type**\:  int
                
                	**range:** \-2147483648..2147483647
                
                .. attribute:: hello_receive_count
                
                	Number of Hellos received
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: hello_transmit_count
                
                	Number of Hellos transmitted
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: incoming_label
                
                	Incoming Label
                	**type**\:  int
                
                	**range:** \-2147483648..2147483647
                
                .. attribute:: location
                
                	Location
                	**type**\:  str
                
                	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
                
                .. attribute:: vrf_name
                
                	VRF name
                	**type**\:  str
                
                	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.display_type = None
                    self.echo_receive_count = None
                    self.echo_transmit_count = None
                    self.fe_ctype = None
                    self.fec_ctype = None
                    self.fec_destination = None
                    self.fec_extended_tunnel_id = None
                    self.fec_source = None
                    self.fec_subgroup_id = None
                    self.fec_subgroup_originator = None
                    self.fec_tunnel_id = None
                    self.feclspid = None
                    self.fecp2mpid = None
                    self.hello_receive_count = None
                    self.hello_transmit_count = None
                    self.incoming_label = None
                    self.location = None
                    self.vrf_name = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-counters/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-packet-counters/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-packet-counter'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.display_type is not None:
                        return True

                    if self.echo_receive_count is not None:
                        return True

                    if self.echo_transmit_count is not None:
                        return True

                    if self.fe_ctype is not None:
                        return True

                    if self.fec_ctype is not None:
                        return True

                    if self.fec_destination is not None:
                        return True

                    if self.fec_extended_tunnel_id is not None:
                        return True

                    if self.fec_source is not None:
                        return True

                    if self.fec_subgroup_id is not None:
                        return True

                    if self.fec_subgroup_originator is not None:
                        return True

                    if self.fec_tunnel_id is not None:
                        return True

                    if self.feclspid is not None:
                        return True

                    if self.fecp2mpid is not None:
                        return True

                    if self.hello_receive_count is not None:
                        return True

                    if self.hello_transmit_count is not None:
                        return True

                    if self.incoming_label is not None:
                        return True

                    if self.location is not None:
                        return True

                    if self.vrf_name is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.Ipv4BfDoMplsteTailCounters.Ipv4BfDoMplsteTailPacketCounters.Ipv4BfDoMplsteTailPacketCounter']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-counters/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-packet-counters'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.ipv4bf_do_mplste_tail_packet_counter is not None:
                    for child_ref in self.ipv4bf_do_mplste_tail_packet_counter:
                        if child_ref._has_data():
                            return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                return meta._meta_table['Bfd.Ipv4BfDoMplsteTailCounters.Ipv4BfDoMplsteTailPacketCounters']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-counters'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.ipv4bf_do_mplste_tail_packet_counters is not None and self.ipv4bf_do_mplste_tail_packet_counters._has_data():
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
            return meta._meta_table['Bfd.Ipv4BfDoMplsteTailCounters']['meta_info']


    class Ipv6SingleHopSessionBriefs(object):
        """
        Table of brief information about all IPv6
        singlehop BFD sessions in the System
        
        .. attribute:: ipv6_single_hop_session_brief
        
        	Brief information for a single IPv6 singlehop BFD session
        	**type**\: list of    :py:class:`Ipv6SingleHopSessionBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopSessionBriefs.Ipv6SingleHopSessionBrief>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.ipv6_single_hop_session_brief = YList()
            self.ipv6_single_hop_session_brief.parent = self
            self.ipv6_single_hop_session_brief.name = 'ipv6_single_hop_session_brief'


        class Ipv6SingleHopSessionBrief(object):
            """
            Brief information for a single IPv6 singlehop
            BFD session
            
            .. attribute:: destination_address
            
            	Destination Address
            	**type**\: one of the below types:
            
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            
            ----
            	**type**\:  str
            
            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
            
            
            ----
            .. attribute:: interface_name
            
            	Interface Name
            	**type**\:  str
            
            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
            
            .. attribute:: location
            
            	Location
            	**type**\:  str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: node_id
            
            	Location where session is housed
            	**type**\:  str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: session_flags
            
            	Session Flags
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: session_subtype
            
            	Session subtype
            	**type**\:  str
            
            .. attribute:: session_type
            
            	Session type
            	**type**\:   :py:class:`BfdSessionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdSessionEnum>`
            
            .. attribute:: state
            
            	State
            	**type**\:   :py:class:`BfdMgmtSessionStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionStateEnum>`
            
            .. attribute:: status_brief_information
            
            	Brief Status Information
            	**type**\:   :py:class:`StatusBriefInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopSessionBriefs.Ipv6SingleHopSessionBrief.StatusBriefInformation>`
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.destination_address = None
                self.interface_name = None
                self.location = None
                self.node_id = None
                self.session_flags = None
                self.session_subtype = None
                self.session_type = None
                self.state = None
                self.status_brief_information = Bfd.Ipv6SingleHopSessionBriefs.Ipv6SingleHopSessionBrief.StatusBriefInformation()
                self.status_brief_information.parent = self


            class StatusBriefInformation(object):
                """
                Brief Status Information
                
                .. attribute:: async_interval_multiplier
                
                	Async Interval and Detect Multiplier Information
                	**type**\:   :py:class:`AsyncIntervalMultiplier <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopSessionBriefs.Ipv6SingleHopSessionBrief.StatusBriefInformation.AsyncIntervalMultiplier>`
                
                .. attribute:: echo_interval_multiplier
                
                	Echo Interval and Detect Multiplier Information
                	**type**\:   :py:class:`EchoIntervalMultiplier <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopSessionBriefs.Ipv6SingleHopSessionBrief.StatusBriefInformation.EchoIntervalMultiplier>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.async_interval_multiplier = Bfd.Ipv6SingleHopSessionBriefs.Ipv6SingleHopSessionBrief.StatusBriefInformation.AsyncIntervalMultiplier()
                    self.async_interval_multiplier.parent = self
                    self.echo_interval_multiplier = Bfd.Ipv6SingleHopSessionBriefs.Ipv6SingleHopSessionBrief.StatusBriefInformation.EchoIntervalMultiplier()
                    self.echo_interval_multiplier.parent = self


                class AsyncIntervalMultiplier(object):
                    """
                    Async Interval and Detect Multiplier Information
                    
                    .. attribute:: detection_multiplier
                    
                    	Detection Multiplier
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: detection_time
                    
                    	Detection time in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: negotiated_local_transmit_interval
                    
                    	Negotiated local transmit interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: negotiated_remote_transmit_interval
                    
                    	Negotiated remote transmit interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.detection_multiplier = None
                        self.detection_time = None
                        self.negotiated_local_transmit_interval = None
                        self.negotiated_remote_transmit_interval = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-session-briefs/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-session-brief/Cisco-IOS-XR-ip-bfd-oper:status-brief-information/Cisco-IOS-XR-ip-bfd-oper:async-interval-multiplier'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.detection_multiplier is not None:
                            return True

                        if self.detection_time is not None:
                            return True

                        if self.negotiated_local_transmit_interval is not None:
                            return True

                        if self.negotiated_remote_transmit_interval is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv6SingleHopSessionBriefs.Ipv6SingleHopSessionBrief.StatusBriefInformation.AsyncIntervalMultiplier']['meta_info']


                class EchoIntervalMultiplier(object):
                    """
                    Echo Interval and Detect Multiplier Information
                    
                    .. attribute:: detection_multiplier
                    
                    	Detection Multiplier
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: detection_time
                    
                    	Detection time in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: negotiated_transmit_interval
                    
                    	Negotiated transmit interval in micro\-seconds
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.detection_multiplier = None
                        self.detection_time = None
                        self.negotiated_transmit_interval = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-session-briefs/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-session-brief/Cisco-IOS-XR-ip-bfd-oper:status-brief-information/Cisco-IOS-XR-ip-bfd-oper:echo-interval-multiplier'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.detection_multiplier is not None:
                            return True

                        if self.detection_time is not None:
                            return True

                        if self.negotiated_transmit_interval is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                        return meta._meta_table['Bfd.Ipv6SingleHopSessionBriefs.Ipv6SingleHopSessionBrief.StatusBriefInformation.EchoIntervalMultiplier']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-session-briefs/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-session-brief/Cisco-IOS-XR-ip-bfd-oper:status-brief-information'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.async_interval_multiplier is not None and self.async_interval_multiplier._has_data():
                        return True

                    if self.echo_interval_multiplier is not None and self.echo_interval_multiplier._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                    return meta._meta_table['Bfd.Ipv6SingleHopSessionBriefs.Ipv6SingleHopSessionBrief.StatusBriefInformation']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-session-briefs/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-session-brief'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.destination_address is not None:
                    return True

                if self.interface_name is not None:
                    return True

                if self.location is not None:
                    return True

                if self.node_id is not None:
                    return True

                if self.session_flags is not None:
                    return True

                if self.session_subtype is not None:
                    return True

                if self.session_type is not None:
                    return True

                if self.state is not None:
                    return True

                if self.status_brief_information is not None and self.status_brief_information._has_data():
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                return meta._meta_table['Bfd.Ipv6SingleHopSessionBriefs.Ipv6SingleHopSessionBrief']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv6-single-hop-session-briefs'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.ipv6_single_hop_session_brief is not None:
                for child_ref in self.ipv6_single_hop_session_brief:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
            return meta._meta_table['Bfd.Ipv6SingleHopSessionBriefs']['meta_info']


    class Ipv4BfDoMplsteTailMultiPaths(object):
        """
        IPv4 BFD over MPLS\-TE Tail multipath
        
        .. attribute:: ipv4bf_do_mplste_tail_multi_path
        
        	Label multipath table
        	**type**\: list of    :py:class:`Ipv4BfDoMplsteTailMultiPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailMultiPaths.Ipv4BfDoMplsteTailMultiPath>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.ipv4bf_do_mplste_tail_multi_path = YList()
            self.ipv4bf_do_mplste_tail_multi_path.parent = self
            self.ipv4bf_do_mplste_tail_multi_path.name = 'ipv4bf_do_mplste_tail_multi_path'


        class Ipv4BfDoMplsteTailMultiPath(object):
            """
            Label multipath table
            
            .. attribute:: fe_ctype
            
            	FEC Type
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: fec_ctype
            
            	FEC C Type
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: fec_destination
            
            	FEC Destination
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: fec_extended_tunnel_id
            
            	FEC Extended Tunnel ID
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: fec_source
            
            	FEC Source
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: fec_subgroup_id
            
            	FEC Subgroup ID
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: fec_subgroup_originator
            
            	FEC Subgroup originator
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: fec_tunnel_id
            
            	FEC Tunnel ID
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: feclspid
            
            	FEC LSP ID
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: fecp2mpid
            
            	FEC P2MP ID
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: incoming_label
            
            	Incoming Label
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: incoming_label_xr
            
            	Incoming Label
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: local_discriminator
            
            	Session's Local discriminator
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: location
            
            	Location
            	**type**\:  str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: node_id
            
            	Location where session is housed
            	**type**\:  str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: session_interface_name
            
            	Interface name
            	**type**\:  str
            
            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
            
            .. attribute:: session_subtype
            
            	Session subtype
            	**type**\:  str
            
            .. attribute:: state
            
            	State
            	**type**\:   :py:class:`BfdMgmtSessionStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionStateEnum>`
            
            .. attribute:: vrf_name
            
            	VRF name
            	**type**\:  str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.fe_ctype = None
                self.fec_ctype = None
                self.fec_destination = None
                self.fec_extended_tunnel_id = None
                self.fec_source = None
                self.fec_subgroup_id = None
                self.fec_subgroup_originator = None
                self.fec_tunnel_id = None
                self.feclspid = None
                self.fecp2mpid = None
                self.incoming_label = None
                self.incoming_label_xr = None
                self.local_discriminator = None
                self.location = None
                self.node_id = None
                self.session_interface_name = None
                self.session_subtype = None
                self.state = None
                self.vrf_name = None

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-multi-paths/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-multi-path'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.fe_ctype is not None:
                    return True

                if self.fec_ctype is not None:
                    return True

                if self.fec_destination is not None:
                    return True

                if self.fec_extended_tunnel_id is not None:
                    return True

                if self.fec_source is not None:
                    return True

                if self.fec_subgroup_id is not None:
                    return True

                if self.fec_subgroup_originator is not None:
                    return True

                if self.fec_tunnel_id is not None:
                    return True

                if self.feclspid is not None:
                    return True

                if self.fecp2mpid is not None:
                    return True

                if self.incoming_label is not None:
                    return True

                if self.incoming_label_xr is not None:
                    return True

                if self.local_discriminator is not None:
                    return True

                if self.location is not None:
                    return True

                if self.node_id is not None:
                    return True

                if self.session_interface_name is not None:
                    return True

                if self.session_subtype is not None:
                    return True

                if self.state is not None:
                    return True

                if self.vrf_name is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                return meta._meta_table['Bfd.Ipv4BfDoMplsteTailMultiPaths.Ipv4BfDoMplsteTailMultiPath']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-tail-multi-paths'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.ipv4bf_do_mplste_tail_multi_path is not None:
                for child_ref in self.ipv4bf_do_mplste_tail_multi_path:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
            return meta._meta_table['Bfd.Ipv4BfDoMplsteTailMultiPaths']['meta_info']


    class Ipv4MultiHopMultiPaths(object):
        """
        IPv4 multi\-hop multipath
        
        .. attribute:: ipv4_multi_hop_multi_path
        
        	IPv4 multi hop multipath table
        	**type**\: list of    :py:class:`Ipv4MultiHopMultiPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopMultiPaths.Ipv4MultiHopMultiPath>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.ipv4_multi_hop_multi_path = YList()
            self.ipv4_multi_hop_multi_path.parent = self
            self.ipv4_multi_hop_multi_path.name = 'ipv4_multi_hop_multi_path'


        class Ipv4MultiHopMultiPath(object):
            """
            IPv4 multi hop multipath table
            
            .. attribute:: destination_address
            
            	Destination Address
            	**type**\: one of the below types:
            
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            
            ----
            	**type**\:  str
            
            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
            
            
            ----
            .. attribute:: incoming_label_xr
            
            	Incoming Label
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: local_discriminator
            
            	Session's Local discriminator
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: location
            
            	Location
            	**type**\:  str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: node_id
            
            	Location where session is housed
            	**type**\:  str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: session_interface_name
            
            	Interface name
            	**type**\:  str
            
            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
            
            .. attribute:: session_subtype
            
            	Session subtype
            	**type**\:  str
            
            .. attribute:: source_address
            
            	Source Address
            	**type**\: one of the below types:
            
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            
            ----
            	**type**\:  str
            
            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
            
            
            ----
            .. attribute:: state
            
            	State
            	**type**\:   :py:class:`BfdMgmtSessionStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionStateEnum>`
            
            .. attribute:: vrf_name
            
            	VRF name
            	**type**\:  str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.destination_address = None
                self.incoming_label_xr = None
                self.local_discriminator = None
                self.location = None
                self.node_id = None
                self.session_interface_name = None
                self.session_subtype = None
                self.source_address = None
                self.state = None
                self.vrf_name = None

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-multi-paths/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-multi-path'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.destination_address is not None:
                    return True

                if self.incoming_label_xr is not None:
                    return True

                if self.local_discriminator is not None:
                    return True

                if self.location is not None:
                    return True

                if self.node_id is not None:
                    return True

                if self.session_interface_name is not None:
                    return True

                if self.session_subtype is not None:
                    return True

                if self.source_address is not None:
                    return True

                if self.state is not None:
                    return True

                if self.vrf_name is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                return meta._meta_table['Bfd.Ipv4MultiHopMultiPaths.Ipv4MultiHopMultiPath']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4-multi-hop-multi-paths'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.ipv4_multi_hop_multi_path is not None:
                for child_ref in self.ipv4_multi_hop_multi_path:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
            return meta._meta_table['Bfd.Ipv4MultiHopMultiPaths']['meta_info']


    class Ipv4BfDoMplsteHeadSummary(object):
        """
        Summary information of IPv4 BFD over MPLS\-TE
        Head
        
        .. attribute:: session_state
        
        	Statistics of states for sessions
        	**type**\:   :py:class:`SessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadSummary.SessionState>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.session_state = Bfd.Ipv4BfDoMplsteHeadSummary.SessionState()
            self.session_state.parent = self


        class SessionState(object):
            """
            Statistics of states for sessions
            
            .. attribute:: down_count
            
            	Number of sessions in down state
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: total_count
            
            	Number of sessions in database
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: unknown_count
            
            	Number of sessions in unknown state
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: up_count
            
            	Number of sessions in up state
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.down_count = None
                self.total_count = None
                self.unknown_count = None
                self.up_count = None

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-summary/Cisco-IOS-XR-ip-bfd-oper:session-state'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.down_count is not None:
                    return True

                if self.total_count is not None:
                    return True

                if self.unknown_count is not None:
                    return True

                if self.up_count is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
                return meta._meta_table['Bfd.Ipv4BfDoMplsteHeadSummary.SessionState']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-bfd-oper:bfd/Cisco-IOS-XR-ip-bfd-oper:ipv4bf-do-mplste-head-summary'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.session_state is not None and self.session_state._has_data():
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
            return meta._meta_table['Bfd.Ipv4BfDoMplsteHeadSummary']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ip-bfd-oper:bfd'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return False

    def _has_data(self):
        if not self.is_config():
            return False
        if self.client_briefs is not None and self.client_briefs._has_data():
            return True

        if self.client_details is not None and self.client_details._has_data():
            return True

        if self.counters is not None and self.counters._has_data():
            return True

        if self.generic_summaries is not None and self.generic_summaries._has_data():
            return True

        if self.ipv4_multi_hop_counters is not None and self.ipv4_multi_hop_counters._has_data():
            return True

        if self.ipv4_multi_hop_multi_paths is not None and self.ipv4_multi_hop_multi_paths._has_data():
            return True

        if self.ipv4_multi_hop_node_location_summaries is not None and self.ipv4_multi_hop_node_location_summaries._has_data():
            return True

        if self.ipv4_multi_hop_session_briefs is not None and self.ipv4_multi_hop_session_briefs._has_data():
            return True

        if self.ipv4_multi_hop_session_details is not None and self.ipv4_multi_hop_session_details._has_data():
            return True

        if self.ipv4_multi_hop_summary is not None and self.ipv4_multi_hop_summary._has_data():
            return True

        if self.ipv4_single_hop_counters is not None and self.ipv4_single_hop_counters._has_data():
            return True

        if self.ipv4_single_hop_location_summaries is not None and self.ipv4_single_hop_location_summaries._has_data():
            return True

        if self.ipv4_single_hop_multi_paths is not None and self.ipv4_single_hop_multi_paths._has_data():
            return True

        if self.ipv4_single_hop_node_location_summaries is not None and self.ipv4_single_hop_node_location_summaries._has_data():
            return True

        if self.ipv4_single_hop_session_briefs is not None and self.ipv4_single_hop_session_briefs._has_data():
            return True

        if self.ipv4_single_hop_session_details is not None and self.ipv4_single_hop_session_details._has_data():
            return True

        if self.ipv4_single_hop_summary is not None and self.ipv4_single_hop_summary._has_data():
            return True

        if self.ipv4bf_do_mplste_head_counters is not None and self.ipv4bf_do_mplste_head_counters._has_data():
            return True

        if self.ipv4bf_do_mplste_head_multi_paths is not None and self.ipv4bf_do_mplste_head_multi_paths._has_data():
            return True

        if self.ipv4bf_do_mplste_head_session_briefs is not None and self.ipv4bf_do_mplste_head_session_briefs._has_data():
            return True

        if self.ipv4bf_do_mplste_head_session_details is not None and self.ipv4bf_do_mplste_head_session_details._has_data():
            return True

        if self.ipv4bf_do_mplste_head_summary is not None and self.ipv4bf_do_mplste_head_summary._has_data():
            return True

        if self.ipv4bf_do_mplste_tail_counters is not None and self.ipv4bf_do_mplste_tail_counters._has_data():
            return True

        if self.ipv4bf_do_mplste_tail_multi_paths is not None and self.ipv4bf_do_mplste_tail_multi_paths._has_data():
            return True

        if self.ipv4bf_do_mplste_tail_session_briefs is not None and self.ipv4bf_do_mplste_tail_session_briefs._has_data():
            return True

        if self.ipv4bf_do_mplste_tail_session_details is not None and self.ipv4bf_do_mplste_tail_session_details._has_data():
            return True

        if self.ipv4bf_do_mplste_tail_summary is not None and self.ipv4bf_do_mplste_tail_summary._has_data():
            return True

        if self.ipv4bfd_mplste_head_summary_nodes is not None and self.ipv4bfd_mplste_head_summary_nodes._has_data():
            return True

        if self.ipv4bfd_mplste_tail_node_summaries is not None and self.ipv4bfd_mplste_tail_node_summaries._has_data():
            return True

        if self.ipv6_multi_hop_counters is not None and self.ipv6_multi_hop_counters._has_data():
            return True

        if self.ipv6_multi_hop_multi_paths is not None and self.ipv6_multi_hop_multi_paths._has_data():
            return True

        if self.ipv6_multi_hop_node_location_summaries is not None and self.ipv6_multi_hop_node_location_summaries._has_data():
            return True

        if self.ipv6_multi_hop_session_briefs is not None and self.ipv6_multi_hop_session_briefs._has_data():
            return True

        if self.ipv6_multi_hop_session_details is not None and self.ipv6_multi_hop_session_details._has_data():
            return True

        if self.ipv6_multi_hop_summary is not None and self.ipv6_multi_hop_summary._has_data():
            return True

        if self.ipv6_single_hop_counters is not None and self.ipv6_single_hop_counters._has_data():
            return True

        if self.ipv6_single_hop_location_summaries is not None and self.ipv6_single_hop_location_summaries._has_data():
            return True

        if self.ipv6_single_hop_multi_paths is not None and self.ipv6_single_hop_multi_paths._has_data():
            return True

        if self.ipv6_single_hop_node_location_summaries is not None and self.ipv6_single_hop_node_location_summaries._has_data():
            return True

        if self.ipv6_single_hop_session_briefs is not None and self.ipv6_single_hop_session_briefs._has_data():
            return True

        if self.ipv6_single_hop_session_details is not None and self.ipv6_single_hop_session_details._has_data():
            return True

        if self.ipv6_single_hop_summary is not None and self.ipv6_single_hop_summary._has_data():
            return True

        if self.label_counters is not None and self.label_counters._has_data():
            return True

        if self.label_multi_paths is not None and self.label_multi_paths._has_data():
            return True

        if self.label_session_briefs is not None and self.label_session_briefs._has_data():
            return True

        if self.label_session_details is not None and self.label_session_details._has_data():
            return True

        if self.label_summary is not None and self.label_summary._has_data():
            return True

        if self.label_summary_nodes is not None and self.label_summary_nodes._has_data():
            return True

        if self.relation_briefs is not None and self.relation_briefs._has_data():
            return True

        if self.relation_details is not None and self.relation_details._has_data():
            return True

        if self.session_briefs is not None and self.session_briefs._has_data():
            return True

        if self.session_details is not None and self.session_details._has_data():
            return True

        if self.session_mibs is not None and self.session_mibs._has_data():
            return True

        if self.summary is not None and self.summary._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_bfd_oper as meta
        return meta._meta_table['Bfd']['meta_info']


