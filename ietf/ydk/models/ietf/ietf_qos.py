""" ietf_qos 

QOS YANG Model

"""


import re
import collections

from enum import Enum

from ydk.types import Empty, YList, YLeafList, DELETE, Decimal64, FixedBitsDict

from ydk.errors import YPYError, YPYModelError



class DscpCodeAllValuesTypeEnum(Enum):
    """
    DscpCodeAllValuesTypeEnum

    dscp\-code\-all\-values\-type

    .. data:: af11 = 0

    	DSCP 10

    .. data:: af12 = 1

    	DSCP 12

    .. data:: af13 = 2

    	DSCP 14

    .. data:: af21 = 3

    	DSCP 18

    .. data:: af22 = 4

    	DSCP 20

    .. data:: af23 = 5

    	DSCP 22

    .. data:: af31 = 6

    	DSCP 26

    .. data:: af32 = 7

    	DSCP 28

    .. data:: af33 = 8

    	DSCP 30

    .. data:: af41 = 9

    	DSCP 34

    .. data:: af42 = 10

    	DSCP 36

    .. data:: af43 = 11

    	DSCP 38

    .. data:: cs0 = 12

    	Class selector 000 000 (0)

    .. data:: cs1 = 13

    	Class Selector 001 000 (8)

    .. data:: cs2 = 14

    	Class Selector 010 000 (16)

    .. data:: cs3 = 15

    	Class Selector 011 000 (24)

    .. data:: cs4 = 16

    	Class Selector 100 000 (32)

    .. data:: cs5 = 17

    	Class Selector 101 000 (40)

    .. data:: cs6 = 18

    	Class Selector 110 000 (48)

    .. data:: cs7 = 19

    	Class Selector 111 000 (56)

    .. data:: df = 20

    	Default forwarding 000 000 (0)

    .. data:: ef = 21

    	Expedited forwarding 101 110 (46)

    .. data:: all = 22

    	All classes

    """

    af11 = 0

    af12 = 1

    af13 = 2

    af21 = 3

    af22 = 4

    af23 = 5

    af31 = 6

    af32 = 7

    af33 = 8

    af41 = 9

    af42 = 10

    af43 = 11

    cs0 = 12

    cs1 = 13

    cs2 = 14

    cs3 = 15

    cs4 = 16

    cs5 = 17

    cs6 = 18

    cs7 = 19

    df = 20

    ef = 21

    all = 22


    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_qos as meta
        return meta._meta_table['DscpCodeAllValuesTypeEnum']



class Qos(object):
    """
    qos
    
    .. attribute:: class_definitions
    
    	class\-definition
    	**type**\:   :py:class:`ClassDefinitions <ydk.models.ietf.ietf_qos.Qos.ClassDefinitions>`
    
    .. attribute:: class_maps
    
    	class\-maps
    	**type**\:   :py:class:`ClassMaps <ydk.models.ietf.ietf_qos.Qos.ClassMaps>`
    
    .. attribute:: congestion_avoidance_maps
    
    	congestion\-avoidance\-maps
    	**type**\:   :py:class:`CongestionAvoidanceMaps <ydk.models.ietf.ietf_qos.Qos.CongestionAvoidanceMaps>`
    
    .. attribute:: policies
    
    	policies
    	**type**\:   :py:class:`Policies <ydk.models.ietf.ietf_qos.Qos.Policies>`
    
    .. attribute:: profiles
    
    	profile
    	**type**\:   :py:class:`Profiles <ydk.models.ietf.ietf_qos.Qos.Profiles>`
    
    .. attribute:: queue_maps
    
    	queue\-maps
    	**type**\:   :py:class:`QueueMaps <ydk.models.ietf.ietf_qos.Qos.QueueMaps>`
    
    

    """

    _prefix = 'qos'
    _revision = '2016-10-20'

    def __init__(self):
        self.class_definitions = Qos.ClassDefinitions()
        self.class_definitions.parent = self
        self.class_maps = Qos.ClassMaps()
        self.class_maps.parent = self
        self.congestion_avoidance_maps = Qos.CongestionAvoidanceMaps()
        self.congestion_avoidance_maps.parent = self
        self.policies = Qos.Policies()
        self.policies.parent = self
        self.profiles = Qos.Profiles()
        self.profiles.parent = self
        self.queue_maps = Qos.QueueMaps()
        self.queue_maps.parent = self


    class ClassDefinitions(object):
        """
        class\-definition
        
        .. attribute:: class_definition
        
        	class\-definition
        	**type**\: list of    :py:class:`ClassDefinition <ydk.models.ietf.ietf_qos.Qos.ClassDefinitions.ClassDefinition>`
        
        

        """

        _prefix = 'qos'
        _revision = '2016-10-20'

        def __init__(self):
            self.parent = None
            self.class_definition = YList()
            self.class_definition.parent = self
            self.class_definition.name = 'class_definition'


        class ClassDefinition(object):
            """
            class\-definition
            
            .. attribute:: name  <key>
            
            	qos\-class\-definition name
            	**type**\:  str
            
            .. attribute:: qos
            
            	qos class
            	**type**\: list of    :py:class:`Qos_ <ydk.models.ietf.ietf_qos.Qos.ClassDefinitions.ClassDefinition.Qos_>`
            
            

            """

            _prefix = 'qos'
            _revision = '2016-10-20'

            def __init__(self):
                self.parent = None
                self.name = None
                self.qos = YList()
                self.qos.parent = self
                self.qos.name = 'qos'


            class Qos_(object):
                """
                qos class
                
                .. attribute:: class_  <key>
                
                	class name
                	**type**\:  str
                
                	**length:** 1..39
                
                	**mandatory**\: True
                
                .. attribute:: dscp_code
                
                	dscp\-code
                	**type**\:  int
                
                	**range:** 1..63
                
                

                """

                _prefix = 'qos'
                _revision = '2016-10-20'

                def __init__(self):
                    self.parent = None
                    self.class_ = None
                    self.dscp_code = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')
                    if self.class_ is None:
                        raise YPYModelError('Key property class_ is None')

                    return self.parent._common_path +'/ietf-qos:qos[ietf-qos:class = ' + str(self.class_) + ']'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.class_ is not None:
                        return True

                    if self.dscp_code is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_qos as meta
                    return meta._meta_table['Qos.ClassDefinitions.ClassDefinition.Qos_']['meta_info']

            @property
            def _common_path(self):
                if self.name is None:
                    raise YPYModelError('Key property name is None')

                return '/ietf-qos:qos/ietf-qos:class-definitions/ietf-qos:class-definition[ietf-qos:name = ' + str(self.name) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return True

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.name is not None:
                    return True

                if self.qos is not None:
                    for child_ref in self.qos:
                        if child_ref._has_data():
                            return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _ietf_qos as meta
                return meta._meta_table['Qos.ClassDefinitions.ClassDefinition']['meta_info']

        @property
        def _common_path(self):

            return '/ietf-qos:qos/ietf-qos:class-definitions'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return True

        def _has_data(self):
            if not self.is_config():
                return False
            if self.class_definition is not None:
                for child_ref in self.class_definition:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.ietf._meta import _ietf_qos as meta
            return meta._meta_table['Qos.ClassDefinitions']['meta_info']


    class ClassMaps(object):
        """
        class\-maps
        
        .. attribute:: class_map
        
        	class\-map
        	**type**\: list of    :py:class:`ClassMap <ydk.models.ietf.ietf_qos.Qos.ClassMaps.ClassMap>`
        
        

        """

        _prefix = 'qos'
        _revision = '2016-10-20'

        def __init__(self):
            self.parent = None
            self.class_map = YList()
            self.class_map.parent = self
            self.class_map.name = 'class_map'


        class ClassMap(object):
            """
            class\-map
            
            .. attribute:: name  <key>
            
            	class\-map\-name
            	**type**\:  str
            
            .. attribute:: atm
            
            	atm
            	**type**\:   :py:class:`Atm <ydk.models.ietf.ietf_qos.Qos.ClassMaps.ClassMap.Atm>`
            
            	**presence node**\: True
            
            .. attribute:: ethernet
            
            	ethernet
            	**type**\:   :py:class:`Ethernet <ydk.models.ietf.ietf_qos.Qos.ClassMaps.ClassMap.Ethernet>`
            
            	**presence node**\: True
            
            .. attribute:: ip
            
            	ip
            	**type**\:   :py:class:`Ip <ydk.models.ietf.ietf_qos.Qos.ClassMaps.ClassMap.Ip>`
            
            	**presence node**\: True
            
            .. attribute:: mpls
            
            	mpls
            	**type**\:   :py:class:`Mpls <ydk.models.ietf.ietf_qos.Qos.ClassMaps.ClassMap.Mpls>`
            
            	**presence node**\: True
            
            

            """

            _prefix = 'qos'
            _revision = '2016-10-20'

            def __init__(self):
                self.parent = None
                self.name = None
                self.atm = None
                self.ethernet = None
                self.ip = None
                self.mpls = None


            class Atm(object):
                """
                atm
                
                .. attribute:: in_
                
                	in
                	**type**\:   :py:class:`In_ <ydk.models.ietf.ietf_qos.Qos.ClassMaps.ClassMap.Atm.In_>`
                
                	**presence node**\: True
                
                .. attribute:: out
                
                	out
                	**type**\:   :py:class:`Out <ydk.models.ietf.ietf_qos.Qos.ClassMaps.ClassMap.Atm.Out>`
                
                	**presence node**\: True
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                

                This class is a :ref:`presence class<presence-class>`

                """

                _prefix = 'qos'
                _revision = '2016-10-20'

                def __init__(self):
                    self.parent = None
                    self._is_presence = True
                    self.in_ = None
                    self.out = None


                class In_(object):
                    """
                    in
                    
                    .. attribute:: atm
                    
                    	atm list
                    	**type**\: list of    :py:class:`Atm_ <ydk.models.ietf.ietf_qos.Qos.ClassMaps.ClassMap.Atm.In_.Atm_>`
                    
                    .. attribute:: _is_presence
                    
                    	Is present if this instance represents presence container else not
                    	**type**\: bool
                    
                    

                    This class is a :ref:`presence class<presence-class>`

                    """

                    _prefix = 'qos'
                    _revision = '2016-10-20'

                    def __init__(self):
                        self.parent = None
                        self._is_presence = True
                        self.atm = YList()
                        self.atm.parent = self
                        self.atm.name = 'atm'


                    class Atm_(object):
                        """
                        atm list
                        
                        .. attribute:: class_  <key>
                        
                        	class
                        	**type**\:  int
                        
                        	**range:** 0..1
                        
                        .. attribute:: to_qos
                        
                        	to\-qos
                        	**type**\:  int
                        
                        	**range:** 0..63
                        
                        .. attribute:: use_ethernet
                        
                        	use\-ethernet
                        	**type**\:  str
                        
                        	**refers to**\:  :py:class:`name <ydk.models.ietf.ietf_qos.Qos.ClassMaps.ClassMap>`
                        
                        .. attribute:: use_ip
                        
                        	use\-ip
                        	**type**\:  str
                        
                        	**refers to**\:  :py:class:`name <ydk.models.ietf.ietf_qos.Qos.ClassMaps.ClassMap>`
                        
                        

                        """

                        _prefix = 'qos'
                        _revision = '2016-10-20'

                        def __init__(self):
                            self.parent = None
                            self.class_ = None
                            self.to_qos = None
                            self.use_ethernet = None
                            self.use_ip = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')
                            if self.class_ is None:
                                raise YPYModelError('Key property class_ is None')

                            return self.parent._common_path +'/ietf-qos:atm[ietf-qos:class = ' + str(self.class_) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.class_ is not None:
                                return True

                            if self.to_qos is not None:
                                return True

                            if self.use_ethernet is not None:
                                return True

                            if self.use_ip is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_qos as meta
                            return meta._meta_table['Qos.ClassMaps.ClassMap.Atm.In_.Atm_']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-qos:in'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self._is_presence:
                            return True
                        if self.atm is not None:
                            for child_ref in self.atm:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_qos as meta
                        return meta._meta_table['Qos.ClassMaps.ClassMap.Atm.In_']['meta_info']


                class Out(object):
                    """
                    out
                    
                    .. attribute:: qos
                    
                    	qos list
                    	**type**\: list of    :py:class:`Qos_ <ydk.models.ietf.ietf_qos.Qos.ClassMaps.ClassMap.Atm.Out.Qos_>`
                    
                    .. attribute:: _is_presence
                    
                    	Is present if this instance represents presence container else not
                    	**type**\: bool
                    
                    

                    This class is a :ref:`presence class<presence-class>`

                    """

                    _prefix = 'qos'
                    _revision = '2016-10-20'

                    def __init__(self):
                        self.parent = None
                        self._is_presence = True
                        self.qos = YList()
                        self.qos.parent = self
                        self.qos.name = 'qos'


                    class Qos_(object):
                        """
                        qos list
                        
                        .. attribute:: dscp_code  <key>
                        
                        	dscp\-code
                        	**type**\:  int
                        
                        	**range:** 0..63
                        
                        .. attribute:: to_atm
                        
                        	to\-atm
                        	**type**\:  int
                        
                        	**range:** 0..1
                        
                        

                        """

                        _prefix = 'qos'
                        _revision = '2016-10-20'

                        def __init__(self):
                            self.parent = None
                            self.dscp_code = None
                            self.to_atm = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')
                            if self.dscp_code is None:
                                raise YPYModelError('Key property dscp_code is None')

                            return self.parent._common_path +'/ietf-qos:qos[ietf-qos:dscp-code = ' + str(self.dscp_code) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.dscp_code is not None:
                                return True

                            if self.to_atm is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_qos as meta
                            return meta._meta_table['Qos.ClassMaps.ClassMap.Atm.Out.Qos_']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-qos:out'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self._is_presence:
                            return True
                        if self.qos is not None:
                            for child_ref in self.qos:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_qos as meta
                        return meta._meta_table['Qos.ClassMaps.ClassMap.Atm.Out']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/ietf-qos:atm'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self._is_presence:
                        return True
                    if self.in_ is not None and self.in_._has_data():
                        return True

                    if self.out is not None and self.out._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_qos as meta
                    return meta._meta_table['Qos.ClassMaps.ClassMap.Atm']['meta_info']


            class Ethernet(object):
                """
                ethernet
                
                .. attribute:: in_
                
                	in
                	**type**\:   :py:class:`In_ <ydk.models.ietf.ietf_qos.Qos.ClassMaps.ClassMap.Ethernet.In_>`
                
                	**presence node**\: True
                
                .. attribute:: out
                
                	out
                	**type**\:   :py:class:`Out <ydk.models.ietf.ietf_qos.Qos.ClassMaps.ClassMap.Ethernet.Out>`
                
                	**presence node**\: True
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                

                This class is a :ref:`presence class<presence-class>`

                """

                _prefix = 'qos'
                _revision = '2016-10-20'

                def __init__(self):
                    self.parent = None
                    self._is_presence = True
                    self.in_ = None
                    self.out = None


                class In_(object):
                    """
                    in
                    
                    .. attribute:: ethernet
                    
                    	ethernet list
                    	**type**\: list of    :py:class:`Ethernet_ <ydk.models.ietf.ietf_qos.Qos.ClassMaps.ClassMap.Ethernet.In_.Ethernet_>`
                    
                    .. attribute:: mapping_schema
                    
                    	mapping\-schema
                    	**type**\:   :py:class:`MappingSchemaEnum <ydk.models.ietf.ietf_qos.Qos.ClassMaps.ClassMap.Ethernet.In_.MappingSchemaEnum>`
                    
                    .. attribute:: _is_presence
                    
                    	Is present if this instance represents presence container else not
                    	**type**\: bool
                    
                    

                    This class is a :ref:`presence class<presence-class>`

                    """

                    _prefix = 'qos'
                    _revision = '2016-10-20'

                    def __init__(self):
                        self.parent = None
                        self._is_presence = True
                        self.ethernet = YList()
                        self.ethernet.parent = self
                        self.ethernet.name = 'ethernet'
                        self.mapping_schema = None

                    class MappingSchemaEnum(Enum):
                        """
                        MappingSchemaEnum

                        mapping\-schema

                        .. data:: Y_5P3D = 0

                        	5P3D

                        .. data:: Y_6P2D = 1

                        	6P2D

                        .. data:: Y_7P1D = 2

                        	7P1D

                        .. data:: Y_8P0D = 3

                        	7P1D

                        """

                        Y_5P3D = 0

                        Y_6P2D = 1

                        Y_7P1D = 2

                        Y_8P0D = 3


                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_qos as meta
                            return meta._meta_table['Qos.ClassMaps.ClassMap.Ethernet.In_.MappingSchemaEnum']



                    class Ethernet_(object):
                        """
                        ethernet list
                        
                        .. attribute:: class_  <key>
                        
                        	class
                        	**type**\:  int
                        
                        	**range:** 0..7
                        
                        .. attribute:: to_qos
                        
                        	to\-qos
                        	**type**\:  int
                        
                        	**range:** 0..63
                        
                        .. attribute:: use_ip
                        
                        	use\-ip
                        	**type**\:  str
                        
                        	**refers to**\:  :py:class:`name <ydk.models.ietf.ietf_qos.Qos.ClassMaps.ClassMap>`
                        
                        

                        """

                        _prefix = 'qos'
                        _revision = '2016-10-20'

                        def __init__(self):
                            self.parent = None
                            self.class_ = None
                            self.to_qos = None
                            self.use_ip = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')
                            if self.class_ is None:
                                raise YPYModelError('Key property class_ is None')

                            return self.parent._common_path +'/ietf-qos:ethernet[ietf-qos:class = ' + str(self.class_) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.class_ is not None:
                                return True

                            if self.to_qos is not None:
                                return True

                            if self.use_ip is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_qos as meta
                            return meta._meta_table['Qos.ClassMaps.ClassMap.Ethernet.In_.Ethernet_']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-qos:in'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self._is_presence:
                            return True
                        if self.ethernet is not None:
                            for child_ref in self.ethernet:
                                if child_ref._has_data():
                                    return True

                        if self.mapping_schema is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_qos as meta
                        return meta._meta_table['Qos.ClassMaps.ClassMap.Ethernet.In_']['meta_info']


                class Out(object):
                    """
                    out
                    
                    .. attribute:: mapping_schema
                    
                    	mapping\-schema
                    	**type**\:   :py:class:`MappingSchemaEnum <ydk.models.ietf.ietf_qos.Qos.ClassMaps.ClassMap.Ethernet.Out.MappingSchemaEnum>`
                    
                    .. attribute:: qos
                    
                    	qos list
                    	**type**\: list of    :py:class:`Qos_ <ydk.models.ietf.ietf_qos.Qos.ClassMaps.ClassMap.Ethernet.Out.Qos_>`
                    
                    .. attribute:: _is_presence
                    
                    	Is present if this instance represents presence container else not
                    	**type**\: bool
                    
                    

                    This class is a :ref:`presence class<presence-class>`

                    """

                    _prefix = 'qos'
                    _revision = '2016-10-20'

                    def __init__(self):
                        self.parent = None
                        self._is_presence = True
                        self.mapping_schema = None
                        self.qos = YList()
                        self.qos.parent = self
                        self.qos.name = 'qos'

                    class MappingSchemaEnum(Enum):
                        """
                        MappingSchemaEnum

                        mapping\-schema

                        .. data:: Y_5P3D = 0

                        	5P3D

                        .. data:: Y_6P2D = 1

                        	6P2D

                        .. data:: Y_7P1D = 2

                        	7P1D

                        .. data:: Y_8P0D = 3

                        	7P1D

                        """

                        Y_5P3D = 0

                        Y_6P2D = 1

                        Y_7P1D = 2

                        Y_8P0D = 3


                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_qos as meta
                            return meta._meta_table['Qos.ClassMaps.ClassMap.Ethernet.Out.MappingSchemaEnum']



                    class Qos_(object):
                        """
                        qos list
                        
                        .. attribute:: dscp_code  <key>
                        
                        	dscp\-code
                        	**type**\:  int
                        
                        	**range:** 0..63
                        
                        .. attribute:: to_ethernet
                        
                        	to\-ethernet
                        	**type**\:  int
                        
                        	**range:** 0..7
                        
                        .. attribute:: use_ethernet
                        
                        	use\-ethernet
                        	**type**\:  str
                        
                        	**refers to**\:  :py:class:`name <ydk.models.ietf.ietf_qos.Qos.ClassMaps.ClassMap>`
                        
                        

                        """

                        _prefix = 'qos'
                        _revision = '2016-10-20'

                        def __init__(self):
                            self.parent = None
                            self.dscp_code = None
                            self.to_ethernet = None
                            self.use_ethernet = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')
                            if self.dscp_code is None:
                                raise YPYModelError('Key property dscp_code is None')

                            return self.parent._common_path +'/ietf-qos:qos[ietf-qos:dscp-code = ' + str(self.dscp_code) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.dscp_code is not None:
                                return True

                            if self.to_ethernet is not None:
                                return True

                            if self.use_ethernet is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_qos as meta
                            return meta._meta_table['Qos.ClassMaps.ClassMap.Ethernet.Out.Qos_']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-qos:out'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self._is_presence:
                            return True
                        if self.mapping_schema is not None:
                            return True

                        if self.qos is not None:
                            for child_ref in self.qos:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_qos as meta
                        return meta._meta_table['Qos.ClassMaps.ClassMap.Ethernet.Out']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/ietf-qos:ethernet'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self._is_presence:
                        return True
                    if self.in_ is not None and self.in_._has_data():
                        return True

                    if self.out is not None and self.out._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_qos as meta
                    return meta._meta_table['Qos.ClassMaps.ClassMap.Ethernet']['meta_info']


            class Ip(object):
                """
                ip
                
                .. attribute:: in_
                
                	in direction
                	**type**\:   :py:class:`In_ <ydk.models.ietf.ietf_qos.Qos.ClassMaps.ClassMap.Ip.In_>`
                
                	**presence node**\: True
                
                .. attribute:: out
                
                	out direction
                	**type**\:   :py:class:`Out <ydk.models.ietf.ietf_qos.Qos.ClassMaps.ClassMap.Ip.Out>`
                
                	**presence node**\: True
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                

                This class is a :ref:`presence class<presence-class>`

                """

                _prefix = 'qos'
                _revision = '2016-10-20'

                def __init__(self):
                    self.parent = None
                    self._is_presence = True
                    self.in_ = None
                    self.out = None


                class In_(object):
                    """
                    in direction
                    
                    .. attribute:: ip
                    
                    	ip list
                    	**type**\: list of    :py:class:`Ip_ <ydk.models.ietf.ietf_qos.Qos.ClassMaps.ClassMap.Ip.In_.Ip_>`
                    
                    .. attribute:: _is_presence
                    
                    	Is present if this instance represents presence container else not
                    	**type**\: bool
                    
                    

                    This class is a :ref:`presence class<presence-class>`

                    """

                    _prefix = 'qos'
                    _revision = '2016-10-20'

                    def __init__(self):
                        self.parent = None
                        self._is_presence = True
                        self.ip = YList()
                        self.ip.parent = self
                        self.ip.name = 'ip'


                    class Ip_(object):
                        """
                        ip list
                        
                        .. attribute:: dscp_code  <key>
                        
                        	dscp\-code
                        	**type**\:  int
                        
                        	**range:** 0..63
                        
                        .. attribute:: to_qos
                        
                        	to\-qos
                        	**type**\:  int
                        
                        	**range:** 0..63
                        
                        

                        """

                        _prefix = 'qos'
                        _revision = '2016-10-20'

                        def __init__(self):
                            self.parent = None
                            self.dscp_code = None
                            self.to_qos = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')
                            if self.dscp_code is None:
                                raise YPYModelError('Key property dscp_code is None')

                            return self.parent._common_path +'/ietf-qos:ip[ietf-qos:dscp-code = ' + str(self.dscp_code) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.dscp_code is not None:
                                return True

                            if self.to_qos is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_qos as meta
                            return meta._meta_table['Qos.ClassMaps.ClassMap.Ip.In_.Ip_']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-qos:in'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self._is_presence:
                            return True
                        if self.ip is not None:
                            for child_ref in self.ip:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_qos as meta
                        return meta._meta_table['Qos.ClassMaps.ClassMap.Ip.In_']['meta_info']


                class Out(object):
                    """
                    out direction
                    
                    .. attribute:: qos
                    
                    	qos list
                    	**type**\: list of    :py:class:`Qos_ <ydk.models.ietf.ietf_qos.Qos.ClassMaps.ClassMap.Ip.Out.Qos_>`
                    
                    .. attribute:: _is_presence
                    
                    	Is present if this instance represents presence container else not
                    	**type**\: bool
                    
                    

                    This class is a :ref:`presence class<presence-class>`

                    """

                    _prefix = 'qos'
                    _revision = '2016-10-20'

                    def __init__(self):
                        self.parent = None
                        self._is_presence = True
                        self.qos = YList()
                        self.qos.parent = self
                        self.qos.name = 'qos'


                    class Qos_(object):
                        """
                        qos list
                        
                        .. attribute:: dscp_code  <key>
                        
                        	dscp\-code
                        	**type**\:  int
                        
                        	**range:** 0..63
                        
                        .. attribute:: to_ip
                        
                        	to\-ip
                        	**type**\:  int
                        
                        	**range:** 0..63
                        
                        

                        """

                        _prefix = 'qos'
                        _revision = '2016-10-20'

                        def __init__(self):
                            self.parent = None
                            self.dscp_code = None
                            self.to_ip = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')
                            if self.dscp_code is None:
                                raise YPYModelError('Key property dscp_code is None')

                            return self.parent._common_path +'/ietf-qos:qos[ietf-qos:dscp-code = ' + str(self.dscp_code) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.dscp_code is not None:
                                return True

                            if self.to_ip is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_qos as meta
                            return meta._meta_table['Qos.ClassMaps.ClassMap.Ip.Out.Qos_']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-qos:out'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self._is_presence:
                            return True
                        if self.qos is not None:
                            for child_ref in self.qos:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_qos as meta
                        return meta._meta_table['Qos.ClassMaps.ClassMap.Ip.Out']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/ietf-qos:ip'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self._is_presence:
                        return True
                    if self.in_ is not None and self.in_._has_data():
                        return True

                    if self.out is not None and self.out._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_qos as meta
                    return meta._meta_table['Qos.ClassMaps.ClassMap.Ip']['meta_info']


            class Mpls(object):
                """
                mpls
                
                .. attribute:: in_
                
                	in direction
                	**type**\:   :py:class:`In_ <ydk.models.ietf.ietf_qos.Qos.ClassMaps.ClassMap.Mpls.In_>`
                
                	**presence node**\: True
                
                .. attribute:: out
                
                	out
                	**type**\:   :py:class:`Out <ydk.models.ietf.ietf_qos.Qos.ClassMaps.ClassMap.Mpls.Out>`
                
                	**presence node**\: True
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                

                This class is a :ref:`presence class<presence-class>`

                """

                _prefix = 'qos'
                _revision = '2016-10-20'

                def __init__(self):
                    self.parent = None
                    self._is_presence = True
                    self.in_ = None
                    self.out = None


                class In_(object):
                    """
                    in direction
                    
                    .. attribute:: mapping_schema
                    
                    	mapping\-schema
                    	**type**\:   :py:class:`MappingSchemaEnum <ydk.models.ietf.ietf_qos.Qos.ClassMaps.ClassMap.Mpls.In_.MappingSchemaEnum>`
                    
                    .. attribute:: mpls
                    
                    	mpls list
                    	**type**\: list of    :py:class:`Mpls_ <ydk.models.ietf.ietf_qos.Qos.ClassMaps.ClassMap.Mpls.In_.Mpls_>`
                    
                    .. attribute:: _is_presence
                    
                    	Is present if this instance represents presence container else not
                    	**type**\: bool
                    
                    

                    This class is a :ref:`presence class<presence-class>`

                    """

                    _prefix = 'qos'
                    _revision = '2016-10-20'

                    def __init__(self):
                        self.parent = None
                        self._is_presence = True
                        self.mapping_schema = None
                        self.mpls = YList()
                        self.mpls.parent = self
                        self.mpls.name = 'mpls'

                    class MappingSchemaEnum(Enum):
                        """
                        MappingSchemaEnum

                        mapping\-schema

                        .. data:: Y_5P3D = 0

                        	5P3D

                        .. data:: Y_6P2D = 1

                        	6P2D

                        .. data:: Y_7P1D = 2

                        	7P1D

                        .. data:: Y_8P0D = 3

                        	7P1D

                        """

                        Y_5P3D = 0

                        Y_6P2D = 1

                        Y_7P1D = 2

                        Y_8P0D = 3


                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_qos as meta
                            return meta._meta_table['Qos.ClassMaps.ClassMap.Mpls.In_.MappingSchemaEnum']



                    class Mpls_(object):
                        """
                        mpls list
                        
                        .. attribute:: exp_value  <key>
                        
                        	exp\-value
                        	**type**\:  int
                        
                        	**range:** 0..7
                        
                        .. attribute:: to_qos
                        
                        	to\-qos
                        	**type**\:  int
                        
                        	**range:** 0..63
                        
                        .. attribute:: use_ethernet
                        
                        	use\-ethernet
                        	**type**\:  str
                        
                        	**refers to**\:  :py:class:`name <ydk.models.ietf.ietf_qos.Qos.ClassMaps.ClassMap>`
                        
                        .. attribute:: use_ip
                        
                        	use\-ip
                        	**type**\:  str
                        
                        	**refers to**\:  :py:class:`name <ydk.models.ietf.ietf_qos.Qos.ClassMaps.ClassMap>`
                        
                        

                        """

                        _prefix = 'qos'
                        _revision = '2016-10-20'

                        def __init__(self):
                            self.parent = None
                            self.exp_value = None
                            self.to_qos = None
                            self.use_ethernet = None
                            self.use_ip = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')
                            if self.exp_value is None:
                                raise YPYModelError('Key property exp_value is None')

                            return self.parent._common_path +'/ietf-qos:mpls[ietf-qos:exp-value = ' + str(self.exp_value) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.exp_value is not None:
                                return True

                            if self.to_qos is not None:
                                return True

                            if self.use_ethernet is not None:
                                return True

                            if self.use_ip is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_qos as meta
                            return meta._meta_table['Qos.ClassMaps.ClassMap.Mpls.In_.Mpls_']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-qos:in'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self._is_presence:
                            return True
                        if self.mapping_schema is not None:
                            return True

                        if self.mpls is not None:
                            for child_ref in self.mpls:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_qos as meta
                        return meta._meta_table['Qos.ClassMaps.ClassMap.Mpls.In_']['meta_info']


                class Out(object):
                    """
                    out
                    
                    .. attribute:: mapping_schema
                    
                    	mapping\-schema
                    	**type**\:   :py:class:`MappingSchemaEnum <ydk.models.ietf.ietf_qos.Qos.ClassMaps.ClassMap.Mpls.Out.MappingSchemaEnum>`
                    
                    .. attribute:: qos
                    
                    	qos list
                    	**type**\: list of    :py:class:`Qos_ <ydk.models.ietf.ietf_qos.Qos.ClassMaps.ClassMap.Mpls.Out.Qos_>`
                    
                    .. attribute:: _is_presence
                    
                    	Is present if this instance represents presence container else not
                    	**type**\: bool
                    
                    

                    This class is a :ref:`presence class<presence-class>`

                    """

                    _prefix = 'qos'
                    _revision = '2016-10-20'

                    def __init__(self):
                        self.parent = None
                        self._is_presence = True
                        self.mapping_schema = None
                        self.qos = YList()
                        self.qos.parent = self
                        self.qos.name = 'qos'

                    class MappingSchemaEnum(Enum):
                        """
                        MappingSchemaEnum

                        mapping\-schema

                        .. data:: Y_5P3D = 0

                        	5P3D

                        .. data:: Y_6P2D = 1

                        	6P2D

                        .. data:: Y_7P1D = 2

                        	7P1D

                        .. data:: Y_8P0D = 3

                        	7P1D

                        """

                        Y_5P3D = 0

                        Y_6P2D = 1

                        Y_7P1D = 2

                        Y_8P0D = 3


                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_qos as meta
                            return meta._meta_table['Qos.ClassMaps.ClassMap.Mpls.Out.MappingSchemaEnum']



                    class Qos_(object):
                        """
                        qos list
                        
                        .. attribute:: dscp_code  <key>
                        
                        	dscp\-code
                        	**type**\:  int
                        
                        	**range:** 0..63
                        
                        .. attribute:: to_mpls
                        
                        	to\-mpls
                        	**type**\:  int
                        
                        	**range:** 0..7
                        
                        .. attribute:: use_mpls
                        
                        	use\-mpls
                        	**type**\:  str
                        
                        	**refers to**\:  :py:class:`name <ydk.models.ietf.ietf_qos.Qos.ClassMaps.ClassMap>`
                        
                        

                        """

                        _prefix = 'qos'
                        _revision = '2016-10-20'

                        def __init__(self):
                            self.parent = None
                            self.dscp_code = None
                            self.to_mpls = None
                            self.use_mpls = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')
                            if self.dscp_code is None:
                                raise YPYModelError('Key property dscp_code is None')

                            return self.parent._common_path +'/ietf-qos:qos[ietf-qos:dscp-code = ' + str(self.dscp_code) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.dscp_code is not None:
                                return True

                            if self.to_mpls is not None:
                                return True

                            if self.use_mpls is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_qos as meta
                            return meta._meta_table['Qos.ClassMaps.ClassMap.Mpls.Out.Qos_']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-qos:out'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self._is_presence:
                            return True
                        if self.mapping_schema is not None:
                            return True

                        if self.qos is not None:
                            for child_ref in self.qos:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_qos as meta
                        return meta._meta_table['Qos.ClassMaps.ClassMap.Mpls.Out']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/ietf-qos:mpls'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self._is_presence:
                        return True
                    if self.in_ is not None and self.in_._has_data():
                        return True

                    if self.out is not None and self.out._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_qos as meta
                    return meta._meta_table['Qos.ClassMaps.ClassMap.Mpls']['meta_info']

            @property
            def _common_path(self):
                if self.name is None:
                    raise YPYModelError('Key property name is None')

                return '/ietf-qos:qos/ietf-qos:class-maps/ietf-qos:class-map[ietf-qos:name = ' + str(self.name) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return True

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.name is not None:
                    return True

                if self.atm is not None and self.atm._has_data():
                    return True

                if self.ethernet is not None and self.ethernet._has_data():
                    return True

                if self.ip is not None and self.ip._has_data():
                    return True

                if self.mpls is not None and self.mpls._has_data():
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _ietf_qos as meta
                return meta._meta_table['Qos.ClassMaps.ClassMap']['meta_info']

        @property
        def _common_path(self):

            return '/ietf-qos:qos/ietf-qos:class-maps'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return True

        def _has_data(self):
            if not self.is_config():
                return False
            if self.class_map is not None:
                for child_ref in self.class_map:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.ietf._meta import _ietf_qos as meta
            return meta._meta_table['Qos.ClassMaps']['meta_info']


    class CongestionAvoidanceMaps(object):
        """
        congestion\-avoidance\-maps
        
        .. attribute:: congestion_avoidance_map
        
        	congestion\-avoidance\-map
        	**type**\: list of    :py:class:`CongestionAvoidanceMap <ydk.models.ietf.ietf_qos.Qos.CongestionAvoidanceMaps.CongestionAvoidanceMap>`
        
        

        """

        _prefix = 'qos'
        _revision = '2016-10-20'

        def __init__(self):
            self.parent = None
            self.congestion_avoidance_map = YList()
            self.congestion_avoidance_map.parent = self
            self.congestion_avoidance_map.name = 'congestion_avoidance_map'


        class CongestionAvoidanceMap(object):
            """
            congestion\-avoidance\-map
            
            .. attribute:: name  <key>
            
            	congestion\-avoidance\-map name
            	**type**\:  str
            
            .. attribute:: mdrr
            
            	mdrr
            	**type**\:   :py:class:`Mdrr <ydk.models.ietf.ietf_qos.Qos.CongestionAvoidanceMaps.CongestionAvoidanceMap.Mdrr>`
            
            	**presence node**\: True
            
            .. attribute:: pwfq
            
            	pwfq
            	**type**\:   :py:class:`Pwfq <ydk.models.ietf.ietf_qos.Qos.CongestionAvoidanceMaps.CongestionAvoidanceMap.Pwfq>`
            
            	**presence node**\: True
            
            

            """

            _prefix = 'qos'
            _revision = '2016-10-20'

            def __init__(self):
                self.parent = None
                self.name = None
                self.mdrr = None
                self.pwfq = None


            class Mdrr(object):
                """
                mdrr
                
                .. attribute:: queue
                
                	queue
                	**type**\: list of    :py:class:`Queue <ydk.models.ietf.ietf_qos.Qos.CongestionAvoidanceMaps.CongestionAvoidanceMap.Mdrr.Queue>`
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                

                This class is a :ref:`presence class<presence-class>`

                """

                _prefix = 'qos'
                _revision = '2016-10-20'

                def __init__(self):
                    self.parent = None
                    self._is_presence = True
                    self.queue = YList()
                    self.queue.parent = self
                    self.queue.name = 'queue'


                class Queue(object):
                    """
                    queue
                    
                    .. attribute:: num  <key>
                    
                    	queue number
                    	**type**\:  int
                    
                    	**range:** 0..7
                    
                    .. attribute:: default
                    
                    	default drop profile
                    	**type**\:   :py:class:`Default <ydk.models.ietf.ietf_qos.Qos.CongestionAvoidanceMaps.CongestionAvoidanceMap.Mdrr.Queue.Default>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: depth
                    
                    	depth
                    	**type**\:  int
                    
                    	**range:** 1..65536
                    
                    .. attribute:: exponential_weight
                    
                    	exponential\-weight
                    	**type**\:  int
                    
                    	**range:** 1..15
                    
                    .. attribute:: profile_1
                    
                    	drop profile\-1
                    	**type**\:   :py:class:`Profile1 <ydk.models.ietf.ietf_qos.Qos.CongestionAvoidanceMaps.CongestionAvoidanceMap.Mdrr.Queue.Profile1>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: profile_2
                    
                    	drop profile\-2
                    	**type**\:   :py:class:`Profile2 <ydk.models.ietf.ietf_qos.Qos.CongestionAvoidanceMaps.CongestionAvoidanceMap.Mdrr.Queue.Profile2>`
                    
                    	**presence node**\: True
                    
                    

                    """

                    _prefix = 'qos'
                    _revision = '2016-10-20'

                    def __init__(self):
                        self.parent = None
                        self.num = None
                        self.default = None
                        self.depth = None
                        self.exponential_weight = None
                        self.profile_1 = None
                        self.profile_2 = None


                    class Default(object):
                        """
                        default drop profile
                        
                        .. attribute:: max_threshold
                        
                        	max\-threshold
                        	**type**\:  int
                        
                        	**range:** 2..10240
                        
                        	**mandatory**\: True
                        
                        .. attribute:: min_threshold
                        
                        	min\-threshold
                        	**type**\:  int
                        
                        	**range:** 1..10240
                        
                        	**mandatory**\: True
                        
                        .. attribute:: probability
                        
                        	probability
                        	**type**\:  int
                        
                        	**range:** 1..1023
                        
                        	**mandatory**\: True
                        
                        .. attribute:: _is_presence
                        
                        	Is present if this instance represents presence container else not
                        	**type**\: bool
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'qos'
                        _revision = '2016-10-20'

                        def __init__(self):
                            self.parent = None
                            self._is_presence = True
                            self.max_threshold = None
                            self.min_threshold = None
                            self.probability = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-qos:default'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self._is_presence:
                                return True
                            if self.max_threshold is not None:
                                return True

                            if self.min_threshold is not None:
                                return True

                            if self.probability is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_qos as meta
                            return meta._meta_table['Qos.CongestionAvoidanceMaps.CongestionAvoidanceMap.Mdrr.Queue.Default']['meta_info']


                    class Profile1(object):
                        """
                        drop profile\-1
                        
                        .. attribute:: dscp
                        
                        	dscp
                        	**type**\: one of the below types:
                        
                        	**type**\:  list of   :py:class:`DscpEnum <ydk.models.ietf.ietf_qos.Qos.CongestionAvoidanceMaps.CongestionAvoidanceMap.Pwfq.CardFamily3.Queue.Profile2.DscpEnum>`
                        
                        
                        ----
                        	**type**\:  list of int
                        
                        	**range:** 1..7 \| 9..None \| 11..None \| 13..None \| 15..None \| 17..None \| 19..None \| 21..None \| 23..None \| 25..None \| 27..None \| 29..None \| 31..None \| 33..None \| 35..None \| 37..None \| 39..None \| 41..45 \| 47..None \| 49..55 \| 57..63
                        
                        
                        ----
                        .. attribute:: max_threshold
                        
                        	max\-threshold
                        	**type**\:  int
                        
                        	**range:** 2..10240
                        
                        	**mandatory**\: True
                        
                        .. attribute:: min_threshold
                        
                        	min\-threshold
                        	**type**\:  int
                        
                        	**range:** 1..10240
                        
                        	**mandatory**\: True
                        
                        .. attribute:: probability
                        
                        	probability
                        	**type**\:  int
                        
                        	**range:** 1..1023
                        
                        	**mandatory**\: True
                        
                        .. attribute:: _is_presence
                        
                        	Is present if this instance represents presence container else not
                        	**type**\: bool
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'qos'
                        _revision = '2016-10-20'

                        def __init__(self):
                            self.parent = None
                            self._is_presence = True
                            self.dscp = YLeafList()
                            self.dscp.parent = self
                            self.dscp.name = 'dscp'
                            self.max_threshold = None
                            self.min_threshold = None
                            self.probability = None

                        class DscpEnum(Enum):
                            """
                            DscpEnum

                            dscp

                            .. data:: af11 = 0

                            	DSCP 10

                            .. data:: af12 = 1

                            	DSCP 12

                            .. data:: af13 = 2

                            	DSCP 14

                            .. data:: af21 = 3

                            	DSCP 18

                            .. data:: af22 = 4

                            	DSCP 20

                            .. data:: af23 = 5

                            	DSCP 22

                            .. data:: af31 = 6

                            	DSCP 26

                            .. data:: af32 = 7

                            	DSCP 28

                            .. data:: af33 = 8

                            	DSCP 30

                            .. data:: af41 = 9

                            	DSCP 34

                            .. data:: af42 = 10

                            	DSCP 36

                            .. data:: af43 = 11

                            	DSCP 38

                            .. data:: cs1 = 12

                            	Class Selector 001 000 (8)

                            .. data:: cs2 = 13

                            	Class Selector 010 000 (16)

                            .. data:: cs3 = 14

                            	Class Selector 011 000 (24)

                            .. data:: cs4 = 15

                            	Class Selector 100 000 (32)

                            .. data:: cs5 = 16

                            	Class Selector 101 000 (40)

                            .. data:: cs6 = 17

                            	Class Selector 110 000 (48)

                            .. data:: cs7 = 18

                            	Class Selector 111 000 (56)

                            .. data:: df = 19

                            	Default forwarding 000 000 (0). This is synonymous to cs0

                            .. data:: ef = 20

                            	Expedited forwarding 101 110 (46)

                            """

                            af11 = 0

                            af12 = 1

                            af13 = 2

                            af21 = 3

                            af22 = 4

                            af23 = 5

                            af31 = 6

                            af32 = 7

                            af33 = 8

                            af41 = 9

                            af42 = 10

                            af43 = 11

                            cs1 = 12

                            cs2 = 13

                            cs3 = 14

                            cs4 = 15

                            cs5 = 16

                            cs6 = 17

                            cs7 = 18

                            df = 19

                            ef = 20


                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.CongestionAvoidanceMaps.CongestionAvoidanceMap.Mdrr.Queue.Profile1.DscpEnum']


                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-qos:profile-1'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self._is_presence:
                                return True
                            if self.dscp is not None:
                                for child in self.dscp:
                                    if child is not None:
                                        return True

                            if self.max_threshold is not None:
                                return True

                            if self.min_threshold is not None:
                                return True

                            if self.probability is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_qos as meta
                            return meta._meta_table['Qos.CongestionAvoidanceMaps.CongestionAvoidanceMap.Mdrr.Queue.Profile1']['meta_info']


                    class Profile2(object):
                        """
                        drop profile\-2
                        
                        .. attribute:: dscp
                        
                        	dscp
                        	**type**\: one of the below types:
                        
                        	**type**\:  list of   :py:class:`DscpEnum <ydk.models.ietf.ietf_qos.Qos.CongestionAvoidanceMaps.CongestionAvoidanceMap.Pwfq.CardFamily3.Queue.Profile2.DscpEnum>`
                        
                        
                        ----
                        	**type**\:  list of int
                        
                        	**range:** 1..7 \| 9..None \| 11..None \| 13..None \| 15..None \| 17..None \| 19..None \| 21..None \| 23..None \| 25..None \| 27..None \| 29..None \| 31..None \| 33..None \| 35..None \| 37..None \| 39..None \| 41..45 \| 47..None \| 49..55 \| 57..63
                        
                        
                        ----
                        .. attribute:: max_threshold
                        
                        	max\-threshold
                        	**type**\:  int
                        
                        	**range:** 2..10240
                        
                        	**mandatory**\: True
                        
                        .. attribute:: min_threshold
                        
                        	min\-threshold
                        	**type**\:  int
                        
                        	**range:** 1..10240
                        
                        	**mandatory**\: True
                        
                        .. attribute:: probability
                        
                        	probability
                        	**type**\:  int
                        
                        	**range:** 1..1023
                        
                        	**mandatory**\: True
                        
                        .. attribute:: _is_presence
                        
                        	Is present if this instance represents presence container else not
                        	**type**\: bool
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'qos'
                        _revision = '2016-10-20'

                        def __init__(self):
                            self.parent = None
                            self._is_presence = True
                            self.dscp = YLeafList()
                            self.dscp.parent = self
                            self.dscp.name = 'dscp'
                            self.max_threshold = None
                            self.min_threshold = None
                            self.probability = None

                        class DscpEnum(Enum):
                            """
                            DscpEnum

                            dscp

                            .. data:: af11 = 0

                            	DSCP 10

                            .. data:: af12 = 1

                            	DSCP 12

                            .. data:: af13 = 2

                            	DSCP 14

                            .. data:: af21 = 3

                            	DSCP 18

                            .. data:: af22 = 4

                            	DSCP 20

                            .. data:: af23 = 5

                            	DSCP 22

                            .. data:: af31 = 6

                            	DSCP 26

                            .. data:: af32 = 7

                            	DSCP 28

                            .. data:: af33 = 8

                            	DSCP 30

                            .. data:: af41 = 9

                            	DSCP 34

                            .. data:: af42 = 10

                            	DSCP 36

                            .. data:: af43 = 11

                            	DSCP 38

                            .. data:: cs1 = 12

                            	Class Selector 001 000 (8)

                            .. data:: cs2 = 13

                            	Class Selector 010 000 (16)

                            .. data:: cs3 = 14

                            	Class Selector 011 000 (24)

                            .. data:: cs4 = 15

                            	Class Selector 100 000 (32)

                            .. data:: cs5 = 16

                            	Class Selector 101 000 (40)

                            .. data:: cs6 = 17

                            	Class Selector 110 000 (48)

                            .. data:: cs7 = 18

                            	Class Selector 111 000 (56)

                            .. data:: df = 19

                            	Default forwarding 000 000 (0). This is synonymous to cs0

                            .. data:: ef = 20

                            	Expedited forwarding 101 110 (46)

                            """

                            af11 = 0

                            af12 = 1

                            af13 = 2

                            af21 = 3

                            af22 = 4

                            af23 = 5

                            af31 = 6

                            af32 = 7

                            af33 = 8

                            af41 = 9

                            af42 = 10

                            af43 = 11

                            cs1 = 12

                            cs2 = 13

                            cs3 = 14

                            cs4 = 15

                            cs5 = 16

                            cs6 = 17

                            cs7 = 18

                            df = 19

                            ef = 20


                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.CongestionAvoidanceMaps.CongestionAvoidanceMap.Mdrr.Queue.Profile2.DscpEnum']


                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-qos:profile-2'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self._is_presence:
                                return True
                            if self.dscp is not None:
                                for child in self.dscp:
                                    if child is not None:
                                        return True

                            if self.max_threshold is not None:
                                return True

                            if self.min_threshold is not None:
                                return True

                            if self.probability is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_qos as meta
                            return meta._meta_table['Qos.CongestionAvoidanceMaps.CongestionAvoidanceMap.Mdrr.Queue.Profile2']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')
                        if self.num is None:
                            raise YPYModelError('Key property num is None')

                        return self.parent._common_path +'/ietf-qos:queue[ietf-qos:num = ' + str(self.num) + ']'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.num is not None:
                            return True

                        if self.default is not None and self.default._has_data():
                            return True

                        if self.depth is not None:
                            return True

                        if self.exponential_weight is not None:
                            return True

                        if self.profile_1 is not None and self.profile_1._has_data():
                            return True

                        if self.profile_2 is not None and self.profile_2._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_qos as meta
                        return meta._meta_table['Qos.CongestionAvoidanceMaps.CongestionAvoidanceMap.Mdrr.Queue']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/ietf-qos:mdrr'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self._is_presence:
                        return True
                    if self.queue is not None:
                        for child_ref in self.queue:
                            if child_ref._has_data():
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_qos as meta
                    return meta._meta_table['Qos.CongestionAvoidanceMaps.CongestionAvoidanceMap.Mdrr']['meta_info']


            class Pwfq(object):
                """
                pwfq
                
                .. attribute:: card_family_1
                
                	card\-family\-1
                	**type**\:   :py:class:`CardFamily1 <ydk.models.ietf.ietf_qos.Qos.CongestionAvoidanceMaps.CongestionAvoidanceMap.Pwfq.CardFamily1>`
                
                .. attribute:: card_family_2
                
                	card\-family\-2
                	**type**\:   :py:class:`CardFamily2 <ydk.models.ietf.ietf_qos.Qos.CongestionAvoidanceMaps.CongestionAvoidanceMap.Pwfq.CardFamily2>`
                
                .. attribute:: card_family_3
                
                	card\-family\-3
                	**type**\:   :py:class:`CardFamily3 <ydk.models.ietf.ietf_qos.Qos.CongestionAvoidanceMaps.CongestionAvoidanceMap.Pwfq.CardFamily3>`
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                

                This class is a :ref:`presence class<presence-class>`

                """

                _prefix = 'qos'
                _revision = '2016-10-20'

                def __init__(self):
                    self.parent = None
                    self._is_presence = True
                    self.card_family_1 = Qos.CongestionAvoidanceMaps.CongestionAvoidanceMap.Pwfq.CardFamily1()
                    self.card_family_1.parent = self
                    self.card_family_2 = Qos.CongestionAvoidanceMaps.CongestionAvoidanceMap.Pwfq.CardFamily2()
                    self.card_family_2.parent = self
                    self.card_family_3 = Qos.CongestionAvoidanceMaps.CongestionAvoidanceMap.Pwfq.CardFamily3()
                    self.card_family_3.parent = self


                class CardFamily1(object):
                    """
                    card\-family\-1
                    
                    .. attribute:: queue
                    
                    	queue
                    	**type**\: list of    :py:class:`Queue <ydk.models.ietf.ietf_qos.Qos.CongestionAvoidanceMaps.CongestionAvoidanceMap.Pwfq.CardFamily1.Queue>`
                    
                    

                    """

                    _prefix = 'qos'
                    _revision = '2016-10-20'

                    def __init__(self):
                        self.parent = None
                        self.queue = YList()
                        self.queue.parent = self
                        self.queue.name = 'queue'


                    class Queue(object):
                        """
                        queue
                        
                        .. attribute:: num  <key>
                        
                        	queue number
                        	**type**\:  int
                        
                        	**range:** 0..7
                        
                        .. attribute:: default
                        
                        	default drop profile
                        	**type**\:   :py:class:`Default <ydk.models.ietf.ietf_qos.Qos.CongestionAvoidanceMaps.CongestionAvoidanceMap.Pwfq.CardFamily1.Queue.Default>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: depth
                        
                        	depth
                        	**type**\:  int
                        
                        	**range:** 1..65536
                        
                        .. attribute:: profile_1
                        
                        	drop profile\-1
                        	**type**\:   :py:class:`Profile1 <ydk.models.ietf.ietf_qos.Qos.CongestionAvoidanceMaps.CongestionAvoidanceMap.Pwfq.CardFamily1.Queue.Profile1>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: profile_2
                        
                        	drop profile\-2
                        	**type**\:   :py:class:`Profile2 <ydk.models.ietf.ietf_qos.Qos.CongestionAvoidanceMaps.CongestionAvoidanceMap.Pwfq.CardFamily1.Queue.Profile2>`
                        
                        	**presence node**\: True
                        
                        

                        """

                        _prefix = 'qos'
                        _revision = '2016-10-20'

                        def __init__(self):
                            self.parent = None
                            self.num = None
                            self.default = None
                            self.depth = None
                            self.profile_1 = None
                            self.profile_2 = None


                        class Default(object):
                            """
                            default drop profile
                            
                            .. attribute:: max_threshold
                            
                            	max\-threshold
                            	**type**\:  int
                            
                            	**range:** 2..10240
                            
                            	**mandatory**\: True
                            
                            .. attribute:: min_threshold
                            
                            	min\-threshold
                            	**type**\:  int
                            
                            	**range:** 1..10240
                            
                            	**mandatory**\: True
                            
                            .. attribute:: probability
                            
                            	probability
                            	**type**\:  int
                            
                            	**range:** 1..1023
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'qos'
                            _revision = '2016-10-20'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.max_threshold = None
                                self.min_threshold = None
                                self.probability = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-qos:default'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.max_threshold is not None:
                                    return True

                                if self.min_threshold is not None:
                                    return True

                                if self.probability is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.CongestionAvoidanceMaps.CongestionAvoidanceMap.Pwfq.CardFamily1.Queue.Default']['meta_info']


                        class Profile1(object):
                            """
                            drop profile\-1
                            
                            .. attribute:: dscp
                            
                            	dscp
                            	**type**\: one of the below types:
                            
                            	**type**\:  list of   :py:class:`DscpEnum <ydk.models.ietf.ietf_qos.Qos.CongestionAvoidanceMaps.CongestionAvoidanceMap.Pwfq.CardFamily3.Queue.Profile2.DscpEnum>`
                            
                            
                            ----
                            	**type**\:  list of int
                            
                            	**range:** 1..7 \| 9..None \| 11..None \| 13..None \| 15..None \| 17..None \| 19..None \| 21..None \| 23..None \| 25..None \| 27..None \| 29..None \| 31..None \| 33..None \| 35..None \| 37..None \| 39..None \| 41..45 \| 47..None \| 49..55 \| 57..63
                            
                            
                            ----
                            .. attribute:: max_threshold
                            
                            	max\-threshold
                            	**type**\:  int
                            
                            	**range:** 2..10240
                            
                            	**mandatory**\: True
                            
                            .. attribute:: min_threshold
                            
                            	min\-threshold
                            	**type**\:  int
                            
                            	**range:** 1..10240
                            
                            	**mandatory**\: True
                            
                            .. attribute:: probability
                            
                            	probability
                            	**type**\:  int
                            
                            	**range:** 1..1023
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'qos'
                            _revision = '2016-10-20'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.dscp = YLeafList()
                                self.dscp.parent = self
                                self.dscp.name = 'dscp'
                                self.max_threshold = None
                                self.min_threshold = None
                                self.probability = None

                            class DscpEnum(Enum):
                                """
                                DscpEnum

                                dscp

                                .. data:: af11 = 0

                                	DSCP 10

                                .. data:: af12 = 1

                                	DSCP 12

                                .. data:: af13 = 2

                                	DSCP 14

                                .. data:: af21 = 3

                                	DSCP 18

                                .. data:: af22 = 4

                                	DSCP 20

                                .. data:: af23 = 5

                                	DSCP 22

                                .. data:: af31 = 6

                                	DSCP 26

                                .. data:: af32 = 7

                                	DSCP 28

                                .. data:: af33 = 8

                                	DSCP 30

                                .. data:: af41 = 9

                                	DSCP 34

                                .. data:: af42 = 10

                                	DSCP 36

                                .. data:: af43 = 11

                                	DSCP 38

                                .. data:: cs1 = 12

                                	Class Selector 001 000 (8)

                                .. data:: cs2 = 13

                                	Class Selector 010 000 (16)

                                .. data:: cs3 = 14

                                	Class Selector 011 000 (24)

                                .. data:: cs4 = 15

                                	Class Selector 100 000 (32)

                                .. data:: cs5 = 16

                                	Class Selector 101 000 (40)

                                .. data:: cs6 = 17

                                	Class Selector 110 000 (48)

                                .. data:: cs7 = 18

                                	Class Selector 111 000 (56)

                                .. data:: df = 19

                                	Default forwarding 000 000 (0). This is synonymous to cs0

                                .. data:: ef = 20

                                	Expedited forwarding 101 110 (46)

                                """

                                af11 = 0

                                af12 = 1

                                af13 = 2

                                af21 = 3

                                af22 = 4

                                af23 = 5

                                af31 = 6

                                af32 = 7

                                af33 = 8

                                af41 = 9

                                af42 = 10

                                af43 = 11

                                cs1 = 12

                                cs2 = 13

                                cs3 = 14

                                cs4 = 15

                                cs5 = 16

                                cs6 = 17

                                cs7 = 18

                                df = 19

                                ef = 20


                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.CongestionAvoidanceMaps.CongestionAvoidanceMap.Pwfq.CardFamily1.Queue.Profile1.DscpEnum']


                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-qos:profile-1'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.dscp is not None:
                                    for child in self.dscp:
                                        if child is not None:
                                            return True

                                if self.max_threshold is not None:
                                    return True

                                if self.min_threshold is not None:
                                    return True

                                if self.probability is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.CongestionAvoidanceMaps.CongestionAvoidanceMap.Pwfq.CardFamily1.Queue.Profile1']['meta_info']


                        class Profile2(object):
                            """
                            drop profile\-2
                            
                            .. attribute:: dscp
                            
                            	dscp
                            	**type**\: one of the below types:
                            
                            	**type**\:  list of   :py:class:`DscpEnum <ydk.models.ietf.ietf_qos.Qos.CongestionAvoidanceMaps.CongestionAvoidanceMap.Pwfq.CardFamily3.Queue.Profile2.DscpEnum>`
                            
                            
                            ----
                            	**type**\:  list of int
                            
                            	**range:** 1..7 \| 9..None \| 11..None \| 13..None \| 15..None \| 17..None \| 19..None \| 21..None \| 23..None \| 25..None \| 27..None \| 29..None \| 31..None \| 33..None \| 35..None \| 37..None \| 39..None \| 41..45 \| 47..None \| 49..55 \| 57..63
                            
                            
                            ----
                            .. attribute:: max_threshold
                            
                            	max\-threshold
                            	**type**\:  int
                            
                            	**range:** 2..10240
                            
                            	**mandatory**\: True
                            
                            .. attribute:: min_threshold
                            
                            	min\-threshold
                            	**type**\:  int
                            
                            	**range:** 1..10240
                            
                            	**mandatory**\: True
                            
                            .. attribute:: probability
                            
                            	probability
                            	**type**\:  int
                            
                            	**range:** 1..1023
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'qos'
                            _revision = '2016-10-20'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.dscp = YLeafList()
                                self.dscp.parent = self
                                self.dscp.name = 'dscp'
                                self.max_threshold = None
                                self.min_threshold = None
                                self.probability = None

                            class DscpEnum(Enum):
                                """
                                DscpEnum

                                dscp

                                .. data:: af11 = 0

                                	DSCP 10

                                .. data:: af12 = 1

                                	DSCP 12

                                .. data:: af13 = 2

                                	DSCP 14

                                .. data:: af21 = 3

                                	DSCP 18

                                .. data:: af22 = 4

                                	DSCP 20

                                .. data:: af23 = 5

                                	DSCP 22

                                .. data:: af31 = 6

                                	DSCP 26

                                .. data:: af32 = 7

                                	DSCP 28

                                .. data:: af33 = 8

                                	DSCP 30

                                .. data:: af41 = 9

                                	DSCP 34

                                .. data:: af42 = 10

                                	DSCP 36

                                .. data:: af43 = 11

                                	DSCP 38

                                .. data:: cs1 = 12

                                	Class Selector 001 000 (8)

                                .. data:: cs2 = 13

                                	Class Selector 010 000 (16)

                                .. data:: cs3 = 14

                                	Class Selector 011 000 (24)

                                .. data:: cs4 = 15

                                	Class Selector 100 000 (32)

                                .. data:: cs5 = 16

                                	Class Selector 101 000 (40)

                                .. data:: cs6 = 17

                                	Class Selector 110 000 (48)

                                .. data:: cs7 = 18

                                	Class Selector 111 000 (56)

                                .. data:: df = 19

                                	Default forwarding 000 000 (0). This is synonymous to cs0

                                .. data:: ef = 20

                                	Expedited forwarding 101 110 (46)

                                """

                                af11 = 0

                                af12 = 1

                                af13 = 2

                                af21 = 3

                                af22 = 4

                                af23 = 5

                                af31 = 6

                                af32 = 7

                                af33 = 8

                                af41 = 9

                                af42 = 10

                                af43 = 11

                                cs1 = 12

                                cs2 = 13

                                cs3 = 14

                                cs4 = 15

                                cs5 = 16

                                cs6 = 17

                                cs7 = 18

                                df = 19

                                ef = 20


                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.CongestionAvoidanceMaps.CongestionAvoidanceMap.Pwfq.CardFamily1.Queue.Profile2.DscpEnum']


                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-qos:profile-2'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.dscp is not None:
                                    for child in self.dscp:
                                        if child is not None:
                                            return True

                                if self.max_threshold is not None:
                                    return True

                                if self.min_threshold is not None:
                                    return True

                                if self.probability is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.CongestionAvoidanceMaps.CongestionAvoidanceMap.Pwfq.CardFamily1.Queue.Profile2']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')
                            if self.num is None:
                                raise YPYModelError('Key property num is None')

                            return self.parent._common_path +'/ietf-qos:queue[ietf-qos:num = ' + str(self.num) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.num is not None:
                                return True

                            if self.default is not None and self.default._has_data():
                                return True

                            if self.depth is not None:
                                return True

                            if self.profile_1 is not None and self.profile_1._has_data():
                                return True

                            if self.profile_2 is not None and self.profile_2._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_qos as meta
                            return meta._meta_table['Qos.CongestionAvoidanceMaps.CongestionAvoidanceMap.Pwfq.CardFamily1.Queue']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-qos:card-family-1'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.queue is not None:
                            for child_ref in self.queue:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_qos as meta
                        return meta._meta_table['Qos.CongestionAvoidanceMaps.CongestionAvoidanceMap.Pwfq.CardFamily1']['meta_info']


                class CardFamily2(object):
                    """
                    card\-family\-2
                    
                    .. attribute:: queue
                    
                    	queue
                    	**type**\: list of    :py:class:`Queue <ydk.models.ietf.ietf_qos.Qos.CongestionAvoidanceMaps.CongestionAvoidanceMap.Pwfq.CardFamily2.Queue>`
                    
                    

                    """

                    _prefix = 'qos'
                    _revision = '2016-10-20'

                    def __init__(self):
                        self.parent = None
                        self.queue = YList()
                        self.queue.parent = self
                        self.queue.name = 'queue'


                    class Queue(object):
                        """
                        queue
                        
                        .. attribute:: num  <key>
                        
                        	queue number
                        	**type**\:  int
                        
                        	**range:** 0..7
                        
                        .. attribute:: default
                        
                        	default drop profile
                        	**type**\:   :py:class:`Default <ydk.models.ietf.ietf_qos.Qos.CongestionAvoidanceMaps.CongestionAvoidanceMap.Pwfq.CardFamily2.Queue.Default>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: depth
                        
                        	depth
                        	**type**\:  int
                        
                        	**range:** 1..65536
                        
                        .. attribute:: exponential_weight
                        
                        	exponential\-weight
                        	**type**\:  int
                        
                        	**range:** 1..15
                        
                        .. attribute:: profile_1
                        
                        	drop profile\-1
                        	**type**\:   :py:class:`Profile1 <ydk.models.ietf.ietf_qos.Qos.CongestionAvoidanceMaps.CongestionAvoidanceMap.Pwfq.CardFamily2.Queue.Profile1>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: profile_2
                        
                        	drop profile\-2
                        	**type**\:   :py:class:`Profile2 <ydk.models.ietf.ietf_qos.Qos.CongestionAvoidanceMaps.CongestionAvoidanceMap.Pwfq.CardFamily2.Queue.Profile2>`
                        
                        	**presence node**\: True
                        
                        

                        """

                        _prefix = 'qos'
                        _revision = '2016-10-20'

                        def __init__(self):
                            self.parent = None
                            self.num = None
                            self.default = None
                            self.depth = None
                            self.exponential_weight = None
                            self.profile_1 = None
                            self.profile_2 = None


                        class Default(object):
                            """
                            default drop profile
                            
                            .. attribute:: max_threshold
                            
                            	max\-threshold
                            	**type**\:  int
                            
                            	**range:** 2..10240
                            
                            	**mandatory**\: True
                            
                            .. attribute:: min_threshold
                            
                            	min\-threshold
                            	**type**\:  int
                            
                            	**range:** 1..10240
                            
                            	**mandatory**\: True
                            
                            .. attribute:: probability
                            
                            	probability
                            	**type**\:  int
                            
                            	**range:** 1..1023
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'qos'
                            _revision = '2016-10-20'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.max_threshold = None
                                self.min_threshold = None
                                self.probability = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-qos:default'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.max_threshold is not None:
                                    return True

                                if self.min_threshold is not None:
                                    return True

                                if self.probability is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.CongestionAvoidanceMaps.CongestionAvoidanceMap.Pwfq.CardFamily2.Queue.Default']['meta_info']


                        class Profile1(object):
                            """
                            drop profile\-1
                            
                            .. attribute:: dscp
                            
                            	dscp
                            	**type**\: one of the below types:
                            
                            	**type**\:  list of   :py:class:`DscpEnum <ydk.models.ietf.ietf_qos.Qos.CongestionAvoidanceMaps.CongestionAvoidanceMap.Pwfq.CardFamily3.Queue.Profile2.DscpEnum>`
                            
                            
                            ----
                            	**type**\:  list of int
                            
                            	**range:** 1..7 \| 9..None \| 11..None \| 13..None \| 15..None \| 17..None \| 19..None \| 21..None \| 23..None \| 25..None \| 27..None \| 29..None \| 31..None \| 33..None \| 35..None \| 37..None \| 39..None \| 41..45 \| 47..None \| 49..55 \| 57..63
                            
                            
                            ----
                            .. attribute:: max_threshold
                            
                            	max\-threshold
                            	**type**\:  int
                            
                            	**range:** 2..10240
                            
                            	**mandatory**\: True
                            
                            .. attribute:: min_threshold
                            
                            	min\-threshold
                            	**type**\:  int
                            
                            	**range:** 1..10240
                            
                            	**mandatory**\: True
                            
                            .. attribute:: probability
                            
                            	probability
                            	**type**\:  int
                            
                            	**range:** 1..1023
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'qos'
                            _revision = '2016-10-20'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.dscp = YLeafList()
                                self.dscp.parent = self
                                self.dscp.name = 'dscp'
                                self.max_threshold = None
                                self.min_threshold = None
                                self.probability = None

                            class DscpEnum(Enum):
                                """
                                DscpEnum

                                dscp

                                .. data:: af11 = 0

                                	DSCP 10

                                .. data:: af12 = 1

                                	DSCP 12

                                .. data:: af13 = 2

                                	DSCP 14

                                .. data:: af21 = 3

                                	DSCP 18

                                .. data:: af22 = 4

                                	DSCP 20

                                .. data:: af23 = 5

                                	DSCP 22

                                .. data:: af31 = 6

                                	DSCP 26

                                .. data:: af32 = 7

                                	DSCP 28

                                .. data:: af33 = 8

                                	DSCP 30

                                .. data:: af41 = 9

                                	DSCP 34

                                .. data:: af42 = 10

                                	DSCP 36

                                .. data:: af43 = 11

                                	DSCP 38

                                .. data:: cs1 = 12

                                	Class Selector 001 000 (8)

                                .. data:: cs2 = 13

                                	Class Selector 010 000 (16)

                                .. data:: cs3 = 14

                                	Class Selector 011 000 (24)

                                .. data:: cs4 = 15

                                	Class Selector 100 000 (32)

                                .. data:: cs5 = 16

                                	Class Selector 101 000 (40)

                                .. data:: cs6 = 17

                                	Class Selector 110 000 (48)

                                .. data:: cs7 = 18

                                	Class Selector 111 000 (56)

                                .. data:: df = 19

                                	Default forwarding 000 000 (0). This is synonymous to cs0

                                .. data:: ef = 20

                                	Expedited forwarding 101 110 (46)

                                """

                                af11 = 0

                                af12 = 1

                                af13 = 2

                                af21 = 3

                                af22 = 4

                                af23 = 5

                                af31 = 6

                                af32 = 7

                                af33 = 8

                                af41 = 9

                                af42 = 10

                                af43 = 11

                                cs1 = 12

                                cs2 = 13

                                cs3 = 14

                                cs4 = 15

                                cs5 = 16

                                cs6 = 17

                                cs7 = 18

                                df = 19

                                ef = 20


                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.CongestionAvoidanceMaps.CongestionAvoidanceMap.Pwfq.CardFamily2.Queue.Profile1.DscpEnum']


                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-qos:profile-1'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.dscp is not None:
                                    for child in self.dscp:
                                        if child is not None:
                                            return True

                                if self.max_threshold is not None:
                                    return True

                                if self.min_threshold is not None:
                                    return True

                                if self.probability is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.CongestionAvoidanceMaps.CongestionAvoidanceMap.Pwfq.CardFamily2.Queue.Profile1']['meta_info']


                        class Profile2(object):
                            """
                            drop profile\-2
                            
                            .. attribute:: dscp
                            
                            	dscp
                            	**type**\: one of the below types:
                            
                            	**type**\:  list of   :py:class:`DscpEnum <ydk.models.ietf.ietf_qos.Qos.CongestionAvoidanceMaps.CongestionAvoidanceMap.Pwfq.CardFamily3.Queue.Profile2.DscpEnum>`
                            
                            
                            ----
                            	**type**\:  list of int
                            
                            	**range:** 1..7 \| 9..None \| 11..None \| 13..None \| 15..None \| 17..None \| 19..None \| 21..None \| 23..None \| 25..None \| 27..None \| 29..None \| 31..None \| 33..None \| 35..None \| 37..None \| 39..None \| 41..45 \| 47..None \| 49..55 \| 57..63
                            
                            
                            ----
                            .. attribute:: max_threshold
                            
                            	max\-threshold
                            	**type**\:  int
                            
                            	**range:** 2..10240
                            
                            	**mandatory**\: True
                            
                            .. attribute:: min_threshold
                            
                            	min\-threshold
                            	**type**\:  int
                            
                            	**range:** 1..10240
                            
                            	**mandatory**\: True
                            
                            .. attribute:: probability
                            
                            	probability
                            	**type**\:  int
                            
                            	**range:** 1..1023
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'qos'
                            _revision = '2016-10-20'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.dscp = YLeafList()
                                self.dscp.parent = self
                                self.dscp.name = 'dscp'
                                self.max_threshold = None
                                self.min_threshold = None
                                self.probability = None

                            class DscpEnum(Enum):
                                """
                                DscpEnum

                                dscp

                                .. data:: af11 = 0

                                	DSCP 10

                                .. data:: af12 = 1

                                	DSCP 12

                                .. data:: af13 = 2

                                	DSCP 14

                                .. data:: af21 = 3

                                	DSCP 18

                                .. data:: af22 = 4

                                	DSCP 20

                                .. data:: af23 = 5

                                	DSCP 22

                                .. data:: af31 = 6

                                	DSCP 26

                                .. data:: af32 = 7

                                	DSCP 28

                                .. data:: af33 = 8

                                	DSCP 30

                                .. data:: af41 = 9

                                	DSCP 34

                                .. data:: af42 = 10

                                	DSCP 36

                                .. data:: af43 = 11

                                	DSCP 38

                                .. data:: cs1 = 12

                                	Class Selector 001 000 (8)

                                .. data:: cs2 = 13

                                	Class Selector 010 000 (16)

                                .. data:: cs3 = 14

                                	Class Selector 011 000 (24)

                                .. data:: cs4 = 15

                                	Class Selector 100 000 (32)

                                .. data:: cs5 = 16

                                	Class Selector 101 000 (40)

                                .. data:: cs6 = 17

                                	Class Selector 110 000 (48)

                                .. data:: cs7 = 18

                                	Class Selector 111 000 (56)

                                .. data:: df = 19

                                	Default forwarding 000 000 (0). This is synonymous to cs0

                                .. data:: ef = 20

                                	Expedited forwarding 101 110 (46)

                                """

                                af11 = 0

                                af12 = 1

                                af13 = 2

                                af21 = 3

                                af22 = 4

                                af23 = 5

                                af31 = 6

                                af32 = 7

                                af33 = 8

                                af41 = 9

                                af42 = 10

                                af43 = 11

                                cs1 = 12

                                cs2 = 13

                                cs3 = 14

                                cs4 = 15

                                cs5 = 16

                                cs6 = 17

                                cs7 = 18

                                df = 19

                                ef = 20


                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.CongestionAvoidanceMaps.CongestionAvoidanceMap.Pwfq.CardFamily2.Queue.Profile2.DscpEnum']


                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-qos:profile-2'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.dscp is not None:
                                    for child in self.dscp:
                                        if child is not None:
                                            return True

                                if self.max_threshold is not None:
                                    return True

                                if self.min_threshold is not None:
                                    return True

                                if self.probability is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.CongestionAvoidanceMaps.CongestionAvoidanceMap.Pwfq.CardFamily2.Queue.Profile2']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')
                            if self.num is None:
                                raise YPYModelError('Key property num is None')

                            return self.parent._common_path +'/ietf-qos:queue[ietf-qos:num = ' + str(self.num) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.num is not None:
                                return True

                            if self.default is not None and self.default._has_data():
                                return True

                            if self.depth is not None:
                                return True

                            if self.exponential_weight is not None:
                                return True

                            if self.profile_1 is not None and self.profile_1._has_data():
                                return True

                            if self.profile_2 is not None and self.profile_2._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_qos as meta
                            return meta._meta_table['Qos.CongestionAvoidanceMaps.CongestionAvoidanceMap.Pwfq.CardFamily2.Queue']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-qos:card-family-2'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.queue is not None:
                            for child_ref in self.queue:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_qos as meta
                        return meta._meta_table['Qos.CongestionAvoidanceMaps.CongestionAvoidanceMap.Pwfq.CardFamily2']['meta_info']


                class CardFamily3(object):
                    """
                    card\-family\-3
                    
                    .. attribute:: queue
                    
                    	queue
                    	**type**\: list of    :py:class:`Queue <ydk.models.ietf.ietf_qos.Qos.CongestionAvoidanceMaps.CongestionAvoidanceMap.Pwfq.CardFamily3.Queue>`
                    
                    

                    """

                    _prefix = 'qos'
                    _revision = '2016-10-20'

                    def __init__(self):
                        self.parent = None
                        self.queue = YList()
                        self.queue.parent = self
                        self.queue.name = 'queue'


                    class Queue(object):
                        """
                        queue
                        
                        .. attribute:: num  <key>
                        
                        	queue number
                        	**type**\:  int
                        
                        	**range:** 0..7
                        
                        .. attribute:: average_packet_size
                        
                        	Packet size must be multiples of 128
                        	**type**\:  int
                        
                        	**range:** 128..9600
                        
                        .. attribute:: default
                        
                        	default drop profile
                        	**type**\:   :py:class:`Default <ydk.models.ietf.ietf_qos.Qos.CongestionAvoidanceMaps.CongestionAvoidanceMap.Pwfq.CardFamily3.Queue.Default>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: depth
                        
                        	depth
                        	**type**\:  int
                        
                        	**range:** 1..65536
                        
                        .. attribute:: exponential_weight
                        
                        	exponential\-weight
                        	**type**\:  int
                        
                        	**range:** 1..15
                        
                        .. attribute:: profile_1
                        
                        	drop profile\-1
                        	**type**\:   :py:class:`Profile1 <ydk.models.ietf.ietf_qos.Qos.CongestionAvoidanceMaps.CongestionAvoidanceMap.Pwfq.CardFamily3.Queue.Profile1>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: profile_2
                        
                        	drop profile\-2
                        	**type**\:   :py:class:`Profile2 <ydk.models.ietf.ietf_qos.Qos.CongestionAvoidanceMaps.CongestionAvoidanceMap.Pwfq.CardFamily3.Queue.Profile2>`
                        
                        	**presence node**\: True
                        
                        

                        """

                        _prefix = 'qos'
                        _revision = '2016-10-20'

                        def __init__(self):
                            self.parent = None
                            self.num = None
                            self.average_packet_size = None
                            self.default = None
                            self.depth = None
                            self.exponential_weight = None
                            self.profile_1 = None
                            self.profile_2 = None


                        class Default(object):
                            """
                            default drop profile
                            
                            .. attribute:: max_threshold
                            
                            	max\-threshold
                            	**type**\:  int
                            
                            	**range:** 2..10240
                            
                            	**mandatory**\: True
                            
                            .. attribute:: min_threshold
                            
                            	min\-threshold
                            	**type**\:  int
                            
                            	**range:** 1..10240
                            
                            	**mandatory**\: True
                            
                            .. attribute:: probability
                            
                            	probability
                            	**type**\:  int
                            
                            	**range:** 1..1023
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'qos'
                            _revision = '2016-10-20'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.max_threshold = None
                                self.min_threshold = None
                                self.probability = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-qos:default'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.max_threshold is not None:
                                    return True

                                if self.min_threshold is not None:
                                    return True

                                if self.probability is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.CongestionAvoidanceMaps.CongestionAvoidanceMap.Pwfq.CardFamily3.Queue.Default']['meta_info']


                        class Profile1(object):
                            """
                            drop profile\-1
                            
                            .. attribute:: dscp
                            
                            	dscp
                            	**type**\: one of the below types:
                            
                            	**type**\:  list of   :py:class:`DscpEnum <ydk.models.ietf.ietf_qos.Qos.CongestionAvoidanceMaps.CongestionAvoidanceMap.Pwfq.CardFamily3.Queue.Profile2.DscpEnum>`
                            
                            
                            ----
                            	**type**\:  list of int
                            
                            	**range:** 1..7 \| 9..None \| 11..None \| 13..None \| 15..None \| 17..None \| 19..None \| 21..None \| 23..None \| 25..None \| 27..None \| 29..None \| 31..None \| 33..None \| 35..None \| 37..None \| 39..None \| 41..45 \| 47..None \| 49..55 \| 57..63
                            
                            
                            ----
                            .. attribute:: max_threshold
                            
                            	max\-threshold
                            	**type**\:  int
                            
                            	**range:** 2..10240
                            
                            	**mandatory**\: True
                            
                            .. attribute:: min_threshold
                            
                            	min\-threshold
                            	**type**\:  int
                            
                            	**range:** 1..10240
                            
                            	**mandatory**\: True
                            
                            .. attribute:: probability
                            
                            	probability
                            	**type**\:  int
                            
                            	**range:** 1..1023
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'qos'
                            _revision = '2016-10-20'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.dscp = YLeafList()
                                self.dscp.parent = self
                                self.dscp.name = 'dscp'
                                self.max_threshold = None
                                self.min_threshold = None
                                self.probability = None

                            class DscpEnum(Enum):
                                """
                                DscpEnum

                                dscp

                                .. data:: af11 = 0

                                	DSCP 10

                                .. data:: af12 = 1

                                	DSCP 12

                                .. data:: af13 = 2

                                	DSCP 14

                                .. data:: af21 = 3

                                	DSCP 18

                                .. data:: af22 = 4

                                	DSCP 20

                                .. data:: af23 = 5

                                	DSCP 22

                                .. data:: af31 = 6

                                	DSCP 26

                                .. data:: af32 = 7

                                	DSCP 28

                                .. data:: af33 = 8

                                	DSCP 30

                                .. data:: af41 = 9

                                	DSCP 34

                                .. data:: af42 = 10

                                	DSCP 36

                                .. data:: af43 = 11

                                	DSCP 38

                                .. data:: cs1 = 12

                                	Class Selector 001 000 (8)

                                .. data:: cs2 = 13

                                	Class Selector 010 000 (16)

                                .. data:: cs3 = 14

                                	Class Selector 011 000 (24)

                                .. data:: cs4 = 15

                                	Class Selector 100 000 (32)

                                .. data:: cs5 = 16

                                	Class Selector 101 000 (40)

                                .. data:: cs6 = 17

                                	Class Selector 110 000 (48)

                                .. data:: cs7 = 18

                                	Class Selector 111 000 (56)

                                .. data:: df = 19

                                	Default forwarding 000 000 (0). This is synonymous to cs0

                                .. data:: ef = 20

                                	Expedited forwarding 101 110 (46)

                                """

                                af11 = 0

                                af12 = 1

                                af13 = 2

                                af21 = 3

                                af22 = 4

                                af23 = 5

                                af31 = 6

                                af32 = 7

                                af33 = 8

                                af41 = 9

                                af42 = 10

                                af43 = 11

                                cs1 = 12

                                cs2 = 13

                                cs3 = 14

                                cs4 = 15

                                cs5 = 16

                                cs6 = 17

                                cs7 = 18

                                df = 19

                                ef = 20


                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.CongestionAvoidanceMaps.CongestionAvoidanceMap.Pwfq.CardFamily3.Queue.Profile1.DscpEnum']


                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-qos:profile-1'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.dscp is not None:
                                    for child in self.dscp:
                                        if child is not None:
                                            return True

                                if self.max_threshold is not None:
                                    return True

                                if self.min_threshold is not None:
                                    return True

                                if self.probability is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.CongestionAvoidanceMaps.CongestionAvoidanceMap.Pwfq.CardFamily3.Queue.Profile1']['meta_info']


                        class Profile2(object):
                            """
                            drop profile\-2
                            
                            .. attribute:: dscp
                            
                            	dscp
                            	**type**\: one of the below types:
                            
                            	**type**\:  list of   :py:class:`DscpEnum <ydk.models.ietf.ietf_qos.Qos.CongestionAvoidanceMaps.CongestionAvoidanceMap.Pwfq.CardFamily3.Queue.Profile2.DscpEnum>`
                            
                            
                            ----
                            	**type**\:  list of int
                            
                            	**range:** 1..7 \| 9..None \| 11..None \| 13..None \| 15..None \| 17..None \| 19..None \| 21..None \| 23..None \| 25..None \| 27..None \| 29..None \| 31..None \| 33..None \| 35..None \| 37..None \| 39..None \| 41..45 \| 47..None \| 49..55 \| 57..63
                            
                            
                            ----
                            .. attribute:: max_threshold
                            
                            	max\-threshold
                            	**type**\:  int
                            
                            	**range:** 2..10240
                            
                            	**mandatory**\: True
                            
                            .. attribute:: min_threshold
                            
                            	min\-threshold
                            	**type**\:  int
                            
                            	**range:** 1..10240
                            
                            	**mandatory**\: True
                            
                            .. attribute:: probability
                            
                            	probability
                            	**type**\:  int
                            
                            	**range:** 1..1023
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'qos'
                            _revision = '2016-10-20'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.dscp = YLeafList()
                                self.dscp.parent = self
                                self.dscp.name = 'dscp'
                                self.max_threshold = None
                                self.min_threshold = None
                                self.probability = None

                            class DscpEnum(Enum):
                                """
                                DscpEnum

                                dscp

                                .. data:: af11 = 0

                                	DSCP 10

                                .. data:: af12 = 1

                                	DSCP 12

                                .. data:: af13 = 2

                                	DSCP 14

                                .. data:: af21 = 3

                                	DSCP 18

                                .. data:: af22 = 4

                                	DSCP 20

                                .. data:: af23 = 5

                                	DSCP 22

                                .. data:: af31 = 6

                                	DSCP 26

                                .. data:: af32 = 7

                                	DSCP 28

                                .. data:: af33 = 8

                                	DSCP 30

                                .. data:: af41 = 9

                                	DSCP 34

                                .. data:: af42 = 10

                                	DSCP 36

                                .. data:: af43 = 11

                                	DSCP 38

                                .. data:: cs1 = 12

                                	Class Selector 001 000 (8)

                                .. data:: cs2 = 13

                                	Class Selector 010 000 (16)

                                .. data:: cs3 = 14

                                	Class Selector 011 000 (24)

                                .. data:: cs4 = 15

                                	Class Selector 100 000 (32)

                                .. data:: cs5 = 16

                                	Class Selector 101 000 (40)

                                .. data:: cs6 = 17

                                	Class Selector 110 000 (48)

                                .. data:: cs7 = 18

                                	Class Selector 111 000 (56)

                                .. data:: df = 19

                                	Default forwarding 000 000 (0). This is synonymous to cs0

                                .. data:: ef = 20

                                	Expedited forwarding 101 110 (46)

                                """

                                af11 = 0

                                af12 = 1

                                af13 = 2

                                af21 = 3

                                af22 = 4

                                af23 = 5

                                af31 = 6

                                af32 = 7

                                af33 = 8

                                af41 = 9

                                af42 = 10

                                af43 = 11

                                cs1 = 12

                                cs2 = 13

                                cs3 = 14

                                cs4 = 15

                                cs5 = 16

                                cs6 = 17

                                cs7 = 18

                                df = 19

                                ef = 20


                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.CongestionAvoidanceMaps.CongestionAvoidanceMap.Pwfq.CardFamily3.Queue.Profile2.DscpEnum']


                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-qos:profile-2'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.dscp is not None:
                                    for child in self.dscp:
                                        if child is not None:
                                            return True

                                if self.max_threshold is not None:
                                    return True

                                if self.min_threshold is not None:
                                    return True

                                if self.probability is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.CongestionAvoidanceMaps.CongestionAvoidanceMap.Pwfq.CardFamily3.Queue.Profile2']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')
                            if self.num is None:
                                raise YPYModelError('Key property num is None')

                            return self.parent._common_path +'/ietf-qos:queue[ietf-qos:num = ' + str(self.num) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.num is not None:
                                return True

                            if self.average_packet_size is not None:
                                return True

                            if self.default is not None and self.default._has_data():
                                return True

                            if self.depth is not None:
                                return True

                            if self.exponential_weight is not None:
                                return True

                            if self.profile_1 is not None and self.profile_1._has_data():
                                return True

                            if self.profile_2 is not None and self.profile_2._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_qos as meta
                            return meta._meta_table['Qos.CongestionAvoidanceMaps.CongestionAvoidanceMap.Pwfq.CardFamily3.Queue']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-qos:card-family-3'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.queue is not None:
                            for child_ref in self.queue:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_qos as meta
                        return meta._meta_table['Qos.CongestionAvoidanceMaps.CongestionAvoidanceMap.Pwfq.CardFamily3']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/ietf-qos:pwfq'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self._is_presence:
                        return True
                    if self.card_family_1 is not None and self.card_family_1._has_data():
                        return True

                    if self.card_family_2 is not None and self.card_family_2._has_data():
                        return True

                    if self.card_family_3 is not None and self.card_family_3._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_qos as meta
                    return meta._meta_table['Qos.CongestionAvoidanceMaps.CongestionAvoidanceMap.Pwfq']['meta_info']

            @property
            def _common_path(self):
                if self.name is None:
                    raise YPYModelError('Key property name is None')

                return '/ietf-qos:qos/ietf-qos:congestion-avoidance-maps/ietf-qos:congestion-avoidance-map[ietf-qos:name = ' + str(self.name) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return True

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.name is not None:
                    return True

                if self.mdrr is not None and self.mdrr._has_data():
                    return True

                if self.pwfq is not None and self.pwfq._has_data():
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _ietf_qos as meta
                return meta._meta_table['Qos.CongestionAvoidanceMaps.CongestionAvoidanceMap']['meta_info']

        @property
        def _common_path(self):

            return '/ietf-qos:qos/ietf-qos:congestion-avoidance-maps'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return True

        def _has_data(self):
            if not self.is_config():
                return False
            if self.congestion_avoidance_map is not None:
                for child_ref in self.congestion_avoidance_map:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.ietf._meta import _ietf_qos as meta
            return meta._meta_table['Qos.CongestionAvoidanceMaps']['meta_info']


    class Profiles(object):
        """
        profile
        
        .. attribute:: profile
        
        	profile
        	**type**\: list of    :py:class:`Profile <ydk.models.ietf.ietf_qos.Qos.Profiles.Profile>`
        
        

        """

        _prefix = 'qos'
        _revision = '2016-10-20'

        def __init__(self):
            self.parent = None
            self.profile = YList()
            self.profile.parent = self
            self.profile.name = 'profile'


        class Profile(object):
            """
            profile
            
            .. attribute:: name  <key>
            
            	qos\-profile name
            	**type**\:  str
            
            .. attribute:: overhead
            
            	overhead
            	**type**\:   :py:class:`Overhead <ydk.models.ietf.ietf_qos.Qos.Profiles.Profile.Overhead>`
            
            	**presence node**\: True
            
            .. attribute:: resource
            
            	resource
            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
            
            .. attribute:: slot_port
            
            	slot\-port
            	**type**\:   :py:class:`SlotPort <ydk.models.ietf.ietf_qos.Qos.Profiles.Profile.SlotPort>`
            
            .. attribute:: tm_resource
            
            	tm\-resource
            	**type**\:  int
            
            	**range:** 1..4
            
            

            """

            _prefix = 'qos'
            _revision = '2016-10-20'

            def __init__(self):
                self.parent = None
                self.name = None
                self.overhead = None
                self.resource = None
                self.slot_port = Qos.Profiles.Profile.SlotPort()
                self.slot_port.parent = self
                self.tm_resource = None


            class Overhead(object):
                """
                overhead
                
                .. attribute:: card_family
                
                	card\-family
                	**type**\:   :py:class:`CardFamily <ydk.models.ietf.ietf_qos.Qos.Profiles.Profile.Overhead.CardFamily>`
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                

                This class is a :ref:`presence class<presence-class>`

                """

                _prefix = 'qos'
                _revision = '2016-10-20'

                def __init__(self):
                    self.parent = None
                    self._is_presence = True
                    self.card_family = Qos.Profiles.Profile.Overhead.CardFamily()
                    self.card_family.parent = self


                class CardFamily(object):
                    """
                    card\-family
                    
                    .. attribute:: card_family_1
                    
                    	card\-family\-1
                    	**type**\:   :py:class:`CardFamily1 <ydk.models.ietf.ietf_qos.Qos.Profiles.Profile.Overhead.CardFamily.CardFamily1>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: card_family_2
                    
                    	2
                    	**type**\:   :py:class:`CardFamily2 <ydk.models.ietf.ietf_qos.Qos.Profiles.Profile.Overhead.CardFamily.CardFamily2>`
                    
                    .. attribute:: card_family_3
                    
                    	3
                    	**type**\:   :py:class:`CardFamily3 <ydk.models.ietf.ietf_qos.Qos.Profiles.Profile.Overhead.CardFamily.CardFamily3>`
                    
                    

                    """

                    _prefix = 'qos'
                    _revision = '2016-10-20'

                    def __init__(self):
                        self.parent = None
                        self.card_family_1 = None
                        self.card_family_2 = Qos.Profiles.Profile.Overhead.CardFamily.CardFamily2()
                        self.card_family_2.parent = self
                        self.card_family_3 = Qos.Profiles.Profile.Overhead.CardFamily.CardFamily3()
                        self.card_family_3.parent = self


                    class CardFamily1(object):
                        """
                        card\-family\-1
                        
                        .. attribute:: encaps_access_line
                        
                        	encaps\-access\-line
                        	**type**\:   :py:class:`EncapsAccessLine <ydk.models.ietf.ietf_qos.Qos.Profiles.Profile.Overhead.CardFamily.CardFamily1.EncapsAccessLine>`
                        
                        .. attribute:: reserved
                        
                        	reserved
                        	**type**\:  int
                        
                        	**range:** 1..255
                        
                        .. attribute:: _is_presence
                        
                        	Is present if this instance represents presence container else not
                        	**type**\: bool
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'qos'
                        _revision = '2016-10-20'

                        def __init__(self):
                            self.parent = None
                            self._is_presence = True
                            self.encaps_access_line = Qos.Profiles.Profile.Overhead.CardFamily.CardFamily1.EncapsAccessLine()
                            self.encaps_access_line.parent = self
                            self.reserved = None


                        class EncapsAccessLine(object):
                            """
                            encaps\-access\-line
                            
                            .. attribute:: ethernet
                            
                            	ethernet
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: value
                            
                            	value
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            

                            """

                            _prefix = 'qos'
                            _revision = '2016-10-20'

                            def __init__(self):
                                self.parent = None
                                self.ethernet = None
                                self.value = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-qos:encaps-access-line'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.ethernet is not None:
                                    return True

                                if self.value is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.Profiles.Profile.Overhead.CardFamily.CardFamily1.EncapsAccessLine']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-qos:card-family-1'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self._is_presence:
                                return True
                            if self.encaps_access_line is not None and self.encaps_access_line._has_data():
                                return True

                            if self.reserved is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_qos as meta
                            return meta._meta_table['Qos.Profiles.Profile.Overhead.CardFamily.CardFamily1']['meta_info']


                    class CardFamily2(object):
                        """
                        2
                        
                        .. attribute:: encaps_access_line
                        
                        	encaps\-access\-line
                        	**type**\:   :py:class:`EncapsAccessLine <ydk.models.ietf.ietf_qos.Qos.Profiles.Profile.Overhead.CardFamily.CardFamily2.EncapsAccessLine>`
                        
                        .. attribute:: rate_factor
                        
                        	rate\-factor
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: reserved
                        
                        	reserved
                        	**type**\:  int
                        
                        	**range:** 1..255
                        
                        

                        """

                        _prefix = 'qos'
                        _revision = '2016-10-20'

                        def __init__(self):
                            self.parent = None
                            self.encaps_access_line = Qos.Profiles.Profile.Overhead.CardFamily.CardFamily2.EncapsAccessLine()
                            self.encaps_access_line.parent = self
                            self.rate_factor = None
                            self.reserved = None


                        class EncapsAccessLine(object):
                            """
                            encaps\-access\-line
                            
                            .. attribute:: ether_aal5_llc
                            
                            	ether\-aal5\-llc
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: ether_aal5_llc_fcs
                            
                            	ether\-aal5\-llc\-fcs
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: ether_aal5_null
                            
                            	ether\-aal5\-null
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: ether_aal5_null_fcs
                            
                            	ether\-aal5\-null\-fcs
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: ethernet
                            
                            	ethernet
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: ipoa_llc
                            
                            	ipoa\-llc
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: ipoa_null
                            
                            	ipoa\-null
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: pppoa_llc
                            
                            	pppoa\-llc
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: pppoa_null
                            
                            	pppoa\-null
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: value
                            
                            	value
                            	**type**\:   :py:class:`Value <ydk.models.ietf.ietf_qos.Qos.Profiles.Profile.Overhead.CardFamily.CardFamily2.EncapsAccessLine.Value>`
                            
                            

                            """

                            _prefix = 'qos'
                            _revision = '2016-10-20'

                            def __init__(self):
                                self.parent = None
                                self.ether_aal5_llc = None
                                self.ether_aal5_llc_fcs = None
                                self.ether_aal5_null = None
                                self.ether_aal5_null_fcs = None
                                self.ethernet = None
                                self.ipoa_llc = None
                                self.ipoa_null = None
                                self.pppoa_llc = None
                                self.pppoa_null = None
                                self.value = Qos.Profiles.Profile.Overhead.CardFamily.CardFamily2.EncapsAccessLine.Value()
                                self.value.parent = self


                            class Value(object):
                                """
                                value
                                
                                .. attribute:: data_link
                                
                                	data\-link
                                	**type**\:   :py:class:`DataLink <ydk.models.ietf.ietf_qos.Qos.Profiles.Profile.Overhead.CardFamily.CardFamily2.EncapsAccessLine.Value.DataLink>`
                                
                                .. attribute:: value
                                
                                	value
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                	**mandatory**\: True
                                
                                

                                """

                                _prefix = 'qos'
                                _revision = '2016-10-20'

                                def __init__(self):
                                    self.parent = None
                                    self.data_link = Qos.Profiles.Profile.Overhead.CardFamily.CardFamily2.EncapsAccessLine.Value.DataLink()
                                    self.data_link.parent = self
                                    self.value = None


                                class DataLink(object):
                                    """
                                    data\-link
                                    
                                    .. attribute:: atm
                                    
                                    	atm
                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: ethernet
                                    
                                    	ethernet
                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                    
                                    

                                    """

                                    _prefix = 'qos'
                                    _revision = '2016-10-20'

                                    def __init__(self):
                                        self.parent = None
                                        self.atm = None
                                        self.ethernet = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/ietf-qos:data-link'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.atm is not None:
                                            return True

                                        if self.ethernet is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                        return meta._meta_table['Qos.Profiles.Profile.Overhead.CardFamily.CardFamily2.EncapsAccessLine.Value.DataLink']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-qos:value'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.data_link is not None and self.data_link._has_data():
                                        return True

                                    if self.value is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Profiles.Profile.Overhead.CardFamily.CardFamily2.EncapsAccessLine.Value']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-qos:encaps-access-line'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.ether_aal5_llc is not None:
                                    return True

                                if self.ether_aal5_llc_fcs is not None:
                                    return True

                                if self.ether_aal5_null is not None:
                                    return True

                                if self.ether_aal5_null_fcs is not None:
                                    return True

                                if self.ethernet is not None:
                                    return True

                                if self.ipoa_llc is not None:
                                    return True

                                if self.ipoa_null is not None:
                                    return True

                                if self.pppoa_llc is not None:
                                    return True

                                if self.pppoa_null is not None:
                                    return True

                                if self.value is not None and self.value._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.Profiles.Profile.Overhead.CardFamily.CardFamily2.EncapsAccessLine']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-qos:card-family-2'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.encaps_access_line is not None and self.encaps_access_line._has_data():
                                return True

                            if self.rate_factor is not None:
                                return True

                            if self.reserved is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_qos as meta
                            return meta._meta_table['Qos.Profiles.Profile.Overhead.CardFamily.CardFamily2']['meta_info']


                    class CardFamily3(object):
                        """
                        3
                        
                        .. attribute:: encaps_access_line
                        
                        	encaps\-access\-line
                        	**type**\:   :py:class:`EncapsAccessLine <ydk.models.ietf.ietf_qos.Qos.Profiles.Profile.Overhead.CardFamily.CardFamily3.EncapsAccessLine>`
                        
                        .. attribute:: rate_factor
                        
                        	rate\-factor
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: reserved
                        
                        	reserved
                        	**type**\:  int
                        
                        	**range:** 1..255
                        
                        

                        """

                        _prefix = 'qos'
                        _revision = '2016-10-20'

                        def __init__(self):
                            self.parent = None
                            self.encaps_access_line = Qos.Profiles.Profile.Overhead.CardFamily.CardFamily3.EncapsAccessLine()
                            self.encaps_access_line.parent = self
                            self.rate_factor = None
                            self.reserved = None


                        class EncapsAccessLine(object):
                            """
                            encaps\-access\-line
                            
                            .. attribute:: ether_aal5_llc
                            
                            	ether\-aal5\-llc
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: ether_aal5_llc_fcs
                            
                            	ether\-aal5\-llc\-fcs
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: ether_aal5_null
                            
                            	ether\-aal5\-null
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: ether_aal5_null_fcs
                            
                            	ether\-aal5\-null\-fcs
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: ethernet
                            
                            	ethernet
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: ipoa_llc
                            
                            	ipoa\-llc
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: ipoa_null
                            
                            	ipoa\-null
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: pppoa_llc
                            
                            	pppoa\-llc
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: pppoa_null
                            
                            	pppoa\-null
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: value
                            
                            	value
                            	**type**\:   :py:class:`Value <ydk.models.ietf.ietf_qos.Qos.Profiles.Profile.Overhead.CardFamily.CardFamily3.EncapsAccessLine.Value>`
                            
                            

                            """

                            _prefix = 'qos'
                            _revision = '2016-10-20'

                            def __init__(self):
                                self.parent = None
                                self.ether_aal5_llc = None
                                self.ether_aal5_llc_fcs = None
                                self.ether_aal5_null = None
                                self.ether_aal5_null_fcs = None
                                self.ethernet = None
                                self.ipoa_llc = None
                                self.ipoa_null = None
                                self.pppoa_llc = None
                                self.pppoa_null = None
                                self.value = Qos.Profiles.Profile.Overhead.CardFamily.CardFamily3.EncapsAccessLine.Value()
                                self.value.parent = self


                            class Value(object):
                                """
                                value
                                
                                .. attribute:: data_link
                                
                                	data\-link
                                	**type**\:   :py:class:`DataLink <ydk.models.ietf.ietf_qos.Qos.Profiles.Profile.Overhead.CardFamily.CardFamily3.EncapsAccessLine.Value.DataLink>`
                                
                                .. attribute:: value
                                
                                	value
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                	**mandatory**\: True
                                
                                

                                """

                                _prefix = 'qos'
                                _revision = '2016-10-20'

                                def __init__(self):
                                    self.parent = None
                                    self.data_link = Qos.Profiles.Profile.Overhead.CardFamily.CardFamily3.EncapsAccessLine.Value.DataLink()
                                    self.data_link.parent = self
                                    self.value = None


                                class DataLink(object):
                                    """
                                    data\-link
                                    
                                    .. attribute:: atm
                                    
                                    	atm
                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: ethernet
                                    
                                    	ethernet
                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                    
                                    

                                    """

                                    _prefix = 'qos'
                                    _revision = '2016-10-20'

                                    def __init__(self):
                                        self.parent = None
                                        self.atm = None
                                        self.ethernet = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/ietf-qos:data-link'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.atm is not None:
                                            return True

                                        if self.ethernet is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                        return meta._meta_table['Qos.Profiles.Profile.Overhead.CardFamily.CardFamily3.EncapsAccessLine.Value.DataLink']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-qos:value'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.data_link is not None and self.data_link._has_data():
                                        return True

                                    if self.value is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Profiles.Profile.Overhead.CardFamily.CardFamily3.EncapsAccessLine.Value']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-qos:encaps-access-line'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.ether_aal5_llc is not None:
                                    return True

                                if self.ether_aal5_llc_fcs is not None:
                                    return True

                                if self.ether_aal5_null is not None:
                                    return True

                                if self.ether_aal5_null_fcs is not None:
                                    return True

                                if self.ethernet is not None:
                                    return True

                                if self.ipoa_llc is not None:
                                    return True

                                if self.ipoa_null is not None:
                                    return True

                                if self.pppoa_llc is not None:
                                    return True

                                if self.pppoa_null is not None:
                                    return True

                                if self.value is not None and self.value._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.Profiles.Profile.Overhead.CardFamily.CardFamily3.EncapsAccessLine']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-qos:card-family-3'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.encaps_access_line is not None and self.encaps_access_line._has_data():
                                return True

                            if self.rate_factor is not None:
                                return True

                            if self.reserved is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_qos as meta
                            return meta._meta_table['Qos.Profiles.Profile.Overhead.CardFamily.CardFamily3']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-qos:card-family'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.card_family_1 is not None and self.card_family_1._has_data():
                            return True

                        if self.card_family_2 is not None and self.card_family_2._has_data():
                            return True

                        if self.card_family_3 is not None and self.card_family_3._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_qos as meta
                        return meta._meta_table['Qos.Profiles.Profile.Overhead.CardFamily']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/ietf-qos:overhead'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self._is_presence:
                        return True
                    if self.card_family is not None and self.card_family._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_qos as meta
                    return meta._meta_table['Qos.Profiles.Profile.Overhead']['meta_info']


            class SlotPort(object):
                """
                slot\-port
                
                .. attribute:: slot_port
                
                	slot\-port
                	**type**\:  str
                
                	**mandatory**\: True
                
                .. attribute:: tm_resource
                
                	tm\-resource
                	**type**\:  int
                
                	**range:** 1..4
                
                

                """

                _prefix = 'qos'
                _revision = '2016-10-20'

                def __init__(self):
                    self.parent = None
                    self.slot_port = None
                    self.tm_resource = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/ietf-qos:slot-port'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.slot_port is not None:
                        return True

                    if self.tm_resource is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_qos as meta
                    return meta._meta_table['Qos.Profiles.Profile.SlotPort']['meta_info']

            @property
            def _common_path(self):
                if self.name is None:
                    raise YPYModelError('Key property name is None')

                return '/ietf-qos:qos/ietf-qos:profiles/ietf-qos:profile[ietf-qos:name = ' + str(self.name) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return True

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.name is not None:
                    return True

                if self.overhead is not None and self.overhead._has_data():
                    return True

                if self.resource is not None:
                    return True

                if self.slot_port is not None and self.slot_port._has_data():
                    return True

                if self.tm_resource is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _ietf_qos as meta
                return meta._meta_table['Qos.Profiles.Profile']['meta_info']

        @property
        def _common_path(self):

            return '/ietf-qos:qos/ietf-qos:profiles'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return True

        def _has_data(self):
            if not self.is_config():
                return False
            if self.profile is not None:
                for child_ref in self.profile:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.ietf._meta import _ietf_qos as meta
            return meta._meta_table['Qos.Profiles']['meta_info']


    class QueueMaps(object):
        """
        queue\-maps
        
        .. attribute:: queue_map
        
        	queue\-map
        	**type**\: list of    :py:class:`QueueMap <ydk.models.ietf.ietf_qos.Qos.QueueMaps.QueueMap>`
        
        

        """

        _prefix = 'qos'
        _revision = '2016-10-20'

        def __init__(self):
            self.parent = None
            self.queue_map = YList()
            self.queue_map.parent = self
            self.queue_map.name = 'queue_map'


        class QueueMap(object):
            """
            queue\-map
            
            .. attribute:: name  <key>
            
            	queue\-map\-name
            	**type**\:  str
            
            .. attribute:: num_queues
            
            	num\-queues
            	**type**\: list of    :py:class:`NumQueues <ydk.models.ietf.ietf_qos.Qos.QueueMaps.QueueMap.NumQueues>`
            
            

            """

            _prefix = 'qos'
            _revision = '2016-10-20'

            def __init__(self):
                self.parent = None
                self.name = None
                self.num_queues = YList()
                self.num_queues.parent = self
                self.num_queues.name = 'num_queues'


            class NumQueues(object):
                """
                num\-queues
                
                .. attribute:: num  <key>
                
                	num\-queues
                	**type**\:  int
                
                	**range:** 2..None \| 4..None \| 8..None
                
                .. attribute:: queue
                
                	queue
                	**type**\: list of    :py:class:`Queue <ydk.models.ietf.ietf_qos.Qos.QueueMaps.QueueMap.NumQueues.Queue>`
                
                

                """

                _prefix = 'qos'
                _revision = '2016-10-20'

                def __init__(self):
                    self.parent = None
                    self.num = None
                    self.queue = YList()
                    self.queue.parent = self
                    self.queue.name = 'queue'


                class Queue(object):
                    """
                    queue
                    
                    .. attribute:: id  <key>
                    
                    	queue
                    	**type**\:  int
                    
                    	**range:** 0..7
                    
                    .. attribute:: priority
                    
                    	priority
                    	**type**\:  list of int
                    
                    	**range:** 0..7
                    
                    

                    """

                    _prefix = 'qos'
                    _revision = '2016-10-20'

                    def __init__(self):
                        self.parent = None
                        self.id = None
                        self.priority = YLeafList()
                        self.priority.parent = self
                        self.priority.name = 'priority'

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')
                        if self.id is None:
                            raise YPYModelError('Key property id is None')

                        return self.parent._common_path +'/ietf-qos:queue[ietf-qos:id = ' + str(self.id) + ']'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.id is not None:
                            return True

                        if self.priority is not None:
                            for child in self.priority:
                                if child is not None:
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_qos as meta
                        return meta._meta_table['Qos.QueueMaps.QueueMap.NumQueues.Queue']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')
                    if self.num is None:
                        raise YPYModelError('Key property num is None')

                    return self.parent._common_path +'/ietf-qos:num-queues[ietf-qos:num = ' + str(self.num) + ']'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.num is not None:
                        return True

                    if self.queue is not None:
                        for child_ref in self.queue:
                            if child_ref._has_data():
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_qos as meta
                    return meta._meta_table['Qos.QueueMaps.QueueMap.NumQueues']['meta_info']

            @property
            def _common_path(self):
                if self.name is None:
                    raise YPYModelError('Key property name is None')

                return '/ietf-qos:qos/ietf-qos:queue-maps/ietf-qos:queue-map[ietf-qos:name = ' + str(self.name) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return True

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.name is not None:
                    return True

                if self.num_queues is not None:
                    for child_ref in self.num_queues:
                        if child_ref._has_data():
                            return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _ietf_qos as meta
                return meta._meta_table['Qos.QueueMaps.QueueMap']['meta_info']

        @property
        def _common_path(self):

            return '/ietf-qos:qos/ietf-qos:queue-maps'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return True

        def _has_data(self):
            if not self.is_config():
                return False
            if self.queue_map is not None:
                for child_ref in self.queue_map:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.ietf._meta import _ietf_qos as meta
            return meta._meta_table['Qos.QueueMaps']['meta_info']


    class Policies(object):
        """
        policies
        
        .. attribute:: policy
        
        	policy
        	**type**\: list of    :py:class:`Policy <ydk.models.ietf.ietf_qos.Qos.Policies.Policy>`
        
        

        """

        _prefix = 'qos'
        _revision = '2016-10-20'

        def __init__(self):
            self.parent = None
            self.policy = YList()
            self.policy.parent = self
            self.policy.name = 'policy'


        class Policy(object):
            """
            policy
            
            .. attribute:: name  <key>
            
            	name
            	**type**\:  str
            
            .. attribute:: mdrr
            
            	mdrr policy
            	**type**\:   :py:class:`Mdrr <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Mdrr>`
            
            	**presence node**\: True
            
            .. attribute:: metering
            
            	metering policy
            	**type**\:   :py:class:`Metering <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering>`
            
            	**presence node**\: True
            
            .. attribute:: policing
            
            	policing policy
            	**type**\:   :py:class:`Policing <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing>`
            
            	**presence node**\: True
            
            .. attribute:: protocol_rate_limit
            
            	protocol\-rate\-limit policy
            	**type**\:   :py:class:`ProtocolRateLimit <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.ProtocolRateLimit>`
            
            	**presence node**\: True
            
            .. attribute:: pwfq
            
            	pwfq policy
            	**type**\:   :py:class:`Pwfq <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Pwfq>`
            
            	**presence node**\: True
            
            

            """

            _prefix = 'qos'
            _revision = '2016-10-20'

            def __init__(self):
                self.parent = None
                self.name = None
                self.mdrr = None
                self.metering = None
                self.policing = None
                self.protocol_rate_limit = None
                self.pwfq = None


            class Metering(object):
                """
                metering policy
                
                .. attribute:: af_drop
                
                	af\-drop
                	**type**\:  int
                
                	**range:** 1..3
                
                .. attribute:: card_family_1
                
                	card\-family\-1
                	**type**\:   :py:class:`CardFamily1 <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily1>`
                
                .. attribute:: card_family_2
                
                	card\-family\-2
                	**type**\:   :py:class:`CardFamily2 <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily2>`
                
                .. attribute:: card_family_3
                
                	card\-family\-3
                	**type**\:   :py:class:`CardFamily3 <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily3>`
                
                .. attribute:: drop_precedence
                
                	drop\-precedence
                	**type**\: one of the below types:
                
                	**type**\:  int
                
                	**range:** 1..7
                
                
                ----
                	**type**\:   :py:class:`DropPrecedenceEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.DropPrecedenceEnum>`
                
                
                ----
                .. attribute:: mark_dscp
                
                	mark\-dscp
                	**type**\: one of the below types:
                
                	**type**\:  int
                
                	**range:** 0..63
                
                
                ----
                	**type**\:   :py:class:`DscpCodeAllValuesTypeEnum <ydk.models.ietf.ietf_qos.DscpCodeAllValuesTypeEnum>`
                
                
                ----
                .. attribute:: mark_precedence
                
                	mark\-precedence
                	**type**\:  int
                
                	**range:** 1..3
                
                .. attribute:: mark_priority
                
                	mark\-priority
                	**type**\: one of the below types:
                
                	**type**\:  int
                
                	**range:** 1..7
                
                
                ----
                	**type**\:   :py:class:`MarkPriorityEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.MarkPriorityEnum>`
                
                
                ----
                .. attribute:: policy
                
                	policy
                	**type**\:   :py:class:`Policy_ <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.Policy_>`
                
                .. attribute:: radius_guided
                
                	radius\-guided
                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                
                .. attribute:: rate
                
                	Specify rate limits inline
                	**type**\:   :py:class:`Rate <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.Rate>`
                
                .. attribute:: rate_calculation_exclude_layer_2_overhead
                
                	Specify that rate calculation excludes the size ofLayer 2 overhead for the layer 3 circuit on which a policy is applied
                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                

                This class is a :ref:`presence class<presence-class>`

                """

                _prefix = 'qos'
                _revision = '2016-10-20'

                def __init__(self):
                    self.parent = None
                    self._is_presence = True
                    self.af_drop = None
                    self.card_family_1 = Qos.Policies.Policy.Metering.CardFamily1()
                    self.card_family_1.parent = self
                    self.card_family_2 = Qos.Policies.Policy.Metering.CardFamily2()
                    self.card_family_2.parent = self
                    self.card_family_3 = Qos.Policies.Policy.Metering.CardFamily3()
                    self.card_family_3.parent = self
                    self.drop_precedence = None
                    self.mark_dscp = None
                    self.mark_precedence = None
                    self.mark_priority = None
                    self.policy = Qos.Policies.Policy.Metering.Policy_()
                    self.policy.parent = self
                    self.radius_guided = None
                    self.rate = Qos.Policies.Policy.Metering.Rate()
                    self.rate.parent = self
                    self.rate_calculation_exclude_layer_2_overhead = None

                class DropPrecedenceEnum(Enum):
                    """
                    DropPrecedenceEnum

                    drop\-precedence

                    .. data:: ignore = 0

                    	ignore

                    """

                    ignore = 0


                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_qos as meta
                        return meta._meta_table['Qos.Policies.Policy.Metering.DropPrecedenceEnum']


                class MarkPriorityEnum(Enum):
                    """
                    MarkPriorityEnum

                    mark\-priority

                    .. data:: ignore = 0

                    	ignore

                    """

                    ignore = 0


                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_qos as meta
                        return meta._meta_table['Qos.Policies.Policy.Metering.MarkPriorityEnum']



                class CardFamily1(object):
                    """
                    card\-family\-1
                    
                    .. attribute:: af_drop
                    
                    	af\-drop
                    	**type**\:  int
                    
                    	**range:** 1..3
                    
                    .. attribute:: drop_precedence
                    
                    	drop\-precedence
                    	**type**\: one of the below types:
                    
                    	**type**\:  int
                    
                    	**range:** 1..7
                    
                    
                    ----
                    	**type**\:   :py:class:`DropPrecedenceEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.DropPrecedenceEnum>`
                    
                    
                    ----
                    .. attribute:: mark_dscp
                    
                    	mark\-dscp
                    	**type**\: one of the below types:
                    
                    	**type**\:  int
                    
                    	**range:** 0..63
                    
                    
                    ----
                    	**type**\:   :py:class:`DscpCodeAllValuesTypeEnum <ydk.models.ietf.ietf_qos.DscpCodeAllValuesTypeEnum>`
                    
                    
                    ----
                    .. attribute:: mark_precedence
                    
                    	mark\-precedence
                    	**type**\:  int
                    
                    	**range:** 1..3
                    
                    .. attribute:: mark_priority
                    
                    	mark\-priority
                    	**type**\: one of the below types:
                    
                    	**type**\:  int
                    
                    	**range:** 1..7
                    
                    
                    ----
                    	**type**\:   :py:class:`MarkPriorityEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.MarkPriorityEnum>`
                    
                    
                    ----
                    .. attribute:: policy
                    
                    	policy
                    	**type**\:   :py:class:`Policy_ <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily1.Policy_>`
                    
                    .. attribute:: rate
                    
                    	Specify rate limits inline
                    	**type**\:   :py:class:`Rate <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily1.Rate>`
                    
                    .. attribute:: rate_calculation_exclude_layer_2_overhead
                    
                    	Specify that rate calculation excludes the size ofLayer 2 overhead for the layer 3 circuit on which a policy is applied
                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                    
                    

                    """

                    _prefix = 'qos'
                    _revision = '2016-10-20'

                    def __init__(self):
                        self.parent = None
                        self.af_drop = None
                        self.drop_precedence = None
                        self.mark_dscp = None
                        self.mark_precedence = None
                        self.mark_priority = None
                        self.policy = Qos.Policies.Policy.Metering.CardFamily1.Policy_()
                        self.policy.parent = self
                        self.rate = Qos.Policies.Policy.Metering.CardFamily1.Rate()
                        self.rate.parent = self
                        self.rate_calculation_exclude_layer_2_overhead = None

                    class DropPrecedenceEnum(Enum):
                        """
                        DropPrecedenceEnum

                        drop\-precedence

                        .. data:: ignore = 0

                        	ignore

                        """

                        ignore = 0


                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_qos as meta
                            return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily1.DropPrecedenceEnum']


                    class MarkPriorityEnum(Enum):
                        """
                        MarkPriorityEnum

                        mark\-priority

                        .. data:: ignore = 0

                        	ignore

                        """

                        ignore = 0


                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_qos as meta
                            return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily1.MarkPriorityEnum']



                    class Policy_(object):
                        """
                        policy
                        
                        .. attribute:: access_group
                        
                        	access\-group
                        	**type**\:   :py:class:`AccessGroup <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily1.Policy_.AccessGroup>`
                        
                        .. attribute:: class_group
                        
                        	Reference a previously defined class
                        	**type**\:   :py:class:`ClassGroup <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily1.Policy_.ClassGroup>`
                        
                        

                        """

                        _prefix = 'qos'
                        _revision = '2016-10-20'

                        def __init__(self):
                            self.parent = None
                            self.access_group = Qos.Policies.Policy.Metering.CardFamily1.Policy_.AccessGroup()
                            self.access_group.parent = self
                            self.class_group = Qos.Policies.Policy.Metering.CardFamily1.Policy_.ClassGroup()
                            self.class_group.parent = self


                        class ClassGroup(object):
                            """
                            Reference a previously defined class
                            
                            .. attribute:: class_group_reference
                            
                            	class\-group\-reference
                            	**type**\:  str
                            
                            	**refers to**\:  :py:class:`name <ydk.models.ietf.ietf_qos.Qos.ClassDefinitions.ClassDefinition>`
                            
                            .. attribute:: classes
                            
                            	classes
                            	**type**\:   :py:class:`Classes <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily1.Policy_.ClassGroup.Classes>`
                            
                            

                            """

                            _prefix = 'qos'
                            _revision = '2016-10-20'

                            def __init__(self):
                                self.parent = None
                                self.class_group_reference = None
                                self.classes = Qos.Policies.Policy.Metering.CardFamily1.Policy_.ClassGroup.Classes()
                                self.classes.parent = self


                            class Classes(object):
                                """
                                classes
                                
                                .. attribute:: class_
                                
                                	class
                                	**type**\: list of    :py:class:`Class_ <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily1.Policy_.ClassGroup.Classes.Class_>`
                                
                                

                                """

                                _prefix = 'qos'
                                _revision = '2016-10-20'

                                def __init__(self):
                                    self.parent = None
                                    self.class_ = YList()
                                    self.class_.parent = self
                                    self.class_.name = 'class_'


                                class Class_(object):
                                    """
                                    class
                                    
                                    .. attribute:: name  <key>
                                    
                                    	name
                                    	**type**\:  str
                                    
                                    	**length:** 1..39
                                    
                                    	**refers to**\:  :py:class:`class_ <ydk.models.ietf.ietf_qos.Qos.ClassDefinitions.ClassDefinition.Qos_>`
                                    
                                    .. attribute:: packet_handling
                                    
                                    	packet\-handling
                                    	**type**\:   :py:class:`PacketHandling <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling>`
                                    
                                    

                                    """

                                    _prefix = 'qos'
                                    _revision = '2016-10-20'

                                    def __init__(self):
                                        self.parent = None
                                        self.name = None
                                        self.packet_handling = Qos.Policies.Policy.Metering.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling()
                                        self.packet_handling.parent = self


                                    class PacketHandling(object):
                                        """
                                        packet\-handling
                                        
                                        .. attribute:: af_drop
                                        
                                        	af\-drop
                                        	**type**\:  int
                                        
                                        	**range:** 1..3
                                        
                                        .. attribute:: bit_rate
                                        
                                        	bit\-rate
                                        	**type**\:   :py:class:`BitRate <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate>`
                                        
                                        .. attribute:: drop_precedence
                                        
                                        	drop\-precedence
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  int
                                        
                                        	**range:** 1..7
                                        
                                        
                                        ----
                                        	**type**\:   :py:class:`DropPrecedenceEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.DropPrecedenceEnum>`
                                        
                                        
                                        ----
                                        .. attribute:: mark_dscp
                                        
                                        	mark\-dscp
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  int
                                        
                                        	**range:** 0..63
                                        
                                        
                                        ----
                                        	**type**\:   :py:class:`DscpCodeAllValuesTypeEnum <ydk.models.ietf.ietf_qos.DscpCodeAllValuesTypeEnum>`
                                        
                                        
                                        ----
                                        .. attribute:: mark_precedence
                                        
                                        	mark\-precedence
                                        	**type**\:  int
                                        
                                        	**range:** 1..3
                                        
                                        .. attribute:: mark_priority
                                        
                                        	mark\-priority
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  int
                                        
                                        	**range:** 1..7
                                        
                                        
                                        ----
                                        	**type**\:   :py:class:`MarkPriorityEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Policy_.ClassGroup.Classes.Class_.PacketHandling.MarkPriorityEnum>`
                                        
                                        
                                        ----
                                        .. attribute:: parent_class
                                        
                                        	parent\-class
                                        	**type**\:  str
                                        
                                        .. attribute:: percentage
                                        
                                        	percentage
                                        	**type**\:   :py:class:`Percentage <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage>`
                                        
                                        

                                        """

                                        _prefix = 'qos'
                                        _revision = '2016-10-20'

                                        def __init__(self):
                                            self.parent = None
                                            self.af_drop = None
                                            self.bit_rate = Qos.Policies.Policy.Metering.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate()
                                            self.bit_rate.parent = self
                                            self.drop_precedence = None
                                            self.mark_dscp = None
                                            self.mark_precedence = None
                                            self.mark_priority = None
                                            self.parent_class = None
                                            self.percentage = Qos.Policies.Policy.Metering.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage()
                                            self.percentage.parent = self

                                        class DropPrecedenceEnum(Enum):
                                            """
                                            DropPrecedenceEnum

                                            drop\-precedence

                                            .. data:: ignore = 0

                                            	ignore

                                            """

                                            ignore = 0


                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.ietf._meta import _ietf_qos as meta
                                                return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling.DropPrecedenceEnum']


                                        class MarkPriorityEnum(Enum):
                                            """
                                            MarkPriorityEnum

                                            mark\-priority

                                            .. data:: ignore = 0

                                            	ignore

                                            """

                                            ignore = 0


                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.ietf._meta import _ietf_qos as meta
                                                return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling.MarkPriorityEnum']



                                        class BitRate(object):
                                            """
                                            bit\-rate
                                            
                                            .. attribute:: actions
                                            
                                            	actions
                                            	**type**\:   :py:class:`Actions <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions>`
                                            
                                            .. attribute:: bit_rate
                                            
                                            	bit\-rate
                                            	**type**\:  int
                                            
                                            	**range:** 66..100000000
                                            
                                            .. attribute:: burst
                                            
                                            	burst
                                            	**type**\:  int
                                            
                                            	**range:** 1..4250000000
                                            
                                            	**units**\: byte
                                            
                                            .. attribute:: counters
                                            
                                            	counters
                                            	**type**\:   :py:class:`Counters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Counters>`
                                            
                                            	**presence node**\: True
                                            
                                            .. attribute:: excess_burst
                                            
                                            	excess\-burst
                                            	**type**\:  int
                                            
                                            	**range:** 1..4250000000
                                            
                                            	**units**\: byte
                                            
                                            .. attribute:: hierarchical_counters
                                            
                                            	hierarchical\-counters
                                            	**type**\:   :py:class:`HierarchicalCounters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.HierarchicalCounters>`
                                            
                                            	**presence node**\: True
                                            
                                            .. attribute:: time_burst
                                            
                                            	time\-burst
                                            	**type**\:  int
                                            
                                            	**range:** 1..10000
                                            
                                            	**units**\: millisecond
                                            
                                            .. attribute:: time_excess_burst
                                            
                                            	time\-excess\-burst
                                            	**type**\:  int
                                            
                                            	**range:** 1..10000
                                            
                                            

                                            """

                                            _prefix = 'qos'
                                            _revision = '2016-10-20'

                                            def __init__(self):
                                                self.parent = None
                                                self.actions = Qos.Policies.Policy.Metering.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions()
                                                self.actions.parent = self
                                                self.bit_rate = None
                                                self.burst = None
                                                self.counters = None
                                                self.excess_burst = None
                                                self.hierarchical_counters = None
                                                self.time_burst = None
                                                self.time_excess_burst = None


                                            class Counters(object):
                                                """
                                                counters
                                                
                                                .. attribute:: hierarchical_counters
                                                
                                                	hierarchical\-counters
                                                	**type**\:   :py:class:`HierarchicalCounters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Counters.HierarchicalCounters>`
                                                
                                                	**presence node**\: True
                                                
                                                .. attribute:: _is_presence
                                                
                                                	Is present if this instance represents presence container else not
                                                	**type**\: bool
                                                
                                                

                                                This class is a :ref:`presence class<presence-class>`

                                                """

                                                _prefix = 'qos'
                                                _revision = '2016-10-20'

                                                def __init__(self):
                                                    self.parent = None
                                                    self._is_presence = True
                                                    self.hierarchical_counters = None


                                                class HierarchicalCounters(object):
                                                    """
                                                    hierarchical\-counters
                                                    
                                                    .. attribute:: dual_stack
                                                    
                                                    	dual\-stack
                                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                                    
                                                    .. attribute:: _is_presence
                                                    
                                                    	Is present if this instance represents presence container else not
                                                    	**type**\: bool
                                                    
                                                    

                                                    This class is a :ref:`presence class<presence-class>`

                                                    """

                                                    _prefix = 'qos'
                                                    _revision = '2016-10-20'

                                                    def __init__(self):
                                                        self.parent = None
                                                        self._is_presence = True
                                                        self.dual_stack = None

                                                    @property
                                                    def _common_path(self):
                                                        if self.parent is None:
                                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                                        return self.parent._common_path +'/ietf-qos:hierarchical-counters'

                                                    def is_config(self):
                                                        ''' Returns True if this instance represents config data else returns False '''
                                                        return True

                                                    def _has_data(self):
                                                        if not self.is_config():
                                                            return False
                                                        if self._is_presence:
                                                            return True
                                                        if self.dual_stack is not None:
                                                            return True

                                                        return False

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                                        return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Counters.HierarchicalCounters']['meta_info']

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/ietf-qos:counters'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self._is_presence:
                                                        return True
                                                    if self.hierarchical_counters is not None and self.hierarchical_counters._has_data():
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                                    return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Counters']['meta_info']


                                            class HierarchicalCounters(object):
                                                """
                                                hierarchical\-counters
                                                
                                                .. attribute:: dual_stack
                                                
                                                	dual\-stack
                                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                                
                                                .. attribute:: _is_presence
                                                
                                                	Is present if this instance represents presence container else not
                                                	**type**\: bool
                                                
                                                

                                                This class is a :ref:`presence class<presence-class>`

                                                """

                                                _prefix = 'qos'
                                                _revision = '2016-10-20'

                                                def __init__(self):
                                                    self.parent = None
                                                    self._is_presence = True
                                                    self.dual_stack = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/ietf-qos:hierarchical-counters'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self._is_presence:
                                                        return True
                                                    if self.dual_stack is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                                    return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.HierarchicalCounters']['meta_info']


                                            class Actions(object):
                                                """
                                                actions
                                                
                                                .. attribute:: conform_handling
                                                
                                                	conform\-handling
                                                	**type**\:   :py:class:`ConformHandling <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ConformHandling>`
                                                
                                                .. attribute:: exceed_handling
                                                
                                                	exceed\-handling
                                                	**type**\:   :py:class:`ExceedHandling <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ExceedHandling>`
                                                
                                                

                                                """

                                                _prefix = 'qos'
                                                _revision = '2016-10-20'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.conform_handling = Qos.Policies.Policy.Metering.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ConformHandling()
                                                    self.conform_handling.parent = self
                                                    self.exceed_handling = Qos.Policies.Policy.Metering.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ExceedHandling()
                                                    self.exceed_handling.parent = self


                                                class ConformHandling(object):
                                                    """
                                                    conform\-handling
                                                    
                                                    .. attribute:: af_drop
                                                    
                                                    	af\-drop
                                                    	**type**\:  int
                                                    
                                                    	**range:** 1..3
                                                    
                                                    .. attribute:: drop_precedence
                                                    
                                                    	drop\-precedence
                                                    	**type**\: one of the below types:
                                                    
                                                    	**type**\:  int
                                                    
                                                    	**range:** 1..7
                                                    
                                                    
                                                    ----
                                                    	**type**\:   :py:class:`DropPrecedenceEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.DropPrecedenceEnum>`
                                                    
                                                    
                                                    ----
                                                    .. attribute:: mark_dscp
                                                    
                                                    	mark\-dscp
                                                    	**type**\: one of the below types:
                                                    
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..63
                                                    
                                                    
                                                    ----
                                                    	**type**\:   :py:class:`DscpCodeAllValuesTypeEnum <ydk.models.ietf.ietf_qos.DscpCodeAllValuesTypeEnum>`
                                                    
                                                    
                                                    ----
                                                    .. attribute:: mark_precedence
                                                    
                                                    	mark\-precedence
                                                    	**type**\:  int
                                                    
                                                    	**range:** 1..3
                                                    
                                                    .. attribute:: mark_priority
                                                    
                                                    	mark\-priority
                                                    	**type**\: one of the below types:
                                                    
                                                    	**type**\:  int
                                                    
                                                    	**range:** 1..7
                                                    
                                                    
                                                    ----
                                                    	**type**\:   :py:class:`MarkPriorityEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.MarkPriorityEnum>`
                                                    
                                                    
                                                    ----
                                                    .. attribute:: no_action
                                                    
                                                    	no\-action
                                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                                    
                                                    

                                                    """

                                                    _prefix = 'qos'
                                                    _revision = '2016-10-20'

                                                    def __init__(self):
                                                        self.parent = None
                                                        self.af_drop = None
                                                        self.drop_precedence = None
                                                        self.mark_dscp = None
                                                        self.mark_precedence = None
                                                        self.mark_priority = None
                                                        self.no_action = None

                                                    class DropPrecedenceEnum(Enum):
                                                        """
                                                        DropPrecedenceEnum

                                                        drop\-precedence

                                                        .. data:: ignore = 0

                                                        	ignore

                                                        """

                                                        ignore = 0


                                                        @staticmethod
                                                        def _meta_info():
                                                            from ydk.models.ietf._meta import _ietf_qos as meta
                                                            return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ConformHandling.DropPrecedenceEnum']


                                                    class MarkPriorityEnum(Enum):
                                                        """
                                                        MarkPriorityEnum

                                                        mark\-priority

                                                        .. data:: ignore = 0

                                                        	ignore

                                                        """

                                                        ignore = 0


                                                        @staticmethod
                                                        def _meta_info():
                                                            from ydk.models.ietf._meta import _ietf_qos as meta
                                                            return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ConformHandling.MarkPriorityEnum']


                                                    @property
                                                    def _common_path(self):
                                                        if self.parent is None:
                                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                                        return self.parent._common_path +'/ietf-qos:conform-handling'

                                                    def is_config(self):
                                                        ''' Returns True if this instance represents config data else returns False '''
                                                        return True

                                                    def _has_data(self):
                                                        if not self.is_config():
                                                            return False
                                                        if self.af_drop is not None:
                                                            return True

                                                        if self.drop_precedence is not None:
                                                            return True

                                                        if self.mark_dscp is not None:
                                                            return True

                                                        if self.mark_precedence is not None:
                                                            return True

                                                        if self.mark_priority is not None:
                                                            return True

                                                        if self.no_action is not None:
                                                            return True

                                                        return False

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                                        return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ConformHandling']['meta_info']


                                                class ExceedHandling(object):
                                                    """
                                                    exceed\-handling
                                                    
                                                    .. attribute:: af_drop
                                                    
                                                    	af\-drop
                                                    	**type**\:  int
                                                    
                                                    	**range:** 1..3
                                                    
                                                    .. attribute:: drop_packet
                                                    
                                                    	drop\-packet
                                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                                    
                                                    .. attribute:: drop_precedence
                                                    
                                                    	drop\-precedence
                                                    	**type**\: one of the below types:
                                                    
                                                    	**type**\:  int
                                                    
                                                    	**range:** 1..7
                                                    
                                                    
                                                    ----
                                                    	**type**\:   :py:class:`DropPrecedenceEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.DropPrecedenceEnum>`
                                                    
                                                    
                                                    ----
                                                    .. attribute:: mark_dscp
                                                    
                                                    	mark\-dscp
                                                    	**type**\: one of the below types:
                                                    
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..63
                                                    
                                                    
                                                    ----
                                                    	**type**\:   :py:class:`DscpCodeAllValuesTypeEnum <ydk.models.ietf.ietf_qos.DscpCodeAllValuesTypeEnum>`
                                                    
                                                    
                                                    ----
                                                    .. attribute:: mark_precedence
                                                    
                                                    	mark\-precedence
                                                    	**type**\:  int
                                                    
                                                    	**range:** 1..3
                                                    
                                                    .. attribute:: mark_priority
                                                    
                                                    	mark\-priority
                                                    	**type**\: one of the below types:
                                                    
                                                    	**type**\:  int
                                                    
                                                    	**range:** 1..7
                                                    
                                                    
                                                    ----
                                                    	**type**\:   :py:class:`MarkPriorityEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.MarkPriorityEnum>`
                                                    
                                                    
                                                    ----
                                                    .. attribute:: no_action
                                                    
                                                    	no\-action
                                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                                    
                                                    

                                                    """

                                                    _prefix = 'qos'
                                                    _revision = '2016-10-20'

                                                    def __init__(self):
                                                        self.parent = None
                                                        self.af_drop = None
                                                        self.drop_packet = None
                                                        self.drop_precedence = None
                                                        self.mark_dscp = None
                                                        self.mark_precedence = None
                                                        self.mark_priority = None
                                                        self.no_action = None

                                                    class DropPrecedenceEnum(Enum):
                                                        """
                                                        DropPrecedenceEnum

                                                        drop\-precedence

                                                        .. data:: ignore = 0

                                                        	ignore

                                                        """

                                                        ignore = 0


                                                        @staticmethod
                                                        def _meta_info():
                                                            from ydk.models.ietf._meta import _ietf_qos as meta
                                                            return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ExceedHandling.DropPrecedenceEnum']


                                                    class MarkPriorityEnum(Enum):
                                                        """
                                                        MarkPriorityEnum

                                                        mark\-priority

                                                        .. data:: ignore = 0

                                                        	ignore

                                                        """

                                                        ignore = 0


                                                        @staticmethod
                                                        def _meta_info():
                                                            from ydk.models.ietf._meta import _ietf_qos as meta
                                                            return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ExceedHandling.MarkPriorityEnum']


                                                    @property
                                                    def _common_path(self):
                                                        if self.parent is None:
                                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                                        return self.parent._common_path +'/ietf-qos:exceed-handling'

                                                    def is_config(self):
                                                        ''' Returns True if this instance represents config data else returns False '''
                                                        return True

                                                    def _has_data(self):
                                                        if not self.is_config():
                                                            return False
                                                        if self.af_drop is not None:
                                                            return True

                                                        if self.drop_packet is not None:
                                                            return True

                                                        if self.drop_precedence is not None:
                                                            return True

                                                        if self.mark_dscp is not None:
                                                            return True

                                                        if self.mark_precedence is not None:
                                                            return True

                                                        if self.mark_priority is not None:
                                                            return True

                                                        if self.no_action is not None:
                                                            return True

                                                        return False

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                                        return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ExceedHandling']['meta_info']

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/ietf-qos:actions'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.conform_handling is not None and self.conform_handling._has_data():
                                                        return True

                                                    if self.exceed_handling is not None and self.exceed_handling._has_data():
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                                    return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/ietf-qos:bit-rate'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.actions is not None and self.actions._has_data():
                                                    return True

                                                if self.bit_rate is not None:
                                                    return True

                                                if self.burst is not None:
                                                    return True

                                                if self.counters is not None and self.counters._has_data():
                                                    return True

                                                if self.excess_burst is not None:
                                                    return True

                                                if self.hierarchical_counters is not None and self.hierarchical_counters._has_data():
                                                    return True

                                                if self.time_burst is not None:
                                                    return True

                                                if self.time_excess_burst is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.ietf._meta import _ietf_qos as meta
                                                return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate']['meta_info']


                                        class Percentage(object):
                                            """
                                            percentage
                                            
                                            .. attribute:: counters
                                            
                                            	counters
                                            	**type**\:   :py:class:`Counters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage.Counters>`
                                            
                                            	**presence node**\: True
                                            
                                            .. attribute:: hierarchical_counters
                                            
                                            	hierarchical\-counters
                                            	**type**\:   :py:class:`HierarchicalCounters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage.HierarchicalCounters>`
                                            
                                            	**presence node**\: True
                                            
                                            .. attribute:: percentage
                                            
                                            	percentage
                                            	**type**\:  int
                                            
                                            	**range:** 1..100
                                            
                                            	**units**\: percent
                                            
                                            

                                            """

                                            _prefix = 'qos'
                                            _revision = '2016-10-20'

                                            def __init__(self):
                                                self.parent = None
                                                self.counters = None
                                                self.hierarchical_counters = None
                                                self.percentage = None


                                            class Counters(object):
                                                """
                                                counters
                                                
                                                .. attribute:: hierarchical_counters
                                                
                                                	hierarchical\-counters
                                                	**type**\:   :py:class:`HierarchicalCounters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage.Counters.HierarchicalCounters>`
                                                
                                                	**presence node**\: True
                                                
                                                .. attribute:: _is_presence
                                                
                                                	Is present if this instance represents presence container else not
                                                	**type**\: bool
                                                
                                                

                                                This class is a :ref:`presence class<presence-class>`

                                                """

                                                _prefix = 'qos'
                                                _revision = '2016-10-20'

                                                def __init__(self):
                                                    self.parent = None
                                                    self._is_presence = True
                                                    self.hierarchical_counters = None


                                                class HierarchicalCounters(object):
                                                    """
                                                    hierarchical\-counters
                                                    
                                                    .. attribute:: dual_stack
                                                    
                                                    	dual\-stack
                                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                                    
                                                    .. attribute:: _is_presence
                                                    
                                                    	Is present if this instance represents presence container else not
                                                    	**type**\: bool
                                                    
                                                    

                                                    This class is a :ref:`presence class<presence-class>`

                                                    """

                                                    _prefix = 'qos'
                                                    _revision = '2016-10-20'

                                                    def __init__(self):
                                                        self.parent = None
                                                        self._is_presence = True
                                                        self.dual_stack = None

                                                    @property
                                                    def _common_path(self):
                                                        if self.parent is None:
                                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                                        return self.parent._common_path +'/ietf-qos:hierarchical-counters'

                                                    def is_config(self):
                                                        ''' Returns True if this instance represents config data else returns False '''
                                                        return True

                                                    def _has_data(self):
                                                        if not self.is_config():
                                                            return False
                                                        if self._is_presence:
                                                            return True
                                                        if self.dual_stack is not None:
                                                            return True

                                                        return False

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                                        return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage.Counters.HierarchicalCounters']['meta_info']

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/ietf-qos:counters'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self._is_presence:
                                                        return True
                                                    if self.hierarchical_counters is not None and self.hierarchical_counters._has_data():
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                                    return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage.Counters']['meta_info']


                                            class HierarchicalCounters(object):
                                                """
                                                hierarchical\-counters
                                                
                                                .. attribute:: dual_stack
                                                
                                                	dual\-stack
                                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                                
                                                .. attribute:: _is_presence
                                                
                                                	Is present if this instance represents presence container else not
                                                	**type**\: bool
                                                
                                                

                                                This class is a :ref:`presence class<presence-class>`

                                                """

                                                _prefix = 'qos'
                                                _revision = '2016-10-20'

                                                def __init__(self):
                                                    self.parent = None
                                                    self._is_presence = True
                                                    self.dual_stack = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/ietf-qos:hierarchical-counters'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self._is_presence:
                                                        return True
                                                    if self.dual_stack is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                                    return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage.HierarchicalCounters']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/ietf-qos:percentage'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.counters is not None and self.counters._has_data():
                                                    return True

                                                if self.hierarchical_counters is not None and self.hierarchical_counters._has_data():
                                                    return True

                                                if self.percentage is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.ietf._meta import _ietf_qos as meta
                                                return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/ietf-qos:packet-handling'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.af_drop is not None:
                                                return True

                                            if self.bit_rate is not None and self.bit_rate._has_data():
                                                return True

                                            if self.drop_precedence is not None:
                                                return True

                                            if self.mark_dscp is not None:
                                                return True

                                            if self.mark_precedence is not None:
                                                return True

                                            if self.mark_priority is not None:
                                                return True

                                            if self.parent_class is not None:
                                                return True

                                            if self.percentage is not None and self.percentage._has_data():
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.ietf._meta import _ietf_qos as meta
                                            return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')
                                        if self.name is None:
                                            raise YPYModelError('Key property name is None')

                                        return self.parent._common_path +'/ietf-qos:class[ietf-qos:name = ' + str(self.name) + ']'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.name is not None:
                                            return True

                                        if self.packet_handling is not None and self.packet_handling._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                        return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily1.Policy_.ClassGroup.Classes.Class_']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-qos:classes'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.class_ is not None:
                                        for child_ref in self.class_:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily1.Policy_.ClassGroup.Classes']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-qos:class-group'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.class_group_reference is not None:
                                    return True

                                if self.classes is not None and self.classes._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily1.Policy_.ClassGroup']['meta_info']


                        class AccessGroup(object):
                            """
                            access\-group
                            
                            .. attribute:: classes
                            
                            	classes
                            	**type**\:   :py:class:`Classes <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily1.Policy_.AccessGroup.Classes>`
                            
                            .. attribute:: ip_access_group
                            
                            	Reference an IPv4 policy
                            	**type**\:   :py:class:`IpAccessGroup <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily1.Policy_.AccessGroup.IpAccessGroup>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: ipv6_access_group
                            
                            	Reference an IPv6 policy
                            	**type**\:   :py:class:`Ipv6AccessGroup <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily1.Policy_.AccessGroup.Ipv6AccessGroup>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: l2_access_group
                            
                            	Reference a layer\-2 policy
                            	**type**\:   :py:class:`L2AccessGroup <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily1.Policy_.AccessGroup.L2AccessGroup>`
                            
                            	**presence node**\: True
                            
                            

                            """

                            _prefix = 'qos'
                            _revision = '2016-10-20'

                            def __init__(self):
                                self.parent = None
                                self.classes = Qos.Policies.Policy.Metering.CardFamily1.Policy_.AccessGroup.Classes()
                                self.classes.parent = self
                                self.ip_access_group = None
                                self.ipv6_access_group = None
                                self.l2_access_group = None


                            class IpAccessGroup(object):
                                """
                                Reference an IPv4 policy
                                
                                .. attribute:: context_name
                                
                                	context\-name
                                	**type**\:  str
                                
                                	**mandatory**\: True
                                
                                .. attribute:: policy_name
                                
                                	policy\-name
                                	**type**\:  str
                                
                                	**mandatory**\: True
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'qos'
                                _revision = '2016-10-20'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.context_name = None
                                    self.policy_name = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-qos:ip-access-group'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.context_name is not None:
                                        return True

                                    if self.policy_name is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily1.Policy_.AccessGroup.IpAccessGroup']['meta_info']


                            class Ipv6AccessGroup(object):
                                """
                                Reference an IPv6 policy
                                
                                .. attribute:: context_name
                                
                                	context\-name
                                	**type**\:  str
                                
                                	**mandatory**\: True
                                
                                .. attribute:: policy_name
                                
                                	policy\-name
                                	**type**\:  str
                                
                                	**mandatory**\: True
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'qos'
                                _revision = '2016-10-20'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.context_name = None
                                    self.policy_name = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-qos:ipv6-access-group'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.context_name is not None:
                                        return True

                                    if self.policy_name is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily1.Policy_.AccessGroup.Ipv6AccessGroup']['meta_info']


                            class L2AccessGroup(object):
                                """
                                Reference a layer\-2 policy
                                
                                .. attribute:: policy_name
                                
                                	policy\-name
                                	**type**\:  str
                                
                                	**mandatory**\: True
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'qos'
                                _revision = '2016-10-20'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.policy_name = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-qos:l2-access-group'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.policy_name is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily1.Policy_.AccessGroup.L2AccessGroup']['meta_info']


                            class Classes(object):
                                """
                                classes
                                
                                .. attribute:: class_
                                
                                	class
                                	**type**\: list of    :py:class:`Class_ <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily1.Policy_.AccessGroup.Classes.Class_>`
                                
                                

                                """

                                _prefix = 'qos'
                                _revision = '2016-10-20'

                                def __init__(self):
                                    self.parent = None
                                    self.class_ = YList()
                                    self.class_.parent = self
                                    self.class_.name = 'class_'


                                class Class_(object):
                                    """
                                    class
                                    
                                    .. attribute:: name  <key>
                                    
                                    	name
                                    	**type**\:  str
                                    
                                    .. attribute:: packet_handling
                                    
                                    	packet\-handling
                                    	**type**\:   :py:class:`PacketHandling <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily1.Policy_.AccessGroup.Classes.Class_.PacketHandling>`
                                    
                                    

                                    """

                                    _prefix = 'qos'
                                    _revision = '2016-10-20'

                                    def __init__(self):
                                        self.parent = None
                                        self.name = None
                                        self.packet_handling = Qos.Policies.Policy.Metering.CardFamily1.Policy_.AccessGroup.Classes.Class_.PacketHandling()
                                        self.packet_handling.parent = self


                                    class PacketHandling(object):
                                        """
                                        packet\-handling
                                        
                                        .. attribute:: parent_class
                                        
                                        	parent\-class
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'qos'
                                        _revision = '2016-10-20'

                                        def __init__(self):
                                            self.parent = None
                                            self.parent_class = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/ietf-qos:packet-handling'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.parent_class is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.ietf._meta import _ietf_qos as meta
                                            return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily1.Policy_.AccessGroup.Classes.Class_.PacketHandling']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')
                                        if self.name is None:
                                            raise YPYModelError('Key property name is None')

                                        return self.parent._common_path +'/ietf-qos:class[ietf-qos:name = ' + str(self.name) + ']'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.name is not None:
                                            return True

                                        if self.packet_handling is not None and self.packet_handling._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                        return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily1.Policy_.AccessGroup.Classes.Class_']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-qos:classes'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.class_ is not None:
                                        for child_ref in self.class_:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily1.Policy_.AccessGroup.Classes']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-qos:access-group'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.classes is not None and self.classes._has_data():
                                    return True

                                if self.ip_access_group is not None and self.ip_access_group._has_data():
                                    return True

                                if self.ipv6_access_group is not None and self.ipv6_access_group._has_data():
                                    return True

                                if self.l2_access_group is not None and self.l2_access_group._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily1.Policy_.AccessGroup']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-qos:policy'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.access_group is not None and self.access_group._has_data():
                                return True

                            if self.class_group is not None and self.class_group._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_qos as meta
                            return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily1.Policy_']['meta_info']


                    class Rate(object):
                        """
                        Specify rate limits inline
                        
                        .. attribute:: actions
                        
                        	actions
                        	**type**\:   :py:class:`Actions <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily1.Rate.Actions>`
                        
                        .. attribute:: bit_rate
                        
                        	bit\-rate
                        	**type**\:  int
                        
                        	**range:** 66..100000000
                        
                        .. attribute:: burst
                        
                        	burst
                        	**type**\:  int
                        
                        	**range:** 1..4250000000
                        
                        	**units**\: byte
                        
                        .. attribute:: counters
                        
                        	counters
                        	**type**\:   :py:class:`Counters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily1.Rate.Counters>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: excess_burst
                        
                        	excess\-burst
                        	**type**\:  int
                        
                        	**range:** 1..4250000000
                        
                        	**units**\: byte
                        
                        .. attribute:: hierarchical_counters
                        
                        	hierarchical\-counters
                        	**type**\:   :py:class:`HierarchicalCounters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily1.Rate.HierarchicalCounters>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: informational
                        
                        	informational
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: time_burst
                        
                        	time\-burst
                        	**type**\:  int
                        
                        	**range:** 1..10000
                        
                        	**units**\: millisecond
                        
                        .. attribute:: time_excess_burst
                        
                        	time\-excess\-burst
                        	**type**\:  int
                        
                        	**range:** 1..10000
                        
                        

                        """

                        _prefix = 'qos'
                        _revision = '2016-10-20'

                        def __init__(self):
                            self.parent = None
                            self.actions = Qos.Policies.Policy.Metering.CardFamily1.Rate.Actions()
                            self.actions.parent = self
                            self.bit_rate = None
                            self.burst = None
                            self.counters = None
                            self.excess_burst = None
                            self.hierarchical_counters = None
                            self.informational = None
                            self.time_burst = None
                            self.time_excess_burst = None


                        class Counters(object):
                            """
                            counters
                            
                            .. attribute:: hierarchical_counters
                            
                            	hierarchical\-counters
                            	**type**\:   :py:class:`HierarchicalCounters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily1.Rate.Counters.HierarchicalCounters>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'qos'
                            _revision = '2016-10-20'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.hierarchical_counters = None


                            class HierarchicalCounters(object):
                                """
                                hierarchical\-counters
                                
                                .. attribute:: dual_stack
                                
                                	dual\-stack
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'qos'
                                _revision = '2016-10-20'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.dual_stack = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-qos:hierarchical-counters'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.dual_stack is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily1.Rate.Counters.HierarchicalCounters']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-qos:counters'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.hierarchical_counters is not None and self.hierarchical_counters._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily1.Rate.Counters']['meta_info']


                        class HierarchicalCounters(object):
                            """
                            hierarchical\-counters
                            
                            .. attribute:: dual_stack
                            
                            	dual\-stack
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'qos'
                            _revision = '2016-10-20'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.dual_stack = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-qos:hierarchical-counters'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.dual_stack is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily1.Rate.HierarchicalCounters']['meta_info']


                        class Actions(object):
                            """
                            actions
                            
                            .. attribute:: conform_handling
                            
                            	conform\-handling
                            	**type**\:   :py:class:`ConformHandling <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily1.Rate.Actions.ConformHandling>`
                            
                            .. attribute:: exceed_handling
                            
                            	exceed\-handling
                            	**type**\:   :py:class:`ExceedHandling <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily1.Rate.Actions.ExceedHandling>`
                            
                            .. attribute:: violate_handling
                            
                            	violate\-handling
                            	**type**\:   :py:class:`ViolateHandling <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily1.Rate.Actions.ViolateHandling>`
                            
                            

                            """

                            _prefix = 'qos'
                            _revision = '2016-10-20'

                            def __init__(self):
                                self.parent = None
                                self.conform_handling = Qos.Policies.Policy.Metering.CardFamily1.Rate.Actions.ConformHandling()
                                self.conform_handling.parent = self
                                self.exceed_handling = Qos.Policies.Policy.Metering.CardFamily1.Rate.Actions.ExceedHandling()
                                self.exceed_handling.parent = self
                                self.violate_handling = Qos.Policies.Policy.Metering.CardFamily1.Rate.Actions.ViolateHandling()
                                self.violate_handling.parent = self


                            class ConformHandling(object):
                                """
                                conform\-handling
                                
                                .. attribute:: af_drop
                                
                                	af\-drop
                                	**type**\:  int
                                
                                	**range:** 1..3
                                
                                .. attribute:: drop_precedence
                                
                                	drop\-precedence
                                	**type**\: one of the below types:
                                
                                	**type**\:  int
                                
                                	**range:** 1..7
                                
                                
                                ----
                                	**type**\:   :py:class:`DropPrecedenceEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.DropPrecedenceEnum>`
                                
                                
                                ----
                                .. attribute:: mark_dscp
                                
                                	mark\-dscp
                                	**type**\: one of the below types:
                                
                                	**type**\:  int
                                
                                	**range:** 0..63
                                
                                
                                ----
                                	**type**\:   :py:class:`DscpCodeAllValuesTypeEnum <ydk.models.ietf.ietf_qos.DscpCodeAllValuesTypeEnum>`
                                
                                
                                ----
                                .. attribute:: mark_precedence
                                
                                	mark\-precedence
                                	**type**\:  int
                                
                                	**range:** 1..3
                                
                                .. attribute:: mark_priority
                                
                                	mark\-priority
                                	**type**\: one of the below types:
                                
                                	**type**\:  int
                                
                                	**range:** 1..7
                                
                                
                                ----
                                	**type**\:   :py:class:`MarkPriorityEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.MarkPriorityEnum>`
                                
                                
                                ----
                                .. attribute:: no_action
                                
                                	no\-action
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                

                                """

                                _prefix = 'qos'
                                _revision = '2016-10-20'

                                def __init__(self):
                                    self.parent = None
                                    self.af_drop = None
                                    self.drop_precedence = None
                                    self.mark_dscp = None
                                    self.mark_precedence = None
                                    self.mark_priority = None
                                    self.no_action = None

                                class DropPrecedenceEnum(Enum):
                                    """
                                    DropPrecedenceEnum

                                    drop\-precedence

                                    .. data:: ignore = 0

                                    	ignore

                                    """

                                    ignore = 0


                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                        return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily1.Rate.Actions.ConformHandling.DropPrecedenceEnum']


                                class MarkPriorityEnum(Enum):
                                    """
                                    MarkPriorityEnum

                                    mark\-priority

                                    .. data:: ignore = 0

                                    	ignore

                                    """

                                    ignore = 0


                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                        return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily1.Rate.Actions.ConformHandling.MarkPriorityEnum']


                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-qos:conform-handling'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.af_drop is not None:
                                        return True

                                    if self.drop_precedence is not None:
                                        return True

                                    if self.mark_dscp is not None:
                                        return True

                                    if self.mark_precedence is not None:
                                        return True

                                    if self.mark_priority is not None:
                                        return True

                                    if self.no_action is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily1.Rate.Actions.ConformHandling']['meta_info']


                            class ExceedHandling(object):
                                """
                                exceed\-handling
                                
                                .. attribute:: af_drop
                                
                                	af\-drop
                                	**type**\:  int
                                
                                	**range:** 1..3
                                
                                .. attribute:: drop_packet
                                
                                	drop\-packet
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: drop_precedence
                                
                                	drop\-precedence
                                	**type**\: one of the below types:
                                
                                	**type**\:  int
                                
                                	**range:** 1..7
                                
                                
                                ----
                                	**type**\:   :py:class:`DropPrecedenceEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.DropPrecedenceEnum>`
                                
                                
                                ----
                                .. attribute:: mark_dscp
                                
                                	mark\-dscp
                                	**type**\: one of the below types:
                                
                                	**type**\:  int
                                
                                	**range:** 0..63
                                
                                
                                ----
                                	**type**\:   :py:class:`DscpCodeAllValuesTypeEnum <ydk.models.ietf.ietf_qos.DscpCodeAllValuesTypeEnum>`
                                
                                
                                ----
                                .. attribute:: mark_precedence
                                
                                	mark\-precedence
                                	**type**\:  int
                                
                                	**range:** 1..3
                                
                                .. attribute:: mark_priority
                                
                                	mark\-priority
                                	**type**\: one of the below types:
                                
                                	**type**\:  int
                                
                                	**range:** 1..7
                                
                                
                                ----
                                	**type**\:   :py:class:`MarkPriorityEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.MarkPriorityEnum>`
                                
                                
                                ----
                                .. attribute:: no_action
                                
                                	no\-action
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                

                                """

                                _prefix = 'qos'
                                _revision = '2016-10-20'

                                def __init__(self):
                                    self.parent = None
                                    self.af_drop = None
                                    self.drop_packet = None
                                    self.drop_precedence = None
                                    self.mark_dscp = None
                                    self.mark_precedence = None
                                    self.mark_priority = None
                                    self.no_action = None

                                class DropPrecedenceEnum(Enum):
                                    """
                                    DropPrecedenceEnum

                                    drop\-precedence

                                    .. data:: ignore = 0

                                    	ignore

                                    """

                                    ignore = 0


                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                        return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily1.Rate.Actions.ExceedHandling.DropPrecedenceEnum']


                                class MarkPriorityEnum(Enum):
                                    """
                                    MarkPriorityEnum

                                    mark\-priority

                                    .. data:: ignore = 0

                                    	ignore

                                    """

                                    ignore = 0


                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                        return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily1.Rate.Actions.ExceedHandling.MarkPriorityEnum']


                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-qos:exceed-handling'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.af_drop is not None:
                                        return True

                                    if self.drop_packet is not None:
                                        return True

                                    if self.drop_precedence is not None:
                                        return True

                                    if self.mark_dscp is not None:
                                        return True

                                    if self.mark_precedence is not None:
                                        return True

                                    if self.mark_priority is not None:
                                        return True

                                    if self.no_action is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily1.Rate.Actions.ExceedHandling']['meta_info']


                            class ViolateHandling(object):
                                """
                                violate\-handling
                                
                                .. attribute:: af_drop
                                
                                	af\-drop
                                	**type**\:  int
                                
                                	**range:** 1..3
                                
                                .. attribute:: drop_packet
                                
                                	drop\-packet
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: drop_precedence
                                
                                	drop\-precedence
                                	**type**\: one of the below types:
                                
                                	**type**\:  int
                                
                                	**range:** 1..7
                                
                                
                                ----
                                	**type**\:   :py:class:`DropPrecedenceEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.DropPrecedenceEnum>`
                                
                                
                                ----
                                .. attribute:: mark_dscp
                                
                                	mark\-dscp
                                	**type**\: one of the below types:
                                
                                	**type**\:  int
                                
                                	**range:** 0..63
                                
                                
                                ----
                                	**type**\:   :py:class:`DscpCodeAllValuesTypeEnum <ydk.models.ietf.ietf_qos.DscpCodeAllValuesTypeEnum>`
                                
                                
                                ----
                                .. attribute:: mark_precedence
                                
                                	mark\-precedence
                                	**type**\:  int
                                
                                	**range:** 1..3
                                
                                .. attribute:: mark_priority
                                
                                	mark\-priority
                                	**type**\: one of the below types:
                                
                                	**type**\:  int
                                
                                	**range:** 1..7
                                
                                
                                ----
                                	**type**\:   :py:class:`MarkPriorityEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.MarkPriorityEnum>`
                                
                                
                                ----
                                .. attribute:: no_action
                                
                                	no\-action
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                

                                """

                                _prefix = 'qos'
                                _revision = '2016-10-20'

                                def __init__(self):
                                    self.parent = None
                                    self.af_drop = None
                                    self.drop_packet = None
                                    self.drop_precedence = None
                                    self.mark_dscp = None
                                    self.mark_precedence = None
                                    self.mark_priority = None
                                    self.no_action = None

                                class DropPrecedenceEnum(Enum):
                                    """
                                    DropPrecedenceEnum

                                    drop\-precedence

                                    .. data:: ignore = 0

                                    	ignore

                                    """

                                    ignore = 0


                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                        return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily1.Rate.Actions.ViolateHandling.DropPrecedenceEnum']


                                class MarkPriorityEnum(Enum):
                                    """
                                    MarkPriorityEnum

                                    mark\-priority

                                    .. data:: ignore = 0

                                    	ignore

                                    """

                                    ignore = 0


                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                        return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily1.Rate.Actions.ViolateHandling.MarkPriorityEnum']


                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-qos:violate-handling'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.af_drop is not None:
                                        return True

                                    if self.drop_packet is not None:
                                        return True

                                    if self.drop_precedence is not None:
                                        return True

                                    if self.mark_dscp is not None:
                                        return True

                                    if self.mark_precedence is not None:
                                        return True

                                    if self.mark_priority is not None:
                                        return True

                                    if self.no_action is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily1.Rate.Actions.ViolateHandling']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-qos:actions'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.conform_handling is not None and self.conform_handling._has_data():
                                    return True

                                if self.exceed_handling is not None and self.exceed_handling._has_data():
                                    return True

                                if self.violate_handling is not None and self.violate_handling._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily1.Rate.Actions']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-qos:rate'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.actions is not None and self.actions._has_data():
                                return True

                            if self.bit_rate is not None:
                                return True

                            if self.burst is not None:
                                return True

                            if self.counters is not None and self.counters._has_data():
                                return True

                            if self.excess_burst is not None:
                                return True

                            if self.hierarchical_counters is not None and self.hierarchical_counters._has_data():
                                return True

                            if self.informational is not None:
                                return True

                            if self.time_burst is not None:
                                return True

                            if self.time_excess_burst is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_qos as meta
                            return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily1.Rate']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-qos:card-family-1'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.af_drop is not None:
                            return True

                        if self.drop_precedence is not None:
                            return True

                        if self.mark_dscp is not None:
                            return True

                        if self.mark_precedence is not None:
                            return True

                        if self.mark_priority is not None:
                            return True

                        if self.policy is not None and self.policy._has_data():
                            return True

                        if self.rate is not None and self.rate._has_data():
                            return True

                        if self.rate_calculation_exclude_layer_2_overhead is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_qos as meta
                        return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily1']['meta_info']


                class CardFamily2(object):
                    """
                    card\-family\-2
                    
                    .. attribute:: af_drop
                    
                    	af\-drop
                    	**type**\:  int
                    
                    	**range:** 1..3
                    
                    .. attribute:: drop_precedence
                    
                    	drop\-precedence
                    	**type**\: one of the below types:
                    
                    	**type**\:  int
                    
                    	**range:** 1..7
                    
                    
                    ----
                    	**type**\:   :py:class:`DropPrecedenceEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.DropPrecedenceEnum>`
                    
                    
                    ----
                    .. attribute:: mark_dscp
                    
                    	mark\-dscp
                    	**type**\: one of the below types:
                    
                    	**type**\:  int
                    
                    	**range:** 0..63
                    
                    
                    ----
                    	**type**\:   :py:class:`DscpCodeAllValuesTypeEnum <ydk.models.ietf.ietf_qos.DscpCodeAllValuesTypeEnum>`
                    
                    
                    ----
                    .. attribute:: mark_precedence
                    
                    	mark\-precedence
                    	**type**\:  int
                    
                    	**range:** 1..3
                    
                    .. attribute:: mark_priority
                    
                    	mark\-priority
                    	**type**\: one of the below types:
                    
                    	**type**\:  int
                    
                    	**range:** 1..7
                    
                    
                    ----
                    	**type**\:   :py:class:`MarkPriorityEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.MarkPriorityEnum>`
                    
                    
                    ----
                    .. attribute:: policy
                    
                    	policy
                    	**type**\:   :py:class:`Policy_ <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily2.Policy_>`
                    
                    .. attribute:: rate
                    
                    	Specify rate limits inline
                    	**type**\:   :py:class:`Rate <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily2.Rate>`
                    
                    .. attribute:: rate_calculation_exclude_layer_2_overhead
                    
                    	Specify that rate calculation excludes the size ofLayer 2 overhead for the layer 3 circuit on which a policy is applied
                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                    
                    

                    """

                    _prefix = 'qos'
                    _revision = '2016-10-20'

                    def __init__(self):
                        self.parent = None
                        self.af_drop = None
                        self.drop_precedence = None
                        self.mark_dscp = None
                        self.mark_precedence = None
                        self.mark_priority = None
                        self.policy = Qos.Policies.Policy.Metering.CardFamily2.Policy_()
                        self.policy.parent = self
                        self.rate = Qos.Policies.Policy.Metering.CardFamily2.Rate()
                        self.rate.parent = self
                        self.rate_calculation_exclude_layer_2_overhead = None

                    class DropPrecedenceEnum(Enum):
                        """
                        DropPrecedenceEnum

                        drop\-precedence

                        .. data:: ignore = 0

                        	ignore

                        """

                        ignore = 0


                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_qos as meta
                            return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily2.DropPrecedenceEnum']


                    class MarkPriorityEnum(Enum):
                        """
                        MarkPriorityEnum

                        mark\-priority

                        .. data:: ignore = 0

                        	ignore

                        """

                        ignore = 0


                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_qos as meta
                            return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily2.MarkPriorityEnum']



                    class Policy_(object):
                        """
                        policy
                        
                        .. attribute:: access_group
                        
                        	access\-group
                        	**type**\:   :py:class:`AccessGroup <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily2.Policy_.AccessGroup>`
                        
                        .. attribute:: class_group
                        
                        	Reference a previously defined class
                        	**type**\:   :py:class:`ClassGroup <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily2.Policy_.ClassGroup>`
                        
                        

                        """

                        _prefix = 'qos'
                        _revision = '2016-10-20'

                        def __init__(self):
                            self.parent = None
                            self.access_group = Qos.Policies.Policy.Metering.CardFamily2.Policy_.AccessGroup()
                            self.access_group.parent = self
                            self.class_group = Qos.Policies.Policy.Metering.CardFamily2.Policy_.ClassGroup()
                            self.class_group.parent = self


                        class ClassGroup(object):
                            """
                            Reference a previously defined class
                            
                            .. attribute:: class_group_reference
                            
                            	class\-group\-reference
                            	**type**\:  str
                            
                            	**refers to**\:  :py:class:`name <ydk.models.ietf.ietf_qos.Qos.ClassDefinitions.ClassDefinition>`
                            
                            .. attribute:: classes
                            
                            	classes
                            	**type**\:   :py:class:`Classes <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily2.Policy_.ClassGroup.Classes>`
                            
                            

                            """

                            _prefix = 'qos'
                            _revision = '2016-10-20'

                            def __init__(self):
                                self.parent = None
                                self.class_group_reference = None
                                self.classes = Qos.Policies.Policy.Metering.CardFamily2.Policy_.ClassGroup.Classes()
                                self.classes.parent = self


                            class Classes(object):
                                """
                                classes
                                
                                .. attribute:: class_
                                
                                	class
                                	**type**\: list of    :py:class:`Class_ <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily2.Policy_.ClassGroup.Classes.Class_>`
                                
                                

                                """

                                _prefix = 'qos'
                                _revision = '2016-10-20'

                                def __init__(self):
                                    self.parent = None
                                    self.class_ = YList()
                                    self.class_.parent = self
                                    self.class_.name = 'class_'


                                class Class_(object):
                                    """
                                    class
                                    
                                    .. attribute:: name  <key>
                                    
                                    	name
                                    	**type**\:  str
                                    
                                    	**length:** 1..39
                                    
                                    	**refers to**\:  :py:class:`class_ <ydk.models.ietf.ietf_qos.Qos.ClassDefinitions.ClassDefinition.Qos_>`
                                    
                                    .. attribute:: packet_handling
                                    
                                    	packet\-handling
                                    	**type**\:   :py:class:`PacketHandling <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling>`
                                    
                                    

                                    """

                                    _prefix = 'qos'
                                    _revision = '2016-10-20'

                                    def __init__(self):
                                        self.parent = None
                                        self.name = None
                                        self.packet_handling = Qos.Policies.Policy.Metering.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling()
                                        self.packet_handling.parent = self


                                    class PacketHandling(object):
                                        """
                                        packet\-handling
                                        
                                        .. attribute:: af_drop
                                        
                                        	af\-drop
                                        	**type**\:  int
                                        
                                        	**range:** 1..3
                                        
                                        .. attribute:: bit_rate
                                        
                                        	bit\-rate
                                        	**type**\:   :py:class:`BitRate <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate>`
                                        
                                        .. attribute:: drop_precedence
                                        
                                        	drop\-precedence
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  int
                                        
                                        	**range:** 1..7
                                        
                                        
                                        ----
                                        	**type**\:   :py:class:`DropPrecedenceEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.DropPrecedenceEnum>`
                                        
                                        
                                        ----
                                        .. attribute:: mark_dscp
                                        
                                        	mark\-dscp
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  int
                                        
                                        	**range:** 0..63
                                        
                                        
                                        ----
                                        	**type**\:   :py:class:`DscpCodeAllValuesTypeEnum <ydk.models.ietf.ietf_qos.DscpCodeAllValuesTypeEnum>`
                                        
                                        
                                        ----
                                        .. attribute:: mark_precedence
                                        
                                        	mark\-precedence
                                        	**type**\:  int
                                        
                                        	**range:** 1..3
                                        
                                        .. attribute:: mark_priority
                                        
                                        	mark\-priority
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  int
                                        
                                        	**range:** 1..7
                                        
                                        
                                        ----
                                        	**type**\:   :py:class:`MarkPriorityEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Policy_.ClassGroup.Classes.Class_.PacketHandling.MarkPriorityEnum>`
                                        
                                        
                                        ----
                                        .. attribute:: parent_class
                                        
                                        	parent\-class
                                        	**type**\:  str
                                        
                                        .. attribute:: percentage
                                        
                                        	percentage
                                        	**type**\:   :py:class:`Percentage <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage>`
                                        
                                        

                                        """

                                        _prefix = 'qos'
                                        _revision = '2016-10-20'

                                        def __init__(self):
                                            self.parent = None
                                            self.af_drop = None
                                            self.bit_rate = Qos.Policies.Policy.Metering.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate()
                                            self.bit_rate.parent = self
                                            self.drop_precedence = None
                                            self.mark_dscp = None
                                            self.mark_precedence = None
                                            self.mark_priority = None
                                            self.parent_class = None
                                            self.percentage = Qos.Policies.Policy.Metering.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage()
                                            self.percentage.parent = self

                                        class DropPrecedenceEnum(Enum):
                                            """
                                            DropPrecedenceEnum

                                            drop\-precedence

                                            .. data:: ignore = 0

                                            	ignore

                                            """

                                            ignore = 0


                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.ietf._meta import _ietf_qos as meta
                                                return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling.DropPrecedenceEnum']


                                        class MarkPriorityEnum(Enum):
                                            """
                                            MarkPriorityEnum

                                            mark\-priority

                                            .. data:: ignore = 0

                                            	ignore

                                            """

                                            ignore = 0


                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.ietf._meta import _ietf_qos as meta
                                                return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling.MarkPriorityEnum']



                                        class BitRate(object):
                                            """
                                            bit\-rate
                                            
                                            .. attribute:: actions
                                            
                                            	actions
                                            	**type**\:   :py:class:`Actions <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions>`
                                            
                                            .. attribute:: bit_rate
                                            
                                            	bit\-rate
                                            	**type**\:  int
                                            
                                            	**range:** 5..100000000
                                            
                                            .. attribute:: burst
                                            
                                            	burst
                                            	**type**\:  int
                                            
                                            	**range:** 1..4250000000
                                            
                                            	**units**\: byte
                                            
                                            .. attribute:: counters
                                            
                                            	counters
                                            	**type**\:   :py:class:`Counters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Counters>`
                                            
                                            	**presence node**\: True
                                            
                                            .. attribute:: excess_burst
                                            
                                            	excess\-burst
                                            	**type**\:  int
                                            
                                            	**range:** 1..4250000000
                                            
                                            	**units**\: byte
                                            
                                            .. attribute:: hierarchical_counters
                                            
                                            	hierarchical\-counters
                                            	**type**\:   :py:class:`HierarchicalCounters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.HierarchicalCounters>`
                                            
                                            	**presence node**\: True
                                            
                                            .. attribute:: time_burst
                                            
                                            	time\-burst
                                            	**type**\:  int
                                            
                                            	**range:** 1..10000
                                            
                                            	**units**\: millisecond
                                            
                                            .. attribute:: time_excess_burst
                                            
                                            	time\-excess\-burst
                                            	**type**\:  int
                                            
                                            	**range:** 1..10000
                                            
                                            

                                            """

                                            _prefix = 'qos'
                                            _revision = '2016-10-20'

                                            def __init__(self):
                                                self.parent = None
                                                self.actions = Qos.Policies.Policy.Metering.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions()
                                                self.actions.parent = self
                                                self.bit_rate = None
                                                self.burst = None
                                                self.counters = None
                                                self.excess_burst = None
                                                self.hierarchical_counters = None
                                                self.time_burst = None
                                                self.time_excess_burst = None


                                            class Counters(object):
                                                """
                                                counters
                                                
                                                .. attribute:: hierarchical_counters
                                                
                                                	hierarchical\-counters
                                                	**type**\:   :py:class:`HierarchicalCounters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Counters.HierarchicalCounters>`
                                                
                                                	**presence node**\: True
                                                
                                                .. attribute:: _is_presence
                                                
                                                	Is present if this instance represents presence container else not
                                                	**type**\: bool
                                                
                                                

                                                This class is a :ref:`presence class<presence-class>`

                                                """

                                                _prefix = 'qos'
                                                _revision = '2016-10-20'

                                                def __init__(self):
                                                    self.parent = None
                                                    self._is_presence = True
                                                    self.hierarchical_counters = None


                                                class HierarchicalCounters(object):
                                                    """
                                                    hierarchical\-counters
                                                    
                                                    .. attribute:: dual_stack
                                                    
                                                    	dual\-stack
                                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                                    
                                                    .. attribute:: _is_presence
                                                    
                                                    	Is present if this instance represents presence container else not
                                                    	**type**\: bool
                                                    
                                                    

                                                    This class is a :ref:`presence class<presence-class>`

                                                    """

                                                    _prefix = 'qos'
                                                    _revision = '2016-10-20'

                                                    def __init__(self):
                                                        self.parent = None
                                                        self._is_presence = True
                                                        self.dual_stack = None

                                                    @property
                                                    def _common_path(self):
                                                        if self.parent is None:
                                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                                        return self.parent._common_path +'/ietf-qos:hierarchical-counters'

                                                    def is_config(self):
                                                        ''' Returns True if this instance represents config data else returns False '''
                                                        return True

                                                    def _has_data(self):
                                                        if not self.is_config():
                                                            return False
                                                        if self._is_presence:
                                                            return True
                                                        if self.dual_stack is not None:
                                                            return True

                                                        return False

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                                        return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Counters.HierarchicalCounters']['meta_info']

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/ietf-qos:counters'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self._is_presence:
                                                        return True
                                                    if self.hierarchical_counters is not None and self.hierarchical_counters._has_data():
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                                    return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Counters']['meta_info']


                                            class HierarchicalCounters(object):
                                                """
                                                hierarchical\-counters
                                                
                                                .. attribute:: dual_stack
                                                
                                                	dual\-stack
                                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                                
                                                .. attribute:: _is_presence
                                                
                                                	Is present if this instance represents presence container else not
                                                	**type**\: bool
                                                
                                                

                                                This class is a :ref:`presence class<presence-class>`

                                                """

                                                _prefix = 'qos'
                                                _revision = '2016-10-20'

                                                def __init__(self):
                                                    self.parent = None
                                                    self._is_presence = True
                                                    self.dual_stack = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/ietf-qos:hierarchical-counters'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self._is_presence:
                                                        return True
                                                    if self.dual_stack is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                                    return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.HierarchicalCounters']['meta_info']


                                            class Actions(object):
                                                """
                                                actions
                                                
                                                .. attribute:: conform_handling
                                                
                                                	conform\-handling
                                                	**type**\:   :py:class:`ConformHandling <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ConformHandling>`
                                                
                                                .. attribute:: exceed_handling
                                                
                                                	exceed\-handling
                                                	**type**\:   :py:class:`ExceedHandling <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ExceedHandling>`
                                                
                                                

                                                """

                                                _prefix = 'qos'
                                                _revision = '2016-10-20'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.conform_handling = Qos.Policies.Policy.Metering.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ConformHandling()
                                                    self.conform_handling.parent = self
                                                    self.exceed_handling = Qos.Policies.Policy.Metering.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ExceedHandling()
                                                    self.exceed_handling.parent = self


                                                class ConformHandling(object):
                                                    """
                                                    conform\-handling
                                                    
                                                    .. attribute:: af_drop
                                                    
                                                    	af\-drop
                                                    	**type**\:  int
                                                    
                                                    	**range:** 1..3
                                                    
                                                    .. attribute:: drop_precedence
                                                    
                                                    	drop\-precedence
                                                    	**type**\: one of the below types:
                                                    
                                                    	**type**\:  int
                                                    
                                                    	**range:** 1..7
                                                    
                                                    
                                                    ----
                                                    	**type**\:   :py:class:`DropPrecedenceEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.DropPrecedenceEnum>`
                                                    
                                                    
                                                    ----
                                                    .. attribute:: mark_dscp
                                                    
                                                    	mark\-dscp
                                                    	**type**\: one of the below types:
                                                    
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..63
                                                    
                                                    
                                                    ----
                                                    	**type**\:   :py:class:`DscpCodeAllValuesTypeEnum <ydk.models.ietf.ietf_qos.DscpCodeAllValuesTypeEnum>`
                                                    
                                                    
                                                    ----
                                                    .. attribute:: mark_precedence
                                                    
                                                    	mark\-precedence
                                                    	**type**\:  int
                                                    
                                                    	**range:** 1..3
                                                    
                                                    .. attribute:: mark_priority
                                                    
                                                    	mark\-priority
                                                    	**type**\: one of the below types:
                                                    
                                                    	**type**\:  int
                                                    
                                                    	**range:** 1..7
                                                    
                                                    
                                                    ----
                                                    	**type**\:   :py:class:`MarkPriorityEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.MarkPriorityEnum>`
                                                    
                                                    
                                                    ----
                                                    .. attribute:: no_action
                                                    
                                                    	no\-action
                                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                                    
                                                    

                                                    """

                                                    _prefix = 'qos'
                                                    _revision = '2016-10-20'

                                                    def __init__(self):
                                                        self.parent = None
                                                        self.af_drop = None
                                                        self.drop_precedence = None
                                                        self.mark_dscp = None
                                                        self.mark_precedence = None
                                                        self.mark_priority = None
                                                        self.no_action = None

                                                    class DropPrecedenceEnum(Enum):
                                                        """
                                                        DropPrecedenceEnum

                                                        drop\-precedence

                                                        .. data:: ignore = 0

                                                        	ignore

                                                        """

                                                        ignore = 0


                                                        @staticmethod
                                                        def _meta_info():
                                                            from ydk.models.ietf._meta import _ietf_qos as meta
                                                            return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ConformHandling.DropPrecedenceEnum']


                                                    class MarkPriorityEnum(Enum):
                                                        """
                                                        MarkPriorityEnum

                                                        mark\-priority

                                                        .. data:: ignore = 0

                                                        	ignore

                                                        """

                                                        ignore = 0


                                                        @staticmethod
                                                        def _meta_info():
                                                            from ydk.models.ietf._meta import _ietf_qos as meta
                                                            return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ConformHandling.MarkPriorityEnum']


                                                    @property
                                                    def _common_path(self):
                                                        if self.parent is None:
                                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                                        return self.parent._common_path +'/ietf-qos:conform-handling'

                                                    def is_config(self):
                                                        ''' Returns True if this instance represents config data else returns False '''
                                                        return True

                                                    def _has_data(self):
                                                        if not self.is_config():
                                                            return False
                                                        if self.af_drop is not None:
                                                            return True

                                                        if self.drop_precedence is not None:
                                                            return True

                                                        if self.mark_dscp is not None:
                                                            return True

                                                        if self.mark_precedence is not None:
                                                            return True

                                                        if self.mark_priority is not None:
                                                            return True

                                                        if self.no_action is not None:
                                                            return True

                                                        return False

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                                        return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ConformHandling']['meta_info']


                                                class ExceedHandling(object):
                                                    """
                                                    exceed\-handling
                                                    
                                                    .. attribute:: af_drop
                                                    
                                                    	af\-drop
                                                    	**type**\:  int
                                                    
                                                    	**range:** 1..3
                                                    
                                                    .. attribute:: drop_packet
                                                    
                                                    	drop\-packet
                                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                                    
                                                    .. attribute:: drop_precedence
                                                    
                                                    	drop\-precedence
                                                    	**type**\: one of the below types:
                                                    
                                                    	**type**\:  int
                                                    
                                                    	**range:** 1..7
                                                    
                                                    
                                                    ----
                                                    	**type**\:   :py:class:`DropPrecedenceEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.DropPrecedenceEnum>`
                                                    
                                                    
                                                    ----
                                                    .. attribute:: mark_dscp
                                                    
                                                    	mark\-dscp
                                                    	**type**\: one of the below types:
                                                    
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..63
                                                    
                                                    
                                                    ----
                                                    	**type**\:   :py:class:`DscpCodeAllValuesTypeEnum <ydk.models.ietf.ietf_qos.DscpCodeAllValuesTypeEnum>`
                                                    
                                                    
                                                    ----
                                                    .. attribute:: mark_precedence
                                                    
                                                    	mark\-precedence
                                                    	**type**\:  int
                                                    
                                                    	**range:** 1..3
                                                    
                                                    .. attribute:: mark_priority
                                                    
                                                    	mark\-priority
                                                    	**type**\: one of the below types:
                                                    
                                                    	**type**\:  int
                                                    
                                                    	**range:** 1..7
                                                    
                                                    
                                                    ----
                                                    	**type**\:   :py:class:`MarkPriorityEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.MarkPriorityEnum>`
                                                    
                                                    
                                                    ----
                                                    .. attribute:: no_action
                                                    
                                                    	no\-action
                                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                                    
                                                    

                                                    """

                                                    _prefix = 'qos'
                                                    _revision = '2016-10-20'

                                                    def __init__(self):
                                                        self.parent = None
                                                        self.af_drop = None
                                                        self.drop_packet = None
                                                        self.drop_precedence = None
                                                        self.mark_dscp = None
                                                        self.mark_precedence = None
                                                        self.mark_priority = None
                                                        self.no_action = None

                                                    class DropPrecedenceEnum(Enum):
                                                        """
                                                        DropPrecedenceEnum

                                                        drop\-precedence

                                                        .. data:: ignore = 0

                                                        	ignore

                                                        """

                                                        ignore = 0


                                                        @staticmethod
                                                        def _meta_info():
                                                            from ydk.models.ietf._meta import _ietf_qos as meta
                                                            return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ExceedHandling.DropPrecedenceEnum']


                                                    class MarkPriorityEnum(Enum):
                                                        """
                                                        MarkPriorityEnum

                                                        mark\-priority

                                                        .. data:: ignore = 0

                                                        	ignore

                                                        """

                                                        ignore = 0


                                                        @staticmethod
                                                        def _meta_info():
                                                            from ydk.models.ietf._meta import _ietf_qos as meta
                                                            return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ExceedHandling.MarkPriorityEnum']


                                                    @property
                                                    def _common_path(self):
                                                        if self.parent is None:
                                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                                        return self.parent._common_path +'/ietf-qos:exceed-handling'

                                                    def is_config(self):
                                                        ''' Returns True if this instance represents config data else returns False '''
                                                        return True

                                                    def _has_data(self):
                                                        if not self.is_config():
                                                            return False
                                                        if self.af_drop is not None:
                                                            return True

                                                        if self.drop_packet is not None:
                                                            return True

                                                        if self.drop_precedence is not None:
                                                            return True

                                                        if self.mark_dscp is not None:
                                                            return True

                                                        if self.mark_precedence is not None:
                                                            return True

                                                        if self.mark_priority is not None:
                                                            return True

                                                        if self.no_action is not None:
                                                            return True

                                                        return False

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                                        return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ExceedHandling']['meta_info']

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/ietf-qos:actions'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.conform_handling is not None and self.conform_handling._has_data():
                                                        return True

                                                    if self.exceed_handling is not None and self.exceed_handling._has_data():
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                                    return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/ietf-qos:bit-rate'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.actions is not None and self.actions._has_data():
                                                    return True

                                                if self.bit_rate is not None:
                                                    return True

                                                if self.burst is not None:
                                                    return True

                                                if self.counters is not None and self.counters._has_data():
                                                    return True

                                                if self.excess_burst is not None:
                                                    return True

                                                if self.hierarchical_counters is not None and self.hierarchical_counters._has_data():
                                                    return True

                                                if self.time_burst is not None:
                                                    return True

                                                if self.time_excess_burst is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.ietf._meta import _ietf_qos as meta
                                                return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate']['meta_info']


                                        class Percentage(object):
                                            """
                                            percentage
                                            
                                            .. attribute:: counters
                                            
                                            	counters
                                            	**type**\:   :py:class:`Counters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage.Counters>`
                                            
                                            	**presence node**\: True
                                            
                                            .. attribute:: hierarchical_counters
                                            
                                            	hierarchical\-counters
                                            	**type**\:   :py:class:`HierarchicalCounters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage.HierarchicalCounters>`
                                            
                                            	**presence node**\: True
                                            
                                            .. attribute:: percentage
                                            
                                            	percentage
                                            	**type**\:  int
                                            
                                            	**range:** 1..100
                                            
                                            	**units**\: percent
                                            
                                            

                                            """

                                            _prefix = 'qos'
                                            _revision = '2016-10-20'

                                            def __init__(self):
                                                self.parent = None
                                                self.counters = None
                                                self.hierarchical_counters = None
                                                self.percentage = None


                                            class Counters(object):
                                                """
                                                counters
                                                
                                                .. attribute:: hierarchical_counters
                                                
                                                	hierarchical\-counters
                                                	**type**\:   :py:class:`HierarchicalCounters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage.Counters.HierarchicalCounters>`
                                                
                                                	**presence node**\: True
                                                
                                                .. attribute:: _is_presence
                                                
                                                	Is present if this instance represents presence container else not
                                                	**type**\: bool
                                                
                                                

                                                This class is a :ref:`presence class<presence-class>`

                                                """

                                                _prefix = 'qos'
                                                _revision = '2016-10-20'

                                                def __init__(self):
                                                    self.parent = None
                                                    self._is_presence = True
                                                    self.hierarchical_counters = None


                                                class HierarchicalCounters(object):
                                                    """
                                                    hierarchical\-counters
                                                    
                                                    .. attribute:: dual_stack
                                                    
                                                    	dual\-stack
                                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                                    
                                                    .. attribute:: _is_presence
                                                    
                                                    	Is present if this instance represents presence container else not
                                                    	**type**\: bool
                                                    
                                                    

                                                    This class is a :ref:`presence class<presence-class>`

                                                    """

                                                    _prefix = 'qos'
                                                    _revision = '2016-10-20'

                                                    def __init__(self):
                                                        self.parent = None
                                                        self._is_presence = True
                                                        self.dual_stack = None

                                                    @property
                                                    def _common_path(self):
                                                        if self.parent is None:
                                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                                        return self.parent._common_path +'/ietf-qos:hierarchical-counters'

                                                    def is_config(self):
                                                        ''' Returns True if this instance represents config data else returns False '''
                                                        return True

                                                    def _has_data(self):
                                                        if not self.is_config():
                                                            return False
                                                        if self._is_presence:
                                                            return True
                                                        if self.dual_stack is not None:
                                                            return True

                                                        return False

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                                        return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage.Counters.HierarchicalCounters']['meta_info']

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/ietf-qos:counters'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self._is_presence:
                                                        return True
                                                    if self.hierarchical_counters is not None and self.hierarchical_counters._has_data():
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                                    return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage.Counters']['meta_info']


                                            class HierarchicalCounters(object):
                                                """
                                                hierarchical\-counters
                                                
                                                .. attribute:: dual_stack
                                                
                                                	dual\-stack
                                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                                
                                                .. attribute:: _is_presence
                                                
                                                	Is present if this instance represents presence container else not
                                                	**type**\: bool
                                                
                                                

                                                This class is a :ref:`presence class<presence-class>`

                                                """

                                                _prefix = 'qos'
                                                _revision = '2016-10-20'

                                                def __init__(self):
                                                    self.parent = None
                                                    self._is_presence = True
                                                    self.dual_stack = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/ietf-qos:hierarchical-counters'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self._is_presence:
                                                        return True
                                                    if self.dual_stack is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                                    return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage.HierarchicalCounters']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/ietf-qos:percentage'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.counters is not None and self.counters._has_data():
                                                    return True

                                                if self.hierarchical_counters is not None and self.hierarchical_counters._has_data():
                                                    return True

                                                if self.percentage is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.ietf._meta import _ietf_qos as meta
                                                return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/ietf-qos:packet-handling'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.af_drop is not None:
                                                return True

                                            if self.bit_rate is not None and self.bit_rate._has_data():
                                                return True

                                            if self.drop_precedence is not None:
                                                return True

                                            if self.mark_dscp is not None:
                                                return True

                                            if self.mark_precedence is not None:
                                                return True

                                            if self.mark_priority is not None:
                                                return True

                                            if self.parent_class is not None:
                                                return True

                                            if self.percentage is not None and self.percentage._has_data():
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.ietf._meta import _ietf_qos as meta
                                            return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')
                                        if self.name is None:
                                            raise YPYModelError('Key property name is None')

                                        return self.parent._common_path +'/ietf-qos:class[ietf-qos:name = ' + str(self.name) + ']'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.name is not None:
                                            return True

                                        if self.packet_handling is not None and self.packet_handling._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                        return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily2.Policy_.ClassGroup.Classes.Class_']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-qos:classes'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.class_ is not None:
                                        for child_ref in self.class_:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily2.Policy_.ClassGroup.Classes']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-qos:class-group'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.class_group_reference is not None:
                                    return True

                                if self.classes is not None and self.classes._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily2.Policy_.ClassGroup']['meta_info']


                        class AccessGroup(object):
                            """
                            access\-group
                            
                            .. attribute:: classes
                            
                            	classes
                            	**type**\:   :py:class:`Classes <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily2.Policy_.AccessGroup.Classes>`
                            
                            .. attribute:: ip_access_group
                            
                            	Reference an IPv4 policy
                            	**type**\:   :py:class:`IpAccessGroup <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily2.Policy_.AccessGroup.IpAccessGroup>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: ipv6_access_group
                            
                            	Reference an IPv6 policy
                            	**type**\:   :py:class:`Ipv6AccessGroup <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily2.Policy_.AccessGroup.Ipv6AccessGroup>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: l2_access_group
                            
                            	Reference a layer\-2 policy
                            	**type**\:   :py:class:`L2AccessGroup <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily2.Policy_.AccessGroup.L2AccessGroup>`
                            
                            	**presence node**\: True
                            
                            

                            """

                            _prefix = 'qos'
                            _revision = '2016-10-20'

                            def __init__(self):
                                self.parent = None
                                self.classes = Qos.Policies.Policy.Metering.CardFamily2.Policy_.AccessGroup.Classes()
                                self.classes.parent = self
                                self.ip_access_group = None
                                self.ipv6_access_group = None
                                self.l2_access_group = None


                            class IpAccessGroup(object):
                                """
                                Reference an IPv4 policy
                                
                                .. attribute:: context_name
                                
                                	context\-name
                                	**type**\:  str
                                
                                	**mandatory**\: True
                                
                                .. attribute:: policy_name
                                
                                	policy\-name
                                	**type**\:  str
                                
                                	**mandatory**\: True
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'qos'
                                _revision = '2016-10-20'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.context_name = None
                                    self.policy_name = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-qos:ip-access-group'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.context_name is not None:
                                        return True

                                    if self.policy_name is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily2.Policy_.AccessGroup.IpAccessGroup']['meta_info']


                            class Ipv6AccessGroup(object):
                                """
                                Reference an IPv6 policy
                                
                                .. attribute:: context_name
                                
                                	context\-name
                                	**type**\:  str
                                
                                	**mandatory**\: True
                                
                                .. attribute:: policy_name
                                
                                	policy\-name
                                	**type**\:  str
                                
                                	**mandatory**\: True
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'qos'
                                _revision = '2016-10-20'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.context_name = None
                                    self.policy_name = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-qos:ipv6-access-group'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.context_name is not None:
                                        return True

                                    if self.policy_name is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily2.Policy_.AccessGroup.Ipv6AccessGroup']['meta_info']


                            class L2AccessGroup(object):
                                """
                                Reference a layer\-2 policy
                                
                                .. attribute:: policy_name
                                
                                	policy\-name
                                	**type**\:  str
                                
                                	**mandatory**\: True
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'qos'
                                _revision = '2016-10-20'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.policy_name = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-qos:l2-access-group'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.policy_name is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily2.Policy_.AccessGroup.L2AccessGroup']['meta_info']


                            class Classes(object):
                                """
                                classes
                                
                                .. attribute:: class_
                                
                                	class
                                	**type**\: list of    :py:class:`Class_ <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily2.Policy_.AccessGroup.Classes.Class_>`
                                
                                

                                """

                                _prefix = 'qos'
                                _revision = '2016-10-20'

                                def __init__(self):
                                    self.parent = None
                                    self.class_ = YList()
                                    self.class_.parent = self
                                    self.class_.name = 'class_'


                                class Class_(object):
                                    """
                                    class
                                    
                                    .. attribute:: name  <key>
                                    
                                    	name
                                    	**type**\:  str
                                    
                                    .. attribute:: packet_handling
                                    
                                    	packet\-handling
                                    	**type**\:   :py:class:`PacketHandling <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily2.Policy_.AccessGroup.Classes.Class_.PacketHandling>`
                                    
                                    

                                    """

                                    _prefix = 'qos'
                                    _revision = '2016-10-20'

                                    def __init__(self):
                                        self.parent = None
                                        self.name = None
                                        self.packet_handling = Qos.Policies.Policy.Metering.CardFamily2.Policy_.AccessGroup.Classes.Class_.PacketHandling()
                                        self.packet_handling.parent = self


                                    class PacketHandling(object):
                                        """
                                        packet\-handling
                                        
                                        .. attribute:: parent_class
                                        
                                        	parent\-class
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'qos'
                                        _revision = '2016-10-20'

                                        def __init__(self):
                                            self.parent = None
                                            self.parent_class = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/ietf-qos:packet-handling'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.parent_class is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.ietf._meta import _ietf_qos as meta
                                            return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily2.Policy_.AccessGroup.Classes.Class_.PacketHandling']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')
                                        if self.name is None:
                                            raise YPYModelError('Key property name is None')

                                        return self.parent._common_path +'/ietf-qos:class[ietf-qos:name = ' + str(self.name) + ']'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.name is not None:
                                            return True

                                        if self.packet_handling is not None and self.packet_handling._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                        return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily2.Policy_.AccessGroup.Classes.Class_']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-qos:classes'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.class_ is not None:
                                        for child_ref in self.class_:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily2.Policy_.AccessGroup.Classes']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-qos:access-group'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.classes is not None and self.classes._has_data():
                                    return True

                                if self.ip_access_group is not None and self.ip_access_group._has_data():
                                    return True

                                if self.ipv6_access_group is not None and self.ipv6_access_group._has_data():
                                    return True

                                if self.l2_access_group is not None and self.l2_access_group._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily2.Policy_.AccessGroup']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-qos:policy'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.access_group is not None and self.access_group._has_data():
                                return True

                            if self.class_group is not None and self.class_group._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_qos as meta
                            return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily2.Policy_']['meta_info']


                    class Rate(object):
                        """
                        Specify rate limits inline
                        
                        .. attribute:: actions
                        
                        	actions
                        	**type**\:   :py:class:`Actions <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily2.Rate.Actions>`
                        
                        .. attribute:: bit_rate
                        
                        	bit\-rate
                        	**type**\:  int
                        
                        	**range:** 5..100000000
                        
                        .. attribute:: burst
                        
                        	burst
                        	**type**\:  int
                        
                        	**range:** 1..4250000000
                        
                        	**units**\: byte
                        
                        .. attribute:: counters
                        
                        	counters
                        	**type**\:   :py:class:`Counters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily2.Rate.Counters>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: excess_burst
                        
                        	excess\-burst
                        	**type**\:  int
                        
                        	**range:** 1..4250000000
                        
                        	**units**\: byte
                        
                        .. attribute:: hierarchical_counters
                        
                        	hierarchical\-counters
                        	**type**\:   :py:class:`HierarchicalCounters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily2.Rate.HierarchicalCounters>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: informational
                        
                        	informational
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: time_burst
                        
                        	time\-burst
                        	**type**\:  int
                        
                        	**range:** 1..10000
                        
                        	**units**\: millisecond
                        
                        .. attribute:: time_excess_burst
                        
                        	time\-excess\-burst
                        	**type**\:  int
                        
                        	**range:** 1..10000
                        
                        

                        """

                        _prefix = 'qos'
                        _revision = '2016-10-20'

                        def __init__(self):
                            self.parent = None
                            self.actions = Qos.Policies.Policy.Metering.CardFamily2.Rate.Actions()
                            self.actions.parent = self
                            self.bit_rate = None
                            self.burst = None
                            self.counters = None
                            self.excess_burst = None
                            self.hierarchical_counters = None
                            self.informational = None
                            self.time_burst = None
                            self.time_excess_burst = None


                        class Counters(object):
                            """
                            counters
                            
                            .. attribute:: hierarchical_counters
                            
                            	hierarchical\-counters
                            	**type**\:   :py:class:`HierarchicalCounters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily2.Rate.Counters.HierarchicalCounters>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'qos'
                            _revision = '2016-10-20'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.hierarchical_counters = None


                            class HierarchicalCounters(object):
                                """
                                hierarchical\-counters
                                
                                .. attribute:: dual_stack
                                
                                	dual\-stack
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'qos'
                                _revision = '2016-10-20'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.dual_stack = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-qos:hierarchical-counters'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.dual_stack is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily2.Rate.Counters.HierarchicalCounters']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-qos:counters'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.hierarchical_counters is not None and self.hierarchical_counters._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily2.Rate.Counters']['meta_info']


                        class HierarchicalCounters(object):
                            """
                            hierarchical\-counters
                            
                            .. attribute:: dual_stack
                            
                            	dual\-stack
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'qos'
                            _revision = '2016-10-20'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.dual_stack = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-qos:hierarchical-counters'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.dual_stack is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily2.Rate.HierarchicalCounters']['meta_info']


                        class Actions(object):
                            """
                            actions
                            
                            .. attribute:: conform_handling
                            
                            	conform\-handling
                            	**type**\:   :py:class:`ConformHandling <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily2.Rate.Actions.ConformHandling>`
                            
                            .. attribute:: exceed_handling
                            
                            	exceed\-handling
                            	**type**\:   :py:class:`ExceedHandling <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily2.Rate.Actions.ExceedHandling>`
                            
                            .. attribute:: violate_handling
                            
                            	violate\-handling
                            	**type**\:   :py:class:`ViolateHandling <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily2.Rate.Actions.ViolateHandling>`
                            
                            

                            """

                            _prefix = 'qos'
                            _revision = '2016-10-20'

                            def __init__(self):
                                self.parent = None
                                self.conform_handling = Qos.Policies.Policy.Metering.CardFamily2.Rate.Actions.ConformHandling()
                                self.conform_handling.parent = self
                                self.exceed_handling = Qos.Policies.Policy.Metering.CardFamily2.Rate.Actions.ExceedHandling()
                                self.exceed_handling.parent = self
                                self.violate_handling = Qos.Policies.Policy.Metering.CardFamily2.Rate.Actions.ViolateHandling()
                                self.violate_handling.parent = self


                            class ConformHandling(object):
                                """
                                conform\-handling
                                
                                .. attribute:: af_drop
                                
                                	af\-drop
                                	**type**\:  int
                                
                                	**range:** 1..3
                                
                                .. attribute:: drop_precedence
                                
                                	drop\-precedence
                                	**type**\: one of the below types:
                                
                                	**type**\:  int
                                
                                	**range:** 1..7
                                
                                
                                ----
                                	**type**\:   :py:class:`DropPrecedenceEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.DropPrecedenceEnum>`
                                
                                
                                ----
                                .. attribute:: mark_dscp
                                
                                	mark\-dscp
                                	**type**\: one of the below types:
                                
                                	**type**\:  int
                                
                                	**range:** 0..63
                                
                                
                                ----
                                	**type**\:   :py:class:`DscpCodeAllValuesTypeEnum <ydk.models.ietf.ietf_qos.DscpCodeAllValuesTypeEnum>`
                                
                                
                                ----
                                .. attribute:: mark_precedence
                                
                                	mark\-precedence
                                	**type**\:  int
                                
                                	**range:** 1..3
                                
                                .. attribute:: mark_priority
                                
                                	mark\-priority
                                	**type**\: one of the below types:
                                
                                	**type**\:  int
                                
                                	**range:** 1..7
                                
                                
                                ----
                                	**type**\:   :py:class:`MarkPriorityEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.MarkPriorityEnum>`
                                
                                
                                ----
                                .. attribute:: no_action
                                
                                	no\-action
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                

                                """

                                _prefix = 'qos'
                                _revision = '2016-10-20'

                                def __init__(self):
                                    self.parent = None
                                    self.af_drop = None
                                    self.drop_precedence = None
                                    self.mark_dscp = None
                                    self.mark_precedence = None
                                    self.mark_priority = None
                                    self.no_action = None

                                class DropPrecedenceEnum(Enum):
                                    """
                                    DropPrecedenceEnum

                                    drop\-precedence

                                    .. data:: ignore = 0

                                    	ignore

                                    """

                                    ignore = 0


                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                        return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily2.Rate.Actions.ConformHandling.DropPrecedenceEnum']


                                class MarkPriorityEnum(Enum):
                                    """
                                    MarkPriorityEnum

                                    mark\-priority

                                    .. data:: ignore = 0

                                    	ignore

                                    """

                                    ignore = 0


                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                        return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily2.Rate.Actions.ConformHandling.MarkPriorityEnum']


                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-qos:conform-handling'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.af_drop is not None:
                                        return True

                                    if self.drop_precedence is not None:
                                        return True

                                    if self.mark_dscp is not None:
                                        return True

                                    if self.mark_precedence is not None:
                                        return True

                                    if self.mark_priority is not None:
                                        return True

                                    if self.no_action is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily2.Rate.Actions.ConformHandling']['meta_info']


                            class ExceedHandling(object):
                                """
                                exceed\-handling
                                
                                .. attribute:: af_drop
                                
                                	af\-drop
                                	**type**\:  int
                                
                                	**range:** 1..3
                                
                                .. attribute:: drop_packet
                                
                                	drop\-packet
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: drop_precedence
                                
                                	drop\-precedence
                                	**type**\: one of the below types:
                                
                                	**type**\:  int
                                
                                	**range:** 1..7
                                
                                
                                ----
                                	**type**\:   :py:class:`DropPrecedenceEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.DropPrecedenceEnum>`
                                
                                
                                ----
                                .. attribute:: mark_dscp
                                
                                	mark\-dscp
                                	**type**\: one of the below types:
                                
                                	**type**\:  int
                                
                                	**range:** 0..63
                                
                                
                                ----
                                	**type**\:   :py:class:`DscpCodeAllValuesTypeEnum <ydk.models.ietf.ietf_qos.DscpCodeAllValuesTypeEnum>`
                                
                                
                                ----
                                .. attribute:: mark_precedence
                                
                                	mark\-precedence
                                	**type**\:  int
                                
                                	**range:** 1..3
                                
                                .. attribute:: mark_priority
                                
                                	mark\-priority
                                	**type**\: one of the below types:
                                
                                	**type**\:  int
                                
                                	**range:** 1..7
                                
                                
                                ----
                                	**type**\:   :py:class:`MarkPriorityEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.MarkPriorityEnum>`
                                
                                
                                ----
                                .. attribute:: no_action
                                
                                	no\-action
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                

                                """

                                _prefix = 'qos'
                                _revision = '2016-10-20'

                                def __init__(self):
                                    self.parent = None
                                    self.af_drop = None
                                    self.drop_packet = None
                                    self.drop_precedence = None
                                    self.mark_dscp = None
                                    self.mark_precedence = None
                                    self.mark_priority = None
                                    self.no_action = None

                                class DropPrecedenceEnum(Enum):
                                    """
                                    DropPrecedenceEnum

                                    drop\-precedence

                                    .. data:: ignore = 0

                                    	ignore

                                    """

                                    ignore = 0


                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                        return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily2.Rate.Actions.ExceedHandling.DropPrecedenceEnum']


                                class MarkPriorityEnum(Enum):
                                    """
                                    MarkPriorityEnum

                                    mark\-priority

                                    .. data:: ignore = 0

                                    	ignore

                                    """

                                    ignore = 0


                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                        return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily2.Rate.Actions.ExceedHandling.MarkPriorityEnum']


                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-qos:exceed-handling'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.af_drop is not None:
                                        return True

                                    if self.drop_packet is not None:
                                        return True

                                    if self.drop_precedence is not None:
                                        return True

                                    if self.mark_dscp is not None:
                                        return True

                                    if self.mark_precedence is not None:
                                        return True

                                    if self.mark_priority is not None:
                                        return True

                                    if self.no_action is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily2.Rate.Actions.ExceedHandling']['meta_info']


                            class ViolateHandling(object):
                                """
                                violate\-handling
                                
                                .. attribute:: af_drop
                                
                                	af\-drop
                                	**type**\:  int
                                
                                	**range:** 1..3
                                
                                .. attribute:: drop_packet
                                
                                	drop\-packet
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: drop_precedence
                                
                                	drop\-precedence
                                	**type**\: one of the below types:
                                
                                	**type**\:  int
                                
                                	**range:** 1..7
                                
                                
                                ----
                                	**type**\:   :py:class:`DropPrecedenceEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.DropPrecedenceEnum>`
                                
                                
                                ----
                                .. attribute:: mark_dscp
                                
                                	mark\-dscp
                                	**type**\: one of the below types:
                                
                                	**type**\:  int
                                
                                	**range:** 0..63
                                
                                
                                ----
                                	**type**\:   :py:class:`DscpCodeAllValuesTypeEnum <ydk.models.ietf.ietf_qos.DscpCodeAllValuesTypeEnum>`
                                
                                
                                ----
                                .. attribute:: mark_precedence
                                
                                	mark\-precedence
                                	**type**\:  int
                                
                                	**range:** 1..3
                                
                                .. attribute:: mark_priority
                                
                                	mark\-priority
                                	**type**\: one of the below types:
                                
                                	**type**\:  int
                                
                                	**range:** 1..7
                                
                                
                                ----
                                	**type**\:   :py:class:`MarkPriorityEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.MarkPriorityEnum>`
                                
                                
                                ----
                                .. attribute:: no_action
                                
                                	no\-action
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                

                                """

                                _prefix = 'qos'
                                _revision = '2016-10-20'

                                def __init__(self):
                                    self.parent = None
                                    self.af_drop = None
                                    self.drop_packet = None
                                    self.drop_precedence = None
                                    self.mark_dscp = None
                                    self.mark_precedence = None
                                    self.mark_priority = None
                                    self.no_action = None

                                class DropPrecedenceEnum(Enum):
                                    """
                                    DropPrecedenceEnum

                                    drop\-precedence

                                    .. data:: ignore = 0

                                    	ignore

                                    """

                                    ignore = 0


                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                        return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily2.Rate.Actions.ViolateHandling.DropPrecedenceEnum']


                                class MarkPriorityEnum(Enum):
                                    """
                                    MarkPriorityEnum

                                    mark\-priority

                                    .. data:: ignore = 0

                                    	ignore

                                    """

                                    ignore = 0


                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                        return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily2.Rate.Actions.ViolateHandling.MarkPriorityEnum']


                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-qos:violate-handling'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.af_drop is not None:
                                        return True

                                    if self.drop_packet is not None:
                                        return True

                                    if self.drop_precedence is not None:
                                        return True

                                    if self.mark_dscp is not None:
                                        return True

                                    if self.mark_precedence is not None:
                                        return True

                                    if self.mark_priority is not None:
                                        return True

                                    if self.no_action is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily2.Rate.Actions.ViolateHandling']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-qos:actions'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.conform_handling is not None and self.conform_handling._has_data():
                                    return True

                                if self.exceed_handling is not None and self.exceed_handling._has_data():
                                    return True

                                if self.violate_handling is not None and self.violate_handling._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily2.Rate.Actions']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-qos:rate'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.actions is not None and self.actions._has_data():
                                return True

                            if self.bit_rate is not None:
                                return True

                            if self.burst is not None:
                                return True

                            if self.counters is not None and self.counters._has_data():
                                return True

                            if self.excess_burst is not None:
                                return True

                            if self.hierarchical_counters is not None and self.hierarchical_counters._has_data():
                                return True

                            if self.informational is not None:
                                return True

                            if self.time_burst is not None:
                                return True

                            if self.time_excess_burst is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_qos as meta
                            return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily2.Rate']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-qos:card-family-2'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.af_drop is not None:
                            return True

                        if self.drop_precedence is not None:
                            return True

                        if self.mark_dscp is not None:
                            return True

                        if self.mark_precedence is not None:
                            return True

                        if self.mark_priority is not None:
                            return True

                        if self.policy is not None and self.policy._has_data():
                            return True

                        if self.rate is not None and self.rate._has_data():
                            return True

                        if self.rate_calculation_exclude_layer_2_overhead is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_qos as meta
                        return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily2']['meta_info']


                class CardFamily3(object):
                    """
                    card\-family\-3
                    
                    .. attribute:: af_drop
                    
                    	af\-drop
                    	**type**\:  int
                    
                    	**range:** 1..3
                    
                    .. attribute:: drop_precedence
                    
                    	drop\-precedence
                    	**type**\: one of the below types:
                    
                    	**type**\:  int
                    
                    	**range:** 1..7
                    
                    
                    ----
                    	**type**\:   :py:class:`DropPrecedenceEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.DropPrecedenceEnum>`
                    
                    
                    ----
                    .. attribute:: mark_dscp
                    
                    	mark\-dscp
                    	**type**\: one of the below types:
                    
                    	**type**\:  int
                    
                    	**range:** 0..63
                    
                    
                    ----
                    	**type**\:   :py:class:`DscpCodeAllValuesTypeEnum <ydk.models.ietf.ietf_qos.DscpCodeAllValuesTypeEnum>`
                    
                    
                    ----
                    .. attribute:: mark_precedence
                    
                    	mark\-precedence
                    	**type**\:  int
                    
                    	**range:** 1..3
                    
                    .. attribute:: mark_priority
                    
                    	mark\-priority
                    	**type**\: one of the below types:
                    
                    	**type**\:  int
                    
                    	**range:** 1..7
                    
                    
                    ----
                    	**type**\:   :py:class:`MarkPriorityEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.MarkPriorityEnum>`
                    
                    
                    ----
                    .. attribute:: policy
                    
                    	policy
                    	**type**\:   :py:class:`Policy_ <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily3.Policy_>`
                    
                    .. attribute:: rate
                    
                    	Specify rate limits inline
                    	**type**\:   :py:class:`Rate <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily3.Rate>`
                    
                    .. attribute:: rate_calculation_exclude_layer_2_overhead
                    
                    	Specify that rate calculation excludes the size ofLayer 2 overhead for the layer 3 circuit on which a policy is applied
                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                    
                    

                    """

                    _prefix = 'qos'
                    _revision = '2016-10-20'

                    def __init__(self):
                        self.parent = None
                        self.af_drop = None
                        self.drop_precedence = None
                        self.mark_dscp = None
                        self.mark_precedence = None
                        self.mark_priority = None
                        self.policy = Qos.Policies.Policy.Metering.CardFamily3.Policy_()
                        self.policy.parent = self
                        self.rate = Qos.Policies.Policy.Metering.CardFamily3.Rate()
                        self.rate.parent = self
                        self.rate_calculation_exclude_layer_2_overhead = None

                    class DropPrecedenceEnum(Enum):
                        """
                        DropPrecedenceEnum

                        drop\-precedence

                        .. data:: ignore = 0

                        	ignore

                        """

                        ignore = 0


                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_qos as meta
                            return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily3.DropPrecedenceEnum']


                    class MarkPriorityEnum(Enum):
                        """
                        MarkPriorityEnum

                        mark\-priority

                        .. data:: ignore = 0

                        	ignore

                        """

                        ignore = 0


                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_qos as meta
                            return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily3.MarkPriorityEnum']



                    class Policy_(object):
                        """
                        policy
                        
                        .. attribute:: access_group
                        
                        	access\-group
                        	**type**\:   :py:class:`AccessGroup <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily3.Policy_.AccessGroup>`
                        
                        .. attribute:: class_group
                        
                        	Reference a previously defined class
                        	**type**\:   :py:class:`ClassGroup <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily3.Policy_.ClassGroup>`
                        
                        

                        """

                        _prefix = 'qos'
                        _revision = '2016-10-20'

                        def __init__(self):
                            self.parent = None
                            self.access_group = Qos.Policies.Policy.Metering.CardFamily3.Policy_.AccessGroup()
                            self.access_group.parent = self
                            self.class_group = Qos.Policies.Policy.Metering.CardFamily3.Policy_.ClassGroup()
                            self.class_group.parent = self


                        class ClassGroup(object):
                            """
                            Reference a previously defined class
                            
                            .. attribute:: class_group_reference
                            
                            	class\-group\-reference
                            	**type**\:  str
                            
                            	**refers to**\:  :py:class:`name <ydk.models.ietf.ietf_qos.Qos.ClassDefinitions.ClassDefinition>`
                            
                            .. attribute:: classes
                            
                            	classes
                            	**type**\:   :py:class:`Classes <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily3.Policy_.ClassGroup.Classes>`
                            
                            

                            """

                            _prefix = 'qos'
                            _revision = '2016-10-20'

                            def __init__(self):
                                self.parent = None
                                self.class_group_reference = None
                                self.classes = Qos.Policies.Policy.Metering.CardFamily3.Policy_.ClassGroup.Classes()
                                self.classes.parent = self


                            class Classes(object):
                                """
                                classes
                                
                                .. attribute:: class_
                                
                                	class
                                	**type**\: list of    :py:class:`Class_ <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily3.Policy_.ClassGroup.Classes.Class_>`
                                
                                

                                """

                                _prefix = 'qos'
                                _revision = '2016-10-20'

                                def __init__(self):
                                    self.parent = None
                                    self.class_ = YList()
                                    self.class_.parent = self
                                    self.class_.name = 'class_'


                                class Class_(object):
                                    """
                                    class
                                    
                                    .. attribute:: name  <key>
                                    
                                    	name
                                    	**type**\:  str
                                    
                                    	**length:** 1..39
                                    
                                    	**refers to**\:  :py:class:`class_ <ydk.models.ietf.ietf_qos.Qos.ClassDefinitions.ClassDefinition.Qos_>`
                                    
                                    .. attribute:: packet_handling
                                    
                                    	packet\-handling
                                    	**type**\:   :py:class:`PacketHandling <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling>`
                                    
                                    

                                    """

                                    _prefix = 'qos'
                                    _revision = '2016-10-20'

                                    def __init__(self):
                                        self.parent = None
                                        self.name = None
                                        self.packet_handling = Qos.Policies.Policy.Metering.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling()
                                        self.packet_handling.parent = self


                                    class PacketHandling(object):
                                        """
                                        packet\-handling
                                        
                                        .. attribute:: af_drop
                                        
                                        	af\-drop
                                        	**type**\:  int
                                        
                                        	**range:** 1..3
                                        
                                        .. attribute:: bit_rate
                                        
                                        	bit\-rate
                                        	**type**\:   :py:class:`BitRate <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate>`
                                        
                                        .. attribute:: drop_precedence
                                        
                                        	drop\-precedence
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  int
                                        
                                        	**range:** 1..7
                                        
                                        
                                        ----
                                        	**type**\:   :py:class:`DropPrecedenceEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.DropPrecedenceEnum>`
                                        
                                        
                                        ----
                                        .. attribute:: mark_dscp
                                        
                                        	mark\-dscp
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  int
                                        
                                        	**range:** 0..63
                                        
                                        
                                        ----
                                        	**type**\:   :py:class:`DscpCodeAllValuesTypeEnum <ydk.models.ietf.ietf_qos.DscpCodeAllValuesTypeEnum>`
                                        
                                        
                                        ----
                                        .. attribute:: mark_precedence
                                        
                                        	mark\-precedence
                                        	**type**\:  int
                                        
                                        	**range:** 1..3
                                        
                                        .. attribute:: mark_priority
                                        
                                        	mark\-priority
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  int
                                        
                                        	**range:** 1..7
                                        
                                        
                                        ----
                                        	**type**\:   :py:class:`MarkPriorityEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Policy_.ClassGroup.Classes.Class_.PacketHandling.MarkPriorityEnum>`
                                        
                                        
                                        ----
                                        .. attribute:: parent_class
                                        
                                        	parent\-class
                                        	**type**\:  str
                                        
                                        .. attribute:: percentage
                                        
                                        	percentage
                                        	**type**\:   :py:class:`Percentage <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage>`
                                        
                                        

                                        """

                                        _prefix = 'qos'
                                        _revision = '2016-10-20'

                                        def __init__(self):
                                            self.parent = None
                                            self.af_drop = None
                                            self.bit_rate = Qos.Policies.Policy.Metering.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate()
                                            self.bit_rate.parent = self
                                            self.drop_precedence = None
                                            self.mark_dscp = None
                                            self.mark_precedence = None
                                            self.mark_priority = None
                                            self.parent_class = None
                                            self.percentage = Qos.Policies.Policy.Metering.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage()
                                            self.percentage.parent = self

                                        class DropPrecedenceEnum(Enum):
                                            """
                                            DropPrecedenceEnum

                                            drop\-precedence

                                            .. data:: ignore = 0

                                            	ignore

                                            """

                                            ignore = 0


                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.ietf._meta import _ietf_qos as meta
                                                return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling.DropPrecedenceEnum']


                                        class MarkPriorityEnum(Enum):
                                            """
                                            MarkPriorityEnum

                                            mark\-priority

                                            .. data:: ignore = 0

                                            	ignore

                                            """

                                            ignore = 0


                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.ietf._meta import _ietf_qos as meta
                                                return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling.MarkPriorityEnum']



                                        class BitRate(object):
                                            """
                                            bit\-rate
                                            
                                            .. attribute:: actions
                                            
                                            	actions
                                            	**type**\:   :py:class:`Actions <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions>`
                                            
                                            .. attribute:: bit_rate
                                            
                                            	bit\-rate
                                            	**type**\:  int
                                            
                                            	**range:** 66..100000000
                                            
                                            .. attribute:: burst
                                            
                                            	burst
                                            	**type**\:  int
                                            
                                            	**range:** 1..4250000000
                                            
                                            	**units**\: byte
                                            
                                            .. attribute:: counters
                                            
                                            	counters
                                            	**type**\:   :py:class:`Counters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Counters>`
                                            
                                            	**presence node**\: True
                                            
                                            .. attribute:: excess_burst
                                            
                                            	excess\-burst
                                            	**type**\:  int
                                            
                                            	**range:** 1..4250000000
                                            
                                            	**units**\: byte
                                            
                                            .. attribute:: hierarchical_counters
                                            
                                            	hierarchical\-counters
                                            	**type**\:   :py:class:`HierarchicalCounters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.HierarchicalCounters>`
                                            
                                            	**presence node**\: True
                                            
                                            .. attribute:: time_burst
                                            
                                            	time\-burst
                                            	**type**\:  int
                                            
                                            	**range:** 1..10000
                                            
                                            	**units**\: millisecond
                                            
                                            .. attribute:: time_excess_burst
                                            
                                            	time\-excess\-burst
                                            	**type**\:  int
                                            
                                            	**range:** 1..10000
                                            
                                            

                                            """

                                            _prefix = 'qos'
                                            _revision = '2016-10-20'

                                            def __init__(self):
                                                self.parent = None
                                                self.actions = Qos.Policies.Policy.Metering.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions()
                                                self.actions.parent = self
                                                self.bit_rate = None
                                                self.burst = None
                                                self.counters = None
                                                self.excess_burst = None
                                                self.hierarchical_counters = None
                                                self.time_burst = None
                                                self.time_excess_burst = None


                                            class Counters(object):
                                                """
                                                counters
                                                
                                                .. attribute:: hierarchical_counters
                                                
                                                	hierarchical\-counters
                                                	**type**\:   :py:class:`HierarchicalCounters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Counters.HierarchicalCounters>`
                                                
                                                	**presence node**\: True
                                                
                                                .. attribute:: _is_presence
                                                
                                                	Is present if this instance represents presence container else not
                                                	**type**\: bool
                                                
                                                

                                                This class is a :ref:`presence class<presence-class>`

                                                """

                                                _prefix = 'qos'
                                                _revision = '2016-10-20'

                                                def __init__(self):
                                                    self.parent = None
                                                    self._is_presence = True
                                                    self.hierarchical_counters = None


                                                class HierarchicalCounters(object):
                                                    """
                                                    hierarchical\-counters
                                                    
                                                    .. attribute:: dual_stack
                                                    
                                                    	dual\-stack
                                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                                    
                                                    .. attribute:: _is_presence
                                                    
                                                    	Is present if this instance represents presence container else not
                                                    	**type**\: bool
                                                    
                                                    

                                                    This class is a :ref:`presence class<presence-class>`

                                                    """

                                                    _prefix = 'qos'
                                                    _revision = '2016-10-20'

                                                    def __init__(self):
                                                        self.parent = None
                                                        self._is_presence = True
                                                        self.dual_stack = None

                                                    @property
                                                    def _common_path(self):
                                                        if self.parent is None:
                                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                                        return self.parent._common_path +'/ietf-qos:hierarchical-counters'

                                                    def is_config(self):
                                                        ''' Returns True if this instance represents config data else returns False '''
                                                        return True

                                                    def _has_data(self):
                                                        if not self.is_config():
                                                            return False
                                                        if self._is_presence:
                                                            return True
                                                        if self.dual_stack is not None:
                                                            return True

                                                        return False

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                                        return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Counters.HierarchicalCounters']['meta_info']

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/ietf-qos:counters'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self._is_presence:
                                                        return True
                                                    if self.hierarchical_counters is not None and self.hierarchical_counters._has_data():
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                                    return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Counters']['meta_info']


                                            class HierarchicalCounters(object):
                                                """
                                                hierarchical\-counters
                                                
                                                .. attribute:: dual_stack
                                                
                                                	dual\-stack
                                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                                
                                                .. attribute:: _is_presence
                                                
                                                	Is present if this instance represents presence container else not
                                                	**type**\: bool
                                                
                                                

                                                This class is a :ref:`presence class<presence-class>`

                                                """

                                                _prefix = 'qos'
                                                _revision = '2016-10-20'

                                                def __init__(self):
                                                    self.parent = None
                                                    self._is_presence = True
                                                    self.dual_stack = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/ietf-qos:hierarchical-counters'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self._is_presence:
                                                        return True
                                                    if self.dual_stack is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                                    return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.HierarchicalCounters']['meta_info']


                                            class Actions(object):
                                                """
                                                actions
                                                
                                                .. attribute:: conform_handling
                                                
                                                	conform\-handling
                                                	**type**\:   :py:class:`ConformHandling <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ConformHandling>`
                                                
                                                .. attribute:: exceed_handling
                                                
                                                	exceed\-handling
                                                	**type**\:   :py:class:`ExceedHandling <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ExceedHandling>`
                                                
                                                

                                                """

                                                _prefix = 'qos'
                                                _revision = '2016-10-20'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.conform_handling = Qos.Policies.Policy.Metering.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ConformHandling()
                                                    self.conform_handling.parent = self
                                                    self.exceed_handling = Qos.Policies.Policy.Metering.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ExceedHandling()
                                                    self.exceed_handling.parent = self


                                                class ConformHandling(object):
                                                    """
                                                    conform\-handling
                                                    
                                                    .. attribute:: af_drop
                                                    
                                                    	af\-drop
                                                    	**type**\:  int
                                                    
                                                    	**range:** 1..3
                                                    
                                                    .. attribute:: drop_precedence
                                                    
                                                    	drop\-precedence
                                                    	**type**\: one of the below types:
                                                    
                                                    	**type**\:  int
                                                    
                                                    	**range:** 1..7
                                                    
                                                    
                                                    ----
                                                    	**type**\:   :py:class:`DropPrecedenceEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.DropPrecedenceEnum>`
                                                    
                                                    
                                                    ----
                                                    .. attribute:: mark_dscp
                                                    
                                                    	mark\-dscp
                                                    	**type**\: one of the below types:
                                                    
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..63
                                                    
                                                    
                                                    ----
                                                    	**type**\:   :py:class:`DscpCodeAllValuesTypeEnum <ydk.models.ietf.ietf_qos.DscpCodeAllValuesTypeEnum>`
                                                    
                                                    
                                                    ----
                                                    .. attribute:: mark_precedence
                                                    
                                                    	mark\-precedence
                                                    	**type**\:  int
                                                    
                                                    	**range:** 1..3
                                                    
                                                    .. attribute:: mark_priority
                                                    
                                                    	mark\-priority
                                                    	**type**\: one of the below types:
                                                    
                                                    	**type**\:  int
                                                    
                                                    	**range:** 1..7
                                                    
                                                    
                                                    ----
                                                    	**type**\:   :py:class:`MarkPriorityEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.MarkPriorityEnum>`
                                                    
                                                    
                                                    ----
                                                    .. attribute:: no_action
                                                    
                                                    	no\-action
                                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                                    
                                                    

                                                    """

                                                    _prefix = 'qos'
                                                    _revision = '2016-10-20'

                                                    def __init__(self):
                                                        self.parent = None
                                                        self.af_drop = None
                                                        self.drop_precedence = None
                                                        self.mark_dscp = None
                                                        self.mark_precedence = None
                                                        self.mark_priority = None
                                                        self.no_action = None

                                                    class DropPrecedenceEnum(Enum):
                                                        """
                                                        DropPrecedenceEnum

                                                        drop\-precedence

                                                        .. data:: ignore = 0

                                                        	ignore

                                                        """

                                                        ignore = 0


                                                        @staticmethod
                                                        def _meta_info():
                                                            from ydk.models.ietf._meta import _ietf_qos as meta
                                                            return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ConformHandling.DropPrecedenceEnum']


                                                    class MarkPriorityEnum(Enum):
                                                        """
                                                        MarkPriorityEnum

                                                        mark\-priority

                                                        .. data:: ignore = 0

                                                        	ignore

                                                        """

                                                        ignore = 0


                                                        @staticmethod
                                                        def _meta_info():
                                                            from ydk.models.ietf._meta import _ietf_qos as meta
                                                            return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ConformHandling.MarkPriorityEnum']


                                                    @property
                                                    def _common_path(self):
                                                        if self.parent is None:
                                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                                        return self.parent._common_path +'/ietf-qos:conform-handling'

                                                    def is_config(self):
                                                        ''' Returns True if this instance represents config data else returns False '''
                                                        return True

                                                    def _has_data(self):
                                                        if not self.is_config():
                                                            return False
                                                        if self.af_drop is not None:
                                                            return True

                                                        if self.drop_precedence is not None:
                                                            return True

                                                        if self.mark_dscp is not None:
                                                            return True

                                                        if self.mark_precedence is not None:
                                                            return True

                                                        if self.mark_priority is not None:
                                                            return True

                                                        if self.no_action is not None:
                                                            return True

                                                        return False

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                                        return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ConformHandling']['meta_info']


                                                class ExceedHandling(object):
                                                    """
                                                    exceed\-handling
                                                    
                                                    .. attribute:: af_drop
                                                    
                                                    	af\-drop
                                                    	**type**\:  int
                                                    
                                                    	**range:** 1..3
                                                    
                                                    .. attribute:: drop_packet
                                                    
                                                    	drop\-packet
                                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                                    
                                                    .. attribute:: drop_precedence
                                                    
                                                    	drop\-precedence
                                                    	**type**\: one of the below types:
                                                    
                                                    	**type**\:  int
                                                    
                                                    	**range:** 1..7
                                                    
                                                    
                                                    ----
                                                    	**type**\:   :py:class:`DropPrecedenceEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.DropPrecedenceEnum>`
                                                    
                                                    
                                                    ----
                                                    .. attribute:: mark_dscp
                                                    
                                                    	mark\-dscp
                                                    	**type**\: one of the below types:
                                                    
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..63
                                                    
                                                    
                                                    ----
                                                    	**type**\:   :py:class:`DscpCodeAllValuesTypeEnum <ydk.models.ietf.ietf_qos.DscpCodeAllValuesTypeEnum>`
                                                    
                                                    
                                                    ----
                                                    .. attribute:: mark_precedence
                                                    
                                                    	mark\-precedence
                                                    	**type**\:  int
                                                    
                                                    	**range:** 1..3
                                                    
                                                    .. attribute:: mark_priority
                                                    
                                                    	mark\-priority
                                                    	**type**\: one of the below types:
                                                    
                                                    	**type**\:  int
                                                    
                                                    	**range:** 1..7
                                                    
                                                    
                                                    ----
                                                    	**type**\:   :py:class:`MarkPriorityEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.MarkPriorityEnum>`
                                                    
                                                    
                                                    ----
                                                    .. attribute:: no_action
                                                    
                                                    	no\-action
                                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                                    
                                                    

                                                    """

                                                    _prefix = 'qos'
                                                    _revision = '2016-10-20'

                                                    def __init__(self):
                                                        self.parent = None
                                                        self.af_drop = None
                                                        self.drop_packet = None
                                                        self.drop_precedence = None
                                                        self.mark_dscp = None
                                                        self.mark_precedence = None
                                                        self.mark_priority = None
                                                        self.no_action = None

                                                    class DropPrecedenceEnum(Enum):
                                                        """
                                                        DropPrecedenceEnum

                                                        drop\-precedence

                                                        .. data:: ignore = 0

                                                        	ignore

                                                        """

                                                        ignore = 0


                                                        @staticmethod
                                                        def _meta_info():
                                                            from ydk.models.ietf._meta import _ietf_qos as meta
                                                            return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ExceedHandling.DropPrecedenceEnum']


                                                    class MarkPriorityEnum(Enum):
                                                        """
                                                        MarkPriorityEnum

                                                        mark\-priority

                                                        .. data:: ignore = 0

                                                        	ignore

                                                        """

                                                        ignore = 0


                                                        @staticmethod
                                                        def _meta_info():
                                                            from ydk.models.ietf._meta import _ietf_qos as meta
                                                            return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ExceedHandling.MarkPriorityEnum']


                                                    @property
                                                    def _common_path(self):
                                                        if self.parent is None:
                                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                                        return self.parent._common_path +'/ietf-qos:exceed-handling'

                                                    def is_config(self):
                                                        ''' Returns True if this instance represents config data else returns False '''
                                                        return True

                                                    def _has_data(self):
                                                        if not self.is_config():
                                                            return False
                                                        if self.af_drop is not None:
                                                            return True

                                                        if self.drop_packet is not None:
                                                            return True

                                                        if self.drop_precedence is not None:
                                                            return True

                                                        if self.mark_dscp is not None:
                                                            return True

                                                        if self.mark_precedence is not None:
                                                            return True

                                                        if self.mark_priority is not None:
                                                            return True

                                                        if self.no_action is not None:
                                                            return True

                                                        return False

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                                        return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ExceedHandling']['meta_info']

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/ietf-qos:actions'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.conform_handling is not None and self.conform_handling._has_data():
                                                        return True

                                                    if self.exceed_handling is not None and self.exceed_handling._has_data():
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                                    return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/ietf-qos:bit-rate'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.actions is not None and self.actions._has_data():
                                                    return True

                                                if self.bit_rate is not None:
                                                    return True

                                                if self.burst is not None:
                                                    return True

                                                if self.counters is not None and self.counters._has_data():
                                                    return True

                                                if self.excess_burst is not None:
                                                    return True

                                                if self.hierarchical_counters is not None and self.hierarchical_counters._has_data():
                                                    return True

                                                if self.time_burst is not None:
                                                    return True

                                                if self.time_excess_burst is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.ietf._meta import _ietf_qos as meta
                                                return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate']['meta_info']


                                        class Percentage(object):
                                            """
                                            percentage
                                            
                                            .. attribute:: counters
                                            
                                            	counters
                                            	**type**\:   :py:class:`Counters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage.Counters>`
                                            
                                            	**presence node**\: True
                                            
                                            .. attribute:: hierarchical_counters
                                            
                                            	hierarchical\-counters
                                            	**type**\:   :py:class:`HierarchicalCounters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage.HierarchicalCounters>`
                                            
                                            	**presence node**\: True
                                            
                                            .. attribute:: percentage
                                            
                                            	percentage
                                            	**type**\:  int
                                            
                                            	**range:** 1..100
                                            
                                            	**units**\: percent
                                            
                                            

                                            """

                                            _prefix = 'qos'
                                            _revision = '2016-10-20'

                                            def __init__(self):
                                                self.parent = None
                                                self.counters = None
                                                self.hierarchical_counters = None
                                                self.percentage = None


                                            class Counters(object):
                                                """
                                                counters
                                                
                                                .. attribute:: hierarchical_counters
                                                
                                                	hierarchical\-counters
                                                	**type**\:   :py:class:`HierarchicalCounters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage.Counters.HierarchicalCounters>`
                                                
                                                	**presence node**\: True
                                                
                                                .. attribute:: _is_presence
                                                
                                                	Is present if this instance represents presence container else not
                                                	**type**\: bool
                                                
                                                

                                                This class is a :ref:`presence class<presence-class>`

                                                """

                                                _prefix = 'qos'
                                                _revision = '2016-10-20'

                                                def __init__(self):
                                                    self.parent = None
                                                    self._is_presence = True
                                                    self.hierarchical_counters = None


                                                class HierarchicalCounters(object):
                                                    """
                                                    hierarchical\-counters
                                                    
                                                    .. attribute:: dual_stack
                                                    
                                                    	dual\-stack
                                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                                    
                                                    .. attribute:: _is_presence
                                                    
                                                    	Is present if this instance represents presence container else not
                                                    	**type**\: bool
                                                    
                                                    

                                                    This class is a :ref:`presence class<presence-class>`

                                                    """

                                                    _prefix = 'qos'
                                                    _revision = '2016-10-20'

                                                    def __init__(self):
                                                        self.parent = None
                                                        self._is_presence = True
                                                        self.dual_stack = None

                                                    @property
                                                    def _common_path(self):
                                                        if self.parent is None:
                                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                                        return self.parent._common_path +'/ietf-qos:hierarchical-counters'

                                                    def is_config(self):
                                                        ''' Returns True if this instance represents config data else returns False '''
                                                        return True

                                                    def _has_data(self):
                                                        if not self.is_config():
                                                            return False
                                                        if self._is_presence:
                                                            return True
                                                        if self.dual_stack is not None:
                                                            return True

                                                        return False

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                                        return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage.Counters.HierarchicalCounters']['meta_info']

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/ietf-qos:counters'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self._is_presence:
                                                        return True
                                                    if self.hierarchical_counters is not None and self.hierarchical_counters._has_data():
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                                    return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage.Counters']['meta_info']


                                            class HierarchicalCounters(object):
                                                """
                                                hierarchical\-counters
                                                
                                                .. attribute:: dual_stack
                                                
                                                	dual\-stack
                                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                                
                                                .. attribute:: _is_presence
                                                
                                                	Is present if this instance represents presence container else not
                                                	**type**\: bool
                                                
                                                

                                                This class is a :ref:`presence class<presence-class>`

                                                """

                                                _prefix = 'qos'
                                                _revision = '2016-10-20'

                                                def __init__(self):
                                                    self.parent = None
                                                    self._is_presence = True
                                                    self.dual_stack = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/ietf-qos:hierarchical-counters'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self._is_presence:
                                                        return True
                                                    if self.dual_stack is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                                    return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage.HierarchicalCounters']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/ietf-qos:percentage'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.counters is not None and self.counters._has_data():
                                                    return True

                                                if self.hierarchical_counters is not None and self.hierarchical_counters._has_data():
                                                    return True

                                                if self.percentage is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.ietf._meta import _ietf_qos as meta
                                                return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/ietf-qos:packet-handling'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.af_drop is not None:
                                                return True

                                            if self.bit_rate is not None and self.bit_rate._has_data():
                                                return True

                                            if self.drop_precedence is not None:
                                                return True

                                            if self.mark_dscp is not None:
                                                return True

                                            if self.mark_precedence is not None:
                                                return True

                                            if self.mark_priority is not None:
                                                return True

                                            if self.parent_class is not None:
                                                return True

                                            if self.percentage is not None and self.percentage._has_data():
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.ietf._meta import _ietf_qos as meta
                                            return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')
                                        if self.name is None:
                                            raise YPYModelError('Key property name is None')

                                        return self.parent._common_path +'/ietf-qos:class[ietf-qos:name = ' + str(self.name) + ']'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.name is not None:
                                            return True

                                        if self.packet_handling is not None and self.packet_handling._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                        return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily3.Policy_.ClassGroup.Classes.Class_']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-qos:classes'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.class_ is not None:
                                        for child_ref in self.class_:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily3.Policy_.ClassGroup.Classes']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-qos:class-group'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.class_group_reference is not None:
                                    return True

                                if self.classes is not None and self.classes._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily3.Policy_.ClassGroup']['meta_info']


                        class AccessGroup(object):
                            """
                            access\-group
                            
                            .. attribute:: classes
                            
                            	classes
                            	**type**\:   :py:class:`Classes <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily3.Policy_.AccessGroup.Classes>`
                            
                            .. attribute:: ip_access_group
                            
                            	Reference an IPv4 policy
                            	**type**\:   :py:class:`IpAccessGroup <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily3.Policy_.AccessGroup.IpAccessGroup>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: ipv6_access_group
                            
                            	Reference an IPv6 policy
                            	**type**\:   :py:class:`Ipv6AccessGroup <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily3.Policy_.AccessGroup.Ipv6AccessGroup>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: l2_access_group
                            
                            	Reference a layer\-2 policy
                            	**type**\:   :py:class:`L2AccessGroup <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily3.Policy_.AccessGroup.L2AccessGroup>`
                            
                            	**presence node**\: True
                            
                            

                            """

                            _prefix = 'qos'
                            _revision = '2016-10-20'

                            def __init__(self):
                                self.parent = None
                                self.classes = Qos.Policies.Policy.Metering.CardFamily3.Policy_.AccessGroup.Classes()
                                self.classes.parent = self
                                self.ip_access_group = None
                                self.ipv6_access_group = None
                                self.l2_access_group = None


                            class IpAccessGroup(object):
                                """
                                Reference an IPv4 policy
                                
                                .. attribute:: context_name
                                
                                	context\-name
                                	**type**\:  str
                                
                                	**mandatory**\: True
                                
                                .. attribute:: policy_name
                                
                                	policy\-name
                                	**type**\:  str
                                
                                	**mandatory**\: True
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'qos'
                                _revision = '2016-10-20'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.context_name = None
                                    self.policy_name = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-qos:ip-access-group'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.context_name is not None:
                                        return True

                                    if self.policy_name is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily3.Policy_.AccessGroup.IpAccessGroup']['meta_info']


                            class Ipv6AccessGroup(object):
                                """
                                Reference an IPv6 policy
                                
                                .. attribute:: context_name
                                
                                	context\-name
                                	**type**\:  str
                                
                                	**mandatory**\: True
                                
                                .. attribute:: policy_name
                                
                                	policy\-name
                                	**type**\:  str
                                
                                	**mandatory**\: True
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'qos'
                                _revision = '2016-10-20'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.context_name = None
                                    self.policy_name = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-qos:ipv6-access-group'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.context_name is not None:
                                        return True

                                    if self.policy_name is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily3.Policy_.AccessGroup.Ipv6AccessGroup']['meta_info']


                            class L2AccessGroup(object):
                                """
                                Reference a layer\-2 policy
                                
                                .. attribute:: policy_name
                                
                                	policy\-name
                                	**type**\:  str
                                
                                	**mandatory**\: True
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'qos'
                                _revision = '2016-10-20'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.policy_name = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-qos:l2-access-group'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.policy_name is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily3.Policy_.AccessGroup.L2AccessGroup']['meta_info']


                            class Classes(object):
                                """
                                classes
                                
                                .. attribute:: class_
                                
                                	class
                                	**type**\: list of    :py:class:`Class_ <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily3.Policy_.AccessGroup.Classes.Class_>`
                                
                                

                                """

                                _prefix = 'qos'
                                _revision = '2016-10-20'

                                def __init__(self):
                                    self.parent = None
                                    self.class_ = YList()
                                    self.class_.parent = self
                                    self.class_.name = 'class_'


                                class Class_(object):
                                    """
                                    class
                                    
                                    .. attribute:: name  <key>
                                    
                                    	name
                                    	**type**\:  str
                                    
                                    .. attribute:: packet_handling
                                    
                                    	packet\-handling
                                    	**type**\:   :py:class:`PacketHandling <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily3.Policy_.AccessGroup.Classes.Class_.PacketHandling>`
                                    
                                    

                                    """

                                    _prefix = 'qos'
                                    _revision = '2016-10-20'

                                    def __init__(self):
                                        self.parent = None
                                        self.name = None
                                        self.packet_handling = Qos.Policies.Policy.Metering.CardFamily3.Policy_.AccessGroup.Classes.Class_.PacketHandling()
                                        self.packet_handling.parent = self


                                    class PacketHandling(object):
                                        """
                                        packet\-handling
                                        
                                        .. attribute:: parent_class
                                        
                                        	parent\-class
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'qos'
                                        _revision = '2016-10-20'

                                        def __init__(self):
                                            self.parent = None
                                            self.parent_class = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/ietf-qos:packet-handling'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.parent_class is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.ietf._meta import _ietf_qos as meta
                                            return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily3.Policy_.AccessGroup.Classes.Class_.PacketHandling']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')
                                        if self.name is None:
                                            raise YPYModelError('Key property name is None')

                                        return self.parent._common_path +'/ietf-qos:class[ietf-qos:name = ' + str(self.name) + ']'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.name is not None:
                                            return True

                                        if self.packet_handling is not None and self.packet_handling._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                        return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily3.Policy_.AccessGroup.Classes.Class_']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-qos:classes'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.class_ is not None:
                                        for child_ref in self.class_:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily3.Policy_.AccessGroup.Classes']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-qos:access-group'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.classes is not None and self.classes._has_data():
                                    return True

                                if self.ip_access_group is not None and self.ip_access_group._has_data():
                                    return True

                                if self.ipv6_access_group is not None and self.ipv6_access_group._has_data():
                                    return True

                                if self.l2_access_group is not None and self.l2_access_group._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily3.Policy_.AccessGroup']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-qos:policy'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.access_group is not None and self.access_group._has_data():
                                return True

                            if self.class_group is not None and self.class_group._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_qos as meta
                            return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily3.Policy_']['meta_info']


                    class Rate(object):
                        """
                        Specify rate limits inline
                        
                        .. attribute:: actions
                        
                        	actions
                        	**type**\:   :py:class:`Actions <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily3.Rate.Actions>`
                        
                        .. attribute:: bit_rate
                        
                        	bit\-rate
                        	**type**\:  int
                        
                        	**range:** 66..100000000
                        
                        .. attribute:: burst
                        
                        	burst
                        	**type**\:  int
                        
                        	**range:** 1..4250000000
                        
                        	**units**\: byte
                        
                        .. attribute:: counters
                        
                        	counters
                        	**type**\:   :py:class:`Counters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily3.Rate.Counters>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: excess_burst
                        
                        	excess\-burst
                        	**type**\:  int
                        
                        	**range:** 1..4250000000
                        
                        	**units**\: byte
                        
                        .. attribute:: hierarchical_counters
                        
                        	hierarchical\-counters
                        	**type**\:   :py:class:`HierarchicalCounters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily3.Rate.HierarchicalCounters>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: informational
                        
                        	informational
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: time_burst
                        
                        	time\-burst
                        	**type**\:  int
                        
                        	**range:** 1..10000
                        
                        	**units**\: millisecond
                        
                        .. attribute:: time_excess_burst
                        
                        	time\-excess\-burst
                        	**type**\:  int
                        
                        	**range:** 1..10000
                        
                        

                        """

                        _prefix = 'qos'
                        _revision = '2016-10-20'

                        def __init__(self):
                            self.parent = None
                            self.actions = Qos.Policies.Policy.Metering.CardFamily3.Rate.Actions()
                            self.actions.parent = self
                            self.bit_rate = None
                            self.burst = None
                            self.counters = None
                            self.excess_burst = None
                            self.hierarchical_counters = None
                            self.informational = None
                            self.time_burst = None
                            self.time_excess_burst = None


                        class Counters(object):
                            """
                            counters
                            
                            .. attribute:: hierarchical_counters
                            
                            	hierarchical\-counters
                            	**type**\:   :py:class:`HierarchicalCounters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily3.Rate.Counters.HierarchicalCounters>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'qos'
                            _revision = '2016-10-20'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.hierarchical_counters = None


                            class HierarchicalCounters(object):
                                """
                                hierarchical\-counters
                                
                                .. attribute:: dual_stack
                                
                                	dual\-stack
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'qos'
                                _revision = '2016-10-20'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.dual_stack = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-qos:hierarchical-counters'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.dual_stack is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily3.Rate.Counters.HierarchicalCounters']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-qos:counters'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.hierarchical_counters is not None and self.hierarchical_counters._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily3.Rate.Counters']['meta_info']


                        class HierarchicalCounters(object):
                            """
                            hierarchical\-counters
                            
                            .. attribute:: dual_stack
                            
                            	dual\-stack
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'qos'
                            _revision = '2016-10-20'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.dual_stack = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-qos:hierarchical-counters'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.dual_stack is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily3.Rate.HierarchicalCounters']['meta_info']


                        class Actions(object):
                            """
                            actions
                            
                            .. attribute:: conform_handling
                            
                            	conform\-handling
                            	**type**\:   :py:class:`ConformHandling <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily3.Rate.Actions.ConformHandling>`
                            
                            .. attribute:: exceed_handling
                            
                            	exceed\-handling
                            	**type**\:   :py:class:`ExceedHandling <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily3.Rate.Actions.ExceedHandling>`
                            
                            .. attribute:: violate_handling
                            
                            	violate\-handling
                            	**type**\:   :py:class:`ViolateHandling <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.CardFamily3.Rate.Actions.ViolateHandling>`
                            
                            

                            """

                            _prefix = 'qos'
                            _revision = '2016-10-20'

                            def __init__(self):
                                self.parent = None
                                self.conform_handling = Qos.Policies.Policy.Metering.CardFamily3.Rate.Actions.ConformHandling()
                                self.conform_handling.parent = self
                                self.exceed_handling = Qos.Policies.Policy.Metering.CardFamily3.Rate.Actions.ExceedHandling()
                                self.exceed_handling.parent = self
                                self.violate_handling = Qos.Policies.Policy.Metering.CardFamily3.Rate.Actions.ViolateHandling()
                                self.violate_handling.parent = self


                            class ConformHandling(object):
                                """
                                conform\-handling
                                
                                .. attribute:: af_drop
                                
                                	af\-drop
                                	**type**\:  int
                                
                                	**range:** 1..3
                                
                                .. attribute:: drop_precedence
                                
                                	drop\-precedence
                                	**type**\: one of the below types:
                                
                                	**type**\:  int
                                
                                	**range:** 1..7
                                
                                
                                ----
                                	**type**\:   :py:class:`DropPrecedenceEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.DropPrecedenceEnum>`
                                
                                
                                ----
                                .. attribute:: mark_dscp
                                
                                	mark\-dscp
                                	**type**\: one of the below types:
                                
                                	**type**\:  int
                                
                                	**range:** 0..63
                                
                                
                                ----
                                	**type**\:   :py:class:`DscpCodeAllValuesTypeEnum <ydk.models.ietf.ietf_qos.DscpCodeAllValuesTypeEnum>`
                                
                                
                                ----
                                .. attribute:: mark_precedence
                                
                                	mark\-precedence
                                	**type**\:  int
                                
                                	**range:** 1..3
                                
                                .. attribute:: mark_priority
                                
                                	mark\-priority
                                	**type**\: one of the below types:
                                
                                	**type**\:  int
                                
                                	**range:** 1..7
                                
                                
                                ----
                                	**type**\:   :py:class:`MarkPriorityEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.MarkPriorityEnum>`
                                
                                
                                ----
                                .. attribute:: no_action
                                
                                	no\-action
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                

                                """

                                _prefix = 'qos'
                                _revision = '2016-10-20'

                                def __init__(self):
                                    self.parent = None
                                    self.af_drop = None
                                    self.drop_precedence = None
                                    self.mark_dscp = None
                                    self.mark_precedence = None
                                    self.mark_priority = None
                                    self.no_action = None

                                class DropPrecedenceEnum(Enum):
                                    """
                                    DropPrecedenceEnum

                                    drop\-precedence

                                    .. data:: ignore = 0

                                    	ignore

                                    """

                                    ignore = 0


                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                        return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily3.Rate.Actions.ConformHandling.DropPrecedenceEnum']


                                class MarkPriorityEnum(Enum):
                                    """
                                    MarkPriorityEnum

                                    mark\-priority

                                    .. data:: ignore = 0

                                    	ignore

                                    """

                                    ignore = 0


                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                        return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily3.Rate.Actions.ConformHandling.MarkPriorityEnum']


                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-qos:conform-handling'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.af_drop is not None:
                                        return True

                                    if self.drop_precedence is not None:
                                        return True

                                    if self.mark_dscp is not None:
                                        return True

                                    if self.mark_precedence is not None:
                                        return True

                                    if self.mark_priority is not None:
                                        return True

                                    if self.no_action is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily3.Rate.Actions.ConformHandling']['meta_info']


                            class ExceedHandling(object):
                                """
                                exceed\-handling
                                
                                .. attribute:: af_drop
                                
                                	af\-drop
                                	**type**\:  int
                                
                                	**range:** 1..3
                                
                                .. attribute:: drop_packet
                                
                                	drop\-packet
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: drop_precedence
                                
                                	drop\-precedence
                                	**type**\: one of the below types:
                                
                                	**type**\:  int
                                
                                	**range:** 1..7
                                
                                
                                ----
                                	**type**\:   :py:class:`DropPrecedenceEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.DropPrecedenceEnum>`
                                
                                
                                ----
                                .. attribute:: mark_dscp
                                
                                	mark\-dscp
                                	**type**\: one of the below types:
                                
                                	**type**\:  int
                                
                                	**range:** 0..63
                                
                                
                                ----
                                	**type**\:   :py:class:`DscpCodeAllValuesTypeEnum <ydk.models.ietf.ietf_qos.DscpCodeAllValuesTypeEnum>`
                                
                                
                                ----
                                .. attribute:: mark_precedence
                                
                                	mark\-precedence
                                	**type**\:  int
                                
                                	**range:** 1..3
                                
                                .. attribute:: mark_priority
                                
                                	mark\-priority
                                	**type**\: one of the below types:
                                
                                	**type**\:  int
                                
                                	**range:** 1..7
                                
                                
                                ----
                                	**type**\:   :py:class:`MarkPriorityEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.MarkPriorityEnum>`
                                
                                
                                ----
                                .. attribute:: no_action
                                
                                	no\-action
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                

                                """

                                _prefix = 'qos'
                                _revision = '2016-10-20'

                                def __init__(self):
                                    self.parent = None
                                    self.af_drop = None
                                    self.drop_packet = None
                                    self.drop_precedence = None
                                    self.mark_dscp = None
                                    self.mark_precedence = None
                                    self.mark_priority = None
                                    self.no_action = None

                                class DropPrecedenceEnum(Enum):
                                    """
                                    DropPrecedenceEnum

                                    drop\-precedence

                                    .. data:: ignore = 0

                                    	ignore

                                    """

                                    ignore = 0


                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                        return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily3.Rate.Actions.ExceedHandling.DropPrecedenceEnum']


                                class MarkPriorityEnum(Enum):
                                    """
                                    MarkPriorityEnum

                                    mark\-priority

                                    .. data:: ignore = 0

                                    	ignore

                                    """

                                    ignore = 0


                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                        return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily3.Rate.Actions.ExceedHandling.MarkPriorityEnum']


                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-qos:exceed-handling'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.af_drop is not None:
                                        return True

                                    if self.drop_packet is not None:
                                        return True

                                    if self.drop_precedence is not None:
                                        return True

                                    if self.mark_dscp is not None:
                                        return True

                                    if self.mark_precedence is not None:
                                        return True

                                    if self.mark_priority is not None:
                                        return True

                                    if self.no_action is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily3.Rate.Actions.ExceedHandling']['meta_info']


                            class ViolateHandling(object):
                                """
                                violate\-handling
                                
                                .. attribute:: af_drop
                                
                                	af\-drop
                                	**type**\:  int
                                
                                	**range:** 1..3
                                
                                .. attribute:: drop_packet
                                
                                	drop\-packet
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: drop_precedence
                                
                                	drop\-precedence
                                	**type**\: one of the below types:
                                
                                	**type**\:  int
                                
                                	**range:** 1..7
                                
                                
                                ----
                                	**type**\:   :py:class:`DropPrecedenceEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.DropPrecedenceEnum>`
                                
                                
                                ----
                                .. attribute:: mark_dscp
                                
                                	mark\-dscp
                                	**type**\: one of the below types:
                                
                                	**type**\:  int
                                
                                	**range:** 0..63
                                
                                
                                ----
                                	**type**\:   :py:class:`DscpCodeAllValuesTypeEnum <ydk.models.ietf.ietf_qos.DscpCodeAllValuesTypeEnum>`
                                
                                
                                ----
                                .. attribute:: mark_precedence
                                
                                	mark\-precedence
                                	**type**\:  int
                                
                                	**range:** 1..3
                                
                                .. attribute:: mark_priority
                                
                                	mark\-priority
                                	**type**\: one of the below types:
                                
                                	**type**\:  int
                                
                                	**range:** 1..7
                                
                                
                                ----
                                	**type**\:   :py:class:`MarkPriorityEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.MarkPriorityEnum>`
                                
                                
                                ----
                                .. attribute:: no_action
                                
                                	no\-action
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                

                                """

                                _prefix = 'qos'
                                _revision = '2016-10-20'

                                def __init__(self):
                                    self.parent = None
                                    self.af_drop = None
                                    self.drop_packet = None
                                    self.drop_precedence = None
                                    self.mark_dscp = None
                                    self.mark_precedence = None
                                    self.mark_priority = None
                                    self.no_action = None

                                class DropPrecedenceEnum(Enum):
                                    """
                                    DropPrecedenceEnum

                                    drop\-precedence

                                    .. data:: ignore = 0

                                    	ignore

                                    """

                                    ignore = 0


                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                        return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily3.Rate.Actions.ViolateHandling.DropPrecedenceEnum']


                                class MarkPriorityEnum(Enum):
                                    """
                                    MarkPriorityEnum

                                    mark\-priority

                                    .. data:: ignore = 0

                                    	ignore

                                    """

                                    ignore = 0


                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                        return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily3.Rate.Actions.ViolateHandling.MarkPriorityEnum']


                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-qos:violate-handling'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.af_drop is not None:
                                        return True

                                    if self.drop_packet is not None:
                                        return True

                                    if self.drop_precedence is not None:
                                        return True

                                    if self.mark_dscp is not None:
                                        return True

                                    if self.mark_precedence is not None:
                                        return True

                                    if self.mark_priority is not None:
                                        return True

                                    if self.no_action is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily3.Rate.Actions.ViolateHandling']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-qos:actions'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.conform_handling is not None and self.conform_handling._has_data():
                                    return True

                                if self.exceed_handling is not None and self.exceed_handling._has_data():
                                    return True

                                if self.violate_handling is not None and self.violate_handling._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily3.Rate.Actions']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-qos:rate'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.actions is not None and self.actions._has_data():
                                return True

                            if self.bit_rate is not None:
                                return True

                            if self.burst is not None:
                                return True

                            if self.counters is not None and self.counters._has_data():
                                return True

                            if self.excess_burst is not None:
                                return True

                            if self.hierarchical_counters is not None and self.hierarchical_counters._has_data():
                                return True

                            if self.informational is not None:
                                return True

                            if self.time_burst is not None:
                                return True

                            if self.time_excess_burst is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_qos as meta
                            return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily3.Rate']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-qos:card-family-3'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.af_drop is not None:
                            return True

                        if self.drop_precedence is not None:
                            return True

                        if self.mark_dscp is not None:
                            return True

                        if self.mark_precedence is not None:
                            return True

                        if self.mark_priority is not None:
                            return True

                        if self.policy is not None and self.policy._has_data():
                            return True

                        if self.rate is not None and self.rate._has_data():
                            return True

                        if self.rate_calculation_exclude_layer_2_overhead is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_qos as meta
                        return meta._meta_table['Qos.Policies.Policy.Metering.CardFamily3']['meta_info']


                class Policy_(object):
                    """
                    policy
                    
                    .. attribute:: access_group
                    
                    	access\-group
                    	**type**\:   :py:class:`AccessGroup <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.Policy_.AccessGroup>`
                    
                    .. attribute:: class_group
                    
                    	Reference a previously defined class
                    	**type**\:   :py:class:`ClassGroup <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.Policy_.ClassGroup>`
                    
                    

                    """

                    _prefix = 'qos'
                    _revision = '2016-10-20'

                    def __init__(self):
                        self.parent = None
                        self.access_group = Qos.Policies.Policy.Metering.Policy_.AccessGroup()
                        self.access_group.parent = self
                        self.class_group = Qos.Policies.Policy.Metering.Policy_.ClassGroup()
                        self.class_group.parent = self


                    class ClassGroup(object):
                        """
                        Reference a previously defined class
                        
                        .. attribute:: class_group_reference
                        
                        	class\-group\-reference
                        	**type**\:  str
                        
                        	**refers to**\:  :py:class:`name <ydk.models.ietf.ietf_qos.Qos.ClassDefinitions.ClassDefinition>`
                        
                        .. attribute:: classes
                        
                        	classes
                        	**type**\:   :py:class:`Classes <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.Policy_.ClassGroup.Classes>`
                        
                        

                        """

                        _prefix = 'qos'
                        _revision = '2016-10-20'

                        def __init__(self):
                            self.parent = None
                            self.class_group_reference = None
                            self.classes = Qos.Policies.Policy.Metering.Policy_.ClassGroup.Classes()
                            self.classes.parent = self


                        class Classes(object):
                            """
                            classes
                            
                            .. attribute:: class_
                            
                            	class
                            	**type**\: list of    :py:class:`Class_ <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.Policy_.ClassGroup.Classes.Class_>`
                            
                            

                            """

                            _prefix = 'qos'
                            _revision = '2016-10-20'

                            def __init__(self):
                                self.parent = None
                                self.class_ = YList()
                                self.class_.parent = self
                                self.class_.name = 'class_'


                            class Class_(object):
                                """
                                class
                                
                                .. attribute:: name  <key>
                                
                                	name
                                	**type**\:  str
                                
                                	**length:** 1..39
                                
                                	**refers to**\:  :py:class:`class_ <ydk.models.ietf.ietf_qos.Qos.ClassDefinitions.ClassDefinition.Qos_>`
                                
                                .. attribute:: packet_handling
                                
                                	packet\-handling
                                	**type**\:   :py:class:`PacketHandling <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.Policy_.ClassGroup.Classes.Class_.PacketHandling>`
                                
                                

                                """

                                _prefix = 'qos'
                                _revision = '2016-10-20'

                                def __init__(self):
                                    self.parent = None
                                    self.name = None
                                    self.packet_handling = Qos.Policies.Policy.Metering.Policy_.ClassGroup.Classes.Class_.PacketHandling()
                                    self.packet_handling.parent = self


                                class PacketHandling(object):
                                    """
                                    packet\-handling
                                    
                                    .. attribute:: af_drop
                                    
                                    	af\-drop
                                    	**type**\:  int
                                    
                                    	**range:** 1..3
                                    
                                    .. attribute:: bit_rate
                                    
                                    	bit\-rate
                                    	**type**\:   :py:class:`BitRate <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate>`
                                    
                                    .. attribute:: drop_precedence
                                    
                                    	drop\-precedence
                                    	**type**\: one of the below types:
                                    
                                    	**type**\:  int
                                    
                                    	**range:** 1..7
                                    
                                    
                                    ----
                                    	**type**\:   :py:class:`DropPrecedenceEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.DropPrecedenceEnum>`
                                    
                                    
                                    ----
                                    .. attribute:: mark_dscp
                                    
                                    	mark\-dscp
                                    	**type**\: one of the below types:
                                    
                                    	**type**\:  int
                                    
                                    	**range:** 0..63
                                    
                                    
                                    ----
                                    	**type**\:   :py:class:`DscpCodeAllValuesTypeEnum <ydk.models.ietf.ietf_qos.DscpCodeAllValuesTypeEnum>`
                                    
                                    
                                    ----
                                    .. attribute:: mark_precedence
                                    
                                    	mark\-precedence
                                    	**type**\:  int
                                    
                                    	**range:** 1..3
                                    
                                    .. attribute:: mark_priority
                                    
                                    	mark\-priority
                                    	**type**\: one of the below types:
                                    
                                    	**type**\:  int
                                    
                                    	**range:** 1..7
                                    
                                    
                                    ----
                                    	**type**\:   :py:class:`MarkPriorityEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Policy_.ClassGroup.Classes.Class_.PacketHandling.MarkPriorityEnum>`
                                    
                                    
                                    ----
                                    .. attribute:: parent_class
                                    
                                    	parent\-class
                                    	**type**\:  str
                                    
                                    .. attribute:: percentage
                                    
                                    	percentage
                                    	**type**\:   :py:class:`Percentage <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage>`
                                    
                                    

                                    """

                                    _prefix = 'qos'
                                    _revision = '2016-10-20'

                                    def __init__(self):
                                        self.parent = None
                                        self.af_drop = None
                                        self.bit_rate = Qos.Policies.Policy.Metering.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate()
                                        self.bit_rate.parent = self
                                        self.drop_precedence = None
                                        self.mark_dscp = None
                                        self.mark_precedence = None
                                        self.mark_priority = None
                                        self.parent_class = None
                                        self.percentage = Qos.Policies.Policy.Metering.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage()
                                        self.percentage.parent = self

                                    class DropPrecedenceEnum(Enum):
                                        """
                                        DropPrecedenceEnum

                                        drop\-precedence

                                        .. data:: ignore = 0

                                        	ignore

                                        """

                                        ignore = 0


                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.ietf._meta import _ietf_qos as meta
                                            return meta._meta_table['Qos.Policies.Policy.Metering.Policy_.ClassGroup.Classes.Class_.PacketHandling.DropPrecedenceEnum']


                                    class MarkPriorityEnum(Enum):
                                        """
                                        MarkPriorityEnum

                                        mark\-priority

                                        .. data:: ignore = 0

                                        	ignore

                                        """

                                        ignore = 0


                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.ietf._meta import _ietf_qos as meta
                                            return meta._meta_table['Qos.Policies.Policy.Metering.Policy_.ClassGroup.Classes.Class_.PacketHandling.MarkPriorityEnum']



                                    class BitRate(object):
                                        """
                                        bit\-rate
                                        
                                        .. attribute:: actions
                                        
                                        	actions
                                        	**type**\:   :py:class:`Actions <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions>`
                                        
                                        .. attribute:: bit_rate
                                        
                                        	bit\-rate
                                        	**type**\:  int
                                        
                                        	**range:** 66..100000000
                                        
                                        .. attribute:: burst
                                        
                                        	burst
                                        	**type**\:  int
                                        
                                        	**range:** 1..4250000000
                                        
                                        	**units**\: byte
                                        
                                        .. attribute:: counters
                                        
                                        	counters
                                        	**type**\:   :py:class:`Counters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Counters>`
                                        
                                        	**presence node**\: True
                                        
                                        .. attribute:: excess_burst
                                        
                                        	excess\-burst
                                        	**type**\:  int
                                        
                                        	**range:** 1..4250000000
                                        
                                        	**units**\: byte
                                        
                                        .. attribute:: hierarchical_counters
                                        
                                        	hierarchical\-counters
                                        	**type**\:   :py:class:`HierarchicalCounters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.HierarchicalCounters>`
                                        
                                        	**presence node**\: True
                                        
                                        .. attribute:: time_burst
                                        
                                        	time\-burst
                                        	**type**\:  int
                                        
                                        	**range:** 1..10000
                                        
                                        	**units**\: millisecond
                                        
                                        .. attribute:: time_excess_burst
                                        
                                        	time\-excess\-burst
                                        	**type**\:  int
                                        
                                        	**range:** 1..10000
                                        
                                        

                                        """

                                        _prefix = 'qos'
                                        _revision = '2016-10-20'

                                        def __init__(self):
                                            self.parent = None
                                            self.actions = Qos.Policies.Policy.Metering.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions()
                                            self.actions.parent = self
                                            self.bit_rate = None
                                            self.burst = None
                                            self.counters = None
                                            self.excess_burst = None
                                            self.hierarchical_counters = None
                                            self.time_burst = None
                                            self.time_excess_burst = None


                                        class Counters(object):
                                            """
                                            counters
                                            
                                            .. attribute:: hierarchical_counters
                                            
                                            	hierarchical\-counters
                                            	**type**\:   :py:class:`HierarchicalCounters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Counters.HierarchicalCounters>`
                                            
                                            	**presence node**\: True
                                            
                                            .. attribute:: _is_presence
                                            
                                            	Is present if this instance represents presence container else not
                                            	**type**\: bool
                                            
                                            

                                            This class is a :ref:`presence class<presence-class>`

                                            """

                                            _prefix = 'qos'
                                            _revision = '2016-10-20'

                                            def __init__(self):
                                                self.parent = None
                                                self._is_presence = True
                                                self.hierarchical_counters = None


                                            class HierarchicalCounters(object):
                                                """
                                                hierarchical\-counters
                                                
                                                .. attribute:: dual_stack
                                                
                                                	dual\-stack
                                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                                
                                                .. attribute:: _is_presence
                                                
                                                	Is present if this instance represents presence container else not
                                                	**type**\: bool
                                                
                                                

                                                This class is a :ref:`presence class<presence-class>`

                                                """

                                                _prefix = 'qos'
                                                _revision = '2016-10-20'

                                                def __init__(self):
                                                    self.parent = None
                                                    self._is_presence = True
                                                    self.dual_stack = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/ietf-qos:hierarchical-counters'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self._is_presence:
                                                        return True
                                                    if self.dual_stack is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                                    return meta._meta_table['Qos.Policies.Policy.Metering.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Counters.HierarchicalCounters']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/ietf-qos:counters'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self._is_presence:
                                                    return True
                                                if self.hierarchical_counters is not None and self.hierarchical_counters._has_data():
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.ietf._meta import _ietf_qos as meta
                                                return meta._meta_table['Qos.Policies.Policy.Metering.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Counters']['meta_info']


                                        class HierarchicalCounters(object):
                                            """
                                            hierarchical\-counters
                                            
                                            .. attribute:: dual_stack
                                            
                                            	dual\-stack
                                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                            
                                            .. attribute:: _is_presence
                                            
                                            	Is present if this instance represents presence container else not
                                            	**type**\: bool
                                            
                                            

                                            This class is a :ref:`presence class<presence-class>`

                                            """

                                            _prefix = 'qos'
                                            _revision = '2016-10-20'

                                            def __init__(self):
                                                self.parent = None
                                                self._is_presence = True
                                                self.dual_stack = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/ietf-qos:hierarchical-counters'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self._is_presence:
                                                    return True
                                                if self.dual_stack is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.ietf._meta import _ietf_qos as meta
                                                return meta._meta_table['Qos.Policies.Policy.Metering.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.HierarchicalCounters']['meta_info']


                                        class Actions(object):
                                            """
                                            actions
                                            
                                            .. attribute:: conform_handling
                                            
                                            	conform\-handling
                                            	**type**\:   :py:class:`ConformHandling <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ConformHandling>`
                                            
                                            .. attribute:: exceed_handling
                                            
                                            	exceed\-handling
                                            	**type**\:   :py:class:`ExceedHandling <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ExceedHandling>`
                                            
                                            

                                            """

                                            _prefix = 'qos'
                                            _revision = '2016-10-20'

                                            def __init__(self):
                                                self.parent = None
                                                self.conform_handling = Qos.Policies.Policy.Metering.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ConformHandling()
                                                self.conform_handling.parent = self
                                                self.exceed_handling = Qos.Policies.Policy.Metering.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ExceedHandling()
                                                self.exceed_handling.parent = self


                                            class ConformHandling(object):
                                                """
                                                conform\-handling
                                                
                                                .. attribute:: af_drop
                                                
                                                	af\-drop
                                                	**type**\:  int
                                                
                                                	**range:** 1..3
                                                
                                                .. attribute:: drop_precedence
                                                
                                                	drop\-precedence
                                                	**type**\: one of the below types:
                                                
                                                	**type**\:  int
                                                
                                                	**range:** 1..7
                                                
                                                
                                                ----
                                                	**type**\:   :py:class:`DropPrecedenceEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.DropPrecedenceEnum>`
                                                
                                                
                                                ----
                                                .. attribute:: mark_dscp
                                                
                                                	mark\-dscp
                                                	**type**\: one of the below types:
                                                
                                                	**type**\:  int
                                                
                                                	**range:** 0..63
                                                
                                                
                                                ----
                                                	**type**\:   :py:class:`DscpCodeAllValuesTypeEnum <ydk.models.ietf.ietf_qos.DscpCodeAllValuesTypeEnum>`
                                                
                                                
                                                ----
                                                .. attribute:: mark_precedence
                                                
                                                	mark\-precedence
                                                	**type**\:  int
                                                
                                                	**range:** 1..3
                                                
                                                .. attribute:: mark_priority
                                                
                                                	mark\-priority
                                                	**type**\: one of the below types:
                                                
                                                	**type**\:  int
                                                
                                                	**range:** 1..7
                                                
                                                
                                                ----
                                                	**type**\:   :py:class:`MarkPriorityEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.MarkPriorityEnum>`
                                                
                                                
                                                ----
                                                .. attribute:: no_action
                                                
                                                	no\-action
                                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                                
                                                

                                                """

                                                _prefix = 'qos'
                                                _revision = '2016-10-20'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.af_drop = None
                                                    self.drop_precedence = None
                                                    self.mark_dscp = None
                                                    self.mark_precedence = None
                                                    self.mark_priority = None
                                                    self.no_action = None

                                                class DropPrecedenceEnum(Enum):
                                                    """
                                                    DropPrecedenceEnum

                                                    drop\-precedence

                                                    .. data:: ignore = 0

                                                    	ignore

                                                    """

                                                    ignore = 0


                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                                        return meta._meta_table['Qos.Policies.Policy.Metering.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ConformHandling.DropPrecedenceEnum']


                                                class MarkPriorityEnum(Enum):
                                                    """
                                                    MarkPriorityEnum

                                                    mark\-priority

                                                    .. data:: ignore = 0

                                                    	ignore

                                                    """

                                                    ignore = 0


                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                                        return meta._meta_table['Qos.Policies.Policy.Metering.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ConformHandling.MarkPriorityEnum']


                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/ietf-qos:conform-handling'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.af_drop is not None:
                                                        return True

                                                    if self.drop_precedence is not None:
                                                        return True

                                                    if self.mark_dscp is not None:
                                                        return True

                                                    if self.mark_precedence is not None:
                                                        return True

                                                    if self.mark_priority is not None:
                                                        return True

                                                    if self.no_action is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                                    return meta._meta_table['Qos.Policies.Policy.Metering.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ConformHandling']['meta_info']


                                            class ExceedHandling(object):
                                                """
                                                exceed\-handling
                                                
                                                .. attribute:: af_drop
                                                
                                                	af\-drop
                                                	**type**\:  int
                                                
                                                	**range:** 1..3
                                                
                                                .. attribute:: drop_packet
                                                
                                                	drop\-packet
                                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                                
                                                .. attribute:: drop_precedence
                                                
                                                	drop\-precedence
                                                	**type**\: one of the below types:
                                                
                                                	**type**\:  int
                                                
                                                	**range:** 1..7
                                                
                                                
                                                ----
                                                	**type**\:   :py:class:`DropPrecedenceEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.DropPrecedenceEnum>`
                                                
                                                
                                                ----
                                                .. attribute:: mark_dscp
                                                
                                                	mark\-dscp
                                                	**type**\: one of the below types:
                                                
                                                	**type**\:  int
                                                
                                                	**range:** 0..63
                                                
                                                
                                                ----
                                                	**type**\:   :py:class:`DscpCodeAllValuesTypeEnum <ydk.models.ietf.ietf_qos.DscpCodeAllValuesTypeEnum>`
                                                
                                                
                                                ----
                                                .. attribute:: mark_precedence
                                                
                                                	mark\-precedence
                                                	**type**\:  int
                                                
                                                	**range:** 1..3
                                                
                                                .. attribute:: mark_priority
                                                
                                                	mark\-priority
                                                	**type**\: one of the below types:
                                                
                                                	**type**\:  int
                                                
                                                	**range:** 1..7
                                                
                                                
                                                ----
                                                	**type**\:   :py:class:`MarkPriorityEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.MarkPriorityEnum>`
                                                
                                                
                                                ----
                                                .. attribute:: no_action
                                                
                                                	no\-action
                                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                                
                                                

                                                """

                                                _prefix = 'qos'
                                                _revision = '2016-10-20'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.af_drop = None
                                                    self.drop_packet = None
                                                    self.drop_precedence = None
                                                    self.mark_dscp = None
                                                    self.mark_precedence = None
                                                    self.mark_priority = None
                                                    self.no_action = None

                                                class DropPrecedenceEnum(Enum):
                                                    """
                                                    DropPrecedenceEnum

                                                    drop\-precedence

                                                    .. data:: ignore = 0

                                                    	ignore

                                                    """

                                                    ignore = 0


                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                                        return meta._meta_table['Qos.Policies.Policy.Metering.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ExceedHandling.DropPrecedenceEnum']


                                                class MarkPriorityEnum(Enum):
                                                    """
                                                    MarkPriorityEnum

                                                    mark\-priority

                                                    .. data:: ignore = 0

                                                    	ignore

                                                    """

                                                    ignore = 0


                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                                        return meta._meta_table['Qos.Policies.Policy.Metering.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ExceedHandling.MarkPriorityEnum']


                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/ietf-qos:exceed-handling'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.af_drop is not None:
                                                        return True

                                                    if self.drop_packet is not None:
                                                        return True

                                                    if self.drop_precedence is not None:
                                                        return True

                                                    if self.mark_dscp is not None:
                                                        return True

                                                    if self.mark_precedence is not None:
                                                        return True

                                                    if self.mark_priority is not None:
                                                        return True

                                                    if self.no_action is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                                    return meta._meta_table['Qos.Policies.Policy.Metering.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ExceedHandling']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/ietf-qos:actions'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.conform_handling is not None and self.conform_handling._has_data():
                                                    return True

                                                if self.exceed_handling is not None and self.exceed_handling._has_data():
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.ietf._meta import _ietf_qos as meta
                                                return meta._meta_table['Qos.Policies.Policy.Metering.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/ietf-qos:bit-rate'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.actions is not None and self.actions._has_data():
                                                return True

                                            if self.bit_rate is not None:
                                                return True

                                            if self.burst is not None:
                                                return True

                                            if self.counters is not None and self.counters._has_data():
                                                return True

                                            if self.excess_burst is not None:
                                                return True

                                            if self.hierarchical_counters is not None and self.hierarchical_counters._has_data():
                                                return True

                                            if self.time_burst is not None:
                                                return True

                                            if self.time_excess_burst is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.ietf._meta import _ietf_qos as meta
                                            return meta._meta_table['Qos.Policies.Policy.Metering.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate']['meta_info']


                                    class Percentage(object):
                                        """
                                        percentage
                                        
                                        .. attribute:: counters
                                        
                                        	counters
                                        	**type**\:   :py:class:`Counters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage.Counters>`
                                        
                                        	**presence node**\: True
                                        
                                        .. attribute:: hierarchical_counters
                                        
                                        	hierarchical\-counters
                                        	**type**\:   :py:class:`HierarchicalCounters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage.HierarchicalCounters>`
                                        
                                        	**presence node**\: True
                                        
                                        .. attribute:: percentage
                                        
                                        	percentage
                                        	**type**\:  int
                                        
                                        	**range:** 1..100
                                        
                                        	**units**\: percent
                                        
                                        

                                        """

                                        _prefix = 'qos'
                                        _revision = '2016-10-20'

                                        def __init__(self):
                                            self.parent = None
                                            self.counters = None
                                            self.hierarchical_counters = None
                                            self.percentage = None


                                        class Counters(object):
                                            """
                                            counters
                                            
                                            .. attribute:: hierarchical_counters
                                            
                                            	hierarchical\-counters
                                            	**type**\:   :py:class:`HierarchicalCounters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage.Counters.HierarchicalCounters>`
                                            
                                            	**presence node**\: True
                                            
                                            .. attribute:: _is_presence
                                            
                                            	Is present if this instance represents presence container else not
                                            	**type**\: bool
                                            
                                            

                                            This class is a :ref:`presence class<presence-class>`

                                            """

                                            _prefix = 'qos'
                                            _revision = '2016-10-20'

                                            def __init__(self):
                                                self.parent = None
                                                self._is_presence = True
                                                self.hierarchical_counters = None


                                            class HierarchicalCounters(object):
                                                """
                                                hierarchical\-counters
                                                
                                                .. attribute:: dual_stack
                                                
                                                	dual\-stack
                                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                                
                                                .. attribute:: _is_presence
                                                
                                                	Is present if this instance represents presence container else not
                                                	**type**\: bool
                                                
                                                

                                                This class is a :ref:`presence class<presence-class>`

                                                """

                                                _prefix = 'qos'
                                                _revision = '2016-10-20'

                                                def __init__(self):
                                                    self.parent = None
                                                    self._is_presence = True
                                                    self.dual_stack = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/ietf-qos:hierarchical-counters'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self._is_presence:
                                                        return True
                                                    if self.dual_stack is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                                    return meta._meta_table['Qos.Policies.Policy.Metering.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage.Counters.HierarchicalCounters']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/ietf-qos:counters'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self._is_presence:
                                                    return True
                                                if self.hierarchical_counters is not None and self.hierarchical_counters._has_data():
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.ietf._meta import _ietf_qos as meta
                                                return meta._meta_table['Qos.Policies.Policy.Metering.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage.Counters']['meta_info']


                                        class HierarchicalCounters(object):
                                            """
                                            hierarchical\-counters
                                            
                                            .. attribute:: dual_stack
                                            
                                            	dual\-stack
                                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                            
                                            .. attribute:: _is_presence
                                            
                                            	Is present if this instance represents presence container else not
                                            	**type**\: bool
                                            
                                            

                                            This class is a :ref:`presence class<presence-class>`

                                            """

                                            _prefix = 'qos'
                                            _revision = '2016-10-20'

                                            def __init__(self):
                                                self.parent = None
                                                self._is_presence = True
                                                self.dual_stack = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/ietf-qos:hierarchical-counters'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self._is_presence:
                                                    return True
                                                if self.dual_stack is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.ietf._meta import _ietf_qos as meta
                                                return meta._meta_table['Qos.Policies.Policy.Metering.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage.HierarchicalCounters']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/ietf-qos:percentage'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.counters is not None and self.counters._has_data():
                                                return True

                                            if self.hierarchical_counters is not None and self.hierarchical_counters._has_data():
                                                return True

                                            if self.percentage is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.ietf._meta import _ietf_qos as meta
                                            return meta._meta_table['Qos.Policies.Policy.Metering.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/ietf-qos:packet-handling'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.af_drop is not None:
                                            return True

                                        if self.bit_rate is not None and self.bit_rate._has_data():
                                            return True

                                        if self.drop_precedence is not None:
                                            return True

                                        if self.mark_dscp is not None:
                                            return True

                                        if self.mark_precedence is not None:
                                            return True

                                        if self.mark_priority is not None:
                                            return True

                                        if self.parent_class is not None:
                                            return True

                                        if self.percentage is not None and self.percentage._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                        return meta._meta_table['Qos.Policies.Policy.Metering.Policy_.ClassGroup.Classes.Class_.PacketHandling']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                    if self.name is None:
                                        raise YPYModelError('Key property name is None')

                                    return self.parent._common_path +'/ietf-qos:class[ietf-qos:name = ' + str(self.name) + ']'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.name is not None:
                                        return True

                                    if self.packet_handling is not None and self.packet_handling._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Policies.Policy.Metering.Policy_.ClassGroup.Classes.Class_']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-qos:classes'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.class_ is not None:
                                    for child_ref in self.class_:
                                        if child_ref._has_data():
                                            return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.Policies.Policy.Metering.Policy_.ClassGroup.Classes']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-qos:class-group'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.class_group_reference is not None:
                                return True

                            if self.classes is not None and self.classes._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_qos as meta
                            return meta._meta_table['Qos.Policies.Policy.Metering.Policy_.ClassGroup']['meta_info']


                    class AccessGroup(object):
                        """
                        access\-group
                        
                        .. attribute:: classes
                        
                        	classes
                        	**type**\:   :py:class:`Classes <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.Policy_.AccessGroup.Classes>`
                        
                        .. attribute:: ip_access_group
                        
                        	Reference an IPv4 policy
                        	**type**\:   :py:class:`IpAccessGroup <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.Policy_.AccessGroup.IpAccessGroup>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: ipv6_access_group
                        
                        	Reference an IPv6 policy
                        	**type**\:   :py:class:`Ipv6AccessGroup <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.Policy_.AccessGroup.Ipv6AccessGroup>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: l2_access_group
                        
                        	Reference a layer\-2 policy
                        	**type**\:   :py:class:`L2AccessGroup <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.Policy_.AccessGroup.L2AccessGroup>`
                        
                        	**presence node**\: True
                        
                        

                        """

                        _prefix = 'qos'
                        _revision = '2016-10-20'

                        def __init__(self):
                            self.parent = None
                            self.classes = Qos.Policies.Policy.Metering.Policy_.AccessGroup.Classes()
                            self.classes.parent = self
                            self.ip_access_group = None
                            self.ipv6_access_group = None
                            self.l2_access_group = None


                        class IpAccessGroup(object):
                            """
                            Reference an IPv4 policy
                            
                            .. attribute:: context_name
                            
                            	context\-name
                            	**type**\:  str
                            
                            	**mandatory**\: True
                            
                            .. attribute:: policy_name
                            
                            	policy\-name
                            	**type**\:  str
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'qos'
                            _revision = '2016-10-20'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.context_name = None
                                self.policy_name = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-qos:ip-access-group'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.context_name is not None:
                                    return True

                                if self.policy_name is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.Policies.Policy.Metering.Policy_.AccessGroup.IpAccessGroup']['meta_info']


                        class Ipv6AccessGroup(object):
                            """
                            Reference an IPv6 policy
                            
                            .. attribute:: context_name
                            
                            	context\-name
                            	**type**\:  str
                            
                            	**mandatory**\: True
                            
                            .. attribute:: policy_name
                            
                            	policy\-name
                            	**type**\:  str
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'qos'
                            _revision = '2016-10-20'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.context_name = None
                                self.policy_name = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-qos:ipv6-access-group'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.context_name is not None:
                                    return True

                                if self.policy_name is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.Policies.Policy.Metering.Policy_.AccessGroup.Ipv6AccessGroup']['meta_info']


                        class L2AccessGroup(object):
                            """
                            Reference a layer\-2 policy
                            
                            .. attribute:: policy_name
                            
                            	policy\-name
                            	**type**\:  str
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'qos'
                            _revision = '2016-10-20'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.policy_name = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-qos:l2-access-group'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.policy_name is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.Policies.Policy.Metering.Policy_.AccessGroup.L2AccessGroup']['meta_info']


                        class Classes(object):
                            """
                            classes
                            
                            .. attribute:: class_
                            
                            	class
                            	**type**\: list of    :py:class:`Class_ <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.Policy_.AccessGroup.Classes.Class_>`
                            
                            

                            """

                            _prefix = 'qos'
                            _revision = '2016-10-20'

                            def __init__(self):
                                self.parent = None
                                self.class_ = YList()
                                self.class_.parent = self
                                self.class_.name = 'class_'


                            class Class_(object):
                                """
                                class
                                
                                .. attribute:: name  <key>
                                
                                	name
                                	**type**\:  str
                                
                                .. attribute:: packet_handling
                                
                                	packet\-handling
                                	**type**\:   :py:class:`PacketHandling <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.Policy_.AccessGroup.Classes.Class_.PacketHandling>`
                                
                                

                                """

                                _prefix = 'qos'
                                _revision = '2016-10-20'

                                def __init__(self):
                                    self.parent = None
                                    self.name = None
                                    self.packet_handling = Qos.Policies.Policy.Metering.Policy_.AccessGroup.Classes.Class_.PacketHandling()
                                    self.packet_handling.parent = self


                                class PacketHandling(object):
                                    """
                                    packet\-handling
                                    
                                    .. attribute:: parent_class
                                    
                                    	parent\-class
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'qos'
                                    _revision = '2016-10-20'

                                    def __init__(self):
                                        self.parent = None
                                        self.parent_class = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/ietf-qos:packet-handling'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.parent_class is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                        return meta._meta_table['Qos.Policies.Policy.Metering.Policy_.AccessGroup.Classes.Class_.PacketHandling']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                    if self.name is None:
                                        raise YPYModelError('Key property name is None')

                                    return self.parent._common_path +'/ietf-qos:class[ietf-qos:name = ' + str(self.name) + ']'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.name is not None:
                                        return True

                                    if self.packet_handling is not None and self.packet_handling._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Policies.Policy.Metering.Policy_.AccessGroup.Classes.Class_']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-qos:classes'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.class_ is not None:
                                    for child_ref in self.class_:
                                        if child_ref._has_data():
                                            return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.Policies.Policy.Metering.Policy_.AccessGroup.Classes']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-qos:access-group'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.classes is not None and self.classes._has_data():
                                return True

                            if self.ip_access_group is not None and self.ip_access_group._has_data():
                                return True

                            if self.ipv6_access_group is not None and self.ipv6_access_group._has_data():
                                return True

                            if self.l2_access_group is not None and self.l2_access_group._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_qos as meta
                            return meta._meta_table['Qos.Policies.Policy.Metering.Policy_.AccessGroup']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-qos:policy'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.access_group is not None and self.access_group._has_data():
                            return True

                        if self.class_group is not None and self.class_group._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_qos as meta
                        return meta._meta_table['Qos.Policies.Policy.Metering.Policy_']['meta_info']


                class Rate(object):
                    """
                    Specify rate limits inline
                    
                    .. attribute:: actions
                    
                    	actions
                    	**type**\:   :py:class:`Actions <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.Rate.Actions>`
                    
                    .. attribute:: bit_rate
                    
                    	bit\-rate
                    	**type**\:  int
                    
                    	**range:** 66..100000000
                    
                    .. attribute:: burst
                    
                    	burst
                    	**type**\:  int
                    
                    	**range:** 1..4250000000
                    
                    	**units**\: byte
                    
                    .. attribute:: counters
                    
                    	counters
                    	**type**\:   :py:class:`Counters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.Rate.Counters>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: excess_burst
                    
                    	excess\-burst
                    	**type**\:  int
                    
                    	**range:** 1..4250000000
                    
                    	**units**\: byte
                    
                    .. attribute:: hierarchical_counters
                    
                    	hierarchical\-counters
                    	**type**\:   :py:class:`HierarchicalCounters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.Rate.HierarchicalCounters>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: informational
                    
                    	informational
                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: time_burst
                    
                    	time\-burst
                    	**type**\:  int
                    
                    	**range:** 1..10000
                    
                    	**units**\: millisecond
                    
                    .. attribute:: time_excess_burst
                    
                    	time\-excess\-burst
                    	**type**\:  int
                    
                    	**range:** 1..10000
                    
                    

                    """

                    _prefix = 'qos'
                    _revision = '2016-10-20'

                    def __init__(self):
                        self.parent = None
                        self.actions = Qos.Policies.Policy.Metering.Rate.Actions()
                        self.actions.parent = self
                        self.bit_rate = None
                        self.burst = None
                        self.counters = None
                        self.excess_burst = None
                        self.hierarchical_counters = None
                        self.informational = None
                        self.time_burst = None
                        self.time_excess_burst = None


                    class Counters(object):
                        """
                        counters
                        
                        .. attribute:: hierarchical_counters
                        
                        	hierarchical\-counters
                        	**type**\:   :py:class:`HierarchicalCounters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.Rate.Counters.HierarchicalCounters>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: _is_presence
                        
                        	Is present if this instance represents presence container else not
                        	**type**\: bool
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'qos'
                        _revision = '2016-10-20'

                        def __init__(self):
                            self.parent = None
                            self._is_presence = True
                            self.hierarchical_counters = None


                        class HierarchicalCounters(object):
                            """
                            hierarchical\-counters
                            
                            .. attribute:: dual_stack
                            
                            	dual\-stack
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'qos'
                            _revision = '2016-10-20'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.dual_stack = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-qos:hierarchical-counters'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.dual_stack is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.Policies.Policy.Metering.Rate.Counters.HierarchicalCounters']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-qos:counters'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self._is_presence:
                                return True
                            if self.hierarchical_counters is not None and self.hierarchical_counters._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_qos as meta
                            return meta._meta_table['Qos.Policies.Policy.Metering.Rate.Counters']['meta_info']


                    class HierarchicalCounters(object):
                        """
                        hierarchical\-counters
                        
                        .. attribute:: dual_stack
                        
                        	dual\-stack
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: _is_presence
                        
                        	Is present if this instance represents presence container else not
                        	**type**\: bool
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'qos'
                        _revision = '2016-10-20'

                        def __init__(self):
                            self.parent = None
                            self._is_presence = True
                            self.dual_stack = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-qos:hierarchical-counters'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self._is_presence:
                                return True
                            if self.dual_stack is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_qos as meta
                            return meta._meta_table['Qos.Policies.Policy.Metering.Rate.HierarchicalCounters']['meta_info']


                    class Actions(object):
                        """
                        actions
                        
                        .. attribute:: conform_handling
                        
                        	conform\-handling
                        	**type**\:   :py:class:`ConformHandling <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.Rate.Actions.ConformHandling>`
                        
                        .. attribute:: exceed_handling
                        
                        	exceed\-handling
                        	**type**\:   :py:class:`ExceedHandling <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.Rate.Actions.ExceedHandling>`
                        
                        .. attribute:: violate_handling
                        
                        	violate\-handling
                        	**type**\:   :py:class:`ViolateHandling <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Metering.Rate.Actions.ViolateHandling>`
                        
                        

                        """

                        _prefix = 'qos'
                        _revision = '2016-10-20'

                        def __init__(self):
                            self.parent = None
                            self.conform_handling = Qos.Policies.Policy.Metering.Rate.Actions.ConformHandling()
                            self.conform_handling.parent = self
                            self.exceed_handling = Qos.Policies.Policy.Metering.Rate.Actions.ExceedHandling()
                            self.exceed_handling.parent = self
                            self.violate_handling = Qos.Policies.Policy.Metering.Rate.Actions.ViolateHandling()
                            self.violate_handling.parent = self


                        class ConformHandling(object):
                            """
                            conform\-handling
                            
                            .. attribute:: af_drop
                            
                            	af\-drop
                            	**type**\:  int
                            
                            	**range:** 1..3
                            
                            .. attribute:: drop_precedence
                            
                            	drop\-precedence
                            	**type**\: one of the below types:
                            
                            	**type**\:  int
                            
                            	**range:** 1..7
                            
                            
                            ----
                            	**type**\:   :py:class:`DropPrecedenceEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.DropPrecedenceEnum>`
                            
                            
                            ----
                            .. attribute:: mark_dscp
                            
                            	mark\-dscp
                            	**type**\: one of the below types:
                            
                            	**type**\:  int
                            
                            	**range:** 0..63
                            
                            
                            ----
                            	**type**\:   :py:class:`DscpCodeAllValuesTypeEnum <ydk.models.ietf.ietf_qos.DscpCodeAllValuesTypeEnum>`
                            
                            
                            ----
                            .. attribute:: mark_precedence
                            
                            	mark\-precedence
                            	**type**\:  int
                            
                            	**range:** 1..3
                            
                            .. attribute:: mark_priority
                            
                            	mark\-priority
                            	**type**\: one of the below types:
                            
                            	**type**\:  int
                            
                            	**range:** 1..7
                            
                            
                            ----
                            	**type**\:   :py:class:`MarkPriorityEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.MarkPriorityEnum>`
                            
                            
                            ----
                            .. attribute:: no_action
                            
                            	no\-action
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            

                            """

                            _prefix = 'qos'
                            _revision = '2016-10-20'

                            def __init__(self):
                                self.parent = None
                                self.af_drop = None
                                self.drop_precedence = None
                                self.mark_dscp = None
                                self.mark_precedence = None
                                self.mark_priority = None
                                self.no_action = None

                            class DropPrecedenceEnum(Enum):
                                """
                                DropPrecedenceEnum

                                drop\-precedence

                                .. data:: ignore = 0

                                	ignore

                                """

                                ignore = 0


                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Policies.Policy.Metering.Rate.Actions.ConformHandling.DropPrecedenceEnum']


                            class MarkPriorityEnum(Enum):
                                """
                                MarkPriorityEnum

                                mark\-priority

                                .. data:: ignore = 0

                                	ignore

                                """

                                ignore = 0


                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Policies.Policy.Metering.Rate.Actions.ConformHandling.MarkPriorityEnum']


                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-qos:conform-handling'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.af_drop is not None:
                                    return True

                                if self.drop_precedence is not None:
                                    return True

                                if self.mark_dscp is not None:
                                    return True

                                if self.mark_precedence is not None:
                                    return True

                                if self.mark_priority is not None:
                                    return True

                                if self.no_action is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.Policies.Policy.Metering.Rate.Actions.ConformHandling']['meta_info']


                        class ExceedHandling(object):
                            """
                            exceed\-handling
                            
                            .. attribute:: af_drop
                            
                            	af\-drop
                            	**type**\:  int
                            
                            	**range:** 1..3
                            
                            .. attribute:: drop_packet
                            
                            	drop\-packet
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: drop_precedence
                            
                            	drop\-precedence
                            	**type**\: one of the below types:
                            
                            	**type**\:  int
                            
                            	**range:** 1..7
                            
                            
                            ----
                            	**type**\:   :py:class:`DropPrecedenceEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.DropPrecedenceEnum>`
                            
                            
                            ----
                            .. attribute:: mark_dscp
                            
                            	mark\-dscp
                            	**type**\: one of the below types:
                            
                            	**type**\:  int
                            
                            	**range:** 0..63
                            
                            
                            ----
                            	**type**\:   :py:class:`DscpCodeAllValuesTypeEnum <ydk.models.ietf.ietf_qos.DscpCodeAllValuesTypeEnum>`
                            
                            
                            ----
                            .. attribute:: mark_precedence
                            
                            	mark\-precedence
                            	**type**\:  int
                            
                            	**range:** 1..3
                            
                            .. attribute:: mark_priority
                            
                            	mark\-priority
                            	**type**\: one of the below types:
                            
                            	**type**\:  int
                            
                            	**range:** 1..7
                            
                            
                            ----
                            	**type**\:   :py:class:`MarkPriorityEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.MarkPriorityEnum>`
                            
                            
                            ----
                            .. attribute:: no_action
                            
                            	no\-action
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            

                            """

                            _prefix = 'qos'
                            _revision = '2016-10-20'

                            def __init__(self):
                                self.parent = None
                                self.af_drop = None
                                self.drop_packet = None
                                self.drop_precedence = None
                                self.mark_dscp = None
                                self.mark_precedence = None
                                self.mark_priority = None
                                self.no_action = None

                            class DropPrecedenceEnum(Enum):
                                """
                                DropPrecedenceEnum

                                drop\-precedence

                                .. data:: ignore = 0

                                	ignore

                                """

                                ignore = 0


                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Policies.Policy.Metering.Rate.Actions.ExceedHandling.DropPrecedenceEnum']


                            class MarkPriorityEnum(Enum):
                                """
                                MarkPriorityEnum

                                mark\-priority

                                .. data:: ignore = 0

                                	ignore

                                """

                                ignore = 0


                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Policies.Policy.Metering.Rate.Actions.ExceedHandling.MarkPriorityEnum']


                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-qos:exceed-handling'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.af_drop is not None:
                                    return True

                                if self.drop_packet is not None:
                                    return True

                                if self.drop_precedence is not None:
                                    return True

                                if self.mark_dscp is not None:
                                    return True

                                if self.mark_precedence is not None:
                                    return True

                                if self.mark_priority is not None:
                                    return True

                                if self.no_action is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.Policies.Policy.Metering.Rate.Actions.ExceedHandling']['meta_info']


                        class ViolateHandling(object):
                            """
                            violate\-handling
                            
                            .. attribute:: af_drop
                            
                            	af\-drop
                            	**type**\:  int
                            
                            	**range:** 1..3
                            
                            .. attribute:: drop_packet
                            
                            	drop\-packet
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: drop_precedence
                            
                            	drop\-precedence
                            	**type**\: one of the below types:
                            
                            	**type**\:  int
                            
                            	**range:** 1..7
                            
                            
                            ----
                            	**type**\:   :py:class:`DropPrecedenceEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.DropPrecedenceEnum>`
                            
                            
                            ----
                            .. attribute:: mark_dscp
                            
                            	mark\-dscp
                            	**type**\: one of the below types:
                            
                            	**type**\:  int
                            
                            	**range:** 0..63
                            
                            
                            ----
                            	**type**\:   :py:class:`DscpCodeAllValuesTypeEnum <ydk.models.ietf.ietf_qos.DscpCodeAllValuesTypeEnum>`
                            
                            
                            ----
                            .. attribute:: mark_precedence
                            
                            	mark\-precedence
                            	**type**\:  int
                            
                            	**range:** 1..3
                            
                            .. attribute:: mark_priority
                            
                            	mark\-priority
                            	**type**\: one of the below types:
                            
                            	**type**\:  int
                            
                            	**range:** 1..7
                            
                            
                            ----
                            	**type**\:   :py:class:`MarkPriorityEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.MarkPriorityEnum>`
                            
                            
                            ----
                            .. attribute:: no_action
                            
                            	no\-action
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            

                            """

                            _prefix = 'qos'
                            _revision = '2016-10-20'

                            def __init__(self):
                                self.parent = None
                                self.af_drop = None
                                self.drop_packet = None
                                self.drop_precedence = None
                                self.mark_dscp = None
                                self.mark_precedence = None
                                self.mark_priority = None
                                self.no_action = None

                            class DropPrecedenceEnum(Enum):
                                """
                                DropPrecedenceEnum

                                drop\-precedence

                                .. data:: ignore = 0

                                	ignore

                                """

                                ignore = 0


                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Policies.Policy.Metering.Rate.Actions.ViolateHandling.DropPrecedenceEnum']


                            class MarkPriorityEnum(Enum):
                                """
                                MarkPriorityEnum

                                mark\-priority

                                .. data:: ignore = 0

                                	ignore

                                """

                                ignore = 0


                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Policies.Policy.Metering.Rate.Actions.ViolateHandling.MarkPriorityEnum']


                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-qos:violate-handling'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.af_drop is not None:
                                    return True

                                if self.drop_packet is not None:
                                    return True

                                if self.drop_precedence is not None:
                                    return True

                                if self.mark_dscp is not None:
                                    return True

                                if self.mark_precedence is not None:
                                    return True

                                if self.mark_priority is not None:
                                    return True

                                if self.no_action is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.Policies.Policy.Metering.Rate.Actions.ViolateHandling']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-qos:actions'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.conform_handling is not None and self.conform_handling._has_data():
                                return True

                            if self.exceed_handling is not None and self.exceed_handling._has_data():
                                return True

                            if self.violate_handling is not None and self.violate_handling._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_qos as meta
                            return meta._meta_table['Qos.Policies.Policy.Metering.Rate.Actions']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-qos:rate'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.actions is not None and self.actions._has_data():
                            return True

                        if self.bit_rate is not None:
                            return True

                        if self.burst is not None:
                            return True

                        if self.counters is not None and self.counters._has_data():
                            return True

                        if self.excess_burst is not None:
                            return True

                        if self.hierarchical_counters is not None and self.hierarchical_counters._has_data():
                            return True

                        if self.informational is not None:
                            return True

                        if self.time_burst is not None:
                            return True

                        if self.time_excess_burst is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_qos as meta
                        return meta._meta_table['Qos.Policies.Policy.Metering.Rate']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/ietf-qos:metering'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self._is_presence:
                        return True
                    if self.af_drop is not None:
                        return True

                    if self.card_family_1 is not None and self.card_family_1._has_data():
                        return True

                    if self.card_family_2 is not None and self.card_family_2._has_data():
                        return True

                    if self.card_family_3 is not None and self.card_family_3._has_data():
                        return True

                    if self.drop_precedence is not None:
                        return True

                    if self.mark_dscp is not None:
                        return True

                    if self.mark_precedence is not None:
                        return True

                    if self.mark_priority is not None:
                        return True

                    if self.policy is not None and self.policy._has_data():
                        return True

                    if self.radius_guided is not None:
                        return True

                    if self.rate is not None and self.rate._has_data():
                        return True

                    if self.rate_calculation_exclude_layer_2_overhead is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_qos as meta
                    return meta._meta_table['Qos.Policies.Policy.Metering']['meta_info']


            class Policing(object):
                """
                policing policy
                
                .. attribute:: af_drop
                
                	af\-drop
                	**type**\:  int
                
                	**range:** 1..3
                
                .. attribute:: card_family_1
                
                	card\-family\-1
                	**type**\:   :py:class:`CardFamily1 <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily1>`
                
                .. attribute:: card_family_2
                
                	card\-family\-2
                	**type**\:   :py:class:`CardFamily2 <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily2>`
                
                .. attribute:: card_family_3
                
                	card\-family\-3
                	**type**\:   :py:class:`CardFamily3 <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily3>`
                
                .. attribute:: drop_precedence
                
                	drop\-precedence
                	**type**\: one of the below types:
                
                	**type**\:  int
                
                	**range:** 1..7
                
                
                ----
                	**type**\:   :py:class:`DropPrecedenceEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.DropPrecedenceEnum>`
                
                
                ----
                .. attribute:: mark_dscp
                
                	mark\-dscp
                	**type**\: one of the below types:
                
                	**type**\:  int
                
                	**range:** 0..63
                
                
                ----
                	**type**\:   :py:class:`DscpCodeAllValuesTypeEnum <ydk.models.ietf.ietf_qos.DscpCodeAllValuesTypeEnum>`
                
                
                ----
                .. attribute:: mark_precedence
                
                	mark\-precedence
                	**type**\:  int
                
                	**range:** 1..3
                
                .. attribute:: mark_priority
                
                	mark\-priority
                	**type**\: one of the below types:
                
                	**type**\:  int
                
                	**range:** 1..7
                
                
                ----
                	**type**\:   :py:class:`MarkPriorityEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.MarkPriorityEnum>`
                
                
                ----
                .. attribute:: policy
                
                	policy
                	**type**\:   :py:class:`Policy_ <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Policy_>`
                
                .. attribute:: radius_guided
                
                	radius\-guided
                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                
                .. attribute:: rate
                
                	Specify rate limits inline
                	**type**\:   :py:class:`Rate <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate>`
                
                .. attribute:: rate_calculation_exclude_layer_2_overhead
                
                	Specify that rate calculation excludes the size ofLayer 2 overhead for the layer 3 circuit on which a policy is applied
                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                

                This class is a :ref:`presence class<presence-class>`

                """

                _prefix = 'qos'
                _revision = '2016-10-20'

                def __init__(self):
                    self.parent = None
                    self._is_presence = True
                    self.af_drop = None
                    self.card_family_1 = Qos.Policies.Policy.Policing.CardFamily1()
                    self.card_family_1.parent = self
                    self.card_family_2 = Qos.Policies.Policy.Policing.CardFamily2()
                    self.card_family_2.parent = self
                    self.card_family_3 = Qos.Policies.Policy.Policing.CardFamily3()
                    self.card_family_3.parent = self
                    self.drop_precedence = None
                    self.mark_dscp = None
                    self.mark_precedence = None
                    self.mark_priority = None
                    self.policy = Qos.Policies.Policy.Policing.Policy_()
                    self.policy.parent = self
                    self.radius_guided = None
                    self.rate = Qos.Policies.Policy.Policing.Rate()
                    self.rate.parent = self
                    self.rate_calculation_exclude_layer_2_overhead = None

                class DropPrecedenceEnum(Enum):
                    """
                    DropPrecedenceEnum

                    drop\-precedence

                    .. data:: ignore = 0

                    	ignore

                    """

                    ignore = 0


                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_qos as meta
                        return meta._meta_table['Qos.Policies.Policy.Policing.DropPrecedenceEnum']


                class MarkPriorityEnum(Enum):
                    """
                    MarkPriorityEnum

                    mark\-priority

                    .. data:: ignore = 0

                    	ignore

                    """

                    ignore = 0


                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_qos as meta
                        return meta._meta_table['Qos.Policies.Policy.Policing.MarkPriorityEnum']



                class CardFamily1(object):
                    """
                    card\-family\-1
                    
                    .. attribute:: af_drop
                    
                    	af\-drop
                    	**type**\:  int
                    
                    	**range:** 1..3
                    
                    .. attribute:: drop_precedence
                    
                    	drop\-precedence
                    	**type**\: one of the below types:
                    
                    	**type**\:  int
                    
                    	**range:** 1..7
                    
                    
                    ----
                    	**type**\:   :py:class:`DropPrecedenceEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.DropPrecedenceEnum>`
                    
                    
                    ----
                    .. attribute:: mark_dscp
                    
                    	mark\-dscp
                    	**type**\: one of the below types:
                    
                    	**type**\:  int
                    
                    	**range:** 0..63
                    
                    
                    ----
                    	**type**\:   :py:class:`DscpCodeAllValuesTypeEnum <ydk.models.ietf.ietf_qos.DscpCodeAllValuesTypeEnum>`
                    
                    
                    ----
                    .. attribute:: mark_precedence
                    
                    	mark\-precedence
                    	**type**\:  int
                    
                    	**range:** 1..3
                    
                    .. attribute:: mark_priority
                    
                    	mark\-priority
                    	**type**\: one of the below types:
                    
                    	**type**\:  int
                    
                    	**range:** 1..7
                    
                    
                    ----
                    	**type**\:   :py:class:`MarkPriorityEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.MarkPriorityEnum>`
                    
                    
                    ----
                    .. attribute:: policy
                    
                    	policy
                    	**type**\:   :py:class:`Policy_ <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily1.Policy_>`
                    
                    .. attribute:: rate
                    
                    	Specify rate limits inline
                    	**type**\:   :py:class:`Rate <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily1.Rate>`
                    
                    .. attribute:: rate_calculation_exclude_layer_2_overhead
                    
                    	Specify that rate calculation excludes the size ofLayer 2 overhead for the layer 3 circuit on which a policy is applied
                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                    
                    

                    """

                    _prefix = 'qos'
                    _revision = '2016-10-20'

                    def __init__(self):
                        self.parent = None
                        self.af_drop = None
                        self.drop_precedence = None
                        self.mark_dscp = None
                        self.mark_precedence = None
                        self.mark_priority = None
                        self.policy = Qos.Policies.Policy.Policing.CardFamily1.Policy_()
                        self.policy.parent = self
                        self.rate = Qos.Policies.Policy.Policing.CardFamily1.Rate()
                        self.rate.parent = self
                        self.rate_calculation_exclude_layer_2_overhead = None

                    class DropPrecedenceEnum(Enum):
                        """
                        DropPrecedenceEnum

                        drop\-precedence

                        .. data:: ignore = 0

                        	ignore

                        """

                        ignore = 0


                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_qos as meta
                            return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily1.DropPrecedenceEnum']


                    class MarkPriorityEnum(Enum):
                        """
                        MarkPriorityEnum

                        mark\-priority

                        .. data:: ignore = 0

                        	ignore

                        """

                        ignore = 0


                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_qos as meta
                            return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily1.MarkPriorityEnum']



                    class Policy_(object):
                        """
                        policy
                        
                        .. attribute:: access_group
                        
                        	access\-group
                        	**type**\:   :py:class:`AccessGroup <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily1.Policy_.AccessGroup>`
                        
                        .. attribute:: class_group
                        
                        	Reference a previously defined class
                        	**type**\:   :py:class:`ClassGroup <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily1.Policy_.ClassGroup>`
                        
                        

                        """

                        _prefix = 'qos'
                        _revision = '2016-10-20'

                        def __init__(self):
                            self.parent = None
                            self.access_group = Qos.Policies.Policy.Policing.CardFamily1.Policy_.AccessGroup()
                            self.access_group.parent = self
                            self.class_group = Qos.Policies.Policy.Policing.CardFamily1.Policy_.ClassGroup()
                            self.class_group.parent = self


                        class ClassGroup(object):
                            """
                            Reference a previously defined class
                            
                            .. attribute:: class_group_reference
                            
                            	class\-group\-reference
                            	**type**\:  str
                            
                            	**refers to**\:  :py:class:`name <ydk.models.ietf.ietf_qos.Qos.ClassDefinitions.ClassDefinition>`
                            
                            .. attribute:: classes
                            
                            	classes
                            	**type**\:   :py:class:`Classes <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily1.Policy_.ClassGroup.Classes>`
                            
                            

                            """

                            _prefix = 'qos'
                            _revision = '2016-10-20'

                            def __init__(self):
                                self.parent = None
                                self.class_group_reference = None
                                self.classes = Qos.Policies.Policy.Policing.CardFamily1.Policy_.ClassGroup.Classes()
                                self.classes.parent = self


                            class Classes(object):
                                """
                                classes
                                
                                .. attribute:: class_
                                
                                	class
                                	**type**\: list of    :py:class:`Class_ <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily1.Policy_.ClassGroup.Classes.Class_>`
                                
                                

                                """

                                _prefix = 'qos'
                                _revision = '2016-10-20'

                                def __init__(self):
                                    self.parent = None
                                    self.class_ = YList()
                                    self.class_.parent = self
                                    self.class_.name = 'class_'


                                class Class_(object):
                                    """
                                    class
                                    
                                    .. attribute:: name  <key>
                                    
                                    	name
                                    	**type**\:  str
                                    
                                    	**length:** 1..39
                                    
                                    	**refers to**\:  :py:class:`class_ <ydk.models.ietf.ietf_qos.Qos.ClassDefinitions.ClassDefinition.Qos_>`
                                    
                                    .. attribute:: packet_handling
                                    
                                    	packet\-handling
                                    	**type**\:   :py:class:`PacketHandling <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling>`
                                    
                                    

                                    """

                                    _prefix = 'qos'
                                    _revision = '2016-10-20'

                                    def __init__(self):
                                        self.parent = None
                                        self.name = None
                                        self.packet_handling = Qos.Policies.Policy.Policing.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling()
                                        self.packet_handling.parent = self


                                    class PacketHandling(object):
                                        """
                                        packet\-handling
                                        
                                        .. attribute:: af_drop
                                        
                                        	af\-drop
                                        	**type**\:  int
                                        
                                        	**range:** 1..3
                                        
                                        .. attribute:: bit_rate
                                        
                                        	bit\-rate
                                        	**type**\:   :py:class:`BitRate <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate>`
                                        
                                        .. attribute:: drop_precedence
                                        
                                        	drop\-precedence
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  int
                                        
                                        	**range:** 1..7
                                        
                                        
                                        ----
                                        	**type**\:   :py:class:`DropPrecedenceEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.DropPrecedenceEnum>`
                                        
                                        
                                        ----
                                        .. attribute:: mark_dscp
                                        
                                        	mark\-dscp
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  int
                                        
                                        	**range:** 0..63
                                        
                                        
                                        ----
                                        	**type**\:   :py:class:`DscpCodeAllValuesTypeEnum <ydk.models.ietf.ietf_qos.DscpCodeAllValuesTypeEnum>`
                                        
                                        
                                        ----
                                        .. attribute:: mark_precedence
                                        
                                        	mark\-precedence
                                        	**type**\:  int
                                        
                                        	**range:** 1..3
                                        
                                        .. attribute:: mark_priority
                                        
                                        	mark\-priority
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  int
                                        
                                        	**range:** 1..7
                                        
                                        
                                        ----
                                        	**type**\:   :py:class:`MarkPriorityEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Policy_.ClassGroup.Classes.Class_.PacketHandling.MarkPriorityEnum>`
                                        
                                        
                                        ----
                                        .. attribute:: parent_class
                                        
                                        	parent\-class
                                        	**type**\:  str
                                        
                                        .. attribute:: percentage
                                        
                                        	percentage
                                        	**type**\:   :py:class:`Percentage <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage>`
                                        
                                        

                                        """

                                        _prefix = 'qos'
                                        _revision = '2016-10-20'

                                        def __init__(self):
                                            self.parent = None
                                            self.af_drop = None
                                            self.bit_rate = Qos.Policies.Policy.Policing.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate()
                                            self.bit_rate.parent = self
                                            self.drop_precedence = None
                                            self.mark_dscp = None
                                            self.mark_precedence = None
                                            self.mark_priority = None
                                            self.parent_class = None
                                            self.percentage = Qos.Policies.Policy.Policing.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage()
                                            self.percentage.parent = self

                                        class DropPrecedenceEnum(Enum):
                                            """
                                            DropPrecedenceEnum

                                            drop\-precedence

                                            .. data:: ignore = 0

                                            	ignore

                                            """

                                            ignore = 0


                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.ietf._meta import _ietf_qos as meta
                                                return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling.DropPrecedenceEnum']


                                        class MarkPriorityEnum(Enum):
                                            """
                                            MarkPriorityEnum

                                            mark\-priority

                                            .. data:: ignore = 0

                                            	ignore

                                            """

                                            ignore = 0


                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.ietf._meta import _ietf_qos as meta
                                                return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling.MarkPriorityEnum']



                                        class BitRate(object):
                                            """
                                            bit\-rate
                                            
                                            .. attribute:: actions
                                            
                                            	actions
                                            	**type**\:   :py:class:`Actions <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions>`
                                            
                                            .. attribute:: bit_rate
                                            
                                            	bit\-rate
                                            	**type**\:  int
                                            
                                            	**range:** 66..100000000
                                            
                                            .. attribute:: burst
                                            
                                            	burst
                                            	**type**\:  int
                                            
                                            	**range:** 1..4250000000
                                            
                                            	**units**\: byte
                                            
                                            .. attribute:: counters
                                            
                                            	counters
                                            	**type**\:   :py:class:`Counters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Counters>`
                                            
                                            	**presence node**\: True
                                            
                                            .. attribute:: excess_burst
                                            
                                            	excess\-burst
                                            	**type**\:  int
                                            
                                            	**range:** 1..4250000000
                                            
                                            	**units**\: byte
                                            
                                            .. attribute:: hierarchical_counters
                                            
                                            	hierarchical\-counters
                                            	**type**\:   :py:class:`HierarchicalCounters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.HierarchicalCounters>`
                                            
                                            	**presence node**\: True
                                            
                                            .. attribute:: time_burst
                                            
                                            	time\-burst
                                            	**type**\:  int
                                            
                                            	**range:** 1..10000
                                            
                                            	**units**\: millisecond
                                            
                                            .. attribute:: time_excess_burst
                                            
                                            	time\-excess\-burst
                                            	**type**\:  int
                                            
                                            	**range:** 1..10000
                                            
                                            

                                            """

                                            _prefix = 'qos'
                                            _revision = '2016-10-20'

                                            def __init__(self):
                                                self.parent = None
                                                self.actions = Qos.Policies.Policy.Policing.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions()
                                                self.actions.parent = self
                                                self.bit_rate = None
                                                self.burst = None
                                                self.counters = None
                                                self.excess_burst = None
                                                self.hierarchical_counters = None
                                                self.time_burst = None
                                                self.time_excess_burst = None


                                            class Counters(object):
                                                """
                                                counters
                                                
                                                .. attribute:: hierarchical_counters
                                                
                                                	hierarchical\-counters
                                                	**type**\:   :py:class:`HierarchicalCounters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Counters.HierarchicalCounters>`
                                                
                                                	**presence node**\: True
                                                
                                                .. attribute:: _is_presence
                                                
                                                	Is present if this instance represents presence container else not
                                                	**type**\: bool
                                                
                                                

                                                This class is a :ref:`presence class<presence-class>`

                                                """

                                                _prefix = 'qos'
                                                _revision = '2016-10-20'

                                                def __init__(self):
                                                    self.parent = None
                                                    self._is_presence = True
                                                    self.hierarchical_counters = None


                                                class HierarchicalCounters(object):
                                                    """
                                                    hierarchical\-counters
                                                    
                                                    .. attribute:: dual_stack
                                                    
                                                    	dual\-stack
                                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                                    
                                                    .. attribute:: _is_presence
                                                    
                                                    	Is present if this instance represents presence container else not
                                                    	**type**\: bool
                                                    
                                                    

                                                    This class is a :ref:`presence class<presence-class>`

                                                    """

                                                    _prefix = 'qos'
                                                    _revision = '2016-10-20'

                                                    def __init__(self):
                                                        self.parent = None
                                                        self._is_presence = True
                                                        self.dual_stack = None

                                                    @property
                                                    def _common_path(self):
                                                        if self.parent is None:
                                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                                        return self.parent._common_path +'/ietf-qos:hierarchical-counters'

                                                    def is_config(self):
                                                        ''' Returns True if this instance represents config data else returns False '''
                                                        return True

                                                    def _has_data(self):
                                                        if not self.is_config():
                                                            return False
                                                        if self._is_presence:
                                                            return True
                                                        if self.dual_stack is not None:
                                                            return True

                                                        return False

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                                        return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Counters.HierarchicalCounters']['meta_info']

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/ietf-qos:counters'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self._is_presence:
                                                        return True
                                                    if self.hierarchical_counters is not None and self.hierarchical_counters._has_data():
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                                    return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Counters']['meta_info']


                                            class HierarchicalCounters(object):
                                                """
                                                hierarchical\-counters
                                                
                                                .. attribute:: dual_stack
                                                
                                                	dual\-stack
                                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                                
                                                .. attribute:: _is_presence
                                                
                                                	Is present if this instance represents presence container else not
                                                	**type**\: bool
                                                
                                                

                                                This class is a :ref:`presence class<presence-class>`

                                                """

                                                _prefix = 'qos'
                                                _revision = '2016-10-20'

                                                def __init__(self):
                                                    self.parent = None
                                                    self._is_presence = True
                                                    self.dual_stack = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/ietf-qos:hierarchical-counters'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self._is_presence:
                                                        return True
                                                    if self.dual_stack is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                                    return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.HierarchicalCounters']['meta_info']


                                            class Actions(object):
                                                """
                                                actions
                                                
                                                .. attribute:: conform_handling
                                                
                                                	conform\-handling
                                                	**type**\:   :py:class:`ConformHandling <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ConformHandling>`
                                                
                                                .. attribute:: exceed_handling
                                                
                                                	exceed\-handling
                                                	**type**\:   :py:class:`ExceedHandling <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ExceedHandling>`
                                                
                                                

                                                """

                                                _prefix = 'qos'
                                                _revision = '2016-10-20'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.conform_handling = Qos.Policies.Policy.Policing.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ConformHandling()
                                                    self.conform_handling.parent = self
                                                    self.exceed_handling = Qos.Policies.Policy.Policing.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ExceedHandling()
                                                    self.exceed_handling.parent = self


                                                class ConformHandling(object):
                                                    """
                                                    conform\-handling
                                                    
                                                    .. attribute:: af_drop
                                                    
                                                    	af\-drop
                                                    	**type**\:  int
                                                    
                                                    	**range:** 1..3
                                                    
                                                    .. attribute:: drop_precedence
                                                    
                                                    	drop\-precedence
                                                    	**type**\: one of the below types:
                                                    
                                                    	**type**\:  int
                                                    
                                                    	**range:** 1..7
                                                    
                                                    
                                                    ----
                                                    	**type**\:   :py:class:`DropPrecedenceEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.DropPrecedenceEnum>`
                                                    
                                                    
                                                    ----
                                                    .. attribute:: mark_dscp
                                                    
                                                    	mark\-dscp
                                                    	**type**\: one of the below types:
                                                    
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..63
                                                    
                                                    
                                                    ----
                                                    	**type**\:   :py:class:`DscpCodeAllValuesTypeEnum <ydk.models.ietf.ietf_qos.DscpCodeAllValuesTypeEnum>`
                                                    
                                                    
                                                    ----
                                                    .. attribute:: mark_precedence
                                                    
                                                    	mark\-precedence
                                                    	**type**\:  int
                                                    
                                                    	**range:** 1..3
                                                    
                                                    .. attribute:: mark_priority
                                                    
                                                    	mark\-priority
                                                    	**type**\: one of the below types:
                                                    
                                                    	**type**\:  int
                                                    
                                                    	**range:** 1..7
                                                    
                                                    
                                                    ----
                                                    	**type**\:   :py:class:`MarkPriorityEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.MarkPriorityEnum>`
                                                    
                                                    
                                                    ----
                                                    .. attribute:: no_action
                                                    
                                                    	no\-action
                                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                                    
                                                    

                                                    """

                                                    _prefix = 'qos'
                                                    _revision = '2016-10-20'

                                                    def __init__(self):
                                                        self.parent = None
                                                        self.af_drop = None
                                                        self.drop_precedence = None
                                                        self.mark_dscp = None
                                                        self.mark_precedence = None
                                                        self.mark_priority = None
                                                        self.no_action = None

                                                    class DropPrecedenceEnum(Enum):
                                                        """
                                                        DropPrecedenceEnum

                                                        drop\-precedence

                                                        .. data:: ignore = 0

                                                        	ignore

                                                        """

                                                        ignore = 0


                                                        @staticmethod
                                                        def _meta_info():
                                                            from ydk.models.ietf._meta import _ietf_qos as meta
                                                            return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ConformHandling.DropPrecedenceEnum']


                                                    class MarkPriorityEnum(Enum):
                                                        """
                                                        MarkPriorityEnum

                                                        mark\-priority

                                                        .. data:: ignore = 0

                                                        	ignore

                                                        """

                                                        ignore = 0


                                                        @staticmethod
                                                        def _meta_info():
                                                            from ydk.models.ietf._meta import _ietf_qos as meta
                                                            return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ConformHandling.MarkPriorityEnum']


                                                    @property
                                                    def _common_path(self):
                                                        if self.parent is None:
                                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                                        return self.parent._common_path +'/ietf-qos:conform-handling'

                                                    def is_config(self):
                                                        ''' Returns True if this instance represents config data else returns False '''
                                                        return True

                                                    def _has_data(self):
                                                        if not self.is_config():
                                                            return False
                                                        if self.af_drop is not None:
                                                            return True

                                                        if self.drop_precedence is not None:
                                                            return True

                                                        if self.mark_dscp is not None:
                                                            return True

                                                        if self.mark_precedence is not None:
                                                            return True

                                                        if self.mark_priority is not None:
                                                            return True

                                                        if self.no_action is not None:
                                                            return True

                                                        return False

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                                        return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ConformHandling']['meta_info']


                                                class ExceedHandling(object):
                                                    """
                                                    exceed\-handling
                                                    
                                                    .. attribute:: af_drop
                                                    
                                                    	af\-drop
                                                    	**type**\:  int
                                                    
                                                    	**range:** 1..3
                                                    
                                                    .. attribute:: drop_packet
                                                    
                                                    	drop\-packet
                                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                                    
                                                    .. attribute:: drop_precedence
                                                    
                                                    	drop\-precedence
                                                    	**type**\: one of the below types:
                                                    
                                                    	**type**\:  int
                                                    
                                                    	**range:** 1..7
                                                    
                                                    
                                                    ----
                                                    	**type**\:   :py:class:`DropPrecedenceEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.DropPrecedenceEnum>`
                                                    
                                                    
                                                    ----
                                                    .. attribute:: mark_dscp
                                                    
                                                    	mark\-dscp
                                                    	**type**\: one of the below types:
                                                    
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..63
                                                    
                                                    
                                                    ----
                                                    	**type**\:   :py:class:`DscpCodeAllValuesTypeEnum <ydk.models.ietf.ietf_qos.DscpCodeAllValuesTypeEnum>`
                                                    
                                                    
                                                    ----
                                                    .. attribute:: mark_precedence
                                                    
                                                    	mark\-precedence
                                                    	**type**\:  int
                                                    
                                                    	**range:** 1..3
                                                    
                                                    .. attribute:: mark_priority
                                                    
                                                    	mark\-priority
                                                    	**type**\: one of the below types:
                                                    
                                                    	**type**\:  int
                                                    
                                                    	**range:** 1..7
                                                    
                                                    
                                                    ----
                                                    	**type**\:   :py:class:`MarkPriorityEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.MarkPriorityEnum>`
                                                    
                                                    
                                                    ----
                                                    .. attribute:: no_action
                                                    
                                                    	no\-action
                                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                                    
                                                    

                                                    """

                                                    _prefix = 'qos'
                                                    _revision = '2016-10-20'

                                                    def __init__(self):
                                                        self.parent = None
                                                        self.af_drop = None
                                                        self.drop_packet = None
                                                        self.drop_precedence = None
                                                        self.mark_dscp = None
                                                        self.mark_precedence = None
                                                        self.mark_priority = None
                                                        self.no_action = None

                                                    class DropPrecedenceEnum(Enum):
                                                        """
                                                        DropPrecedenceEnum

                                                        drop\-precedence

                                                        .. data:: ignore = 0

                                                        	ignore

                                                        """

                                                        ignore = 0


                                                        @staticmethod
                                                        def _meta_info():
                                                            from ydk.models.ietf._meta import _ietf_qos as meta
                                                            return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ExceedHandling.DropPrecedenceEnum']


                                                    class MarkPriorityEnum(Enum):
                                                        """
                                                        MarkPriorityEnum

                                                        mark\-priority

                                                        .. data:: ignore = 0

                                                        	ignore

                                                        """

                                                        ignore = 0


                                                        @staticmethod
                                                        def _meta_info():
                                                            from ydk.models.ietf._meta import _ietf_qos as meta
                                                            return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ExceedHandling.MarkPriorityEnum']


                                                    @property
                                                    def _common_path(self):
                                                        if self.parent is None:
                                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                                        return self.parent._common_path +'/ietf-qos:exceed-handling'

                                                    def is_config(self):
                                                        ''' Returns True if this instance represents config data else returns False '''
                                                        return True

                                                    def _has_data(self):
                                                        if not self.is_config():
                                                            return False
                                                        if self.af_drop is not None:
                                                            return True

                                                        if self.drop_packet is not None:
                                                            return True

                                                        if self.drop_precedence is not None:
                                                            return True

                                                        if self.mark_dscp is not None:
                                                            return True

                                                        if self.mark_precedence is not None:
                                                            return True

                                                        if self.mark_priority is not None:
                                                            return True

                                                        if self.no_action is not None:
                                                            return True

                                                        return False

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                                        return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ExceedHandling']['meta_info']

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/ietf-qos:actions'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.conform_handling is not None and self.conform_handling._has_data():
                                                        return True

                                                    if self.exceed_handling is not None and self.exceed_handling._has_data():
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                                    return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/ietf-qos:bit-rate'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.actions is not None and self.actions._has_data():
                                                    return True

                                                if self.bit_rate is not None:
                                                    return True

                                                if self.burst is not None:
                                                    return True

                                                if self.counters is not None and self.counters._has_data():
                                                    return True

                                                if self.excess_burst is not None:
                                                    return True

                                                if self.hierarchical_counters is not None and self.hierarchical_counters._has_data():
                                                    return True

                                                if self.time_burst is not None:
                                                    return True

                                                if self.time_excess_burst is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.ietf._meta import _ietf_qos as meta
                                                return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate']['meta_info']


                                        class Percentage(object):
                                            """
                                            percentage
                                            
                                            .. attribute:: counters
                                            
                                            	counters
                                            	**type**\:   :py:class:`Counters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage.Counters>`
                                            
                                            	**presence node**\: True
                                            
                                            .. attribute:: hierarchical_counters
                                            
                                            	hierarchical\-counters
                                            	**type**\:   :py:class:`HierarchicalCounters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage.HierarchicalCounters>`
                                            
                                            	**presence node**\: True
                                            
                                            .. attribute:: percentage
                                            
                                            	percentage
                                            	**type**\:  int
                                            
                                            	**range:** 1..100
                                            
                                            	**units**\: percent
                                            
                                            

                                            """

                                            _prefix = 'qos'
                                            _revision = '2016-10-20'

                                            def __init__(self):
                                                self.parent = None
                                                self.counters = None
                                                self.hierarchical_counters = None
                                                self.percentage = None


                                            class Counters(object):
                                                """
                                                counters
                                                
                                                .. attribute:: hierarchical_counters
                                                
                                                	hierarchical\-counters
                                                	**type**\:   :py:class:`HierarchicalCounters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage.Counters.HierarchicalCounters>`
                                                
                                                	**presence node**\: True
                                                
                                                .. attribute:: _is_presence
                                                
                                                	Is present if this instance represents presence container else not
                                                	**type**\: bool
                                                
                                                

                                                This class is a :ref:`presence class<presence-class>`

                                                """

                                                _prefix = 'qos'
                                                _revision = '2016-10-20'

                                                def __init__(self):
                                                    self.parent = None
                                                    self._is_presence = True
                                                    self.hierarchical_counters = None


                                                class HierarchicalCounters(object):
                                                    """
                                                    hierarchical\-counters
                                                    
                                                    .. attribute:: dual_stack
                                                    
                                                    	dual\-stack
                                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                                    
                                                    .. attribute:: _is_presence
                                                    
                                                    	Is present if this instance represents presence container else not
                                                    	**type**\: bool
                                                    
                                                    

                                                    This class is a :ref:`presence class<presence-class>`

                                                    """

                                                    _prefix = 'qos'
                                                    _revision = '2016-10-20'

                                                    def __init__(self):
                                                        self.parent = None
                                                        self._is_presence = True
                                                        self.dual_stack = None

                                                    @property
                                                    def _common_path(self):
                                                        if self.parent is None:
                                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                                        return self.parent._common_path +'/ietf-qos:hierarchical-counters'

                                                    def is_config(self):
                                                        ''' Returns True if this instance represents config data else returns False '''
                                                        return True

                                                    def _has_data(self):
                                                        if not self.is_config():
                                                            return False
                                                        if self._is_presence:
                                                            return True
                                                        if self.dual_stack is not None:
                                                            return True

                                                        return False

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                                        return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage.Counters.HierarchicalCounters']['meta_info']

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/ietf-qos:counters'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self._is_presence:
                                                        return True
                                                    if self.hierarchical_counters is not None and self.hierarchical_counters._has_data():
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                                    return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage.Counters']['meta_info']


                                            class HierarchicalCounters(object):
                                                """
                                                hierarchical\-counters
                                                
                                                .. attribute:: dual_stack
                                                
                                                	dual\-stack
                                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                                
                                                .. attribute:: _is_presence
                                                
                                                	Is present if this instance represents presence container else not
                                                	**type**\: bool
                                                
                                                

                                                This class is a :ref:`presence class<presence-class>`

                                                """

                                                _prefix = 'qos'
                                                _revision = '2016-10-20'

                                                def __init__(self):
                                                    self.parent = None
                                                    self._is_presence = True
                                                    self.dual_stack = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/ietf-qos:hierarchical-counters'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self._is_presence:
                                                        return True
                                                    if self.dual_stack is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                                    return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage.HierarchicalCounters']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/ietf-qos:percentage'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.counters is not None and self.counters._has_data():
                                                    return True

                                                if self.hierarchical_counters is not None and self.hierarchical_counters._has_data():
                                                    return True

                                                if self.percentage is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.ietf._meta import _ietf_qos as meta
                                                return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/ietf-qos:packet-handling'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.af_drop is not None:
                                                return True

                                            if self.bit_rate is not None and self.bit_rate._has_data():
                                                return True

                                            if self.drop_precedence is not None:
                                                return True

                                            if self.mark_dscp is not None:
                                                return True

                                            if self.mark_precedence is not None:
                                                return True

                                            if self.mark_priority is not None:
                                                return True

                                            if self.parent_class is not None:
                                                return True

                                            if self.percentage is not None and self.percentage._has_data():
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.ietf._meta import _ietf_qos as meta
                                            return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily1.Policy_.ClassGroup.Classes.Class_.PacketHandling']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')
                                        if self.name is None:
                                            raise YPYModelError('Key property name is None')

                                        return self.parent._common_path +'/ietf-qos:class[ietf-qos:name = ' + str(self.name) + ']'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.name is not None:
                                            return True

                                        if self.packet_handling is not None and self.packet_handling._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                        return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily1.Policy_.ClassGroup.Classes.Class_']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-qos:classes'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.class_ is not None:
                                        for child_ref in self.class_:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily1.Policy_.ClassGroup.Classes']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-qos:class-group'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.class_group_reference is not None:
                                    return True

                                if self.classes is not None and self.classes._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily1.Policy_.ClassGroup']['meta_info']


                        class AccessGroup(object):
                            """
                            access\-group
                            
                            .. attribute:: classes
                            
                            	classes
                            	**type**\:   :py:class:`Classes <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily1.Policy_.AccessGroup.Classes>`
                            
                            .. attribute:: ip_access_group
                            
                            	Reference an IPv4 policy
                            	**type**\:   :py:class:`IpAccessGroup <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily1.Policy_.AccessGroup.IpAccessGroup>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: ipv6_access_group
                            
                            	Reference an IPv6 policy
                            	**type**\:   :py:class:`Ipv6AccessGroup <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily1.Policy_.AccessGroup.Ipv6AccessGroup>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: l2_access_group
                            
                            	Reference a layer\-2 policy
                            	**type**\:   :py:class:`L2AccessGroup <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily1.Policy_.AccessGroup.L2AccessGroup>`
                            
                            	**presence node**\: True
                            
                            

                            """

                            _prefix = 'qos'
                            _revision = '2016-10-20'

                            def __init__(self):
                                self.parent = None
                                self.classes = Qos.Policies.Policy.Policing.CardFamily1.Policy_.AccessGroup.Classes()
                                self.classes.parent = self
                                self.ip_access_group = None
                                self.ipv6_access_group = None
                                self.l2_access_group = None


                            class IpAccessGroup(object):
                                """
                                Reference an IPv4 policy
                                
                                .. attribute:: context_name
                                
                                	context\-name
                                	**type**\:  str
                                
                                	**mandatory**\: True
                                
                                .. attribute:: policy_name
                                
                                	policy\-name
                                	**type**\:  str
                                
                                	**mandatory**\: True
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'qos'
                                _revision = '2016-10-20'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.context_name = None
                                    self.policy_name = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-qos:ip-access-group'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.context_name is not None:
                                        return True

                                    if self.policy_name is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily1.Policy_.AccessGroup.IpAccessGroup']['meta_info']


                            class Ipv6AccessGroup(object):
                                """
                                Reference an IPv6 policy
                                
                                .. attribute:: context_name
                                
                                	context\-name
                                	**type**\:  str
                                
                                	**mandatory**\: True
                                
                                .. attribute:: policy_name
                                
                                	policy\-name
                                	**type**\:  str
                                
                                	**mandatory**\: True
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'qos'
                                _revision = '2016-10-20'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.context_name = None
                                    self.policy_name = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-qos:ipv6-access-group'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.context_name is not None:
                                        return True

                                    if self.policy_name is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily1.Policy_.AccessGroup.Ipv6AccessGroup']['meta_info']


                            class L2AccessGroup(object):
                                """
                                Reference a layer\-2 policy
                                
                                .. attribute:: policy_name
                                
                                	policy\-name
                                	**type**\:  str
                                
                                	**mandatory**\: True
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'qos'
                                _revision = '2016-10-20'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.policy_name = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-qos:l2-access-group'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.policy_name is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily1.Policy_.AccessGroup.L2AccessGroup']['meta_info']


                            class Classes(object):
                                """
                                classes
                                
                                .. attribute:: class_
                                
                                	class
                                	**type**\: list of    :py:class:`Class_ <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily1.Policy_.AccessGroup.Classes.Class_>`
                                
                                

                                """

                                _prefix = 'qos'
                                _revision = '2016-10-20'

                                def __init__(self):
                                    self.parent = None
                                    self.class_ = YList()
                                    self.class_.parent = self
                                    self.class_.name = 'class_'


                                class Class_(object):
                                    """
                                    class
                                    
                                    .. attribute:: name  <key>
                                    
                                    	name
                                    	**type**\:  str
                                    
                                    .. attribute:: packet_handling
                                    
                                    	packet\-handling
                                    	**type**\:   :py:class:`PacketHandling <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily1.Policy_.AccessGroup.Classes.Class_.PacketHandling>`
                                    
                                    

                                    """

                                    _prefix = 'qos'
                                    _revision = '2016-10-20'

                                    def __init__(self):
                                        self.parent = None
                                        self.name = None
                                        self.packet_handling = Qos.Policies.Policy.Policing.CardFamily1.Policy_.AccessGroup.Classes.Class_.PacketHandling()
                                        self.packet_handling.parent = self


                                    class PacketHandling(object):
                                        """
                                        packet\-handling
                                        
                                        .. attribute:: parent_class
                                        
                                        	parent\-class
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'qos'
                                        _revision = '2016-10-20'

                                        def __init__(self):
                                            self.parent = None
                                            self.parent_class = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/ietf-qos:packet-handling'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.parent_class is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.ietf._meta import _ietf_qos as meta
                                            return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily1.Policy_.AccessGroup.Classes.Class_.PacketHandling']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')
                                        if self.name is None:
                                            raise YPYModelError('Key property name is None')

                                        return self.parent._common_path +'/ietf-qos:class[ietf-qos:name = ' + str(self.name) + ']'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.name is not None:
                                            return True

                                        if self.packet_handling is not None and self.packet_handling._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                        return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily1.Policy_.AccessGroup.Classes.Class_']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-qos:classes'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.class_ is not None:
                                        for child_ref in self.class_:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily1.Policy_.AccessGroup.Classes']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-qos:access-group'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.classes is not None and self.classes._has_data():
                                    return True

                                if self.ip_access_group is not None and self.ip_access_group._has_data():
                                    return True

                                if self.ipv6_access_group is not None and self.ipv6_access_group._has_data():
                                    return True

                                if self.l2_access_group is not None and self.l2_access_group._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily1.Policy_.AccessGroup']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-qos:policy'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.access_group is not None and self.access_group._has_data():
                                return True

                            if self.class_group is not None and self.class_group._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_qos as meta
                            return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily1.Policy_']['meta_info']


                    class Rate(object):
                        """
                        Specify rate limits inline
                        
                        .. attribute:: actions
                        
                        	actions
                        	**type**\:   :py:class:`Actions <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily1.Rate.Actions>`
                        
                        .. attribute:: bit_rate
                        
                        	bit\-rate
                        	**type**\:  int
                        
                        	**range:** 66..100000000
                        
                        .. attribute:: burst
                        
                        	burst
                        	**type**\:  int
                        
                        	**range:** 1..4250000000
                        
                        	**units**\: byte
                        
                        .. attribute:: counters
                        
                        	counters
                        	**type**\:   :py:class:`Counters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily1.Rate.Counters>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: excess_burst
                        
                        	excess\-burst
                        	**type**\:  int
                        
                        	**range:** 1..4250000000
                        
                        	**units**\: byte
                        
                        .. attribute:: hierarchical_counters
                        
                        	hierarchical\-counters
                        	**type**\:   :py:class:`HierarchicalCounters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily1.Rate.HierarchicalCounters>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: informational
                        
                        	informational
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: time_burst
                        
                        	time\-burst
                        	**type**\:  int
                        
                        	**range:** 1..10000
                        
                        	**units**\: millisecond
                        
                        .. attribute:: time_excess_burst
                        
                        	time\-excess\-burst
                        	**type**\:  int
                        
                        	**range:** 1..10000
                        
                        

                        """

                        _prefix = 'qos'
                        _revision = '2016-10-20'

                        def __init__(self):
                            self.parent = None
                            self.actions = Qos.Policies.Policy.Policing.CardFamily1.Rate.Actions()
                            self.actions.parent = self
                            self.bit_rate = None
                            self.burst = None
                            self.counters = None
                            self.excess_burst = None
                            self.hierarchical_counters = None
                            self.informational = None
                            self.time_burst = None
                            self.time_excess_burst = None


                        class Counters(object):
                            """
                            counters
                            
                            .. attribute:: hierarchical_counters
                            
                            	hierarchical\-counters
                            	**type**\:   :py:class:`HierarchicalCounters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily1.Rate.Counters.HierarchicalCounters>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'qos'
                            _revision = '2016-10-20'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.hierarchical_counters = None


                            class HierarchicalCounters(object):
                                """
                                hierarchical\-counters
                                
                                .. attribute:: dual_stack
                                
                                	dual\-stack
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'qos'
                                _revision = '2016-10-20'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.dual_stack = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-qos:hierarchical-counters'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.dual_stack is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily1.Rate.Counters.HierarchicalCounters']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-qos:counters'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.hierarchical_counters is not None and self.hierarchical_counters._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily1.Rate.Counters']['meta_info']


                        class HierarchicalCounters(object):
                            """
                            hierarchical\-counters
                            
                            .. attribute:: dual_stack
                            
                            	dual\-stack
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'qos'
                            _revision = '2016-10-20'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.dual_stack = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-qos:hierarchical-counters'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.dual_stack is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily1.Rate.HierarchicalCounters']['meta_info']


                        class Actions(object):
                            """
                            actions
                            
                            .. attribute:: conform_handling
                            
                            	conform\-handling
                            	**type**\:   :py:class:`ConformHandling <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily1.Rate.Actions.ConformHandling>`
                            
                            .. attribute:: exceed_handling
                            
                            	exceed\-handling
                            	**type**\:   :py:class:`ExceedHandling <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily1.Rate.Actions.ExceedHandling>`
                            
                            .. attribute:: violate_handling
                            
                            	violate\-handling
                            	**type**\:   :py:class:`ViolateHandling <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily1.Rate.Actions.ViolateHandling>`
                            
                            

                            """

                            _prefix = 'qos'
                            _revision = '2016-10-20'

                            def __init__(self):
                                self.parent = None
                                self.conform_handling = Qos.Policies.Policy.Policing.CardFamily1.Rate.Actions.ConformHandling()
                                self.conform_handling.parent = self
                                self.exceed_handling = Qos.Policies.Policy.Policing.CardFamily1.Rate.Actions.ExceedHandling()
                                self.exceed_handling.parent = self
                                self.violate_handling = Qos.Policies.Policy.Policing.CardFamily1.Rate.Actions.ViolateHandling()
                                self.violate_handling.parent = self


                            class ConformHandling(object):
                                """
                                conform\-handling
                                
                                .. attribute:: af_drop
                                
                                	af\-drop
                                	**type**\:  int
                                
                                	**range:** 1..3
                                
                                .. attribute:: drop_precedence
                                
                                	drop\-precedence
                                	**type**\: one of the below types:
                                
                                	**type**\:  int
                                
                                	**range:** 1..7
                                
                                
                                ----
                                	**type**\:   :py:class:`DropPrecedenceEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.DropPrecedenceEnum>`
                                
                                
                                ----
                                .. attribute:: mark_dscp
                                
                                	mark\-dscp
                                	**type**\: one of the below types:
                                
                                	**type**\:  int
                                
                                	**range:** 0..63
                                
                                
                                ----
                                	**type**\:   :py:class:`DscpCodeAllValuesTypeEnum <ydk.models.ietf.ietf_qos.DscpCodeAllValuesTypeEnum>`
                                
                                
                                ----
                                .. attribute:: mark_precedence
                                
                                	mark\-precedence
                                	**type**\:  int
                                
                                	**range:** 1..3
                                
                                .. attribute:: mark_priority
                                
                                	mark\-priority
                                	**type**\: one of the below types:
                                
                                	**type**\:  int
                                
                                	**range:** 1..7
                                
                                
                                ----
                                	**type**\:   :py:class:`MarkPriorityEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.MarkPriorityEnum>`
                                
                                
                                ----
                                .. attribute:: no_action
                                
                                	no\-action
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                

                                """

                                _prefix = 'qos'
                                _revision = '2016-10-20'

                                def __init__(self):
                                    self.parent = None
                                    self.af_drop = None
                                    self.drop_precedence = None
                                    self.mark_dscp = None
                                    self.mark_precedence = None
                                    self.mark_priority = None
                                    self.no_action = None

                                class DropPrecedenceEnum(Enum):
                                    """
                                    DropPrecedenceEnum

                                    drop\-precedence

                                    .. data:: ignore = 0

                                    	ignore

                                    """

                                    ignore = 0


                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                        return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily1.Rate.Actions.ConformHandling.DropPrecedenceEnum']


                                class MarkPriorityEnum(Enum):
                                    """
                                    MarkPriorityEnum

                                    mark\-priority

                                    .. data:: ignore = 0

                                    	ignore

                                    """

                                    ignore = 0


                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                        return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily1.Rate.Actions.ConformHandling.MarkPriorityEnum']


                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-qos:conform-handling'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.af_drop is not None:
                                        return True

                                    if self.drop_precedence is not None:
                                        return True

                                    if self.mark_dscp is not None:
                                        return True

                                    if self.mark_precedence is not None:
                                        return True

                                    if self.mark_priority is not None:
                                        return True

                                    if self.no_action is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily1.Rate.Actions.ConformHandling']['meta_info']


                            class ExceedHandling(object):
                                """
                                exceed\-handling
                                
                                .. attribute:: af_drop
                                
                                	af\-drop
                                	**type**\:  int
                                
                                	**range:** 1..3
                                
                                .. attribute:: drop_packet
                                
                                	drop\-packet
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: drop_precedence
                                
                                	drop\-precedence
                                	**type**\: one of the below types:
                                
                                	**type**\:  int
                                
                                	**range:** 1..7
                                
                                
                                ----
                                	**type**\:   :py:class:`DropPrecedenceEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.DropPrecedenceEnum>`
                                
                                
                                ----
                                .. attribute:: mark_dscp
                                
                                	mark\-dscp
                                	**type**\: one of the below types:
                                
                                	**type**\:  int
                                
                                	**range:** 0..63
                                
                                
                                ----
                                	**type**\:   :py:class:`DscpCodeAllValuesTypeEnum <ydk.models.ietf.ietf_qos.DscpCodeAllValuesTypeEnum>`
                                
                                
                                ----
                                .. attribute:: mark_precedence
                                
                                	mark\-precedence
                                	**type**\:  int
                                
                                	**range:** 1..3
                                
                                .. attribute:: mark_priority
                                
                                	mark\-priority
                                	**type**\: one of the below types:
                                
                                	**type**\:  int
                                
                                	**range:** 1..7
                                
                                
                                ----
                                	**type**\:   :py:class:`MarkPriorityEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.MarkPriorityEnum>`
                                
                                
                                ----
                                .. attribute:: no_action
                                
                                	no\-action
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                

                                """

                                _prefix = 'qos'
                                _revision = '2016-10-20'

                                def __init__(self):
                                    self.parent = None
                                    self.af_drop = None
                                    self.drop_packet = None
                                    self.drop_precedence = None
                                    self.mark_dscp = None
                                    self.mark_precedence = None
                                    self.mark_priority = None
                                    self.no_action = None

                                class DropPrecedenceEnum(Enum):
                                    """
                                    DropPrecedenceEnum

                                    drop\-precedence

                                    .. data:: ignore = 0

                                    	ignore

                                    """

                                    ignore = 0


                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                        return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily1.Rate.Actions.ExceedHandling.DropPrecedenceEnum']


                                class MarkPriorityEnum(Enum):
                                    """
                                    MarkPriorityEnum

                                    mark\-priority

                                    .. data:: ignore = 0

                                    	ignore

                                    """

                                    ignore = 0


                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                        return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily1.Rate.Actions.ExceedHandling.MarkPriorityEnum']


                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-qos:exceed-handling'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.af_drop is not None:
                                        return True

                                    if self.drop_packet is not None:
                                        return True

                                    if self.drop_precedence is not None:
                                        return True

                                    if self.mark_dscp is not None:
                                        return True

                                    if self.mark_precedence is not None:
                                        return True

                                    if self.mark_priority is not None:
                                        return True

                                    if self.no_action is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily1.Rate.Actions.ExceedHandling']['meta_info']


                            class ViolateHandling(object):
                                """
                                violate\-handling
                                
                                .. attribute:: af_drop
                                
                                	af\-drop
                                	**type**\:  int
                                
                                	**range:** 1..3
                                
                                .. attribute:: drop_packet
                                
                                	drop\-packet
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: drop_precedence
                                
                                	drop\-precedence
                                	**type**\: one of the below types:
                                
                                	**type**\:  int
                                
                                	**range:** 1..7
                                
                                
                                ----
                                	**type**\:   :py:class:`DropPrecedenceEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.DropPrecedenceEnum>`
                                
                                
                                ----
                                .. attribute:: mark_dscp
                                
                                	mark\-dscp
                                	**type**\: one of the below types:
                                
                                	**type**\:  int
                                
                                	**range:** 0..63
                                
                                
                                ----
                                	**type**\:   :py:class:`DscpCodeAllValuesTypeEnum <ydk.models.ietf.ietf_qos.DscpCodeAllValuesTypeEnum>`
                                
                                
                                ----
                                .. attribute:: mark_precedence
                                
                                	mark\-precedence
                                	**type**\:  int
                                
                                	**range:** 1..3
                                
                                .. attribute:: mark_priority
                                
                                	mark\-priority
                                	**type**\: one of the below types:
                                
                                	**type**\:  int
                                
                                	**range:** 1..7
                                
                                
                                ----
                                	**type**\:   :py:class:`MarkPriorityEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.MarkPriorityEnum>`
                                
                                
                                ----
                                .. attribute:: no_action
                                
                                	no\-action
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                

                                """

                                _prefix = 'qos'
                                _revision = '2016-10-20'

                                def __init__(self):
                                    self.parent = None
                                    self.af_drop = None
                                    self.drop_packet = None
                                    self.drop_precedence = None
                                    self.mark_dscp = None
                                    self.mark_precedence = None
                                    self.mark_priority = None
                                    self.no_action = None

                                class DropPrecedenceEnum(Enum):
                                    """
                                    DropPrecedenceEnum

                                    drop\-precedence

                                    .. data:: ignore = 0

                                    	ignore

                                    """

                                    ignore = 0


                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                        return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily1.Rate.Actions.ViolateHandling.DropPrecedenceEnum']


                                class MarkPriorityEnum(Enum):
                                    """
                                    MarkPriorityEnum

                                    mark\-priority

                                    .. data:: ignore = 0

                                    	ignore

                                    """

                                    ignore = 0


                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                        return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily1.Rate.Actions.ViolateHandling.MarkPriorityEnum']


                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-qos:violate-handling'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.af_drop is not None:
                                        return True

                                    if self.drop_packet is not None:
                                        return True

                                    if self.drop_precedence is not None:
                                        return True

                                    if self.mark_dscp is not None:
                                        return True

                                    if self.mark_precedence is not None:
                                        return True

                                    if self.mark_priority is not None:
                                        return True

                                    if self.no_action is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily1.Rate.Actions.ViolateHandling']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-qos:actions'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.conform_handling is not None and self.conform_handling._has_data():
                                    return True

                                if self.exceed_handling is not None and self.exceed_handling._has_data():
                                    return True

                                if self.violate_handling is not None and self.violate_handling._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily1.Rate.Actions']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-qos:rate'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.actions is not None and self.actions._has_data():
                                return True

                            if self.bit_rate is not None:
                                return True

                            if self.burst is not None:
                                return True

                            if self.counters is not None and self.counters._has_data():
                                return True

                            if self.excess_burst is not None:
                                return True

                            if self.hierarchical_counters is not None and self.hierarchical_counters._has_data():
                                return True

                            if self.informational is not None:
                                return True

                            if self.time_burst is not None:
                                return True

                            if self.time_excess_burst is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_qos as meta
                            return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily1.Rate']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-qos:card-family-1'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.af_drop is not None:
                            return True

                        if self.drop_precedence is not None:
                            return True

                        if self.mark_dscp is not None:
                            return True

                        if self.mark_precedence is not None:
                            return True

                        if self.mark_priority is not None:
                            return True

                        if self.policy is not None and self.policy._has_data():
                            return True

                        if self.rate is not None and self.rate._has_data():
                            return True

                        if self.rate_calculation_exclude_layer_2_overhead is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_qos as meta
                        return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily1']['meta_info']


                class CardFamily2(object):
                    """
                    card\-family\-2
                    
                    .. attribute:: af_drop
                    
                    	af\-drop
                    	**type**\:  int
                    
                    	**range:** 1..3
                    
                    .. attribute:: drop_precedence
                    
                    	drop\-precedence
                    	**type**\: one of the below types:
                    
                    	**type**\:  int
                    
                    	**range:** 1..7
                    
                    
                    ----
                    	**type**\:   :py:class:`DropPrecedenceEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.DropPrecedenceEnum>`
                    
                    
                    ----
                    .. attribute:: mark_dscp
                    
                    	mark\-dscp
                    	**type**\: one of the below types:
                    
                    	**type**\:  int
                    
                    	**range:** 0..63
                    
                    
                    ----
                    	**type**\:   :py:class:`DscpCodeAllValuesTypeEnum <ydk.models.ietf.ietf_qos.DscpCodeAllValuesTypeEnum>`
                    
                    
                    ----
                    .. attribute:: mark_precedence
                    
                    	mark\-precedence
                    	**type**\:  int
                    
                    	**range:** 1..3
                    
                    .. attribute:: mark_priority
                    
                    	mark\-priority
                    	**type**\: one of the below types:
                    
                    	**type**\:  int
                    
                    	**range:** 1..7
                    
                    
                    ----
                    	**type**\:   :py:class:`MarkPriorityEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.MarkPriorityEnum>`
                    
                    
                    ----
                    .. attribute:: policy
                    
                    	policy
                    	**type**\:   :py:class:`Policy_ <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily2.Policy_>`
                    
                    .. attribute:: rate
                    
                    	Specify rate limits inline
                    	**type**\:   :py:class:`Rate <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily2.Rate>`
                    
                    .. attribute:: rate_calculation_exclude_layer_2_overhead
                    
                    	Specify that rate calculation excludes the size ofLayer 2 overhead for the layer 3 circuit on which a policy is applied
                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                    
                    

                    """

                    _prefix = 'qos'
                    _revision = '2016-10-20'

                    def __init__(self):
                        self.parent = None
                        self.af_drop = None
                        self.drop_precedence = None
                        self.mark_dscp = None
                        self.mark_precedence = None
                        self.mark_priority = None
                        self.policy = Qos.Policies.Policy.Policing.CardFamily2.Policy_()
                        self.policy.parent = self
                        self.rate = Qos.Policies.Policy.Policing.CardFamily2.Rate()
                        self.rate.parent = self
                        self.rate_calculation_exclude_layer_2_overhead = None

                    class DropPrecedenceEnum(Enum):
                        """
                        DropPrecedenceEnum

                        drop\-precedence

                        .. data:: ignore = 0

                        	ignore

                        """

                        ignore = 0


                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_qos as meta
                            return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily2.DropPrecedenceEnum']


                    class MarkPriorityEnum(Enum):
                        """
                        MarkPriorityEnum

                        mark\-priority

                        .. data:: ignore = 0

                        	ignore

                        """

                        ignore = 0


                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_qos as meta
                            return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily2.MarkPriorityEnum']



                    class Policy_(object):
                        """
                        policy
                        
                        .. attribute:: access_group
                        
                        	access\-group
                        	**type**\:   :py:class:`AccessGroup <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily2.Policy_.AccessGroup>`
                        
                        .. attribute:: class_group
                        
                        	Reference a previously defined class
                        	**type**\:   :py:class:`ClassGroup <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily2.Policy_.ClassGroup>`
                        
                        

                        """

                        _prefix = 'qos'
                        _revision = '2016-10-20'

                        def __init__(self):
                            self.parent = None
                            self.access_group = Qos.Policies.Policy.Policing.CardFamily2.Policy_.AccessGroup()
                            self.access_group.parent = self
                            self.class_group = Qos.Policies.Policy.Policing.CardFamily2.Policy_.ClassGroup()
                            self.class_group.parent = self


                        class ClassGroup(object):
                            """
                            Reference a previously defined class
                            
                            .. attribute:: class_group_reference
                            
                            	class\-group\-reference
                            	**type**\:  str
                            
                            	**refers to**\:  :py:class:`name <ydk.models.ietf.ietf_qos.Qos.ClassDefinitions.ClassDefinition>`
                            
                            .. attribute:: classes
                            
                            	classes
                            	**type**\:   :py:class:`Classes <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily2.Policy_.ClassGroup.Classes>`
                            
                            

                            """

                            _prefix = 'qos'
                            _revision = '2016-10-20'

                            def __init__(self):
                                self.parent = None
                                self.class_group_reference = None
                                self.classes = Qos.Policies.Policy.Policing.CardFamily2.Policy_.ClassGroup.Classes()
                                self.classes.parent = self


                            class Classes(object):
                                """
                                classes
                                
                                .. attribute:: class_
                                
                                	class
                                	**type**\: list of    :py:class:`Class_ <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily2.Policy_.ClassGroup.Classes.Class_>`
                                
                                

                                """

                                _prefix = 'qos'
                                _revision = '2016-10-20'

                                def __init__(self):
                                    self.parent = None
                                    self.class_ = YList()
                                    self.class_.parent = self
                                    self.class_.name = 'class_'


                                class Class_(object):
                                    """
                                    class
                                    
                                    .. attribute:: name  <key>
                                    
                                    	name
                                    	**type**\:  str
                                    
                                    	**length:** 1..39
                                    
                                    	**refers to**\:  :py:class:`class_ <ydk.models.ietf.ietf_qos.Qos.ClassDefinitions.ClassDefinition.Qos_>`
                                    
                                    .. attribute:: packet_handling
                                    
                                    	packet\-handling
                                    	**type**\:   :py:class:`PacketHandling <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling>`
                                    
                                    

                                    """

                                    _prefix = 'qos'
                                    _revision = '2016-10-20'

                                    def __init__(self):
                                        self.parent = None
                                        self.name = None
                                        self.packet_handling = Qos.Policies.Policy.Policing.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling()
                                        self.packet_handling.parent = self


                                    class PacketHandling(object):
                                        """
                                        packet\-handling
                                        
                                        .. attribute:: af_drop
                                        
                                        	af\-drop
                                        	**type**\:  int
                                        
                                        	**range:** 1..3
                                        
                                        .. attribute:: bit_rate
                                        
                                        	bit\-rate
                                        	**type**\:   :py:class:`BitRate <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate>`
                                        
                                        .. attribute:: drop_precedence
                                        
                                        	drop\-precedence
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  int
                                        
                                        	**range:** 1..7
                                        
                                        
                                        ----
                                        	**type**\:   :py:class:`DropPrecedenceEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.DropPrecedenceEnum>`
                                        
                                        
                                        ----
                                        .. attribute:: mark_dscp
                                        
                                        	mark\-dscp
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  int
                                        
                                        	**range:** 0..63
                                        
                                        
                                        ----
                                        	**type**\:   :py:class:`DscpCodeAllValuesTypeEnum <ydk.models.ietf.ietf_qos.DscpCodeAllValuesTypeEnum>`
                                        
                                        
                                        ----
                                        .. attribute:: mark_precedence
                                        
                                        	mark\-precedence
                                        	**type**\:  int
                                        
                                        	**range:** 1..3
                                        
                                        .. attribute:: mark_priority
                                        
                                        	mark\-priority
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  int
                                        
                                        	**range:** 1..7
                                        
                                        
                                        ----
                                        	**type**\:   :py:class:`MarkPriorityEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Policy_.ClassGroup.Classes.Class_.PacketHandling.MarkPriorityEnum>`
                                        
                                        
                                        ----
                                        .. attribute:: parent_class
                                        
                                        	parent\-class
                                        	**type**\:  str
                                        
                                        .. attribute:: percentage
                                        
                                        	percentage
                                        	**type**\:   :py:class:`Percentage <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage>`
                                        
                                        

                                        """

                                        _prefix = 'qos'
                                        _revision = '2016-10-20'

                                        def __init__(self):
                                            self.parent = None
                                            self.af_drop = None
                                            self.bit_rate = Qos.Policies.Policy.Policing.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate()
                                            self.bit_rate.parent = self
                                            self.drop_precedence = None
                                            self.mark_dscp = None
                                            self.mark_precedence = None
                                            self.mark_priority = None
                                            self.parent_class = None
                                            self.percentage = Qos.Policies.Policy.Policing.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage()
                                            self.percentage.parent = self

                                        class DropPrecedenceEnum(Enum):
                                            """
                                            DropPrecedenceEnum

                                            drop\-precedence

                                            .. data:: ignore = 0

                                            	ignore

                                            """

                                            ignore = 0


                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.ietf._meta import _ietf_qos as meta
                                                return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling.DropPrecedenceEnum']


                                        class MarkPriorityEnum(Enum):
                                            """
                                            MarkPriorityEnum

                                            mark\-priority

                                            .. data:: ignore = 0

                                            	ignore

                                            """

                                            ignore = 0


                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.ietf._meta import _ietf_qos as meta
                                                return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling.MarkPriorityEnum']



                                        class BitRate(object):
                                            """
                                            bit\-rate
                                            
                                            .. attribute:: actions
                                            
                                            	actions
                                            	**type**\:   :py:class:`Actions <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions>`
                                            
                                            .. attribute:: bit_rate
                                            
                                            	bit\-rate
                                            	**type**\:  int
                                            
                                            	**range:** 5..100000000
                                            
                                            .. attribute:: burst
                                            
                                            	burst
                                            	**type**\:  int
                                            
                                            	**range:** 1..4250000000
                                            
                                            	**units**\: byte
                                            
                                            .. attribute:: counters
                                            
                                            	counters
                                            	**type**\:   :py:class:`Counters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Counters>`
                                            
                                            	**presence node**\: True
                                            
                                            .. attribute:: excess_burst
                                            
                                            	excess\-burst
                                            	**type**\:  int
                                            
                                            	**range:** 1..4250000000
                                            
                                            	**units**\: byte
                                            
                                            .. attribute:: hierarchical_counters
                                            
                                            	hierarchical\-counters
                                            	**type**\:   :py:class:`HierarchicalCounters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.HierarchicalCounters>`
                                            
                                            	**presence node**\: True
                                            
                                            .. attribute:: time_burst
                                            
                                            	time\-burst
                                            	**type**\:  int
                                            
                                            	**range:** 1..10000
                                            
                                            	**units**\: millisecond
                                            
                                            .. attribute:: time_excess_burst
                                            
                                            	time\-excess\-burst
                                            	**type**\:  int
                                            
                                            	**range:** 1..10000
                                            
                                            

                                            """

                                            _prefix = 'qos'
                                            _revision = '2016-10-20'

                                            def __init__(self):
                                                self.parent = None
                                                self.actions = Qos.Policies.Policy.Policing.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions()
                                                self.actions.parent = self
                                                self.bit_rate = None
                                                self.burst = None
                                                self.counters = None
                                                self.excess_burst = None
                                                self.hierarchical_counters = None
                                                self.time_burst = None
                                                self.time_excess_burst = None


                                            class Counters(object):
                                                """
                                                counters
                                                
                                                .. attribute:: hierarchical_counters
                                                
                                                	hierarchical\-counters
                                                	**type**\:   :py:class:`HierarchicalCounters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Counters.HierarchicalCounters>`
                                                
                                                	**presence node**\: True
                                                
                                                .. attribute:: _is_presence
                                                
                                                	Is present if this instance represents presence container else not
                                                	**type**\: bool
                                                
                                                

                                                This class is a :ref:`presence class<presence-class>`

                                                """

                                                _prefix = 'qos'
                                                _revision = '2016-10-20'

                                                def __init__(self):
                                                    self.parent = None
                                                    self._is_presence = True
                                                    self.hierarchical_counters = None


                                                class HierarchicalCounters(object):
                                                    """
                                                    hierarchical\-counters
                                                    
                                                    .. attribute:: dual_stack
                                                    
                                                    	dual\-stack
                                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                                    
                                                    .. attribute:: _is_presence
                                                    
                                                    	Is present if this instance represents presence container else not
                                                    	**type**\: bool
                                                    
                                                    

                                                    This class is a :ref:`presence class<presence-class>`

                                                    """

                                                    _prefix = 'qos'
                                                    _revision = '2016-10-20'

                                                    def __init__(self):
                                                        self.parent = None
                                                        self._is_presence = True
                                                        self.dual_stack = None

                                                    @property
                                                    def _common_path(self):
                                                        if self.parent is None:
                                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                                        return self.parent._common_path +'/ietf-qos:hierarchical-counters'

                                                    def is_config(self):
                                                        ''' Returns True if this instance represents config data else returns False '''
                                                        return True

                                                    def _has_data(self):
                                                        if not self.is_config():
                                                            return False
                                                        if self._is_presence:
                                                            return True
                                                        if self.dual_stack is not None:
                                                            return True

                                                        return False

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                                        return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Counters.HierarchicalCounters']['meta_info']

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/ietf-qos:counters'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self._is_presence:
                                                        return True
                                                    if self.hierarchical_counters is not None and self.hierarchical_counters._has_data():
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                                    return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Counters']['meta_info']


                                            class HierarchicalCounters(object):
                                                """
                                                hierarchical\-counters
                                                
                                                .. attribute:: dual_stack
                                                
                                                	dual\-stack
                                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                                
                                                .. attribute:: _is_presence
                                                
                                                	Is present if this instance represents presence container else not
                                                	**type**\: bool
                                                
                                                

                                                This class is a :ref:`presence class<presence-class>`

                                                """

                                                _prefix = 'qos'
                                                _revision = '2016-10-20'

                                                def __init__(self):
                                                    self.parent = None
                                                    self._is_presence = True
                                                    self.dual_stack = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/ietf-qos:hierarchical-counters'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self._is_presence:
                                                        return True
                                                    if self.dual_stack is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                                    return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.HierarchicalCounters']['meta_info']


                                            class Actions(object):
                                                """
                                                actions
                                                
                                                .. attribute:: conform_handling
                                                
                                                	conform\-handling
                                                	**type**\:   :py:class:`ConformHandling <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ConformHandling>`
                                                
                                                .. attribute:: exceed_handling
                                                
                                                	exceed\-handling
                                                	**type**\:   :py:class:`ExceedHandling <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ExceedHandling>`
                                                
                                                

                                                """

                                                _prefix = 'qos'
                                                _revision = '2016-10-20'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.conform_handling = Qos.Policies.Policy.Policing.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ConformHandling()
                                                    self.conform_handling.parent = self
                                                    self.exceed_handling = Qos.Policies.Policy.Policing.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ExceedHandling()
                                                    self.exceed_handling.parent = self


                                                class ConformHandling(object):
                                                    """
                                                    conform\-handling
                                                    
                                                    .. attribute:: af_drop
                                                    
                                                    	af\-drop
                                                    	**type**\:  int
                                                    
                                                    	**range:** 1..3
                                                    
                                                    .. attribute:: drop_precedence
                                                    
                                                    	drop\-precedence
                                                    	**type**\: one of the below types:
                                                    
                                                    	**type**\:  int
                                                    
                                                    	**range:** 1..7
                                                    
                                                    
                                                    ----
                                                    	**type**\:   :py:class:`DropPrecedenceEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.DropPrecedenceEnum>`
                                                    
                                                    
                                                    ----
                                                    .. attribute:: mark_dscp
                                                    
                                                    	mark\-dscp
                                                    	**type**\: one of the below types:
                                                    
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..63
                                                    
                                                    
                                                    ----
                                                    	**type**\:   :py:class:`DscpCodeAllValuesTypeEnum <ydk.models.ietf.ietf_qos.DscpCodeAllValuesTypeEnum>`
                                                    
                                                    
                                                    ----
                                                    .. attribute:: mark_precedence
                                                    
                                                    	mark\-precedence
                                                    	**type**\:  int
                                                    
                                                    	**range:** 1..3
                                                    
                                                    .. attribute:: mark_priority
                                                    
                                                    	mark\-priority
                                                    	**type**\: one of the below types:
                                                    
                                                    	**type**\:  int
                                                    
                                                    	**range:** 1..7
                                                    
                                                    
                                                    ----
                                                    	**type**\:   :py:class:`MarkPriorityEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.MarkPriorityEnum>`
                                                    
                                                    
                                                    ----
                                                    .. attribute:: no_action
                                                    
                                                    	no\-action
                                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                                    
                                                    

                                                    """

                                                    _prefix = 'qos'
                                                    _revision = '2016-10-20'

                                                    def __init__(self):
                                                        self.parent = None
                                                        self.af_drop = None
                                                        self.drop_precedence = None
                                                        self.mark_dscp = None
                                                        self.mark_precedence = None
                                                        self.mark_priority = None
                                                        self.no_action = None

                                                    class DropPrecedenceEnum(Enum):
                                                        """
                                                        DropPrecedenceEnum

                                                        drop\-precedence

                                                        .. data:: ignore = 0

                                                        	ignore

                                                        """

                                                        ignore = 0


                                                        @staticmethod
                                                        def _meta_info():
                                                            from ydk.models.ietf._meta import _ietf_qos as meta
                                                            return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ConformHandling.DropPrecedenceEnum']


                                                    class MarkPriorityEnum(Enum):
                                                        """
                                                        MarkPriorityEnum

                                                        mark\-priority

                                                        .. data:: ignore = 0

                                                        	ignore

                                                        """

                                                        ignore = 0


                                                        @staticmethod
                                                        def _meta_info():
                                                            from ydk.models.ietf._meta import _ietf_qos as meta
                                                            return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ConformHandling.MarkPriorityEnum']


                                                    @property
                                                    def _common_path(self):
                                                        if self.parent is None:
                                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                                        return self.parent._common_path +'/ietf-qos:conform-handling'

                                                    def is_config(self):
                                                        ''' Returns True if this instance represents config data else returns False '''
                                                        return True

                                                    def _has_data(self):
                                                        if not self.is_config():
                                                            return False
                                                        if self.af_drop is not None:
                                                            return True

                                                        if self.drop_precedence is not None:
                                                            return True

                                                        if self.mark_dscp is not None:
                                                            return True

                                                        if self.mark_precedence is not None:
                                                            return True

                                                        if self.mark_priority is not None:
                                                            return True

                                                        if self.no_action is not None:
                                                            return True

                                                        return False

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                                        return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ConformHandling']['meta_info']


                                                class ExceedHandling(object):
                                                    """
                                                    exceed\-handling
                                                    
                                                    .. attribute:: af_drop
                                                    
                                                    	af\-drop
                                                    	**type**\:  int
                                                    
                                                    	**range:** 1..3
                                                    
                                                    .. attribute:: drop_packet
                                                    
                                                    	drop\-packet
                                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                                    
                                                    .. attribute:: drop_precedence
                                                    
                                                    	drop\-precedence
                                                    	**type**\: one of the below types:
                                                    
                                                    	**type**\:  int
                                                    
                                                    	**range:** 1..7
                                                    
                                                    
                                                    ----
                                                    	**type**\:   :py:class:`DropPrecedenceEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.DropPrecedenceEnum>`
                                                    
                                                    
                                                    ----
                                                    .. attribute:: mark_dscp
                                                    
                                                    	mark\-dscp
                                                    	**type**\: one of the below types:
                                                    
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..63
                                                    
                                                    
                                                    ----
                                                    	**type**\:   :py:class:`DscpCodeAllValuesTypeEnum <ydk.models.ietf.ietf_qos.DscpCodeAllValuesTypeEnum>`
                                                    
                                                    
                                                    ----
                                                    .. attribute:: mark_precedence
                                                    
                                                    	mark\-precedence
                                                    	**type**\:  int
                                                    
                                                    	**range:** 1..3
                                                    
                                                    .. attribute:: mark_priority
                                                    
                                                    	mark\-priority
                                                    	**type**\: one of the below types:
                                                    
                                                    	**type**\:  int
                                                    
                                                    	**range:** 1..7
                                                    
                                                    
                                                    ----
                                                    	**type**\:   :py:class:`MarkPriorityEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.MarkPriorityEnum>`
                                                    
                                                    
                                                    ----
                                                    .. attribute:: no_action
                                                    
                                                    	no\-action
                                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                                    
                                                    

                                                    """

                                                    _prefix = 'qos'
                                                    _revision = '2016-10-20'

                                                    def __init__(self):
                                                        self.parent = None
                                                        self.af_drop = None
                                                        self.drop_packet = None
                                                        self.drop_precedence = None
                                                        self.mark_dscp = None
                                                        self.mark_precedence = None
                                                        self.mark_priority = None
                                                        self.no_action = None

                                                    class DropPrecedenceEnum(Enum):
                                                        """
                                                        DropPrecedenceEnum

                                                        drop\-precedence

                                                        .. data:: ignore = 0

                                                        	ignore

                                                        """

                                                        ignore = 0


                                                        @staticmethod
                                                        def _meta_info():
                                                            from ydk.models.ietf._meta import _ietf_qos as meta
                                                            return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ExceedHandling.DropPrecedenceEnum']


                                                    class MarkPriorityEnum(Enum):
                                                        """
                                                        MarkPriorityEnum

                                                        mark\-priority

                                                        .. data:: ignore = 0

                                                        	ignore

                                                        """

                                                        ignore = 0


                                                        @staticmethod
                                                        def _meta_info():
                                                            from ydk.models.ietf._meta import _ietf_qos as meta
                                                            return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ExceedHandling.MarkPriorityEnum']


                                                    @property
                                                    def _common_path(self):
                                                        if self.parent is None:
                                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                                        return self.parent._common_path +'/ietf-qos:exceed-handling'

                                                    def is_config(self):
                                                        ''' Returns True if this instance represents config data else returns False '''
                                                        return True

                                                    def _has_data(self):
                                                        if not self.is_config():
                                                            return False
                                                        if self.af_drop is not None:
                                                            return True

                                                        if self.drop_packet is not None:
                                                            return True

                                                        if self.drop_precedence is not None:
                                                            return True

                                                        if self.mark_dscp is not None:
                                                            return True

                                                        if self.mark_precedence is not None:
                                                            return True

                                                        if self.mark_priority is not None:
                                                            return True

                                                        if self.no_action is not None:
                                                            return True

                                                        return False

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                                        return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ExceedHandling']['meta_info']

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/ietf-qos:actions'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.conform_handling is not None and self.conform_handling._has_data():
                                                        return True

                                                    if self.exceed_handling is not None and self.exceed_handling._has_data():
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                                    return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/ietf-qos:bit-rate'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.actions is not None and self.actions._has_data():
                                                    return True

                                                if self.bit_rate is not None:
                                                    return True

                                                if self.burst is not None:
                                                    return True

                                                if self.counters is not None and self.counters._has_data():
                                                    return True

                                                if self.excess_burst is not None:
                                                    return True

                                                if self.hierarchical_counters is not None and self.hierarchical_counters._has_data():
                                                    return True

                                                if self.time_burst is not None:
                                                    return True

                                                if self.time_excess_burst is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.ietf._meta import _ietf_qos as meta
                                                return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate']['meta_info']


                                        class Percentage(object):
                                            """
                                            percentage
                                            
                                            .. attribute:: counters
                                            
                                            	counters
                                            	**type**\:   :py:class:`Counters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage.Counters>`
                                            
                                            	**presence node**\: True
                                            
                                            .. attribute:: hierarchical_counters
                                            
                                            	hierarchical\-counters
                                            	**type**\:   :py:class:`HierarchicalCounters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage.HierarchicalCounters>`
                                            
                                            	**presence node**\: True
                                            
                                            .. attribute:: percentage
                                            
                                            	percentage
                                            	**type**\:  int
                                            
                                            	**range:** 1..100
                                            
                                            	**units**\: percent
                                            
                                            

                                            """

                                            _prefix = 'qos'
                                            _revision = '2016-10-20'

                                            def __init__(self):
                                                self.parent = None
                                                self.counters = None
                                                self.hierarchical_counters = None
                                                self.percentage = None


                                            class Counters(object):
                                                """
                                                counters
                                                
                                                .. attribute:: hierarchical_counters
                                                
                                                	hierarchical\-counters
                                                	**type**\:   :py:class:`HierarchicalCounters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage.Counters.HierarchicalCounters>`
                                                
                                                	**presence node**\: True
                                                
                                                .. attribute:: _is_presence
                                                
                                                	Is present if this instance represents presence container else not
                                                	**type**\: bool
                                                
                                                

                                                This class is a :ref:`presence class<presence-class>`

                                                """

                                                _prefix = 'qos'
                                                _revision = '2016-10-20'

                                                def __init__(self):
                                                    self.parent = None
                                                    self._is_presence = True
                                                    self.hierarchical_counters = None


                                                class HierarchicalCounters(object):
                                                    """
                                                    hierarchical\-counters
                                                    
                                                    .. attribute:: dual_stack
                                                    
                                                    	dual\-stack
                                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                                    
                                                    .. attribute:: _is_presence
                                                    
                                                    	Is present if this instance represents presence container else not
                                                    	**type**\: bool
                                                    
                                                    

                                                    This class is a :ref:`presence class<presence-class>`

                                                    """

                                                    _prefix = 'qos'
                                                    _revision = '2016-10-20'

                                                    def __init__(self):
                                                        self.parent = None
                                                        self._is_presence = True
                                                        self.dual_stack = None

                                                    @property
                                                    def _common_path(self):
                                                        if self.parent is None:
                                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                                        return self.parent._common_path +'/ietf-qos:hierarchical-counters'

                                                    def is_config(self):
                                                        ''' Returns True if this instance represents config data else returns False '''
                                                        return True

                                                    def _has_data(self):
                                                        if not self.is_config():
                                                            return False
                                                        if self._is_presence:
                                                            return True
                                                        if self.dual_stack is not None:
                                                            return True

                                                        return False

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                                        return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage.Counters.HierarchicalCounters']['meta_info']

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/ietf-qos:counters'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self._is_presence:
                                                        return True
                                                    if self.hierarchical_counters is not None and self.hierarchical_counters._has_data():
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                                    return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage.Counters']['meta_info']


                                            class HierarchicalCounters(object):
                                                """
                                                hierarchical\-counters
                                                
                                                .. attribute:: dual_stack
                                                
                                                	dual\-stack
                                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                                
                                                .. attribute:: _is_presence
                                                
                                                	Is present if this instance represents presence container else not
                                                	**type**\: bool
                                                
                                                

                                                This class is a :ref:`presence class<presence-class>`

                                                """

                                                _prefix = 'qos'
                                                _revision = '2016-10-20'

                                                def __init__(self):
                                                    self.parent = None
                                                    self._is_presence = True
                                                    self.dual_stack = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/ietf-qos:hierarchical-counters'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self._is_presence:
                                                        return True
                                                    if self.dual_stack is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                                    return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage.HierarchicalCounters']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/ietf-qos:percentage'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.counters is not None and self.counters._has_data():
                                                    return True

                                                if self.hierarchical_counters is not None and self.hierarchical_counters._has_data():
                                                    return True

                                                if self.percentage is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.ietf._meta import _ietf_qos as meta
                                                return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/ietf-qos:packet-handling'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.af_drop is not None:
                                                return True

                                            if self.bit_rate is not None and self.bit_rate._has_data():
                                                return True

                                            if self.drop_precedence is not None:
                                                return True

                                            if self.mark_dscp is not None:
                                                return True

                                            if self.mark_precedence is not None:
                                                return True

                                            if self.mark_priority is not None:
                                                return True

                                            if self.parent_class is not None:
                                                return True

                                            if self.percentage is not None and self.percentage._has_data():
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.ietf._meta import _ietf_qos as meta
                                            return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily2.Policy_.ClassGroup.Classes.Class_.PacketHandling']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')
                                        if self.name is None:
                                            raise YPYModelError('Key property name is None')

                                        return self.parent._common_path +'/ietf-qos:class[ietf-qos:name = ' + str(self.name) + ']'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.name is not None:
                                            return True

                                        if self.packet_handling is not None and self.packet_handling._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                        return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily2.Policy_.ClassGroup.Classes.Class_']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-qos:classes'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.class_ is not None:
                                        for child_ref in self.class_:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily2.Policy_.ClassGroup.Classes']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-qos:class-group'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.class_group_reference is not None:
                                    return True

                                if self.classes is not None and self.classes._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily2.Policy_.ClassGroup']['meta_info']


                        class AccessGroup(object):
                            """
                            access\-group
                            
                            .. attribute:: classes
                            
                            	classes
                            	**type**\:   :py:class:`Classes <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily2.Policy_.AccessGroup.Classes>`
                            
                            .. attribute:: ip_access_group
                            
                            	Reference an IPv4 policy
                            	**type**\:   :py:class:`IpAccessGroup <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily2.Policy_.AccessGroup.IpAccessGroup>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: ipv6_access_group
                            
                            	Reference an IPv6 policy
                            	**type**\:   :py:class:`Ipv6AccessGroup <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily2.Policy_.AccessGroup.Ipv6AccessGroup>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: l2_access_group
                            
                            	Reference a layer\-2 policy
                            	**type**\:   :py:class:`L2AccessGroup <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily2.Policy_.AccessGroup.L2AccessGroup>`
                            
                            	**presence node**\: True
                            
                            

                            """

                            _prefix = 'qos'
                            _revision = '2016-10-20'

                            def __init__(self):
                                self.parent = None
                                self.classes = Qos.Policies.Policy.Policing.CardFamily2.Policy_.AccessGroup.Classes()
                                self.classes.parent = self
                                self.ip_access_group = None
                                self.ipv6_access_group = None
                                self.l2_access_group = None


                            class IpAccessGroup(object):
                                """
                                Reference an IPv4 policy
                                
                                .. attribute:: context_name
                                
                                	context\-name
                                	**type**\:  str
                                
                                	**mandatory**\: True
                                
                                .. attribute:: policy_name
                                
                                	policy\-name
                                	**type**\:  str
                                
                                	**mandatory**\: True
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'qos'
                                _revision = '2016-10-20'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.context_name = None
                                    self.policy_name = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-qos:ip-access-group'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.context_name is not None:
                                        return True

                                    if self.policy_name is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily2.Policy_.AccessGroup.IpAccessGroup']['meta_info']


                            class Ipv6AccessGroup(object):
                                """
                                Reference an IPv6 policy
                                
                                .. attribute:: context_name
                                
                                	context\-name
                                	**type**\:  str
                                
                                	**mandatory**\: True
                                
                                .. attribute:: policy_name
                                
                                	policy\-name
                                	**type**\:  str
                                
                                	**mandatory**\: True
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'qos'
                                _revision = '2016-10-20'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.context_name = None
                                    self.policy_name = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-qos:ipv6-access-group'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.context_name is not None:
                                        return True

                                    if self.policy_name is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily2.Policy_.AccessGroup.Ipv6AccessGroup']['meta_info']


                            class L2AccessGroup(object):
                                """
                                Reference a layer\-2 policy
                                
                                .. attribute:: policy_name
                                
                                	policy\-name
                                	**type**\:  str
                                
                                	**mandatory**\: True
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'qos'
                                _revision = '2016-10-20'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.policy_name = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-qos:l2-access-group'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.policy_name is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily2.Policy_.AccessGroup.L2AccessGroup']['meta_info']


                            class Classes(object):
                                """
                                classes
                                
                                .. attribute:: class_
                                
                                	class
                                	**type**\: list of    :py:class:`Class_ <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily2.Policy_.AccessGroup.Classes.Class_>`
                                
                                

                                """

                                _prefix = 'qos'
                                _revision = '2016-10-20'

                                def __init__(self):
                                    self.parent = None
                                    self.class_ = YList()
                                    self.class_.parent = self
                                    self.class_.name = 'class_'


                                class Class_(object):
                                    """
                                    class
                                    
                                    .. attribute:: name  <key>
                                    
                                    	name
                                    	**type**\:  str
                                    
                                    .. attribute:: packet_handling
                                    
                                    	packet\-handling
                                    	**type**\:   :py:class:`PacketHandling <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily2.Policy_.AccessGroup.Classes.Class_.PacketHandling>`
                                    
                                    

                                    """

                                    _prefix = 'qos'
                                    _revision = '2016-10-20'

                                    def __init__(self):
                                        self.parent = None
                                        self.name = None
                                        self.packet_handling = Qos.Policies.Policy.Policing.CardFamily2.Policy_.AccessGroup.Classes.Class_.PacketHandling()
                                        self.packet_handling.parent = self


                                    class PacketHandling(object):
                                        """
                                        packet\-handling
                                        
                                        .. attribute:: parent_class
                                        
                                        	parent\-class
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'qos'
                                        _revision = '2016-10-20'

                                        def __init__(self):
                                            self.parent = None
                                            self.parent_class = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/ietf-qos:packet-handling'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.parent_class is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.ietf._meta import _ietf_qos as meta
                                            return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily2.Policy_.AccessGroup.Classes.Class_.PacketHandling']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')
                                        if self.name is None:
                                            raise YPYModelError('Key property name is None')

                                        return self.parent._common_path +'/ietf-qos:class[ietf-qos:name = ' + str(self.name) + ']'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.name is not None:
                                            return True

                                        if self.packet_handling is not None and self.packet_handling._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                        return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily2.Policy_.AccessGroup.Classes.Class_']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-qos:classes'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.class_ is not None:
                                        for child_ref in self.class_:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily2.Policy_.AccessGroup.Classes']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-qos:access-group'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.classes is not None and self.classes._has_data():
                                    return True

                                if self.ip_access_group is not None and self.ip_access_group._has_data():
                                    return True

                                if self.ipv6_access_group is not None and self.ipv6_access_group._has_data():
                                    return True

                                if self.l2_access_group is not None and self.l2_access_group._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily2.Policy_.AccessGroup']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-qos:policy'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.access_group is not None and self.access_group._has_data():
                                return True

                            if self.class_group is not None and self.class_group._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_qos as meta
                            return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily2.Policy_']['meta_info']


                    class Rate(object):
                        """
                        Specify rate limits inline
                        
                        .. attribute:: actions
                        
                        	actions
                        	**type**\:   :py:class:`Actions <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily2.Rate.Actions>`
                        
                        .. attribute:: bit_rate
                        
                        	bit\-rate
                        	**type**\:  int
                        
                        	**range:** 5..100000000
                        
                        .. attribute:: burst
                        
                        	burst
                        	**type**\:  int
                        
                        	**range:** 1..4250000000
                        
                        	**units**\: byte
                        
                        .. attribute:: counters
                        
                        	counters
                        	**type**\:   :py:class:`Counters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily2.Rate.Counters>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: excess_burst
                        
                        	excess\-burst
                        	**type**\:  int
                        
                        	**range:** 1..4250000000
                        
                        	**units**\: byte
                        
                        .. attribute:: hierarchical_counters
                        
                        	hierarchical\-counters
                        	**type**\:   :py:class:`HierarchicalCounters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily2.Rate.HierarchicalCounters>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: informational
                        
                        	informational
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: time_burst
                        
                        	time\-burst
                        	**type**\:  int
                        
                        	**range:** 1..10000
                        
                        	**units**\: millisecond
                        
                        .. attribute:: time_excess_burst
                        
                        	time\-excess\-burst
                        	**type**\:  int
                        
                        	**range:** 1..10000
                        
                        

                        """

                        _prefix = 'qos'
                        _revision = '2016-10-20'

                        def __init__(self):
                            self.parent = None
                            self.actions = Qos.Policies.Policy.Policing.CardFamily2.Rate.Actions()
                            self.actions.parent = self
                            self.bit_rate = None
                            self.burst = None
                            self.counters = None
                            self.excess_burst = None
                            self.hierarchical_counters = None
                            self.informational = None
                            self.time_burst = None
                            self.time_excess_burst = None


                        class Counters(object):
                            """
                            counters
                            
                            .. attribute:: hierarchical_counters
                            
                            	hierarchical\-counters
                            	**type**\:   :py:class:`HierarchicalCounters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily2.Rate.Counters.HierarchicalCounters>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'qos'
                            _revision = '2016-10-20'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.hierarchical_counters = None


                            class HierarchicalCounters(object):
                                """
                                hierarchical\-counters
                                
                                .. attribute:: dual_stack
                                
                                	dual\-stack
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'qos'
                                _revision = '2016-10-20'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.dual_stack = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-qos:hierarchical-counters'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.dual_stack is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily2.Rate.Counters.HierarchicalCounters']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-qos:counters'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.hierarchical_counters is not None and self.hierarchical_counters._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily2.Rate.Counters']['meta_info']


                        class HierarchicalCounters(object):
                            """
                            hierarchical\-counters
                            
                            .. attribute:: dual_stack
                            
                            	dual\-stack
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'qos'
                            _revision = '2016-10-20'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.dual_stack = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-qos:hierarchical-counters'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.dual_stack is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily2.Rate.HierarchicalCounters']['meta_info']


                        class Actions(object):
                            """
                            actions
                            
                            .. attribute:: conform_handling
                            
                            	conform\-handling
                            	**type**\:   :py:class:`ConformHandling <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily2.Rate.Actions.ConformHandling>`
                            
                            .. attribute:: exceed_handling
                            
                            	exceed\-handling
                            	**type**\:   :py:class:`ExceedHandling <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily2.Rate.Actions.ExceedHandling>`
                            
                            .. attribute:: violate_handling
                            
                            	violate\-handling
                            	**type**\:   :py:class:`ViolateHandling <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily2.Rate.Actions.ViolateHandling>`
                            
                            

                            """

                            _prefix = 'qos'
                            _revision = '2016-10-20'

                            def __init__(self):
                                self.parent = None
                                self.conform_handling = Qos.Policies.Policy.Policing.CardFamily2.Rate.Actions.ConformHandling()
                                self.conform_handling.parent = self
                                self.exceed_handling = Qos.Policies.Policy.Policing.CardFamily2.Rate.Actions.ExceedHandling()
                                self.exceed_handling.parent = self
                                self.violate_handling = Qos.Policies.Policy.Policing.CardFamily2.Rate.Actions.ViolateHandling()
                                self.violate_handling.parent = self


                            class ConformHandling(object):
                                """
                                conform\-handling
                                
                                .. attribute:: af_drop
                                
                                	af\-drop
                                	**type**\:  int
                                
                                	**range:** 1..3
                                
                                .. attribute:: drop_precedence
                                
                                	drop\-precedence
                                	**type**\: one of the below types:
                                
                                	**type**\:  int
                                
                                	**range:** 1..7
                                
                                
                                ----
                                	**type**\:   :py:class:`DropPrecedenceEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.DropPrecedenceEnum>`
                                
                                
                                ----
                                .. attribute:: mark_dscp
                                
                                	mark\-dscp
                                	**type**\: one of the below types:
                                
                                	**type**\:  int
                                
                                	**range:** 0..63
                                
                                
                                ----
                                	**type**\:   :py:class:`DscpCodeAllValuesTypeEnum <ydk.models.ietf.ietf_qos.DscpCodeAllValuesTypeEnum>`
                                
                                
                                ----
                                .. attribute:: mark_precedence
                                
                                	mark\-precedence
                                	**type**\:  int
                                
                                	**range:** 1..3
                                
                                .. attribute:: mark_priority
                                
                                	mark\-priority
                                	**type**\: one of the below types:
                                
                                	**type**\:  int
                                
                                	**range:** 1..7
                                
                                
                                ----
                                	**type**\:   :py:class:`MarkPriorityEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.MarkPriorityEnum>`
                                
                                
                                ----
                                .. attribute:: no_action
                                
                                	no\-action
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                

                                """

                                _prefix = 'qos'
                                _revision = '2016-10-20'

                                def __init__(self):
                                    self.parent = None
                                    self.af_drop = None
                                    self.drop_precedence = None
                                    self.mark_dscp = None
                                    self.mark_precedence = None
                                    self.mark_priority = None
                                    self.no_action = None

                                class DropPrecedenceEnum(Enum):
                                    """
                                    DropPrecedenceEnum

                                    drop\-precedence

                                    .. data:: ignore = 0

                                    	ignore

                                    """

                                    ignore = 0


                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                        return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily2.Rate.Actions.ConformHandling.DropPrecedenceEnum']


                                class MarkPriorityEnum(Enum):
                                    """
                                    MarkPriorityEnum

                                    mark\-priority

                                    .. data:: ignore = 0

                                    	ignore

                                    """

                                    ignore = 0


                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                        return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily2.Rate.Actions.ConformHandling.MarkPriorityEnum']


                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-qos:conform-handling'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.af_drop is not None:
                                        return True

                                    if self.drop_precedence is not None:
                                        return True

                                    if self.mark_dscp is not None:
                                        return True

                                    if self.mark_precedence is not None:
                                        return True

                                    if self.mark_priority is not None:
                                        return True

                                    if self.no_action is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily2.Rate.Actions.ConformHandling']['meta_info']


                            class ExceedHandling(object):
                                """
                                exceed\-handling
                                
                                .. attribute:: af_drop
                                
                                	af\-drop
                                	**type**\:  int
                                
                                	**range:** 1..3
                                
                                .. attribute:: drop_packet
                                
                                	drop\-packet
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: drop_precedence
                                
                                	drop\-precedence
                                	**type**\: one of the below types:
                                
                                	**type**\:  int
                                
                                	**range:** 1..7
                                
                                
                                ----
                                	**type**\:   :py:class:`DropPrecedenceEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.DropPrecedenceEnum>`
                                
                                
                                ----
                                .. attribute:: mark_dscp
                                
                                	mark\-dscp
                                	**type**\: one of the below types:
                                
                                	**type**\:  int
                                
                                	**range:** 0..63
                                
                                
                                ----
                                	**type**\:   :py:class:`DscpCodeAllValuesTypeEnum <ydk.models.ietf.ietf_qos.DscpCodeAllValuesTypeEnum>`
                                
                                
                                ----
                                .. attribute:: mark_precedence
                                
                                	mark\-precedence
                                	**type**\:  int
                                
                                	**range:** 1..3
                                
                                .. attribute:: mark_priority
                                
                                	mark\-priority
                                	**type**\: one of the below types:
                                
                                	**type**\:  int
                                
                                	**range:** 1..7
                                
                                
                                ----
                                	**type**\:   :py:class:`MarkPriorityEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.MarkPriorityEnum>`
                                
                                
                                ----
                                .. attribute:: no_action
                                
                                	no\-action
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                

                                """

                                _prefix = 'qos'
                                _revision = '2016-10-20'

                                def __init__(self):
                                    self.parent = None
                                    self.af_drop = None
                                    self.drop_packet = None
                                    self.drop_precedence = None
                                    self.mark_dscp = None
                                    self.mark_precedence = None
                                    self.mark_priority = None
                                    self.no_action = None

                                class DropPrecedenceEnum(Enum):
                                    """
                                    DropPrecedenceEnum

                                    drop\-precedence

                                    .. data:: ignore = 0

                                    	ignore

                                    """

                                    ignore = 0


                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                        return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily2.Rate.Actions.ExceedHandling.DropPrecedenceEnum']


                                class MarkPriorityEnum(Enum):
                                    """
                                    MarkPriorityEnum

                                    mark\-priority

                                    .. data:: ignore = 0

                                    	ignore

                                    """

                                    ignore = 0


                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                        return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily2.Rate.Actions.ExceedHandling.MarkPriorityEnum']


                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-qos:exceed-handling'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.af_drop is not None:
                                        return True

                                    if self.drop_packet is not None:
                                        return True

                                    if self.drop_precedence is not None:
                                        return True

                                    if self.mark_dscp is not None:
                                        return True

                                    if self.mark_precedence is not None:
                                        return True

                                    if self.mark_priority is not None:
                                        return True

                                    if self.no_action is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily2.Rate.Actions.ExceedHandling']['meta_info']


                            class ViolateHandling(object):
                                """
                                violate\-handling
                                
                                .. attribute:: af_drop
                                
                                	af\-drop
                                	**type**\:  int
                                
                                	**range:** 1..3
                                
                                .. attribute:: drop_packet
                                
                                	drop\-packet
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: drop_precedence
                                
                                	drop\-precedence
                                	**type**\: one of the below types:
                                
                                	**type**\:  int
                                
                                	**range:** 1..7
                                
                                
                                ----
                                	**type**\:   :py:class:`DropPrecedenceEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.DropPrecedenceEnum>`
                                
                                
                                ----
                                .. attribute:: mark_dscp
                                
                                	mark\-dscp
                                	**type**\: one of the below types:
                                
                                	**type**\:  int
                                
                                	**range:** 0..63
                                
                                
                                ----
                                	**type**\:   :py:class:`DscpCodeAllValuesTypeEnum <ydk.models.ietf.ietf_qos.DscpCodeAllValuesTypeEnum>`
                                
                                
                                ----
                                .. attribute:: mark_precedence
                                
                                	mark\-precedence
                                	**type**\:  int
                                
                                	**range:** 1..3
                                
                                .. attribute:: mark_priority
                                
                                	mark\-priority
                                	**type**\: one of the below types:
                                
                                	**type**\:  int
                                
                                	**range:** 1..7
                                
                                
                                ----
                                	**type**\:   :py:class:`MarkPriorityEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.MarkPriorityEnum>`
                                
                                
                                ----
                                .. attribute:: no_action
                                
                                	no\-action
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                

                                """

                                _prefix = 'qos'
                                _revision = '2016-10-20'

                                def __init__(self):
                                    self.parent = None
                                    self.af_drop = None
                                    self.drop_packet = None
                                    self.drop_precedence = None
                                    self.mark_dscp = None
                                    self.mark_precedence = None
                                    self.mark_priority = None
                                    self.no_action = None

                                class DropPrecedenceEnum(Enum):
                                    """
                                    DropPrecedenceEnum

                                    drop\-precedence

                                    .. data:: ignore = 0

                                    	ignore

                                    """

                                    ignore = 0


                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                        return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily2.Rate.Actions.ViolateHandling.DropPrecedenceEnum']


                                class MarkPriorityEnum(Enum):
                                    """
                                    MarkPriorityEnum

                                    mark\-priority

                                    .. data:: ignore = 0

                                    	ignore

                                    """

                                    ignore = 0


                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                        return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily2.Rate.Actions.ViolateHandling.MarkPriorityEnum']


                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-qos:violate-handling'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.af_drop is not None:
                                        return True

                                    if self.drop_packet is not None:
                                        return True

                                    if self.drop_precedence is not None:
                                        return True

                                    if self.mark_dscp is not None:
                                        return True

                                    if self.mark_precedence is not None:
                                        return True

                                    if self.mark_priority is not None:
                                        return True

                                    if self.no_action is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily2.Rate.Actions.ViolateHandling']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-qos:actions'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.conform_handling is not None and self.conform_handling._has_data():
                                    return True

                                if self.exceed_handling is not None and self.exceed_handling._has_data():
                                    return True

                                if self.violate_handling is not None and self.violate_handling._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily2.Rate.Actions']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-qos:rate'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.actions is not None and self.actions._has_data():
                                return True

                            if self.bit_rate is not None:
                                return True

                            if self.burst is not None:
                                return True

                            if self.counters is not None and self.counters._has_data():
                                return True

                            if self.excess_burst is not None:
                                return True

                            if self.hierarchical_counters is not None and self.hierarchical_counters._has_data():
                                return True

                            if self.informational is not None:
                                return True

                            if self.time_burst is not None:
                                return True

                            if self.time_excess_burst is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_qos as meta
                            return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily2.Rate']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-qos:card-family-2'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.af_drop is not None:
                            return True

                        if self.drop_precedence is not None:
                            return True

                        if self.mark_dscp is not None:
                            return True

                        if self.mark_precedence is not None:
                            return True

                        if self.mark_priority is not None:
                            return True

                        if self.policy is not None and self.policy._has_data():
                            return True

                        if self.rate is not None and self.rate._has_data():
                            return True

                        if self.rate_calculation_exclude_layer_2_overhead is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_qos as meta
                        return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily2']['meta_info']


                class CardFamily3(object):
                    """
                    card\-family\-3
                    
                    .. attribute:: af_drop
                    
                    	af\-drop
                    	**type**\:  int
                    
                    	**range:** 1..3
                    
                    .. attribute:: drop_precedence
                    
                    	drop\-precedence
                    	**type**\: one of the below types:
                    
                    	**type**\:  int
                    
                    	**range:** 1..7
                    
                    
                    ----
                    	**type**\:   :py:class:`DropPrecedenceEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.DropPrecedenceEnum>`
                    
                    
                    ----
                    .. attribute:: mark_dscp
                    
                    	mark\-dscp
                    	**type**\: one of the below types:
                    
                    	**type**\:  int
                    
                    	**range:** 0..63
                    
                    
                    ----
                    	**type**\:   :py:class:`DscpCodeAllValuesTypeEnum <ydk.models.ietf.ietf_qos.DscpCodeAllValuesTypeEnum>`
                    
                    
                    ----
                    .. attribute:: mark_precedence
                    
                    	mark\-precedence
                    	**type**\:  int
                    
                    	**range:** 1..3
                    
                    .. attribute:: mark_priority
                    
                    	mark\-priority
                    	**type**\: one of the below types:
                    
                    	**type**\:  int
                    
                    	**range:** 1..7
                    
                    
                    ----
                    	**type**\:   :py:class:`MarkPriorityEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.MarkPriorityEnum>`
                    
                    
                    ----
                    .. attribute:: policy
                    
                    	policy
                    	**type**\:   :py:class:`Policy_ <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily3.Policy_>`
                    
                    .. attribute:: rate
                    
                    	Specify rate limits inline
                    	**type**\:   :py:class:`Rate <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily3.Rate>`
                    
                    .. attribute:: rate_calculation_exclude_layer_2_overhead
                    
                    	Specify that rate calculation excludes the size ofLayer 2 overhead for the layer 3 circuit on which a policy is applied
                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                    
                    

                    """

                    _prefix = 'qos'
                    _revision = '2016-10-20'

                    def __init__(self):
                        self.parent = None
                        self.af_drop = None
                        self.drop_precedence = None
                        self.mark_dscp = None
                        self.mark_precedence = None
                        self.mark_priority = None
                        self.policy = Qos.Policies.Policy.Policing.CardFamily3.Policy_()
                        self.policy.parent = self
                        self.rate = Qos.Policies.Policy.Policing.CardFamily3.Rate()
                        self.rate.parent = self
                        self.rate_calculation_exclude_layer_2_overhead = None

                    class DropPrecedenceEnum(Enum):
                        """
                        DropPrecedenceEnum

                        drop\-precedence

                        .. data:: ignore = 0

                        	ignore

                        """

                        ignore = 0


                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_qos as meta
                            return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily3.DropPrecedenceEnum']


                    class MarkPriorityEnum(Enum):
                        """
                        MarkPriorityEnum

                        mark\-priority

                        .. data:: ignore = 0

                        	ignore

                        """

                        ignore = 0


                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_qos as meta
                            return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily3.MarkPriorityEnum']



                    class Policy_(object):
                        """
                        policy
                        
                        .. attribute:: access_group
                        
                        	access\-group
                        	**type**\:   :py:class:`AccessGroup <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily3.Policy_.AccessGroup>`
                        
                        .. attribute:: class_group
                        
                        	Reference a previously defined class
                        	**type**\:   :py:class:`ClassGroup <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily3.Policy_.ClassGroup>`
                        
                        

                        """

                        _prefix = 'qos'
                        _revision = '2016-10-20'

                        def __init__(self):
                            self.parent = None
                            self.access_group = Qos.Policies.Policy.Policing.CardFamily3.Policy_.AccessGroup()
                            self.access_group.parent = self
                            self.class_group = Qos.Policies.Policy.Policing.CardFamily3.Policy_.ClassGroup()
                            self.class_group.parent = self


                        class ClassGroup(object):
                            """
                            Reference a previously defined class
                            
                            .. attribute:: class_group_reference
                            
                            	class\-group\-reference
                            	**type**\:  str
                            
                            	**refers to**\:  :py:class:`name <ydk.models.ietf.ietf_qos.Qos.ClassDefinitions.ClassDefinition>`
                            
                            .. attribute:: classes
                            
                            	classes
                            	**type**\:   :py:class:`Classes <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily3.Policy_.ClassGroup.Classes>`
                            
                            

                            """

                            _prefix = 'qos'
                            _revision = '2016-10-20'

                            def __init__(self):
                                self.parent = None
                                self.class_group_reference = None
                                self.classes = Qos.Policies.Policy.Policing.CardFamily3.Policy_.ClassGroup.Classes()
                                self.classes.parent = self


                            class Classes(object):
                                """
                                classes
                                
                                .. attribute:: class_
                                
                                	class
                                	**type**\: list of    :py:class:`Class_ <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily3.Policy_.ClassGroup.Classes.Class_>`
                                
                                

                                """

                                _prefix = 'qos'
                                _revision = '2016-10-20'

                                def __init__(self):
                                    self.parent = None
                                    self.class_ = YList()
                                    self.class_.parent = self
                                    self.class_.name = 'class_'


                                class Class_(object):
                                    """
                                    class
                                    
                                    .. attribute:: name  <key>
                                    
                                    	name
                                    	**type**\:  str
                                    
                                    	**length:** 1..39
                                    
                                    	**refers to**\:  :py:class:`class_ <ydk.models.ietf.ietf_qos.Qos.ClassDefinitions.ClassDefinition.Qos_>`
                                    
                                    .. attribute:: packet_handling
                                    
                                    	packet\-handling
                                    	**type**\:   :py:class:`PacketHandling <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling>`
                                    
                                    

                                    """

                                    _prefix = 'qos'
                                    _revision = '2016-10-20'

                                    def __init__(self):
                                        self.parent = None
                                        self.name = None
                                        self.packet_handling = Qos.Policies.Policy.Policing.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling()
                                        self.packet_handling.parent = self


                                    class PacketHandling(object):
                                        """
                                        packet\-handling
                                        
                                        .. attribute:: af_drop
                                        
                                        	af\-drop
                                        	**type**\:  int
                                        
                                        	**range:** 1..3
                                        
                                        .. attribute:: bit_rate
                                        
                                        	bit\-rate
                                        	**type**\:   :py:class:`BitRate <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate>`
                                        
                                        .. attribute:: drop_precedence
                                        
                                        	drop\-precedence
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  int
                                        
                                        	**range:** 1..7
                                        
                                        
                                        ----
                                        	**type**\:   :py:class:`DropPrecedenceEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.DropPrecedenceEnum>`
                                        
                                        
                                        ----
                                        .. attribute:: mark_dscp
                                        
                                        	mark\-dscp
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  int
                                        
                                        	**range:** 0..63
                                        
                                        
                                        ----
                                        	**type**\:   :py:class:`DscpCodeAllValuesTypeEnum <ydk.models.ietf.ietf_qos.DscpCodeAllValuesTypeEnum>`
                                        
                                        
                                        ----
                                        .. attribute:: mark_precedence
                                        
                                        	mark\-precedence
                                        	**type**\:  int
                                        
                                        	**range:** 1..3
                                        
                                        .. attribute:: mark_priority
                                        
                                        	mark\-priority
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  int
                                        
                                        	**range:** 1..7
                                        
                                        
                                        ----
                                        	**type**\:   :py:class:`MarkPriorityEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Policy_.ClassGroup.Classes.Class_.PacketHandling.MarkPriorityEnum>`
                                        
                                        
                                        ----
                                        .. attribute:: parent_class
                                        
                                        	parent\-class
                                        	**type**\:  str
                                        
                                        .. attribute:: percentage
                                        
                                        	percentage
                                        	**type**\:   :py:class:`Percentage <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage>`
                                        
                                        

                                        """

                                        _prefix = 'qos'
                                        _revision = '2016-10-20'

                                        def __init__(self):
                                            self.parent = None
                                            self.af_drop = None
                                            self.bit_rate = Qos.Policies.Policy.Policing.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate()
                                            self.bit_rate.parent = self
                                            self.drop_precedence = None
                                            self.mark_dscp = None
                                            self.mark_precedence = None
                                            self.mark_priority = None
                                            self.parent_class = None
                                            self.percentage = Qos.Policies.Policy.Policing.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage()
                                            self.percentage.parent = self

                                        class DropPrecedenceEnum(Enum):
                                            """
                                            DropPrecedenceEnum

                                            drop\-precedence

                                            .. data:: ignore = 0

                                            	ignore

                                            """

                                            ignore = 0


                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.ietf._meta import _ietf_qos as meta
                                                return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling.DropPrecedenceEnum']


                                        class MarkPriorityEnum(Enum):
                                            """
                                            MarkPriorityEnum

                                            mark\-priority

                                            .. data:: ignore = 0

                                            	ignore

                                            """

                                            ignore = 0


                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.ietf._meta import _ietf_qos as meta
                                                return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling.MarkPriorityEnum']



                                        class BitRate(object):
                                            """
                                            bit\-rate
                                            
                                            .. attribute:: actions
                                            
                                            	actions
                                            	**type**\:   :py:class:`Actions <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions>`
                                            
                                            .. attribute:: bit_rate
                                            
                                            	bit\-rate
                                            	**type**\:  int
                                            
                                            	**range:** 66..100000000
                                            
                                            .. attribute:: burst
                                            
                                            	burst
                                            	**type**\:  int
                                            
                                            	**range:** 1..4250000000
                                            
                                            	**units**\: byte
                                            
                                            .. attribute:: counters
                                            
                                            	counters
                                            	**type**\:   :py:class:`Counters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Counters>`
                                            
                                            	**presence node**\: True
                                            
                                            .. attribute:: excess_burst
                                            
                                            	excess\-burst
                                            	**type**\:  int
                                            
                                            	**range:** 1..4250000000
                                            
                                            	**units**\: byte
                                            
                                            .. attribute:: hierarchical_counters
                                            
                                            	hierarchical\-counters
                                            	**type**\:   :py:class:`HierarchicalCounters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.HierarchicalCounters>`
                                            
                                            	**presence node**\: True
                                            
                                            .. attribute:: time_burst
                                            
                                            	time\-burst
                                            	**type**\:  int
                                            
                                            	**range:** 1..10000
                                            
                                            	**units**\: millisecond
                                            
                                            .. attribute:: time_excess_burst
                                            
                                            	time\-excess\-burst
                                            	**type**\:  int
                                            
                                            	**range:** 1..10000
                                            
                                            

                                            """

                                            _prefix = 'qos'
                                            _revision = '2016-10-20'

                                            def __init__(self):
                                                self.parent = None
                                                self.actions = Qos.Policies.Policy.Policing.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions()
                                                self.actions.parent = self
                                                self.bit_rate = None
                                                self.burst = None
                                                self.counters = None
                                                self.excess_burst = None
                                                self.hierarchical_counters = None
                                                self.time_burst = None
                                                self.time_excess_burst = None


                                            class Counters(object):
                                                """
                                                counters
                                                
                                                .. attribute:: hierarchical_counters
                                                
                                                	hierarchical\-counters
                                                	**type**\:   :py:class:`HierarchicalCounters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Counters.HierarchicalCounters>`
                                                
                                                	**presence node**\: True
                                                
                                                .. attribute:: _is_presence
                                                
                                                	Is present if this instance represents presence container else not
                                                	**type**\: bool
                                                
                                                

                                                This class is a :ref:`presence class<presence-class>`

                                                """

                                                _prefix = 'qos'
                                                _revision = '2016-10-20'

                                                def __init__(self):
                                                    self.parent = None
                                                    self._is_presence = True
                                                    self.hierarchical_counters = None


                                                class HierarchicalCounters(object):
                                                    """
                                                    hierarchical\-counters
                                                    
                                                    .. attribute:: dual_stack
                                                    
                                                    	dual\-stack
                                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                                    
                                                    .. attribute:: _is_presence
                                                    
                                                    	Is present if this instance represents presence container else not
                                                    	**type**\: bool
                                                    
                                                    

                                                    This class is a :ref:`presence class<presence-class>`

                                                    """

                                                    _prefix = 'qos'
                                                    _revision = '2016-10-20'

                                                    def __init__(self):
                                                        self.parent = None
                                                        self._is_presence = True
                                                        self.dual_stack = None

                                                    @property
                                                    def _common_path(self):
                                                        if self.parent is None:
                                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                                        return self.parent._common_path +'/ietf-qos:hierarchical-counters'

                                                    def is_config(self):
                                                        ''' Returns True if this instance represents config data else returns False '''
                                                        return True

                                                    def _has_data(self):
                                                        if not self.is_config():
                                                            return False
                                                        if self._is_presence:
                                                            return True
                                                        if self.dual_stack is not None:
                                                            return True

                                                        return False

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                                        return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Counters.HierarchicalCounters']['meta_info']

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/ietf-qos:counters'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self._is_presence:
                                                        return True
                                                    if self.hierarchical_counters is not None and self.hierarchical_counters._has_data():
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                                    return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Counters']['meta_info']


                                            class HierarchicalCounters(object):
                                                """
                                                hierarchical\-counters
                                                
                                                .. attribute:: dual_stack
                                                
                                                	dual\-stack
                                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                                
                                                .. attribute:: _is_presence
                                                
                                                	Is present if this instance represents presence container else not
                                                	**type**\: bool
                                                
                                                

                                                This class is a :ref:`presence class<presence-class>`

                                                """

                                                _prefix = 'qos'
                                                _revision = '2016-10-20'

                                                def __init__(self):
                                                    self.parent = None
                                                    self._is_presence = True
                                                    self.dual_stack = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/ietf-qos:hierarchical-counters'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self._is_presence:
                                                        return True
                                                    if self.dual_stack is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                                    return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.HierarchicalCounters']['meta_info']


                                            class Actions(object):
                                                """
                                                actions
                                                
                                                .. attribute:: conform_handling
                                                
                                                	conform\-handling
                                                	**type**\:   :py:class:`ConformHandling <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ConformHandling>`
                                                
                                                .. attribute:: exceed_handling
                                                
                                                	exceed\-handling
                                                	**type**\:   :py:class:`ExceedHandling <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ExceedHandling>`
                                                
                                                

                                                """

                                                _prefix = 'qos'
                                                _revision = '2016-10-20'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.conform_handling = Qos.Policies.Policy.Policing.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ConformHandling()
                                                    self.conform_handling.parent = self
                                                    self.exceed_handling = Qos.Policies.Policy.Policing.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ExceedHandling()
                                                    self.exceed_handling.parent = self


                                                class ConformHandling(object):
                                                    """
                                                    conform\-handling
                                                    
                                                    .. attribute:: af_drop
                                                    
                                                    	af\-drop
                                                    	**type**\:  int
                                                    
                                                    	**range:** 1..3
                                                    
                                                    .. attribute:: drop_precedence
                                                    
                                                    	drop\-precedence
                                                    	**type**\: one of the below types:
                                                    
                                                    	**type**\:  int
                                                    
                                                    	**range:** 1..7
                                                    
                                                    
                                                    ----
                                                    	**type**\:   :py:class:`DropPrecedenceEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.DropPrecedenceEnum>`
                                                    
                                                    
                                                    ----
                                                    .. attribute:: mark_dscp
                                                    
                                                    	mark\-dscp
                                                    	**type**\: one of the below types:
                                                    
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..63
                                                    
                                                    
                                                    ----
                                                    	**type**\:   :py:class:`DscpCodeAllValuesTypeEnum <ydk.models.ietf.ietf_qos.DscpCodeAllValuesTypeEnum>`
                                                    
                                                    
                                                    ----
                                                    .. attribute:: mark_precedence
                                                    
                                                    	mark\-precedence
                                                    	**type**\:  int
                                                    
                                                    	**range:** 1..3
                                                    
                                                    .. attribute:: mark_priority
                                                    
                                                    	mark\-priority
                                                    	**type**\: one of the below types:
                                                    
                                                    	**type**\:  int
                                                    
                                                    	**range:** 1..7
                                                    
                                                    
                                                    ----
                                                    	**type**\:   :py:class:`MarkPriorityEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.MarkPriorityEnum>`
                                                    
                                                    
                                                    ----
                                                    .. attribute:: no_action
                                                    
                                                    	no\-action
                                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                                    
                                                    

                                                    """

                                                    _prefix = 'qos'
                                                    _revision = '2016-10-20'

                                                    def __init__(self):
                                                        self.parent = None
                                                        self.af_drop = None
                                                        self.drop_precedence = None
                                                        self.mark_dscp = None
                                                        self.mark_precedence = None
                                                        self.mark_priority = None
                                                        self.no_action = None

                                                    class DropPrecedenceEnum(Enum):
                                                        """
                                                        DropPrecedenceEnum

                                                        drop\-precedence

                                                        .. data:: ignore = 0

                                                        	ignore

                                                        """

                                                        ignore = 0


                                                        @staticmethod
                                                        def _meta_info():
                                                            from ydk.models.ietf._meta import _ietf_qos as meta
                                                            return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ConformHandling.DropPrecedenceEnum']


                                                    class MarkPriorityEnum(Enum):
                                                        """
                                                        MarkPriorityEnum

                                                        mark\-priority

                                                        .. data:: ignore = 0

                                                        	ignore

                                                        """

                                                        ignore = 0


                                                        @staticmethod
                                                        def _meta_info():
                                                            from ydk.models.ietf._meta import _ietf_qos as meta
                                                            return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ConformHandling.MarkPriorityEnum']


                                                    @property
                                                    def _common_path(self):
                                                        if self.parent is None:
                                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                                        return self.parent._common_path +'/ietf-qos:conform-handling'

                                                    def is_config(self):
                                                        ''' Returns True if this instance represents config data else returns False '''
                                                        return True

                                                    def _has_data(self):
                                                        if not self.is_config():
                                                            return False
                                                        if self.af_drop is not None:
                                                            return True

                                                        if self.drop_precedence is not None:
                                                            return True

                                                        if self.mark_dscp is not None:
                                                            return True

                                                        if self.mark_precedence is not None:
                                                            return True

                                                        if self.mark_priority is not None:
                                                            return True

                                                        if self.no_action is not None:
                                                            return True

                                                        return False

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                                        return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ConformHandling']['meta_info']


                                                class ExceedHandling(object):
                                                    """
                                                    exceed\-handling
                                                    
                                                    .. attribute:: af_drop
                                                    
                                                    	af\-drop
                                                    	**type**\:  int
                                                    
                                                    	**range:** 1..3
                                                    
                                                    .. attribute:: drop_packet
                                                    
                                                    	drop\-packet
                                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                                    
                                                    .. attribute:: drop_precedence
                                                    
                                                    	drop\-precedence
                                                    	**type**\: one of the below types:
                                                    
                                                    	**type**\:  int
                                                    
                                                    	**range:** 1..7
                                                    
                                                    
                                                    ----
                                                    	**type**\:   :py:class:`DropPrecedenceEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.DropPrecedenceEnum>`
                                                    
                                                    
                                                    ----
                                                    .. attribute:: mark_dscp
                                                    
                                                    	mark\-dscp
                                                    	**type**\: one of the below types:
                                                    
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..63
                                                    
                                                    
                                                    ----
                                                    	**type**\:   :py:class:`DscpCodeAllValuesTypeEnum <ydk.models.ietf.ietf_qos.DscpCodeAllValuesTypeEnum>`
                                                    
                                                    
                                                    ----
                                                    .. attribute:: mark_precedence
                                                    
                                                    	mark\-precedence
                                                    	**type**\:  int
                                                    
                                                    	**range:** 1..3
                                                    
                                                    .. attribute:: mark_priority
                                                    
                                                    	mark\-priority
                                                    	**type**\: one of the below types:
                                                    
                                                    	**type**\:  int
                                                    
                                                    	**range:** 1..7
                                                    
                                                    
                                                    ----
                                                    	**type**\:   :py:class:`MarkPriorityEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.MarkPriorityEnum>`
                                                    
                                                    
                                                    ----
                                                    .. attribute:: no_action
                                                    
                                                    	no\-action
                                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                                    
                                                    

                                                    """

                                                    _prefix = 'qos'
                                                    _revision = '2016-10-20'

                                                    def __init__(self):
                                                        self.parent = None
                                                        self.af_drop = None
                                                        self.drop_packet = None
                                                        self.drop_precedence = None
                                                        self.mark_dscp = None
                                                        self.mark_precedence = None
                                                        self.mark_priority = None
                                                        self.no_action = None

                                                    class DropPrecedenceEnum(Enum):
                                                        """
                                                        DropPrecedenceEnum

                                                        drop\-precedence

                                                        .. data:: ignore = 0

                                                        	ignore

                                                        """

                                                        ignore = 0


                                                        @staticmethod
                                                        def _meta_info():
                                                            from ydk.models.ietf._meta import _ietf_qos as meta
                                                            return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ExceedHandling.DropPrecedenceEnum']


                                                    class MarkPriorityEnum(Enum):
                                                        """
                                                        MarkPriorityEnum

                                                        mark\-priority

                                                        .. data:: ignore = 0

                                                        	ignore

                                                        """

                                                        ignore = 0


                                                        @staticmethod
                                                        def _meta_info():
                                                            from ydk.models.ietf._meta import _ietf_qos as meta
                                                            return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ExceedHandling.MarkPriorityEnum']


                                                    @property
                                                    def _common_path(self):
                                                        if self.parent is None:
                                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                                        return self.parent._common_path +'/ietf-qos:exceed-handling'

                                                    def is_config(self):
                                                        ''' Returns True if this instance represents config data else returns False '''
                                                        return True

                                                    def _has_data(self):
                                                        if not self.is_config():
                                                            return False
                                                        if self.af_drop is not None:
                                                            return True

                                                        if self.drop_packet is not None:
                                                            return True

                                                        if self.drop_precedence is not None:
                                                            return True

                                                        if self.mark_dscp is not None:
                                                            return True

                                                        if self.mark_precedence is not None:
                                                            return True

                                                        if self.mark_priority is not None:
                                                            return True

                                                        if self.no_action is not None:
                                                            return True

                                                        return False

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                                        return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ExceedHandling']['meta_info']

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/ietf-qos:actions'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.conform_handling is not None and self.conform_handling._has_data():
                                                        return True

                                                    if self.exceed_handling is not None and self.exceed_handling._has_data():
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                                    return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/ietf-qos:bit-rate'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.actions is not None and self.actions._has_data():
                                                    return True

                                                if self.bit_rate is not None:
                                                    return True

                                                if self.burst is not None:
                                                    return True

                                                if self.counters is not None and self.counters._has_data():
                                                    return True

                                                if self.excess_burst is not None:
                                                    return True

                                                if self.hierarchical_counters is not None and self.hierarchical_counters._has_data():
                                                    return True

                                                if self.time_burst is not None:
                                                    return True

                                                if self.time_excess_burst is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.ietf._meta import _ietf_qos as meta
                                                return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate']['meta_info']


                                        class Percentage(object):
                                            """
                                            percentage
                                            
                                            .. attribute:: counters
                                            
                                            	counters
                                            	**type**\:   :py:class:`Counters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage.Counters>`
                                            
                                            	**presence node**\: True
                                            
                                            .. attribute:: hierarchical_counters
                                            
                                            	hierarchical\-counters
                                            	**type**\:   :py:class:`HierarchicalCounters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage.HierarchicalCounters>`
                                            
                                            	**presence node**\: True
                                            
                                            .. attribute:: percentage
                                            
                                            	percentage
                                            	**type**\:  int
                                            
                                            	**range:** 1..100
                                            
                                            	**units**\: percent
                                            
                                            

                                            """

                                            _prefix = 'qos'
                                            _revision = '2016-10-20'

                                            def __init__(self):
                                                self.parent = None
                                                self.counters = None
                                                self.hierarchical_counters = None
                                                self.percentage = None


                                            class Counters(object):
                                                """
                                                counters
                                                
                                                .. attribute:: hierarchical_counters
                                                
                                                	hierarchical\-counters
                                                	**type**\:   :py:class:`HierarchicalCounters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage.Counters.HierarchicalCounters>`
                                                
                                                	**presence node**\: True
                                                
                                                .. attribute:: _is_presence
                                                
                                                	Is present if this instance represents presence container else not
                                                	**type**\: bool
                                                
                                                

                                                This class is a :ref:`presence class<presence-class>`

                                                """

                                                _prefix = 'qos'
                                                _revision = '2016-10-20'

                                                def __init__(self):
                                                    self.parent = None
                                                    self._is_presence = True
                                                    self.hierarchical_counters = None


                                                class HierarchicalCounters(object):
                                                    """
                                                    hierarchical\-counters
                                                    
                                                    .. attribute:: dual_stack
                                                    
                                                    	dual\-stack
                                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                                    
                                                    .. attribute:: _is_presence
                                                    
                                                    	Is present if this instance represents presence container else not
                                                    	**type**\: bool
                                                    
                                                    

                                                    This class is a :ref:`presence class<presence-class>`

                                                    """

                                                    _prefix = 'qos'
                                                    _revision = '2016-10-20'

                                                    def __init__(self):
                                                        self.parent = None
                                                        self._is_presence = True
                                                        self.dual_stack = None

                                                    @property
                                                    def _common_path(self):
                                                        if self.parent is None:
                                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                                        return self.parent._common_path +'/ietf-qos:hierarchical-counters'

                                                    def is_config(self):
                                                        ''' Returns True if this instance represents config data else returns False '''
                                                        return True

                                                    def _has_data(self):
                                                        if not self.is_config():
                                                            return False
                                                        if self._is_presence:
                                                            return True
                                                        if self.dual_stack is not None:
                                                            return True

                                                        return False

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                                        return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage.Counters.HierarchicalCounters']['meta_info']

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/ietf-qos:counters'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self._is_presence:
                                                        return True
                                                    if self.hierarchical_counters is not None and self.hierarchical_counters._has_data():
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                                    return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage.Counters']['meta_info']


                                            class HierarchicalCounters(object):
                                                """
                                                hierarchical\-counters
                                                
                                                .. attribute:: dual_stack
                                                
                                                	dual\-stack
                                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                                
                                                .. attribute:: _is_presence
                                                
                                                	Is present if this instance represents presence container else not
                                                	**type**\: bool
                                                
                                                

                                                This class is a :ref:`presence class<presence-class>`

                                                """

                                                _prefix = 'qos'
                                                _revision = '2016-10-20'

                                                def __init__(self):
                                                    self.parent = None
                                                    self._is_presence = True
                                                    self.dual_stack = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/ietf-qos:hierarchical-counters'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self._is_presence:
                                                        return True
                                                    if self.dual_stack is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                                    return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage.HierarchicalCounters']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/ietf-qos:percentage'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.counters is not None and self.counters._has_data():
                                                    return True

                                                if self.hierarchical_counters is not None and self.hierarchical_counters._has_data():
                                                    return True

                                                if self.percentage is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.ietf._meta import _ietf_qos as meta
                                                return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/ietf-qos:packet-handling'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.af_drop is not None:
                                                return True

                                            if self.bit_rate is not None and self.bit_rate._has_data():
                                                return True

                                            if self.drop_precedence is not None:
                                                return True

                                            if self.mark_dscp is not None:
                                                return True

                                            if self.mark_precedence is not None:
                                                return True

                                            if self.mark_priority is not None:
                                                return True

                                            if self.parent_class is not None:
                                                return True

                                            if self.percentage is not None and self.percentage._has_data():
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.ietf._meta import _ietf_qos as meta
                                            return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily3.Policy_.ClassGroup.Classes.Class_.PacketHandling']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')
                                        if self.name is None:
                                            raise YPYModelError('Key property name is None')

                                        return self.parent._common_path +'/ietf-qos:class[ietf-qos:name = ' + str(self.name) + ']'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.name is not None:
                                            return True

                                        if self.packet_handling is not None and self.packet_handling._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                        return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily3.Policy_.ClassGroup.Classes.Class_']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-qos:classes'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.class_ is not None:
                                        for child_ref in self.class_:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily3.Policy_.ClassGroup.Classes']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-qos:class-group'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.class_group_reference is not None:
                                    return True

                                if self.classes is not None and self.classes._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily3.Policy_.ClassGroup']['meta_info']


                        class AccessGroup(object):
                            """
                            access\-group
                            
                            .. attribute:: classes
                            
                            	classes
                            	**type**\:   :py:class:`Classes <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily3.Policy_.AccessGroup.Classes>`
                            
                            .. attribute:: ip_access_group
                            
                            	Reference an IPv4 policy
                            	**type**\:   :py:class:`IpAccessGroup <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily3.Policy_.AccessGroup.IpAccessGroup>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: ipv6_access_group
                            
                            	Reference an IPv6 policy
                            	**type**\:   :py:class:`Ipv6AccessGroup <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily3.Policy_.AccessGroup.Ipv6AccessGroup>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: l2_access_group
                            
                            	Reference a layer\-2 policy
                            	**type**\:   :py:class:`L2AccessGroup <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily3.Policy_.AccessGroup.L2AccessGroup>`
                            
                            	**presence node**\: True
                            
                            

                            """

                            _prefix = 'qos'
                            _revision = '2016-10-20'

                            def __init__(self):
                                self.parent = None
                                self.classes = Qos.Policies.Policy.Policing.CardFamily3.Policy_.AccessGroup.Classes()
                                self.classes.parent = self
                                self.ip_access_group = None
                                self.ipv6_access_group = None
                                self.l2_access_group = None


                            class IpAccessGroup(object):
                                """
                                Reference an IPv4 policy
                                
                                .. attribute:: context_name
                                
                                	context\-name
                                	**type**\:  str
                                
                                	**mandatory**\: True
                                
                                .. attribute:: policy_name
                                
                                	policy\-name
                                	**type**\:  str
                                
                                	**mandatory**\: True
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'qos'
                                _revision = '2016-10-20'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.context_name = None
                                    self.policy_name = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-qos:ip-access-group'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.context_name is not None:
                                        return True

                                    if self.policy_name is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily3.Policy_.AccessGroup.IpAccessGroup']['meta_info']


                            class Ipv6AccessGroup(object):
                                """
                                Reference an IPv6 policy
                                
                                .. attribute:: context_name
                                
                                	context\-name
                                	**type**\:  str
                                
                                	**mandatory**\: True
                                
                                .. attribute:: policy_name
                                
                                	policy\-name
                                	**type**\:  str
                                
                                	**mandatory**\: True
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'qos'
                                _revision = '2016-10-20'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.context_name = None
                                    self.policy_name = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-qos:ipv6-access-group'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.context_name is not None:
                                        return True

                                    if self.policy_name is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily3.Policy_.AccessGroup.Ipv6AccessGroup']['meta_info']


                            class L2AccessGroup(object):
                                """
                                Reference a layer\-2 policy
                                
                                .. attribute:: policy_name
                                
                                	policy\-name
                                	**type**\:  str
                                
                                	**mandatory**\: True
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'qos'
                                _revision = '2016-10-20'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.policy_name = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-qos:l2-access-group'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.policy_name is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily3.Policy_.AccessGroup.L2AccessGroup']['meta_info']


                            class Classes(object):
                                """
                                classes
                                
                                .. attribute:: class_
                                
                                	class
                                	**type**\: list of    :py:class:`Class_ <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily3.Policy_.AccessGroup.Classes.Class_>`
                                
                                

                                """

                                _prefix = 'qos'
                                _revision = '2016-10-20'

                                def __init__(self):
                                    self.parent = None
                                    self.class_ = YList()
                                    self.class_.parent = self
                                    self.class_.name = 'class_'


                                class Class_(object):
                                    """
                                    class
                                    
                                    .. attribute:: name  <key>
                                    
                                    	name
                                    	**type**\:  str
                                    
                                    .. attribute:: packet_handling
                                    
                                    	packet\-handling
                                    	**type**\:   :py:class:`PacketHandling <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily3.Policy_.AccessGroup.Classes.Class_.PacketHandling>`
                                    
                                    

                                    """

                                    _prefix = 'qos'
                                    _revision = '2016-10-20'

                                    def __init__(self):
                                        self.parent = None
                                        self.name = None
                                        self.packet_handling = Qos.Policies.Policy.Policing.CardFamily3.Policy_.AccessGroup.Classes.Class_.PacketHandling()
                                        self.packet_handling.parent = self


                                    class PacketHandling(object):
                                        """
                                        packet\-handling
                                        
                                        .. attribute:: parent_class
                                        
                                        	parent\-class
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'qos'
                                        _revision = '2016-10-20'

                                        def __init__(self):
                                            self.parent = None
                                            self.parent_class = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/ietf-qos:packet-handling'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.parent_class is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.ietf._meta import _ietf_qos as meta
                                            return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily3.Policy_.AccessGroup.Classes.Class_.PacketHandling']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')
                                        if self.name is None:
                                            raise YPYModelError('Key property name is None')

                                        return self.parent._common_path +'/ietf-qos:class[ietf-qos:name = ' + str(self.name) + ']'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.name is not None:
                                            return True

                                        if self.packet_handling is not None and self.packet_handling._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                        return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily3.Policy_.AccessGroup.Classes.Class_']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-qos:classes'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.class_ is not None:
                                        for child_ref in self.class_:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily3.Policy_.AccessGroup.Classes']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-qos:access-group'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.classes is not None and self.classes._has_data():
                                    return True

                                if self.ip_access_group is not None and self.ip_access_group._has_data():
                                    return True

                                if self.ipv6_access_group is not None and self.ipv6_access_group._has_data():
                                    return True

                                if self.l2_access_group is not None and self.l2_access_group._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily3.Policy_.AccessGroup']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-qos:policy'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.access_group is not None and self.access_group._has_data():
                                return True

                            if self.class_group is not None and self.class_group._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_qos as meta
                            return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily3.Policy_']['meta_info']


                    class Rate(object):
                        """
                        Specify rate limits inline
                        
                        .. attribute:: actions
                        
                        	actions
                        	**type**\:   :py:class:`Actions <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily3.Rate.Actions>`
                        
                        .. attribute:: bit_rate
                        
                        	bit\-rate
                        	**type**\:  int
                        
                        	**range:** 66..100000000
                        
                        .. attribute:: burst
                        
                        	burst
                        	**type**\:  int
                        
                        	**range:** 1..4250000000
                        
                        	**units**\: byte
                        
                        .. attribute:: counters
                        
                        	counters
                        	**type**\:   :py:class:`Counters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily3.Rate.Counters>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: excess_burst
                        
                        	excess\-burst
                        	**type**\:  int
                        
                        	**range:** 1..4250000000
                        
                        	**units**\: byte
                        
                        .. attribute:: hierarchical_counters
                        
                        	hierarchical\-counters
                        	**type**\:   :py:class:`HierarchicalCounters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily3.Rate.HierarchicalCounters>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: informational
                        
                        	informational
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: time_burst
                        
                        	time\-burst
                        	**type**\:  int
                        
                        	**range:** 1..10000
                        
                        	**units**\: millisecond
                        
                        .. attribute:: time_excess_burst
                        
                        	time\-excess\-burst
                        	**type**\:  int
                        
                        	**range:** 1..10000
                        
                        

                        """

                        _prefix = 'qos'
                        _revision = '2016-10-20'

                        def __init__(self):
                            self.parent = None
                            self.actions = Qos.Policies.Policy.Policing.CardFamily3.Rate.Actions()
                            self.actions.parent = self
                            self.bit_rate = None
                            self.burst = None
                            self.counters = None
                            self.excess_burst = None
                            self.hierarchical_counters = None
                            self.informational = None
                            self.time_burst = None
                            self.time_excess_burst = None


                        class Counters(object):
                            """
                            counters
                            
                            .. attribute:: hierarchical_counters
                            
                            	hierarchical\-counters
                            	**type**\:   :py:class:`HierarchicalCounters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily3.Rate.Counters.HierarchicalCounters>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'qos'
                            _revision = '2016-10-20'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.hierarchical_counters = None


                            class HierarchicalCounters(object):
                                """
                                hierarchical\-counters
                                
                                .. attribute:: dual_stack
                                
                                	dual\-stack
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'qos'
                                _revision = '2016-10-20'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.dual_stack = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-qos:hierarchical-counters'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.dual_stack is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily3.Rate.Counters.HierarchicalCounters']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-qos:counters'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.hierarchical_counters is not None and self.hierarchical_counters._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily3.Rate.Counters']['meta_info']


                        class HierarchicalCounters(object):
                            """
                            hierarchical\-counters
                            
                            .. attribute:: dual_stack
                            
                            	dual\-stack
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'qos'
                            _revision = '2016-10-20'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.dual_stack = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-qos:hierarchical-counters'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.dual_stack is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily3.Rate.HierarchicalCounters']['meta_info']


                        class Actions(object):
                            """
                            actions
                            
                            .. attribute:: conform_handling
                            
                            	conform\-handling
                            	**type**\:   :py:class:`ConformHandling <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily3.Rate.Actions.ConformHandling>`
                            
                            .. attribute:: exceed_handling
                            
                            	exceed\-handling
                            	**type**\:   :py:class:`ExceedHandling <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily3.Rate.Actions.ExceedHandling>`
                            
                            .. attribute:: violate_handling
                            
                            	violate\-handling
                            	**type**\:   :py:class:`ViolateHandling <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.CardFamily3.Rate.Actions.ViolateHandling>`
                            
                            

                            """

                            _prefix = 'qos'
                            _revision = '2016-10-20'

                            def __init__(self):
                                self.parent = None
                                self.conform_handling = Qos.Policies.Policy.Policing.CardFamily3.Rate.Actions.ConformHandling()
                                self.conform_handling.parent = self
                                self.exceed_handling = Qos.Policies.Policy.Policing.CardFamily3.Rate.Actions.ExceedHandling()
                                self.exceed_handling.parent = self
                                self.violate_handling = Qos.Policies.Policy.Policing.CardFamily3.Rate.Actions.ViolateHandling()
                                self.violate_handling.parent = self


                            class ConformHandling(object):
                                """
                                conform\-handling
                                
                                .. attribute:: af_drop
                                
                                	af\-drop
                                	**type**\:  int
                                
                                	**range:** 1..3
                                
                                .. attribute:: drop_precedence
                                
                                	drop\-precedence
                                	**type**\: one of the below types:
                                
                                	**type**\:  int
                                
                                	**range:** 1..7
                                
                                
                                ----
                                	**type**\:   :py:class:`DropPrecedenceEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.DropPrecedenceEnum>`
                                
                                
                                ----
                                .. attribute:: mark_dscp
                                
                                	mark\-dscp
                                	**type**\: one of the below types:
                                
                                	**type**\:  int
                                
                                	**range:** 0..63
                                
                                
                                ----
                                	**type**\:   :py:class:`DscpCodeAllValuesTypeEnum <ydk.models.ietf.ietf_qos.DscpCodeAllValuesTypeEnum>`
                                
                                
                                ----
                                .. attribute:: mark_precedence
                                
                                	mark\-precedence
                                	**type**\:  int
                                
                                	**range:** 1..3
                                
                                .. attribute:: mark_priority
                                
                                	mark\-priority
                                	**type**\: one of the below types:
                                
                                	**type**\:  int
                                
                                	**range:** 1..7
                                
                                
                                ----
                                	**type**\:   :py:class:`MarkPriorityEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.MarkPriorityEnum>`
                                
                                
                                ----
                                .. attribute:: no_action
                                
                                	no\-action
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                

                                """

                                _prefix = 'qos'
                                _revision = '2016-10-20'

                                def __init__(self):
                                    self.parent = None
                                    self.af_drop = None
                                    self.drop_precedence = None
                                    self.mark_dscp = None
                                    self.mark_precedence = None
                                    self.mark_priority = None
                                    self.no_action = None

                                class DropPrecedenceEnum(Enum):
                                    """
                                    DropPrecedenceEnum

                                    drop\-precedence

                                    .. data:: ignore = 0

                                    	ignore

                                    """

                                    ignore = 0


                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                        return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily3.Rate.Actions.ConformHandling.DropPrecedenceEnum']


                                class MarkPriorityEnum(Enum):
                                    """
                                    MarkPriorityEnum

                                    mark\-priority

                                    .. data:: ignore = 0

                                    	ignore

                                    """

                                    ignore = 0


                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                        return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily3.Rate.Actions.ConformHandling.MarkPriorityEnum']


                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-qos:conform-handling'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.af_drop is not None:
                                        return True

                                    if self.drop_precedence is not None:
                                        return True

                                    if self.mark_dscp is not None:
                                        return True

                                    if self.mark_precedence is not None:
                                        return True

                                    if self.mark_priority is not None:
                                        return True

                                    if self.no_action is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily3.Rate.Actions.ConformHandling']['meta_info']


                            class ExceedHandling(object):
                                """
                                exceed\-handling
                                
                                .. attribute:: af_drop
                                
                                	af\-drop
                                	**type**\:  int
                                
                                	**range:** 1..3
                                
                                .. attribute:: drop_packet
                                
                                	drop\-packet
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: drop_precedence
                                
                                	drop\-precedence
                                	**type**\: one of the below types:
                                
                                	**type**\:  int
                                
                                	**range:** 1..7
                                
                                
                                ----
                                	**type**\:   :py:class:`DropPrecedenceEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.DropPrecedenceEnum>`
                                
                                
                                ----
                                .. attribute:: mark_dscp
                                
                                	mark\-dscp
                                	**type**\: one of the below types:
                                
                                	**type**\:  int
                                
                                	**range:** 0..63
                                
                                
                                ----
                                	**type**\:   :py:class:`DscpCodeAllValuesTypeEnum <ydk.models.ietf.ietf_qos.DscpCodeAllValuesTypeEnum>`
                                
                                
                                ----
                                .. attribute:: mark_precedence
                                
                                	mark\-precedence
                                	**type**\:  int
                                
                                	**range:** 1..3
                                
                                .. attribute:: mark_priority
                                
                                	mark\-priority
                                	**type**\: one of the below types:
                                
                                	**type**\:  int
                                
                                	**range:** 1..7
                                
                                
                                ----
                                	**type**\:   :py:class:`MarkPriorityEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.MarkPriorityEnum>`
                                
                                
                                ----
                                .. attribute:: no_action
                                
                                	no\-action
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                

                                """

                                _prefix = 'qos'
                                _revision = '2016-10-20'

                                def __init__(self):
                                    self.parent = None
                                    self.af_drop = None
                                    self.drop_packet = None
                                    self.drop_precedence = None
                                    self.mark_dscp = None
                                    self.mark_precedence = None
                                    self.mark_priority = None
                                    self.no_action = None

                                class DropPrecedenceEnum(Enum):
                                    """
                                    DropPrecedenceEnum

                                    drop\-precedence

                                    .. data:: ignore = 0

                                    	ignore

                                    """

                                    ignore = 0


                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                        return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily3.Rate.Actions.ExceedHandling.DropPrecedenceEnum']


                                class MarkPriorityEnum(Enum):
                                    """
                                    MarkPriorityEnum

                                    mark\-priority

                                    .. data:: ignore = 0

                                    	ignore

                                    """

                                    ignore = 0


                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                        return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily3.Rate.Actions.ExceedHandling.MarkPriorityEnum']


                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-qos:exceed-handling'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.af_drop is not None:
                                        return True

                                    if self.drop_packet is not None:
                                        return True

                                    if self.drop_precedence is not None:
                                        return True

                                    if self.mark_dscp is not None:
                                        return True

                                    if self.mark_precedence is not None:
                                        return True

                                    if self.mark_priority is not None:
                                        return True

                                    if self.no_action is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily3.Rate.Actions.ExceedHandling']['meta_info']


                            class ViolateHandling(object):
                                """
                                violate\-handling
                                
                                .. attribute:: af_drop
                                
                                	af\-drop
                                	**type**\:  int
                                
                                	**range:** 1..3
                                
                                .. attribute:: drop_packet
                                
                                	drop\-packet
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: drop_precedence
                                
                                	drop\-precedence
                                	**type**\: one of the below types:
                                
                                	**type**\:  int
                                
                                	**range:** 1..7
                                
                                
                                ----
                                	**type**\:   :py:class:`DropPrecedenceEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.DropPrecedenceEnum>`
                                
                                
                                ----
                                .. attribute:: mark_dscp
                                
                                	mark\-dscp
                                	**type**\: one of the below types:
                                
                                	**type**\:  int
                                
                                	**range:** 0..63
                                
                                
                                ----
                                	**type**\:   :py:class:`DscpCodeAllValuesTypeEnum <ydk.models.ietf.ietf_qos.DscpCodeAllValuesTypeEnum>`
                                
                                
                                ----
                                .. attribute:: mark_precedence
                                
                                	mark\-precedence
                                	**type**\:  int
                                
                                	**range:** 1..3
                                
                                .. attribute:: mark_priority
                                
                                	mark\-priority
                                	**type**\: one of the below types:
                                
                                	**type**\:  int
                                
                                	**range:** 1..7
                                
                                
                                ----
                                	**type**\:   :py:class:`MarkPriorityEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.MarkPriorityEnum>`
                                
                                
                                ----
                                .. attribute:: no_action
                                
                                	no\-action
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                

                                """

                                _prefix = 'qos'
                                _revision = '2016-10-20'

                                def __init__(self):
                                    self.parent = None
                                    self.af_drop = None
                                    self.drop_packet = None
                                    self.drop_precedence = None
                                    self.mark_dscp = None
                                    self.mark_precedence = None
                                    self.mark_priority = None
                                    self.no_action = None

                                class DropPrecedenceEnum(Enum):
                                    """
                                    DropPrecedenceEnum

                                    drop\-precedence

                                    .. data:: ignore = 0

                                    	ignore

                                    """

                                    ignore = 0


                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                        return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily3.Rate.Actions.ViolateHandling.DropPrecedenceEnum']


                                class MarkPriorityEnum(Enum):
                                    """
                                    MarkPriorityEnum

                                    mark\-priority

                                    .. data:: ignore = 0

                                    	ignore

                                    """

                                    ignore = 0


                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                        return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily3.Rate.Actions.ViolateHandling.MarkPriorityEnum']


                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-qos:violate-handling'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.af_drop is not None:
                                        return True

                                    if self.drop_packet is not None:
                                        return True

                                    if self.drop_precedence is not None:
                                        return True

                                    if self.mark_dscp is not None:
                                        return True

                                    if self.mark_precedence is not None:
                                        return True

                                    if self.mark_priority is not None:
                                        return True

                                    if self.no_action is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily3.Rate.Actions.ViolateHandling']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-qos:actions'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.conform_handling is not None and self.conform_handling._has_data():
                                    return True

                                if self.exceed_handling is not None and self.exceed_handling._has_data():
                                    return True

                                if self.violate_handling is not None and self.violate_handling._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily3.Rate.Actions']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-qos:rate'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.actions is not None and self.actions._has_data():
                                return True

                            if self.bit_rate is not None:
                                return True

                            if self.burst is not None:
                                return True

                            if self.counters is not None and self.counters._has_data():
                                return True

                            if self.excess_burst is not None:
                                return True

                            if self.hierarchical_counters is not None and self.hierarchical_counters._has_data():
                                return True

                            if self.informational is not None:
                                return True

                            if self.time_burst is not None:
                                return True

                            if self.time_excess_burst is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_qos as meta
                            return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily3.Rate']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-qos:card-family-3'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.af_drop is not None:
                            return True

                        if self.drop_precedence is not None:
                            return True

                        if self.mark_dscp is not None:
                            return True

                        if self.mark_precedence is not None:
                            return True

                        if self.mark_priority is not None:
                            return True

                        if self.policy is not None and self.policy._has_data():
                            return True

                        if self.rate is not None and self.rate._has_data():
                            return True

                        if self.rate_calculation_exclude_layer_2_overhead is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_qos as meta
                        return meta._meta_table['Qos.Policies.Policy.Policing.CardFamily3']['meta_info']


                class Policy_(object):
                    """
                    policy
                    
                    .. attribute:: access_group
                    
                    	access\-group
                    	**type**\:   :py:class:`AccessGroup <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Policy_.AccessGroup>`
                    
                    .. attribute:: class_group
                    
                    	Reference a previously defined class
                    	**type**\:   :py:class:`ClassGroup <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Policy_.ClassGroup>`
                    
                    

                    """

                    _prefix = 'qos'
                    _revision = '2016-10-20'

                    def __init__(self):
                        self.parent = None
                        self.access_group = Qos.Policies.Policy.Policing.Policy_.AccessGroup()
                        self.access_group.parent = self
                        self.class_group = Qos.Policies.Policy.Policing.Policy_.ClassGroup()
                        self.class_group.parent = self


                    class ClassGroup(object):
                        """
                        Reference a previously defined class
                        
                        .. attribute:: class_group_reference
                        
                        	class\-group\-reference
                        	**type**\:  str
                        
                        	**refers to**\:  :py:class:`name <ydk.models.ietf.ietf_qos.Qos.ClassDefinitions.ClassDefinition>`
                        
                        .. attribute:: classes
                        
                        	classes
                        	**type**\:   :py:class:`Classes <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Policy_.ClassGroup.Classes>`
                        
                        

                        """

                        _prefix = 'qos'
                        _revision = '2016-10-20'

                        def __init__(self):
                            self.parent = None
                            self.class_group_reference = None
                            self.classes = Qos.Policies.Policy.Policing.Policy_.ClassGroup.Classes()
                            self.classes.parent = self


                        class Classes(object):
                            """
                            classes
                            
                            .. attribute:: class_
                            
                            	class
                            	**type**\: list of    :py:class:`Class_ <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Policy_.ClassGroup.Classes.Class_>`
                            
                            

                            """

                            _prefix = 'qos'
                            _revision = '2016-10-20'

                            def __init__(self):
                                self.parent = None
                                self.class_ = YList()
                                self.class_.parent = self
                                self.class_.name = 'class_'


                            class Class_(object):
                                """
                                class
                                
                                .. attribute:: name  <key>
                                
                                	name
                                	**type**\:  str
                                
                                	**length:** 1..39
                                
                                	**refers to**\:  :py:class:`class_ <ydk.models.ietf.ietf_qos.Qos.ClassDefinitions.ClassDefinition.Qos_>`
                                
                                .. attribute:: packet_handling
                                
                                	packet\-handling
                                	**type**\:   :py:class:`PacketHandling <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Policy_.ClassGroup.Classes.Class_.PacketHandling>`
                                
                                

                                """

                                _prefix = 'qos'
                                _revision = '2016-10-20'

                                def __init__(self):
                                    self.parent = None
                                    self.name = None
                                    self.packet_handling = Qos.Policies.Policy.Policing.Policy_.ClassGroup.Classes.Class_.PacketHandling()
                                    self.packet_handling.parent = self


                                class PacketHandling(object):
                                    """
                                    packet\-handling
                                    
                                    .. attribute:: af_drop
                                    
                                    	af\-drop
                                    	**type**\:  int
                                    
                                    	**range:** 1..3
                                    
                                    .. attribute:: bit_rate
                                    
                                    	bit\-rate
                                    	**type**\:   :py:class:`BitRate <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate>`
                                    
                                    .. attribute:: drop_precedence
                                    
                                    	drop\-precedence
                                    	**type**\: one of the below types:
                                    
                                    	**type**\:  int
                                    
                                    	**range:** 1..7
                                    
                                    
                                    ----
                                    	**type**\:   :py:class:`DropPrecedenceEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.DropPrecedenceEnum>`
                                    
                                    
                                    ----
                                    .. attribute:: mark_dscp
                                    
                                    	mark\-dscp
                                    	**type**\: one of the below types:
                                    
                                    	**type**\:  int
                                    
                                    	**range:** 0..63
                                    
                                    
                                    ----
                                    	**type**\:   :py:class:`DscpCodeAllValuesTypeEnum <ydk.models.ietf.ietf_qos.DscpCodeAllValuesTypeEnum>`
                                    
                                    
                                    ----
                                    .. attribute:: mark_precedence
                                    
                                    	mark\-precedence
                                    	**type**\:  int
                                    
                                    	**range:** 1..3
                                    
                                    .. attribute:: mark_priority
                                    
                                    	mark\-priority
                                    	**type**\: one of the below types:
                                    
                                    	**type**\:  int
                                    
                                    	**range:** 1..7
                                    
                                    
                                    ----
                                    	**type**\:   :py:class:`MarkPriorityEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Policy_.ClassGroup.Classes.Class_.PacketHandling.MarkPriorityEnum>`
                                    
                                    
                                    ----
                                    .. attribute:: parent_class
                                    
                                    	parent\-class
                                    	**type**\:  str
                                    
                                    .. attribute:: percentage
                                    
                                    	percentage
                                    	**type**\:   :py:class:`Percentage <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage>`
                                    
                                    

                                    """

                                    _prefix = 'qos'
                                    _revision = '2016-10-20'

                                    def __init__(self):
                                        self.parent = None
                                        self.af_drop = None
                                        self.bit_rate = Qos.Policies.Policy.Policing.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate()
                                        self.bit_rate.parent = self
                                        self.drop_precedence = None
                                        self.mark_dscp = None
                                        self.mark_precedence = None
                                        self.mark_priority = None
                                        self.parent_class = None
                                        self.percentage = Qos.Policies.Policy.Policing.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage()
                                        self.percentage.parent = self

                                    class DropPrecedenceEnum(Enum):
                                        """
                                        DropPrecedenceEnum

                                        drop\-precedence

                                        .. data:: ignore = 0

                                        	ignore

                                        """

                                        ignore = 0


                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.ietf._meta import _ietf_qos as meta
                                            return meta._meta_table['Qos.Policies.Policy.Policing.Policy_.ClassGroup.Classes.Class_.PacketHandling.DropPrecedenceEnum']


                                    class MarkPriorityEnum(Enum):
                                        """
                                        MarkPriorityEnum

                                        mark\-priority

                                        .. data:: ignore = 0

                                        	ignore

                                        """

                                        ignore = 0


                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.ietf._meta import _ietf_qos as meta
                                            return meta._meta_table['Qos.Policies.Policy.Policing.Policy_.ClassGroup.Classes.Class_.PacketHandling.MarkPriorityEnum']



                                    class BitRate(object):
                                        """
                                        bit\-rate
                                        
                                        .. attribute:: actions
                                        
                                        	actions
                                        	**type**\:   :py:class:`Actions <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions>`
                                        
                                        .. attribute:: bit_rate
                                        
                                        	bit\-rate
                                        	**type**\:  int
                                        
                                        	**range:** 66..100000000
                                        
                                        .. attribute:: burst
                                        
                                        	burst
                                        	**type**\:  int
                                        
                                        	**range:** 1..4250000000
                                        
                                        	**units**\: byte
                                        
                                        .. attribute:: counters
                                        
                                        	counters
                                        	**type**\:   :py:class:`Counters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Counters>`
                                        
                                        	**presence node**\: True
                                        
                                        .. attribute:: excess_burst
                                        
                                        	excess\-burst
                                        	**type**\:  int
                                        
                                        	**range:** 1..4250000000
                                        
                                        	**units**\: byte
                                        
                                        .. attribute:: hierarchical_counters
                                        
                                        	hierarchical\-counters
                                        	**type**\:   :py:class:`HierarchicalCounters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.HierarchicalCounters>`
                                        
                                        	**presence node**\: True
                                        
                                        .. attribute:: time_burst
                                        
                                        	time\-burst
                                        	**type**\:  int
                                        
                                        	**range:** 1..10000
                                        
                                        	**units**\: millisecond
                                        
                                        .. attribute:: time_excess_burst
                                        
                                        	time\-excess\-burst
                                        	**type**\:  int
                                        
                                        	**range:** 1..10000
                                        
                                        

                                        """

                                        _prefix = 'qos'
                                        _revision = '2016-10-20'

                                        def __init__(self):
                                            self.parent = None
                                            self.actions = Qos.Policies.Policy.Policing.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions()
                                            self.actions.parent = self
                                            self.bit_rate = None
                                            self.burst = None
                                            self.counters = None
                                            self.excess_burst = None
                                            self.hierarchical_counters = None
                                            self.time_burst = None
                                            self.time_excess_burst = None


                                        class Counters(object):
                                            """
                                            counters
                                            
                                            .. attribute:: hierarchical_counters
                                            
                                            	hierarchical\-counters
                                            	**type**\:   :py:class:`HierarchicalCounters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Counters.HierarchicalCounters>`
                                            
                                            	**presence node**\: True
                                            
                                            .. attribute:: _is_presence
                                            
                                            	Is present if this instance represents presence container else not
                                            	**type**\: bool
                                            
                                            

                                            This class is a :ref:`presence class<presence-class>`

                                            """

                                            _prefix = 'qos'
                                            _revision = '2016-10-20'

                                            def __init__(self):
                                                self.parent = None
                                                self._is_presence = True
                                                self.hierarchical_counters = None


                                            class HierarchicalCounters(object):
                                                """
                                                hierarchical\-counters
                                                
                                                .. attribute:: dual_stack
                                                
                                                	dual\-stack
                                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                                
                                                .. attribute:: _is_presence
                                                
                                                	Is present if this instance represents presence container else not
                                                	**type**\: bool
                                                
                                                

                                                This class is a :ref:`presence class<presence-class>`

                                                """

                                                _prefix = 'qos'
                                                _revision = '2016-10-20'

                                                def __init__(self):
                                                    self.parent = None
                                                    self._is_presence = True
                                                    self.dual_stack = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/ietf-qos:hierarchical-counters'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self._is_presence:
                                                        return True
                                                    if self.dual_stack is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                                    return meta._meta_table['Qos.Policies.Policy.Policing.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Counters.HierarchicalCounters']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/ietf-qos:counters'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self._is_presence:
                                                    return True
                                                if self.hierarchical_counters is not None and self.hierarchical_counters._has_data():
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.ietf._meta import _ietf_qos as meta
                                                return meta._meta_table['Qos.Policies.Policy.Policing.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Counters']['meta_info']


                                        class HierarchicalCounters(object):
                                            """
                                            hierarchical\-counters
                                            
                                            .. attribute:: dual_stack
                                            
                                            	dual\-stack
                                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                            
                                            .. attribute:: _is_presence
                                            
                                            	Is present if this instance represents presence container else not
                                            	**type**\: bool
                                            
                                            

                                            This class is a :ref:`presence class<presence-class>`

                                            """

                                            _prefix = 'qos'
                                            _revision = '2016-10-20'

                                            def __init__(self):
                                                self.parent = None
                                                self._is_presence = True
                                                self.dual_stack = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/ietf-qos:hierarchical-counters'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self._is_presence:
                                                    return True
                                                if self.dual_stack is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.ietf._meta import _ietf_qos as meta
                                                return meta._meta_table['Qos.Policies.Policy.Policing.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.HierarchicalCounters']['meta_info']


                                        class Actions(object):
                                            """
                                            actions
                                            
                                            .. attribute:: conform_handling
                                            
                                            	conform\-handling
                                            	**type**\:   :py:class:`ConformHandling <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ConformHandling>`
                                            
                                            .. attribute:: exceed_handling
                                            
                                            	exceed\-handling
                                            	**type**\:   :py:class:`ExceedHandling <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ExceedHandling>`
                                            
                                            

                                            """

                                            _prefix = 'qos'
                                            _revision = '2016-10-20'

                                            def __init__(self):
                                                self.parent = None
                                                self.conform_handling = Qos.Policies.Policy.Policing.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ConformHandling()
                                                self.conform_handling.parent = self
                                                self.exceed_handling = Qos.Policies.Policy.Policing.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ExceedHandling()
                                                self.exceed_handling.parent = self


                                            class ConformHandling(object):
                                                """
                                                conform\-handling
                                                
                                                .. attribute:: af_drop
                                                
                                                	af\-drop
                                                	**type**\:  int
                                                
                                                	**range:** 1..3
                                                
                                                .. attribute:: drop_precedence
                                                
                                                	drop\-precedence
                                                	**type**\: one of the below types:
                                                
                                                	**type**\:  int
                                                
                                                	**range:** 1..7
                                                
                                                
                                                ----
                                                	**type**\:   :py:class:`DropPrecedenceEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.DropPrecedenceEnum>`
                                                
                                                
                                                ----
                                                .. attribute:: mark_dscp
                                                
                                                	mark\-dscp
                                                	**type**\: one of the below types:
                                                
                                                	**type**\:  int
                                                
                                                	**range:** 0..63
                                                
                                                
                                                ----
                                                	**type**\:   :py:class:`DscpCodeAllValuesTypeEnum <ydk.models.ietf.ietf_qos.DscpCodeAllValuesTypeEnum>`
                                                
                                                
                                                ----
                                                .. attribute:: mark_precedence
                                                
                                                	mark\-precedence
                                                	**type**\:  int
                                                
                                                	**range:** 1..3
                                                
                                                .. attribute:: mark_priority
                                                
                                                	mark\-priority
                                                	**type**\: one of the below types:
                                                
                                                	**type**\:  int
                                                
                                                	**range:** 1..7
                                                
                                                
                                                ----
                                                	**type**\:   :py:class:`MarkPriorityEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.MarkPriorityEnum>`
                                                
                                                
                                                ----
                                                .. attribute:: no_action
                                                
                                                	no\-action
                                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                                
                                                

                                                """

                                                _prefix = 'qos'
                                                _revision = '2016-10-20'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.af_drop = None
                                                    self.drop_precedence = None
                                                    self.mark_dscp = None
                                                    self.mark_precedence = None
                                                    self.mark_priority = None
                                                    self.no_action = None

                                                class DropPrecedenceEnum(Enum):
                                                    """
                                                    DropPrecedenceEnum

                                                    drop\-precedence

                                                    .. data:: ignore = 0

                                                    	ignore

                                                    """

                                                    ignore = 0


                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                                        return meta._meta_table['Qos.Policies.Policy.Policing.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ConformHandling.DropPrecedenceEnum']


                                                class MarkPriorityEnum(Enum):
                                                    """
                                                    MarkPriorityEnum

                                                    mark\-priority

                                                    .. data:: ignore = 0

                                                    	ignore

                                                    """

                                                    ignore = 0


                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                                        return meta._meta_table['Qos.Policies.Policy.Policing.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ConformHandling.MarkPriorityEnum']


                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/ietf-qos:conform-handling'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.af_drop is not None:
                                                        return True

                                                    if self.drop_precedence is not None:
                                                        return True

                                                    if self.mark_dscp is not None:
                                                        return True

                                                    if self.mark_precedence is not None:
                                                        return True

                                                    if self.mark_priority is not None:
                                                        return True

                                                    if self.no_action is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                                    return meta._meta_table['Qos.Policies.Policy.Policing.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ConformHandling']['meta_info']


                                            class ExceedHandling(object):
                                                """
                                                exceed\-handling
                                                
                                                .. attribute:: af_drop
                                                
                                                	af\-drop
                                                	**type**\:  int
                                                
                                                	**range:** 1..3
                                                
                                                .. attribute:: drop_packet
                                                
                                                	drop\-packet
                                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                                
                                                .. attribute:: drop_precedence
                                                
                                                	drop\-precedence
                                                	**type**\: one of the below types:
                                                
                                                	**type**\:  int
                                                
                                                	**range:** 1..7
                                                
                                                
                                                ----
                                                	**type**\:   :py:class:`DropPrecedenceEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.DropPrecedenceEnum>`
                                                
                                                
                                                ----
                                                .. attribute:: mark_dscp
                                                
                                                	mark\-dscp
                                                	**type**\: one of the below types:
                                                
                                                	**type**\:  int
                                                
                                                	**range:** 0..63
                                                
                                                
                                                ----
                                                	**type**\:   :py:class:`DscpCodeAllValuesTypeEnum <ydk.models.ietf.ietf_qos.DscpCodeAllValuesTypeEnum>`
                                                
                                                
                                                ----
                                                .. attribute:: mark_precedence
                                                
                                                	mark\-precedence
                                                	**type**\:  int
                                                
                                                	**range:** 1..3
                                                
                                                .. attribute:: mark_priority
                                                
                                                	mark\-priority
                                                	**type**\: one of the below types:
                                                
                                                	**type**\:  int
                                                
                                                	**range:** 1..7
                                                
                                                
                                                ----
                                                	**type**\:   :py:class:`MarkPriorityEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.MarkPriorityEnum>`
                                                
                                                
                                                ----
                                                .. attribute:: no_action
                                                
                                                	no\-action
                                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                                
                                                

                                                """

                                                _prefix = 'qos'
                                                _revision = '2016-10-20'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.af_drop = None
                                                    self.drop_packet = None
                                                    self.drop_precedence = None
                                                    self.mark_dscp = None
                                                    self.mark_precedence = None
                                                    self.mark_priority = None
                                                    self.no_action = None

                                                class DropPrecedenceEnum(Enum):
                                                    """
                                                    DropPrecedenceEnum

                                                    drop\-precedence

                                                    .. data:: ignore = 0

                                                    	ignore

                                                    """

                                                    ignore = 0


                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                                        return meta._meta_table['Qos.Policies.Policy.Policing.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ExceedHandling.DropPrecedenceEnum']


                                                class MarkPriorityEnum(Enum):
                                                    """
                                                    MarkPriorityEnum

                                                    mark\-priority

                                                    .. data:: ignore = 0

                                                    	ignore

                                                    """

                                                    ignore = 0


                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                                        return meta._meta_table['Qos.Policies.Policy.Policing.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ExceedHandling.MarkPriorityEnum']


                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/ietf-qos:exceed-handling'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.af_drop is not None:
                                                        return True

                                                    if self.drop_packet is not None:
                                                        return True

                                                    if self.drop_precedence is not None:
                                                        return True

                                                    if self.mark_dscp is not None:
                                                        return True

                                                    if self.mark_precedence is not None:
                                                        return True

                                                    if self.mark_priority is not None:
                                                        return True

                                                    if self.no_action is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                                    return meta._meta_table['Qos.Policies.Policy.Policing.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions.ExceedHandling']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/ietf-qos:actions'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.conform_handling is not None and self.conform_handling._has_data():
                                                    return True

                                                if self.exceed_handling is not None and self.exceed_handling._has_data():
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.ietf._meta import _ietf_qos as meta
                                                return meta._meta_table['Qos.Policies.Policy.Policing.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate.Actions']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/ietf-qos:bit-rate'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.actions is not None and self.actions._has_data():
                                                return True

                                            if self.bit_rate is not None:
                                                return True

                                            if self.burst is not None:
                                                return True

                                            if self.counters is not None and self.counters._has_data():
                                                return True

                                            if self.excess_burst is not None:
                                                return True

                                            if self.hierarchical_counters is not None and self.hierarchical_counters._has_data():
                                                return True

                                            if self.time_burst is not None:
                                                return True

                                            if self.time_excess_burst is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.ietf._meta import _ietf_qos as meta
                                            return meta._meta_table['Qos.Policies.Policy.Policing.Policy_.ClassGroup.Classes.Class_.PacketHandling.BitRate']['meta_info']


                                    class Percentage(object):
                                        """
                                        percentage
                                        
                                        .. attribute:: counters
                                        
                                        	counters
                                        	**type**\:   :py:class:`Counters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage.Counters>`
                                        
                                        	**presence node**\: True
                                        
                                        .. attribute:: hierarchical_counters
                                        
                                        	hierarchical\-counters
                                        	**type**\:   :py:class:`HierarchicalCounters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage.HierarchicalCounters>`
                                        
                                        	**presence node**\: True
                                        
                                        .. attribute:: percentage
                                        
                                        	percentage
                                        	**type**\:  int
                                        
                                        	**range:** 1..100
                                        
                                        	**units**\: percent
                                        
                                        

                                        """

                                        _prefix = 'qos'
                                        _revision = '2016-10-20'

                                        def __init__(self):
                                            self.parent = None
                                            self.counters = None
                                            self.hierarchical_counters = None
                                            self.percentage = None


                                        class Counters(object):
                                            """
                                            counters
                                            
                                            .. attribute:: hierarchical_counters
                                            
                                            	hierarchical\-counters
                                            	**type**\:   :py:class:`HierarchicalCounters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage.Counters.HierarchicalCounters>`
                                            
                                            	**presence node**\: True
                                            
                                            .. attribute:: _is_presence
                                            
                                            	Is present if this instance represents presence container else not
                                            	**type**\: bool
                                            
                                            

                                            This class is a :ref:`presence class<presence-class>`

                                            """

                                            _prefix = 'qos'
                                            _revision = '2016-10-20'

                                            def __init__(self):
                                                self.parent = None
                                                self._is_presence = True
                                                self.hierarchical_counters = None


                                            class HierarchicalCounters(object):
                                                """
                                                hierarchical\-counters
                                                
                                                .. attribute:: dual_stack
                                                
                                                	dual\-stack
                                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                                
                                                .. attribute:: _is_presence
                                                
                                                	Is present if this instance represents presence container else not
                                                	**type**\: bool
                                                
                                                

                                                This class is a :ref:`presence class<presence-class>`

                                                """

                                                _prefix = 'qos'
                                                _revision = '2016-10-20'

                                                def __init__(self):
                                                    self.parent = None
                                                    self._is_presence = True
                                                    self.dual_stack = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/ietf-qos:hierarchical-counters'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self._is_presence:
                                                        return True
                                                    if self.dual_stack is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                                    return meta._meta_table['Qos.Policies.Policy.Policing.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage.Counters.HierarchicalCounters']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/ietf-qos:counters'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self._is_presence:
                                                    return True
                                                if self.hierarchical_counters is not None and self.hierarchical_counters._has_data():
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.ietf._meta import _ietf_qos as meta
                                                return meta._meta_table['Qos.Policies.Policy.Policing.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage.Counters']['meta_info']


                                        class HierarchicalCounters(object):
                                            """
                                            hierarchical\-counters
                                            
                                            .. attribute:: dual_stack
                                            
                                            	dual\-stack
                                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                            
                                            .. attribute:: _is_presence
                                            
                                            	Is present if this instance represents presence container else not
                                            	**type**\: bool
                                            
                                            

                                            This class is a :ref:`presence class<presence-class>`

                                            """

                                            _prefix = 'qos'
                                            _revision = '2016-10-20'

                                            def __init__(self):
                                                self.parent = None
                                                self._is_presence = True
                                                self.dual_stack = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/ietf-qos:hierarchical-counters'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self._is_presence:
                                                    return True
                                                if self.dual_stack is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.ietf._meta import _ietf_qos as meta
                                                return meta._meta_table['Qos.Policies.Policy.Policing.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage.HierarchicalCounters']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/ietf-qos:percentage'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.counters is not None and self.counters._has_data():
                                                return True

                                            if self.hierarchical_counters is not None and self.hierarchical_counters._has_data():
                                                return True

                                            if self.percentage is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.ietf._meta import _ietf_qos as meta
                                            return meta._meta_table['Qos.Policies.Policy.Policing.Policy_.ClassGroup.Classes.Class_.PacketHandling.Percentage']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/ietf-qos:packet-handling'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.af_drop is not None:
                                            return True

                                        if self.bit_rate is not None and self.bit_rate._has_data():
                                            return True

                                        if self.drop_precedence is not None:
                                            return True

                                        if self.mark_dscp is not None:
                                            return True

                                        if self.mark_precedence is not None:
                                            return True

                                        if self.mark_priority is not None:
                                            return True

                                        if self.parent_class is not None:
                                            return True

                                        if self.percentage is not None and self.percentage._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                        return meta._meta_table['Qos.Policies.Policy.Policing.Policy_.ClassGroup.Classes.Class_.PacketHandling']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                    if self.name is None:
                                        raise YPYModelError('Key property name is None')

                                    return self.parent._common_path +'/ietf-qos:class[ietf-qos:name = ' + str(self.name) + ']'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.name is not None:
                                        return True

                                    if self.packet_handling is not None and self.packet_handling._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Policies.Policy.Policing.Policy_.ClassGroup.Classes.Class_']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-qos:classes'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.class_ is not None:
                                    for child_ref in self.class_:
                                        if child_ref._has_data():
                                            return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.Policies.Policy.Policing.Policy_.ClassGroup.Classes']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-qos:class-group'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.class_group_reference is not None:
                                return True

                            if self.classes is not None and self.classes._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_qos as meta
                            return meta._meta_table['Qos.Policies.Policy.Policing.Policy_.ClassGroup']['meta_info']


                    class AccessGroup(object):
                        """
                        access\-group
                        
                        .. attribute:: classes
                        
                        	classes
                        	**type**\:   :py:class:`Classes <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Policy_.AccessGroup.Classes>`
                        
                        .. attribute:: ip_access_group
                        
                        	Reference an IPv4 policy
                        	**type**\:   :py:class:`IpAccessGroup <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Policy_.AccessGroup.IpAccessGroup>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: ipv6_access_group
                        
                        	Reference an IPv6 policy
                        	**type**\:   :py:class:`Ipv6AccessGroup <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Policy_.AccessGroup.Ipv6AccessGroup>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: l2_access_group
                        
                        	Reference a layer\-2 policy
                        	**type**\:   :py:class:`L2AccessGroup <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Policy_.AccessGroup.L2AccessGroup>`
                        
                        	**presence node**\: True
                        
                        

                        """

                        _prefix = 'qos'
                        _revision = '2016-10-20'

                        def __init__(self):
                            self.parent = None
                            self.classes = Qos.Policies.Policy.Policing.Policy_.AccessGroup.Classes()
                            self.classes.parent = self
                            self.ip_access_group = None
                            self.ipv6_access_group = None
                            self.l2_access_group = None


                        class IpAccessGroup(object):
                            """
                            Reference an IPv4 policy
                            
                            .. attribute:: context_name
                            
                            	context\-name
                            	**type**\:  str
                            
                            	**mandatory**\: True
                            
                            .. attribute:: policy_name
                            
                            	policy\-name
                            	**type**\:  str
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'qos'
                            _revision = '2016-10-20'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.context_name = None
                                self.policy_name = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-qos:ip-access-group'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.context_name is not None:
                                    return True

                                if self.policy_name is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.Policies.Policy.Policing.Policy_.AccessGroup.IpAccessGroup']['meta_info']


                        class Ipv6AccessGroup(object):
                            """
                            Reference an IPv6 policy
                            
                            .. attribute:: context_name
                            
                            	context\-name
                            	**type**\:  str
                            
                            	**mandatory**\: True
                            
                            .. attribute:: policy_name
                            
                            	policy\-name
                            	**type**\:  str
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'qos'
                            _revision = '2016-10-20'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.context_name = None
                                self.policy_name = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-qos:ipv6-access-group'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.context_name is not None:
                                    return True

                                if self.policy_name is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.Policies.Policy.Policing.Policy_.AccessGroup.Ipv6AccessGroup']['meta_info']


                        class L2AccessGroup(object):
                            """
                            Reference a layer\-2 policy
                            
                            .. attribute:: policy_name
                            
                            	policy\-name
                            	**type**\:  str
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'qos'
                            _revision = '2016-10-20'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.policy_name = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-qos:l2-access-group'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.policy_name is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.Policies.Policy.Policing.Policy_.AccessGroup.L2AccessGroup']['meta_info']


                        class Classes(object):
                            """
                            classes
                            
                            .. attribute:: class_
                            
                            	class
                            	**type**\: list of    :py:class:`Class_ <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Policy_.AccessGroup.Classes.Class_>`
                            
                            

                            """

                            _prefix = 'qos'
                            _revision = '2016-10-20'

                            def __init__(self):
                                self.parent = None
                                self.class_ = YList()
                                self.class_.parent = self
                                self.class_.name = 'class_'


                            class Class_(object):
                                """
                                class
                                
                                .. attribute:: name  <key>
                                
                                	name
                                	**type**\:  str
                                
                                .. attribute:: packet_handling
                                
                                	packet\-handling
                                	**type**\:   :py:class:`PacketHandling <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Policy_.AccessGroup.Classes.Class_.PacketHandling>`
                                
                                

                                """

                                _prefix = 'qos'
                                _revision = '2016-10-20'

                                def __init__(self):
                                    self.parent = None
                                    self.name = None
                                    self.packet_handling = Qos.Policies.Policy.Policing.Policy_.AccessGroup.Classes.Class_.PacketHandling()
                                    self.packet_handling.parent = self


                                class PacketHandling(object):
                                    """
                                    packet\-handling
                                    
                                    .. attribute:: parent_class
                                    
                                    	parent\-class
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'qos'
                                    _revision = '2016-10-20'

                                    def __init__(self):
                                        self.parent = None
                                        self.parent_class = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/ietf-qos:packet-handling'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.parent_class is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.ietf._meta import _ietf_qos as meta
                                        return meta._meta_table['Qos.Policies.Policy.Policing.Policy_.AccessGroup.Classes.Class_.PacketHandling']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                    if self.name is None:
                                        raise YPYModelError('Key property name is None')

                                    return self.parent._common_path +'/ietf-qos:class[ietf-qos:name = ' + str(self.name) + ']'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.name is not None:
                                        return True

                                    if self.packet_handling is not None and self.packet_handling._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Policies.Policy.Policing.Policy_.AccessGroup.Classes.Class_']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-qos:classes'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.class_ is not None:
                                    for child_ref in self.class_:
                                        if child_ref._has_data():
                                            return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.Policies.Policy.Policing.Policy_.AccessGroup.Classes']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-qos:access-group'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.classes is not None and self.classes._has_data():
                                return True

                            if self.ip_access_group is not None and self.ip_access_group._has_data():
                                return True

                            if self.ipv6_access_group is not None and self.ipv6_access_group._has_data():
                                return True

                            if self.l2_access_group is not None and self.l2_access_group._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_qos as meta
                            return meta._meta_table['Qos.Policies.Policy.Policing.Policy_.AccessGroup']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-qos:policy'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.access_group is not None and self.access_group._has_data():
                            return True

                        if self.class_group is not None and self.class_group._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_qos as meta
                        return meta._meta_table['Qos.Policies.Policy.Policing.Policy_']['meta_info']


                class Rate(object):
                    """
                    Specify rate limits inline
                    
                    .. attribute:: actions
                    
                    	actions
                    	**type**\:   :py:class:`Actions <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions>`
                    
                    .. attribute:: bit_rate
                    
                    	bit\-rate
                    	**type**\:  int
                    
                    	**range:** 66..100000000
                    
                    .. attribute:: burst
                    
                    	burst
                    	**type**\:  int
                    
                    	**range:** 1..4250000000
                    
                    	**units**\: byte
                    
                    .. attribute:: counters
                    
                    	counters
                    	**type**\:   :py:class:`Counters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Counters>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: excess_burst
                    
                    	excess\-burst
                    	**type**\:  int
                    
                    	**range:** 1..4250000000
                    
                    	**units**\: byte
                    
                    .. attribute:: hierarchical_counters
                    
                    	hierarchical\-counters
                    	**type**\:   :py:class:`HierarchicalCounters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.HierarchicalCounters>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: informational
                    
                    	informational
                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: time_burst
                    
                    	time\-burst
                    	**type**\:  int
                    
                    	**range:** 1..10000
                    
                    	**units**\: millisecond
                    
                    .. attribute:: time_excess_burst
                    
                    	time\-excess\-burst
                    	**type**\:  int
                    
                    	**range:** 1..10000
                    
                    

                    """

                    _prefix = 'qos'
                    _revision = '2016-10-20'

                    def __init__(self):
                        self.parent = None
                        self.actions = Qos.Policies.Policy.Policing.Rate.Actions()
                        self.actions.parent = self
                        self.bit_rate = None
                        self.burst = None
                        self.counters = None
                        self.excess_burst = None
                        self.hierarchical_counters = None
                        self.informational = None
                        self.time_burst = None
                        self.time_excess_burst = None


                    class Counters(object):
                        """
                        counters
                        
                        .. attribute:: hierarchical_counters
                        
                        	hierarchical\-counters
                        	**type**\:   :py:class:`HierarchicalCounters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Counters.HierarchicalCounters>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: _is_presence
                        
                        	Is present if this instance represents presence container else not
                        	**type**\: bool
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'qos'
                        _revision = '2016-10-20'

                        def __init__(self):
                            self.parent = None
                            self._is_presence = True
                            self.hierarchical_counters = None


                        class HierarchicalCounters(object):
                            """
                            hierarchical\-counters
                            
                            .. attribute:: dual_stack
                            
                            	dual\-stack
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'qos'
                            _revision = '2016-10-20'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.dual_stack = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-qos:hierarchical-counters'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.dual_stack is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.Policies.Policy.Policing.Rate.Counters.HierarchicalCounters']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-qos:counters'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self._is_presence:
                                return True
                            if self.hierarchical_counters is not None and self.hierarchical_counters._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_qos as meta
                            return meta._meta_table['Qos.Policies.Policy.Policing.Rate.Counters']['meta_info']


                    class HierarchicalCounters(object):
                        """
                        hierarchical\-counters
                        
                        .. attribute:: dual_stack
                        
                        	dual\-stack
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: _is_presence
                        
                        	Is present if this instance represents presence container else not
                        	**type**\: bool
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'qos'
                        _revision = '2016-10-20'

                        def __init__(self):
                            self.parent = None
                            self._is_presence = True
                            self.dual_stack = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-qos:hierarchical-counters'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self._is_presence:
                                return True
                            if self.dual_stack is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_qos as meta
                            return meta._meta_table['Qos.Policies.Policy.Policing.Rate.HierarchicalCounters']['meta_info']


                    class Actions(object):
                        """
                        actions
                        
                        .. attribute:: conform_handling
                        
                        	conform\-handling
                        	**type**\:   :py:class:`ConformHandling <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ConformHandling>`
                        
                        .. attribute:: exceed_handling
                        
                        	exceed\-handling
                        	**type**\:   :py:class:`ExceedHandling <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ExceedHandling>`
                        
                        .. attribute:: violate_handling
                        
                        	violate\-handling
                        	**type**\:   :py:class:`ViolateHandling <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling>`
                        
                        

                        """

                        _prefix = 'qos'
                        _revision = '2016-10-20'

                        def __init__(self):
                            self.parent = None
                            self.conform_handling = Qos.Policies.Policy.Policing.Rate.Actions.ConformHandling()
                            self.conform_handling.parent = self
                            self.exceed_handling = Qos.Policies.Policy.Policing.Rate.Actions.ExceedHandling()
                            self.exceed_handling.parent = self
                            self.violate_handling = Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling()
                            self.violate_handling.parent = self


                        class ConformHandling(object):
                            """
                            conform\-handling
                            
                            .. attribute:: af_drop
                            
                            	af\-drop
                            	**type**\:  int
                            
                            	**range:** 1..3
                            
                            .. attribute:: drop_precedence
                            
                            	drop\-precedence
                            	**type**\: one of the below types:
                            
                            	**type**\:  int
                            
                            	**range:** 1..7
                            
                            
                            ----
                            	**type**\:   :py:class:`DropPrecedenceEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.DropPrecedenceEnum>`
                            
                            
                            ----
                            .. attribute:: mark_dscp
                            
                            	mark\-dscp
                            	**type**\: one of the below types:
                            
                            	**type**\:  int
                            
                            	**range:** 0..63
                            
                            
                            ----
                            	**type**\:   :py:class:`DscpCodeAllValuesTypeEnum <ydk.models.ietf.ietf_qos.DscpCodeAllValuesTypeEnum>`
                            
                            
                            ----
                            .. attribute:: mark_precedence
                            
                            	mark\-precedence
                            	**type**\:  int
                            
                            	**range:** 1..3
                            
                            .. attribute:: mark_priority
                            
                            	mark\-priority
                            	**type**\: one of the below types:
                            
                            	**type**\:  int
                            
                            	**range:** 1..7
                            
                            
                            ----
                            	**type**\:   :py:class:`MarkPriorityEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.MarkPriorityEnum>`
                            
                            
                            ----
                            .. attribute:: no_action
                            
                            	no\-action
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            

                            """

                            _prefix = 'qos'
                            _revision = '2016-10-20'

                            def __init__(self):
                                self.parent = None
                                self.af_drop = None
                                self.drop_precedence = None
                                self.mark_dscp = None
                                self.mark_precedence = None
                                self.mark_priority = None
                                self.no_action = None

                            class DropPrecedenceEnum(Enum):
                                """
                                DropPrecedenceEnum

                                drop\-precedence

                                .. data:: ignore = 0

                                	ignore

                                """

                                ignore = 0


                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Policies.Policy.Policing.Rate.Actions.ConformHandling.DropPrecedenceEnum']


                            class MarkPriorityEnum(Enum):
                                """
                                MarkPriorityEnum

                                mark\-priority

                                .. data:: ignore = 0

                                	ignore

                                """

                                ignore = 0


                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Policies.Policy.Policing.Rate.Actions.ConformHandling.MarkPriorityEnum']


                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-qos:conform-handling'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.af_drop is not None:
                                    return True

                                if self.drop_precedence is not None:
                                    return True

                                if self.mark_dscp is not None:
                                    return True

                                if self.mark_precedence is not None:
                                    return True

                                if self.mark_priority is not None:
                                    return True

                                if self.no_action is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.Policies.Policy.Policing.Rate.Actions.ConformHandling']['meta_info']


                        class ExceedHandling(object):
                            """
                            exceed\-handling
                            
                            .. attribute:: af_drop
                            
                            	af\-drop
                            	**type**\:  int
                            
                            	**range:** 1..3
                            
                            .. attribute:: drop_packet
                            
                            	drop\-packet
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: drop_precedence
                            
                            	drop\-precedence
                            	**type**\: one of the below types:
                            
                            	**type**\:  int
                            
                            	**range:** 1..7
                            
                            
                            ----
                            	**type**\:   :py:class:`DropPrecedenceEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.DropPrecedenceEnum>`
                            
                            
                            ----
                            .. attribute:: mark_dscp
                            
                            	mark\-dscp
                            	**type**\: one of the below types:
                            
                            	**type**\:  int
                            
                            	**range:** 0..63
                            
                            
                            ----
                            	**type**\:   :py:class:`DscpCodeAllValuesTypeEnum <ydk.models.ietf.ietf_qos.DscpCodeAllValuesTypeEnum>`
                            
                            
                            ----
                            .. attribute:: mark_precedence
                            
                            	mark\-precedence
                            	**type**\:  int
                            
                            	**range:** 1..3
                            
                            .. attribute:: mark_priority
                            
                            	mark\-priority
                            	**type**\: one of the below types:
                            
                            	**type**\:  int
                            
                            	**range:** 1..7
                            
                            
                            ----
                            	**type**\:   :py:class:`MarkPriorityEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.MarkPriorityEnum>`
                            
                            
                            ----
                            .. attribute:: no_action
                            
                            	no\-action
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            

                            """

                            _prefix = 'qos'
                            _revision = '2016-10-20'

                            def __init__(self):
                                self.parent = None
                                self.af_drop = None
                                self.drop_packet = None
                                self.drop_precedence = None
                                self.mark_dscp = None
                                self.mark_precedence = None
                                self.mark_priority = None
                                self.no_action = None

                            class DropPrecedenceEnum(Enum):
                                """
                                DropPrecedenceEnum

                                drop\-precedence

                                .. data:: ignore = 0

                                	ignore

                                """

                                ignore = 0


                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Policies.Policy.Policing.Rate.Actions.ExceedHandling.DropPrecedenceEnum']


                            class MarkPriorityEnum(Enum):
                                """
                                MarkPriorityEnum

                                mark\-priority

                                .. data:: ignore = 0

                                	ignore

                                """

                                ignore = 0


                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Policies.Policy.Policing.Rate.Actions.ExceedHandling.MarkPriorityEnum']


                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-qos:exceed-handling'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.af_drop is not None:
                                    return True

                                if self.drop_packet is not None:
                                    return True

                                if self.drop_precedence is not None:
                                    return True

                                if self.mark_dscp is not None:
                                    return True

                                if self.mark_precedence is not None:
                                    return True

                                if self.mark_priority is not None:
                                    return True

                                if self.no_action is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.Policies.Policy.Policing.Rate.Actions.ExceedHandling']['meta_info']


                        class ViolateHandling(object):
                            """
                            violate\-handling
                            
                            .. attribute:: af_drop
                            
                            	af\-drop
                            	**type**\:  int
                            
                            	**range:** 1..3
                            
                            .. attribute:: drop_packet
                            
                            	drop\-packet
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: drop_precedence
                            
                            	drop\-precedence
                            	**type**\: one of the below types:
                            
                            	**type**\:  int
                            
                            	**range:** 1..7
                            
                            
                            ----
                            	**type**\:   :py:class:`DropPrecedenceEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.DropPrecedenceEnum>`
                            
                            
                            ----
                            .. attribute:: mark_dscp
                            
                            	mark\-dscp
                            	**type**\: one of the below types:
                            
                            	**type**\:  int
                            
                            	**range:** 0..63
                            
                            
                            ----
                            	**type**\:   :py:class:`DscpCodeAllValuesTypeEnum <ydk.models.ietf.ietf_qos.DscpCodeAllValuesTypeEnum>`
                            
                            
                            ----
                            .. attribute:: mark_precedence
                            
                            	mark\-precedence
                            	**type**\:  int
                            
                            	**range:** 1..3
                            
                            .. attribute:: mark_priority
                            
                            	mark\-priority
                            	**type**\: one of the below types:
                            
                            	**type**\:  int
                            
                            	**range:** 1..7
                            
                            
                            ----
                            	**type**\:   :py:class:`MarkPriorityEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.MarkPriorityEnum>`
                            
                            
                            ----
                            .. attribute:: no_action
                            
                            	no\-action
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            

                            """

                            _prefix = 'qos'
                            _revision = '2016-10-20'

                            def __init__(self):
                                self.parent = None
                                self.af_drop = None
                                self.drop_packet = None
                                self.drop_precedence = None
                                self.mark_dscp = None
                                self.mark_precedence = None
                                self.mark_priority = None
                                self.no_action = None

                            class DropPrecedenceEnum(Enum):
                                """
                                DropPrecedenceEnum

                                drop\-precedence

                                .. data:: ignore = 0

                                	ignore

                                """

                                ignore = 0


                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.DropPrecedenceEnum']


                            class MarkPriorityEnum(Enum):
                                """
                                MarkPriorityEnum

                                mark\-priority

                                .. data:: ignore = 0

                                	ignore

                                """

                                ignore = 0


                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_qos as meta
                                    return meta._meta_table['Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling.MarkPriorityEnum']


                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-qos:violate-handling'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.af_drop is not None:
                                    return True

                                if self.drop_packet is not None:
                                    return True

                                if self.drop_precedence is not None:
                                    return True

                                if self.mark_dscp is not None:
                                    return True

                                if self.mark_precedence is not None:
                                    return True

                                if self.mark_priority is not None:
                                    return True

                                if self.no_action is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.Policies.Policy.Policing.Rate.Actions.ViolateHandling']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-qos:actions'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.conform_handling is not None and self.conform_handling._has_data():
                                return True

                            if self.exceed_handling is not None and self.exceed_handling._has_data():
                                return True

                            if self.violate_handling is not None and self.violate_handling._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_qos as meta
                            return meta._meta_table['Qos.Policies.Policy.Policing.Rate.Actions']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-qos:rate'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.actions is not None and self.actions._has_data():
                            return True

                        if self.bit_rate is not None:
                            return True

                        if self.burst is not None:
                            return True

                        if self.counters is not None and self.counters._has_data():
                            return True

                        if self.excess_burst is not None:
                            return True

                        if self.hierarchical_counters is not None and self.hierarchical_counters._has_data():
                            return True

                        if self.informational is not None:
                            return True

                        if self.time_burst is not None:
                            return True

                        if self.time_excess_burst is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_qos as meta
                        return meta._meta_table['Qos.Policies.Policy.Policing.Rate']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/ietf-qos:policing'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self._is_presence:
                        return True
                    if self.af_drop is not None:
                        return True

                    if self.card_family_1 is not None and self.card_family_1._has_data():
                        return True

                    if self.card_family_2 is not None and self.card_family_2._has_data():
                        return True

                    if self.card_family_3 is not None and self.card_family_3._has_data():
                        return True

                    if self.drop_precedence is not None:
                        return True

                    if self.mark_dscp is not None:
                        return True

                    if self.mark_precedence is not None:
                        return True

                    if self.mark_priority is not None:
                        return True

                    if self.policy is not None and self.policy._has_data():
                        return True

                    if self.radius_guided is not None:
                        return True

                    if self.rate is not None and self.rate._has_data():
                        return True

                    if self.rate_calculation_exclude_layer_2_overhead is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_qos as meta
                    return meta._meta_table['Qos.Policies.Policy.Policing']['meta_info']


            class Mdrr(object):
                """
                mdrr policy
                
                .. attribute:: burst
                
                	burst
                	**type**\:  int
                
                	**range:** 1..8000000
                
                	**mandatory**\: True
                
                	**units**\: byte
                
                .. attribute:: congestion_avoidance_map_reference
                
                	congestion\-avoidance\-map\-reference
                	**type**\:  str
                
                	**refers to**\:  :py:class:`name <ydk.models.ietf.ietf_qos.Qos.CongestionAvoidanceMaps.CongestionAvoidanceMap>`
                
                .. attribute:: num_queues
                
                	num\-queues
                	**type**\:  int
                
                	**range:** 1..None \| 2..None \| 4..None \| 8..None
                
                .. attribute:: qos_mode
                
                	qos\-mode
                	**type**\:   :py:class:`QosModeEnum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Mdrr.QosModeEnum>`
                
                	**default value**\: wrr
                
                .. attribute:: queue
                
                	queue
                	**type**\: list of    :py:class:`Queue <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Mdrr.Queue>`
                
                .. attribute:: queue_map_reference
                
                	queue\-map\-reference
                	**type**\:  str
                
                	**refers to**\:  :py:class:`name <ydk.models.ietf.ietf_qos.Qos.QueueMaps.QueueMap>`
                
                .. attribute:: rate
                
                	rate
                	**type**\:  int
                
                	**range:** 56..10000000
                
                	**mandatory**\: True
                
                	**units**\: kbps
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                

                This class is a :ref:`presence class<presence-class>`

                """

                _prefix = 'qos'
                _revision = '2016-10-20'

                def __init__(self):
                    self.parent = None
                    self._is_presence = True
                    self.burst = None
                    self.congestion_avoidance_map_reference = None
                    self.num_queues = None
                    self.qos_mode = None
                    self.queue = YList()
                    self.queue.parent = self
                    self.queue.name = 'queue'
                    self.queue_map_reference = None
                    self.rate = None

                class QosModeEnum(Enum):
                    """
                    QosModeEnum

                    qos\-mode

                    .. data:: priority = 0

                    	priority

                    .. data:: strict = 1

                    	strict

                    .. data:: wrr = 2

                    	wrr

                    """

                    priority = 0

                    strict = 1

                    wrr = 2


                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_qos as meta
                        return meta._meta_table['Qos.Policies.Policy.Mdrr.QosModeEnum']



                class Queue(object):
                    """
                    queue
                    
                    .. attribute:: num  <key>
                    
                    	num
                    	**type**\:  int
                    
                    	**range:** 0..8
                    
                    .. attribute:: weight
                    
                    	weight
                    	**type**\:  int
                    
                    	**range:** 5..100
                    
                    

                    """

                    _prefix = 'qos'
                    _revision = '2016-10-20'

                    def __init__(self):
                        self.parent = None
                        self.num = None
                        self.weight = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')
                        if self.num is None:
                            raise YPYModelError('Key property num is None')

                        return self.parent._common_path +'/ietf-qos:queue[ietf-qos:num = ' + str(self.num) + ']'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.num is not None:
                            return True

                        if self.weight is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_qos as meta
                        return meta._meta_table['Qos.Policies.Policy.Mdrr.Queue']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/ietf-qos:mdrr'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self._is_presence:
                        return True
                    if self.burst is not None:
                        return True

                    if self.congestion_avoidance_map_reference is not None:
                        return True

                    if self.num_queues is not None:
                        return True

                    if self.qos_mode is not None:
                        return True

                    if self.queue is not None:
                        for child_ref in self.queue:
                            if child_ref._has_data():
                                return True

                    if self.queue_map_reference is not None:
                        return True

                    if self.rate is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_qos as meta
                    return meta._meta_table['Qos.Policies.Policy.Mdrr']['meta_info']


            class Pwfq(object):
                """
                pwfq policy
                
                .. attribute:: card_family_1
                
                	card\-family\-1
                	**type**\:   :py:class:`CardFamily1 <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Pwfq.CardFamily1>`
                
                .. attribute:: card_family_2
                
                	card\-family\-2
                	**type**\:   :py:class:`CardFamily2 <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Pwfq.CardFamily2>`
                
                .. attribute:: card_family_3
                
                	card\-family\-3
                	**type**\:   :py:class:`CardFamily3 <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Pwfq.CardFamily3>`
                
                .. attribute:: congestion_avoidance_map_reference
                
                	congestion\-avoidance\-map\-reference
                	**type**\:  str
                
                	**refers to**\:  :py:class:`name <ydk.models.ietf.ietf_qos.Qos.CongestionAvoidanceMaps.CongestionAvoidanceMap>`
                
                .. attribute:: num_queues
                
                	num\-queues
                	**type**\:  int
                
                	**range:** 1..None \| 2..None \| 4..None \| 8..None
                
                .. attribute:: queue
                
                	queue
                	**type**\: list of    :py:class:`Queue <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Pwfq.Queue>`
                
                .. attribute:: queue_map_reference
                
                	queue\-map\-reference
                	**type**\:  str
                
                	**refers to**\:  :py:class:`name <ydk.models.ietf.ietf_qos.Qos.QueueMaps.QueueMap>`
                
                .. attribute:: queue_priority_group
                
                	queue\-priority\-group
                	**type**\: list of    :py:class:`QueuePriorityGroup <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Pwfq.QueuePriorityGroup>`
                
                .. attribute:: rate_maximum
                
                	rate\-maximum
                	**type**\:   :py:class:`RateMaximum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Pwfq.RateMaximum>`
                
                	**presence node**\: True
                
                .. attribute:: rate_minimum
                
                	rate\-minimum
                	**type**\:   :py:class:`RateMinimum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Pwfq.RateMinimum>`
                
                	**presence node**\: True
                
                .. attribute:: weight
                
                	weight
                	**type**\:  int
                
                	**range:** 1..1023
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                

                This class is a :ref:`presence class<presence-class>`

                """

                _prefix = 'qos'
                _revision = '2016-10-20'

                def __init__(self):
                    self.parent = None
                    self._is_presence = True
                    self.card_family_1 = Qos.Policies.Policy.Pwfq.CardFamily1()
                    self.card_family_1.parent = self
                    self.card_family_2 = Qos.Policies.Policy.Pwfq.CardFamily2()
                    self.card_family_2.parent = self
                    self.card_family_3 = Qos.Policies.Policy.Pwfq.CardFamily3()
                    self.card_family_3.parent = self
                    self.congestion_avoidance_map_reference = None
                    self.num_queues = None
                    self.queue = YList()
                    self.queue.parent = self
                    self.queue.name = 'queue'
                    self.queue_map_reference = None
                    self.queue_priority_group = YList()
                    self.queue_priority_group.parent = self
                    self.queue_priority_group.name = 'queue_priority_group'
                    self.rate_maximum = None
                    self.rate_minimum = None
                    self.weight = None


                class CardFamily1(object):
                    """
                    card\-family\-1
                    
                    .. attribute:: congestion_avoidance_map_reference
                    
                    	congestion\-avoidance\-map\-reference
                    	**type**\:  str
                    
                    	**refers to**\:  :py:class:`name <ydk.models.ietf.ietf_qos.Qos.CongestionAvoidanceMaps.CongestionAvoidanceMap>`
                    
                    .. attribute:: num_queues
                    
                    	num\-queues
                    	**type**\:  int
                    
                    	**range:** 1..None \| 2..None \| 4..None \| 8..None
                    
                    .. attribute:: queue
                    
                    	queue
                    	**type**\: list of    :py:class:`Queue <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Pwfq.CardFamily1.Queue>`
                    
                    .. attribute:: queue_map_reference
                    
                    	queue\-map\-reference
                    	**type**\:  str
                    
                    	**refers to**\:  :py:class:`name <ydk.models.ietf.ietf_qos.Qos.QueueMaps.QueueMap>`
                    
                    .. attribute:: queue_priority_group
                    
                    	queue\-priority\-group
                    	**type**\: list of    :py:class:`QueuePriorityGroup <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Pwfq.CardFamily1.QueuePriorityGroup>`
                    
                    .. attribute:: rate_maximum
                    
                    	rate\-maximum
                    	**type**\:   :py:class:`RateMaximum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Pwfq.CardFamily1.RateMaximum>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: rate_minimum
                    
                    	rate\-minimum
                    	**type**\:   :py:class:`RateMinimum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Pwfq.CardFamily1.RateMinimum>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: weight
                    
                    	weight
                    	**type**\:  int
                    
                    	**range:** 1..1023
                    
                    

                    """

                    _prefix = 'qos'
                    _revision = '2016-10-20'

                    def __init__(self):
                        self.parent = None
                        self.congestion_avoidance_map_reference = None
                        self.num_queues = None
                        self.queue = YList()
                        self.queue.parent = self
                        self.queue.name = 'queue'
                        self.queue_map_reference = None
                        self.queue_priority_group = YList()
                        self.queue_priority_group.parent = self
                        self.queue_priority_group.name = 'queue_priority_group'
                        self.rate_maximum = None
                        self.rate_minimum = None
                        self.weight = None


                    class Queue(object):
                        """
                        queue
                        
                        .. attribute:: num  <key>
                        
                        	priority
                        	**type**\:  int
                        
                        	**range:** 0..7
                        
                        .. attribute:: priority
                        
                        	priority
                        	**type**\:  int
                        
                        	**range:** 0..7
                        
                        	**mandatory**\: True
                        
                        .. attribute:: rate_maximum
                        
                        	rate\-maximum
                        	**type**\:  int
                        
                        	**range:** 4..10000000
                        
                        	**units**\: kbps
                        
                        .. attribute:: rate_maximum_percentage
                        
                        	rate\-maximum\-percentage
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        	**units**\: percent
                        
                        .. attribute:: weight
                        
                        	weight
                        	**type**\:  int
                        
                        	**range:** 1..1023
                        
                        	**mandatory**\: True
                        
                        

                        """

                        _prefix = 'qos'
                        _revision = '2016-10-20'

                        def __init__(self):
                            self.parent = None
                            self.num = None
                            self.priority = None
                            self.rate_maximum = None
                            self.rate_maximum_percentage = None
                            self.weight = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')
                            if self.num is None:
                                raise YPYModelError('Key property num is None')

                            return self.parent._common_path +'/ietf-qos:queue[ietf-qos:num = ' + str(self.num) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.num is not None:
                                return True

                            if self.priority is not None:
                                return True

                            if self.rate_maximum is not None:
                                return True

                            if self.rate_maximum_percentage is not None:
                                return True

                            if self.weight is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_qos as meta
                            return meta._meta_table['Qos.Policies.Policy.Pwfq.CardFamily1.Queue']['meta_info']


                    class QueuePriorityGroup(object):
                        """
                        queue\-priority\-group
                        
                        .. attribute:: priority_group  <key>
                        
                        	priority\-group
                        	**type**\:  int
                        
                        	**range:** 0..7
                        
                        .. attribute:: rate_absolute
                        
                        	rate\-absolute
                        	**type**\:   :py:class:`RateAbsolute <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Pwfq.CardFamily1.QueuePriorityGroup.RateAbsolute>`
                        
                        .. attribute:: rate_percentage
                        
                        	rate\-percentage
                        	**type**\:   :py:class:`RatePercentage <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Pwfq.CardFamily1.QueuePriorityGroup.RatePercentage>`
                        
                        

                        """

                        _prefix = 'qos'
                        _revision = '2016-10-20'

                        def __init__(self):
                            self.parent = None
                            self.priority_group = None
                            self.rate_absolute = Qos.Policies.Policy.Pwfq.CardFamily1.QueuePriorityGroup.RateAbsolute()
                            self.rate_absolute.parent = self
                            self.rate_percentage = Qos.Policies.Policy.Pwfq.CardFamily1.QueuePriorityGroup.RatePercentage()
                            self.rate_percentage.parent = self


                        class RateAbsolute(object):
                            """
                            rate\-absolute
                            
                            .. attribute:: exceed
                            
                            	empty
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: rate
                            
                            	rate
                            	**type**\:  int
                            
                            	**range:** 8..100000000
                            
                            	**units**\: kbps
                            
                            

                            """

                            _prefix = 'qos'
                            _revision = '2016-10-20'

                            def __init__(self):
                                self.parent = None
                                self.exceed = None
                                self.rate = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-qos:rate-absolute'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.exceed is not None:
                                    return True

                                if self.rate is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.Policies.Policy.Pwfq.CardFamily1.QueuePriorityGroup.RateAbsolute']['meta_info']


                        class RatePercentage(object):
                            """
                            rate\-percentage
                            
                            .. attribute:: rate_percentage
                            
                            	rate\-percentage
                            	**type**\:  int
                            
                            	**range:** 1..100
                            
                            	**units**\: percent
                            
                            

                            """

                            _prefix = 'qos'
                            _revision = '2016-10-20'

                            def __init__(self):
                                self.parent = None
                                self.rate_percentage = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-qos:rate-percentage'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.rate_percentage is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.Policies.Policy.Pwfq.CardFamily1.QueuePriorityGroup.RatePercentage']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')
                            if self.priority_group is None:
                                raise YPYModelError('Key property priority_group is None')

                            return self.parent._common_path +'/ietf-qos:queue-priority-group[ietf-qos:priority-group = ' + str(self.priority_group) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.priority_group is not None:
                                return True

                            if self.rate_absolute is not None and self.rate_absolute._has_data():
                                return True

                            if self.rate_percentage is not None and self.rate_percentage._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_qos as meta
                            return meta._meta_table['Qos.Policies.Policy.Pwfq.CardFamily1.QueuePriorityGroup']['meta_info']


                    class RateMinimum(object):
                        """
                        rate\-minimum
                        
                        .. attribute:: burst
                        
                        	burst
                        	**type**\:  int
                        
                        	**range:** 64..1875000000
                        
                        	**units**\: byte
                        
                        .. attribute:: rate
                        
                        	rate\-minimum
                        	**type**\:  int
                        
                        	**range:** 8..1000000
                        
                        	**mandatory**\: True
                        
                        	**units**\: kbps
                        
                        .. attribute:: _is_presence
                        
                        	Is present if this instance represents presence container else not
                        	**type**\: bool
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'qos'
                        _revision = '2016-10-20'

                        def __init__(self):
                            self.parent = None
                            self._is_presence = True
                            self.burst = None
                            self.rate = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-qos:rate-minimum'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self._is_presence:
                                return True
                            if self.burst is not None:
                                return True

                            if self.rate is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_qos as meta
                            return meta._meta_table['Qos.Policies.Policy.Pwfq.CardFamily1.RateMinimum']['meta_info']


                    class RateMaximum(object):
                        """
                        rate\-maximum
                        
                        .. attribute:: burst
                        
                        	burst
                        	**type**\:  int
                        
                        	**range:** 64..1875000000
                        
                        	**units**\: byte
                        
                        .. attribute:: rate
                        
                        	rate\-maximum
                        	**type**\:  int
                        
                        	**range:** 8..10000000
                        
                        	**mandatory**\: True
                        
                        	**units**\: kbps
                        
                        .. attribute:: _is_presence
                        
                        	Is present if this instance represents presence container else not
                        	**type**\: bool
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'qos'
                        _revision = '2016-10-20'

                        def __init__(self):
                            self.parent = None
                            self._is_presence = True
                            self.burst = None
                            self.rate = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-qos:rate-maximum'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self._is_presence:
                                return True
                            if self.burst is not None:
                                return True

                            if self.rate is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_qos as meta
                            return meta._meta_table['Qos.Policies.Policy.Pwfq.CardFamily1.RateMaximum']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-qos:card-family-1'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.congestion_avoidance_map_reference is not None:
                            return True

                        if self.num_queues is not None:
                            return True

                        if self.queue is not None:
                            for child_ref in self.queue:
                                if child_ref._has_data():
                                    return True

                        if self.queue_map_reference is not None:
                            return True

                        if self.queue_priority_group is not None:
                            for child_ref in self.queue_priority_group:
                                if child_ref._has_data():
                                    return True

                        if self.rate_maximum is not None and self.rate_maximum._has_data():
                            return True

                        if self.rate_minimum is not None and self.rate_minimum._has_data():
                            return True

                        if self.weight is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_qos as meta
                        return meta._meta_table['Qos.Policies.Policy.Pwfq.CardFamily1']['meta_info']


                class CardFamily2(object):
                    """
                    card\-family\-2
                    
                    .. attribute:: congestion_avoidance_map_reference
                    
                    	congestion\-avoidance\-map\-reference
                    	**type**\:  str
                    
                    	**refers to**\:  :py:class:`name <ydk.models.ietf.ietf_qos.Qos.CongestionAvoidanceMaps.CongestionAvoidanceMap>`
                    
                    .. attribute:: num_queues
                    
                    	num\-queues
                    	**type**\:  int
                    
                    	**range:** 1..None \| 2..None \| 4..None \| 8..None
                    
                    .. attribute:: queue
                    
                    	queue
                    	**type**\: list of    :py:class:`Queue <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Pwfq.CardFamily2.Queue>`
                    
                    .. attribute:: queue_map_reference
                    
                    	queue\-map\-reference
                    	**type**\:  str
                    
                    	**refers to**\:  :py:class:`name <ydk.models.ietf.ietf_qos.Qos.QueueMaps.QueueMap>`
                    
                    .. attribute:: queue_priority_group
                    
                    	queue\-priority\-group
                    	**type**\: list of    :py:class:`QueuePriorityGroup <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Pwfq.CardFamily2.QueuePriorityGroup>`
                    
                    .. attribute:: rate_maximum
                    
                    	rate\-maximum
                    	**type**\:   :py:class:`RateMaximum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Pwfq.CardFamily2.RateMaximum>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: rate_minimum
                    
                    	rate\-minimum
                    	**type**\:   :py:class:`RateMinimum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Pwfq.CardFamily2.RateMinimum>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: weight
                    
                    	weight
                    	**type**\:  int
                    
                    	**range:** 1..4096
                    
                    

                    """

                    _prefix = 'qos'
                    _revision = '2016-10-20'

                    def __init__(self):
                        self.parent = None
                        self.congestion_avoidance_map_reference = None
                        self.num_queues = None
                        self.queue = YList()
                        self.queue.parent = self
                        self.queue.name = 'queue'
                        self.queue_map_reference = None
                        self.queue_priority_group = YList()
                        self.queue_priority_group.parent = self
                        self.queue_priority_group.name = 'queue_priority_group'
                        self.rate_maximum = None
                        self.rate_minimum = None
                        self.weight = None


                    class Queue(object):
                        """
                        queue
                        
                        .. attribute:: num  <key>
                        
                        	priority
                        	**type**\:  int
                        
                        	**range:** 0..7
                        
                        .. attribute:: priority
                        
                        	priority
                        	**type**\:  int
                        
                        	**range:** 0..7
                        
                        	**mandatory**\: True
                        
                        .. attribute:: rate_maximum
                        
                        	rate\-maximum
                        	**type**\:  int
                        
                        	**range:** 4..10000000
                        
                        	**units**\: kbps
                        
                        .. attribute:: rate_maximum_percentage
                        
                        	rate\-maximum\-percentage
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        	**units**\: percent
                        
                        .. attribute:: weight
                        
                        	weight
                        	**type**\:  int
                        
                        	**range:** 1..1023
                        
                        	**mandatory**\: True
                        
                        

                        """

                        _prefix = 'qos'
                        _revision = '2016-10-20'

                        def __init__(self):
                            self.parent = None
                            self.num = None
                            self.priority = None
                            self.rate_maximum = None
                            self.rate_maximum_percentage = None
                            self.weight = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')
                            if self.num is None:
                                raise YPYModelError('Key property num is None')

                            return self.parent._common_path +'/ietf-qos:queue[ietf-qos:num = ' + str(self.num) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.num is not None:
                                return True

                            if self.priority is not None:
                                return True

                            if self.rate_maximum is not None:
                                return True

                            if self.rate_maximum_percentage is not None:
                                return True

                            if self.weight is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_qos as meta
                            return meta._meta_table['Qos.Policies.Policy.Pwfq.CardFamily2.Queue']['meta_info']


                    class QueuePriorityGroup(object):
                        """
                        queue\-priority\-group
                        
                        .. attribute:: priority_group  <key>
                        
                        	priority\-group
                        	**type**\:  int
                        
                        	**range:** 0..7
                        
                        .. attribute:: rate_absolute
                        
                        	rate\-absolute
                        	**type**\:   :py:class:`RateAbsolute <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Pwfq.CardFamily2.QueuePriorityGroup.RateAbsolute>`
                        
                        .. attribute:: rate_percentage
                        
                        	rate\-percentage
                        	**type**\:   :py:class:`RatePercentage <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Pwfq.CardFamily2.QueuePriorityGroup.RatePercentage>`
                        
                        

                        """

                        _prefix = 'qos'
                        _revision = '2016-10-20'

                        def __init__(self):
                            self.parent = None
                            self.priority_group = None
                            self.rate_absolute = Qos.Policies.Policy.Pwfq.CardFamily2.QueuePriorityGroup.RateAbsolute()
                            self.rate_absolute.parent = self
                            self.rate_percentage = Qos.Policies.Policy.Pwfq.CardFamily2.QueuePriorityGroup.RatePercentage()
                            self.rate_percentage.parent = self


                        class RateAbsolute(object):
                            """
                            rate\-absolute
                            
                            .. attribute:: exceed
                            
                            	exceed
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: rate
                            
                            	rate
                            	**type**\:  int
                            
                            	**range:** 8..10000000
                            
                            	**units**\: kpbs
                            
                            

                            """

                            _prefix = 'qos'
                            _revision = '2016-10-20'

                            def __init__(self):
                                self.parent = None
                                self.exceed = None
                                self.rate = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-qos:rate-absolute'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.exceed is not None:
                                    return True

                                if self.rate is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.Policies.Policy.Pwfq.CardFamily2.QueuePriorityGroup.RateAbsolute']['meta_info']


                        class RatePercentage(object):
                            """
                            rate\-percentage
                            
                            .. attribute:: exceed
                            
                            	exceed
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: rate_percentage
                            
                            	rate\-percentage
                            	**type**\:  int
                            
                            	**range:** 1..100
                            
                            	**units**\: percent
                            
                            

                            """

                            _prefix = 'qos'
                            _revision = '2016-10-20'

                            def __init__(self):
                                self.parent = None
                                self.exceed = None
                                self.rate_percentage = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-qos:rate-percentage'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.exceed is not None:
                                    return True

                                if self.rate_percentage is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.Policies.Policy.Pwfq.CardFamily2.QueuePriorityGroup.RatePercentage']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')
                            if self.priority_group is None:
                                raise YPYModelError('Key property priority_group is None')

                            return self.parent._common_path +'/ietf-qos:queue-priority-group[ietf-qos:priority-group = ' + str(self.priority_group) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.priority_group is not None:
                                return True

                            if self.rate_absolute is not None and self.rate_absolute._has_data():
                                return True

                            if self.rate_percentage is not None and self.rate_percentage._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_qos as meta
                            return meta._meta_table['Qos.Policies.Policy.Pwfq.CardFamily2.QueuePriorityGroup']['meta_info']


                    class RateMinimum(object):
                        """
                        rate\-minimum
                        
                        .. attribute:: rate
                        
                        	rate\-minimum
                        	**type**\:  int
                        
                        	**range:** 8..1000000
                        
                        	**mandatory**\: True
                        
                        	**units**\: kbps
                        
                        .. attribute:: _is_presence
                        
                        	Is present if this instance represents presence container else not
                        	**type**\: bool
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'qos'
                        _revision = '2016-10-20'

                        def __init__(self):
                            self.parent = None
                            self._is_presence = True
                            self.rate = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-qos:rate-minimum'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self._is_presence:
                                return True
                            if self.rate is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_qos as meta
                            return meta._meta_table['Qos.Policies.Policy.Pwfq.CardFamily2.RateMinimum']['meta_info']


                    class RateMaximum(object):
                        """
                        rate\-maximum
                        
                        .. attribute:: rate
                        
                        	rate\-maximum
                        	**type**\:  int
                        
                        	**range:** 64..1000000
                        
                        	**mandatory**\: True
                        
                        	**units**\: kbps
                        
                        .. attribute:: _is_presence
                        
                        	Is present if this instance represents presence container else not
                        	**type**\: bool
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'qos'
                        _revision = '2016-10-20'

                        def __init__(self):
                            self.parent = None
                            self._is_presence = True
                            self.rate = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-qos:rate-maximum'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self._is_presence:
                                return True
                            if self.rate is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_qos as meta
                            return meta._meta_table['Qos.Policies.Policy.Pwfq.CardFamily2.RateMaximum']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-qos:card-family-2'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.congestion_avoidance_map_reference is not None:
                            return True

                        if self.num_queues is not None:
                            return True

                        if self.queue is not None:
                            for child_ref in self.queue:
                                if child_ref._has_data():
                                    return True

                        if self.queue_map_reference is not None:
                            return True

                        if self.queue_priority_group is not None:
                            for child_ref in self.queue_priority_group:
                                if child_ref._has_data():
                                    return True

                        if self.rate_maximum is not None and self.rate_maximum._has_data():
                            return True

                        if self.rate_minimum is not None and self.rate_minimum._has_data():
                            return True

                        if self.weight is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_qos as meta
                        return meta._meta_table['Qos.Policies.Policy.Pwfq.CardFamily2']['meta_info']


                class CardFamily3(object):
                    """
                    card\-family\-3
                    
                    .. attribute:: congestion_avoidance_map_reference
                    
                    	congestion\-avoidance\-map\-reference
                    	**type**\:  str
                    
                    	**refers to**\:  :py:class:`name <ydk.models.ietf.ietf_qos.Qos.CongestionAvoidanceMaps.CongestionAvoidanceMap>`
                    
                    .. attribute:: num_queues
                    
                    	num\-queues
                    	**type**\:  int
                    
                    	**range:** 1..None \| 2..None \| 4..None \| 8..None
                    
                    .. attribute:: queue
                    
                    	queue
                    	**type**\: list of    :py:class:`Queue <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Pwfq.CardFamily3.Queue>`
                    
                    .. attribute:: queue_map_reference
                    
                    	queue\-map\-reference
                    	**type**\:  str
                    
                    	**refers to**\:  :py:class:`name <ydk.models.ietf.ietf_qos.Qos.QueueMaps.QueueMap>`
                    
                    .. attribute:: queue_priority_group
                    
                    	queue\-priority\-group
                    	**type**\: list of    :py:class:`QueuePriorityGroup <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Pwfq.CardFamily3.QueuePriorityGroup>`
                    
                    .. attribute:: rate_maximum
                    
                    	rate\-maximum
                    	**type**\:   :py:class:`RateMaximum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Pwfq.CardFamily3.RateMaximum>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: rate_minimum
                    
                    	rate\-minimum
                    	**type**\:   :py:class:`RateMinimum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Pwfq.CardFamily3.RateMinimum>`
                    
                    	**presence node**\: True
                    
                    

                    """

                    _prefix = 'qos'
                    _revision = '2016-10-20'

                    def __init__(self):
                        self.parent = None
                        self.congestion_avoidance_map_reference = None
                        self.num_queues = None
                        self.queue = YList()
                        self.queue.parent = self
                        self.queue.name = 'queue'
                        self.queue_map_reference = None
                        self.queue_priority_group = YList()
                        self.queue_priority_group.parent = self
                        self.queue_priority_group.name = 'queue_priority_group'
                        self.rate_maximum = None
                        self.rate_minimum = None


                    class Queue(object):
                        """
                        queue
                        
                        .. attribute:: num  <key>
                        
                        	priority
                        	**type**\:  int
                        
                        	**range:** 0..7
                        
                        .. attribute:: priority
                        
                        	priority
                        	**type**\:  int
                        
                        	**range:** 0..7
                        
                        	**mandatory**\: True
                        
                        .. attribute:: rate_maximum
                        
                        	rate\-maximum
                        	**type**\:  int
                        
                        	**range:** 4..10000000
                        
                        	**units**\: kbps
                        
                        .. attribute:: rate_maximum_percentage
                        
                        	rate\-maximum\-percentage
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        	**units**\: percent
                        
                        .. attribute:: weight
                        
                        	weight
                        	**type**\:  int
                        
                        	**range:** 1..1023
                        
                        	**mandatory**\: True
                        
                        

                        """

                        _prefix = 'qos'
                        _revision = '2016-10-20'

                        def __init__(self):
                            self.parent = None
                            self.num = None
                            self.priority = None
                            self.rate_maximum = None
                            self.rate_maximum_percentage = None
                            self.weight = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')
                            if self.num is None:
                                raise YPYModelError('Key property num is None')

                            return self.parent._common_path +'/ietf-qos:queue[ietf-qos:num = ' + str(self.num) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.num is not None:
                                return True

                            if self.priority is not None:
                                return True

                            if self.rate_maximum is not None:
                                return True

                            if self.rate_maximum_percentage is not None:
                                return True

                            if self.weight is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_qos as meta
                            return meta._meta_table['Qos.Policies.Policy.Pwfq.CardFamily3.Queue']['meta_info']


                    class QueuePriorityGroup(object):
                        """
                        queue\-priority\-group
                        
                        .. attribute:: priority_group  <key>
                        
                        	priority\-group
                        	**type**\:  int
                        
                        	**range:** 0..7
                        
                        .. attribute:: rate_absolute
                        
                        	rate\-absolute
                        	**type**\:   :py:class:`RateAbsolute <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Pwfq.CardFamily3.QueuePriorityGroup.RateAbsolute>`
                        
                        .. attribute:: rate_minimum
                        
                        	rate\-minimum
                        	**type**\:   :py:class:`RateMinimum <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Pwfq.CardFamily3.QueuePriorityGroup.RateMinimum>`
                        
                        .. attribute:: rate_minimum_percentage
                        
                        	rate\-minimum\-percentage
                        	**type**\:   :py:class:`RateMinimumPercentage <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Pwfq.CardFamily3.QueuePriorityGroup.RateMinimumPercentage>`
                        
                        .. attribute:: rate_percentage
                        
                        	rate\-percentage
                        	**type**\:   :py:class:`RatePercentage <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Pwfq.CardFamily3.QueuePriorityGroup.RatePercentage>`
                        
                        

                        """

                        _prefix = 'qos'
                        _revision = '2016-10-20'

                        def __init__(self):
                            self.parent = None
                            self.priority_group = None
                            self.rate_absolute = Qos.Policies.Policy.Pwfq.CardFamily3.QueuePriorityGroup.RateAbsolute()
                            self.rate_absolute.parent = self
                            self.rate_minimum = Qos.Policies.Policy.Pwfq.CardFamily3.QueuePriorityGroup.RateMinimum()
                            self.rate_minimum.parent = self
                            self.rate_minimum_percentage = Qos.Policies.Policy.Pwfq.CardFamily3.QueuePriorityGroup.RateMinimumPercentage()
                            self.rate_minimum_percentage.parent = self
                            self.rate_percentage = Qos.Policies.Policy.Pwfq.CardFamily3.QueuePriorityGroup.RatePercentage()
                            self.rate_percentage.parent = self


                        class RateAbsolute(object):
                            """
                            rate\-absolute
                            
                            .. attribute:: rate
                            
                            	rate
                            	**type**\:  int
                            
                            	**range:** 8..100000000
                            
                            	**units**\: kbps
                            
                            

                            """

                            _prefix = 'qos'
                            _revision = '2016-10-20'

                            def __init__(self):
                                self.parent = None
                                self.rate = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-qos:rate-absolute'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.rate is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.Policies.Policy.Pwfq.CardFamily3.QueuePriorityGroup.RateAbsolute']['meta_info']


                        class RateMinimum(object):
                            """
                            rate\-minimum
                            
                            .. attribute:: rate_minimum
                            
                            	rate\-minimum
                            	**type**\:  int
                            
                            	**range:** 8..100000000
                            
                            

                            """

                            _prefix = 'qos'
                            _revision = '2016-10-20'

                            def __init__(self):
                                self.parent = None
                                self.rate_minimum = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-qos:rate-minimum'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.rate_minimum is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.Policies.Policy.Pwfq.CardFamily3.QueuePriorityGroup.RateMinimum']['meta_info']


                        class RatePercentage(object):
                            """
                            rate\-percentage
                            
                            .. attribute:: rate_percentage
                            
                            	rate\-percentage
                            	**type**\:  int
                            
                            	**range:** 1..100
                            
                            	**units**\: percent
                            
                            

                            """

                            _prefix = 'qos'
                            _revision = '2016-10-20'

                            def __init__(self):
                                self.parent = None
                                self.rate_percentage = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-qos:rate-percentage'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.rate_percentage is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.Policies.Policy.Pwfq.CardFamily3.QueuePriorityGroup.RatePercentage']['meta_info']


                        class RateMinimumPercentage(object):
                            """
                            rate\-minimum\-percentage
                            
                            .. attribute:: rate_minimum_percentage
                            
                            	rate\-minimum\-percentage
                            	**type**\:  int
                            
                            	**range:** 1..100
                            
                            	**units**\: percent
                            
                            

                            """

                            _prefix = 'qos'
                            _revision = '2016-10-20'

                            def __init__(self):
                                self.parent = None
                                self.rate_minimum_percentage = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-qos:rate-minimum-percentage'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.rate_minimum_percentage is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.Policies.Policy.Pwfq.CardFamily3.QueuePriorityGroup.RateMinimumPercentage']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')
                            if self.priority_group is None:
                                raise YPYModelError('Key property priority_group is None')

                            return self.parent._common_path +'/ietf-qos:queue-priority-group[ietf-qos:priority-group = ' + str(self.priority_group) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.priority_group is not None:
                                return True

                            if self.rate_absolute is not None and self.rate_absolute._has_data():
                                return True

                            if self.rate_minimum is not None and self.rate_minimum._has_data():
                                return True

                            if self.rate_minimum_percentage is not None and self.rate_minimum_percentage._has_data():
                                return True

                            if self.rate_percentage is not None and self.rate_percentage._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_qos as meta
                            return meta._meta_table['Qos.Policies.Policy.Pwfq.CardFamily3.QueuePriorityGroup']['meta_info']


                    class RateMinimum(object):
                        """
                        rate\-minimum
                        
                        .. attribute:: burst
                        
                        	burst
                        	**type**\:  int
                        
                        	**range:** 64..1875000000
                        
                        	**units**\: byte
                        
                        .. attribute:: rate
                        
                        	rate\-minimum
                        	**type**\:  int
                        
                        	**range:** 8..1000000
                        
                        	**mandatory**\: True
                        
                        	**units**\: kbps
                        
                        .. attribute:: _is_presence
                        
                        	Is present if this instance represents presence container else not
                        	**type**\: bool
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'qos'
                        _revision = '2016-10-20'

                        def __init__(self):
                            self.parent = None
                            self._is_presence = True
                            self.burst = None
                            self.rate = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-qos:rate-minimum'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self._is_presence:
                                return True
                            if self.burst is not None:
                                return True

                            if self.rate is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_qos as meta
                            return meta._meta_table['Qos.Policies.Policy.Pwfq.CardFamily3.RateMinimum']['meta_info']


                    class RateMaximum(object):
                        """
                        rate\-maximum
                        
                        .. attribute:: counters
                        
                        	counters
                        	**type**\:   :py:class:`Counters <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Pwfq.CardFamily3.RateMaximum.Counters>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: rate
                        
                        	rate\-maximum
                        	**type**\:  int
                        
                        	**range:** 8..10000000
                        
                        	**mandatory**\: True
                        
                        	**units**\: kbps
                        
                        .. attribute:: _is_presence
                        
                        	Is present if this instance represents presence container else not
                        	**type**\: bool
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'qos'
                        _revision = '2016-10-20'

                        def __init__(self):
                            self.parent = None
                            self._is_presence = True
                            self.counters = None
                            self.rate = None


                        class Counters(object):
                            """
                            counters
                            
                            .. attribute:: dual_stack
                            
                            	Enable dual\-stack costing
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'qos'
                            _revision = '2016-10-20'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.dual_stack = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-qos:counters'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.dual_stack is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_qos as meta
                                return meta._meta_table['Qos.Policies.Policy.Pwfq.CardFamily3.RateMaximum.Counters']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-qos:rate-maximum'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self._is_presence:
                                return True
                            if self.counters is not None and self.counters._has_data():
                                return True

                            if self.rate is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_qos as meta
                            return meta._meta_table['Qos.Policies.Policy.Pwfq.CardFamily3.RateMaximum']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-qos:card-family-3'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.congestion_avoidance_map_reference is not None:
                            return True

                        if self.num_queues is not None:
                            return True

                        if self.queue is not None:
                            for child_ref in self.queue:
                                if child_ref._has_data():
                                    return True

                        if self.queue_map_reference is not None:
                            return True

                        if self.queue_priority_group is not None:
                            for child_ref in self.queue_priority_group:
                                if child_ref._has_data():
                                    return True

                        if self.rate_maximum is not None and self.rate_maximum._has_data():
                            return True

                        if self.rate_minimum is not None and self.rate_minimum._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_qos as meta
                        return meta._meta_table['Qos.Policies.Policy.Pwfq.CardFamily3']['meta_info']


                class Queue(object):
                    """
                    queue
                    
                    .. attribute:: num  <key>
                    
                    	priority
                    	**type**\:  int
                    
                    	**range:** 0..7
                    
                    .. attribute:: priority
                    
                    	priority
                    	**type**\:  int
                    
                    	**range:** 0..7
                    
                    	**mandatory**\: True
                    
                    .. attribute:: rate_maximum
                    
                    	rate\-maximum
                    	**type**\:  int
                    
                    	**range:** 4..10000000
                    
                    	**units**\: kbps
                    
                    .. attribute:: rate_maximum_percentage
                    
                    	rate\-maximum\-percentage
                    	**type**\:  int
                    
                    	**range:** 1..100
                    
                    	**units**\: percent
                    
                    .. attribute:: weight
                    
                    	weight
                    	**type**\:  int
                    
                    	**range:** 1..1023
                    
                    	**mandatory**\: True
                    
                    

                    """

                    _prefix = 'qos'
                    _revision = '2016-10-20'

                    def __init__(self):
                        self.parent = None
                        self.num = None
                        self.priority = None
                        self.rate_maximum = None
                        self.rate_maximum_percentage = None
                        self.weight = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')
                        if self.num is None:
                            raise YPYModelError('Key property num is None')

                        return self.parent._common_path +'/ietf-qos:queue[ietf-qos:num = ' + str(self.num) + ']'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.num is not None:
                            return True

                        if self.priority is not None:
                            return True

                        if self.rate_maximum is not None:
                            return True

                        if self.rate_maximum_percentage is not None:
                            return True

                        if self.weight is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_qos as meta
                        return meta._meta_table['Qos.Policies.Policy.Pwfq.Queue']['meta_info']


                class QueuePriorityGroup(object):
                    """
                    queue\-priority\-group
                    
                    .. attribute:: priority_group  <key>
                    
                    	priority\-group
                    	**type**\:  int
                    
                    	**range:** 0..7
                    
                    .. attribute:: rate_absolute
                    
                    	rate\-absolute
                    	**type**\:   :py:class:`RateAbsolute <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Pwfq.QueuePriorityGroup.RateAbsolute>`
                    
                    .. attribute:: rate_percentage
                    
                    	rate\-percentage
                    	**type**\:   :py:class:`RatePercentage <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.Pwfq.QueuePriorityGroup.RatePercentage>`
                    
                    

                    """

                    _prefix = 'qos'
                    _revision = '2016-10-20'

                    def __init__(self):
                        self.parent = None
                        self.priority_group = None
                        self.rate_absolute = Qos.Policies.Policy.Pwfq.QueuePriorityGroup.RateAbsolute()
                        self.rate_absolute.parent = self
                        self.rate_percentage = Qos.Policies.Policy.Pwfq.QueuePriorityGroup.RatePercentage()
                        self.rate_percentage.parent = self


                    class RateAbsolute(object):
                        """
                        rate\-absolute
                        
                        .. attribute:: exceed
                        
                        	exceed
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: rate
                        
                        	rate
                        	**type**\:  int
                        
                        	**range:** 8..100000000
                        
                        	**units**\: kbps
                        
                        

                        """

                        _prefix = 'qos'
                        _revision = '2016-10-20'

                        def __init__(self):
                            self.parent = None
                            self.exceed = None
                            self.rate = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-qos:rate-absolute'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.exceed is not None:
                                return True

                            if self.rate is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_qos as meta
                            return meta._meta_table['Qos.Policies.Policy.Pwfq.QueuePriorityGroup.RateAbsolute']['meta_info']


                    class RatePercentage(object):
                        """
                        rate\-percentage
                        
                        .. attribute:: exceed
                        
                        	exceed
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: rate_percentage
                        
                        	rate\-percentage
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        	**units**\: percent
                        
                        

                        """

                        _prefix = 'qos'
                        _revision = '2016-10-20'

                        def __init__(self):
                            self.parent = None
                            self.exceed = None
                            self.rate_percentage = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-qos:rate-percentage'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.exceed is not None:
                                return True

                            if self.rate_percentage is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_qos as meta
                            return meta._meta_table['Qos.Policies.Policy.Pwfq.QueuePriorityGroup.RatePercentage']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')
                        if self.priority_group is None:
                            raise YPYModelError('Key property priority_group is None')

                        return self.parent._common_path +'/ietf-qos:queue-priority-group[ietf-qos:priority-group = ' + str(self.priority_group) + ']'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.priority_group is not None:
                            return True

                        if self.rate_absolute is not None and self.rate_absolute._has_data():
                            return True

                        if self.rate_percentage is not None and self.rate_percentage._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_qos as meta
                        return meta._meta_table['Qos.Policies.Policy.Pwfq.QueuePriorityGroup']['meta_info']


                class RateMinimum(object):
                    """
                    rate\-minimum
                    
                    .. attribute:: burst
                    
                    	burst
                    	**type**\:  int
                    
                    	**range:** 64..1875000000
                    
                    	**units**\: byte
                    
                    .. attribute:: rate
                    
                    	rate\-minimum
                    	**type**\:  int
                    
                    	**range:** 8..1000000
                    
                    	**mandatory**\: True
                    
                    	**units**\: kbps
                    
                    .. attribute:: _is_presence
                    
                    	Is present if this instance represents presence container else not
                    	**type**\: bool
                    
                    

                    This class is a :ref:`presence class<presence-class>`

                    """

                    _prefix = 'qos'
                    _revision = '2016-10-20'

                    def __init__(self):
                        self.parent = None
                        self._is_presence = True
                        self.burst = None
                        self.rate = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-qos:rate-minimum'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self._is_presence:
                            return True
                        if self.burst is not None:
                            return True

                        if self.rate is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_qos as meta
                        return meta._meta_table['Qos.Policies.Policy.Pwfq.RateMinimum']['meta_info']


                class RateMaximum(object):
                    """
                    rate\-maximum
                    
                    .. attribute:: burst
                    
                    	burst
                    	**type**\:  int
                    
                    	**range:** 64..1875000000
                    
                    	**units**\: byte
                    
                    .. attribute:: rate
                    
                    	rate\-maximum
                    	**type**\:  int
                    
                    	**range:** 8..10000000
                    
                    	**mandatory**\: True
                    
                    	**units**\: kbps
                    
                    .. attribute:: _is_presence
                    
                    	Is present if this instance represents presence container else not
                    	**type**\: bool
                    
                    

                    This class is a :ref:`presence class<presence-class>`

                    """

                    _prefix = 'qos'
                    _revision = '2016-10-20'

                    def __init__(self):
                        self.parent = None
                        self._is_presence = True
                        self.burst = None
                        self.rate = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-qos:rate-maximum'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self._is_presence:
                            return True
                        if self.burst is not None:
                            return True

                        if self.rate is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_qos as meta
                        return meta._meta_table['Qos.Policies.Policy.Pwfq.RateMaximum']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/ietf-qos:pwfq'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self._is_presence:
                        return True
                    if self.card_family_1 is not None and self.card_family_1._has_data():
                        return True

                    if self.card_family_2 is not None and self.card_family_2._has_data():
                        return True

                    if self.card_family_3 is not None and self.card_family_3._has_data():
                        return True

                    if self.congestion_avoidance_map_reference is not None:
                        return True

                    if self.num_queues is not None:
                        return True

                    if self.queue is not None:
                        for child_ref in self.queue:
                            if child_ref._has_data():
                                return True

                    if self.queue_map_reference is not None:
                        return True

                    if self.queue_priority_group is not None:
                        for child_ref in self.queue_priority_group:
                            if child_ref._has_data():
                                return True

                    if self.rate_maximum is not None and self.rate_maximum._has_data():
                        return True

                    if self.rate_minimum is not None and self.rate_minimum._has_data():
                        return True

                    if self.weight is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_qos as meta
                    return meta._meta_table['Qos.Policies.Policy.Pwfq']['meta_info']


            class ProtocolRateLimit(object):
                """
                protocol\-rate\-limit policy
                
                .. attribute:: arp
                
                	arp
                	**type**\:   :py:class:`Arp <ydk.models.ietf.ietf_qos.Qos.Policies.Policy.ProtocolRateLimit.Arp>`
                
                	**presence node**\: True
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                

                This class is a :ref:`presence class<presence-class>`

                """

                _prefix = 'qos'
                _revision = '2016-10-20'

                def __init__(self):
                    self.parent = None
                    self._is_presence = True
                    self.arp = None


                class Arp(object):
                    """
                    arp
                    
                    .. attribute:: burst
                    
                    	burst
                    	**type**\:  int
                    
                    	**range:** 1..25000000
                    
                    	**mandatory**\: True
                    
                    	**units**\: packet
                    
                    .. attribute:: rate
                    
                    	rate
                    	**type**\:  int
                    
                    	**range:** 1..2500000
                    
                    	**mandatory**\: True
                    
                    	**units**\: packet per second
                    
                    .. attribute:: _is_presence
                    
                    	Is present if this instance represents presence container else not
                    	**type**\: bool
                    
                    

                    This class is a :ref:`presence class<presence-class>`

                    """

                    _prefix = 'qos'
                    _revision = '2016-10-20'

                    def __init__(self):
                        self.parent = None
                        self._is_presence = True
                        self.burst = None
                        self.rate = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-qos:arp'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self._is_presence:
                            return True
                        if self.burst is not None:
                            return True

                        if self.rate is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_qos as meta
                        return meta._meta_table['Qos.Policies.Policy.ProtocolRateLimit.Arp']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/ietf-qos:protocol-rate-limit'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self._is_presence:
                        return True
                    if self.arp is not None and self.arp._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_qos as meta
                    return meta._meta_table['Qos.Policies.Policy.ProtocolRateLimit']['meta_info']

            @property
            def _common_path(self):
                if self.name is None:
                    raise YPYModelError('Key property name is None')

                return '/ietf-qos:qos/ietf-qos:policies/ietf-qos:policy[ietf-qos:name = ' + str(self.name) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return True

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.name is not None:
                    return True

                if self.mdrr is not None and self.mdrr._has_data():
                    return True

                if self.metering is not None and self.metering._has_data():
                    return True

                if self.policing is not None and self.policing._has_data():
                    return True

                if self.protocol_rate_limit is not None and self.protocol_rate_limit._has_data():
                    return True

                if self.pwfq is not None and self.pwfq._has_data():
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _ietf_qos as meta
                return meta._meta_table['Qos.Policies.Policy']['meta_info']

        @property
        def _common_path(self):

            return '/ietf-qos:qos/ietf-qos:policies'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return True

        def _has_data(self):
            if not self.is_config():
                return False
            if self.policy is not None:
                for child_ref in self.policy:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.ietf._meta import _ietf_qos as meta
            return meta._meta_table['Qos.Policies']['meta_info']

    @property
    def _common_path(self):

        return '/ietf-qos:qos'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.class_definitions is not None and self.class_definitions._has_data():
            return True

        if self.class_maps is not None and self.class_maps._has_data():
            return True

        if self.congestion_avoidance_maps is not None and self.congestion_avoidance_maps._has_data():
            return True

        if self.policies is not None and self.policies._has_data():
            return True

        if self.profiles is not None and self.profiles._has_data():
            return True

        if self.queue_maps is not None and self.queue_maps._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_qos as meta
        return meta._meta_table['Qos']['meta_info']


