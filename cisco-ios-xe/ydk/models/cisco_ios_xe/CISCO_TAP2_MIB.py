""" CISCO_TAP2_MIB 

This module manages Cisco's intercept feature.
This MIB replaces CISCO\-TAP\-MIB. This MIB defines
a generic stream table that contains fields common to
all intercept types. Specific intercept filters are
defined in extension MIBs. They are CISCO\-IP\-TAP\-MIB
for IP intercepts, CISCO\-802\-TAP\-MIB for IEEE 802
intercepts and CISCO\-USER\-CONNECTION\-TAP\-MIB for
RADIUS\-based user connection intercepts.

"""
from collections import OrderedDict

from ydk.types import Entity, EntityPath, Identity, Enum, YType, YLeaf, YLeafList, YList, LeafDataList, Bits, Empty, Decimal64
from ydk.filters import YFilter
from ydk.errors import YError, YModelError
from ydk.errors.error_handler import handle_type_error as _handle_type_error




class CISCOTAP2MIB(Entity):
    """
    
    
    .. attribute:: ctap2mediationgroup
    
    	
    	**type**\:  :py:class:`CTap2MediationGroup <ydk.models.cisco_ios_xe.CISCO_TAP2_MIB.CISCOTAP2MIB.CTap2MediationGroup>`
    
    	**config**\: False
    
    .. attribute:: ctap2debuggroup
    
    	
    	**type**\:  :py:class:`CTap2DebugGroup <ydk.models.cisco_ios_xe.CISCO_TAP2_MIB.CISCOTAP2MIB.CTap2DebugGroup>`
    
    	**config**\: False
    
    .. attribute:: ctap2mediationtable
    
    	This table lists the Mediation Devices with which the intercepting device communicates. These may be on the same or different Mediation Devices.   This table is written by the Mediation Device, and is always volatile. This is because intercepts may disappear during a restart of the intercepting equipment.  Entries are added to this table via cTap2MediationStatus in  accordance with the RowStatus convention
    	**type**\:  :py:class:`CTap2MediationTable <ydk.models.cisco_ios_xe.CISCO_TAP2_MIB.CISCOTAP2MIB.CTap2MediationTable>`
    
    	**config**\: False
    
    .. attribute:: ctap2streamtable
    
    	The Intercept Stream Table lists the traffic streams to be intercepted. The same data stream may be required by multiple  taps, and one might assume that often the intercepted stream  is a small subset of the traffic that could be intercepted.   The Table consists of generic fields that are independent of the type of intercept. It contains type of the specific  filter which is defined in an extension MIB and counters to  account for packets intercepted or dropped by the attached filter specification.  Note that the Mediation Device must make sure there is  only one type of specific filter created with the same  indices as that of a row in this table, otherwise the  later creations will fail. For example, if there is a  row in this table with index 1.2, there can be a  corresponding row with the same index either in  citapStreamTable, c8tapStreamTable or cuctTapStreamTable, but not all.    The first index indicates which Mediation Device the intercepted traffic will be diverted to. The second index permits multiple classifiers to be used together.   Entries are added to this table via cTap2StreamStatus in accordance with the RowStatus convention
    	**type**\:  :py:class:`CTap2StreamTable <ydk.models.cisco_ios_xe.CISCO_TAP2_MIB.CISCOTAP2MIB.CTap2StreamTable>`
    
    	**config**\: False
    
    .. attribute:: ctap2debugtable
    
    	A table that contains Lawful Intercept debug messages generated by the implementing device. This table is used  by ciscoTap2MediationDebug and ciscoTap2StreamDebug  notifications.  An entry in this table contains a debug message which is regarding either a Mediation Device or a intercept stream  created by a Mediation Device. The Mediation device is  identified by cTap2DebugMediationId whose value is that of cTap2MediationContentId of cTapMediationEntry. The stream is identified by cTap2DebugMediationId and cTap2DebugStreamId whose values are that of  cTap2MediationContentId and cTap2StreamIndex of  the corresponding cTap2StreamEntry.  Note that cTap2DebugStreamId may be zero for an entry, in which case the debug message is regarding a Medation Device.  Entries are added to this table via cTap2DebugStatus in accordance with the RowStatus convention
    	**type**\:  :py:class:`CTap2DebugTable <ydk.models.cisco_ios_xe.CISCO_TAP2_MIB.CISCOTAP2MIB.CTap2DebugTable>`
    
    	**config**\: False
    
    .. attribute:: ctap2debugusertable
    
    	The User Table lists information of all the users configured in the system who are given permission by different Mediation Devices to access Lawful Intercept CLIs.  This table will have dependancy on cTap2MediationTable. When entry in cTap2MediationTable is deleted or moved to 'notInService', entries corresponding cTap2MediationContentId in this table will be deleted
    	**type**\:  :py:class:`CTap2DebugUserTable <ydk.models.cisco_ios_xe.CISCO_TAP2_MIB.CISCOTAP2MIB.CTap2DebugUserTable>`
    
    	**config**\: False
    
    

    """

    _prefix = 'CISCO-TAP2-MIB'
    _revision = '2009-11-06'

    def __init__(self):
        super(CISCOTAP2MIB, self).__init__()
        self._top_entity = None

        self.yang_name = "CISCO-TAP2-MIB"
        self.yang_parent_name = "CISCO-TAP2-MIB"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([("cTap2MediationGroup", ("ctap2mediationgroup", CISCOTAP2MIB.CTap2MediationGroup)), ("cTap2DebugGroup", ("ctap2debuggroup", CISCOTAP2MIB.CTap2DebugGroup)), ("cTap2MediationTable", ("ctap2mediationtable", CISCOTAP2MIB.CTap2MediationTable)), ("cTap2StreamTable", ("ctap2streamtable", CISCOTAP2MIB.CTap2StreamTable)), ("cTap2DebugTable", ("ctap2debugtable", CISCOTAP2MIB.CTap2DebugTable)), ("cTap2DebugUserTable", ("ctap2debugusertable", CISCOTAP2MIB.CTap2DebugUserTable))])
        self._leafs = OrderedDict()

        self.ctap2mediationgroup = CISCOTAP2MIB.CTap2MediationGroup()
        self.ctap2mediationgroup.parent = self
        self._children_name_map["ctap2mediationgroup"] = "cTap2MediationGroup"

        self.ctap2debuggroup = CISCOTAP2MIB.CTap2DebugGroup()
        self.ctap2debuggroup.parent = self
        self._children_name_map["ctap2debuggroup"] = "cTap2DebugGroup"

        self.ctap2mediationtable = CISCOTAP2MIB.CTap2MediationTable()
        self.ctap2mediationtable.parent = self
        self._children_name_map["ctap2mediationtable"] = "cTap2MediationTable"

        self.ctap2streamtable = CISCOTAP2MIB.CTap2StreamTable()
        self.ctap2streamtable.parent = self
        self._children_name_map["ctap2streamtable"] = "cTap2StreamTable"

        self.ctap2debugtable = CISCOTAP2MIB.CTap2DebugTable()
        self.ctap2debugtable.parent = self
        self._children_name_map["ctap2debugtable"] = "cTap2DebugTable"

        self.ctap2debugusertable = CISCOTAP2MIB.CTap2DebugUserTable()
        self.ctap2debugusertable.parent = self
        self._children_name_map["ctap2debugusertable"] = "cTap2DebugUserTable"
        self._segment_path = lambda: "CISCO-TAP2-MIB:CISCO-TAP2-MIB"
        self._is_frozen = True

    def __setattr__(self, name, value):
        self._perform_setattr(CISCOTAP2MIB, [], name, value)


    class CTap2MediationGroup(Entity):
        """
        
        
        .. attribute:: ctap2mediationnewindex
        
        	This object contains a value which may be used as an index value for a new cTap2MediationEntry. Whenever read, the agent will change the value to a new non\-conflicting value.  This is to reduce the probability of errors during creation of new cTap2MediationTable entries
        	**type**\: int
        
        	**range:** 1..2147483647
        
        	**config**\: False
        
        .. attribute:: ctap2mediationcapabilities
        
        	This object displays the device capabilities with respect to certain fields in Mediation Device table. This may be dependent on hardware capabilities, software capabilities. The following values may be supported\:     ipV4SrcInterface\:  SNMP ifIndex Value may be used to select                        the interface (denoted by                        cTap2MediationSrcInterface) on the                        intercepting device from which to                        transmit intercepted data to an IPv4                        address Mediation Device.       ipV6SrcInterface\:  SNMP ifIndex Value may be used to select                        the interface (denoted by                        cTap2MediationSrcInterface) on the                        intercepting device from which to                        transmit intercepted data to an IPv6                        address Mediation Device.       udp\:               UDP may be used as transport protocol                        (denoted by cTap2MediationTransport) in                        transferring intercepted data to the                        Mediation Device.       rtcpNack\:          RTP with Nack resilience may be used                        as transport protocol (denoted by                        cTap2MediationTransport) in transferring                        intercepted data to the Mediation                        Device.      tcp\:               TCP may be used as transport protocol                        (denoted by cTap2MediationTransport) in                        transferring intercepted data to the                        Mediation Device.       sctp\:              SCTP may be used as transport protocol                        (denoted by cTap2MediationTransport) in                        transferring intercepted data to the                        Mediation Device.      rtp\:               RTP may be used as transport protocol                        (denoted by cTap2MediationTransport) in                        transferring intercepted data to the                        Mediation Device.       radius\:            Radius may be used as transport protocol                        (denoted by cTap2MediationTransport) in                        transferring intercepted information to                         the Mediation Device
        	**type**\:  :py:class:`CTap2MediationCapabilities <ydk.models.cisco_ios_xe.CISCO_TAP2_MIB.CISCOTAP2MIB.CTap2MediationGroup.CTap2MediationCapabilities>`
        
        	**config**\: False
        
        

        """

        _prefix = 'CISCO-TAP2-MIB'
        _revision = '2009-11-06'

        def __init__(self):
            super(CISCOTAP2MIB.CTap2MediationGroup, self).__init__()

            self.yang_name = "cTap2MediationGroup"
            self.yang_parent_name = "CISCO-TAP2-MIB"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('ctap2mediationnewindex', (YLeaf(YType.int32, 'cTap2MediationNewIndex'), ['int'])),
                ('ctap2mediationcapabilities', (YLeaf(YType.bits, 'cTap2MediationCapabilities'), ['Bits'])),
            ])
            self.ctap2mediationnewindex = None
            self.ctap2mediationcapabilities = Bits()
            self._segment_path = lambda: "cTap2MediationGroup"
            self._absolute_path = lambda: "CISCO-TAP2-MIB:CISCO-TAP2-MIB/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(CISCOTAP2MIB.CTap2MediationGroup, ['ctap2mediationnewindex', 'ctap2mediationcapabilities'], name, value)



    class CTap2DebugGroup(Entity):
        """
        
        
        .. attribute:: ctap2debugage
        
        	This object contains the duration in minutes for which an entry in cTap2DebugTable is maintained by the implementing device after which the entry is deleted. The management station also has the option of deleting the entry itself by setting cTap2DebugStatus
        	**type**\: int
        
        	**range:** 1..2147483647
        
        	**config**\: False
        
        .. attribute:: ctap2debugmaxentries
        
        	This object contains the maximum number of debug messages maintained by the implementing device at a time. If this  limit is crossed, most recent message will replace the least recent message
        	**type**\: int
        
        	**range:** 1..2147483647
        
        	**config**\: False
        
        

        """

        _prefix = 'CISCO-TAP2-MIB'
        _revision = '2009-11-06'

        def __init__(self):
            super(CISCOTAP2MIB.CTap2DebugGroup, self).__init__()

            self.yang_name = "cTap2DebugGroup"
            self.yang_parent_name = "CISCO-TAP2-MIB"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('ctap2debugage', (YLeaf(YType.int32, 'cTap2DebugAge'), ['int'])),
                ('ctap2debugmaxentries', (YLeaf(YType.int32, 'cTap2DebugMaxEntries'), ['int'])),
            ])
            self.ctap2debugage = None
            self.ctap2debugmaxentries = None
            self._segment_path = lambda: "cTap2DebugGroup"
            self._absolute_path = lambda: "CISCO-TAP2-MIB:CISCO-TAP2-MIB/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(CISCOTAP2MIB.CTap2DebugGroup, ['ctap2debugage', 'ctap2debugmaxentries'], name, value)



    class CTap2MediationTable(Entity):
        """
        This table lists the Mediation Devices with which the
        intercepting device communicates. These may be on the same or
        different Mediation Devices.
        
        
        This table is written by the Mediation Device, and is always
        volatile. This is because intercepts may disappear during a
        restart of the intercepting equipment.
        
        Entries are added to this table via cTap2MediationStatus in 
        accordance with the RowStatus convention.
        
        .. attribute:: ctap2mediationentry
        
        	The entry describes a single session maintained with an application on a Mediation Device
        	**type**\: list of  		 :py:class:`CTap2MediationEntry <ydk.models.cisco_ios_xe.CISCO_TAP2_MIB.CISCOTAP2MIB.CTap2MediationTable.CTap2MediationEntry>`
        
        	**config**\: False
        
        

        """

        _prefix = 'CISCO-TAP2-MIB'
        _revision = '2009-11-06'

        def __init__(self):
            super(CISCOTAP2MIB.CTap2MediationTable, self).__init__()

            self.yang_name = "cTap2MediationTable"
            self.yang_parent_name = "CISCO-TAP2-MIB"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([("cTap2MediationEntry", ("ctap2mediationentry", CISCOTAP2MIB.CTap2MediationTable.CTap2MediationEntry))])
            self._leafs = OrderedDict()

            self.ctap2mediationentry = YList(self)
            self._segment_path = lambda: "cTap2MediationTable"
            self._absolute_path = lambda: "CISCO-TAP2-MIB:CISCO-TAP2-MIB/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(CISCOTAP2MIB.CTap2MediationTable, [], name, value)


        class CTap2MediationEntry(Entity):
            """
            The entry describes a single session maintained with an
            application on a Mediation Device.
            
            .. attribute:: ctap2mediationcontentid  (key)
            
            	cTap2MediationContentId is a session identifier, from the intercept application's perspective, and a content identifier from the Mediation Device's perspective. The Mediation Device is responsible for making sure these are unique, although the SNMP RowStatus row creation process will help by not allowing it to create conflicting entries. Before creating a new entry, a value for this variable may be obtained by reading cTap2MediationNewIndex to reduce the probability of a value collision
            	**type**\: int
            
            	**range:** 1..2147483647
            
            	**config**\: False
            
            .. attribute:: ctap2mediationdestaddresstype
            
            	The type of cTap2MediationDestAddress
            	**type**\:  :py:class:`InetAddressType <ydk.models.cisco_ios_xe.INET_ADDRESS_MIB.InetAddressType>`
            
            	**config**\: False
            
            .. attribute:: ctap2mediationdestaddress
            
            	The IP Address of the Mediation Device's network interface to which to direct intercepted traffic
            	**type**\: str
            
            	**length:** 0..255
            
            	**config**\: False
            
            .. attribute:: ctap2mediationdestport
            
            	The port number on the Mediation Device's network interface to which to direct intercepted traffic
            	**type**\: int
            
            	**range:** 0..65535
            
            	**config**\: False
            
            .. attribute:: ctap2mediationsrcinterface
            
            	The interface on the intercepting device from which to transmit intercepted data. If zero, any interface may be used according to normal IP practice
            	**type**\: int
            
            	**range:** 0..2147483647
            
            	**config**\: False
            
            .. attribute:: ctap2mediationrtcpport
            
            	The port number on the intercepting device to which the Mediation Devices directs RTCP Receiver Reports and Nacks. This object is only relevant when the value of cTap2MediationTransport is 'rtpNack'.   This port is assigned by the intercepting device, rather than by the Mediation Device or manager application.  The value of this MIB object has no effect before activating the cTap2MediationEntry
            	**type**\: int
            
            	**range:** 0..65535
            
            	**config**\: False
            
            .. attribute:: ctap2mediationdscp
            
            	The Differentiated Services Code Point the intercepting device applies to the IP packets encapsulating the intercepted traffic
            	**type**\: int
            
            	**range:** 0..63
            
            	**config**\: False
            
            .. attribute:: ctap2mediationdatatype
            
            	If RTP with Ack/Nack resilience is selected as a transport, the mediation process requires an RTP payload type for data transmissions, and a second RTP payload type for retransmissions.  This is the RTP payload type for transmissions.   This object is only effective when the value of cTap2MediationTransport is 'rtpNack'
            	**type**\: int
            
            	**range:** 0..127
            
            	**config**\: False
            
            .. attribute:: ctap2mediationretransmittype
            
            	If RTP with Ack/Nack resilience is selected as a transport, the mediation process requires an RTP payload type for data transmissions, and a second RTP payload type for retransmissions.  This is the RTP payload type for retransmissions.   This object is only effective when the value of cTap2MediationTransport is 'rtpNack'
            	**type**\: int
            
            	**range:** 0..127
            
            	**config**\: False
            
            .. attribute:: ctap2mediationtimeout
            
            	The time at which this row and all related Stream Table rows should be automatically removed, and the intercept function cease. Since the initiating network manager may be the only device able to manage a specific intercept or know of its existence, this acts as a fail\-safe for the failure or removal of the network manager. The object is only effective when the value of cTap2MediationStatus is 'active'
            	**type**\: str
            
            	**config**\: False
            
            .. attribute:: ctap2mediationtransport
            
            	The protocol used in transferring intercepted data to the Mediation Device. The following protocols may be supported\:            udp\:     PacketCable udp format            rtpNack\: RTP with Nack resilience            tcp\:     TCP with head of line blocking            sctp\:    SCTP with head of line blocking             rtp\:     Realtime Transport Protocol(RTP)                     packet format            radius\:  Use Radius, PacketCable1.5 Event Message                     to transport the intercepted information
            	**type**\:  :py:class:`CTap2MediationTransport <ydk.models.cisco_ios_xe.CISCO_TAP2_MIB.CISCOTAP2MIB.CTap2MediationTable.CTap2MediationEntry.CTap2MediationTransport>`
            
            	**config**\: False
            
            .. attribute:: ctap2mediationnotificationenable
            
            	This variable controls the generation of any notifications or informs by the MIB agent for this table entry
            	**type**\: bool
            
            	**config**\: False
            
            .. attribute:: ctap2mediationstatus
            
            	The status of this conceptual row. This object is used to manage creation, modification and deletion of rows in this table.   cTap2MediationTimeout may be modified at any time (even while the row is active). But when the row is active, the other writable objects may not be modified without setting its value to 'notInService'.   The entry may not be deleted or deactivated by setting its value to 'destroy' or 'notInService' if there is any associated entry in cTap2StreamTable
            	**type**\:  :py:class:`RowStatus <ydk.models.cisco_ios_xe.SNMPv2_TC.RowStatus>`
            
            	**config**\: False
            
            .. attribute:: ctap2mediationradiuskey
            
            	Radius Authentication Key is the shared secret key between  radius client and server
            	**type**\: str
            
            	**length:** 0..64
            
            	**config**\: False
            
            

            """

            _prefix = 'CISCO-TAP2-MIB'
            _revision = '2009-11-06'

            def __init__(self):
                super(CISCOTAP2MIB.CTap2MediationTable.CTap2MediationEntry, self).__init__()

                self.yang_name = "cTap2MediationEntry"
                self.yang_parent_name = "cTap2MediationTable"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['ctap2mediationcontentid']
                self._child_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('ctap2mediationcontentid', (YLeaf(YType.int32, 'cTap2MediationContentId'), ['int'])),
                    ('ctap2mediationdestaddresstype', (YLeaf(YType.enumeration, 'cTap2MediationDestAddressType'), [('ydk.models.cisco_ios_xe.INET_ADDRESS_MIB', 'InetAddressType', '')])),
                    ('ctap2mediationdestaddress', (YLeaf(YType.str, 'cTap2MediationDestAddress'), ['str'])),
                    ('ctap2mediationdestport', (YLeaf(YType.uint16, 'cTap2MediationDestPort'), ['int'])),
                    ('ctap2mediationsrcinterface', (YLeaf(YType.int32, 'cTap2MediationSrcInterface'), ['int'])),
                    ('ctap2mediationrtcpport', (YLeaf(YType.uint16, 'cTap2MediationRtcpPort'), ['int'])),
                    ('ctap2mediationdscp', (YLeaf(YType.int32, 'cTap2MediationDscp'), ['int'])),
                    ('ctap2mediationdatatype', (YLeaf(YType.int32, 'cTap2MediationDataType'), ['int'])),
                    ('ctap2mediationretransmittype', (YLeaf(YType.int32, 'cTap2MediationRetransmitType'), ['int'])),
                    ('ctap2mediationtimeout', (YLeaf(YType.str, 'cTap2MediationTimeout'), ['str'])),
                    ('ctap2mediationtransport', (YLeaf(YType.enumeration, 'cTap2MediationTransport'), [('ydk.models.cisco_ios_xe.CISCO_TAP2_MIB', 'CISCOTAP2MIB', 'CTap2MediationTable.CTap2MediationEntry.CTap2MediationTransport')])),
                    ('ctap2mediationnotificationenable', (YLeaf(YType.boolean, 'cTap2MediationNotificationEnable'), ['bool'])),
                    ('ctap2mediationstatus', (YLeaf(YType.enumeration, 'cTap2MediationStatus'), [('ydk.models.cisco_ios_xe.SNMPv2_TC', 'RowStatus', '')])),
                    ('ctap2mediationradiuskey', (YLeaf(YType.str, 'cTap2MediationRadiusKey'), ['str'])),
                ])
                self.ctap2mediationcontentid = None
                self.ctap2mediationdestaddresstype = None
                self.ctap2mediationdestaddress = None
                self.ctap2mediationdestport = None
                self.ctap2mediationsrcinterface = None
                self.ctap2mediationrtcpport = None
                self.ctap2mediationdscp = None
                self.ctap2mediationdatatype = None
                self.ctap2mediationretransmittype = None
                self.ctap2mediationtimeout = None
                self.ctap2mediationtransport = None
                self.ctap2mediationnotificationenable = None
                self.ctap2mediationstatus = None
                self.ctap2mediationradiuskey = None
                self._segment_path = lambda: "cTap2MediationEntry" + "[cTap2MediationContentId='" + str(self.ctap2mediationcontentid) + "']"
                self._absolute_path = lambda: "CISCO-TAP2-MIB:CISCO-TAP2-MIB/cTap2MediationTable/%s" % self._segment_path()
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(CISCOTAP2MIB.CTap2MediationTable.CTap2MediationEntry, ['ctap2mediationcontentid', 'ctap2mediationdestaddresstype', 'ctap2mediationdestaddress', 'ctap2mediationdestport', 'ctap2mediationsrcinterface', 'ctap2mediationrtcpport', 'ctap2mediationdscp', 'ctap2mediationdatatype', 'ctap2mediationretransmittype', 'ctap2mediationtimeout', 'ctap2mediationtransport', 'ctap2mediationnotificationenable', 'ctap2mediationstatus', 'ctap2mediationradiuskey'], name, value)

            class CTap2MediationTransport(Enum):
                """
                CTap2MediationTransport (Enum Class)

                The protocol used in transferring intercepted data to the

                Mediation Device. The following protocols may be supported\:

                           udp\:     PacketCable udp format

                           rtpNack\: RTP with Nack resilience

                           tcp\:     TCP with head of line blocking

                           sctp\:    SCTP with head of line blocking 

                           rtp\:     Realtime Transport Protocol(RTP)

                                    packet format

                           radius\:  Use Radius, PacketCable1.5 Event Message

                                    to transport the intercepted information.

                .. data:: udp = 1

                .. data:: rtpNack = 2

                .. data:: tcp = 3

                .. data:: sctp = 4

                .. data:: rtp = 5

                .. data:: radius = 6

                """

                udp = Enum.YLeaf(1, "udp")

                rtpNack = Enum.YLeaf(2, "rtpNack")

                tcp = Enum.YLeaf(3, "tcp")

                sctp = Enum.YLeaf(4, "sctp")

                rtp = Enum.YLeaf(5, "rtp")

                radius = Enum.YLeaf(6, "radius")





    class CTap2StreamTable(Entity):
        """
        The Intercept Stream Table lists the traffic streams to be
        intercepted. The same data stream may be required by multiple 
        taps, and one might assume that often the intercepted stream 
        is a small subset of the traffic that could be intercepted.
        
        
        The Table consists of generic fields that are independent
        of the type of intercept. It contains type of the specific 
        filter which is defined in an extension MIB and counters to 
        account for packets intercepted or dropped by the attached
        filter specification.
        
        Note that the Mediation Device must make sure there is 
        only one type of specific filter created with the same 
        indices as that of a row in this table, otherwise the 
        later creations will fail. For example, if there is a 
        row in this table with index 1.2, there can be a 
        corresponding row with the same index either in 
        citapStreamTable, c8tapStreamTable or cuctTapStreamTable,
        but not all. 
        
        
        The first index indicates which Mediation Device the
        intercepted traffic will be diverted to. The second index
        permits multiple classifiers to be used together. 
        
        Entries are added to this table via cTap2StreamStatus in
        accordance with the RowStatus convention.
        
        .. attribute:: ctap2streamentry
        
        	A stream entry indicates a single data stream to be intercepted to a Mediation Device. Many selected data streams may go to the same application interface, and many application interfaces are supported
        	**type**\: list of  		 :py:class:`CTap2StreamEntry <ydk.models.cisco_ios_xe.CISCO_TAP2_MIB.CISCOTAP2MIB.CTap2StreamTable.CTap2StreamEntry>`
        
        	**config**\: False
        
        

        """

        _prefix = 'CISCO-TAP2-MIB'
        _revision = '2009-11-06'

        def __init__(self):
            super(CISCOTAP2MIB.CTap2StreamTable, self).__init__()

            self.yang_name = "cTap2StreamTable"
            self.yang_parent_name = "CISCO-TAP2-MIB"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([("cTap2StreamEntry", ("ctap2streamentry", CISCOTAP2MIB.CTap2StreamTable.CTap2StreamEntry))])
            self._leafs = OrderedDict()

            self.ctap2streamentry = YList(self)
            self._segment_path = lambda: "cTap2StreamTable"
            self._absolute_path = lambda: "CISCO-TAP2-MIB:CISCO-TAP2-MIB/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(CISCOTAP2MIB.CTap2StreamTable, [], name, value)


        class CTap2StreamEntry(Entity):
            """
            A stream entry indicates a single data stream to be
            intercepted to a Mediation Device. Many selected data
            streams may go to the same application interface, and many
            application interfaces are supported.
            
            .. attribute:: ctap2mediationcontentid  (key)
            
            	
            	**type**\: int
            
            	**range:** 1..2147483647
            
            	**refers to**\:  :py:class:`ctap2mediationcontentid <ydk.models.cisco_ios_xe.CISCO_TAP2_MIB.CISCOTAP2MIB.CTap2MediationTable.CTap2MediationEntry>`
            
            	**config**\: False
            
            .. attribute:: ctap2streamindex  (key)
            
            	The index of the stream itself
            	**type**\: int
            
            	**range:** 1..2147483647
            
            	**config**\: False
            
            .. attribute:: ctap2streamtype
            
            	Identifies the type of intercept filter associated to this generic stream. The following types of streams are supported\:        ip\:             The specific filter is an IP filter                         with same indices as that of this                         table. The exact filter is a row in                         citapStreamTable of CISCO\-IP\-TAP\-MIB.        mac\:            The specific filter is a MAC filter                        with same indices as that of this table.                        The exact filter is a row in                         c8tapStreamTable of CISCO\-802\-TAP\-MIB.        userConnecton\:  The specific filter is a user connection                        filter with same indices as that of                         this table. The exact filter is a row                         in cuctTapStreamTable of                         CISCO\-USER\-CONNECTION\-TAP\-MIB.        msPdsn\:         The specific filter is a Mobile Sub                        connection filter with same indices as                        that of this table. The exact filter                        is a row in ccptapStreamTable of                         CISCO\-CDMA\-PDSN\-TAP\-MIB.        mobility\:       The specific filter is a Mobile                         Subscriber connection filter with same                        indices as that of this table. The exact                        filter is a row in cmtapStreamTable of                         CISCO\-MOBILITY\-TAP\-MIB.        voip\:           The specific filter is a VoIP                        Subscriber filter with same                        indices as that of this table. The exact                        filter is a row in cvoiptapStreamTable of                        CISCO\-VOIP\-TAP\-MIB
            	**type**\:  :py:class:`CTap2StreamType <ydk.models.cisco_ios_xe.CISCO_TAP2_MIB.CISCOTAP2MIB.CTap2StreamTable.CTap2StreamEntry.CTap2StreamType>`
            
            	**config**\: False
            
            .. attribute:: ctap2streaminterceptenable
            
            	If 'true', the tap should intercept matching traffic. The value for this object should be set to 'true' only after an  additional filter specification has been attached to this  stream
            	**type**\: bool
            
            	**config**\: False
            
            .. attribute:: ctap2streaminterceptedpackets
            
            	The number of packets matching this data stream specification that have been intercepted
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**config**\: False
            
            .. attribute:: ctap2streaminterceptdrops
            
            	The number of packets matching this data stream specification that, having been intercepted, were dropped in the lawful intercept process
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**config**\: False
            
            .. attribute:: ctap2streamstatus
            
            	The status of this conceptual row. This object manages creation, modification, and deletion of rows in this table. cTap2StreamInterceptEnable may be modified any time even the value of this entry rowStatus object is 'active'.  When other rows must be changed, cTap2StreamStatus must be first set to 'notInService'
            	**type**\:  :py:class:`RowStatus <ydk.models.cisco_ios_xe.SNMPv2_TC.RowStatus>`
            
            	**config**\: False
            
            .. attribute:: ctap2streaminterceptedhcpackets
            
            	The number of packets matching this data stream specification that have been intercepted. This object is a 64\-bit version of cTap2StreamInterceptedPackets
            	**type**\: int
            
            	**range:** 0..18446744073709551615
            
            	**config**\: False
            
            .. attribute:: ctap2streamintercepthcdrops
            
            	The number of packets matching this data stream specification that, having been intercepted, were dropped in the lawful intercept process. This object is a 64\-bit version of cTap2StreamInterceptDrops
            	**type**\: int
            
            	**range:** 0..18446744073709551615
            
            	**config**\: False
            
            

            """

            _prefix = 'CISCO-TAP2-MIB'
            _revision = '2009-11-06'

            def __init__(self):
                super(CISCOTAP2MIB.CTap2StreamTable.CTap2StreamEntry, self).__init__()

                self.yang_name = "cTap2StreamEntry"
                self.yang_parent_name = "cTap2StreamTable"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['ctap2mediationcontentid','ctap2streamindex']
                self._child_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('ctap2mediationcontentid', (YLeaf(YType.str, 'cTap2MediationContentId'), ['int'])),
                    ('ctap2streamindex', (YLeaf(YType.int32, 'cTap2StreamIndex'), ['int'])),
                    ('ctap2streamtype', (YLeaf(YType.enumeration, 'cTap2StreamType'), [('ydk.models.cisco_ios_xe.CISCO_TAP2_MIB', 'CISCOTAP2MIB', 'CTap2StreamTable.CTap2StreamEntry.CTap2StreamType')])),
                    ('ctap2streaminterceptenable', (YLeaf(YType.boolean, 'cTap2StreamInterceptEnable'), ['bool'])),
                    ('ctap2streaminterceptedpackets', (YLeaf(YType.uint32, 'cTap2StreamInterceptedPackets'), ['int'])),
                    ('ctap2streaminterceptdrops', (YLeaf(YType.uint32, 'cTap2StreamInterceptDrops'), ['int'])),
                    ('ctap2streamstatus', (YLeaf(YType.enumeration, 'cTap2StreamStatus'), [('ydk.models.cisco_ios_xe.SNMPv2_TC', 'RowStatus', '')])),
                    ('ctap2streaminterceptedhcpackets', (YLeaf(YType.uint64, 'cTap2StreamInterceptedHCPackets'), ['int'])),
                    ('ctap2streamintercepthcdrops', (YLeaf(YType.uint64, 'cTap2StreamInterceptHCDrops'), ['int'])),
                ])
                self.ctap2mediationcontentid = None
                self.ctap2streamindex = None
                self.ctap2streamtype = None
                self.ctap2streaminterceptenable = None
                self.ctap2streaminterceptedpackets = None
                self.ctap2streaminterceptdrops = None
                self.ctap2streamstatus = None
                self.ctap2streaminterceptedhcpackets = None
                self.ctap2streamintercepthcdrops = None
                self._segment_path = lambda: "cTap2StreamEntry" + "[cTap2MediationContentId='" + str(self.ctap2mediationcontentid) + "']" + "[cTap2StreamIndex='" + str(self.ctap2streamindex) + "']"
                self._absolute_path = lambda: "CISCO-TAP2-MIB:CISCO-TAP2-MIB/cTap2StreamTable/%s" % self._segment_path()
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(CISCOTAP2MIB.CTap2StreamTable.CTap2StreamEntry, ['ctap2mediationcontentid', 'ctap2streamindex', 'ctap2streamtype', 'ctap2streaminterceptenable', 'ctap2streaminterceptedpackets', 'ctap2streaminterceptdrops', 'ctap2streamstatus', 'ctap2streaminterceptedhcpackets', 'ctap2streamintercepthcdrops'], name, value)

            class CTap2StreamType(Enum):
                """
                CTap2StreamType (Enum Class)

                Identifies the type of intercept filter associated to this

                generic stream. The following types of streams are supported\:

                       ip\:             The specific filter is an IP filter 

                                       with same indices as that of this 

                                       table. The exact filter is a row in 

                                       citapStreamTable of CISCO\-IP\-TAP\-MIB.

                       mac\:            The specific filter is a MAC filter

                                       with same indices as that of this table.

                                       The exact filter is a row in 

                                       c8tapStreamTable of CISCO\-802\-TAP\-MIB.

                       userConnecton\:  The specific filter is a user connection

                                       filter with same indices as that of 

                                       this table. The exact filter is a row 

                                       in cuctTapStreamTable of 

                                       CISCO\-USER\-CONNECTION\-TAP\-MIB.

                       msPdsn\:         The specific filter is a Mobile Sub

                                       connection filter with same indices as

                                       that of this table. The exact filter

                                       is a row in ccptapStreamTable of 

                                       CISCO\-CDMA\-PDSN\-TAP\-MIB.

                       mobility\:       The specific filter is a Mobile 

                                       Subscriber connection filter with same

                                       indices as that of this table. The exact

                                       filter is a row in cmtapStreamTable of 

                                       CISCO\-MOBILITY\-TAP\-MIB.

                       voip\:           The specific filter is a VoIP

                                       Subscriber filter with same

                                       indices as that of this table. The exact

                                       filter is a row in cvoiptapStreamTable of

                                       CISCO\-VOIP\-TAP\-MIB.

                .. data:: ip = 1

                .. data:: mac = 2

                .. data:: userConnection = 3

                .. data:: msPdsn = 4

                .. data:: mobility = 5

                .. data:: voip = 6

                """

                ip = Enum.YLeaf(1, "ip")

                mac = Enum.YLeaf(2, "mac")

                userConnection = Enum.YLeaf(3, "userConnection")

                msPdsn = Enum.YLeaf(4, "msPdsn")

                mobility = Enum.YLeaf(5, "mobility")

                voip = Enum.YLeaf(6, "voip")





    class CTap2DebugTable(Entity):
        """
        A table that contains Lawful Intercept debug messages
        generated by the implementing device. This table is used 
        by ciscoTap2MediationDebug and ciscoTap2StreamDebug 
        notifications.
        
        An entry in this table contains a debug message which is
        regarding either a Mediation Device or a intercept stream 
        created by a Mediation Device. The Mediation device is 
        identified by cTap2DebugMediationId whose value is
        that of cTap2MediationContentId of cTapMediationEntry.
        The stream is identified by cTap2DebugMediationId and
        cTap2DebugStreamId whose values are that of 
        cTap2MediationContentId and cTap2StreamIndex of 
        the corresponding cTap2StreamEntry.
        
        Note that cTap2DebugStreamId may be zero for an entry,
        in which case the debug message is regarding a Medation
        Device.
        
        Entries are added to this table via cTap2DebugStatus in
        accordance with the RowStatus convention.
        
        .. attribute:: ctap2debugentry
        
        	A list of the debug messages
        	**type**\: list of  		 :py:class:`CTap2DebugEntry <ydk.models.cisco_ios_xe.CISCO_TAP2_MIB.CISCOTAP2MIB.CTap2DebugTable.CTap2DebugEntry>`
        
        	**config**\: False
        
        

        """

        _prefix = 'CISCO-TAP2-MIB'
        _revision = '2009-11-06'

        def __init__(self):
            super(CISCOTAP2MIB.CTap2DebugTable, self).__init__()

            self.yang_name = "cTap2DebugTable"
            self.yang_parent_name = "CISCO-TAP2-MIB"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([("cTap2DebugEntry", ("ctap2debugentry", CISCOTAP2MIB.CTap2DebugTable.CTap2DebugEntry))])
            self._leafs = OrderedDict()

            self.ctap2debugentry = YList(self)
            self._segment_path = lambda: "cTap2DebugTable"
            self._absolute_path = lambda: "CISCO-TAP2-MIB:CISCO-TAP2-MIB/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(CISCOTAP2MIB.CTap2DebugTable, [], name, value)


        class CTap2DebugEntry(Entity):
            """
            A list of the debug messages.
            
            .. attribute:: ctap2debugindex  (key)
            
            	Index to the debug table
            	**type**\: int
            
            	**range:** 1..2147483647
            
            	**config**\: False
            
            .. attribute:: ctap2debugmediationid
            
            	The value of this object is that of cTap2MediationContentId identifying an entry in cTap2MediationTable. Note this object may contain a value for which an entry in cTap2MediationTable does not exist. This happens when creation of an entry in cTap2MediationTable fails and this debug message conveys more detailed information regarding the failure
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**config**\: False
            
            .. attribute:: ctap2debugstreamid
            
            	The value of this object is that of cTap2StreamIndex of an entry in cTap2StreamTable. This object along with cTap2DebugMediationId identifies an entry in cTap2StreamTable. The value of this object may be zero, in which this debug message is regarding a Mediation Device, but not a particular stream.  Note this object may contain a value for which an  entry in cTap2MediationTable does not exist. This happens  when creation of an entry in cTap2StreamTable fails
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**config**\: False
            
            .. attribute:: ctap2debugmessage
            
            	A text string contains the debug message
            	**type**\: str
            
            	**config**\: False
            
            .. attribute:: ctap2debugstatus
            
            	The status of this conceptual row. A row in this table is created by the implementing device. A management station cannot modify any of the objects in this row, except deleting the row by setting this object to 'destroy'
            	**type**\:  :py:class:`RowStatus <ydk.models.cisco_ios_xe.SNMPv2_TC.RowStatus>`
            
            	**config**\: False
            
            

            """

            _prefix = 'CISCO-TAP2-MIB'
            _revision = '2009-11-06'

            def __init__(self):
                super(CISCOTAP2MIB.CTap2DebugTable.CTap2DebugEntry, self).__init__()

                self.yang_name = "cTap2DebugEntry"
                self.yang_parent_name = "cTap2DebugTable"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['ctap2debugindex']
                self._child_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('ctap2debugindex', (YLeaf(YType.int32, 'cTap2DebugIndex'), ['int'])),
                    ('ctap2debugmediationid', (YLeaf(YType.uint32, 'cTap2DebugMediationId'), ['int'])),
                    ('ctap2debugstreamid', (YLeaf(YType.uint32, 'cTap2DebugStreamId'), ['int'])),
                    ('ctap2debugmessage', (YLeaf(YType.str, 'cTap2DebugMessage'), ['str'])),
                    ('ctap2debugstatus', (YLeaf(YType.enumeration, 'cTap2DebugStatus'), [('ydk.models.cisco_ios_xe.SNMPv2_TC', 'RowStatus', '')])),
                ])
                self.ctap2debugindex = None
                self.ctap2debugmediationid = None
                self.ctap2debugstreamid = None
                self.ctap2debugmessage = None
                self.ctap2debugstatus = None
                self._segment_path = lambda: "cTap2DebugEntry" + "[cTap2DebugIndex='" + str(self.ctap2debugindex) + "']"
                self._absolute_path = lambda: "CISCO-TAP2-MIB:CISCO-TAP2-MIB/cTap2DebugTable/%s" % self._segment_path()
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(CISCOTAP2MIB.CTap2DebugTable.CTap2DebugEntry, ['ctap2debugindex', 'ctap2debugmediationid', 'ctap2debugstreamid', 'ctap2debugmessage', 'ctap2debugstatus'], name, value)




    class CTap2DebugUserTable(Entity):
        """
        The User Table lists information of all the users configured
        in the system who are given permission by different Mediation
        Devices to access Lawful Intercept CLIs.
        
        This table will have dependancy on cTap2MediationTable. When
        entry in cTap2MediationTable is deleted or moved to
        'notInService', entries corresponding cTap2MediationContentId
        in this table will be deleted.
        
        .. attribute:: ctap2debuguserentry
        
        	A conceptual row in the cTap2DebugUserTable. Each row represents name of user on the router to whom Mediation Device with CCCid represented by cTap2MediationContentId has given access to Lawful Intercept commands and cTap2DebugUserTimeout represents the time when the entry will expire
        	**type**\: list of  		 :py:class:`CTap2DebugUserEntry <ydk.models.cisco_ios_xe.CISCO_TAP2_MIB.CISCOTAP2MIB.CTap2DebugUserTable.CTap2DebugUserEntry>`
        
        	**config**\: False
        
        

        """

        _prefix = 'CISCO-TAP2-MIB'
        _revision = '2009-11-06'

        def __init__(self):
            super(CISCOTAP2MIB.CTap2DebugUserTable, self).__init__()

            self.yang_name = "cTap2DebugUserTable"
            self.yang_parent_name = "CISCO-TAP2-MIB"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([("cTap2DebugUserEntry", ("ctap2debuguserentry", CISCOTAP2MIB.CTap2DebugUserTable.CTap2DebugUserEntry))])
            self._leafs = OrderedDict()

            self.ctap2debuguserentry = YList(self)
            self._segment_path = lambda: "cTap2DebugUserTable"
            self._absolute_path = lambda: "CISCO-TAP2-MIB:CISCO-TAP2-MIB/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(CISCOTAP2MIB.CTap2DebugUserTable, [], name, value)


        class CTap2DebugUserEntry(Entity):
            """
            A conceptual row in the cTap2DebugUserTable. Each row
            represents name of user on the router to whom Mediation Device
            with CCCid represented by cTap2MediationContentId has given
            access to Lawful Intercept commands and cTap2DebugUserTimeout
            represents the time when the entry will expire.
            
            .. attribute:: ctap2mediationcontentid  (key)
            
            	
            	**type**\: int
            
            	**range:** 1..2147483647
            
            	**refers to**\:  :py:class:`ctap2mediationcontentid <ydk.models.cisco_ios_xe.CISCO_TAP2_MIB.CISCOTAP2MIB.CTap2MediationTable.CTap2MediationEntry>`
            
            	**config**\: False
            
            .. attribute:: ctap2debugusername  (key)
            
            	A human readable string representing the name of debug user who will have access to Lawful Intercept commands
            	**type**\: str
            
            	**length:** 1..255
            
            	**config**\: False
            
            .. attribute:: ctap2debugusertimeout
            
            	This object specifies the time at which the row will be removed from the table by the system. The value of this object is only effective when the value of corresponding instance of cTap2DebugUserStatus is 'active'
            	**type**\: str
            
            	**config**\: False
            
            .. attribute:: ctap2debuguserstoragetype
            
            	This object specifies the storage type of this conceptual row. If it is set to 'nonVolatile', this entry can be saved into non\-volatile memory
            	**type**\:  :py:class:`StorageType <ydk.models.cisco_ios_xe.SNMPv2_TC.StorageType>`
            
            	**config**\: False
            
            .. attribute:: ctap2debuguserstatus
            
            	The status of this conceptual row. This object manages creation, modification, and deletion of rows in this table. cTap2DebugUserTimeout may be modified any time even when the value of this entry rowStatus object is 'active'
            	**type**\:  :py:class:`RowStatus <ydk.models.cisco_ios_xe.SNMPv2_TC.RowStatus>`
            
            	**config**\: False
            
            

            """

            _prefix = 'CISCO-TAP2-MIB'
            _revision = '2009-11-06'

            def __init__(self):
                super(CISCOTAP2MIB.CTap2DebugUserTable.CTap2DebugUserEntry, self).__init__()

                self.yang_name = "cTap2DebugUserEntry"
                self.yang_parent_name = "cTap2DebugUserTable"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['ctap2mediationcontentid','ctap2debugusername']
                self._child_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('ctap2mediationcontentid', (YLeaf(YType.str, 'cTap2MediationContentId'), ['int'])),
                    ('ctap2debugusername', (YLeaf(YType.str, 'cTap2DebugUserName'), ['str'])),
                    ('ctap2debugusertimeout', (YLeaf(YType.str, 'cTap2DebugUserTimeout'), ['str'])),
                    ('ctap2debuguserstoragetype', (YLeaf(YType.enumeration, 'cTap2DebugUserStorageType'), [('ydk.models.cisco_ios_xe.SNMPv2_TC', 'StorageType', '')])),
                    ('ctap2debuguserstatus', (YLeaf(YType.enumeration, 'cTap2DebugUserStatus'), [('ydk.models.cisco_ios_xe.SNMPv2_TC', 'RowStatus', '')])),
                ])
                self.ctap2mediationcontentid = None
                self.ctap2debugusername = None
                self.ctap2debugusertimeout = None
                self.ctap2debuguserstoragetype = None
                self.ctap2debuguserstatus = None
                self._segment_path = lambda: "cTap2DebugUserEntry" + "[cTap2MediationContentId='" + str(self.ctap2mediationcontentid) + "']" + "[cTap2DebugUserName='" + str(self.ctap2debugusername) + "']"
                self._absolute_path = lambda: "CISCO-TAP2-MIB:CISCO-TAP2-MIB/cTap2DebugUserTable/%s" % self._segment_path()
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(CISCOTAP2MIB.CTap2DebugUserTable.CTap2DebugUserEntry, ['ctap2mediationcontentid', 'ctap2debugusername', 'ctap2debugusertimeout', 'ctap2debuguserstoragetype', 'ctap2debuguserstatus'], name, value)



    def clone_ptr(self):
        self._top_entity = CISCOTAP2MIB()
        return self._top_entity



