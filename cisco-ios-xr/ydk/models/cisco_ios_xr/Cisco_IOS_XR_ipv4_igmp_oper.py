""" Cisco_IOS_XR_ipv4_igmp_oper 

This module contains a collection of YANG definitions
for Cisco IOS\-XR ipv4\-igmp package operational data.

This module contains definitions
for the following management objects\:
  mld\: MLD operational data
  igmp\: igmp

Copyright (c) 2013\-2018 by Cisco Systems, Inc.
All rights reserved.

"""
import sys
from collections import OrderedDict

from ydk.types import Entity as _Entity_
from ydk.types import EntityPath, Identity, Enum, YType, YLeaf, YLeafList, YList, LeafDataList, Bits, Empty, Decimal64
from ydk.types import Entity, EntityPath, Identity, Enum, YType, YLeaf, YLeafList, YList, LeafDataList, Bits, Empty, Decimal64
from ydk.filters import YFilter
from ydk.errors import YError, YModelError
from ydk.errors.error_handler import handle_type_error as _handle_type_error



class IgmpAfi(Enum):
    """
    IgmpAfi (Enum Class)

    Address family

    .. data:: ipv4_unicast = 0

    	IP v4 unicast

    .. data:: ipv6_unicast = 1

    	IP v6 unicast

    """

    ipv4_unicast = Enum.YLeaf(0, "ipv4-unicast")

    ipv6_unicast = Enum.YLeaf(1, "ipv6-unicast")


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
        return meta._meta_table['IgmpAfi']


class IgmpEdmProtocol(Enum):
    """
    IgmpEdmProtocol (Enum Class)

    IGMP Protocol

    .. data:: no_route = 0

    	no route

    .. data:: sm = 1

    	sm

    .. data:: dm = 2

    	dm

    .. data:: bidir = 3

    	bidir

    .. data:: ssm = 4

    	ssm

    .. data:: any = 6

    	any

    """

    no_route = Enum.YLeaf(0, "no-route")

    sm = Enum.YLeaf(1, "sm")

    dm = Enum.YLeaf(2, "dm")

    bidir = Enum.YLeaf(3, "bidir")

    ssm = Enum.YLeaf(4, "ssm")

    any = Enum.YLeaf(6, "any")


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
        return meta._meta_table['IgmpEdmProtocol']


class IgmpssmMap(Enum):
    """
    IgmpssmMap (Enum Class)

    Igmpssm map

    .. data:: static = 0

    	Static

    .. data:: dns = 1

    	Dns

    .. data:: all = 2

    	All

    """

    static = Enum.YLeaf(0, "static")

    dns = Enum.YLeaf(1, "dns")

    all = Enum.YLeaf(2, "all")


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
        return meta._meta_table['IgmpssmMap']



class Mld(_Entity_):
    """
    MLD operational data
    
    .. attribute:: standby
    
    	Standby Process
    	**type**\:  :py:class:`Standby <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby>`
    
    	**config**\: False
    
    .. attribute:: active
    
    	Active Process
    	**type**\:  :py:class:`Active <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active>`
    
    	**config**\: False
    
    

    """

    _prefix = 'ipv4-igmp-oper'
    _revision = '2018-01-31'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(Mld, self).__init__()
        self._top_entity = None

        self.yang_name = "mld"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-igmp-oper"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([("standby", ("standby", Mld.Standby)), ("active", ("active", Mld.Active))])
        self._leafs = OrderedDict()

        self.standby = Mld.Standby()
        self.standby.parent = self
        self._children_name_map["standby"] = "standby"

        self.active = Mld.Active()
        self.active.parent = self
        self._children_name_map["active"] = "active"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld"
        self._is_frozen = True

    def __setattr__(self, name, value):
        self._perform_setattr(Mld, [], name, value)


    class Standby(_Entity_):
        """
        Standby Process
        
        .. attribute:: vrfs
        
        	VRF Table
        	**type**\:  :py:class:`Vrfs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs>`
        
        	**config**\: False
        
        .. attribute:: process
        
        	Process
        	**type**\:  :py:class:`Process <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Process>`
        
        	**config**\: False
        
        .. attribute:: default_context
        
        	Default Context
        	**type**\:  :py:class:`DefaultContext <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext>`
        
        	**config**\: False
        
        

        """

        _prefix = 'ipv4-igmp-oper'
        _revision = '2018-01-31'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(Mld.Standby, self).__init__()

            self.yang_name = "standby"
            self.yang_parent_name = "mld"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([("vrfs", ("vrfs", Mld.Standby.Vrfs)), ("process", ("process", Mld.Standby.Process)), ("default-context", ("default_context", Mld.Standby.DefaultContext))])
            self._leafs = OrderedDict()

            self.vrfs = Mld.Standby.Vrfs()
            self.vrfs.parent = self
            self._children_name_map["vrfs"] = "vrfs"

            self.process = Mld.Standby.Process()
            self.process.parent = self
            self._children_name_map["process"] = "process"

            self.default_context = Mld.Standby.DefaultContext()
            self.default_context.parent = self
            self._children_name_map["default_context"] = "default-context"
            self._segment_path = lambda: "standby"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(Mld.Standby, [], name, value)


        class Vrfs(_Entity_):
            """
            VRF Table
            
            .. attribute:: vrf
            
            	VRF table Names
            	**type**\: list of  		 :py:class:`Vrf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf>`
            
            	**config**\: False
            
            

            """

            _prefix = 'ipv4-igmp-oper'
            _revision = '2018-01-31'

            def __init__(self):
                if sys.version_info > (3,):
                    super().__init__()
                else:
                    super(Mld.Standby.Vrfs, self).__init__()

                self.yang_name = "vrfs"
                self.yang_parent_name = "standby"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("vrf", ("vrf", Mld.Standby.Vrfs.Vrf))])
                self._leafs = OrderedDict()

                self.vrf = YList(self)
                self._segment_path = lambda: "vrfs"
                self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/standby/%s" % self._segment_path()
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(Mld.Standby.Vrfs, [], name, value)


            class Vrf(_Entity_):
                """
                VRF table Names
                
                .. attribute:: vrf_name  (key)
                
                	VRF name
                	**type**\: str
                
                	**length:** 1..32
                
                	**config**\: False
                
                .. attribute:: summary
                
                	IGMP Summary Information
                	**type**\:  :py:class:`Summary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.Summary>`
                
                	**config**\: False
                
                .. attribute:: interface_state_ons
                
                	IGMP Interface state on
                	**type**\:  :py:class:`InterfaceStateOns <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.InterfaceStateOns>`
                
                	**config**\: False
                
                .. attribute:: detail_groups
                
                	IGMP Detail Group Database
                	**type**\:  :py:class:`DetailGroups <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.DetailGroups>`
                
                	**config**\: False
                
                .. attribute:: non_active_groups
                
                	IGMP Non\-Active Groups Information
                	**type**\:  :py:class:`NonActiveGroups <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.NonActiveGroups>`
                
                	**config**\: False
                
                .. attribute:: ssm_maps
                
                	SSM Map Table
                	**type**\:  :py:class:`SsmMaps <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.SsmMaps>`
                
                	**config**\: False
                
                .. attribute:: explicit_groups
                
                	IGMP Explicit Group Database
                	**type**\:  :py:class:`ExplicitGroups <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.ExplicitGroups>`
                
                	**config**\: False
                
                .. attribute:: interface_table
                
                	IGMP Interface specific Table
                	**type**\:  :py:class:`InterfaceTable <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.InterfaceTable>`
                
                	**config**\: False
                
                .. attribute:: interface_unicast_qos_adjusts
                
                	IGMP Interface Unicast\-Qos\-Adjust
                	**type**\:  :py:class:`InterfaceUnicastQosAdjusts <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.InterfaceUnicastQosAdjusts>`
                
                	**config**\: False
                
                .. attribute:: ranges
                
                	Range table
                	**type**\:  :py:class:`Ranges <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.Ranges>`
                
                	**config**\: False
                
                .. attribute:: ifrs_interfaces
                
                	IGMP Interface specific
                	**type**\:  :py:class:`IfrsInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.IfrsInterfaces>`
                
                	**config**\: False
                
                .. attribute:: traffic_counters
                
                	IGMP Message Traffic Counters
                	**type**\:  :py:class:`TrafficCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.TrafficCounters>`
                
                	**config**\: False
                
                .. attribute:: groups
                
                	IGMP Group Database Table
                	**type**\:  :py:class:`Groups <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.Groups>`
                
                	**config**\: False
                
                .. attribute:: group_summary
                
                	IGMP Groups Summary
                	**type**\:  :py:class:`GroupSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.GroupSummary>`
                
                	**config**\: False
                
                .. attribute:: ifrs_interface_summary
                
                	IGMP IFRS Interface summary
                	**type**\:  :py:class:`IfrsInterfaceSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.IfrsInterfaceSummary>`
                
                	**config**\: False
                
                .. attribute:: global_interface_table
                
                	IGMP Global Interface 
                	**type**\:  :py:class:`GlobalInterfaceTable <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.GlobalInterfaceTable>`
                
                	**config**\: False
                
                .. attribute:: ssm_map_details
                
                	SSM Map Detail
                	**type**\:  :py:class:`SsmMapDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.SsmMapDetails>`
                
                	**config**\: False
                
                .. attribute:: interface_state_offs
                
                	IGMP Interface state off
                	**type**\:  :py:class:`InterfaceStateOffs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.InterfaceStateOffs>`
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Mld.Standby.Vrfs.Vrf, self).__init__()

                    self.yang_name = "vrf"
                    self.yang_parent_name = "vrfs"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = ['vrf_name']
                    self._child_classes = OrderedDict([("summary", ("summary", Mld.Standby.Vrfs.Vrf.Summary)), ("interface-state-ons", ("interface_state_ons", Mld.Standby.Vrfs.Vrf.InterfaceStateOns)), ("detail-groups", ("detail_groups", Mld.Standby.Vrfs.Vrf.DetailGroups)), ("non-active-groups", ("non_active_groups", Mld.Standby.Vrfs.Vrf.NonActiveGroups)), ("ssm-maps", ("ssm_maps", Mld.Standby.Vrfs.Vrf.SsmMaps)), ("explicit-groups", ("explicit_groups", Mld.Standby.Vrfs.Vrf.ExplicitGroups)), ("interface-table", ("interface_table", Mld.Standby.Vrfs.Vrf.InterfaceTable)), ("interface-unicast-qos-adjusts", ("interface_unicast_qos_adjusts", Mld.Standby.Vrfs.Vrf.InterfaceUnicastQosAdjusts)), ("ranges", ("ranges", Mld.Standby.Vrfs.Vrf.Ranges)), ("ifrs-interfaces", ("ifrs_interfaces", Mld.Standby.Vrfs.Vrf.IfrsInterfaces)), ("traffic-counters", ("traffic_counters", Mld.Standby.Vrfs.Vrf.TrafficCounters)), ("groups", ("groups", Mld.Standby.Vrfs.Vrf.Groups)), ("group-summary", ("group_summary", Mld.Standby.Vrfs.Vrf.GroupSummary)), ("ifrs-interface-summary", ("ifrs_interface_summary", Mld.Standby.Vrfs.Vrf.IfrsInterfaceSummary)), ("global-interface-table", ("global_interface_table", Mld.Standby.Vrfs.Vrf.GlobalInterfaceTable)), ("ssm-map-details", ("ssm_map_details", Mld.Standby.Vrfs.Vrf.SsmMapDetails)), ("interface-state-offs", ("interface_state_offs", Mld.Standby.Vrfs.Vrf.InterfaceStateOffs))])
                    self._leafs = OrderedDict([
                        ('vrf_name', (YLeaf(YType.str, 'vrf-name'), ['str'])),
                    ])
                    self.vrf_name = None

                    self.summary = Mld.Standby.Vrfs.Vrf.Summary()
                    self.summary.parent = self
                    self._children_name_map["summary"] = "summary"

                    self.interface_state_ons = Mld.Standby.Vrfs.Vrf.InterfaceStateOns()
                    self.interface_state_ons.parent = self
                    self._children_name_map["interface_state_ons"] = "interface-state-ons"

                    self.detail_groups = Mld.Standby.Vrfs.Vrf.DetailGroups()
                    self.detail_groups.parent = self
                    self._children_name_map["detail_groups"] = "detail-groups"

                    self.non_active_groups = Mld.Standby.Vrfs.Vrf.NonActiveGroups()
                    self.non_active_groups.parent = self
                    self._children_name_map["non_active_groups"] = "non-active-groups"

                    self.ssm_maps = Mld.Standby.Vrfs.Vrf.SsmMaps()
                    self.ssm_maps.parent = self
                    self._children_name_map["ssm_maps"] = "ssm-maps"

                    self.explicit_groups = Mld.Standby.Vrfs.Vrf.ExplicitGroups()
                    self.explicit_groups.parent = self
                    self._children_name_map["explicit_groups"] = "explicit-groups"

                    self.interface_table = Mld.Standby.Vrfs.Vrf.InterfaceTable()
                    self.interface_table.parent = self
                    self._children_name_map["interface_table"] = "interface-table"

                    self.interface_unicast_qos_adjusts = Mld.Standby.Vrfs.Vrf.InterfaceUnicastQosAdjusts()
                    self.interface_unicast_qos_adjusts.parent = self
                    self._children_name_map["interface_unicast_qos_adjusts"] = "interface-unicast-qos-adjusts"

                    self.ranges = Mld.Standby.Vrfs.Vrf.Ranges()
                    self.ranges.parent = self
                    self._children_name_map["ranges"] = "ranges"

                    self.ifrs_interfaces = Mld.Standby.Vrfs.Vrf.IfrsInterfaces()
                    self.ifrs_interfaces.parent = self
                    self._children_name_map["ifrs_interfaces"] = "ifrs-interfaces"

                    self.traffic_counters = Mld.Standby.Vrfs.Vrf.TrafficCounters()
                    self.traffic_counters.parent = self
                    self._children_name_map["traffic_counters"] = "traffic-counters"

                    self.groups = Mld.Standby.Vrfs.Vrf.Groups()
                    self.groups.parent = self
                    self._children_name_map["groups"] = "groups"

                    self.group_summary = Mld.Standby.Vrfs.Vrf.GroupSummary()
                    self.group_summary.parent = self
                    self._children_name_map["group_summary"] = "group-summary"

                    self.ifrs_interface_summary = Mld.Standby.Vrfs.Vrf.IfrsInterfaceSummary()
                    self.ifrs_interface_summary.parent = self
                    self._children_name_map["ifrs_interface_summary"] = "ifrs-interface-summary"

                    self.global_interface_table = Mld.Standby.Vrfs.Vrf.GlobalInterfaceTable()
                    self.global_interface_table.parent = self
                    self._children_name_map["global_interface_table"] = "global-interface-table"

                    self.ssm_map_details = Mld.Standby.Vrfs.Vrf.SsmMapDetails()
                    self.ssm_map_details.parent = self
                    self._children_name_map["ssm_map_details"] = "ssm-map-details"

                    self.interface_state_offs = Mld.Standby.Vrfs.Vrf.InterfaceStateOffs()
                    self.interface_state_offs.parent = self
                    self._children_name_map["interface_state_offs"] = "interface-state-offs"
                    self._segment_path = lambda: "vrf" + "[vrf-name='" + str(self.vrf_name) + "']"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/standby/vrfs/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Mld.Standby.Vrfs.Vrf, ['vrf_name'], name, value)


                class Summary(_Entity_):
                    """
                    IGMP Summary Information
                    
                    .. attribute:: robustness
                    
                    	Robustness variable
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: group_limit
                    
                    	Maximum groups accepted
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: group_count
                    
                    	Current groups accepted
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_disabled
                    
                    	Is maximum enforcement disabled
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: supported_interfaces
                    
                    	No. of supported interfaces
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: unsupported_interfaces
                    
                    	No. of unsupported interfaces
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: enabled_interface_count
                    
                    	No. of enabled interfaces
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: disabled_interface_count
                    
                    	No. of disabled interfaces
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: tunnel_mte_config_count
                    
                    	No. of static group commands
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: node_low_memory
                    
                    	Is node in low memory condition
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: interface
                    
                    	Maximum and current groups accepted for each interface
                    	**type**\: list of  		 :py:class:`Interface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.Summary.Interface>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Mld.Standby.Vrfs.Vrf.Summary, self).__init__()

                        self.yang_name = "summary"
                        self.yang_parent_name = "vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("interface", ("interface", Mld.Standby.Vrfs.Vrf.Summary.Interface))])
                        self._leafs = OrderedDict([
                            ('robustness', (YLeaf(YType.uint32, 'robustness'), ['int'])),
                            ('group_limit', (YLeaf(YType.uint32, 'group-limit'), ['int'])),
                            ('group_count', (YLeaf(YType.uint32, 'group-count'), ['int'])),
                            ('is_disabled', (YLeaf(YType.boolean, 'is-disabled'), ['bool'])),
                            ('supported_interfaces', (YLeaf(YType.uint32, 'supported-interfaces'), ['int'])),
                            ('unsupported_interfaces', (YLeaf(YType.uint32, 'unsupported-interfaces'), ['int'])),
                            ('enabled_interface_count', (YLeaf(YType.uint32, 'enabled-interface-count'), ['int'])),
                            ('disabled_interface_count', (YLeaf(YType.uint32, 'disabled-interface-count'), ['int'])),
                            ('tunnel_mte_config_count', (YLeaf(YType.uint32, 'tunnel-mte-config-count'), ['int'])),
                            ('node_low_memory', (YLeaf(YType.boolean, 'node-low-memory'), ['bool'])),
                        ])
                        self.robustness = None
                        self.group_limit = None
                        self.group_count = None
                        self.is_disabled = None
                        self.supported_interfaces = None
                        self.unsupported_interfaces = None
                        self.enabled_interface_count = None
                        self.disabled_interface_count = None
                        self.tunnel_mte_config_count = None
                        self.node_low_memory = None

                        self.interface = YList(self)
                        self._segment_path = lambda: "summary"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Mld.Standby.Vrfs.Vrf.Summary, ['robustness', 'group_limit', 'group_count', 'is_disabled', 'supported_interfaces', 'unsupported_interfaces', 'enabled_interface_count', 'disabled_interface_count', 'tunnel_mte_config_count', 'node_low_memory'], name, value)


                    class Interface(_Entity_):
                        """
                        Maximum and current groups accepted for each
                        interface
                        
                        .. attribute:: interface_name
                        
                        	Interface
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: group_limit
                        
                        	Maximum groups accepted per interface
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: group_count
                        
                        	Current groups accepted per interface
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: parent_ifhandle
                        
                        	Parent if handle
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: on_off
                        
                        	Enabled/Disabled
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: time_since_last_query_in_seconds
                        
                        	Time elapsed since last query
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: time_since_last_report_in_seconds
                        
                        	Time elapsed since last report
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: router_uptime_in_seconds
                        
                        	Time elapsed since router enabled event
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Standby.Vrfs.Vrf.Summary.Interface, self).__init__()

                            self.yang_name = "interface"
                            self.yang_parent_name = "summary"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                ('group_limit', (YLeaf(YType.uint32, 'group-limit'), ['int'])),
                                ('group_count', (YLeaf(YType.uint32, 'group-count'), ['int'])),
                                ('parent_ifhandle', (YLeaf(YType.str, 'parent-ifhandle'), ['str'])),
                                ('on_off', (YLeaf(YType.boolean, 'on-off'), ['bool'])),
                                ('time_since_last_query_in_seconds', (YLeaf(YType.uint32, 'time-since-last-query-in-seconds'), ['int'])),
                                ('time_since_last_report_in_seconds', (YLeaf(YType.uint32, 'time-since-last-report-in-seconds'), ['int'])),
                                ('router_uptime_in_seconds', (YLeaf(YType.uint32, 'router-uptime-in-seconds'), ['int'])),
                            ])
                            self.interface_name = None
                            self.group_limit = None
                            self.group_count = None
                            self.parent_ifhandle = None
                            self.on_off = None
                            self.time_since_last_query_in_seconds = None
                            self.time_since_last_report_in_seconds = None
                            self.router_uptime_in_seconds = None
                            self._segment_path = lambda: "interface"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Standby.Vrfs.Vrf.Summary.Interface, ['interface_name', 'group_limit', 'group_count', 'parent_ifhandle', 'on_off', 'time_since_last_query_in_seconds', 'time_since_last_report_in_seconds', 'router_uptime_in_seconds'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Standby.Vrfs.Vrf.Summary.Interface']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Mld.Standby.Vrfs.Vrf.Summary']['meta_info']


                class InterfaceStateOns(_Entity_):
                    """
                    IGMP Interface state on
                    
                    .. attribute:: interface_state_on
                    
                    	IGMP Interface
                    	**type**\: list of  		 :py:class:`InterfaceStateOn <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Mld.Standby.Vrfs.Vrf.InterfaceStateOns, self).__init__()

                        self.yang_name = "interface-state-ons"
                        self.yang_parent_name = "vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("interface-state-on", ("interface_state_on", Mld.Standby.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn))])
                        self._leafs = OrderedDict()

                        self.interface_state_on = YList(self)
                        self._segment_path = lambda: "interface-state-ons"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Mld.Standby.Vrfs.Vrf.InterfaceStateOns, [], name, value)


                    class InterfaceStateOn(_Entity_):
                        """
                        IGMP Interface
                        
                        .. attribute:: interface_name  (key)
                        
                        	Interface Name
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: address
                        
                        	IP address
                        	**type**\:  :py:class:`Address <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.Address>`
                        
                        	**config**\: False
                        
                        .. attribute:: querier_address
                        
                        	Address of the Querier
                        	**type**\:  :py:class:`QuerierAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.QuerierAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: subscriber_address
                        
                        	Address of subscriber
                        	**type**\:  :py:class:`SubscriberAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.SubscriberAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: interface_name_xr
                        
                        	Interface
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: state
                        
                        	Interface state
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: prefix_length
                        
                        	Prefix length
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_interface_up
                        
                        	Is interface up
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_ip_enabled
                        
                        	Is IP enabled
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_router_enabled
                        
                        	Is Router functionality enabled
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: igmp_version
                        
                        	IGMP Router version
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        	**config**\: False
                        
                        .. attribute:: host_version
                        
                        	IGMP Host version
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        	**config**\: False
                        
                        .. attribute:: query_interval
                        
                        	Query Interval value in seconds
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        	**units**\: second
                        
                        .. attribute:: query_timeout
                        
                        	Query Timeout value
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: query_maximum_response_time
                        
                        	Max Response Timeout value
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: last_member_query_interval
                        
                        	Last Member Query Interval
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: group_joins
                        
                        	No. of group joins
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: group_leaves
                        
                        	No. of group leaves
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_querier
                        
                        	Are we querier
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: total_active_groups
                        
                        	Actual number of groups on interface
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: robustness
                        
                        	Robustness Variable value
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: proxy_interface
                        
                        	Proxy interface index
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: querier_uptime
                        
                        	Time since the last querier took over
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: las_ll_registration_count
                        
                        	LAS reg count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_get_address_count
                        
                        	LAS get addr count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_update_count
                        
                        	LAS Update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_ll_remove_update_count
                        
                        	LAS LL remove update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_ll_add_update_count
                        
                        	LAS LL add update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_null_update_count
                        
                        	LAS Null update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_unregistration_count
                        
                        	LAS unreg count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_las_request
                        
                        	LAS req
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_las_registered
                        
                        	LAS registered
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: vrf_id
                        
                        	VRF id
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: mte_vrf_id
                        
                        	MTE VRF id
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: location
                        
                        	Location
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: mtu
                        
                        	MTU
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: vrf_state
                        
                        	Vrf State
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_configurationverify
                        
                        	CFG verify
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configurationvrf_set
                        
                        	CFG vrf set
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configurationvrf_error
                        
                        	CFG vrf error
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configuration_mcast_vrf_set
                        
                        	Is mcast set
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configuration_mcast_vrf_error
                        
                        	Is mcast error
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_im_state_registered
                        
                        	Im state registered
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_subscriber
                        
                        	Subscriber interface
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: subscriber_mode
                        
                        	Subscriber mode
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_identity_present
                        
                        	Subscriber ID or Address available from AAA
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: subscriber_id
                        
                        	ID string of subscriber
                        	**type**\: str
                        
                        	**length:** 0..257
                        
                        	**config**\: False
                        
                        .. attribute:: parent_ifhandle
                        
                        	Parent If Handle
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: time_since_last_query_in_seconds
                        
                        	Time elapsed since last query
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: time_since_last_report_in_seconds
                        
                        	Time elapsed since last report
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: router_uptime_in_seconds
                        
                        	Uptime since router enabled event
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: mte_tuple_count
                        
                        	MTE Tuple count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Standby.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn, self).__init__()

                            self.yang_name = "interface-state-on"
                            self.yang_parent_name = "interface-state-ons"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['interface_name']
                            self._child_classes = OrderedDict([("address", ("address", Mld.Standby.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.Address)), ("querier-address", ("querier_address", Mld.Standby.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.QuerierAddress)), ("subscriber-address", ("subscriber_address", Mld.Standby.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.SubscriberAddress))])
                            self._leafs = OrderedDict([
                                ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                ('interface_name_xr', (YLeaf(YType.str, 'interface-name-xr'), ['str'])),
                                ('state', (YLeaf(YType.uint32, 'state'), ['int'])),
                                ('prefix_length', (YLeaf(YType.uint32, 'prefix-length'), ['int'])),
                                ('is_interface_up', (YLeaf(YType.boolean, 'is-interface-up'), ['bool'])),
                                ('is_ip_enabled', (YLeaf(YType.boolean, 'is-ip-enabled'), ['bool'])),
                                ('is_router_enabled', (YLeaf(YType.boolean, 'is-router-enabled'), ['bool'])),
                                ('igmp_version', (YLeaf(YType.uint8, 'igmp-version'), ['int'])),
                                ('host_version', (YLeaf(YType.uint8, 'host-version'), ['int'])),
                                ('query_interval', (YLeaf(YType.uint16, 'query-interval'), ['int'])),
                                ('query_timeout', (YLeaf(YType.uint16, 'query-timeout'), ['int'])),
                                ('query_maximum_response_time', (YLeaf(YType.uint16, 'query-maximum-response-time'), ['int'])),
                                ('last_member_query_interval', (YLeaf(YType.uint16, 'last-member-query-interval'), ['int'])),
                                ('group_joins', (YLeaf(YType.uint32, 'group-joins'), ['int'])),
                                ('group_leaves', (YLeaf(YType.uint32, 'group-leaves'), ['int'])),
                                ('is_querier', (YLeaf(YType.boolean, 'is-querier'), ['bool'])),
                                ('total_active_groups', (YLeaf(YType.uint32, 'total-active-groups'), ['int'])),
                                ('robustness', (YLeaf(YType.uint32, 'robustness'), ['int'])),
                                ('proxy_interface', (YLeaf(YType.str, 'proxy-interface'), ['str'])),
                                ('querier_uptime', (YLeaf(YType.uint16, 'querier-uptime'), ['int'])),
                                ('las_ll_registration_count', (YLeaf(YType.uint32, 'las-ll-registration-count'), ['int'])),
                                ('las_get_address_count', (YLeaf(YType.uint32, 'las-get-address-count'), ['int'])),
                                ('las_update_count', (YLeaf(YType.uint32, 'las-update-count'), ['int'])),
                                ('las_ll_remove_update_count', (YLeaf(YType.uint32, 'las-ll-remove-update-count'), ['int'])),
                                ('las_ll_add_update_count', (YLeaf(YType.uint32, 'las-ll-add-update-count'), ['int'])),
                                ('las_null_update_count', (YLeaf(YType.uint32, 'las-null-update-count'), ['int'])),
                                ('las_unregistration_count', (YLeaf(YType.uint32, 'las-unregistration-count'), ['int'])),
                                ('is_las_request', (YLeaf(YType.boolean, 'is-las-request'), ['bool'])),
                                ('is_las_registered', (YLeaf(YType.boolean, 'is-las-registered'), ['bool'])),
                                ('vrf_id', (YLeaf(YType.uint32, 'vrf-id'), ['int'])),
                                ('mte_vrf_id', (YLeaf(YType.uint32, 'mte-vrf-id'), ['int'])),
                                ('location', (YLeaf(YType.uint32, 'location'), ['int'])),
                                ('mtu', (YLeaf(YType.uint32, 'mtu'), ['int'])),
                                ('vrf_state', (YLeaf(YType.uint32, 'vrf-state'), ['int'])),
                                ('is_configurationverify', (YLeaf(YType.boolean, 'is-configurationverify'), ['bool'])),
                                ('configurationvrf_set', (YLeaf(YType.boolean, 'configurationvrf-set'), ['bool'])),
                                ('configurationvrf_error', (YLeaf(YType.boolean, 'configurationvrf-error'), ['bool'])),
                                ('configuration_mcast_vrf_set', (YLeaf(YType.boolean, 'configuration-mcast-vrf-set'), ['bool'])),
                                ('configuration_mcast_vrf_error', (YLeaf(YType.boolean, 'configuration-mcast-vrf-error'), ['bool'])),
                                ('is_im_state_registered', (YLeaf(YType.boolean, 'is-im-state-registered'), ['bool'])),
                                ('is_subscriber', (YLeaf(YType.boolean, 'is-subscriber'), ['bool'])),
                                ('subscriber_mode', (YLeaf(YType.uint32, 'subscriber-mode'), ['int'])),
                                ('is_identity_present', (YLeaf(YType.boolean, 'is-identity-present'), ['bool'])),
                                ('subscriber_id', (YLeaf(YType.str, 'subscriber-id'), ['str'])),
                                ('parent_ifhandle', (YLeaf(YType.str, 'parent-ifhandle'), ['str'])),
                                ('time_since_last_query_in_seconds', (YLeaf(YType.uint32, 'time-since-last-query-in-seconds'), ['int'])),
                                ('time_since_last_report_in_seconds', (YLeaf(YType.uint32, 'time-since-last-report-in-seconds'), ['int'])),
                                ('router_uptime_in_seconds', (YLeaf(YType.uint32, 'router-uptime-in-seconds'), ['int'])),
                                ('mte_tuple_count', (YLeaf(YType.uint32, 'mte-tuple-count'), ['int'])),
                            ])
                            self.interface_name = None
                            self.interface_name_xr = None
                            self.state = None
                            self.prefix_length = None
                            self.is_interface_up = None
                            self.is_ip_enabled = None
                            self.is_router_enabled = None
                            self.igmp_version = None
                            self.host_version = None
                            self.query_interval = None
                            self.query_timeout = None
                            self.query_maximum_response_time = None
                            self.last_member_query_interval = None
                            self.group_joins = None
                            self.group_leaves = None
                            self.is_querier = None
                            self.total_active_groups = None
                            self.robustness = None
                            self.proxy_interface = None
                            self.querier_uptime = None
                            self.las_ll_registration_count = None
                            self.las_get_address_count = None
                            self.las_update_count = None
                            self.las_ll_remove_update_count = None
                            self.las_ll_add_update_count = None
                            self.las_null_update_count = None
                            self.las_unregistration_count = None
                            self.is_las_request = None
                            self.is_las_registered = None
                            self.vrf_id = None
                            self.mte_vrf_id = None
                            self.location = None
                            self.mtu = None
                            self.vrf_state = None
                            self.is_configurationverify = None
                            self.configurationvrf_set = None
                            self.configurationvrf_error = None
                            self.configuration_mcast_vrf_set = None
                            self.configuration_mcast_vrf_error = None
                            self.is_im_state_registered = None
                            self.is_subscriber = None
                            self.subscriber_mode = None
                            self.is_identity_present = None
                            self.subscriber_id = None
                            self.parent_ifhandle = None
                            self.time_since_last_query_in_seconds = None
                            self.time_since_last_report_in_seconds = None
                            self.router_uptime_in_seconds = None
                            self.mte_tuple_count = None

                            self.address = Mld.Standby.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.Address()
                            self.address.parent = self
                            self._children_name_map["address"] = "address"

                            self.querier_address = Mld.Standby.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.QuerierAddress()
                            self.querier_address.parent = self
                            self._children_name_map["querier_address"] = "querier-address"

                            self.subscriber_address = Mld.Standby.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.SubscriberAddress()
                            self.subscriber_address.parent = self
                            self._children_name_map["subscriber_address"] = "subscriber-address"
                            self._segment_path = lambda: "interface-state-on" + "[interface-name='" + str(self.interface_name) + "']"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Standby.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn, ['interface_name', 'interface_name_xr', 'state', 'prefix_length', 'is_interface_up', 'is_ip_enabled', 'is_router_enabled', 'igmp_version', 'host_version', 'query_interval', 'query_timeout', 'query_maximum_response_time', 'last_member_query_interval', 'group_joins', 'group_leaves', 'is_querier', 'total_active_groups', 'robustness', 'proxy_interface', 'querier_uptime', 'las_ll_registration_count', 'las_get_address_count', 'las_update_count', 'las_ll_remove_update_count', 'las_ll_add_update_count', 'las_null_update_count', 'las_unregistration_count', 'is_las_request', 'is_las_registered', 'vrf_id', 'mte_vrf_id', 'location', 'mtu', 'vrf_state', 'is_configurationverify', 'configurationvrf_set', 'configurationvrf_error', 'configuration_mcast_vrf_set', 'configuration_mcast_vrf_error', 'is_im_state_registered', 'is_subscriber', 'subscriber_mode', 'is_identity_present', 'subscriber_id', 'parent_ifhandle', 'time_since_last_query_in_seconds', 'time_since_last_report_in_seconds', 'router_uptime_in_seconds', 'mte_tuple_count'], name, value)


                        class Address(_Entity_):
                            """
                            IP address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Standby.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.Address, self).__init__()

                                self.yang_name = "address"
                                self.yang_parent_name = "interface-state-on"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Standby.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.Address, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Standby.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.Address']['meta_info']


                        class QuerierAddress(_Entity_):
                            """
                            Address of the Querier
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Standby.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.QuerierAddress, self).__init__()

                                self.yang_name = "querier-address"
                                self.yang_parent_name = "interface-state-on"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "querier-address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Standby.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.QuerierAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Standby.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.QuerierAddress']['meta_info']


                        class SubscriberAddress(_Entity_):
                            """
                            Address of subscriber
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Standby.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.SubscriberAddress, self).__init__()

                                self.yang_name = "subscriber-address"
                                self.yang_parent_name = "interface-state-on"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "subscriber-address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Standby.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.SubscriberAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Standby.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.SubscriberAddress']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Standby.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Mld.Standby.Vrfs.Vrf.InterfaceStateOns']['meta_info']


                class DetailGroups(_Entity_):
                    """
                    IGMP Detail Group Database
                    
                    .. attribute:: detail_group
                    
                    	IGMP Detail Group Entry Information
                    	**type**\: list of  		 :py:class:`DetailGroup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.DetailGroups.DetailGroup>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Mld.Standby.Vrfs.Vrf.DetailGroups, self).__init__()

                        self.yang_name = "detail-groups"
                        self.yang_parent_name = "vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("detail-group", ("detail_group", Mld.Standby.Vrfs.Vrf.DetailGroups.DetailGroup))])
                        self._leafs = OrderedDict()

                        self.detail_group = YList(self)
                        self._segment_path = lambda: "detail-groups"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Mld.Standby.Vrfs.Vrf.DetailGroups, [], name, value)


                    class DetailGroup(_Entity_):
                        """
                        IGMP Detail Group Entry Information
                        
                        .. attribute:: group_address
                        
                        	Group Address
                        	**type**\: union of the below types:
                        
                        		**type**\: str
                        
                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        		**type**\: str
                        
                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: interface_name
                        
                        	Interface Name
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: source_address
                        
                        	Source/Host Address
                        	**type**\: union of the below types:
                        
                        		**type**\: str
                        
                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        		**type**\: str
                        
                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: group_info
                        
                        	Basic Group information
                        	**type**\:  :py:class:`GroupInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo>`
                        
                        	**config**\: False
                        
                        .. attribute:: is_router_exclude_mode
                        
                        	Group router filter mode
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_host_exclude_mode
                        
                        	Group host filter mode
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: source
                        
                        	List of sources
                        	**type**\: list of  		 :py:class:`Source <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.DetailGroups.DetailGroup.Source>`
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Standby.Vrfs.Vrf.DetailGroups.DetailGroup, self).__init__()

                            self.yang_name = "detail-group"
                            self.yang_parent_name = "detail-groups"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("group-info", ("group_info", Mld.Standby.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo)), ("source", ("source", Mld.Standby.Vrfs.Vrf.DetailGroups.DetailGroup.Source))])
                            self._leafs = OrderedDict([
                                ('group_address', (YLeaf(YType.str, 'group-address'), ['str','str'])),
                                ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                ('source_address', (YLeaf(YType.str, 'source-address'), ['str','str'])),
                                ('is_router_exclude_mode', (YLeaf(YType.boolean, 'is-router-exclude-mode'), ['bool'])),
                                ('is_host_exclude_mode', (YLeaf(YType.boolean, 'is-host-exclude-mode'), ['bool'])),
                            ])
                            self.group_address = None
                            self.interface_name = None
                            self.source_address = None
                            self.is_router_exclude_mode = None
                            self.is_host_exclude_mode = None

                            self.group_info = Mld.Standby.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo()
                            self.group_info.parent = self
                            self._children_name_map["group_info"] = "group-info"

                            self.source = YList(self)
                            self._segment_path = lambda: "detail-group"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Standby.Vrfs.Vrf.DetailGroups.DetailGroup, ['group_address', 'interface_name', 'source_address', 'is_router_exclude_mode', 'is_host_exclude_mode'], name, value)


                        class GroupInfo(_Entity_):
                            """
                            Basic Group information
                            
                            .. attribute:: group_address_xr
                            
                            	Group Address
                            	**type**\:  :py:class:`GroupAddressXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.GroupAddressXr>`
                            
                            	**config**\: False
                            
                            .. attribute:: last_reporter
                            
                            	Last reporter address
                            	**type**\:  :py:class:`LastReporter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.LastReporter>`
                            
                            	**config**\: False
                            
                            .. attribute:: source_address
                            
                            	Source Address
                            	**type**\:  :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.SourceAddress>`
                            
                            	**config**\: False
                            
                            .. attribute:: interface_name_xr
                            
                            	Interface
                            	**type**\: str
                            
                            	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                            
                            	**config**\: False
                            
                            .. attribute:: uptime
                            
                            	Uptime in seconds
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            	**config**\: False
                            
                            	**units**\: second
                            
                            .. attribute:: expiration_time
                            
                            	Expiration time in seconds
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            	**config**\: False
                            
                            	**units**\: second
                            
                            .. attribute:: explicit_tracking_enabled
                            
                            	Is explicit tracking enabled
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: is_self_join
                            
                            	If local system is member of this group on this interface
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: row_status
                            
                            	interface on or off for the group
                            	**type**\: str
                            
                            	**length:** 0..16
                            
                            	**config**\: False
                            
                            .. attribute:: is_low_memory
                            
                            	Node is running low on memory
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: router_filter_mode
                            
                            	Filter mode
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            	**config**\: False
                            
                            .. attribute:: older_host_version1_timer
                            
                            	IGMP Hostversion1timer
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: older_host_version2_timer
                            
                            	IGMP Hostversion2timer
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: is_added
                            
                            	Joined
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: is_suppressed
                            
                            	Suppressed
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Standby.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo, self).__init__()

                                self.yang_name = "group-info"
                                self.yang_parent_name = "detail-group"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("group-address-xr", ("group_address_xr", Mld.Standby.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.GroupAddressXr)), ("last-reporter", ("last_reporter", Mld.Standby.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.LastReporter)), ("source-address", ("source_address", Mld.Standby.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.SourceAddress))])
                                self._leafs = OrderedDict([
                                    ('interface_name_xr', (YLeaf(YType.str, 'interface-name-xr'), ['str'])),
                                    ('uptime', (YLeaf(YType.uint64, 'uptime'), ['int'])),
                                    ('expiration_time', (YLeaf(YType.int32, 'expiration-time'), ['int'])),
                                    ('explicit_tracking_enabled', (YLeaf(YType.boolean, 'explicit-tracking-enabled'), ['bool'])),
                                    ('is_self_join', (YLeaf(YType.boolean, 'is-self-join'), ['bool'])),
                                    ('row_status', (YLeaf(YType.str, 'row-status'), ['str'])),
                                    ('is_low_memory', (YLeaf(YType.boolean, 'is-low-memory'), ['bool'])),
                                    ('router_filter_mode', (YLeaf(YType.uint8, 'router-filter-mode'), ['int'])),
                                    ('older_host_version1_timer', (YLeaf(YType.uint32, 'older-host-version1-timer'), ['int'])),
                                    ('older_host_version2_timer', (YLeaf(YType.uint32, 'older-host-version2-timer'), ['int'])),
                                    ('is_added', (YLeaf(YType.boolean, 'is-added'), ['bool'])),
                                    ('is_suppressed', (YLeaf(YType.boolean, 'is-suppressed'), ['bool'])),
                                ])
                                self.interface_name_xr = None
                                self.uptime = None
                                self.expiration_time = None
                                self.explicit_tracking_enabled = None
                                self.is_self_join = None
                                self.row_status = None
                                self.is_low_memory = None
                                self.router_filter_mode = None
                                self.older_host_version1_timer = None
                                self.older_host_version2_timer = None
                                self.is_added = None
                                self.is_suppressed = None

                                self.group_address_xr = Mld.Standby.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.GroupAddressXr()
                                self.group_address_xr.parent = self
                                self._children_name_map["group_address_xr"] = "group-address-xr"

                                self.last_reporter = Mld.Standby.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.LastReporter()
                                self.last_reporter.parent = self
                                self._children_name_map["last_reporter"] = "last-reporter"

                                self.source_address = Mld.Standby.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.SourceAddress()
                                self.source_address.parent = self
                                self._children_name_map["source_address"] = "source-address"
                                self._segment_path = lambda: "group-info"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Standby.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo, ['interface_name_xr', 'uptime', 'expiration_time', 'explicit_tracking_enabled', 'is_self_join', 'row_status', 'is_low_memory', 'router_filter_mode', 'older_host_version1_timer', 'older_host_version2_timer', 'is_added', 'is_suppressed'], name, value)


                            class GroupAddressXr(_Entity_):
                                """
                                Group Address
                                
                                .. attribute:: af_name
                                
                                	AFName
                                	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                                
                                	**config**\: False
                                
                                .. attribute:: ipv4_address
                                
                                	IPv4 Addr
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                .. attribute:: ipv6_address
                                
                                	IPV6 Addr
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                

                                """

                                _prefix = 'ipv4-igmp-oper'
                                _revision = '2018-01-31'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Mld.Standby.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.GroupAddressXr, self).__init__()

                                    self.yang_name = "group-address-xr"
                                    self.yang_parent_name = "group-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                        ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                        ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                    ])
                                    self.af_name = None
                                    self.ipv4_address = None
                                    self.ipv6_address = None
                                    self._segment_path = lambda: "group-address-xr"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Mld.Standby.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.GroupAddressXr, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                    return meta._meta_table['Mld.Standby.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.GroupAddressXr']['meta_info']


                            class LastReporter(_Entity_):
                                """
                                Last reporter address
                                
                                .. attribute:: af_name
                                
                                	AFName
                                	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                                
                                	**config**\: False
                                
                                .. attribute:: ipv4_address
                                
                                	IPv4 Addr
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                .. attribute:: ipv6_address
                                
                                	IPV6 Addr
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                

                                """

                                _prefix = 'ipv4-igmp-oper'
                                _revision = '2018-01-31'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Mld.Standby.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.LastReporter, self).__init__()

                                    self.yang_name = "last-reporter"
                                    self.yang_parent_name = "group-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                        ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                        ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                    ])
                                    self.af_name = None
                                    self.ipv4_address = None
                                    self.ipv6_address = None
                                    self._segment_path = lambda: "last-reporter"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Mld.Standby.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.LastReporter, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                    return meta._meta_table['Mld.Standby.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.LastReporter']['meta_info']


                            class SourceAddress(_Entity_):
                                """
                                Source Address
                                
                                .. attribute:: af_name
                                
                                	AFName
                                	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                                
                                	**config**\: False
                                
                                .. attribute:: ipv4_address
                                
                                	IPv4 Addr
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                .. attribute:: ipv6_address
                                
                                	IPV6 Addr
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                

                                """

                                _prefix = 'ipv4-igmp-oper'
                                _revision = '2018-01-31'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Mld.Standby.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.SourceAddress, self).__init__()

                                    self.yang_name = "source-address"
                                    self.yang_parent_name = "group-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                        ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                        ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                    ])
                                    self.af_name = None
                                    self.ipv4_address = None
                                    self.ipv6_address = None
                                    self._segment_path = lambda: "source-address"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Mld.Standby.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.SourceAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                    return meta._meta_table['Mld.Standby.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.SourceAddress']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Standby.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo']['meta_info']


                        class Source(_Entity_):
                            """
                            List of sources
                            
                            .. attribute:: source_address
                            
                            	Source Address
                            	**type**\:  :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.DetailGroups.DetailGroup.Source.SourceAddress>`
                            
                            	**config**\: False
                            
                            .. attribute:: uptime
                            
                            	Uptime in seconds
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            	**config**\: False
                            
                            	**units**\: second
                            
                            .. attribute:: expiration_time
                            
                            	Expiration time in seconds
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            	**config**\: False
                            
                            	**units**\: second
                            
                            .. attribute:: is_local
                            
                            	Is this a local source
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: is_remote
                            
                            	Is this a remote source
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: is_forward
                            
                            	Should we forward on this entry
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: is_we_report
                            
                            	Should we report the source
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: flags
                            
                            	Source flags
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            	**config**\: False
                            
                            .. attribute:: is_added
                            
                            	Joined
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Standby.Vrfs.Vrf.DetailGroups.DetailGroup.Source, self).__init__()

                                self.yang_name = "source"
                                self.yang_parent_name = "detail-group"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("source-address", ("source_address", Mld.Standby.Vrfs.Vrf.DetailGroups.DetailGroup.Source.SourceAddress))])
                                self._leafs = OrderedDict([
                                    ('uptime', (YLeaf(YType.uint64, 'uptime'), ['int'])),
                                    ('expiration_time', (YLeaf(YType.int32, 'expiration-time'), ['int'])),
                                    ('is_local', (YLeaf(YType.boolean, 'is-local'), ['bool'])),
                                    ('is_remote', (YLeaf(YType.boolean, 'is-remote'), ['bool'])),
                                    ('is_forward', (YLeaf(YType.boolean, 'is-forward'), ['bool'])),
                                    ('is_we_report', (YLeaf(YType.boolean, 'is-we-report'), ['bool'])),
                                    ('flags', (YLeaf(YType.int32, 'flags'), ['int'])),
                                    ('is_added', (YLeaf(YType.boolean, 'is-added'), ['bool'])),
                                ])
                                self.uptime = None
                                self.expiration_time = None
                                self.is_local = None
                                self.is_remote = None
                                self.is_forward = None
                                self.is_we_report = None
                                self.flags = None
                                self.is_added = None

                                self.source_address = Mld.Standby.Vrfs.Vrf.DetailGroups.DetailGroup.Source.SourceAddress()
                                self.source_address.parent = self
                                self._children_name_map["source_address"] = "source-address"
                                self._segment_path = lambda: "source"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Standby.Vrfs.Vrf.DetailGroups.DetailGroup.Source, ['uptime', 'expiration_time', 'is_local', 'is_remote', 'is_forward', 'is_we_report', 'flags', 'is_added'], name, value)


                            class SourceAddress(_Entity_):
                                """
                                Source Address
                                
                                .. attribute:: af_name
                                
                                	AFName
                                	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                                
                                	**config**\: False
                                
                                .. attribute:: ipv4_address
                                
                                	IPv4 Addr
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                .. attribute:: ipv6_address
                                
                                	IPV6 Addr
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                

                                """

                                _prefix = 'ipv4-igmp-oper'
                                _revision = '2018-01-31'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Mld.Standby.Vrfs.Vrf.DetailGroups.DetailGroup.Source.SourceAddress, self).__init__()

                                    self.yang_name = "source-address"
                                    self.yang_parent_name = "source"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                        ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                        ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                    ])
                                    self.af_name = None
                                    self.ipv4_address = None
                                    self.ipv6_address = None
                                    self._segment_path = lambda: "source-address"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Mld.Standby.Vrfs.Vrf.DetailGroups.DetailGroup.Source.SourceAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                    return meta._meta_table['Mld.Standby.Vrfs.Vrf.DetailGroups.DetailGroup.Source.SourceAddress']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Standby.Vrfs.Vrf.DetailGroups.DetailGroup.Source']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Standby.Vrfs.Vrf.DetailGroups.DetailGroup']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Mld.Standby.Vrfs.Vrf.DetailGroups']['meta_info']


                class NonActiveGroups(_Entity_):
                    """
                    IGMP Non\-Active Groups Information
                    
                    .. attribute:: non_active_groups
                    
                    	List of non\-active groups
                    	**type**\: list of  		 :py:class:`NonActiveGroups_ <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.NonActiveGroups.NonActiveGroups_>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Mld.Standby.Vrfs.Vrf.NonActiveGroups, self).__init__()

                        self.yang_name = "non-active-groups"
                        self.yang_parent_name = "vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("non-active-groups", ("non_active_groups", Mld.Standby.Vrfs.Vrf.NonActiveGroups.NonActiveGroups_))])
                        self._leafs = OrderedDict()

                        self.non_active_groups = YList(self)
                        self._segment_path = lambda: "non-active-groups"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Mld.Standby.Vrfs.Vrf.NonActiveGroups, [], name, value)


                    class NonActiveGroups_(_Entity_):
                        """
                        List of non\-active groups
                        
                        .. attribute:: group_address
                        
                        	Group Address
                        	**type**\:  :py:class:`GroupAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.NonActiveGroups.NonActiveGroups_.GroupAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\:  :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.NonActiveGroups.NonActiveGroups_.SourceAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: interface
                        
                        	Interface Name
                        	**type**\: str
                        
                        	**length:** 0..65
                        
                        	**config**\: False
                        
                        .. attribute:: reason_for_non_activity
                        
                        	Reason for group join not being processed
                        	**type**\: str
                        
                        	**length:** 0..257
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Standby.Vrfs.Vrf.NonActiveGroups.NonActiveGroups_, self).__init__()

                            self.yang_name = "non-active-groups"
                            self.yang_parent_name = "non-active-groups"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("group-address", ("group_address", Mld.Standby.Vrfs.Vrf.NonActiveGroups.NonActiveGroups_.GroupAddress)), ("source-address", ("source_address", Mld.Standby.Vrfs.Vrf.NonActiveGroups.NonActiveGroups_.SourceAddress))])
                            self._leafs = OrderedDict([
                                ('interface', (YLeaf(YType.str, 'interface'), ['str'])),
                                ('reason_for_non_activity', (YLeaf(YType.str, 'reason-for-non-activity'), ['str'])),
                            ])
                            self.interface = None
                            self.reason_for_non_activity = None

                            self.group_address = Mld.Standby.Vrfs.Vrf.NonActiveGroups.NonActiveGroups_.GroupAddress()
                            self.group_address.parent = self
                            self._children_name_map["group_address"] = "group-address"

                            self.source_address = Mld.Standby.Vrfs.Vrf.NonActiveGroups.NonActiveGroups_.SourceAddress()
                            self.source_address.parent = self
                            self._children_name_map["source_address"] = "source-address"
                            self._segment_path = lambda: "non-active-groups"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Standby.Vrfs.Vrf.NonActiveGroups.NonActiveGroups_, ['interface', 'reason_for_non_activity'], name, value)


                        class GroupAddress(_Entity_):
                            """
                            Group Address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Standby.Vrfs.Vrf.NonActiveGroups.NonActiveGroups_.GroupAddress, self).__init__()

                                self.yang_name = "group-address"
                                self.yang_parent_name = "non-active-groups"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "group-address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Standby.Vrfs.Vrf.NonActiveGroups.NonActiveGroups_.GroupAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Standby.Vrfs.Vrf.NonActiveGroups.NonActiveGroups_.GroupAddress']['meta_info']


                        class SourceAddress(_Entity_):
                            """
                            Source Address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Standby.Vrfs.Vrf.NonActiveGroups.NonActiveGroups_.SourceAddress, self).__init__()

                                self.yang_name = "source-address"
                                self.yang_parent_name = "non-active-groups"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "source-address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Standby.Vrfs.Vrf.NonActiveGroups.NonActiveGroups_.SourceAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Standby.Vrfs.Vrf.NonActiveGroups.NonActiveGroups_.SourceAddress']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Standby.Vrfs.Vrf.NonActiveGroups.NonActiveGroups_']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Mld.Standby.Vrfs.Vrf.NonActiveGroups']['meta_info']


                class SsmMaps(_Entity_):
                    """
                    SSM Map Table
                    
                    .. attribute:: ssm_map
                    
                    	SSM Map information
                    	**type**\: list of  		 :py:class:`SsmMap <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.SsmMaps.SsmMap>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Mld.Standby.Vrfs.Vrf.SsmMaps, self).__init__()

                        self.yang_name = "ssm-maps"
                        self.yang_parent_name = "vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("ssm-map", ("ssm_map", Mld.Standby.Vrfs.Vrf.SsmMaps.SsmMap))])
                        self._leafs = OrderedDict()

                        self.ssm_map = YList(self)
                        self._segment_path = lambda: "ssm-maps"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Mld.Standby.Vrfs.Vrf.SsmMaps, [], name, value)


                    class SsmMap(_Entity_):
                        """
                        SSM Map information
                        
                        .. attribute:: ssm_map_type
                        
                        	SSM Map Type
                        	**type**\:  :py:class:`IgmpssmMap <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpssmMap>`
                        
                        	**config**\: False
                        
                        .. attribute:: group_address
                        
                        	Group address
                        	**type**\: union of the below types:
                        
                        		**type**\: str
                        
                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        		**type**\: str
                        
                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: group_address_xr
                        
                        	Group Address
                        	**type**\:  :py:class:`GroupAddressXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.SsmMaps.SsmMap.GroupAddressXr>`
                        
                        	**config**\: False
                        
                        .. attribute:: map_type
                        
                        	Map Type of group
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: source_counts
                        
                        	Count of Sources
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Standby.Vrfs.Vrf.SsmMaps.SsmMap, self).__init__()

                            self.yang_name = "ssm-map"
                            self.yang_parent_name = "ssm-maps"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("group-address-xr", ("group_address_xr", Mld.Standby.Vrfs.Vrf.SsmMaps.SsmMap.GroupAddressXr))])
                            self._leafs = OrderedDict([
                                ('ssm_map_type', (YLeaf(YType.enumeration, 'ssm-map-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpssmMap', '')])),
                                ('group_address', (YLeaf(YType.str, 'group-address'), ['str','str'])),
                                ('map_type', (YLeaf(YType.uint32, 'map-type'), ['int'])),
                                ('source_counts', (YLeaf(YType.uint32, 'source-counts'), ['int'])),
                            ])
                            self.ssm_map_type = None
                            self.group_address = None
                            self.map_type = None
                            self.source_counts = None

                            self.group_address_xr = Mld.Standby.Vrfs.Vrf.SsmMaps.SsmMap.GroupAddressXr()
                            self.group_address_xr.parent = self
                            self._children_name_map["group_address_xr"] = "group-address-xr"
                            self._segment_path = lambda: "ssm-map"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Standby.Vrfs.Vrf.SsmMaps.SsmMap, ['ssm_map_type', 'group_address', 'map_type', 'source_counts'], name, value)


                        class GroupAddressXr(_Entity_):
                            """
                            Group Address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Standby.Vrfs.Vrf.SsmMaps.SsmMap.GroupAddressXr, self).__init__()

                                self.yang_name = "group-address-xr"
                                self.yang_parent_name = "ssm-map"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "group-address-xr"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Standby.Vrfs.Vrf.SsmMaps.SsmMap.GroupAddressXr, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Standby.Vrfs.Vrf.SsmMaps.SsmMap.GroupAddressXr']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Standby.Vrfs.Vrf.SsmMaps.SsmMap']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Mld.Standby.Vrfs.Vrf.SsmMaps']['meta_info']


                class ExplicitGroups(_Entity_):
                    """
                    IGMP Explicit Group Database
                    
                    .. attribute:: explicit_group
                    
                    	IGMP Explicit Group Entry Information
                    	**type**\: list of  		 :py:class:`ExplicitGroup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Mld.Standby.Vrfs.Vrf.ExplicitGroups, self).__init__()

                        self.yang_name = "explicit-groups"
                        self.yang_parent_name = "vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("explicit-group", ("explicit_group", Mld.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup))])
                        self._leafs = OrderedDict()

                        self.explicit_group = YList(self)
                        self._segment_path = lambda: "explicit-groups"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Mld.Standby.Vrfs.Vrf.ExplicitGroups, [], name, value)


                    class ExplicitGroup(_Entity_):
                        """
                        IGMP Explicit Group Entry Information
                        
                        .. attribute:: group_address
                        
                        	Group Address
                        	**type**\: union of the below types:
                        
                        		**type**\: str
                        
                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        		**type**\: str
                        
                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: interface_name
                        
                        	Interface Name
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: source_address
                        
                        	Source/Host Address
                        	**type**\: union of the below types:
                        
                        		**type**\: str
                        
                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        		**type**\: str
                        
                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: group_info
                        
                        	Basic Group information
                        	**type**\:  :py:class:`GroupInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo>`
                        
                        	**config**\: False
                        
                        .. attribute:: include_hosts
                        
                        	No. of hosts who are included
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: exclude_hosts
                        
                        	No. of hosts who are excluded
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: host
                        
                        	List of hosts
                        	**type**\: list of  		 :py:class:`Host <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.Host>`
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup, self).__init__()

                            self.yang_name = "explicit-group"
                            self.yang_parent_name = "explicit-groups"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("group-info", ("group_info", Mld.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo)), ("host", ("host", Mld.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.Host))])
                            self._leafs = OrderedDict([
                                ('group_address', (YLeaf(YType.str, 'group-address'), ['str','str'])),
                                ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                ('source_address', (YLeaf(YType.str, 'source-address'), ['str','str'])),
                                ('include_hosts', (YLeaf(YType.uint32, 'include-hosts'), ['int'])),
                                ('exclude_hosts', (YLeaf(YType.uint32, 'exclude-hosts'), ['int'])),
                            ])
                            self.group_address = None
                            self.interface_name = None
                            self.source_address = None
                            self.include_hosts = None
                            self.exclude_hosts = None

                            self.group_info = Mld.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo()
                            self.group_info.parent = self
                            self._children_name_map["group_info"] = "group-info"

                            self.host = YList(self)
                            self._segment_path = lambda: "explicit-group"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup, ['group_address', 'interface_name', 'source_address', 'include_hosts', 'exclude_hosts'], name, value)


                        class GroupInfo(_Entity_):
                            """
                            Basic Group information
                            
                            .. attribute:: group_address_xr
                            
                            	Group Address
                            	**type**\:  :py:class:`GroupAddressXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.GroupAddressXr>`
                            
                            	**config**\: False
                            
                            .. attribute:: last_reporter
                            
                            	Last reporter address
                            	**type**\:  :py:class:`LastReporter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.LastReporter>`
                            
                            	**config**\: False
                            
                            .. attribute:: source_address
                            
                            	Source Address
                            	**type**\:  :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.SourceAddress>`
                            
                            	**config**\: False
                            
                            .. attribute:: interface_name_xr
                            
                            	Interface
                            	**type**\: str
                            
                            	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                            
                            	**config**\: False
                            
                            .. attribute:: uptime
                            
                            	Uptime in seconds
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            	**config**\: False
                            
                            	**units**\: second
                            
                            .. attribute:: expiration_time
                            
                            	Expiration time in seconds
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            	**config**\: False
                            
                            	**units**\: second
                            
                            .. attribute:: explicit_tracking_enabled
                            
                            	Is explicit tracking enabled
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: is_self_join
                            
                            	If local system is member of this group on this interface
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: row_status
                            
                            	interface on or off for the group
                            	**type**\: str
                            
                            	**length:** 0..16
                            
                            	**config**\: False
                            
                            .. attribute:: is_low_memory
                            
                            	Node is running low on memory
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: router_filter_mode
                            
                            	Filter mode
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            	**config**\: False
                            
                            .. attribute:: older_host_version1_timer
                            
                            	IGMP Hostversion1timer
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: older_host_version2_timer
                            
                            	IGMP Hostversion2timer
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: is_added
                            
                            	Joined
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: is_suppressed
                            
                            	Suppressed
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo, self).__init__()

                                self.yang_name = "group-info"
                                self.yang_parent_name = "explicit-group"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("group-address-xr", ("group_address_xr", Mld.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.GroupAddressXr)), ("last-reporter", ("last_reporter", Mld.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.LastReporter)), ("source-address", ("source_address", Mld.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.SourceAddress))])
                                self._leafs = OrderedDict([
                                    ('interface_name_xr', (YLeaf(YType.str, 'interface-name-xr'), ['str'])),
                                    ('uptime', (YLeaf(YType.uint64, 'uptime'), ['int'])),
                                    ('expiration_time', (YLeaf(YType.int32, 'expiration-time'), ['int'])),
                                    ('explicit_tracking_enabled', (YLeaf(YType.boolean, 'explicit-tracking-enabled'), ['bool'])),
                                    ('is_self_join', (YLeaf(YType.boolean, 'is-self-join'), ['bool'])),
                                    ('row_status', (YLeaf(YType.str, 'row-status'), ['str'])),
                                    ('is_low_memory', (YLeaf(YType.boolean, 'is-low-memory'), ['bool'])),
                                    ('router_filter_mode', (YLeaf(YType.uint8, 'router-filter-mode'), ['int'])),
                                    ('older_host_version1_timer', (YLeaf(YType.uint32, 'older-host-version1-timer'), ['int'])),
                                    ('older_host_version2_timer', (YLeaf(YType.uint32, 'older-host-version2-timer'), ['int'])),
                                    ('is_added', (YLeaf(YType.boolean, 'is-added'), ['bool'])),
                                    ('is_suppressed', (YLeaf(YType.boolean, 'is-suppressed'), ['bool'])),
                                ])
                                self.interface_name_xr = None
                                self.uptime = None
                                self.expiration_time = None
                                self.explicit_tracking_enabled = None
                                self.is_self_join = None
                                self.row_status = None
                                self.is_low_memory = None
                                self.router_filter_mode = None
                                self.older_host_version1_timer = None
                                self.older_host_version2_timer = None
                                self.is_added = None
                                self.is_suppressed = None

                                self.group_address_xr = Mld.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.GroupAddressXr()
                                self.group_address_xr.parent = self
                                self._children_name_map["group_address_xr"] = "group-address-xr"

                                self.last_reporter = Mld.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.LastReporter()
                                self.last_reporter.parent = self
                                self._children_name_map["last_reporter"] = "last-reporter"

                                self.source_address = Mld.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.SourceAddress()
                                self.source_address.parent = self
                                self._children_name_map["source_address"] = "source-address"
                                self._segment_path = lambda: "group-info"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo, ['interface_name_xr', 'uptime', 'expiration_time', 'explicit_tracking_enabled', 'is_self_join', 'row_status', 'is_low_memory', 'router_filter_mode', 'older_host_version1_timer', 'older_host_version2_timer', 'is_added', 'is_suppressed'], name, value)


                            class GroupAddressXr(_Entity_):
                                """
                                Group Address
                                
                                .. attribute:: af_name
                                
                                	AFName
                                	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                                
                                	**config**\: False
                                
                                .. attribute:: ipv4_address
                                
                                	IPv4 Addr
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                .. attribute:: ipv6_address
                                
                                	IPV6 Addr
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                

                                """

                                _prefix = 'ipv4-igmp-oper'
                                _revision = '2018-01-31'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Mld.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.GroupAddressXr, self).__init__()

                                    self.yang_name = "group-address-xr"
                                    self.yang_parent_name = "group-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                        ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                        ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                    ])
                                    self.af_name = None
                                    self.ipv4_address = None
                                    self.ipv6_address = None
                                    self._segment_path = lambda: "group-address-xr"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Mld.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.GroupAddressXr, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                    return meta._meta_table['Mld.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.GroupAddressXr']['meta_info']


                            class LastReporter(_Entity_):
                                """
                                Last reporter address
                                
                                .. attribute:: af_name
                                
                                	AFName
                                	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                                
                                	**config**\: False
                                
                                .. attribute:: ipv4_address
                                
                                	IPv4 Addr
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                .. attribute:: ipv6_address
                                
                                	IPV6 Addr
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                

                                """

                                _prefix = 'ipv4-igmp-oper'
                                _revision = '2018-01-31'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Mld.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.LastReporter, self).__init__()

                                    self.yang_name = "last-reporter"
                                    self.yang_parent_name = "group-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                        ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                        ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                    ])
                                    self.af_name = None
                                    self.ipv4_address = None
                                    self.ipv6_address = None
                                    self._segment_path = lambda: "last-reporter"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Mld.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.LastReporter, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                    return meta._meta_table['Mld.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.LastReporter']['meta_info']


                            class SourceAddress(_Entity_):
                                """
                                Source Address
                                
                                .. attribute:: af_name
                                
                                	AFName
                                	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                                
                                	**config**\: False
                                
                                .. attribute:: ipv4_address
                                
                                	IPv4 Addr
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                .. attribute:: ipv6_address
                                
                                	IPV6 Addr
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                

                                """

                                _prefix = 'ipv4-igmp-oper'
                                _revision = '2018-01-31'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Mld.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.SourceAddress, self).__init__()

                                    self.yang_name = "source-address"
                                    self.yang_parent_name = "group-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                        ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                        ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                    ])
                                    self.af_name = None
                                    self.ipv4_address = None
                                    self.ipv6_address = None
                                    self._segment_path = lambda: "source-address"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Mld.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.SourceAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                    return meta._meta_table['Mld.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.SourceAddress']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo']['meta_info']


                        class Host(_Entity_):
                            """
                            List of hosts
                            
                            .. attribute:: address
                            
                            	Host Address
                            	**type**\:  :py:class:`Address <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.Host.Address>`
                            
                            	**config**\: False
                            
                            .. attribute:: uptime
                            
                            	Uptime in seconds
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            	**units**\: second
                            
                            .. attribute:: is_exclude
                            
                            	Exclude flag set
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: expiration_time
                            
                            	Expiration time in seconds
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            	**units**\: second
                            
                            .. attribute:: source_count
                            
                            	No. of sources in entry
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: source_address
                            
                            	First 3 source addresses
                            	**type**\: list of  		 :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.Host.SourceAddress>`
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.Host, self).__init__()

                                self.yang_name = "host"
                                self.yang_parent_name = "explicit-group"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("address", ("address", Mld.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.Host.Address)), ("source-address", ("source_address", Mld.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.Host.SourceAddress))])
                                self._leafs = OrderedDict([
                                    ('uptime', (YLeaf(YType.uint32, 'uptime'), ['int'])),
                                    ('is_exclude', (YLeaf(YType.boolean, 'is-exclude'), ['bool'])),
                                    ('expiration_time', (YLeaf(YType.uint32, 'expiration-time'), ['int'])),
                                    ('source_count', (YLeaf(YType.uint32, 'source-count'), ['int'])),
                                ])
                                self.uptime = None
                                self.is_exclude = None
                                self.expiration_time = None
                                self.source_count = None

                                self.address = Mld.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.Host.Address()
                                self.address.parent = self
                                self._children_name_map["address"] = "address"

                                self.source_address = YList(self)
                                self._segment_path = lambda: "host"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.Host, ['uptime', 'is_exclude', 'expiration_time', 'source_count'], name, value)


                            class Address(_Entity_):
                                """
                                Host Address
                                
                                .. attribute:: af_name
                                
                                	AFName
                                	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                                
                                	**config**\: False
                                
                                .. attribute:: ipv4_address
                                
                                	IPv4 Addr
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                .. attribute:: ipv6_address
                                
                                	IPV6 Addr
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                

                                """

                                _prefix = 'ipv4-igmp-oper'
                                _revision = '2018-01-31'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Mld.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.Host.Address, self).__init__()

                                    self.yang_name = "address"
                                    self.yang_parent_name = "host"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                        ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                        ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                    ])
                                    self.af_name = None
                                    self.ipv4_address = None
                                    self.ipv6_address = None
                                    self._segment_path = lambda: "address"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Mld.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.Host.Address, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                    return meta._meta_table['Mld.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.Host.Address']['meta_info']


                            class SourceAddress(_Entity_):
                                """
                                First 3 source addresses
                                
                                .. attribute:: af_name
                                
                                	AFName
                                	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                                
                                	**config**\: False
                                
                                .. attribute:: ipv4_address
                                
                                	IPv4 Addr
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                .. attribute:: ipv6_address
                                
                                	IPV6 Addr
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                

                                """

                                _prefix = 'ipv4-igmp-oper'
                                _revision = '2018-01-31'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Mld.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.Host.SourceAddress, self).__init__()

                                    self.yang_name = "source-address"
                                    self.yang_parent_name = "host"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                        ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                        ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                    ])
                                    self.af_name = None
                                    self.ipv4_address = None
                                    self.ipv6_address = None
                                    self._segment_path = lambda: "source-address"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Mld.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.Host.SourceAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                    return meta._meta_table['Mld.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.Host.SourceAddress']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.Host']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Mld.Standby.Vrfs.Vrf.ExplicitGroups']['meta_info']


                class InterfaceTable(_Entity_):
                    """
                    IGMP Interface specific Table
                    
                    .. attribute:: interface
                    
                    	IGMP Interface
                    	**type**\: list of  		 :py:class:`Interface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.InterfaceTable.Interface>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Mld.Standby.Vrfs.Vrf.InterfaceTable, self).__init__()

                        self.yang_name = "interface-table"
                        self.yang_parent_name = "vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("interface", ("interface", Mld.Standby.Vrfs.Vrf.InterfaceTable.Interface))])
                        self._leafs = OrderedDict()

                        self.interface = YList(self)
                        self._segment_path = lambda: "interface-table"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Mld.Standby.Vrfs.Vrf.InterfaceTable, [], name, value)


                    class Interface(_Entity_):
                        """
                        IGMP Interface
                        
                        .. attribute:: interface_name  (key)
                        
                        	Interface Name
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: address
                        
                        	IP address
                        	**type**\:  :py:class:`Address <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.InterfaceTable.Interface.Address>`
                        
                        	**config**\: False
                        
                        .. attribute:: querier_address
                        
                        	Address of the Querier
                        	**type**\:  :py:class:`QuerierAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.InterfaceTable.Interface.QuerierAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: subscriber_address
                        
                        	Address of subscriber
                        	**type**\:  :py:class:`SubscriberAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.InterfaceTable.Interface.SubscriberAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: interface_name_xr
                        
                        	Interface
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: state
                        
                        	Interface state
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: prefix_length
                        
                        	Prefix length
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_interface_up
                        
                        	Is interface up
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_ip_enabled
                        
                        	Is IP enabled
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_router_enabled
                        
                        	Is Router functionality enabled
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: igmp_version
                        
                        	IGMP Router version
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        	**config**\: False
                        
                        .. attribute:: host_version
                        
                        	IGMP Host version
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        	**config**\: False
                        
                        .. attribute:: query_interval
                        
                        	Query Interval value in seconds
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        	**units**\: second
                        
                        .. attribute:: query_timeout
                        
                        	Query Timeout value
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: query_maximum_response_time
                        
                        	Max Response Timeout value
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: last_member_query_interval
                        
                        	Last Member Query Interval
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: group_joins
                        
                        	No. of group joins
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: group_leaves
                        
                        	No. of group leaves
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_querier
                        
                        	Are we querier
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: total_active_groups
                        
                        	Actual number of groups on interface
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: robustness
                        
                        	Robustness Variable value
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: proxy_interface
                        
                        	Proxy interface index
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: querier_uptime
                        
                        	Time since the last querier took over
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: las_ll_registration_count
                        
                        	LAS reg count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_get_address_count
                        
                        	LAS get addr count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_update_count
                        
                        	LAS Update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_ll_remove_update_count
                        
                        	LAS LL remove update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_ll_add_update_count
                        
                        	LAS LL add update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_null_update_count
                        
                        	LAS Null update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_unregistration_count
                        
                        	LAS unreg count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_las_request
                        
                        	LAS req
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_las_registered
                        
                        	LAS registered
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: vrf_id
                        
                        	VRF id
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: mte_vrf_id
                        
                        	MTE VRF id
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: location
                        
                        	Location
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: mtu
                        
                        	MTU
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: vrf_state
                        
                        	Vrf State
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_configurationverify
                        
                        	CFG verify
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configurationvrf_set
                        
                        	CFG vrf set
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configurationvrf_error
                        
                        	CFG vrf error
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configuration_mcast_vrf_set
                        
                        	Is mcast set
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configuration_mcast_vrf_error
                        
                        	Is mcast error
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_im_state_registered
                        
                        	Im state registered
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_subscriber
                        
                        	Subscriber interface
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: subscriber_mode
                        
                        	Subscriber mode
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_identity_present
                        
                        	Subscriber ID or Address available from AAA
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: subscriber_id
                        
                        	ID string of subscriber
                        	**type**\: str
                        
                        	**length:** 0..257
                        
                        	**config**\: False
                        
                        .. attribute:: parent_ifhandle
                        
                        	Parent If Handle
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: time_since_last_query_in_seconds
                        
                        	Time elapsed since last query
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: time_since_last_report_in_seconds
                        
                        	Time elapsed since last report
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: router_uptime_in_seconds
                        
                        	Uptime since router enabled event
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: mte_tuple_count
                        
                        	MTE Tuple count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Standby.Vrfs.Vrf.InterfaceTable.Interface, self).__init__()

                            self.yang_name = "interface"
                            self.yang_parent_name = "interface-table"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['interface_name']
                            self._child_classes = OrderedDict([("address", ("address", Mld.Standby.Vrfs.Vrf.InterfaceTable.Interface.Address)), ("querier-address", ("querier_address", Mld.Standby.Vrfs.Vrf.InterfaceTable.Interface.QuerierAddress)), ("subscriber-address", ("subscriber_address", Mld.Standby.Vrfs.Vrf.InterfaceTable.Interface.SubscriberAddress))])
                            self._leafs = OrderedDict([
                                ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                ('interface_name_xr', (YLeaf(YType.str, 'interface-name-xr'), ['str'])),
                                ('state', (YLeaf(YType.uint32, 'state'), ['int'])),
                                ('prefix_length', (YLeaf(YType.uint32, 'prefix-length'), ['int'])),
                                ('is_interface_up', (YLeaf(YType.boolean, 'is-interface-up'), ['bool'])),
                                ('is_ip_enabled', (YLeaf(YType.boolean, 'is-ip-enabled'), ['bool'])),
                                ('is_router_enabled', (YLeaf(YType.boolean, 'is-router-enabled'), ['bool'])),
                                ('igmp_version', (YLeaf(YType.uint8, 'igmp-version'), ['int'])),
                                ('host_version', (YLeaf(YType.uint8, 'host-version'), ['int'])),
                                ('query_interval', (YLeaf(YType.uint16, 'query-interval'), ['int'])),
                                ('query_timeout', (YLeaf(YType.uint16, 'query-timeout'), ['int'])),
                                ('query_maximum_response_time', (YLeaf(YType.uint16, 'query-maximum-response-time'), ['int'])),
                                ('last_member_query_interval', (YLeaf(YType.uint16, 'last-member-query-interval'), ['int'])),
                                ('group_joins', (YLeaf(YType.uint32, 'group-joins'), ['int'])),
                                ('group_leaves', (YLeaf(YType.uint32, 'group-leaves'), ['int'])),
                                ('is_querier', (YLeaf(YType.boolean, 'is-querier'), ['bool'])),
                                ('total_active_groups', (YLeaf(YType.uint32, 'total-active-groups'), ['int'])),
                                ('robustness', (YLeaf(YType.uint32, 'robustness'), ['int'])),
                                ('proxy_interface', (YLeaf(YType.str, 'proxy-interface'), ['str'])),
                                ('querier_uptime', (YLeaf(YType.uint16, 'querier-uptime'), ['int'])),
                                ('las_ll_registration_count', (YLeaf(YType.uint32, 'las-ll-registration-count'), ['int'])),
                                ('las_get_address_count', (YLeaf(YType.uint32, 'las-get-address-count'), ['int'])),
                                ('las_update_count', (YLeaf(YType.uint32, 'las-update-count'), ['int'])),
                                ('las_ll_remove_update_count', (YLeaf(YType.uint32, 'las-ll-remove-update-count'), ['int'])),
                                ('las_ll_add_update_count', (YLeaf(YType.uint32, 'las-ll-add-update-count'), ['int'])),
                                ('las_null_update_count', (YLeaf(YType.uint32, 'las-null-update-count'), ['int'])),
                                ('las_unregistration_count', (YLeaf(YType.uint32, 'las-unregistration-count'), ['int'])),
                                ('is_las_request', (YLeaf(YType.boolean, 'is-las-request'), ['bool'])),
                                ('is_las_registered', (YLeaf(YType.boolean, 'is-las-registered'), ['bool'])),
                                ('vrf_id', (YLeaf(YType.uint32, 'vrf-id'), ['int'])),
                                ('mte_vrf_id', (YLeaf(YType.uint32, 'mte-vrf-id'), ['int'])),
                                ('location', (YLeaf(YType.uint32, 'location'), ['int'])),
                                ('mtu', (YLeaf(YType.uint32, 'mtu'), ['int'])),
                                ('vrf_state', (YLeaf(YType.uint32, 'vrf-state'), ['int'])),
                                ('is_configurationverify', (YLeaf(YType.boolean, 'is-configurationverify'), ['bool'])),
                                ('configurationvrf_set', (YLeaf(YType.boolean, 'configurationvrf-set'), ['bool'])),
                                ('configurationvrf_error', (YLeaf(YType.boolean, 'configurationvrf-error'), ['bool'])),
                                ('configuration_mcast_vrf_set', (YLeaf(YType.boolean, 'configuration-mcast-vrf-set'), ['bool'])),
                                ('configuration_mcast_vrf_error', (YLeaf(YType.boolean, 'configuration-mcast-vrf-error'), ['bool'])),
                                ('is_im_state_registered', (YLeaf(YType.boolean, 'is-im-state-registered'), ['bool'])),
                                ('is_subscriber', (YLeaf(YType.boolean, 'is-subscriber'), ['bool'])),
                                ('subscriber_mode', (YLeaf(YType.uint32, 'subscriber-mode'), ['int'])),
                                ('is_identity_present', (YLeaf(YType.boolean, 'is-identity-present'), ['bool'])),
                                ('subscriber_id', (YLeaf(YType.str, 'subscriber-id'), ['str'])),
                                ('parent_ifhandle', (YLeaf(YType.str, 'parent-ifhandle'), ['str'])),
                                ('time_since_last_query_in_seconds', (YLeaf(YType.uint32, 'time-since-last-query-in-seconds'), ['int'])),
                                ('time_since_last_report_in_seconds', (YLeaf(YType.uint32, 'time-since-last-report-in-seconds'), ['int'])),
                                ('router_uptime_in_seconds', (YLeaf(YType.uint32, 'router-uptime-in-seconds'), ['int'])),
                                ('mte_tuple_count', (YLeaf(YType.uint32, 'mte-tuple-count'), ['int'])),
                            ])
                            self.interface_name = None
                            self.interface_name_xr = None
                            self.state = None
                            self.prefix_length = None
                            self.is_interface_up = None
                            self.is_ip_enabled = None
                            self.is_router_enabled = None
                            self.igmp_version = None
                            self.host_version = None
                            self.query_interval = None
                            self.query_timeout = None
                            self.query_maximum_response_time = None
                            self.last_member_query_interval = None
                            self.group_joins = None
                            self.group_leaves = None
                            self.is_querier = None
                            self.total_active_groups = None
                            self.robustness = None
                            self.proxy_interface = None
                            self.querier_uptime = None
                            self.las_ll_registration_count = None
                            self.las_get_address_count = None
                            self.las_update_count = None
                            self.las_ll_remove_update_count = None
                            self.las_ll_add_update_count = None
                            self.las_null_update_count = None
                            self.las_unregistration_count = None
                            self.is_las_request = None
                            self.is_las_registered = None
                            self.vrf_id = None
                            self.mte_vrf_id = None
                            self.location = None
                            self.mtu = None
                            self.vrf_state = None
                            self.is_configurationverify = None
                            self.configurationvrf_set = None
                            self.configurationvrf_error = None
                            self.configuration_mcast_vrf_set = None
                            self.configuration_mcast_vrf_error = None
                            self.is_im_state_registered = None
                            self.is_subscriber = None
                            self.subscriber_mode = None
                            self.is_identity_present = None
                            self.subscriber_id = None
                            self.parent_ifhandle = None
                            self.time_since_last_query_in_seconds = None
                            self.time_since_last_report_in_seconds = None
                            self.router_uptime_in_seconds = None
                            self.mte_tuple_count = None

                            self.address = Mld.Standby.Vrfs.Vrf.InterfaceTable.Interface.Address()
                            self.address.parent = self
                            self._children_name_map["address"] = "address"

                            self.querier_address = Mld.Standby.Vrfs.Vrf.InterfaceTable.Interface.QuerierAddress()
                            self.querier_address.parent = self
                            self._children_name_map["querier_address"] = "querier-address"

                            self.subscriber_address = Mld.Standby.Vrfs.Vrf.InterfaceTable.Interface.SubscriberAddress()
                            self.subscriber_address.parent = self
                            self._children_name_map["subscriber_address"] = "subscriber-address"
                            self._segment_path = lambda: "interface" + "[interface-name='" + str(self.interface_name) + "']"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Standby.Vrfs.Vrf.InterfaceTable.Interface, ['interface_name', 'interface_name_xr', 'state', 'prefix_length', 'is_interface_up', 'is_ip_enabled', 'is_router_enabled', 'igmp_version', 'host_version', 'query_interval', 'query_timeout', 'query_maximum_response_time', 'last_member_query_interval', 'group_joins', 'group_leaves', 'is_querier', 'total_active_groups', 'robustness', 'proxy_interface', 'querier_uptime', 'las_ll_registration_count', 'las_get_address_count', 'las_update_count', 'las_ll_remove_update_count', 'las_ll_add_update_count', 'las_null_update_count', 'las_unregistration_count', 'is_las_request', 'is_las_registered', 'vrf_id', 'mte_vrf_id', 'location', 'mtu', 'vrf_state', 'is_configurationverify', 'configurationvrf_set', 'configurationvrf_error', 'configuration_mcast_vrf_set', 'configuration_mcast_vrf_error', 'is_im_state_registered', 'is_subscriber', 'subscriber_mode', 'is_identity_present', 'subscriber_id', 'parent_ifhandle', 'time_since_last_query_in_seconds', 'time_since_last_report_in_seconds', 'router_uptime_in_seconds', 'mte_tuple_count'], name, value)


                        class Address(_Entity_):
                            """
                            IP address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Standby.Vrfs.Vrf.InterfaceTable.Interface.Address, self).__init__()

                                self.yang_name = "address"
                                self.yang_parent_name = "interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Standby.Vrfs.Vrf.InterfaceTable.Interface.Address, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Standby.Vrfs.Vrf.InterfaceTable.Interface.Address']['meta_info']


                        class QuerierAddress(_Entity_):
                            """
                            Address of the Querier
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Standby.Vrfs.Vrf.InterfaceTable.Interface.QuerierAddress, self).__init__()

                                self.yang_name = "querier-address"
                                self.yang_parent_name = "interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "querier-address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Standby.Vrfs.Vrf.InterfaceTable.Interface.QuerierAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Standby.Vrfs.Vrf.InterfaceTable.Interface.QuerierAddress']['meta_info']


                        class SubscriberAddress(_Entity_):
                            """
                            Address of subscriber
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Standby.Vrfs.Vrf.InterfaceTable.Interface.SubscriberAddress, self).__init__()

                                self.yang_name = "subscriber-address"
                                self.yang_parent_name = "interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "subscriber-address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Standby.Vrfs.Vrf.InterfaceTable.Interface.SubscriberAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Standby.Vrfs.Vrf.InterfaceTable.Interface.SubscriberAddress']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Standby.Vrfs.Vrf.InterfaceTable.Interface']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Mld.Standby.Vrfs.Vrf.InterfaceTable']['meta_info']


                class InterfaceUnicastQosAdjusts(_Entity_):
                    """
                    IGMP Interface Unicast\-Qos\-Adjust
                    
                    .. attribute:: interface_unicast_qos_adjust
                    
                    	IGMP Interface
                    	**type**\: list of  		 :py:class:`InterfaceUnicastQosAdjust <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Mld.Standby.Vrfs.Vrf.InterfaceUnicastQosAdjusts, self).__init__()

                        self.yang_name = "interface-unicast-qos-adjusts"
                        self.yang_parent_name = "vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("interface-unicast-qos-adjust", ("interface_unicast_qos_adjust", Mld.Standby.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust))])
                        self._leafs = OrderedDict()

                        self.interface_unicast_qos_adjust = YList(self)
                        self._segment_path = lambda: "interface-unicast-qos-adjusts"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Mld.Standby.Vrfs.Vrf.InterfaceUnicastQosAdjusts, [], name, value)


                    class InterfaceUnicastQosAdjust(_Entity_):
                        """
                        IGMP Interface
                        
                        .. attribute:: interface_name  (key)
                        
                        	Interface Name
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: is_virtual_access
                        
                        	Is VirtualAccess Interface
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: rate
                        
                        	Overall rate in Kbps
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        	**units**\: kbit/s
                        
                        .. attribute:: rate_increments
                        
                        	Count of rate increments
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: rate_decrements
                        
                        	Count of rate decrements
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: update
                        
                        	List of updates
                        	**type**\: list of  		 :py:class:`Update <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update>`
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Standby.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust, self).__init__()

                            self.yang_name = "interface-unicast-qos-adjust"
                            self.yang_parent_name = "interface-unicast-qos-adjusts"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['interface_name']
                            self._child_classes = OrderedDict([("update", ("update", Mld.Standby.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update))])
                            self._leafs = OrderedDict([
                                ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                ('is_virtual_access', (YLeaf(YType.boolean, 'is-virtual-access'), ['bool'])),
                                ('rate', (YLeaf(YType.uint32, 'rate'), ['int'])),
                                ('rate_increments', (YLeaf(YType.uint32, 'rate-increments'), ['int'])),
                                ('rate_decrements', (YLeaf(YType.uint32, 'rate-decrements'), ['int'])),
                            ])
                            self.interface_name = None
                            self.is_virtual_access = None
                            self.rate = None
                            self.rate_increments = None
                            self.rate_decrements = None

                            self.update = YList(self)
                            self._segment_path = lambda: "interface-unicast-qos-adjust" + "[interface-name='" + str(self.interface_name) + "']"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Standby.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust, ['interface_name', 'is_virtual_access', 'rate', 'rate_increments', 'rate_decrements'], name, value)


                        class Update(_Entity_):
                            """
                            List of updates
                            
                            .. attribute:: source_address
                            
                            	Source address
                            	**type**\:  :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.SourceAddress>`
                            
                            	**config**\: False
                            
                            .. attribute:: group_address
                            
                            	Group address
                            	**type**\:  :py:class:`GroupAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.GroupAddress>`
                            
                            	**config**\: False
                            
                            .. attribute:: is_add
                            
                            	Is this a rate increment
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: weight
                            
                            	Weight from policy
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: received_time
                            
                            	Time this update is received
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Standby.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update, self).__init__()

                                self.yang_name = "update"
                                self.yang_parent_name = "interface-unicast-qos-adjust"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("source-address", ("source_address", Mld.Standby.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.SourceAddress)), ("group-address", ("group_address", Mld.Standby.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.GroupAddress))])
                                self._leafs = OrderedDict([
                                    ('is_add', (YLeaf(YType.boolean, 'is-add'), ['bool'])),
                                    ('weight', (YLeaf(YType.uint32, 'weight'), ['int'])),
                                    ('received_time', (YLeaf(YType.uint64, 'received-time'), ['int'])),
                                ])
                                self.is_add = None
                                self.weight = None
                                self.received_time = None

                                self.source_address = Mld.Standby.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.SourceAddress()
                                self.source_address.parent = self
                                self._children_name_map["source_address"] = "source-address"

                                self.group_address = Mld.Standby.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.GroupAddress()
                                self.group_address.parent = self
                                self._children_name_map["group_address"] = "group-address"
                                self._segment_path = lambda: "update"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Standby.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update, ['is_add', 'weight', 'received_time'], name, value)


                            class SourceAddress(_Entity_):
                                """
                                Source address
                                
                                .. attribute:: af_name
                                
                                	AFName
                                	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                                
                                	**config**\: False
                                
                                .. attribute:: ipv4_address
                                
                                	IPv4 Addr
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                .. attribute:: ipv6_address
                                
                                	IPV6 Addr
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                

                                """

                                _prefix = 'ipv4-igmp-oper'
                                _revision = '2018-01-31'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Mld.Standby.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.SourceAddress, self).__init__()

                                    self.yang_name = "source-address"
                                    self.yang_parent_name = "update"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                        ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                        ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                    ])
                                    self.af_name = None
                                    self.ipv4_address = None
                                    self.ipv6_address = None
                                    self._segment_path = lambda: "source-address"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Mld.Standby.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.SourceAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                    return meta._meta_table['Mld.Standby.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.SourceAddress']['meta_info']


                            class GroupAddress(_Entity_):
                                """
                                Group address
                                
                                .. attribute:: af_name
                                
                                	AFName
                                	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                                
                                	**config**\: False
                                
                                .. attribute:: ipv4_address
                                
                                	IPv4 Addr
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                .. attribute:: ipv6_address
                                
                                	IPV6 Addr
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                

                                """

                                _prefix = 'ipv4-igmp-oper'
                                _revision = '2018-01-31'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Mld.Standby.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.GroupAddress, self).__init__()

                                    self.yang_name = "group-address"
                                    self.yang_parent_name = "update"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                        ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                        ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                    ])
                                    self.af_name = None
                                    self.ipv4_address = None
                                    self.ipv6_address = None
                                    self._segment_path = lambda: "group-address"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Mld.Standby.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.GroupAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                    return meta._meta_table['Mld.Standby.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.GroupAddress']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Standby.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Standby.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Mld.Standby.Vrfs.Vrf.InterfaceUnicastQosAdjusts']['meta_info']


                class Ranges(_Entity_):
                    """
                    Range table
                    
                    .. attribute:: range
                    
                    	Range information
                    	**type**\: list of  		 :py:class:`Range <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.Ranges.Range>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Mld.Standby.Vrfs.Vrf.Ranges, self).__init__()

                        self.yang_name = "ranges"
                        self.yang_parent_name = "vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("range", ("range", Mld.Standby.Vrfs.Vrf.Ranges.Range))])
                        self._leafs = OrderedDict()

                        self.range = YList(self)
                        self._segment_path = lambda: "ranges"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Mld.Standby.Vrfs.Vrf.Ranges, [], name, value)


                    class Range(_Entity_):
                        """
                        Range information
                        
                        .. attribute:: group_address
                        
                        	Group address
                        	**type**\: union of the below types:
                        
                        		**type**\: str
                        
                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        		**type**\: str
                        
                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: group_mask
                        
                        	Group Mask
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: group_address_xr
                        
                        	Group address
                        	**type**\:  :py:class:`GroupAddressXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.Ranges.Range.GroupAddressXr>`
                        
                        	**config**\: False
                        
                        .. attribute:: prefix_length
                        
                        	Prefix length
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: protocol
                        
                        	Protocol
                        	**type**\:  :py:class:`IgmpEdmProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpEdmProtocol>`
                        
                        	**config**\: False
                        
                        .. attribute:: is_stale
                        
                        	Is the entry stale
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Standby.Vrfs.Vrf.Ranges.Range, self).__init__()

                            self.yang_name = "range"
                            self.yang_parent_name = "ranges"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("group-address-xr", ("group_address_xr", Mld.Standby.Vrfs.Vrf.Ranges.Range.GroupAddressXr))])
                            self._leafs = OrderedDict([
                                ('group_address', (YLeaf(YType.str, 'group-address'), ['str','str'])),
                                ('group_mask', (YLeaf(YType.uint32, 'group-mask'), ['int'])),
                                ('prefix_length', (YLeaf(YType.uint32, 'prefix-length'), ['int'])),
                                ('protocol', (YLeaf(YType.enumeration, 'protocol'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpEdmProtocol', '')])),
                                ('is_stale', (YLeaf(YType.boolean, 'is-stale'), ['bool'])),
                            ])
                            self.group_address = None
                            self.group_mask = None
                            self.prefix_length = None
                            self.protocol = None
                            self.is_stale = None

                            self.group_address_xr = Mld.Standby.Vrfs.Vrf.Ranges.Range.GroupAddressXr()
                            self.group_address_xr.parent = self
                            self._children_name_map["group_address_xr"] = "group-address-xr"
                            self._segment_path = lambda: "range"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Standby.Vrfs.Vrf.Ranges.Range, ['group_address', 'group_mask', 'prefix_length', 'protocol', 'is_stale'], name, value)


                        class GroupAddressXr(_Entity_):
                            """
                            Group address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Standby.Vrfs.Vrf.Ranges.Range.GroupAddressXr, self).__init__()

                                self.yang_name = "group-address-xr"
                                self.yang_parent_name = "range"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "group-address-xr"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Standby.Vrfs.Vrf.Ranges.Range.GroupAddressXr, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Standby.Vrfs.Vrf.Ranges.Range.GroupAddressXr']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Standby.Vrfs.Vrf.Ranges.Range']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Mld.Standby.Vrfs.Vrf.Ranges']['meta_info']


                class IfrsInterfaces(_Entity_):
                    """
                    IGMP Interface specific
                    
                    .. attribute:: ifrs_interface
                    
                    	IGMP IFRS Interface
                    	**type**\: list of  		 :py:class:`IfrsInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.IfrsInterfaces.IfrsInterface>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Mld.Standby.Vrfs.Vrf.IfrsInterfaces, self).__init__()

                        self.yang_name = "ifrs-interfaces"
                        self.yang_parent_name = "vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("ifrs-interface", ("ifrs_interface", Mld.Standby.Vrfs.Vrf.IfrsInterfaces.IfrsInterface))])
                        self._leafs = OrderedDict()

                        self.ifrs_interface = YList(self)
                        self._segment_path = lambda: "ifrs-interfaces"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Mld.Standby.Vrfs.Vrf.IfrsInterfaces, [], name, value)


                    class IfrsInterface(_Entity_):
                        """
                        IGMP IFRS Interface
                        
                        .. attribute:: interface_name  (key)
                        
                        	IFRS Interface Name
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: igmp_interface_entry
                        
                        	IGMP interface entry
                        	**type**\:  :py:class:`IgmpInterfaceEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry>`
                        
                        	**config**\: False
                        
                        .. attribute:: join_group_count
                        
                        	Join group count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Standby.Vrfs.Vrf.IfrsInterfaces.IfrsInterface, self).__init__()

                            self.yang_name = "ifrs-interface"
                            self.yang_parent_name = "ifrs-interfaces"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['interface_name']
                            self._child_classes = OrderedDict([("igmp-interface-entry", ("igmp_interface_entry", Mld.Standby.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry))])
                            self._leafs = OrderedDict([
                                ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                ('join_group_count', (YLeaf(YType.uint32, 'join-group-count'), ['int'])),
                            ])
                            self.interface_name = None
                            self.join_group_count = None

                            self.igmp_interface_entry = Mld.Standby.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry()
                            self.igmp_interface_entry.parent = self
                            self._children_name_map["igmp_interface_entry"] = "igmp-interface-entry"
                            self._segment_path = lambda: "ifrs-interface" + "[interface-name='" + str(self.interface_name) + "']"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Standby.Vrfs.Vrf.IfrsInterfaces.IfrsInterface, ['interface_name', 'join_group_count'], name, value)


                        class IgmpInterfaceEntry(_Entity_):
                            """
                            IGMP interface entry
                            
                            .. attribute:: address
                            
                            	IP address
                            	**type**\:  :py:class:`Address <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.Address>`
                            
                            	**config**\: False
                            
                            .. attribute:: querier_address
                            
                            	Address of the Querier
                            	**type**\:  :py:class:`QuerierAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.QuerierAddress>`
                            
                            	**config**\: False
                            
                            .. attribute:: subscriber_address
                            
                            	Address of subscriber
                            	**type**\:  :py:class:`SubscriberAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.SubscriberAddress>`
                            
                            	**config**\: False
                            
                            .. attribute:: interface_name_xr
                            
                            	Interface
                            	**type**\: str
                            
                            	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                            
                            	**config**\: False
                            
                            .. attribute:: state
                            
                            	Interface state
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: prefix_length
                            
                            	Prefix length
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: is_interface_up
                            
                            	Is interface up
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: is_ip_enabled
                            
                            	Is IP enabled
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: is_router_enabled
                            
                            	Is Router functionality enabled
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: igmp_version
                            
                            	IGMP Router version
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            	**config**\: False
                            
                            .. attribute:: host_version
                            
                            	IGMP Host version
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            	**config**\: False
                            
                            .. attribute:: query_interval
                            
                            	Query Interval value in seconds
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            	**config**\: False
                            
                            	**units**\: second
                            
                            .. attribute:: query_timeout
                            
                            	Query Timeout value
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            	**config**\: False
                            
                            .. attribute:: query_maximum_response_time
                            
                            	Max Response Timeout value
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            	**config**\: False
                            
                            .. attribute:: last_member_query_interval
                            
                            	Last Member Query Interval
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            	**config**\: False
                            
                            .. attribute:: group_joins
                            
                            	No. of group joins
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: group_leaves
                            
                            	No. of group leaves
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: is_querier
                            
                            	Are we querier
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: total_active_groups
                            
                            	Actual number of groups on interface
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: robustness
                            
                            	Robustness Variable value
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: proxy_interface
                            
                            	Proxy interface index
                            	**type**\: str
                            
                            	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                            
                            	**config**\: False
                            
                            .. attribute:: querier_uptime
                            
                            	Time since the last querier took over
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            	**config**\: False
                            
                            .. attribute:: las_ll_registration_count
                            
                            	LAS reg count
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: las_get_address_count
                            
                            	LAS get addr count
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: las_update_count
                            
                            	LAS Update count
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: las_ll_remove_update_count
                            
                            	LAS LL remove update count
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: las_ll_add_update_count
                            
                            	LAS LL add update count
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: las_null_update_count
                            
                            	LAS Null update count
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: las_unregistration_count
                            
                            	LAS unreg count
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: is_las_request
                            
                            	LAS req
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: is_las_registered
                            
                            	LAS registered
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: vrf_id
                            
                            	VRF id
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: mte_vrf_id
                            
                            	MTE VRF id
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: location
                            
                            	Location
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: mtu
                            
                            	MTU
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: vrf_state
                            
                            	Vrf State
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: is_configurationverify
                            
                            	CFG verify
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: configurationvrf_set
                            
                            	CFG vrf set
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: configurationvrf_error
                            
                            	CFG vrf error
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: configuration_mcast_vrf_set
                            
                            	Is mcast set
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: configuration_mcast_vrf_error
                            
                            	Is mcast error
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: is_im_state_registered
                            
                            	Im state registered
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: is_subscriber
                            
                            	Subscriber interface
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: subscriber_mode
                            
                            	Subscriber mode
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: is_identity_present
                            
                            	Subscriber ID or Address available from AAA
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: subscriber_id
                            
                            	ID string of subscriber
                            	**type**\: str
                            
                            	**length:** 0..257
                            
                            	**config**\: False
                            
                            .. attribute:: parent_ifhandle
                            
                            	Parent If Handle
                            	**type**\: str
                            
                            	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                            
                            	**config**\: False
                            
                            .. attribute:: time_since_last_query_in_seconds
                            
                            	Time elapsed since last query
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: time_since_last_report_in_seconds
                            
                            	Time elapsed since last report
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: router_uptime_in_seconds
                            
                            	Uptime since router enabled event
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: mte_tuple_count
                            
                            	MTE Tuple count
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Standby.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry, self).__init__()

                                self.yang_name = "igmp-interface-entry"
                                self.yang_parent_name = "ifrs-interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("address", ("address", Mld.Standby.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.Address)), ("querier-address", ("querier_address", Mld.Standby.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.QuerierAddress)), ("subscriber-address", ("subscriber_address", Mld.Standby.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.SubscriberAddress))])
                                self._leafs = OrderedDict([
                                    ('interface_name_xr', (YLeaf(YType.str, 'interface-name-xr'), ['str'])),
                                    ('state', (YLeaf(YType.uint32, 'state'), ['int'])),
                                    ('prefix_length', (YLeaf(YType.uint32, 'prefix-length'), ['int'])),
                                    ('is_interface_up', (YLeaf(YType.boolean, 'is-interface-up'), ['bool'])),
                                    ('is_ip_enabled', (YLeaf(YType.boolean, 'is-ip-enabled'), ['bool'])),
                                    ('is_router_enabled', (YLeaf(YType.boolean, 'is-router-enabled'), ['bool'])),
                                    ('igmp_version', (YLeaf(YType.uint8, 'igmp-version'), ['int'])),
                                    ('host_version', (YLeaf(YType.uint8, 'host-version'), ['int'])),
                                    ('query_interval', (YLeaf(YType.uint16, 'query-interval'), ['int'])),
                                    ('query_timeout', (YLeaf(YType.uint16, 'query-timeout'), ['int'])),
                                    ('query_maximum_response_time', (YLeaf(YType.uint16, 'query-maximum-response-time'), ['int'])),
                                    ('last_member_query_interval', (YLeaf(YType.uint16, 'last-member-query-interval'), ['int'])),
                                    ('group_joins', (YLeaf(YType.uint32, 'group-joins'), ['int'])),
                                    ('group_leaves', (YLeaf(YType.uint32, 'group-leaves'), ['int'])),
                                    ('is_querier', (YLeaf(YType.boolean, 'is-querier'), ['bool'])),
                                    ('total_active_groups', (YLeaf(YType.uint32, 'total-active-groups'), ['int'])),
                                    ('robustness', (YLeaf(YType.uint32, 'robustness'), ['int'])),
                                    ('proxy_interface', (YLeaf(YType.str, 'proxy-interface'), ['str'])),
                                    ('querier_uptime', (YLeaf(YType.uint16, 'querier-uptime'), ['int'])),
                                    ('las_ll_registration_count', (YLeaf(YType.uint32, 'las-ll-registration-count'), ['int'])),
                                    ('las_get_address_count', (YLeaf(YType.uint32, 'las-get-address-count'), ['int'])),
                                    ('las_update_count', (YLeaf(YType.uint32, 'las-update-count'), ['int'])),
                                    ('las_ll_remove_update_count', (YLeaf(YType.uint32, 'las-ll-remove-update-count'), ['int'])),
                                    ('las_ll_add_update_count', (YLeaf(YType.uint32, 'las-ll-add-update-count'), ['int'])),
                                    ('las_null_update_count', (YLeaf(YType.uint32, 'las-null-update-count'), ['int'])),
                                    ('las_unregistration_count', (YLeaf(YType.uint32, 'las-unregistration-count'), ['int'])),
                                    ('is_las_request', (YLeaf(YType.boolean, 'is-las-request'), ['bool'])),
                                    ('is_las_registered', (YLeaf(YType.boolean, 'is-las-registered'), ['bool'])),
                                    ('vrf_id', (YLeaf(YType.uint32, 'vrf-id'), ['int'])),
                                    ('mte_vrf_id', (YLeaf(YType.uint32, 'mte-vrf-id'), ['int'])),
                                    ('location', (YLeaf(YType.uint32, 'location'), ['int'])),
                                    ('mtu', (YLeaf(YType.uint32, 'mtu'), ['int'])),
                                    ('vrf_state', (YLeaf(YType.uint32, 'vrf-state'), ['int'])),
                                    ('is_configurationverify', (YLeaf(YType.boolean, 'is-configurationverify'), ['bool'])),
                                    ('configurationvrf_set', (YLeaf(YType.boolean, 'configurationvrf-set'), ['bool'])),
                                    ('configurationvrf_error', (YLeaf(YType.boolean, 'configurationvrf-error'), ['bool'])),
                                    ('configuration_mcast_vrf_set', (YLeaf(YType.boolean, 'configuration-mcast-vrf-set'), ['bool'])),
                                    ('configuration_mcast_vrf_error', (YLeaf(YType.boolean, 'configuration-mcast-vrf-error'), ['bool'])),
                                    ('is_im_state_registered', (YLeaf(YType.boolean, 'is-im-state-registered'), ['bool'])),
                                    ('is_subscriber', (YLeaf(YType.boolean, 'is-subscriber'), ['bool'])),
                                    ('subscriber_mode', (YLeaf(YType.uint32, 'subscriber-mode'), ['int'])),
                                    ('is_identity_present', (YLeaf(YType.boolean, 'is-identity-present'), ['bool'])),
                                    ('subscriber_id', (YLeaf(YType.str, 'subscriber-id'), ['str'])),
                                    ('parent_ifhandle', (YLeaf(YType.str, 'parent-ifhandle'), ['str'])),
                                    ('time_since_last_query_in_seconds', (YLeaf(YType.uint32, 'time-since-last-query-in-seconds'), ['int'])),
                                    ('time_since_last_report_in_seconds', (YLeaf(YType.uint32, 'time-since-last-report-in-seconds'), ['int'])),
                                    ('router_uptime_in_seconds', (YLeaf(YType.uint32, 'router-uptime-in-seconds'), ['int'])),
                                    ('mte_tuple_count', (YLeaf(YType.uint32, 'mte-tuple-count'), ['int'])),
                                ])
                                self.interface_name_xr = None
                                self.state = None
                                self.prefix_length = None
                                self.is_interface_up = None
                                self.is_ip_enabled = None
                                self.is_router_enabled = None
                                self.igmp_version = None
                                self.host_version = None
                                self.query_interval = None
                                self.query_timeout = None
                                self.query_maximum_response_time = None
                                self.last_member_query_interval = None
                                self.group_joins = None
                                self.group_leaves = None
                                self.is_querier = None
                                self.total_active_groups = None
                                self.robustness = None
                                self.proxy_interface = None
                                self.querier_uptime = None
                                self.las_ll_registration_count = None
                                self.las_get_address_count = None
                                self.las_update_count = None
                                self.las_ll_remove_update_count = None
                                self.las_ll_add_update_count = None
                                self.las_null_update_count = None
                                self.las_unregistration_count = None
                                self.is_las_request = None
                                self.is_las_registered = None
                                self.vrf_id = None
                                self.mte_vrf_id = None
                                self.location = None
                                self.mtu = None
                                self.vrf_state = None
                                self.is_configurationverify = None
                                self.configurationvrf_set = None
                                self.configurationvrf_error = None
                                self.configuration_mcast_vrf_set = None
                                self.configuration_mcast_vrf_error = None
                                self.is_im_state_registered = None
                                self.is_subscriber = None
                                self.subscriber_mode = None
                                self.is_identity_present = None
                                self.subscriber_id = None
                                self.parent_ifhandle = None
                                self.time_since_last_query_in_seconds = None
                                self.time_since_last_report_in_seconds = None
                                self.router_uptime_in_seconds = None
                                self.mte_tuple_count = None

                                self.address = Mld.Standby.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.Address()
                                self.address.parent = self
                                self._children_name_map["address"] = "address"

                                self.querier_address = Mld.Standby.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.QuerierAddress()
                                self.querier_address.parent = self
                                self._children_name_map["querier_address"] = "querier-address"

                                self.subscriber_address = Mld.Standby.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.SubscriberAddress()
                                self.subscriber_address.parent = self
                                self._children_name_map["subscriber_address"] = "subscriber-address"
                                self._segment_path = lambda: "igmp-interface-entry"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Standby.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry, ['interface_name_xr', 'state', 'prefix_length', 'is_interface_up', 'is_ip_enabled', 'is_router_enabled', 'igmp_version', 'host_version', 'query_interval', 'query_timeout', 'query_maximum_response_time', 'last_member_query_interval', 'group_joins', 'group_leaves', 'is_querier', 'total_active_groups', 'robustness', 'proxy_interface', 'querier_uptime', 'las_ll_registration_count', 'las_get_address_count', 'las_update_count', 'las_ll_remove_update_count', 'las_ll_add_update_count', 'las_null_update_count', 'las_unregistration_count', 'is_las_request', 'is_las_registered', 'vrf_id', 'mte_vrf_id', 'location', 'mtu', 'vrf_state', 'is_configurationverify', 'configurationvrf_set', 'configurationvrf_error', 'configuration_mcast_vrf_set', 'configuration_mcast_vrf_error', 'is_im_state_registered', 'is_subscriber', 'subscriber_mode', 'is_identity_present', 'subscriber_id', 'parent_ifhandle', 'time_since_last_query_in_seconds', 'time_since_last_report_in_seconds', 'router_uptime_in_seconds', 'mte_tuple_count'], name, value)


                            class Address(_Entity_):
                                """
                                IP address
                                
                                .. attribute:: af_name
                                
                                	AFName
                                	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                                
                                	**config**\: False
                                
                                .. attribute:: ipv4_address
                                
                                	IPv4 Addr
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                .. attribute:: ipv6_address
                                
                                	IPV6 Addr
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                

                                """

                                _prefix = 'ipv4-igmp-oper'
                                _revision = '2018-01-31'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Mld.Standby.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.Address, self).__init__()

                                    self.yang_name = "address"
                                    self.yang_parent_name = "igmp-interface-entry"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                        ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                        ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                    ])
                                    self.af_name = None
                                    self.ipv4_address = None
                                    self.ipv6_address = None
                                    self._segment_path = lambda: "address"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Mld.Standby.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.Address, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                    return meta._meta_table['Mld.Standby.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.Address']['meta_info']


                            class QuerierAddress(_Entity_):
                                """
                                Address of the Querier
                                
                                .. attribute:: af_name
                                
                                	AFName
                                	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                                
                                	**config**\: False
                                
                                .. attribute:: ipv4_address
                                
                                	IPv4 Addr
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                .. attribute:: ipv6_address
                                
                                	IPV6 Addr
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                

                                """

                                _prefix = 'ipv4-igmp-oper'
                                _revision = '2018-01-31'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Mld.Standby.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.QuerierAddress, self).__init__()

                                    self.yang_name = "querier-address"
                                    self.yang_parent_name = "igmp-interface-entry"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                        ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                        ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                    ])
                                    self.af_name = None
                                    self.ipv4_address = None
                                    self.ipv6_address = None
                                    self._segment_path = lambda: "querier-address"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Mld.Standby.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.QuerierAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                    return meta._meta_table['Mld.Standby.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.QuerierAddress']['meta_info']


                            class SubscriberAddress(_Entity_):
                                """
                                Address of subscriber
                                
                                .. attribute:: af_name
                                
                                	AFName
                                	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                                
                                	**config**\: False
                                
                                .. attribute:: ipv4_address
                                
                                	IPv4 Addr
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                .. attribute:: ipv6_address
                                
                                	IPV6 Addr
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                

                                """

                                _prefix = 'ipv4-igmp-oper'
                                _revision = '2018-01-31'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Mld.Standby.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.SubscriberAddress, self).__init__()

                                    self.yang_name = "subscriber-address"
                                    self.yang_parent_name = "igmp-interface-entry"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                        ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                        ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                    ])
                                    self.af_name = None
                                    self.ipv4_address = None
                                    self.ipv6_address = None
                                    self._segment_path = lambda: "subscriber-address"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Mld.Standby.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.SubscriberAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                    return meta._meta_table['Mld.Standby.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.SubscriberAddress']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Standby.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Standby.Vrfs.Vrf.IfrsInterfaces.IfrsInterface']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Mld.Standby.Vrfs.Vrf.IfrsInterfaces']['meta_info']


                class TrafficCounters(_Entity_):
                    """
                    IGMP Message Traffic Counters
                    
                    .. attribute:: elapsed_time
                    
                    	Running time for counters
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: packets_in
                    
                    	Packets in
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: packets_out
                    
                    	Packets out
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: format_errors
                    
                    	Malformed packets in
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: packet_manager_input_errors
                    
                    	Incoming Packet Manager packets dropped
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: packet_manager_output_errors
                    
                    	Outgoing Packet Manager packets dropped
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: checksum_errors
                    
                    	Checksum errors
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: receive_socket_errors
                    
                    	Socket errors on reception
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: socket_errors
                    
                    	Socket errors on send
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: bad_scope_errors
                    
                    	BadScope errors
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: auxillary_data_length_errors
                    
                    	AuxDataLen errors
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: invalid_source_address_errors
                    
                    	Invalid Source Address errors
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: no_socket_connection
                    
                    	Packets dropped since no socket connection
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: miscellaneous_errors
                    
                    	Packets dropped for other reasons
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: input_queries
                    
                    	Query packets in
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: input_reports
                    
                    	Reports in
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: input_leaves
                    
                    	Leaves in
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: input_mtrace
                    
                    	Mtrace packets in
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: input_dvmrp
                    
                    	DVMRP packets in
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: input_pim
                    
                    	PIM packets in
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: output_queries
                    
                    	Query packets out
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: output_reports
                    
                    	Reports out
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: output_leaves
                    
                    	Leaves out
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: output_mtrace
                    
                    	Mtrace packets out
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: output_dvmrp
                    
                    	DVMRP packets out
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: output_pim
                    
                    	PIM packets out
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: get_packet_failure
                    
                    	Packet get failed
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: output_no_parent_interface_handle
                    
                    	Failures setting 2nd ifhandle
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: input_no_idb
                    
                    	Packets received without idb
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: input_no_vrf_in_idb
                    
                    	Packets received on idb without VRF
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: input_disabled_idb
                    
                    	Packet received on disabled idb
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: input_martian_address
                    
                    	Packets received with Martian Address
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: input_no_assigned_vrf_id
                    
                    	Packets received with no assigned vrf id
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: input_no_vrf_mtrace
                    
                    	mtrace packets with no vrf associated
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: input_no_platform_support_mtrace
                    
                    	mtrace packets without platform support
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Mld.Standby.Vrfs.Vrf.TrafficCounters, self).__init__()

                        self.yang_name = "traffic-counters"
                        self.yang_parent_name = "vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('elapsed_time', (YLeaf(YType.uint32, 'elapsed-time'), ['int'])),
                            ('packets_in', (YLeaf(YType.uint32, 'packets-in'), ['int'])),
                            ('packets_out', (YLeaf(YType.uint32, 'packets-out'), ['int'])),
                            ('format_errors', (YLeaf(YType.uint32, 'format-errors'), ['int'])),
                            ('packet_manager_input_errors', (YLeaf(YType.uint32, 'packet-manager-input-errors'), ['int'])),
                            ('packet_manager_output_errors', (YLeaf(YType.uint32, 'packet-manager-output-errors'), ['int'])),
                            ('checksum_errors', (YLeaf(YType.uint32, 'checksum-errors'), ['int'])),
                            ('receive_socket_errors', (YLeaf(YType.uint32, 'receive-socket-errors'), ['int'])),
                            ('socket_errors', (YLeaf(YType.uint32, 'socket-errors'), ['int'])),
                            ('bad_scope_errors', (YLeaf(YType.uint32, 'bad-scope-errors'), ['int'])),
                            ('auxillary_data_length_errors', (YLeaf(YType.uint32, 'auxillary-data-length-errors'), ['int'])),
                            ('invalid_source_address_errors', (YLeaf(YType.uint32, 'invalid-source-address-errors'), ['int'])),
                            ('no_socket_connection', (YLeaf(YType.uint32, 'no-socket-connection'), ['int'])),
                            ('miscellaneous_errors', (YLeaf(YType.uint32, 'miscellaneous-errors'), ['int'])),
                            ('input_queries', (YLeaf(YType.uint32, 'input-queries'), ['int'])),
                            ('input_reports', (YLeaf(YType.uint32, 'input-reports'), ['int'])),
                            ('input_leaves', (YLeaf(YType.uint32, 'input-leaves'), ['int'])),
                            ('input_mtrace', (YLeaf(YType.uint32, 'input-mtrace'), ['int'])),
                            ('input_dvmrp', (YLeaf(YType.uint32, 'input-dvmrp'), ['int'])),
                            ('input_pim', (YLeaf(YType.uint32, 'input-pim'), ['int'])),
                            ('output_queries', (YLeaf(YType.uint32, 'output-queries'), ['int'])),
                            ('output_reports', (YLeaf(YType.uint32, 'output-reports'), ['int'])),
                            ('output_leaves', (YLeaf(YType.uint32, 'output-leaves'), ['int'])),
                            ('output_mtrace', (YLeaf(YType.uint32, 'output-mtrace'), ['int'])),
                            ('output_dvmrp', (YLeaf(YType.uint32, 'output-dvmrp'), ['int'])),
                            ('output_pim', (YLeaf(YType.uint32, 'output-pim'), ['int'])),
                            ('get_packet_failure', (YLeaf(YType.uint32, 'get-packet-failure'), ['int'])),
                            ('output_no_parent_interface_handle', (YLeaf(YType.uint32, 'output-no-parent-interface-handle'), ['int'])),
                            ('input_no_idb', (YLeaf(YType.uint32, 'input-no-idb'), ['int'])),
                            ('input_no_vrf_in_idb', (YLeaf(YType.uint32, 'input-no-vrf-in-idb'), ['int'])),
                            ('input_disabled_idb', (YLeaf(YType.uint32, 'input-disabled-idb'), ['int'])),
                            ('input_martian_address', (YLeaf(YType.uint32, 'input-martian-address'), ['int'])),
                            ('input_no_assigned_vrf_id', (YLeaf(YType.uint32, 'input-no-assigned-vrf-id'), ['int'])),
                            ('input_no_vrf_mtrace', (YLeaf(YType.uint32, 'input-no-vrf-mtrace'), ['int'])),
                            ('input_no_platform_support_mtrace', (YLeaf(YType.uint32, 'input-no-platform-support-mtrace'), ['int'])),
                        ])
                        self.elapsed_time = None
                        self.packets_in = None
                        self.packets_out = None
                        self.format_errors = None
                        self.packet_manager_input_errors = None
                        self.packet_manager_output_errors = None
                        self.checksum_errors = None
                        self.receive_socket_errors = None
                        self.socket_errors = None
                        self.bad_scope_errors = None
                        self.auxillary_data_length_errors = None
                        self.invalid_source_address_errors = None
                        self.no_socket_connection = None
                        self.miscellaneous_errors = None
                        self.input_queries = None
                        self.input_reports = None
                        self.input_leaves = None
                        self.input_mtrace = None
                        self.input_dvmrp = None
                        self.input_pim = None
                        self.output_queries = None
                        self.output_reports = None
                        self.output_leaves = None
                        self.output_mtrace = None
                        self.output_dvmrp = None
                        self.output_pim = None
                        self.get_packet_failure = None
                        self.output_no_parent_interface_handle = None
                        self.input_no_idb = None
                        self.input_no_vrf_in_idb = None
                        self.input_disabled_idb = None
                        self.input_martian_address = None
                        self.input_no_assigned_vrf_id = None
                        self.input_no_vrf_mtrace = None
                        self.input_no_platform_support_mtrace = None
                        self._segment_path = lambda: "traffic-counters"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Mld.Standby.Vrfs.Vrf.TrafficCounters, ['elapsed_time', 'packets_in', 'packets_out', 'format_errors', 'packet_manager_input_errors', 'packet_manager_output_errors', 'checksum_errors', 'receive_socket_errors', 'socket_errors', 'bad_scope_errors', 'auxillary_data_length_errors', 'invalid_source_address_errors', 'no_socket_connection', 'miscellaneous_errors', 'input_queries', 'input_reports', 'input_leaves', 'input_mtrace', 'input_dvmrp', 'input_pim', 'output_queries', 'output_reports', 'output_leaves', 'output_mtrace', 'output_dvmrp', 'output_pim', 'get_packet_failure', 'output_no_parent_interface_handle', 'input_no_idb', 'input_no_vrf_in_idb', 'input_disabled_idb', 'input_martian_address', 'input_no_assigned_vrf_id', 'input_no_vrf_mtrace', 'input_no_platform_support_mtrace'], name, value)

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Mld.Standby.Vrfs.Vrf.TrafficCounters']['meta_info']


                class Groups(_Entity_):
                    """
                    IGMP Group Database Table
                    
                    .. attribute:: group
                    
                    	IGMP Group Entry Information
                    	**type**\: list of  		 :py:class:`Group <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.Groups.Group>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Mld.Standby.Vrfs.Vrf.Groups, self).__init__()

                        self.yang_name = "groups"
                        self.yang_parent_name = "vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("group", ("group", Mld.Standby.Vrfs.Vrf.Groups.Group))])
                        self._leafs = OrderedDict()

                        self.group = YList(self)
                        self._segment_path = lambda: "groups"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Mld.Standby.Vrfs.Vrf.Groups, [], name, value)


                    class Group(_Entity_):
                        """
                        IGMP Group Entry Information
                        
                        .. attribute:: group_address
                        
                        	Group Address
                        	**type**\: union of the below types:
                        
                        		**type**\: str
                        
                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        		**type**\: str
                        
                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: interface_name
                        
                        	Interface Name
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: group_address_xr
                        
                        	Group Address
                        	**type**\:  :py:class:`GroupAddressXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.Groups.Group.GroupAddressXr>`
                        
                        	**config**\: False
                        
                        .. attribute:: last_reporter
                        
                        	Last reporter address
                        	**type**\:  :py:class:`LastReporter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.Groups.Group.LastReporter>`
                        
                        	**config**\: False
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\:  :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.Groups.Group.SourceAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: interface_name_xr
                        
                        	Interface
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: uptime
                        
                        	Uptime in seconds
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        	**config**\: False
                        
                        	**units**\: second
                        
                        .. attribute:: expiration_time
                        
                        	Expiration time in seconds
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        	**config**\: False
                        
                        	**units**\: second
                        
                        .. attribute:: explicit_tracking_enabled
                        
                        	Is explicit tracking enabled
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_self_join
                        
                        	If local system is member of this group on this interface
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: row_status
                        
                        	interface on or off for the group
                        	**type**\: str
                        
                        	**length:** 0..16
                        
                        	**config**\: False
                        
                        .. attribute:: is_low_memory
                        
                        	Node is running low on memory
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: router_filter_mode
                        
                        	Filter mode
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        	**config**\: False
                        
                        .. attribute:: older_host_version1_timer
                        
                        	IGMP Hostversion1timer
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: older_host_version2_timer
                        
                        	IGMP Hostversion2timer
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_added
                        
                        	Joined
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_suppressed
                        
                        	Suppressed
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Standby.Vrfs.Vrf.Groups.Group, self).__init__()

                            self.yang_name = "group"
                            self.yang_parent_name = "groups"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("group-address-xr", ("group_address_xr", Mld.Standby.Vrfs.Vrf.Groups.Group.GroupAddressXr)), ("last-reporter", ("last_reporter", Mld.Standby.Vrfs.Vrf.Groups.Group.LastReporter)), ("source-address", ("source_address", Mld.Standby.Vrfs.Vrf.Groups.Group.SourceAddress))])
                            self._leafs = OrderedDict([
                                ('group_address', (YLeaf(YType.str, 'group-address'), ['str','str'])),
                                ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                ('interface_name_xr', (YLeaf(YType.str, 'interface-name-xr'), ['str'])),
                                ('uptime', (YLeaf(YType.uint64, 'uptime'), ['int'])),
                                ('expiration_time', (YLeaf(YType.int32, 'expiration-time'), ['int'])),
                                ('explicit_tracking_enabled', (YLeaf(YType.boolean, 'explicit-tracking-enabled'), ['bool'])),
                                ('is_self_join', (YLeaf(YType.boolean, 'is-self-join'), ['bool'])),
                                ('row_status', (YLeaf(YType.str, 'row-status'), ['str'])),
                                ('is_low_memory', (YLeaf(YType.boolean, 'is-low-memory'), ['bool'])),
                                ('router_filter_mode', (YLeaf(YType.uint8, 'router-filter-mode'), ['int'])),
                                ('older_host_version1_timer', (YLeaf(YType.uint32, 'older-host-version1-timer'), ['int'])),
                                ('older_host_version2_timer', (YLeaf(YType.uint32, 'older-host-version2-timer'), ['int'])),
                                ('is_added', (YLeaf(YType.boolean, 'is-added'), ['bool'])),
                                ('is_suppressed', (YLeaf(YType.boolean, 'is-suppressed'), ['bool'])),
                            ])
                            self.group_address = None
                            self.interface_name = None
                            self.interface_name_xr = None
                            self.uptime = None
                            self.expiration_time = None
                            self.explicit_tracking_enabled = None
                            self.is_self_join = None
                            self.row_status = None
                            self.is_low_memory = None
                            self.router_filter_mode = None
                            self.older_host_version1_timer = None
                            self.older_host_version2_timer = None
                            self.is_added = None
                            self.is_suppressed = None

                            self.group_address_xr = Mld.Standby.Vrfs.Vrf.Groups.Group.GroupAddressXr()
                            self.group_address_xr.parent = self
                            self._children_name_map["group_address_xr"] = "group-address-xr"

                            self.last_reporter = Mld.Standby.Vrfs.Vrf.Groups.Group.LastReporter()
                            self.last_reporter.parent = self
                            self._children_name_map["last_reporter"] = "last-reporter"

                            self.source_address = Mld.Standby.Vrfs.Vrf.Groups.Group.SourceAddress()
                            self.source_address.parent = self
                            self._children_name_map["source_address"] = "source-address"
                            self._segment_path = lambda: "group"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Standby.Vrfs.Vrf.Groups.Group, ['group_address', 'interface_name', 'interface_name_xr', 'uptime', 'expiration_time', 'explicit_tracking_enabled', 'is_self_join', 'row_status', 'is_low_memory', 'router_filter_mode', 'older_host_version1_timer', 'older_host_version2_timer', 'is_added', 'is_suppressed'], name, value)


                        class GroupAddressXr(_Entity_):
                            """
                            Group Address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Standby.Vrfs.Vrf.Groups.Group.GroupAddressXr, self).__init__()

                                self.yang_name = "group-address-xr"
                                self.yang_parent_name = "group"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "group-address-xr"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Standby.Vrfs.Vrf.Groups.Group.GroupAddressXr, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Standby.Vrfs.Vrf.Groups.Group.GroupAddressXr']['meta_info']


                        class LastReporter(_Entity_):
                            """
                            Last reporter address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Standby.Vrfs.Vrf.Groups.Group.LastReporter, self).__init__()

                                self.yang_name = "last-reporter"
                                self.yang_parent_name = "group"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "last-reporter"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Standby.Vrfs.Vrf.Groups.Group.LastReporter, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Standby.Vrfs.Vrf.Groups.Group.LastReporter']['meta_info']


                        class SourceAddress(_Entity_):
                            """
                            Source Address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Standby.Vrfs.Vrf.Groups.Group.SourceAddress, self).__init__()

                                self.yang_name = "source-address"
                                self.yang_parent_name = "group"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "source-address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Standby.Vrfs.Vrf.Groups.Group.SourceAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Standby.Vrfs.Vrf.Groups.Group.SourceAddress']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Standby.Vrfs.Vrf.Groups.Group']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Mld.Standby.Vrfs.Vrf.Groups']['meta_info']


                class GroupSummary(_Entity_):
                    """
                    IGMP Groups Summary
                    
                    .. attribute:: groutes
                    
                    	No. of (\*,G) routes
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: sg_routes
                    
                    	No. of (S,G) routes
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: group_count
                    
                    	Current groups accepted
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_low_memory
                    
                    	Node is running low on memory
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Mld.Standby.Vrfs.Vrf.GroupSummary, self).__init__()

                        self.yang_name = "group-summary"
                        self.yang_parent_name = "vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('groutes', (YLeaf(YType.uint32, 'groutes'), ['int'])),
                            ('sg_routes', (YLeaf(YType.uint32, 'sg-routes'), ['int'])),
                            ('group_count', (YLeaf(YType.uint32, 'group-count'), ['int'])),
                            ('is_low_memory', (YLeaf(YType.boolean, 'is-low-memory'), ['bool'])),
                        ])
                        self.groutes = None
                        self.sg_routes = None
                        self.group_count = None
                        self.is_low_memory = None
                        self._segment_path = lambda: "group-summary"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Mld.Standby.Vrfs.Vrf.GroupSummary, ['groutes', 'sg_routes', 'group_count', 'is_low_memory'], name, value)

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Mld.Standby.Vrfs.Vrf.GroupSummary']['meta_info']


                class IfrsInterfaceSummary(_Entity_):
                    """
                    IGMP IFRS Interface summary
                    
                    .. attribute:: interface_count
                    
                    	Interface Count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: configuration_count
                    
                    	Configuration count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Mld.Standby.Vrfs.Vrf.IfrsInterfaceSummary, self).__init__()

                        self.yang_name = "ifrs-interface-summary"
                        self.yang_parent_name = "vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('interface_count', (YLeaf(YType.uint32, 'interface-count'), ['int'])),
                            ('configuration_count', (YLeaf(YType.uint32, 'configuration-count'), ['int'])),
                        ])
                        self.interface_count = None
                        self.configuration_count = None
                        self._segment_path = lambda: "ifrs-interface-summary"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Mld.Standby.Vrfs.Vrf.IfrsInterfaceSummary, ['interface_count', 'configuration_count'], name, value)

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Mld.Standby.Vrfs.Vrf.IfrsInterfaceSummary']['meta_info']


                class GlobalInterfaceTable(_Entity_):
                    """
                    IGMP Global Interface 
                    
                    .. attribute:: interface
                    
                    	IGMP Interface
                    	**type**\: list of  		 :py:class:`Interface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.GlobalInterfaceTable.Interface>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Mld.Standby.Vrfs.Vrf.GlobalInterfaceTable, self).__init__()

                        self.yang_name = "global-interface-table"
                        self.yang_parent_name = "vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("interface", ("interface", Mld.Standby.Vrfs.Vrf.GlobalInterfaceTable.Interface))])
                        self._leafs = OrderedDict()

                        self.interface = YList(self)
                        self._segment_path = lambda: "global-interface-table"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Mld.Standby.Vrfs.Vrf.GlobalInterfaceTable, [], name, value)


                    class Interface(_Entity_):
                        """
                        IGMP Interface
                        
                        .. attribute:: interface_name  (key)
                        
                        	Interface Name
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: address
                        
                        	IP address
                        	**type**\:  :py:class:`Address <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.GlobalInterfaceTable.Interface.Address>`
                        
                        	**config**\: False
                        
                        .. attribute:: querier_address
                        
                        	Address of the Querier
                        	**type**\:  :py:class:`QuerierAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.GlobalInterfaceTable.Interface.QuerierAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: subscriber_address
                        
                        	Address of subscriber
                        	**type**\:  :py:class:`SubscriberAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.GlobalInterfaceTable.Interface.SubscriberAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: interface_name_xr
                        
                        	Interface
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: state
                        
                        	Interface state
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: prefix_length
                        
                        	Prefix length
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_interface_up
                        
                        	Is interface up
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_ip_enabled
                        
                        	Is IP enabled
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_router_enabled
                        
                        	Is Router functionality enabled
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: igmp_version
                        
                        	IGMP Router version
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        	**config**\: False
                        
                        .. attribute:: host_version
                        
                        	IGMP Host version
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        	**config**\: False
                        
                        .. attribute:: query_interval
                        
                        	Query Interval value in seconds
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        	**units**\: second
                        
                        .. attribute:: query_timeout
                        
                        	Query Timeout value
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: query_maximum_response_time
                        
                        	Max Response Timeout value
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: last_member_query_interval
                        
                        	Last Member Query Interval
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: group_joins
                        
                        	No. of group joins
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: group_leaves
                        
                        	No. of group leaves
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_querier
                        
                        	Are we querier
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: total_active_groups
                        
                        	Actual number of groups on interface
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: robustness
                        
                        	Robustness Variable value
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: proxy_interface
                        
                        	Proxy interface index
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: querier_uptime
                        
                        	Time since the last querier took over
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: las_ll_registration_count
                        
                        	LAS reg count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_get_address_count
                        
                        	LAS get addr count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_update_count
                        
                        	LAS Update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_ll_remove_update_count
                        
                        	LAS LL remove update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_ll_add_update_count
                        
                        	LAS LL add update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_null_update_count
                        
                        	LAS Null update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_unregistration_count
                        
                        	LAS unreg count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_las_request
                        
                        	LAS req
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_las_registered
                        
                        	LAS registered
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: vrf_id
                        
                        	VRF id
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: mte_vrf_id
                        
                        	MTE VRF id
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: location
                        
                        	Location
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: mtu
                        
                        	MTU
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: vrf_state
                        
                        	Vrf State
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_configurationverify
                        
                        	CFG verify
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configurationvrf_set
                        
                        	CFG vrf set
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configurationvrf_error
                        
                        	CFG vrf error
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configuration_mcast_vrf_set
                        
                        	Is mcast set
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configuration_mcast_vrf_error
                        
                        	Is mcast error
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_im_state_registered
                        
                        	Im state registered
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_subscriber
                        
                        	Subscriber interface
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: subscriber_mode
                        
                        	Subscriber mode
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_identity_present
                        
                        	Subscriber ID or Address available from AAA
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: subscriber_id
                        
                        	ID string of subscriber
                        	**type**\: str
                        
                        	**length:** 0..257
                        
                        	**config**\: False
                        
                        .. attribute:: parent_ifhandle
                        
                        	Parent If Handle
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: time_since_last_query_in_seconds
                        
                        	Time elapsed since last query
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: time_since_last_report_in_seconds
                        
                        	Time elapsed since last report
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: router_uptime_in_seconds
                        
                        	Uptime since router enabled event
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: mte_tuple_count
                        
                        	MTE Tuple count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Standby.Vrfs.Vrf.GlobalInterfaceTable.Interface, self).__init__()

                            self.yang_name = "interface"
                            self.yang_parent_name = "global-interface-table"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['interface_name']
                            self._child_classes = OrderedDict([("address", ("address", Mld.Standby.Vrfs.Vrf.GlobalInterfaceTable.Interface.Address)), ("querier-address", ("querier_address", Mld.Standby.Vrfs.Vrf.GlobalInterfaceTable.Interface.QuerierAddress)), ("subscriber-address", ("subscriber_address", Mld.Standby.Vrfs.Vrf.GlobalInterfaceTable.Interface.SubscriberAddress))])
                            self._leafs = OrderedDict([
                                ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                ('interface_name_xr', (YLeaf(YType.str, 'interface-name-xr'), ['str'])),
                                ('state', (YLeaf(YType.uint32, 'state'), ['int'])),
                                ('prefix_length', (YLeaf(YType.uint32, 'prefix-length'), ['int'])),
                                ('is_interface_up', (YLeaf(YType.boolean, 'is-interface-up'), ['bool'])),
                                ('is_ip_enabled', (YLeaf(YType.boolean, 'is-ip-enabled'), ['bool'])),
                                ('is_router_enabled', (YLeaf(YType.boolean, 'is-router-enabled'), ['bool'])),
                                ('igmp_version', (YLeaf(YType.uint8, 'igmp-version'), ['int'])),
                                ('host_version', (YLeaf(YType.uint8, 'host-version'), ['int'])),
                                ('query_interval', (YLeaf(YType.uint16, 'query-interval'), ['int'])),
                                ('query_timeout', (YLeaf(YType.uint16, 'query-timeout'), ['int'])),
                                ('query_maximum_response_time', (YLeaf(YType.uint16, 'query-maximum-response-time'), ['int'])),
                                ('last_member_query_interval', (YLeaf(YType.uint16, 'last-member-query-interval'), ['int'])),
                                ('group_joins', (YLeaf(YType.uint32, 'group-joins'), ['int'])),
                                ('group_leaves', (YLeaf(YType.uint32, 'group-leaves'), ['int'])),
                                ('is_querier', (YLeaf(YType.boolean, 'is-querier'), ['bool'])),
                                ('total_active_groups', (YLeaf(YType.uint32, 'total-active-groups'), ['int'])),
                                ('robustness', (YLeaf(YType.uint32, 'robustness'), ['int'])),
                                ('proxy_interface', (YLeaf(YType.str, 'proxy-interface'), ['str'])),
                                ('querier_uptime', (YLeaf(YType.uint16, 'querier-uptime'), ['int'])),
                                ('las_ll_registration_count', (YLeaf(YType.uint32, 'las-ll-registration-count'), ['int'])),
                                ('las_get_address_count', (YLeaf(YType.uint32, 'las-get-address-count'), ['int'])),
                                ('las_update_count', (YLeaf(YType.uint32, 'las-update-count'), ['int'])),
                                ('las_ll_remove_update_count', (YLeaf(YType.uint32, 'las-ll-remove-update-count'), ['int'])),
                                ('las_ll_add_update_count', (YLeaf(YType.uint32, 'las-ll-add-update-count'), ['int'])),
                                ('las_null_update_count', (YLeaf(YType.uint32, 'las-null-update-count'), ['int'])),
                                ('las_unregistration_count', (YLeaf(YType.uint32, 'las-unregistration-count'), ['int'])),
                                ('is_las_request', (YLeaf(YType.boolean, 'is-las-request'), ['bool'])),
                                ('is_las_registered', (YLeaf(YType.boolean, 'is-las-registered'), ['bool'])),
                                ('vrf_id', (YLeaf(YType.uint32, 'vrf-id'), ['int'])),
                                ('mte_vrf_id', (YLeaf(YType.uint32, 'mte-vrf-id'), ['int'])),
                                ('location', (YLeaf(YType.uint32, 'location'), ['int'])),
                                ('mtu', (YLeaf(YType.uint32, 'mtu'), ['int'])),
                                ('vrf_state', (YLeaf(YType.uint32, 'vrf-state'), ['int'])),
                                ('is_configurationverify', (YLeaf(YType.boolean, 'is-configurationverify'), ['bool'])),
                                ('configurationvrf_set', (YLeaf(YType.boolean, 'configurationvrf-set'), ['bool'])),
                                ('configurationvrf_error', (YLeaf(YType.boolean, 'configurationvrf-error'), ['bool'])),
                                ('configuration_mcast_vrf_set', (YLeaf(YType.boolean, 'configuration-mcast-vrf-set'), ['bool'])),
                                ('configuration_mcast_vrf_error', (YLeaf(YType.boolean, 'configuration-mcast-vrf-error'), ['bool'])),
                                ('is_im_state_registered', (YLeaf(YType.boolean, 'is-im-state-registered'), ['bool'])),
                                ('is_subscriber', (YLeaf(YType.boolean, 'is-subscriber'), ['bool'])),
                                ('subscriber_mode', (YLeaf(YType.uint32, 'subscriber-mode'), ['int'])),
                                ('is_identity_present', (YLeaf(YType.boolean, 'is-identity-present'), ['bool'])),
                                ('subscriber_id', (YLeaf(YType.str, 'subscriber-id'), ['str'])),
                                ('parent_ifhandle', (YLeaf(YType.str, 'parent-ifhandle'), ['str'])),
                                ('time_since_last_query_in_seconds', (YLeaf(YType.uint32, 'time-since-last-query-in-seconds'), ['int'])),
                                ('time_since_last_report_in_seconds', (YLeaf(YType.uint32, 'time-since-last-report-in-seconds'), ['int'])),
                                ('router_uptime_in_seconds', (YLeaf(YType.uint32, 'router-uptime-in-seconds'), ['int'])),
                                ('mte_tuple_count', (YLeaf(YType.uint32, 'mte-tuple-count'), ['int'])),
                            ])
                            self.interface_name = None
                            self.interface_name_xr = None
                            self.state = None
                            self.prefix_length = None
                            self.is_interface_up = None
                            self.is_ip_enabled = None
                            self.is_router_enabled = None
                            self.igmp_version = None
                            self.host_version = None
                            self.query_interval = None
                            self.query_timeout = None
                            self.query_maximum_response_time = None
                            self.last_member_query_interval = None
                            self.group_joins = None
                            self.group_leaves = None
                            self.is_querier = None
                            self.total_active_groups = None
                            self.robustness = None
                            self.proxy_interface = None
                            self.querier_uptime = None
                            self.las_ll_registration_count = None
                            self.las_get_address_count = None
                            self.las_update_count = None
                            self.las_ll_remove_update_count = None
                            self.las_ll_add_update_count = None
                            self.las_null_update_count = None
                            self.las_unregistration_count = None
                            self.is_las_request = None
                            self.is_las_registered = None
                            self.vrf_id = None
                            self.mte_vrf_id = None
                            self.location = None
                            self.mtu = None
                            self.vrf_state = None
                            self.is_configurationverify = None
                            self.configurationvrf_set = None
                            self.configurationvrf_error = None
                            self.configuration_mcast_vrf_set = None
                            self.configuration_mcast_vrf_error = None
                            self.is_im_state_registered = None
                            self.is_subscriber = None
                            self.subscriber_mode = None
                            self.is_identity_present = None
                            self.subscriber_id = None
                            self.parent_ifhandle = None
                            self.time_since_last_query_in_seconds = None
                            self.time_since_last_report_in_seconds = None
                            self.router_uptime_in_seconds = None
                            self.mte_tuple_count = None

                            self.address = Mld.Standby.Vrfs.Vrf.GlobalInterfaceTable.Interface.Address()
                            self.address.parent = self
                            self._children_name_map["address"] = "address"

                            self.querier_address = Mld.Standby.Vrfs.Vrf.GlobalInterfaceTable.Interface.QuerierAddress()
                            self.querier_address.parent = self
                            self._children_name_map["querier_address"] = "querier-address"

                            self.subscriber_address = Mld.Standby.Vrfs.Vrf.GlobalInterfaceTable.Interface.SubscriberAddress()
                            self.subscriber_address.parent = self
                            self._children_name_map["subscriber_address"] = "subscriber-address"
                            self._segment_path = lambda: "interface" + "[interface-name='" + str(self.interface_name) + "']"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Standby.Vrfs.Vrf.GlobalInterfaceTable.Interface, ['interface_name', 'interface_name_xr', 'state', 'prefix_length', 'is_interface_up', 'is_ip_enabled', 'is_router_enabled', 'igmp_version', 'host_version', 'query_interval', 'query_timeout', 'query_maximum_response_time', 'last_member_query_interval', 'group_joins', 'group_leaves', 'is_querier', 'total_active_groups', 'robustness', 'proxy_interface', 'querier_uptime', 'las_ll_registration_count', 'las_get_address_count', 'las_update_count', 'las_ll_remove_update_count', 'las_ll_add_update_count', 'las_null_update_count', 'las_unregistration_count', 'is_las_request', 'is_las_registered', 'vrf_id', 'mte_vrf_id', 'location', 'mtu', 'vrf_state', 'is_configurationverify', 'configurationvrf_set', 'configurationvrf_error', 'configuration_mcast_vrf_set', 'configuration_mcast_vrf_error', 'is_im_state_registered', 'is_subscriber', 'subscriber_mode', 'is_identity_present', 'subscriber_id', 'parent_ifhandle', 'time_since_last_query_in_seconds', 'time_since_last_report_in_seconds', 'router_uptime_in_seconds', 'mte_tuple_count'], name, value)


                        class Address(_Entity_):
                            """
                            IP address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Standby.Vrfs.Vrf.GlobalInterfaceTable.Interface.Address, self).__init__()

                                self.yang_name = "address"
                                self.yang_parent_name = "interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Standby.Vrfs.Vrf.GlobalInterfaceTable.Interface.Address, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Standby.Vrfs.Vrf.GlobalInterfaceTable.Interface.Address']['meta_info']


                        class QuerierAddress(_Entity_):
                            """
                            Address of the Querier
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Standby.Vrfs.Vrf.GlobalInterfaceTable.Interface.QuerierAddress, self).__init__()

                                self.yang_name = "querier-address"
                                self.yang_parent_name = "interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "querier-address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Standby.Vrfs.Vrf.GlobalInterfaceTable.Interface.QuerierAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Standby.Vrfs.Vrf.GlobalInterfaceTable.Interface.QuerierAddress']['meta_info']


                        class SubscriberAddress(_Entity_):
                            """
                            Address of subscriber
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Standby.Vrfs.Vrf.GlobalInterfaceTable.Interface.SubscriberAddress, self).__init__()

                                self.yang_name = "subscriber-address"
                                self.yang_parent_name = "interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "subscriber-address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Standby.Vrfs.Vrf.GlobalInterfaceTable.Interface.SubscriberAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Standby.Vrfs.Vrf.GlobalInterfaceTable.Interface.SubscriberAddress']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Standby.Vrfs.Vrf.GlobalInterfaceTable.Interface']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Mld.Standby.Vrfs.Vrf.GlobalInterfaceTable']['meta_info']


                class SsmMapDetails(_Entity_):
                    """
                    SSM Map Detail
                    
                    .. attribute:: ssm_map_detail
                    
                    	SSM Map Detail Table information
                    	**type**\: list of  		 :py:class:`SsmMapDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.SsmMapDetails.SsmMapDetail>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Mld.Standby.Vrfs.Vrf.SsmMapDetails, self).__init__()

                        self.yang_name = "ssm-map-details"
                        self.yang_parent_name = "vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("ssm-map-detail", ("ssm_map_detail", Mld.Standby.Vrfs.Vrf.SsmMapDetails.SsmMapDetail))])
                        self._leafs = OrderedDict()

                        self.ssm_map_detail = YList(self)
                        self._segment_path = lambda: "ssm-map-details"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Mld.Standby.Vrfs.Vrf.SsmMapDetails, [], name, value)


                    class SsmMapDetail(_Entity_):
                        """
                        SSM Map Detail Table information
                        
                        .. attribute:: ssm_map_type
                        
                        	SSM Map Type
                        	**type**\:  :py:class:`IgmpssmMap <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpssmMap>`
                        
                        	**config**\: False
                        
                        .. attribute:: group_address
                        
                        	Group address
                        	**type**\: union of the below types:
                        
                        		**type**\: str
                        
                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        		**type**\: str
                        
                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: map_info
                        
                        	Basic Map Info
                        	**type**\:  :py:class:`MapInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.SsmMapDetails.SsmMapDetail.MapInfo>`
                        
                        	**config**\: False
                        
                        .. attribute:: expiration_time
                        
                        	Expiration Time in Seconds
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        	**units**\: second
                        
                        .. attribute:: response_pending
                        
                        	Response Pending
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: query_interval
                        
                        	Query interval
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: elapsed_time
                        
                        	Elapsed time
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        	**config**\: False
                        
                        .. attribute:: sources
                        
                        	List of sources
                        	**type**\: list of  		 :py:class:`Sources <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.SsmMapDetails.SsmMapDetail.Sources>`
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Standby.Vrfs.Vrf.SsmMapDetails.SsmMapDetail, self).__init__()

                            self.yang_name = "ssm-map-detail"
                            self.yang_parent_name = "ssm-map-details"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("map-info", ("map_info", Mld.Standby.Vrfs.Vrf.SsmMapDetails.SsmMapDetail.MapInfo)), ("sources", ("sources", Mld.Standby.Vrfs.Vrf.SsmMapDetails.SsmMapDetail.Sources))])
                            self._leafs = OrderedDict([
                                ('ssm_map_type', (YLeaf(YType.enumeration, 'ssm-map-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpssmMap', '')])),
                                ('group_address', (YLeaf(YType.str, 'group-address'), ['str','str'])),
                                ('expiration_time', (YLeaf(YType.uint32, 'expiration-time'), ['int'])),
                                ('response_pending', (YLeaf(YType.boolean, 'response-pending'), ['bool'])),
                                ('query_interval', (YLeaf(YType.uint32, 'query-interval'), ['int'])),
                                ('elapsed_time', (YLeaf(YType.uint64, 'elapsed-time'), ['int'])),
                            ])
                            self.ssm_map_type = None
                            self.group_address = None
                            self.expiration_time = None
                            self.response_pending = None
                            self.query_interval = None
                            self.elapsed_time = None

                            self.map_info = Mld.Standby.Vrfs.Vrf.SsmMapDetails.SsmMapDetail.MapInfo()
                            self.map_info.parent = self
                            self._children_name_map["map_info"] = "map-info"

                            self.sources = YList(self)
                            self._segment_path = lambda: "ssm-map-detail"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Standby.Vrfs.Vrf.SsmMapDetails.SsmMapDetail, ['ssm_map_type', 'group_address', 'expiration_time', 'response_pending', 'query_interval', 'elapsed_time'], name, value)


                        class MapInfo(_Entity_):
                            """
                            Basic Map Info
                            
                            .. attribute:: group_address_xr
                            
                            	Group Address
                            	**type**\:  :py:class:`GroupAddressXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.SsmMapDetails.SsmMapDetail.MapInfo.GroupAddressXr>`
                            
                            	**config**\: False
                            
                            .. attribute:: map_type
                            
                            	Map Type of group
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: source_counts
                            
                            	Count of Sources
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Standby.Vrfs.Vrf.SsmMapDetails.SsmMapDetail.MapInfo, self).__init__()

                                self.yang_name = "map-info"
                                self.yang_parent_name = "ssm-map-detail"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("group-address-xr", ("group_address_xr", Mld.Standby.Vrfs.Vrf.SsmMapDetails.SsmMapDetail.MapInfo.GroupAddressXr))])
                                self._leafs = OrderedDict([
                                    ('map_type', (YLeaf(YType.uint32, 'map-type'), ['int'])),
                                    ('source_counts', (YLeaf(YType.uint32, 'source-counts'), ['int'])),
                                ])
                                self.map_type = None
                                self.source_counts = None

                                self.group_address_xr = Mld.Standby.Vrfs.Vrf.SsmMapDetails.SsmMapDetail.MapInfo.GroupAddressXr()
                                self.group_address_xr.parent = self
                                self._children_name_map["group_address_xr"] = "group-address-xr"
                                self._segment_path = lambda: "map-info"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Standby.Vrfs.Vrf.SsmMapDetails.SsmMapDetail.MapInfo, ['map_type', 'source_counts'], name, value)


                            class GroupAddressXr(_Entity_):
                                """
                                Group Address
                                
                                .. attribute:: af_name
                                
                                	AFName
                                	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                                
                                	**config**\: False
                                
                                .. attribute:: ipv4_address
                                
                                	IPv4 Addr
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                .. attribute:: ipv6_address
                                
                                	IPV6 Addr
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                

                                """

                                _prefix = 'ipv4-igmp-oper'
                                _revision = '2018-01-31'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Mld.Standby.Vrfs.Vrf.SsmMapDetails.SsmMapDetail.MapInfo.GroupAddressXr, self).__init__()

                                    self.yang_name = "group-address-xr"
                                    self.yang_parent_name = "map-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                        ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                        ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                    ])
                                    self.af_name = None
                                    self.ipv4_address = None
                                    self.ipv6_address = None
                                    self._segment_path = lambda: "group-address-xr"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Mld.Standby.Vrfs.Vrf.SsmMapDetails.SsmMapDetail.MapInfo.GroupAddressXr, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                    return meta._meta_table['Mld.Standby.Vrfs.Vrf.SsmMapDetails.SsmMapDetail.MapInfo.GroupAddressXr']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Standby.Vrfs.Vrf.SsmMapDetails.SsmMapDetail.MapInfo']['meta_info']


                        class Sources(_Entity_):
                            """
                            List of sources
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Standby.Vrfs.Vrf.SsmMapDetails.SsmMapDetail.Sources, self).__init__()

                                self.yang_name = "sources"
                                self.yang_parent_name = "ssm-map-detail"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "sources"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Standby.Vrfs.Vrf.SsmMapDetails.SsmMapDetail.Sources, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Standby.Vrfs.Vrf.SsmMapDetails.SsmMapDetail.Sources']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Standby.Vrfs.Vrf.SsmMapDetails.SsmMapDetail']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Mld.Standby.Vrfs.Vrf.SsmMapDetails']['meta_info']


                class InterfaceStateOffs(_Entity_):
                    """
                    IGMP Interface state off
                    
                    .. attribute:: interface_state_off
                    
                    	IGMP Interface
                    	**type**\: list of  		 :py:class:`InterfaceStateOff <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Mld.Standby.Vrfs.Vrf.InterfaceStateOffs, self).__init__()

                        self.yang_name = "interface-state-offs"
                        self.yang_parent_name = "vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("interface-state-off", ("interface_state_off", Mld.Standby.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff))])
                        self._leafs = OrderedDict()

                        self.interface_state_off = YList(self)
                        self._segment_path = lambda: "interface-state-offs"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Mld.Standby.Vrfs.Vrf.InterfaceStateOffs, [], name, value)


                    class InterfaceStateOff(_Entity_):
                        """
                        IGMP Interface
                        
                        .. attribute:: interface_name  (key)
                        
                        	Interface Name
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: address
                        
                        	IP address
                        	**type**\:  :py:class:`Address <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.Address>`
                        
                        	**config**\: False
                        
                        .. attribute:: querier_address
                        
                        	Address of the Querier
                        	**type**\:  :py:class:`QuerierAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.QuerierAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: subscriber_address
                        
                        	Address of subscriber
                        	**type**\:  :py:class:`SubscriberAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.SubscriberAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: interface_name_xr
                        
                        	Interface
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: state
                        
                        	Interface state
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: prefix_length
                        
                        	Prefix length
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_interface_up
                        
                        	Is interface up
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_ip_enabled
                        
                        	Is IP enabled
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_router_enabled
                        
                        	Is Router functionality enabled
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: igmp_version
                        
                        	IGMP Router version
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        	**config**\: False
                        
                        .. attribute:: host_version
                        
                        	IGMP Host version
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        	**config**\: False
                        
                        .. attribute:: query_interval
                        
                        	Query Interval value in seconds
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        	**units**\: second
                        
                        .. attribute:: query_timeout
                        
                        	Query Timeout value
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: query_maximum_response_time
                        
                        	Max Response Timeout value
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: last_member_query_interval
                        
                        	Last Member Query Interval
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: group_joins
                        
                        	No. of group joins
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: group_leaves
                        
                        	No. of group leaves
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_querier
                        
                        	Are we querier
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: total_active_groups
                        
                        	Actual number of groups on interface
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: robustness
                        
                        	Robustness Variable value
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: proxy_interface
                        
                        	Proxy interface index
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: querier_uptime
                        
                        	Time since the last querier took over
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: las_ll_registration_count
                        
                        	LAS reg count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_get_address_count
                        
                        	LAS get addr count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_update_count
                        
                        	LAS Update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_ll_remove_update_count
                        
                        	LAS LL remove update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_ll_add_update_count
                        
                        	LAS LL add update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_null_update_count
                        
                        	LAS Null update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_unregistration_count
                        
                        	LAS unreg count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_las_request
                        
                        	LAS req
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_las_registered
                        
                        	LAS registered
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: vrf_id
                        
                        	VRF id
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: mte_vrf_id
                        
                        	MTE VRF id
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: location
                        
                        	Location
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: mtu
                        
                        	MTU
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: vrf_state
                        
                        	Vrf State
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_configurationverify
                        
                        	CFG verify
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configurationvrf_set
                        
                        	CFG vrf set
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configurationvrf_error
                        
                        	CFG vrf error
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configuration_mcast_vrf_set
                        
                        	Is mcast set
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configuration_mcast_vrf_error
                        
                        	Is mcast error
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_im_state_registered
                        
                        	Im state registered
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_subscriber
                        
                        	Subscriber interface
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: subscriber_mode
                        
                        	Subscriber mode
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_identity_present
                        
                        	Subscriber ID or Address available from AAA
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: subscriber_id
                        
                        	ID string of subscriber
                        	**type**\: str
                        
                        	**length:** 0..257
                        
                        	**config**\: False
                        
                        .. attribute:: parent_ifhandle
                        
                        	Parent If Handle
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: time_since_last_query_in_seconds
                        
                        	Time elapsed since last query
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: time_since_last_report_in_seconds
                        
                        	Time elapsed since last report
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: router_uptime_in_seconds
                        
                        	Uptime since router enabled event
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: mte_tuple_count
                        
                        	MTE Tuple count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Standby.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff, self).__init__()

                            self.yang_name = "interface-state-off"
                            self.yang_parent_name = "interface-state-offs"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['interface_name']
                            self._child_classes = OrderedDict([("address", ("address", Mld.Standby.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.Address)), ("querier-address", ("querier_address", Mld.Standby.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.QuerierAddress)), ("subscriber-address", ("subscriber_address", Mld.Standby.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.SubscriberAddress))])
                            self._leafs = OrderedDict([
                                ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                ('interface_name_xr', (YLeaf(YType.str, 'interface-name-xr'), ['str'])),
                                ('state', (YLeaf(YType.uint32, 'state'), ['int'])),
                                ('prefix_length', (YLeaf(YType.uint32, 'prefix-length'), ['int'])),
                                ('is_interface_up', (YLeaf(YType.boolean, 'is-interface-up'), ['bool'])),
                                ('is_ip_enabled', (YLeaf(YType.boolean, 'is-ip-enabled'), ['bool'])),
                                ('is_router_enabled', (YLeaf(YType.boolean, 'is-router-enabled'), ['bool'])),
                                ('igmp_version', (YLeaf(YType.uint8, 'igmp-version'), ['int'])),
                                ('host_version', (YLeaf(YType.uint8, 'host-version'), ['int'])),
                                ('query_interval', (YLeaf(YType.uint16, 'query-interval'), ['int'])),
                                ('query_timeout', (YLeaf(YType.uint16, 'query-timeout'), ['int'])),
                                ('query_maximum_response_time', (YLeaf(YType.uint16, 'query-maximum-response-time'), ['int'])),
                                ('last_member_query_interval', (YLeaf(YType.uint16, 'last-member-query-interval'), ['int'])),
                                ('group_joins', (YLeaf(YType.uint32, 'group-joins'), ['int'])),
                                ('group_leaves', (YLeaf(YType.uint32, 'group-leaves'), ['int'])),
                                ('is_querier', (YLeaf(YType.boolean, 'is-querier'), ['bool'])),
                                ('total_active_groups', (YLeaf(YType.uint32, 'total-active-groups'), ['int'])),
                                ('robustness', (YLeaf(YType.uint32, 'robustness'), ['int'])),
                                ('proxy_interface', (YLeaf(YType.str, 'proxy-interface'), ['str'])),
                                ('querier_uptime', (YLeaf(YType.uint16, 'querier-uptime'), ['int'])),
                                ('las_ll_registration_count', (YLeaf(YType.uint32, 'las-ll-registration-count'), ['int'])),
                                ('las_get_address_count', (YLeaf(YType.uint32, 'las-get-address-count'), ['int'])),
                                ('las_update_count', (YLeaf(YType.uint32, 'las-update-count'), ['int'])),
                                ('las_ll_remove_update_count', (YLeaf(YType.uint32, 'las-ll-remove-update-count'), ['int'])),
                                ('las_ll_add_update_count', (YLeaf(YType.uint32, 'las-ll-add-update-count'), ['int'])),
                                ('las_null_update_count', (YLeaf(YType.uint32, 'las-null-update-count'), ['int'])),
                                ('las_unregistration_count', (YLeaf(YType.uint32, 'las-unregistration-count'), ['int'])),
                                ('is_las_request', (YLeaf(YType.boolean, 'is-las-request'), ['bool'])),
                                ('is_las_registered', (YLeaf(YType.boolean, 'is-las-registered'), ['bool'])),
                                ('vrf_id', (YLeaf(YType.uint32, 'vrf-id'), ['int'])),
                                ('mte_vrf_id', (YLeaf(YType.uint32, 'mte-vrf-id'), ['int'])),
                                ('location', (YLeaf(YType.uint32, 'location'), ['int'])),
                                ('mtu', (YLeaf(YType.uint32, 'mtu'), ['int'])),
                                ('vrf_state', (YLeaf(YType.uint32, 'vrf-state'), ['int'])),
                                ('is_configurationverify', (YLeaf(YType.boolean, 'is-configurationverify'), ['bool'])),
                                ('configurationvrf_set', (YLeaf(YType.boolean, 'configurationvrf-set'), ['bool'])),
                                ('configurationvrf_error', (YLeaf(YType.boolean, 'configurationvrf-error'), ['bool'])),
                                ('configuration_mcast_vrf_set', (YLeaf(YType.boolean, 'configuration-mcast-vrf-set'), ['bool'])),
                                ('configuration_mcast_vrf_error', (YLeaf(YType.boolean, 'configuration-mcast-vrf-error'), ['bool'])),
                                ('is_im_state_registered', (YLeaf(YType.boolean, 'is-im-state-registered'), ['bool'])),
                                ('is_subscriber', (YLeaf(YType.boolean, 'is-subscriber'), ['bool'])),
                                ('subscriber_mode', (YLeaf(YType.uint32, 'subscriber-mode'), ['int'])),
                                ('is_identity_present', (YLeaf(YType.boolean, 'is-identity-present'), ['bool'])),
                                ('subscriber_id', (YLeaf(YType.str, 'subscriber-id'), ['str'])),
                                ('parent_ifhandle', (YLeaf(YType.str, 'parent-ifhandle'), ['str'])),
                                ('time_since_last_query_in_seconds', (YLeaf(YType.uint32, 'time-since-last-query-in-seconds'), ['int'])),
                                ('time_since_last_report_in_seconds', (YLeaf(YType.uint32, 'time-since-last-report-in-seconds'), ['int'])),
                                ('router_uptime_in_seconds', (YLeaf(YType.uint32, 'router-uptime-in-seconds'), ['int'])),
                                ('mte_tuple_count', (YLeaf(YType.uint32, 'mte-tuple-count'), ['int'])),
                            ])
                            self.interface_name = None
                            self.interface_name_xr = None
                            self.state = None
                            self.prefix_length = None
                            self.is_interface_up = None
                            self.is_ip_enabled = None
                            self.is_router_enabled = None
                            self.igmp_version = None
                            self.host_version = None
                            self.query_interval = None
                            self.query_timeout = None
                            self.query_maximum_response_time = None
                            self.last_member_query_interval = None
                            self.group_joins = None
                            self.group_leaves = None
                            self.is_querier = None
                            self.total_active_groups = None
                            self.robustness = None
                            self.proxy_interface = None
                            self.querier_uptime = None
                            self.las_ll_registration_count = None
                            self.las_get_address_count = None
                            self.las_update_count = None
                            self.las_ll_remove_update_count = None
                            self.las_ll_add_update_count = None
                            self.las_null_update_count = None
                            self.las_unregistration_count = None
                            self.is_las_request = None
                            self.is_las_registered = None
                            self.vrf_id = None
                            self.mte_vrf_id = None
                            self.location = None
                            self.mtu = None
                            self.vrf_state = None
                            self.is_configurationverify = None
                            self.configurationvrf_set = None
                            self.configurationvrf_error = None
                            self.configuration_mcast_vrf_set = None
                            self.configuration_mcast_vrf_error = None
                            self.is_im_state_registered = None
                            self.is_subscriber = None
                            self.subscriber_mode = None
                            self.is_identity_present = None
                            self.subscriber_id = None
                            self.parent_ifhandle = None
                            self.time_since_last_query_in_seconds = None
                            self.time_since_last_report_in_seconds = None
                            self.router_uptime_in_seconds = None
                            self.mte_tuple_count = None

                            self.address = Mld.Standby.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.Address()
                            self.address.parent = self
                            self._children_name_map["address"] = "address"

                            self.querier_address = Mld.Standby.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.QuerierAddress()
                            self.querier_address.parent = self
                            self._children_name_map["querier_address"] = "querier-address"

                            self.subscriber_address = Mld.Standby.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.SubscriberAddress()
                            self.subscriber_address.parent = self
                            self._children_name_map["subscriber_address"] = "subscriber-address"
                            self._segment_path = lambda: "interface-state-off" + "[interface-name='" + str(self.interface_name) + "']"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Standby.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff, ['interface_name', 'interface_name_xr', 'state', 'prefix_length', 'is_interface_up', 'is_ip_enabled', 'is_router_enabled', 'igmp_version', 'host_version', 'query_interval', 'query_timeout', 'query_maximum_response_time', 'last_member_query_interval', 'group_joins', 'group_leaves', 'is_querier', 'total_active_groups', 'robustness', 'proxy_interface', 'querier_uptime', 'las_ll_registration_count', 'las_get_address_count', 'las_update_count', 'las_ll_remove_update_count', 'las_ll_add_update_count', 'las_null_update_count', 'las_unregistration_count', 'is_las_request', 'is_las_registered', 'vrf_id', 'mte_vrf_id', 'location', 'mtu', 'vrf_state', 'is_configurationverify', 'configurationvrf_set', 'configurationvrf_error', 'configuration_mcast_vrf_set', 'configuration_mcast_vrf_error', 'is_im_state_registered', 'is_subscriber', 'subscriber_mode', 'is_identity_present', 'subscriber_id', 'parent_ifhandle', 'time_since_last_query_in_seconds', 'time_since_last_report_in_seconds', 'router_uptime_in_seconds', 'mte_tuple_count'], name, value)


                        class Address(_Entity_):
                            """
                            IP address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Standby.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.Address, self).__init__()

                                self.yang_name = "address"
                                self.yang_parent_name = "interface-state-off"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Standby.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.Address, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Standby.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.Address']['meta_info']


                        class QuerierAddress(_Entity_):
                            """
                            Address of the Querier
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Standby.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.QuerierAddress, self).__init__()

                                self.yang_name = "querier-address"
                                self.yang_parent_name = "interface-state-off"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "querier-address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Standby.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.QuerierAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Standby.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.QuerierAddress']['meta_info']


                        class SubscriberAddress(_Entity_):
                            """
                            Address of subscriber
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Standby.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.SubscriberAddress, self).__init__()

                                self.yang_name = "subscriber-address"
                                self.yang_parent_name = "interface-state-off"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "subscriber-address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Standby.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.SubscriberAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Standby.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.SubscriberAddress']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Standby.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Mld.Standby.Vrfs.Vrf.InterfaceStateOffs']['meta_info']

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Mld.Standby.Vrfs.Vrf']['meta_info']

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                return meta._meta_table['Mld.Standby.Vrfs']['meta_info']


        class Process(_Entity_):
            """
            Process
            
            .. attribute:: amt_summary
            
            	MRIB RouteDB Expiry Information
            	**type**\:  :py:class:`AmtSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Process.AmtSummary>`
            
            	**config**\: False
            
            .. attribute:: nsr
            
            	NSR Information
            	**type**\:  :py:class:`Nsr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Process.Nsr>`
            
            	**config**\: False
            
            .. attribute:: amt_gateways
            
            	Table containing AMT Gateway DataBase information
            	**type**\:  :py:class:`AmtGateways <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Process.AmtGateways>`
            
            	**config**\: False
            
            .. attribute:: unicast_qos_adjust_stats
            
            	IGMP Unicast\-Qos\-Adjust Statistics
            	**type**\:  :py:class:`UnicastQosAdjustStats <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Process.UnicastQosAdjustStats>`
            
            	**config**\: False
            
            .. attribute:: bvi_statistics
            
            	IGMP BVI Stats
            	**type**\:  :py:class:`BviStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Process.BviStatistics>`
            
            	**config**\: False
            
            .. attribute:: nsf
            
            	NSF Information
            	**type**\:  :py:class:`Nsf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Process.Nsf>`
            
            	**config**\: False
            
            

            """

            _prefix = 'ipv4-igmp-oper'
            _revision = '2018-01-31'

            def __init__(self):
                if sys.version_info > (3,):
                    super().__init__()
                else:
                    super(Mld.Standby.Process, self).__init__()

                self.yang_name = "process"
                self.yang_parent_name = "standby"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("amt-summary", ("amt_summary", Mld.Standby.Process.AmtSummary)), ("nsr", ("nsr", Mld.Standby.Process.Nsr)), ("amt-gateways", ("amt_gateways", Mld.Standby.Process.AmtGateways)), ("unicast-qos-adjust-stats", ("unicast_qos_adjust_stats", Mld.Standby.Process.UnicastQosAdjustStats)), ("bvi-statistics", ("bvi_statistics", Mld.Standby.Process.BviStatistics)), ("nsf", ("nsf", Mld.Standby.Process.Nsf))])
                self._leafs = OrderedDict()

                self.amt_summary = Mld.Standby.Process.AmtSummary()
                self.amt_summary.parent = self
                self._children_name_map["amt_summary"] = "amt-summary"

                self.nsr = Mld.Standby.Process.Nsr()
                self.nsr.parent = self
                self._children_name_map["nsr"] = "nsr"

                self.amt_gateways = Mld.Standby.Process.AmtGateways()
                self.amt_gateways.parent = self
                self._children_name_map["amt_gateways"] = "amt-gateways"

                self.unicast_qos_adjust_stats = Mld.Standby.Process.UnicastQosAdjustStats()
                self.unicast_qos_adjust_stats.parent = self
                self._children_name_map["unicast_qos_adjust_stats"] = "unicast-qos-adjust-stats"

                self.bvi_statistics = Mld.Standby.Process.BviStatistics()
                self.bvi_statistics.parent = self
                self._children_name_map["bvi_statistics"] = "bvi-statistics"

                self.nsf = Mld.Standby.Process.Nsf()
                self.nsf.parent = self
                self._children_name_map["nsf"] = "nsf"
                self._segment_path = lambda: "process"
                self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/standby/%s" % self._segment_path()
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(Mld.Standby.Process, [], name, value)


            class AmtSummary(_Entity_):
                """
                MRIB RouteDB Expiry Information
                
                .. attribute:: anycast_prefix
                
                	Robustness variable
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                	**config**\: False
                
                .. attribute:: prefix_length
                
                	Advertize AMT prefix length
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: relay_address
                
                	Advertaisment for AMT Relay address
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                	**config**\: False
                
                .. attribute:: mtu
                
                	AMT Tunnel MTU
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: tos
                
                	Type Of Service value in AMT header
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: ttl
                
                	Time To Live value in AMT header
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: query_interval
                
                	AMT Query interval
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: gateway_count
                
                	Number of AMT Gateway
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: max_gateway
                
                	Maximum Gateway allowed
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: tunnel_count
                
                	AMT Tunnel Count
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: tunnel_configured_maximum
                
                	AMT Tunnel configured Maximum
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: is_acl_configured
                
                	ACL configured under AMT
                	**type**\: bool
                
                	**config**\: False
                
                .. attribute:: is_gateway_simulation
                
                	AMT Gateway Simulation
                	**type**\: bool
                
                	**config**\: False
                
                .. attribute:: is_ou_of_resource
                
                	AMT Out Of Resource
                	**type**\: bool
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Mld.Standby.Process.AmtSummary, self).__init__()

                    self.yang_name = "amt-summary"
                    self.yang_parent_name = "process"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('anycast_prefix', (YLeaf(YType.str, 'anycast-prefix'), ['str'])),
                        ('prefix_length', (YLeaf(YType.uint32, 'prefix-length'), ['int'])),
                        ('relay_address', (YLeaf(YType.str, 'relay-address'), ['str'])),
                        ('mtu', (YLeaf(YType.uint32, 'mtu'), ['int'])),
                        ('tos', (YLeaf(YType.uint32, 'tos'), ['int'])),
                        ('ttl', (YLeaf(YType.uint32, 'ttl'), ['int'])),
                        ('query_interval', (YLeaf(YType.uint32, 'query-interval'), ['int'])),
                        ('gateway_count', (YLeaf(YType.uint32, 'gateway-count'), ['int'])),
                        ('max_gateway', (YLeaf(YType.uint32, 'max-gateway'), ['int'])),
                        ('tunnel_count', (YLeaf(YType.uint32, 'tunnel-count'), ['int'])),
                        ('tunnel_configured_maximum', (YLeaf(YType.uint32, 'tunnel-configured-maximum'), ['int'])),
                        ('is_acl_configured', (YLeaf(YType.boolean, 'is-acl-configured'), ['bool'])),
                        ('is_gateway_simulation', (YLeaf(YType.boolean, 'is-gateway-simulation'), ['bool'])),
                        ('is_ou_of_resource', (YLeaf(YType.boolean, 'is-ou-of-resource'), ['bool'])),
                    ])
                    self.anycast_prefix = None
                    self.prefix_length = None
                    self.relay_address = None
                    self.mtu = None
                    self.tos = None
                    self.ttl = None
                    self.query_interval = None
                    self.gateway_count = None
                    self.max_gateway = None
                    self.tunnel_count = None
                    self.tunnel_configured_maximum = None
                    self.is_acl_configured = None
                    self.is_gateway_simulation = None
                    self.is_ou_of_resource = None
                    self._segment_path = lambda: "amt-summary"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/standby/process/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Mld.Standby.Process.AmtSummary, ['anycast_prefix', 'prefix_length', 'relay_address', 'mtu', 'tos', 'ttl', 'query_interval', 'gateway_count', 'max_gateway', 'tunnel_count', 'tunnel_configured_maximum', 'is_acl_configured', 'is_gateway_simulation', 'is_ou_of_resource'], name, value)

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Mld.Standby.Process.AmtSummary']['meta_info']


            class Nsr(_Entity_):
                """
                NSR Information
                
                .. attribute:: state
                
                	NSR state
                	**type**\: int
                
                	**range:** 0..255
                
                	**config**\: False
                
                .. attribute:: partner_proc_connected
                
                	Partner process connected
                	**type**\: bool
                
                	**config**\: False
                
                .. attribute:: collab_conv_done
                
                	Collaborators convergence done
                	**type**\: bool
                
                	**config**\: False
                
                .. attribute:: rmf_notification_done
                
                	RMF Notification done
                	**type**\: bool
                
                	**config**\: False
                
                .. attribute:: last_proc
                
                	Time when process came up
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                	**config**\: False
                
                .. attribute:: last_proc_connection_up
                
                	Time when process connection went up
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                	**config**\: False
                
                .. attribute:: last_proc_connection_dn
                
                	Time when process connection went down
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                	**config**\: False
                
                .. attribute:: last_rmf_ready
                
                	Time when RMF Rdy notif was sent
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                	**config**\: False
                
                .. attribute:: last_rmf_not_ready
                
                	Time when RMF Not\-Rdy notif was sent
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                	**config**\: False
                
                .. attribute:: count_proc_connection_up
                
                	No. of times process connection went up
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: count_proc_connection_dn
                
                	No. of times process connection went down
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: count_rmf_ready
                
                	No. of times RMF Ready notif was sent
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: count_rmf_not_ready
                
                	No. of times RMF Not Ready notif was sent
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Mld.Standby.Process.Nsr, self).__init__()

                    self.yang_name = "nsr"
                    self.yang_parent_name = "process"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('state', (YLeaf(YType.uint8, 'state'), ['int'])),
                        ('partner_proc_connected', (YLeaf(YType.boolean, 'partner-proc-connected'), ['bool'])),
                        ('collab_conv_done', (YLeaf(YType.boolean, 'collab-conv-done'), ['bool'])),
                        ('rmf_notification_done', (YLeaf(YType.boolean, 'rmf-notification-done'), ['bool'])),
                        ('last_proc', (YLeaf(YType.uint64, 'last-proc'), ['int'])),
                        ('last_proc_connection_up', (YLeaf(YType.uint64, 'last-proc-connection-up'), ['int'])),
                        ('last_proc_connection_dn', (YLeaf(YType.uint64, 'last-proc-connection-dn'), ['int'])),
                        ('last_rmf_ready', (YLeaf(YType.uint64, 'last-rmf-ready'), ['int'])),
                        ('last_rmf_not_ready', (YLeaf(YType.uint64, 'last-rmf-not-ready'), ['int'])),
                        ('count_proc_connection_up', (YLeaf(YType.uint32, 'count-proc-connection-up'), ['int'])),
                        ('count_proc_connection_dn', (YLeaf(YType.uint32, 'count-proc-connection-dn'), ['int'])),
                        ('count_rmf_ready', (YLeaf(YType.uint32, 'count-rmf-ready'), ['int'])),
                        ('count_rmf_not_ready', (YLeaf(YType.uint32, 'count-rmf-not-ready'), ['int'])),
                    ])
                    self.state = None
                    self.partner_proc_connected = None
                    self.collab_conv_done = None
                    self.rmf_notification_done = None
                    self.last_proc = None
                    self.last_proc_connection_up = None
                    self.last_proc_connection_dn = None
                    self.last_rmf_ready = None
                    self.last_rmf_not_ready = None
                    self.count_proc_connection_up = None
                    self.count_proc_connection_dn = None
                    self.count_rmf_ready = None
                    self.count_rmf_not_ready = None
                    self._segment_path = lambda: "nsr"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/standby/process/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Mld.Standby.Process.Nsr, ['state', 'partner_proc_connected', 'collab_conv_done', 'rmf_notification_done', 'last_proc', 'last_proc_connection_up', 'last_proc_connection_dn', 'last_rmf_ready', 'last_rmf_not_ready', 'count_proc_connection_up', 'count_proc_connection_dn', 'count_rmf_ready', 'count_rmf_not_ready'], name, value)

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Mld.Standby.Process.Nsr']['meta_info']


            class AmtGateways(_Entity_):
                """
                Table containing AMT Gateway DataBase
                information
                
                .. attribute:: amt_gateway
                
                	AMT Gateway DataBase information
                	**type**\: list of  		 :py:class:`AmtGateway <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.Process.AmtGateways.AmtGateway>`
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Mld.Standby.Process.AmtGateways, self).__init__()

                    self.yang_name = "amt-gateways"
                    self.yang_parent_name = "process"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("amt-gateway", ("amt_gateway", Mld.Standby.Process.AmtGateways.AmtGateway))])
                    self._leafs = OrderedDict()

                    self.amt_gateway = YList(self)
                    self._segment_path = lambda: "amt-gateways"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/standby/process/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Mld.Standby.Process.AmtGateways, [], name, value)


                class AmtGateway(_Entity_):
                    """
                    AMT Gateway DataBase information
                    
                    .. attribute:: gateway_address
                    
                    	Gateway Address
                    	**type**\: union of the below types:
                    
                    		**type**\: str
                    
                    			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    		**type**\: str
                    
                    			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    	**config**\: False
                    
                    .. attribute:: port
                    
                    	Port
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: amtgw
                    
                    	GW
                    	**type**\: str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    	**config**\: False
                    
                    .. attribute:: amt_port
                    
                    	Port
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: key_len
                    
                    	Len
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: amtnh
                    
                    	AMT NH
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: amt_nonce
                    
                    	Nonce
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: idb
                    
                    	IDB
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**config**\: False
                    
                    .. attribute:: mem_upd_in
                    
                    	UpdIn
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: mem_upd_out
                    
                    	UpdOut
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Mld.Standby.Process.AmtGateways.AmtGateway, self).__init__()

                        self.yang_name = "amt-gateway"
                        self.yang_parent_name = "amt-gateways"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('gateway_address', (YLeaf(YType.str, 'gateway-address'), ['str','str'])),
                            ('port', (YLeaf(YType.uint32, 'port'), ['int'])),
                            ('amtgw', (YLeaf(YType.str, 'amtgw'), ['str'])),
                            ('amt_port', (YLeaf(YType.uint32, 'amt-port'), ['int'])),
                            ('key_len', (YLeaf(YType.uint32, 'key-len'), ['int'])),
                            ('amtnh', (YLeaf(YType.uint32, 'amtnh'), ['int'])),
                            ('amt_nonce', (YLeaf(YType.uint32, 'amt-nonce'), ['int'])),
                            ('idb', (YLeaf(YType.uint64, 'idb'), ['int'])),
                            ('mem_upd_in', (YLeaf(YType.uint32, 'mem-upd-in'), ['int'])),
                            ('mem_upd_out', (YLeaf(YType.uint32, 'mem-upd-out'), ['int'])),
                        ])
                        self.gateway_address = None
                        self.port = None
                        self.amtgw = None
                        self.amt_port = None
                        self.key_len = None
                        self.amtnh = None
                        self.amt_nonce = None
                        self.idb = None
                        self.mem_upd_in = None
                        self.mem_upd_out = None
                        self._segment_path = lambda: "amt-gateway"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/standby/process/amt-gateways/%s" % self._segment_path()
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Mld.Standby.Process.AmtGateways.AmtGateway, ['gateway_address', 'port', 'amtgw', 'amt_port', 'key_len', 'amtnh', 'amt_nonce', 'idb', 'mem_upd_in', 'mem_upd_out'], name, value)

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Mld.Standby.Process.AmtGateways.AmtGateway']['meta_info']

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Mld.Standby.Process.AmtGateways']['meta_info']


            class UnicastQosAdjustStats(_Entity_):
                """
                IGMP Unicast\-Qos\-Adjust Statistics
                
                .. attribute:: queues
                
                	I2Q Queue count
                	**type**\: int
                
                	**range:** 0..65535
                
                	**config**\: False
                
                .. attribute:: batches
                
                	I2Q Rate Batch count
                	**type**\: int
                
                	**range:** 0..65535
                
                	**config**\: False
                
                .. attribute:: add_to_batches
                
                	Add to batch count
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: delete_to_batches
                
                	Delete to batch count
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: send_success
                
                	Send Success count
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: send_errors
                
                	Number of Send errors in batch
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: send_comm_errors
                
                	Send Error due to comms count
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: send_partial_errors
                
                	Send Error due to partial issue count
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: received_resync_requests
                
                	Number of Resync request received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: sent_resync_bulks
                
                	Number of bulks sent for last resync received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: is_resync_received
                
                	Is Resync request received
                	**type**\: bool
                
                	**config**\: False
                
                .. attribute:: is_resync_required
                
                	Is Resync required
                	**type**\: bool
                
                	**config**\: False
                
                .. attribute:: is_resync_start_sent
                
                	Is Resync Start message sent
                	**type**\: bool
                
                	**config**\: False
                
                .. attribute:: is_qos_s_sweeped
                
                	Is QOS Sweeped once 
                	**type**\: bool
                
                	**config**\: False
                
                .. attribute:: last_sweep_time
                
                	Time elapsed since Last mark and sweep in seconds
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                	**config**\: False
                
                	**units**\: second
                
                .. attribute:: last_download_time
                
                	Time elapsed since Last download to QOS in seconds
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                	**config**\: False
                
                	**units**\: second
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Mld.Standby.Process.UnicastQosAdjustStats, self).__init__()

                    self.yang_name = "unicast-qos-adjust-stats"
                    self.yang_parent_name = "process"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('queues', (YLeaf(YType.uint16, 'queues'), ['int'])),
                        ('batches', (YLeaf(YType.uint16, 'batches'), ['int'])),
                        ('add_to_batches', (YLeaf(YType.uint32, 'add-to-batches'), ['int'])),
                        ('delete_to_batches', (YLeaf(YType.uint32, 'delete-to-batches'), ['int'])),
                        ('send_success', (YLeaf(YType.uint32, 'send-success'), ['int'])),
                        ('send_errors', (YLeaf(YType.uint32, 'send-errors'), ['int'])),
                        ('send_comm_errors', (YLeaf(YType.uint32, 'send-comm-errors'), ['int'])),
                        ('send_partial_errors', (YLeaf(YType.uint32, 'send-partial-errors'), ['int'])),
                        ('received_resync_requests', (YLeaf(YType.uint32, 'received-resync-requests'), ['int'])),
                        ('sent_resync_bulks', (YLeaf(YType.uint32, 'sent-resync-bulks'), ['int'])),
                        ('is_resync_received', (YLeaf(YType.boolean, 'is-resync-received'), ['bool'])),
                        ('is_resync_required', (YLeaf(YType.boolean, 'is-resync-required'), ['bool'])),
                        ('is_resync_start_sent', (YLeaf(YType.boolean, 'is-resync-start-sent'), ['bool'])),
                        ('is_qos_s_sweeped', (YLeaf(YType.boolean, 'is-qos-s-sweeped'), ['bool'])),
                        ('last_sweep_time', (YLeaf(YType.uint64, 'last-sweep-time'), ['int'])),
                        ('last_download_time', (YLeaf(YType.uint64, 'last-download-time'), ['int'])),
                    ])
                    self.queues = None
                    self.batches = None
                    self.add_to_batches = None
                    self.delete_to_batches = None
                    self.send_success = None
                    self.send_errors = None
                    self.send_comm_errors = None
                    self.send_partial_errors = None
                    self.received_resync_requests = None
                    self.sent_resync_bulks = None
                    self.is_resync_received = None
                    self.is_resync_required = None
                    self.is_resync_start_sent = None
                    self.is_qos_s_sweeped = None
                    self.last_sweep_time = None
                    self.last_download_time = None
                    self._segment_path = lambda: "unicast-qos-adjust-stats"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/standby/process/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Mld.Standby.Process.UnicastQosAdjustStats, ['queues', 'batches', 'add_to_batches', 'delete_to_batches', 'send_success', 'send_errors', 'send_comm_errors', 'send_partial_errors', 'received_resync_requests', 'sent_resync_bulks', 'is_resync_received', 'is_resync_required', 'is_resync_start_sent', 'is_qos_s_sweeped', 'last_sweep_time', 'last_download_time'], name, value)

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Mld.Standby.Process.UnicastQosAdjustStats']['meta_info']


            class BviStatistics(_Entity_):
                """
                IGMP BVI Stats
                
                .. attribute:: receive_buffers
                
                	Number of AIPC buffers received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: release_buffers
                
                	Number of AIPC buffers released
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: send_blocks
                
                	Number of AIPC buffers send blocked
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: release_fail_buffers
                
                	Number of AIPC buffers release failed
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: null_buffer_handles
                
                	Number of AIPC NULL buffer handles
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: rx_ipc_open_notif
                
                	Number of AIPC open notifications received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: rx_ipc_close_notif
                
                	Number of AIPC close notifications received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: rx_ipc_error_notif
                
                	Number of AIPC error notifications received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: rx_ipc_lwm_notif
                
                	Number of AIPC LWM notifications received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: rx_ipc_input_wait_notif
                
                	Number of AIPC input waiting notifications received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: rx_ipc_send_status_notif
                
                	Number of AIPC send status notifications received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: rx_ipc_publish_notif
                
                	Number of AIPC publish notifications received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: rx_ipc_q_full_notif
                
                	Number of AIPC queue full notifications received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: rx_ipc_output_notif
                
                	Number of AIPC output notifications received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: rx_ipc_connect_notif
                
                	Number of AIPC connect notifications received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: rx_igmp_packet_success
                
                	Number of IGMP protocol messages received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: rx_add_mrouter_msg
                
                	Number of IGMP Mrouter Add messages received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: rx_delete_mrouter_msg
                
                	Number of IGMP Mrouter Delete messages received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: rx_sweep_mrouter_msg
                
                	Number of IGMP Mrouter Sweep messages received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: tx_add_mrouter_msg
                
                	Number of IGMP Mrouter Add messages transmitted
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: tx_delete_mrouter_msg
                
                	Number of IGMP Mrouter Delete messages transmitted
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: tx_sweep_mrouter_msg
                
                	Number of IGMP Mrouter Sweep messages received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: rx_unknown_mrouter_msg
                
                	Number of IGMP Mrouter Unknown messages received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: tx_unknown_mrouter_msg
                
                	Number of IGMP Mrouter Unknown messages transmitted
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: tx_buffer_errors
                
                	Number of AIPC transmission errors
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: tx_buffers
                
                	Number of AIPC buffers transmited
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: tx_protocol_buffers
                
                	Number of IGMP protocol buffers transmitted
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: tx_mrouter_buffers
                
                	Number of IGMP Mrouter buffers transmitted
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: tx_unknown_buffers
                
                	Number of IGMP Unknown buffers transmited
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: wtx_msg_recvd
                
                	Number of WTX messages received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: wtx_msg_sent
                
                	Number of WTX messages sent
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: wtx_msg_proto_sent
                
                	Number of WTX messages sent to Protocol
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: wtx_msg_drop_dc
                
                	Number of WTX messages dropped due to disconnect
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: wtx_msg_drop_nomem
                
                	Number of WTX messages dropped to memory
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: wtx_msg_freed
                
                	Number of WTX messages freed
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Mld.Standby.Process.BviStatistics, self).__init__()

                    self.yang_name = "bvi-statistics"
                    self.yang_parent_name = "process"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('receive_buffers', (YLeaf(YType.uint32, 'receive-buffers'), ['int'])),
                        ('release_buffers', (YLeaf(YType.uint32, 'release-buffers'), ['int'])),
                        ('send_blocks', (YLeaf(YType.uint32, 'send-blocks'), ['int'])),
                        ('release_fail_buffers', (YLeaf(YType.uint32, 'release-fail-buffers'), ['int'])),
                        ('null_buffer_handles', (YLeaf(YType.uint32, 'null-buffer-handles'), ['int'])),
                        ('rx_ipc_open_notif', (YLeaf(YType.uint32, 'rx-ipc-open-notif'), ['int'])),
                        ('rx_ipc_close_notif', (YLeaf(YType.uint32, 'rx-ipc-close-notif'), ['int'])),
                        ('rx_ipc_error_notif', (YLeaf(YType.uint32, 'rx-ipc-error-notif'), ['int'])),
                        ('rx_ipc_lwm_notif', (YLeaf(YType.uint32, 'rx-ipc-lwm-notif'), ['int'])),
                        ('rx_ipc_input_wait_notif', (YLeaf(YType.uint32, 'rx-ipc-input-wait-notif'), ['int'])),
                        ('rx_ipc_send_status_notif', (YLeaf(YType.uint32, 'rx-ipc-send-status-notif'), ['int'])),
                        ('rx_ipc_publish_notif', (YLeaf(YType.uint32, 'rx-ipc-publish-notif'), ['int'])),
                        ('rx_ipc_q_full_notif', (YLeaf(YType.uint32, 'rx-ipc-q-full-notif'), ['int'])),
                        ('rx_ipc_output_notif', (YLeaf(YType.uint32, 'rx-ipc-output-notif'), ['int'])),
                        ('rx_ipc_connect_notif', (YLeaf(YType.uint32, 'rx-ipc-connect-notif'), ['int'])),
                        ('rx_igmp_packet_success', (YLeaf(YType.uint32, 'rx-igmp-packet-success'), ['int'])),
                        ('rx_add_mrouter_msg', (YLeaf(YType.uint32, 'rx-add-mrouter-msg'), ['int'])),
                        ('rx_delete_mrouter_msg', (YLeaf(YType.uint32, 'rx-delete-mrouter-msg'), ['int'])),
                        ('rx_sweep_mrouter_msg', (YLeaf(YType.uint32, 'rx-sweep-mrouter-msg'), ['int'])),
                        ('tx_add_mrouter_msg', (YLeaf(YType.uint32, 'tx-add-mrouter-msg'), ['int'])),
                        ('tx_delete_mrouter_msg', (YLeaf(YType.uint32, 'tx-delete-mrouter-msg'), ['int'])),
                        ('tx_sweep_mrouter_msg', (YLeaf(YType.uint32, 'tx-sweep-mrouter-msg'), ['int'])),
                        ('rx_unknown_mrouter_msg', (YLeaf(YType.uint32, 'rx-unknown-mrouter-msg'), ['int'])),
                        ('tx_unknown_mrouter_msg', (YLeaf(YType.uint32, 'tx-unknown-mrouter-msg'), ['int'])),
                        ('tx_buffer_errors', (YLeaf(YType.uint32, 'tx-buffer-errors'), ['int'])),
                        ('tx_buffers', (YLeaf(YType.uint32, 'tx-buffers'), ['int'])),
                        ('tx_protocol_buffers', (YLeaf(YType.uint32, 'tx-protocol-buffers'), ['int'])),
                        ('tx_mrouter_buffers', (YLeaf(YType.uint32, 'tx-mrouter-buffers'), ['int'])),
                        ('tx_unknown_buffers', (YLeaf(YType.uint32, 'tx-unknown-buffers'), ['int'])),
                        ('wtx_msg_recvd', (YLeaf(YType.uint32, 'wtx-msg-recvd'), ['int'])),
                        ('wtx_msg_sent', (YLeaf(YType.uint32, 'wtx-msg-sent'), ['int'])),
                        ('wtx_msg_proto_sent', (YLeaf(YType.uint32, 'wtx-msg-proto-sent'), ['int'])),
                        ('wtx_msg_drop_dc', (YLeaf(YType.uint32, 'wtx-msg-drop-dc'), ['int'])),
                        ('wtx_msg_drop_nomem', (YLeaf(YType.uint32, 'wtx-msg-drop-nomem'), ['int'])),
                        ('wtx_msg_freed', (YLeaf(YType.uint32, 'wtx-msg-freed'), ['int'])),
                    ])
                    self.receive_buffers = None
                    self.release_buffers = None
                    self.send_blocks = None
                    self.release_fail_buffers = None
                    self.null_buffer_handles = None
                    self.rx_ipc_open_notif = None
                    self.rx_ipc_close_notif = None
                    self.rx_ipc_error_notif = None
                    self.rx_ipc_lwm_notif = None
                    self.rx_ipc_input_wait_notif = None
                    self.rx_ipc_send_status_notif = None
                    self.rx_ipc_publish_notif = None
                    self.rx_ipc_q_full_notif = None
                    self.rx_ipc_output_notif = None
                    self.rx_ipc_connect_notif = None
                    self.rx_igmp_packet_success = None
                    self.rx_add_mrouter_msg = None
                    self.rx_delete_mrouter_msg = None
                    self.rx_sweep_mrouter_msg = None
                    self.tx_add_mrouter_msg = None
                    self.tx_delete_mrouter_msg = None
                    self.tx_sweep_mrouter_msg = None
                    self.rx_unknown_mrouter_msg = None
                    self.tx_unknown_mrouter_msg = None
                    self.tx_buffer_errors = None
                    self.tx_buffers = None
                    self.tx_protocol_buffers = None
                    self.tx_mrouter_buffers = None
                    self.tx_unknown_buffers = None
                    self.wtx_msg_recvd = None
                    self.wtx_msg_sent = None
                    self.wtx_msg_proto_sent = None
                    self.wtx_msg_drop_dc = None
                    self.wtx_msg_drop_nomem = None
                    self.wtx_msg_freed = None
                    self._segment_path = lambda: "bvi-statistics"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/standby/process/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Mld.Standby.Process.BviStatistics, ['receive_buffers', 'release_buffers', 'send_blocks', 'release_fail_buffers', 'null_buffer_handles', 'rx_ipc_open_notif', 'rx_ipc_close_notif', 'rx_ipc_error_notif', 'rx_ipc_lwm_notif', 'rx_ipc_input_wait_notif', 'rx_ipc_send_status_notif', 'rx_ipc_publish_notif', 'rx_ipc_q_full_notif', 'rx_ipc_output_notif', 'rx_ipc_connect_notif', 'rx_igmp_packet_success', 'rx_add_mrouter_msg', 'rx_delete_mrouter_msg', 'rx_sweep_mrouter_msg', 'tx_add_mrouter_msg', 'tx_delete_mrouter_msg', 'tx_sweep_mrouter_msg', 'rx_unknown_mrouter_msg', 'tx_unknown_mrouter_msg', 'tx_buffer_errors', 'tx_buffers', 'tx_protocol_buffers', 'tx_mrouter_buffers', 'tx_unknown_buffers', 'wtx_msg_recvd', 'wtx_msg_sent', 'wtx_msg_proto_sent', 'wtx_msg_drop_dc', 'wtx_msg_drop_nomem', 'wtx_msg_freed'], name, value)

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Mld.Standby.Process.BviStatistics']['meta_info']


            class Nsf(_Entity_):
                """
                NSF Information
                
                .. attribute:: is_multicast_nsf_active
                
                	Is Multicast NSF active
                	**type**\: bool
                
                	**config**\: False
                
                .. attribute:: multicast_nsf_timeout
                
                	Multicast NSF timeout in secs
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                	**units**\: second
                
                .. attribute:: multicast_nsf_time_left
                
                	Multicast NSF time remaining in secs
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                	**units**\: second
                
                .. attribute:: respawn_count
                
                	Respawn Count
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: last_nsf_on
                
                	Last NSF time ON
                	**type**\: int
                
                	**range:** \-9223372036854775808..9223372036854775807
                
                	**config**\: False
                
                .. attribute:: last_nsf_off
                
                	Last NSF time off
                	**type**\: int
                
                	**range:** \-9223372036854775808..9223372036854775807
                
                	**config**\: False
                
                .. attribute:: last_nsf_on_min
                
                	Last NSF time ON in Seconds
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                	**config**\: False
                
                	**units**\: second
                
                .. attribute:: last_nsf_off_min
                
                	Last NSF time OFF in Seconds
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                	**config**\: False
                
                	**units**\: second
                
                .. attribute:: last_icd_notif_recv
                
                	Last ICD Notif Recv
                	**type**\: int
                
                	**range:** \-9223372036854775808..9223372036854775807
                
                	**config**\: False
                
                .. attribute:: last_icd_notif_recv_min
                
                	Last ICD Notif Recv in Seconds
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                	**config**\: False
                
                	**units**\: second
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Mld.Standby.Process.Nsf, self).__init__()

                    self.yang_name = "nsf"
                    self.yang_parent_name = "process"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('is_multicast_nsf_active', (YLeaf(YType.boolean, 'is-multicast-nsf-active'), ['bool'])),
                        ('multicast_nsf_timeout', (YLeaf(YType.uint32, 'multicast-nsf-timeout'), ['int'])),
                        ('multicast_nsf_time_left', (YLeaf(YType.uint32, 'multicast-nsf-time-left'), ['int'])),
                        ('respawn_count', (YLeaf(YType.uint32, 'respawn-count'), ['int'])),
                        ('last_nsf_on', (YLeaf(YType.int64, 'last-nsf-on'), ['int'])),
                        ('last_nsf_off', (YLeaf(YType.int64, 'last-nsf-off'), ['int'])),
                        ('last_nsf_on_min', (YLeaf(YType.int32, 'last-nsf-on-min'), ['int'])),
                        ('last_nsf_off_min', (YLeaf(YType.int32, 'last-nsf-off-min'), ['int'])),
                        ('last_icd_notif_recv', (YLeaf(YType.int64, 'last-icd-notif-recv'), ['int'])),
                        ('last_icd_notif_recv_min', (YLeaf(YType.int32, 'last-icd-notif-recv-min'), ['int'])),
                    ])
                    self.is_multicast_nsf_active = None
                    self.multicast_nsf_timeout = None
                    self.multicast_nsf_time_left = None
                    self.respawn_count = None
                    self.last_nsf_on = None
                    self.last_nsf_off = None
                    self.last_nsf_on_min = None
                    self.last_nsf_off_min = None
                    self.last_icd_notif_recv = None
                    self.last_icd_notif_recv_min = None
                    self._segment_path = lambda: "nsf"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/standby/process/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Mld.Standby.Process.Nsf, ['is_multicast_nsf_active', 'multicast_nsf_timeout', 'multicast_nsf_time_left', 'respawn_count', 'last_nsf_on', 'last_nsf_off', 'last_nsf_on_min', 'last_nsf_off_min', 'last_icd_notif_recv', 'last_icd_notif_recv_min'], name, value)

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Mld.Standby.Process.Nsf']['meta_info']

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                return meta._meta_table['Mld.Standby.Process']['meta_info']


        class DefaultContext(_Entity_):
            """
            Default Context
            
            .. attribute:: summary
            
            	IGMP Summary Information
            	**type**\:  :py:class:`Summary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.Summary>`
            
            	**config**\: False
            
            .. attribute:: interface_state_ons
            
            	IGMP Interface state on
            	**type**\:  :py:class:`InterfaceStateOns <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.InterfaceStateOns>`
            
            	**config**\: False
            
            .. attribute:: detail_groups
            
            	IGMP Detail Group Database
            	**type**\:  :py:class:`DetailGroups <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.DetailGroups>`
            
            	**config**\: False
            
            .. attribute:: non_active_groups
            
            	IGMP Non\-Active Groups Information
            	**type**\:  :py:class:`NonActiveGroups <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.NonActiveGroups>`
            
            	**config**\: False
            
            .. attribute:: ssm_maps
            
            	SSM Map Table
            	**type**\:  :py:class:`SsmMaps <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.SsmMaps>`
            
            	**config**\: False
            
            .. attribute:: explicit_groups
            
            	IGMP Explicit Group Database
            	**type**\:  :py:class:`ExplicitGroups <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.ExplicitGroups>`
            
            	**config**\: False
            
            .. attribute:: interface_table
            
            	IGMP Interface specific Table
            	**type**\:  :py:class:`InterfaceTable <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.InterfaceTable>`
            
            	**config**\: False
            
            .. attribute:: interface_unicast_qos_adjusts
            
            	IGMP Interface Unicast\-Qos\-Adjust
            	**type**\:  :py:class:`InterfaceUnicastQosAdjusts <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.InterfaceUnicastQosAdjusts>`
            
            	**config**\: False
            
            .. attribute:: ranges
            
            	Range table
            	**type**\:  :py:class:`Ranges <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.Ranges>`
            
            	**config**\: False
            
            .. attribute:: ifrs_interfaces
            
            	IGMP Interface specific
            	**type**\:  :py:class:`IfrsInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.IfrsInterfaces>`
            
            	**config**\: False
            
            .. attribute:: traffic_counters
            
            	IGMP Message Traffic Counters
            	**type**\:  :py:class:`TrafficCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.TrafficCounters>`
            
            	**config**\: False
            
            .. attribute:: groups
            
            	IGMP Group Database Table
            	**type**\:  :py:class:`Groups <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.Groups>`
            
            	**config**\: False
            
            .. attribute:: group_summary
            
            	IGMP Groups Summary
            	**type**\:  :py:class:`GroupSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.GroupSummary>`
            
            	**config**\: False
            
            .. attribute:: ifrs_interface_summary
            
            	IGMP IFRS Interface summary
            	**type**\:  :py:class:`IfrsInterfaceSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.IfrsInterfaceSummary>`
            
            	**config**\: False
            
            .. attribute:: global_interface_table
            
            	IGMP Global Interface 
            	**type**\:  :py:class:`GlobalInterfaceTable <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.GlobalInterfaceTable>`
            
            	**config**\: False
            
            .. attribute:: ssm_map_details
            
            	SSM Map Detail
            	**type**\:  :py:class:`SsmMapDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.SsmMapDetails>`
            
            	**config**\: False
            
            .. attribute:: interface_state_offs
            
            	IGMP Interface state off
            	**type**\:  :py:class:`InterfaceStateOffs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.InterfaceStateOffs>`
            
            	**config**\: False
            
            

            """

            _prefix = 'ipv4-igmp-oper'
            _revision = '2018-01-31'

            def __init__(self):
                if sys.version_info > (3,):
                    super().__init__()
                else:
                    super(Mld.Standby.DefaultContext, self).__init__()

                self.yang_name = "default-context"
                self.yang_parent_name = "standby"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("summary", ("summary", Mld.Standby.DefaultContext.Summary)), ("interface-state-ons", ("interface_state_ons", Mld.Standby.DefaultContext.InterfaceStateOns)), ("detail-groups", ("detail_groups", Mld.Standby.DefaultContext.DetailGroups)), ("non-active-groups", ("non_active_groups", Mld.Standby.DefaultContext.NonActiveGroups)), ("ssm-maps", ("ssm_maps", Mld.Standby.DefaultContext.SsmMaps)), ("explicit-groups", ("explicit_groups", Mld.Standby.DefaultContext.ExplicitGroups)), ("interface-table", ("interface_table", Mld.Standby.DefaultContext.InterfaceTable)), ("interface-unicast-qos-adjusts", ("interface_unicast_qos_adjusts", Mld.Standby.DefaultContext.InterfaceUnicastQosAdjusts)), ("ranges", ("ranges", Mld.Standby.DefaultContext.Ranges)), ("ifrs-interfaces", ("ifrs_interfaces", Mld.Standby.DefaultContext.IfrsInterfaces)), ("traffic-counters", ("traffic_counters", Mld.Standby.DefaultContext.TrafficCounters)), ("groups", ("groups", Mld.Standby.DefaultContext.Groups)), ("group-summary", ("group_summary", Mld.Standby.DefaultContext.GroupSummary)), ("ifrs-interface-summary", ("ifrs_interface_summary", Mld.Standby.DefaultContext.IfrsInterfaceSummary)), ("global-interface-table", ("global_interface_table", Mld.Standby.DefaultContext.GlobalInterfaceTable)), ("ssm-map-details", ("ssm_map_details", Mld.Standby.DefaultContext.SsmMapDetails)), ("interface-state-offs", ("interface_state_offs", Mld.Standby.DefaultContext.InterfaceStateOffs))])
                self._leafs = OrderedDict()

                self.summary = Mld.Standby.DefaultContext.Summary()
                self.summary.parent = self
                self._children_name_map["summary"] = "summary"

                self.interface_state_ons = Mld.Standby.DefaultContext.InterfaceStateOns()
                self.interface_state_ons.parent = self
                self._children_name_map["interface_state_ons"] = "interface-state-ons"

                self.detail_groups = Mld.Standby.DefaultContext.DetailGroups()
                self.detail_groups.parent = self
                self._children_name_map["detail_groups"] = "detail-groups"

                self.non_active_groups = Mld.Standby.DefaultContext.NonActiveGroups()
                self.non_active_groups.parent = self
                self._children_name_map["non_active_groups"] = "non-active-groups"

                self.ssm_maps = Mld.Standby.DefaultContext.SsmMaps()
                self.ssm_maps.parent = self
                self._children_name_map["ssm_maps"] = "ssm-maps"

                self.explicit_groups = Mld.Standby.DefaultContext.ExplicitGroups()
                self.explicit_groups.parent = self
                self._children_name_map["explicit_groups"] = "explicit-groups"

                self.interface_table = Mld.Standby.DefaultContext.InterfaceTable()
                self.interface_table.parent = self
                self._children_name_map["interface_table"] = "interface-table"

                self.interface_unicast_qos_adjusts = Mld.Standby.DefaultContext.InterfaceUnicastQosAdjusts()
                self.interface_unicast_qos_adjusts.parent = self
                self._children_name_map["interface_unicast_qos_adjusts"] = "interface-unicast-qos-adjusts"

                self.ranges = Mld.Standby.DefaultContext.Ranges()
                self.ranges.parent = self
                self._children_name_map["ranges"] = "ranges"

                self.ifrs_interfaces = Mld.Standby.DefaultContext.IfrsInterfaces()
                self.ifrs_interfaces.parent = self
                self._children_name_map["ifrs_interfaces"] = "ifrs-interfaces"

                self.traffic_counters = Mld.Standby.DefaultContext.TrafficCounters()
                self.traffic_counters.parent = self
                self._children_name_map["traffic_counters"] = "traffic-counters"

                self.groups = Mld.Standby.DefaultContext.Groups()
                self.groups.parent = self
                self._children_name_map["groups"] = "groups"

                self.group_summary = Mld.Standby.DefaultContext.GroupSummary()
                self.group_summary.parent = self
                self._children_name_map["group_summary"] = "group-summary"

                self.ifrs_interface_summary = Mld.Standby.DefaultContext.IfrsInterfaceSummary()
                self.ifrs_interface_summary.parent = self
                self._children_name_map["ifrs_interface_summary"] = "ifrs-interface-summary"

                self.global_interface_table = Mld.Standby.DefaultContext.GlobalInterfaceTable()
                self.global_interface_table.parent = self
                self._children_name_map["global_interface_table"] = "global-interface-table"

                self.ssm_map_details = Mld.Standby.DefaultContext.SsmMapDetails()
                self.ssm_map_details.parent = self
                self._children_name_map["ssm_map_details"] = "ssm-map-details"

                self.interface_state_offs = Mld.Standby.DefaultContext.InterfaceStateOffs()
                self.interface_state_offs.parent = self
                self._children_name_map["interface_state_offs"] = "interface-state-offs"
                self._segment_path = lambda: "default-context"
                self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/standby/%s" % self._segment_path()
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(Mld.Standby.DefaultContext, [], name, value)


            class Summary(_Entity_):
                """
                IGMP Summary Information
                
                .. attribute:: robustness
                
                	Robustness variable
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: group_limit
                
                	Maximum groups accepted
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: group_count
                
                	Current groups accepted
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: is_disabled
                
                	Is maximum enforcement disabled
                	**type**\: bool
                
                	**config**\: False
                
                .. attribute:: supported_interfaces
                
                	No. of supported interfaces
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: unsupported_interfaces
                
                	No. of unsupported interfaces
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: enabled_interface_count
                
                	No. of enabled interfaces
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: disabled_interface_count
                
                	No. of disabled interfaces
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: tunnel_mte_config_count
                
                	No. of static group commands
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: node_low_memory
                
                	Is node in low memory condition
                	**type**\: bool
                
                	**config**\: False
                
                .. attribute:: interface
                
                	Maximum and current groups accepted for each interface
                	**type**\: list of  		 :py:class:`Interface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.Summary.Interface>`
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Mld.Standby.DefaultContext.Summary, self).__init__()

                    self.yang_name = "summary"
                    self.yang_parent_name = "default-context"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("interface", ("interface", Mld.Standby.DefaultContext.Summary.Interface))])
                    self._leafs = OrderedDict([
                        ('robustness', (YLeaf(YType.uint32, 'robustness'), ['int'])),
                        ('group_limit', (YLeaf(YType.uint32, 'group-limit'), ['int'])),
                        ('group_count', (YLeaf(YType.uint32, 'group-count'), ['int'])),
                        ('is_disabled', (YLeaf(YType.boolean, 'is-disabled'), ['bool'])),
                        ('supported_interfaces', (YLeaf(YType.uint32, 'supported-interfaces'), ['int'])),
                        ('unsupported_interfaces', (YLeaf(YType.uint32, 'unsupported-interfaces'), ['int'])),
                        ('enabled_interface_count', (YLeaf(YType.uint32, 'enabled-interface-count'), ['int'])),
                        ('disabled_interface_count', (YLeaf(YType.uint32, 'disabled-interface-count'), ['int'])),
                        ('tunnel_mte_config_count', (YLeaf(YType.uint32, 'tunnel-mte-config-count'), ['int'])),
                        ('node_low_memory', (YLeaf(YType.boolean, 'node-low-memory'), ['bool'])),
                    ])
                    self.robustness = None
                    self.group_limit = None
                    self.group_count = None
                    self.is_disabled = None
                    self.supported_interfaces = None
                    self.unsupported_interfaces = None
                    self.enabled_interface_count = None
                    self.disabled_interface_count = None
                    self.tunnel_mte_config_count = None
                    self.node_low_memory = None

                    self.interface = YList(self)
                    self._segment_path = lambda: "summary"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/standby/default-context/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Mld.Standby.DefaultContext.Summary, ['robustness', 'group_limit', 'group_count', 'is_disabled', 'supported_interfaces', 'unsupported_interfaces', 'enabled_interface_count', 'disabled_interface_count', 'tunnel_mte_config_count', 'node_low_memory'], name, value)


                class Interface(_Entity_):
                    """
                    Maximum and current groups accepted for each
                    interface
                    
                    .. attribute:: interface_name
                    
                    	Interface
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: group_limit
                    
                    	Maximum groups accepted per interface
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: group_count
                    
                    	Current groups accepted per interface
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: parent_ifhandle
                    
                    	Parent if handle
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: on_off
                    
                    	Enabled/Disabled
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: time_since_last_query_in_seconds
                    
                    	Time elapsed since last query
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: time_since_last_report_in_seconds
                    
                    	Time elapsed since last report
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: router_uptime_in_seconds
                    
                    	Time elapsed since router enabled event
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Mld.Standby.DefaultContext.Summary.Interface, self).__init__()

                        self.yang_name = "interface"
                        self.yang_parent_name = "summary"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                            ('group_limit', (YLeaf(YType.uint32, 'group-limit'), ['int'])),
                            ('group_count', (YLeaf(YType.uint32, 'group-count'), ['int'])),
                            ('parent_ifhandle', (YLeaf(YType.str, 'parent-ifhandle'), ['str'])),
                            ('on_off', (YLeaf(YType.boolean, 'on-off'), ['bool'])),
                            ('time_since_last_query_in_seconds', (YLeaf(YType.uint32, 'time-since-last-query-in-seconds'), ['int'])),
                            ('time_since_last_report_in_seconds', (YLeaf(YType.uint32, 'time-since-last-report-in-seconds'), ['int'])),
                            ('router_uptime_in_seconds', (YLeaf(YType.uint32, 'router-uptime-in-seconds'), ['int'])),
                        ])
                        self.interface_name = None
                        self.group_limit = None
                        self.group_count = None
                        self.parent_ifhandle = None
                        self.on_off = None
                        self.time_since_last_query_in_seconds = None
                        self.time_since_last_report_in_seconds = None
                        self.router_uptime_in_seconds = None
                        self._segment_path = lambda: "interface"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/standby/default-context/summary/%s" % self._segment_path()
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Mld.Standby.DefaultContext.Summary.Interface, ['interface_name', 'group_limit', 'group_count', 'parent_ifhandle', 'on_off', 'time_since_last_query_in_seconds', 'time_since_last_report_in_seconds', 'router_uptime_in_seconds'], name, value)

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Mld.Standby.DefaultContext.Summary.Interface']['meta_info']

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Mld.Standby.DefaultContext.Summary']['meta_info']


            class InterfaceStateOns(_Entity_):
                """
                IGMP Interface state on
                
                .. attribute:: interface_state_on
                
                	IGMP Interface
                	**type**\: list of  		 :py:class:`InterfaceStateOn <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.InterfaceStateOns.InterfaceStateOn>`
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Mld.Standby.DefaultContext.InterfaceStateOns, self).__init__()

                    self.yang_name = "interface-state-ons"
                    self.yang_parent_name = "default-context"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("interface-state-on", ("interface_state_on", Mld.Standby.DefaultContext.InterfaceStateOns.InterfaceStateOn))])
                    self._leafs = OrderedDict()

                    self.interface_state_on = YList(self)
                    self._segment_path = lambda: "interface-state-ons"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/standby/default-context/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Mld.Standby.DefaultContext.InterfaceStateOns, [], name, value)


                class InterfaceStateOn(_Entity_):
                    """
                    IGMP Interface
                    
                    .. attribute:: interface_name  (key)
                    
                    	Interface Name
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: address
                    
                    	IP address
                    	**type**\:  :py:class:`Address <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.InterfaceStateOns.InterfaceStateOn.Address>`
                    
                    	**config**\: False
                    
                    .. attribute:: querier_address
                    
                    	Address of the Querier
                    	**type**\:  :py:class:`QuerierAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.InterfaceStateOns.InterfaceStateOn.QuerierAddress>`
                    
                    	**config**\: False
                    
                    .. attribute:: subscriber_address
                    
                    	Address of subscriber
                    	**type**\:  :py:class:`SubscriberAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.InterfaceStateOns.InterfaceStateOn.SubscriberAddress>`
                    
                    	**config**\: False
                    
                    .. attribute:: interface_name_xr
                    
                    	Interface
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: state
                    
                    	Interface state
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: prefix_length
                    
                    	Prefix length
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_interface_up
                    
                    	Is interface up
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_ip_enabled
                    
                    	Is IP enabled
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_router_enabled
                    
                    	Is Router functionality enabled
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: igmp_version
                    
                    	IGMP Router version
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    	**config**\: False
                    
                    .. attribute:: host_version
                    
                    	IGMP Host version
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    	**config**\: False
                    
                    .. attribute:: query_interval
                    
                    	Query Interval value in seconds
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    	**units**\: second
                    
                    .. attribute:: query_timeout
                    
                    	Query Timeout value
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    .. attribute:: query_maximum_response_time
                    
                    	Max Response Timeout value
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    .. attribute:: last_member_query_interval
                    
                    	Last Member Query Interval
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    .. attribute:: group_joins
                    
                    	No. of group joins
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: group_leaves
                    
                    	No. of group leaves
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_querier
                    
                    	Are we querier
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: total_active_groups
                    
                    	Actual number of groups on interface
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: robustness
                    
                    	Robustness Variable value
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: proxy_interface
                    
                    	Proxy interface index
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: querier_uptime
                    
                    	Time since the last querier took over
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    .. attribute:: las_ll_registration_count
                    
                    	LAS reg count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_get_address_count
                    
                    	LAS get addr count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_update_count
                    
                    	LAS Update count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_ll_remove_update_count
                    
                    	LAS LL remove update count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_ll_add_update_count
                    
                    	LAS LL add update count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_null_update_count
                    
                    	LAS Null update count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_unregistration_count
                    
                    	LAS unreg count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_las_request
                    
                    	LAS req
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_las_registered
                    
                    	LAS registered
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: vrf_id
                    
                    	VRF id
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: mte_vrf_id
                    
                    	MTE VRF id
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: location
                    
                    	Location
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: mtu
                    
                    	MTU
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: vrf_state
                    
                    	Vrf State
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_configurationverify
                    
                    	CFG verify
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: configurationvrf_set
                    
                    	CFG vrf set
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: configurationvrf_error
                    
                    	CFG vrf error
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: configuration_mcast_vrf_set
                    
                    	Is mcast set
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: configuration_mcast_vrf_error
                    
                    	Is mcast error
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_im_state_registered
                    
                    	Im state registered
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_subscriber
                    
                    	Subscriber interface
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: subscriber_mode
                    
                    	Subscriber mode
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_identity_present
                    
                    	Subscriber ID or Address available from AAA
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: subscriber_id
                    
                    	ID string of subscriber
                    	**type**\: str
                    
                    	**length:** 0..257
                    
                    	**config**\: False
                    
                    .. attribute:: parent_ifhandle
                    
                    	Parent If Handle
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: time_since_last_query_in_seconds
                    
                    	Time elapsed since last query
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: time_since_last_report_in_seconds
                    
                    	Time elapsed since last report
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: router_uptime_in_seconds
                    
                    	Uptime since router enabled event
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: mte_tuple_count
                    
                    	MTE Tuple count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Mld.Standby.DefaultContext.InterfaceStateOns.InterfaceStateOn, self).__init__()

                        self.yang_name = "interface-state-on"
                        self.yang_parent_name = "interface-state-ons"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['interface_name']
                        self._child_classes = OrderedDict([("address", ("address", Mld.Standby.DefaultContext.InterfaceStateOns.InterfaceStateOn.Address)), ("querier-address", ("querier_address", Mld.Standby.DefaultContext.InterfaceStateOns.InterfaceStateOn.QuerierAddress)), ("subscriber-address", ("subscriber_address", Mld.Standby.DefaultContext.InterfaceStateOns.InterfaceStateOn.SubscriberAddress))])
                        self._leafs = OrderedDict([
                            ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                            ('interface_name_xr', (YLeaf(YType.str, 'interface-name-xr'), ['str'])),
                            ('state', (YLeaf(YType.uint32, 'state'), ['int'])),
                            ('prefix_length', (YLeaf(YType.uint32, 'prefix-length'), ['int'])),
                            ('is_interface_up', (YLeaf(YType.boolean, 'is-interface-up'), ['bool'])),
                            ('is_ip_enabled', (YLeaf(YType.boolean, 'is-ip-enabled'), ['bool'])),
                            ('is_router_enabled', (YLeaf(YType.boolean, 'is-router-enabled'), ['bool'])),
                            ('igmp_version', (YLeaf(YType.uint8, 'igmp-version'), ['int'])),
                            ('host_version', (YLeaf(YType.uint8, 'host-version'), ['int'])),
                            ('query_interval', (YLeaf(YType.uint16, 'query-interval'), ['int'])),
                            ('query_timeout', (YLeaf(YType.uint16, 'query-timeout'), ['int'])),
                            ('query_maximum_response_time', (YLeaf(YType.uint16, 'query-maximum-response-time'), ['int'])),
                            ('last_member_query_interval', (YLeaf(YType.uint16, 'last-member-query-interval'), ['int'])),
                            ('group_joins', (YLeaf(YType.uint32, 'group-joins'), ['int'])),
                            ('group_leaves', (YLeaf(YType.uint32, 'group-leaves'), ['int'])),
                            ('is_querier', (YLeaf(YType.boolean, 'is-querier'), ['bool'])),
                            ('total_active_groups', (YLeaf(YType.uint32, 'total-active-groups'), ['int'])),
                            ('robustness', (YLeaf(YType.uint32, 'robustness'), ['int'])),
                            ('proxy_interface', (YLeaf(YType.str, 'proxy-interface'), ['str'])),
                            ('querier_uptime', (YLeaf(YType.uint16, 'querier-uptime'), ['int'])),
                            ('las_ll_registration_count', (YLeaf(YType.uint32, 'las-ll-registration-count'), ['int'])),
                            ('las_get_address_count', (YLeaf(YType.uint32, 'las-get-address-count'), ['int'])),
                            ('las_update_count', (YLeaf(YType.uint32, 'las-update-count'), ['int'])),
                            ('las_ll_remove_update_count', (YLeaf(YType.uint32, 'las-ll-remove-update-count'), ['int'])),
                            ('las_ll_add_update_count', (YLeaf(YType.uint32, 'las-ll-add-update-count'), ['int'])),
                            ('las_null_update_count', (YLeaf(YType.uint32, 'las-null-update-count'), ['int'])),
                            ('las_unregistration_count', (YLeaf(YType.uint32, 'las-unregistration-count'), ['int'])),
                            ('is_las_request', (YLeaf(YType.boolean, 'is-las-request'), ['bool'])),
                            ('is_las_registered', (YLeaf(YType.boolean, 'is-las-registered'), ['bool'])),
                            ('vrf_id', (YLeaf(YType.uint32, 'vrf-id'), ['int'])),
                            ('mte_vrf_id', (YLeaf(YType.uint32, 'mte-vrf-id'), ['int'])),
                            ('location', (YLeaf(YType.uint32, 'location'), ['int'])),
                            ('mtu', (YLeaf(YType.uint32, 'mtu'), ['int'])),
                            ('vrf_state', (YLeaf(YType.uint32, 'vrf-state'), ['int'])),
                            ('is_configurationverify', (YLeaf(YType.boolean, 'is-configurationverify'), ['bool'])),
                            ('configurationvrf_set', (YLeaf(YType.boolean, 'configurationvrf-set'), ['bool'])),
                            ('configurationvrf_error', (YLeaf(YType.boolean, 'configurationvrf-error'), ['bool'])),
                            ('configuration_mcast_vrf_set', (YLeaf(YType.boolean, 'configuration-mcast-vrf-set'), ['bool'])),
                            ('configuration_mcast_vrf_error', (YLeaf(YType.boolean, 'configuration-mcast-vrf-error'), ['bool'])),
                            ('is_im_state_registered', (YLeaf(YType.boolean, 'is-im-state-registered'), ['bool'])),
                            ('is_subscriber', (YLeaf(YType.boolean, 'is-subscriber'), ['bool'])),
                            ('subscriber_mode', (YLeaf(YType.uint32, 'subscriber-mode'), ['int'])),
                            ('is_identity_present', (YLeaf(YType.boolean, 'is-identity-present'), ['bool'])),
                            ('subscriber_id', (YLeaf(YType.str, 'subscriber-id'), ['str'])),
                            ('parent_ifhandle', (YLeaf(YType.str, 'parent-ifhandle'), ['str'])),
                            ('time_since_last_query_in_seconds', (YLeaf(YType.uint32, 'time-since-last-query-in-seconds'), ['int'])),
                            ('time_since_last_report_in_seconds', (YLeaf(YType.uint32, 'time-since-last-report-in-seconds'), ['int'])),
                            ('router_uptime_in_seconds', (YLeaf(YType.uint32, 'router-uptime-in-seconds'), ['int'])),
                            ('mte_tuple_count', (YLeaf(YType.uint32, 'mte-tuple-count'), ['int'])),
                        ])
                        self.interface_name = None
                        self.interface_name_xr = None
                        self.state = None
                        self.prefix_length = None
                        self.is_interface_up = None
                        self.is_ip_enabled = None
                        self.is_router_enabled = None
                        self.igmp_version = None
                        self.host_version = None
                        self.query_interval = None
                        self.query_timeout = None
                        self.query_maximum_response_time = None
                        self.last_member_query_interval = None
                        self.group_joins = None
                        self.group_leaves = None
                        self.is_querier = None
                        self.total_active_groups = None
                        self.robustness = None
                        self.proxy_interface = None
                        self.querier_uptime = None
                        self.las_ll_registration_count = None
                        self.las_get_address_count = None
                        self.las_update_count = None
                        self.las_ll_remove_update_count = None
                        self.las_ll_add_update_count = None
                        self.las_null_update_count = None
                        self.las_unregistration_count = None
                        self.is_las_request = None
                        self.is_las_registered = None
                        self.vrf_id = None
                        self.mte_vrf_id = None
                        self.location = None
                        self.mtu = None
                        self.vrf_state = None
                        self.is_configurationverify = None
                        self.configurationvrf_set = None
                        self.configurationvrf_error = None
                        self.configuration_mcast_vrf_set = None
                        self.configuration_mcast_vrf_error = None
                        self.is_im_state_registered = None
                        self.is_subscriber = None
                        self.subscriber_mode = None
                        self.is_identity_present = None
                        self.subscriber_id = None
                        self.parent_ifhandle = None
                        self.time_since_last_query_in_seconds = None
                        self.time_since_last_report_in_seconds = None
                        self.router_uptime_in_seconds = None
                        self.mte_tuple_count = None

                        self.address = Mld.Standby.DefaultContext.InterfaceStateOns.InterfaceStateOn.Address()
                        self.address.parent = self
                        self._children_name_map["address"] = "address"

                        self.querier_address = Mld.Standby.DefaultContext.InterfaceStateOns.InterfaceStateOn.QuerierAddress()
                        self.querier_address.parent = self
                        self._children_name_map["querier_address"] = "querier-address"

                        self.subscriber_address = Mld.Standby.DefaultContext.InterfaceStateOns.InterfaceStateOn.SubscriberAddress()
                        self.subscriber_address.parent = self
                        self._children_name_map["subscriber_address"] = "subscriber-address"
                        self._segment_path = lambda: "interface-state-on" + "[interface-name='" + str(self.interface_name) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/standby/default-context/interface-state-ons/%s" % self._segment_path()
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Mld.Standby.DefaultContext.InterfaceStateOns.InterfaceStateOn, ['interface_name', 'interface_name_xr', 'state', 'prefix_length', 'is_interface_up', 'is_ip_enabled', 'is_router_enabled', 'igmp_version', 'host_version', 'query_interval', 'query_timeout', 'query_maximum_response_time', 'last_member_query_interval', 'group_joins', 'group_leaves', 'is_querier', 'total_active_groups', 'robustness', 'proxy_interface', 'querier_uptime', 'las_ll_registration_count', 'las_get_address_count', 'las_update_count', 'las_ll_remove_update_count', 'las_ll_add_update_count', 'las_null_update_count', 'las_unregistration_count', 'is_las_request', 'is_las_registered', 'vrf_id', 'mte_vrf_id', 'location', 'mtu', 'vrf_state', 'is_configurationverify', 'configurationvrf_set', 'configurationvrf_error', 'configuration_mcast_vrf_set', 'configuration_mcast_vrf_error', 'is_im_state_registered', 'is_subscriber', 'subscriber_mode', 'is_identity_present', 'subscriber_id', 'parent_ifhandle', 'time_since_last_query_in_seconds', 'time_since_last_report_in_seconds', 'router_uptime_in_seconds', 'mte_tuple_count'], name, value)


                    class Address(_Entity_):
                        """
                        IP address
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Standby.DefaultContext.InterfaceStateOns.InterfaceStateOn.Address, self).__init__()

                            self.yang_name = "address"
                            self.yang_parent_name = "interface-state-on"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "address"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Standby.DefaultContext.InterfaceStateOns.InterfaceStateOn.Address, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Standby.DefaultContext.InterfaceStateOns.InterfaceStateOn.Address']['meta_info']


                    class QuerierAddress(_Entity_):
                        """
                        Address of the Querier
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Standby.DefaultContext.InterfaceStateOns.InterfaceStateOn.QuerierAddress, self).__init__()

                            self.yang_name = "querier-address"
                            self.yang_parent_name = "interface-state-on"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "querier-address"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Standby.DefaultContext.InterfaceStateOns.InterfaceStateOn.QuerierAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Standby.DefaultContext.InterfaceStateOns.InterfaceStateOn.QuerierAddress']['meta_info']


                    class SubscriberAddress(_Entity_):
                        """
                        Address of subscriber
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Standby.DefaultContext.InterfaceStateOns.InterfaceStateOn.SubscriberAddress, self).__init__()

                            self.yang_name = "subscriber-address"
                            self.yang_parent_name = "interface-state-on"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "subscriber-address"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Standby.DefaultContext.InterfaceStateOns.InterfaceStateOn.SubscriberAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Standby.DefaultContext.InterfaceStateOns.InterfaceStateOn.SubscriberAddress']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Mld.Standby.DefaultContext.InterfaceStateOns.InterfaceStateOn']['meta_info']

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Mld.Standby.DefaultContext.InterfaceStateOns']['meta_info']


            class DetailGroups(_Entity_):
                """
                IGMP Detail Group Database
                
                .. attribute:: detail_group
                
                	IGMP Detail Group Entry Information
                	**type**\: list of  		 :py:class:`DetailGroup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.DetailGroups.DetailGroup>`
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Mld.Standby.DefaultContext.DetailGroups, self).__init__()

                    self.yang_name = "detail-groups"
                    self.yang_parent_name = "default-context"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("detail-group", ("detail_group", Mld.Standby.DefaultContext.DetailGroups.DetailGroup))])
                    self._leafs = OrderedDict()

                    self.detail_group = YList(self)
                    self._segment_path = lambda: "detail-groups"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/standby/default-context/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Mld.Standby.DefaultContext.DetailGroups, [], name, value)


                class DetailGroup(_Entity_):
                    """
                    IGMP Detail Group Entry Information
                    
                    .. attribute:: group_address
                    
                    	Group Address
                    	**type**\: union of the below types:
                    
                    		**type**\: str
                    
                    			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    		**type**\: str
                    
                    			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    	**config**\: False
                    
                    .. attribute:: interface_name
                    
                    	Interface Name
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: source_address
                    
                    	Source/Host Address
                    	**type**\: union of the below types:
                    
                    		**type**\: str
                    
                    			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    		**type**\: str
                    
                    			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    	**config**\: False
                    
                    .. attribute:: group_info
                    
                    	Basic Group information
                    	**type**\:  :py:class:`GroupInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.DetailGroups.DetailGroup.GroupInfo>`
                    
                    	**config**\: False
                    
                    .. attribute:: is_router_exclude_mode
                    
                    	Group router filter mode
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_host_exclude_mode
                    
                    	Group host filter mode
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: source
                    
                    	List of sources
                    	**type**\: list of  		 :py:class:`Source <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.DetailGroups.DetailGroup.Source>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Mld.Standby.DefaultContext.DetailGroups.DetailGroup, self).__init__()

                        self.yang_name = "detail-group"
                        self.yang_parent_name = "detail-groups"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("group-info", ("group_info", Mld.Standby.DefaultContext.DetailGroups.DetailGroup.GroupInfo)), ("source", ("source", Mld.Standby.DefaultContext.DetailGroups.DetailGroup.Source))])
                        self._leafs = OrderedDict([
                            ('group_address', (YLeaf(YType.str, 'group-address'), ['str','str'])),
                            ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                            ('source_address', (YLeaf(YType.str, 'source-address'), ['str','str'])),
                            ('is_router_exclude_mode', (YLeaf(YType.boolean, 'is-router-exclude-mode'), ['bool'])),
                            ('is_host_exclude_mode', (YLeaf(YType.boolean, 'is-host-exclude-mode'), ['bool'])),
                        ])
                        self.group_address = None
                        self.interface_name = None
                        self.source_address = None
                        self.is_router_exclude_mode = None
                        self.is_host_exclude_mode = None

                        self.group_info = Mld.Standby.DefaultContext.DetailGroups.DetailGroup.GroupInfo()
                        self.group_info.parent = self
                        self._children_name_map["group_info"] = "group-info"

                        self.source = YList(self)
                        self._segment_path = lambda: "detail-group"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/standby/default-context/detail-groups/%s" % self._segment_path()
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Mld.Standby.DefaultContext.DetailGroups.DetailGroup, ['group_address', 'interface_name', 'source_address', 'is_router_exclude_mode', 'is_host_exclude_mode'], name, value)


                    class GroupInfo(_Entity_):
                        """
                        Basic Group information
                        
                        .. attribute:: group_address_xr
                        
                        	Group Address
                        	**type**\:  :py:class:`GroupAddressXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.DetailGroups.DetailGroup.GroupInfo.GroupAddressXr>`
                        
                        	**config**\: False
                        
                        .. attribute:: last_reporter
                        
                        	Last reporter address
                        	**type**\:  :py:class:`LastReporter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.DetailGroups.DetailGroup.GroupInfo.LastReporter>`
                        
                        	**config**\: False
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\:  :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.DetailGroups.DetailGroup.GroupInfo.SourceAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: interface_name_xr
                        
                        	Interface
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: uptime
                        
                        	Uptime in seconds
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        	**config**\: False
                        
                        	**units**\: second
                        
                        .. attribute:: expiration_time
                        
                        	Expiration time in seconds
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        	**config**\: False
                        
                        	**units**\: second
                        
                        .. attribute:: explicit_tracking_enabled
                        
                        	Is explicit tracking enabled
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_self_join
                        
                        	If local system is member of this group on this interface
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: row_status
                        
                        	interface on or off for the group
                        	**type**\: str
                        
                        	**length:** 0..16
                        
                        	**config**\: False
                        
                        .. attribute:: is_low_memory
                        
                        	Node is running low on memory
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: router_filter_mode
                        
                        	Filter mode
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        	**config**\: False
                        
                        .. attribute:: older_host_version1_timer
                        
                        	IGMP Hostversion1timer
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: older_host_version2_timer
                        
                        	IGMP Hostversion2timer
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_added
                        
                        	Joined
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_suppressed
                        
                        	Suppressed
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Standby.DefaultContext.DetailGroups.DetailGroup.GroupInfo, self).__init__()

                            self.yang_name = "group-info"
                            self.yang_parent_name = "detail-group"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("group-address-xr", ("group_address_xr", Mld.Standby.DefaultContext.DetailGroups.DetailGroup.GroupInfo.GroupAddressXr)), ("last-reporter", ("last_reporter", Mld.Standby.DefaultContext.DetailGroups.DetailGroup.GroupInfo.LastReporter)), ("source-address", ("source_address", Mld.Standby.DefaultContext.DetailGroups.DetailGroup.GroupInfo.SourceAddress))])
                            self._leafs = OrderedDict([
                                ('interface_name_xr', (YLeaf(YType.str, 'interface-name-xr'), ['str'])),
                                ('uptime', (YLeaf(YType.uint64, 'uptime'), ['int'])),
                                ('expiration_time', (YLeaf(YType.int32, 'expiration-time'), ['int'])),
                                ('explicit_tracking_enabled', (YLeaf(YType.boolean, 'explicit-tracking-enabled'), ['bool'])),
                                ('is_self_join', (YLeaf(YType.boolean, 'is-self-join'), ['bool'])),
                                ('row_status', (YLeaf(YType.str, 'row-status'), ['str'])),
                                ('is_low_memory', (YLeaf(YType.boolean, 'is-low-memory'), ['bool'])),
                                ('router_filter_mode', (YLeaf(YType.uint8, 'router-filter-mode'), ['int'])),
                                ('older_host_version1_timer', (YLeaf(YType.uint32, 'older-host-version1-timer'), ['int'])),
                                ('older_host_version2_timer', (YLeaf(YType.uint32, 'older-host-version2-timer'), ['int'])),
                                ('is_added', (YLeaf(YType.boolean, 'is-added'), ['bool'])),
                                ('is_suppressed', (YLeaf(YType.boolean, 'is-suppressed'), ['bool'])),
                            ])
                            self.interface_name_xr = None
                            self.uptime = None
                            self.expiration_time = None
                            self.explicit_tracking_enabled = None
                            self.is_self_join = None
                            self.row_status = None
                            self.is_low_memory = None
                            self.router_filter_mode = None
                            self.older_host_version1_timer = None
                            self.older_host_version2_timer = None
                            self.is_added = None
                            self.is_suppressed = None

                            self.group_address_xr = Mld.Standby.DefaultContext.DetailGroups.DetailGroup.GroupInfo.GroupAddressXr()
                            self.group_address_xr.parent = self
                            self._children_name_map["group_address_xr"] = "group-address-xr"

                            self.last_reporter = Mld.Standby.DefaultContext.DetailGroups.DetailGroup.GroupInfo.LastReporter()
                            self.last_reporter.parent = self
                            self._children_name_map["last_reporter"] = "last-reporter"

                            self.source_address = Mld.Standby.DefaultContext.DetailGroups.DetailGroup.GroupInfo.SourceAddress()
                            self.source_address.parent = self
                            self._children_name_map["source_address"] = "source-address"
                            self._segment_path = lambda: "group-info"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/standby/default-context/detail-groups/detail-group/%s" % self._segment_path()
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Standby.DefaultContext.DetailGroups.DetailGroup.GroupInfo, ['interface_name_xr', 'uptime', 'expiration_time', 'explicit_tracking_enabled', 'is_self_join', 'row_status', 'is_low_memory', 'router_filter_mode', 'older_host_version1_timer', 'older_host_version2_timer', 'is_added', 'is_suppressed'], name, value)


                        class GroupAddressXr(_Entity_):
                            """
                            Group Address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Standby.DefaultContext.DetailGroups.DetailGroup.GroupInfo.GroupAddressXr, self).__init__()

                                self.yang_name = "group-address-xr"
                                self.yang_parent_name = "group-info"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "group-address-xr"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/standby/default-context/detail-groups/detail-group/group-info/%s" % self._segment_path()
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Standby.DefaultContext.DetailGroups.DetailGroup.GroupInfo.GroupAddressXr, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Standby.DefaultContext.DetailGroups.DetailGroup.GroupInfo.GroupAddressXr']['meta_info']


                        class LastReporter(_Entity_):
                            """
                            Last reporter address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Standby.DefaultContext.DetailGroups.DetailGroup.GroupInfo.LastReporter, self).__init__()

                                self.yang_name = "last-reporter"
                                self.yang_parent_name = "group-info"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "last-reporter"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/standby/default-context/detail-groups/detail-group/group-info/%s" % self._segment_path()
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Standby.DefaultContext.DetailGroups.DetailGroup.GroupInfo.LastReporter, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Standby.DefaultContext.DetailGroups.DetailGroup.GroupInfo.LastReporter']['meta_info']


                        class SourceAddress(_Entity_):
                            """
                            Source Address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Standby.DefaultContext.DetailGroups.DetailGroup.GroupInfo.SourceAddress, self).__init__()

                                self.yang_name = "source-address"
                                self.yang_parent_name = "group-info"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "source-address"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/standby/default-context/detail-groups/detail-group/group-info/%s" % self._segment_path()
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Standby.DefaultContext.DetailGroups.DetailGroup.GroupInfo.SourceAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Standby.DefaultContext.DetailGroups.DetailGroup.GroupInfo.SourceAddress']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Standby.DefaultContext.DetailGroups.DetailGroup.GroupInfo']['meta_info']


                    class Source(_Entity_):
                        """
                        List of sources
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\:  :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.DetailGroups.DetailGroup.Source.SourceAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: uptime
                        
                        	Uptime in seconds
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        	**config**\: False
                        
                        	**units**\: second
                        
                        .. attribute:: expiration_time
                        
                        	Expiration time in seconds
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        	**config**\: False
                        
                        	**units**\: second
                        
                        .. attribute:: is_local
                        
                        	Is this a local source
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_remote
                        
                        	Is this a remote source
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_forward
                        
                        	Should we forward on this entry
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_we_report
                        
                        	Should we report the source
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: flags
                        
                        	Source flags
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        	**config**\: False
                        
                        .. attribute:: is_added
                        
                        	Joined
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Standby.DefaultContext.DetailGroups.DetailGroup.Source, self).__init__()

                            self.yang_name = "source"
                            self.yang_parent_name = "detail-group"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("source-address", ("source_address", Mld.Standby.DefaultContext.DetailGroups.DetailGroup.Source.SourceAddress))])
                            self._leafs = OrderedDict([
                                ('uptime', (YLeaf(YType.uint64, 'uptime'), ['int'])),
                                ('expiration_time', (YLeaf(YType.int32, 'expiration-time'), ['int'])),
                                ('is_local', (YLeaf(YType.boolean, 'is-local'), ['bool'])),
                                ('is_remote', (YLeaf(YType.boolean, 'is-remote'), ['bool'])),
                                ('is_forward', (YLeaf(YType.boolean, 'is-forward'), ['bool'])),
                                ('is_we_report', (YLeaf(YType.boolean, 'is-we-report'), ['bool'])),
                                ('flags', (YLeaf(YType.int32, 'flags'), ['int'])),
                                ('is_added', (YLeaf(YType.boolean, 'is-added'), ['bool'])),
                            ])
                            self.uptime = None
                            self.expiration_time = None
                            self.is_local = None
                            self.is_remote = None
                            self.is_forward = None
                            self.is_we_report = None
                            self.flags = None
                            self.is_added = None

                            self.source_address = Mld.Standby.DefaultContext.DetailGroups.DetailGroup.Source.SourceAddress()
                            self.source_address.parent = self
                            self._children_name_map["source_address"] = "source-address"
                            self._segment_path = lambda: "source"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/standby/default-context/detail-groups/detail-group/%s" % self._segment_path()
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Standby.DefaultContext.DetailGroups.DetailGroup.Source, ['uptime', 'expiration_time', 'is_local', 'is_remote', 'is_forward', 'is_we_report', 'flags', 'is_added'], name, value)


                        class SourceAddress(_Entity_):
                            """
                            Source Address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Standby.DefaultContext.DetailGroups.DetailGroup.Source.SourceAddress, self).__init__()

                                self.yang_name = "source-address"
                                self.yang_parent_name = "source"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "source-address"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/standby/default-context/detail-groups/detail-group/source/%s" % self._segment_path()
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Standby.DefaultContext.DetailGroups.DetailGroup.Source.SourceAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Standby.DefaultContext.DetailGroups.DetailGroup.Source.SourceAddress']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Standby.DefaultContext.DetailGroups.DetailGroup.Source']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Mld.Standby.DefaultContext.DetailGroups.DetailGroup']['meta_info']

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Mld.Standby.DefaultContext.DetailGroups']['meta_info']


            class NonActiveGroups(_Entity_):
                """
                IGMP Non\-Active Groups Information
                
                .. attribute:: non_active_groups
                
                	List of non\-active groups
                	**type**\: list of  		 :py:class:`NonActiveGroups_ <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.NonActiveGroups.NonActiveGroups_>`
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Mld.Standby.DefaultContext.NonActiveGroups, self).__init__()

                    self.yang_name = "non-active-groups"
                    self.yang_parent_name = "default-context"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("non-active-groups", ("non_active_groups", Mld.Standby.DefaultContext.NonActiveGroups.NonActiveGroups_))])
                    self._leafs = OrderedDict()

                    self.non_active_groups = YList(self)
                    self._segment_path = lambda: "non-active-groups"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/standby/default-context/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Mld.Standby.DefaultContext.NonActiveGroups, [], name, value)


                class NonActiveGroups_(_Entity_):
                    """
                    List of non\-active groups
                    
                    .. attribute:: group_address
                    
                    	Group Address
                    	**type**\:  :py:class:`GroupAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.NonActiveGroups.NonActiveGroups_.GroupAddress>`
                    
                    	**config**\: False
                    
                    .. attribute:: source_address
                    
                    	Source Address
                    	**type**\:  :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.NonActiveGroups.NonActiveGroups_.SourceAddress>`
                    
                    	**config**\: False
                    
                    .. attribute:: interface
                    
                    	Interface Name
                    	**type**\: str
                    
                    	**length:** 0..65
                    
                    	**config**\: False
                    
                    .. attribute:: reason_for_non_activity
                    
                    	Reason for group join not being processed
                    	**type**\: str
                    
                    	**length:** 0..257
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Mld.Standby.DefaultContext.NonActiveGroups.NonActiveGroups_, self).__init__()

                        self.yang_name = "non-active-groups"
                        self.yang_parent_name = "non-active-groups"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("group-address", ("group_address", Mld.Standby.DefaultContext.NonActiveGroups.NonActiveGroups_.GroupAddress)), ("source-address", ("source_address", Mld.Standby.DefaultContext.NonActiveGroups.NonActiveGroups_.SourceAddress))])
                        self._leafs = OrderedDict([
                            ('interface', (YLeaf(YType.str, 'interface'), ['str'])),
                            ('reason_for_non_activity', (YLeaf(YType.str, 'reason-for-non-activity'), ['str'])),
                        ])
                        self.interface = None
                        self.reason_for_non_activity = None

                        self.group_address = Mld.Standby.DefaultContext.NonActiveGroups.NonActiveGroups_.GroupAddress()
                        self.group_address.parent = self
                        self._children_name_map["group_address"] = "group-address"

                        self.source_address = Mld.Standby.DefaultContext.NonActiveGroups.NonActiveGroups_.SourceAddress()
                        self.source_address.parent = self
                        self._children_name_map["source_address"] = "source-address"
                        self._segment_path = lambda: "non-active-groups"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/standby/default-context/non-active-groups/%s" % self._segment_path()
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Mld.Standby.DefaultContext.NonActiveGroups.NonActiveGroups_, ['interface', 'reason_for_non_activity'], name, value)


                    class GroupAddress(_Entity_):
                        """
                        Group Address
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Standby.DefaultContext.NonActiveGroups.NonActiveGroups_.GroupAddress, self).__init__()

                            self.yang_name = "group-address"
                            self.yang_parent_name = "non-active-groups"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "group-address"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/standby/default-context/non-active-groups/non-active-groups/%s" % self._segment_path()
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Standby.DefaultContext.NonActiveGroups.NonActiveGroups_.GroupAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Standby.DefaultContext.NonActiveGroups.NonActiveGroups_.GroupAddress']['meta_info']


                    class SourceAddress(_Entity_):
                        """
                        Source Address
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Standby.DefaultContext.NonActiveGroups.NonActiveGroups_.SourceAddress, self).__init__()

                            self.yang_name = "source-address"
                            self.yang_parent_name = "non-active-groups"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "source-address"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/standby/default-context/non-active-groups/non-active-groups/%s" % self._segment_path()
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Standby.DefaultContext.NonActiveGroups.NonActiveGroups_.SourceAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Standby.DefaultContext.NonActiveGroups.NonActiveGroups_.SourceAddress']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Mld.Standby.DefaultContext.NonActiveGroups.NonActiveGroups_']['meta_info']

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Mld.Standby.DefaultContext.NonActiveGroups']['meta_info']


            class SsmMaps(_Entity_):
                """
                SSM Map Table
                
                .. attribute:: ssm_map
                
                	SSM Map information
                	**type**\: list of  		 :py:class:`SsmMap <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.SsmMaps.SsmMap>`
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Mld.Standby.DefaultContext.SsmMaps, self).__init__()

                    self.yang_name = "ssm-maps"
                    self.yang_parent_name = "default-context"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("ssm-map", ("ssm_map", Mld.Standby.DefaultContext.SsmMaps.SsmMap))])
                    self._leafs = OrderedDict()

                    self.ssm_map = YList(self)
                    self._segment_path = lambda: "ssm-maps"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/standby/default-context/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Mld.Standby.DefaultContext.SsmMaps, [], name, value)


                class SsmMap(_Entity_):
                    """
                    SSM Map information
                    
                    .. attribute:: ssm_map_type
                    
                    	SSM Map Type
                    	**type**\:  :py:class:`IgmpssmMap <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpssmMap>`
                    
                    	**config**\: False
                    
                    .. attribute:: group_address
                    
                    	Group address
                    	**type**\: union of the below types:
                    
                    		**type**\: str
                    
                    			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    		**type**\: str
                    
                    			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    	**config**\: False
                    
                    .. attribute:: group_address_xr
                    
                    	Group Address
                    	**type**\:  :py:class:`GroupAddressXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.SsmMaps.SsmMap.GroupAddressXr>`
                    
                    	**config**\: False
                    
                    .. attribute:: map_type
                    
                    	Map Type of group
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: source_counts
                    
                    	Count of Sources
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Mld.Standby.DefaultContext.SsmMaps.SsmMap, self).__init__()

                        self.yang_name = "ssm-map"
                        self.yang_parent_name = "ssm-maps"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("group-address-xr", ("group_address_xr", Mld.Standby.DefaultContext.SsmMaps.SsmMap.GroupAddressXr))])
                        self._leafs = OrderedDict([
                            ('ssm_map_type', (YLeaf(YType.enumeration, 'ssm-map-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpssmMap', '')])),
                            ('group_address', (YLeaf(YType.str, 'group-address'), ['str','str'])),
                            ('map_type', (YLeaf(YType.uint32, 'map-type'), ['int'])),
                            ('source_counts', (YLeaf(YType.uint32, 'source-counts'), ['int'])),
                        ])
                        self.ssm_map_type = None
                        self.group_address = None
                        self.map_type = None
                        self.source_counts = None

                        self.group_address_xr = Mld.Standby.DefaultContext.SsmMaps.SsmMap.GroupAddressXr()
                        self.group_address_xr.parent = self
                        self._children_name_map["group_address_xr"] = "group-address-xr"
                        self._segment_path = lambda: "ssm-map"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/standby/default-context/ssm-maps/%s" % self._segment_path()
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Mld.Standby.DefaultContext.SsmMaps.SsmMap, ['ssm_map_type', 'group_address', 'map_type', 'source_counts'], name, value)


                    class GroupAddressXr(_Entity_):
                        """
                        Group Address
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Standby.DefaultContext.SsmMaps.SsmMap.GroupAddressXr, self).__init__()

                            self.yang_name = "group-address-xr"
                            self.yang_parent_name = "ssm-map"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "group-address-xr"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/standby/default-context/ssm-maps/ssm-map/%s" % self._segment_path()
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Standby.DefaultContext.SsmMaps.SsmMap.GroupAddressXr, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Standby.DefaultContext.SsmMaps.SsmMap.GroupAddressXr']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Mld.Standby.DefaultContext.SsmMaps.SsmMap']['meta_info']

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Mld.Standby.DefaultContext.SsmMaps']['meta_info']


            class ExplicitGroups(_Entity_):
                """
                IGMP Explicit Group Database
                
                .. attribute:: explicit_group
                
                	IGMP Explicit Group Entry Information
                	**type**\: list of  		 :py:class:`ExplicitGroup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.ExplicitGroups.ExplicitGroup>`
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Mld.Standby.DefaultContext.ExplicitGroups, self).__init__()

                    self.yang_name = "explicit-groups"
                    self.yang_parent_name = "default-context"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("explicit-group", ("explicit_group", Mld.Standby.DefaultContext.ExplicitGroups.ExplicitGroup))])
                    self._leafs = OrderedDict()

                    self.explicit_group = YList(self)
                    self._segment_path = lambda: "explicit-groups"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/standby/default-context/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Mld.Standby.DefaultContext.ExplicitGroups, [], name, value)


                class ExplicitGroup(_Entity_):
                    """
                    IGMP Explicit Group Entry Information
                    
                    .. attribute:: group_address
                    
                    	Group Address
                    	**type**\: union of the below types:
                    
                    		**type**\: str
                    
                    			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    		**type**\: str
                    
                    			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    	**config**\: False
                    
                    .. attribute:: interface_name
                    
                    	Interface Name
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: source_address
                    
                    	Source/Host Address
                    	**type**\: union of the below types:
                    
                    		**type**\: str
                    
                    			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    		**type**\: str
                    
                    			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    	**config**\: False
                    
                    .. attribute:: group_info
                    
                    	Basic Group information
                    	**type**\:  :py:class:`GroupInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo>`
                    
                    	**config**\: False
                    
                    .. attribute:: include_hosts
                    
                    	No. of hosts who are included
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: exclude_hosts
                    
                    	No. of hosts who are excluded
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: host
                    
                    	List of hosts
                    	**type**\: list of  		 :py:class:`Host <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.Host>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Mld.Standby.DefaultContext.ExplicitGroups.ExplicitGroup, self).__init__()

                        self.yang_name = "explicit-group"
                        self.yang_parent_name = "explicit-groups"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("group-info", ("group_info", Mld.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo)), ("host", ("host", Mld.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.Host))])
                        self._leafs = OrderedDict([
                            ('group_address', (YLeaf(YType.str, 'group-address'), ['str','str'])),
                            ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                            ('source_address', (YLeaf(YType.str, 'source-address'), ['str','str'])),
                            ('include_hosts', (YLeaf(YType.uint32, 'include-hosts'), ['int'])),
                            ('exclude_hosts', (YLeaf(YType.uint32, 'exclude-hosts'), ['int'])),
                        ])
                        self.group_address = None
                        self.interface_name = None
                        self.source_address = None
                        self.include_hosts = None
                        self.exclude_hosts = None

                        self.group_info = Mld.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo()
                        self.group_info.parent = self
                        self._children_name_map["group_info"] = "group-info"

                        self.host = YList(self)
                        self._segment_path = lambda: "explicit-group"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/standby/default-context/explicit-groups/%s" % self._segment_path()
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Mld.Standby.DefaultContext.ExplicitGroups.ExplicitGroup, ['group_address', 'interface_name', 'source_address', 'include_hosts', 'exclude_hosts'], name, value)


                    class GroupInfo(_Entity_):
                        """
                        Basic Group information
                        
                        .. attribute:: group_address_xr
                        
                        	Group Address
                        	**type**\:  :py:class:`GroupAddressXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.GroupAddressXr>`
                        
                        	**config**\: False
                        
                        .. attribute:: last_reporter
                        
                        	Last reporter address
                        	**type**\:  :py:class:`LastReporter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.LastReporter>`
                        
                        	**config**\: False
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\:  :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.SourceAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: interface_name_xr
                        
                        	Interface
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: uptime
                        
                        	Uptime in seconds
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        	**config**\: False
                        
                        	**units**\: second
                        
                        .. attribute:: expiration_time
                        
                        	Expiration time in seconds
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        	**config**\: False
                        
                        	**units**\: second
                        
                        .. attribute:: explicit_tracking_enabled
                        
                        	Is explicit tracking enabled
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_self_join
                        
                        	If local system is member of this group on this interface
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: row_status
                        
                        	interface on or off for the group
                        	**type**\: str
                        
                        	**length:** 0..16
                        
                        	**config**\: False
                        
                        .. attribute:: is_low_memory
                        
                        	Node is running low on memory
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: router_filter_mode
                        
                        	Filter mode
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        	**config**\: False
                        
                        .. attribute:: older_host_version1_timer
                        
                        	IGMP Hostversion1timer
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: older_host_version2_timer
                        
                        	IGMP Hostversion2timer
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_added
                        
                        	Joined
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_suppressed
                        
                        	Suppressed
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo, self).__init__()

                            self.yang_name = "group-info"
                            self.yang_parent_name = "explicit-group"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("group-address-xr", ("group_address_xr", Mld.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.GroupAddressXr)), ("last-reporter", ("last_reporter", Mld.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.LastReporter)), ("source-address", ("source_address", Mld.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.SourceAddress))])
                            self._leafs = OrderedDict([
                                ('interface_name_xr', (YLeaf(YType.str, 'interface-name-xr'), ['str'])),
                                ('uptime', (YLeaf(YType.uint64, 'uptime'), ['int'])),
                                ('expiration_time', (YLeaf(YType.int32, 'expiration-time'), ['int'])),
                                ('explicit_tracking_enabled', (YLeaf(YType.boolean, 'explicit-tracking-enabled'), ['bool'])),
                                ('is_self_join', (YLeaf(YType.boolean, 'is-self-join'), ['bool'])),
                                ('row_status', (YLeaf(YType.str, 'row-status'), ['str'])),
                                ('is_low_memory', (YLeaf(YType.boolean, 'is-low-memory'), ['bool'])),
                                ('router_filter_mode', (YLeaf(YType.uint8, 'router-filter-mode'), ['int'])),
                                ('older_host_version1_timer', (YLeaf(YType.uint32, 'older-host-version1-timer'), ['int'])),
                                ('older_host_version2_timer', (YLeaf(YType.uint32, 'older-host-version2-timer'), ['int'])),
                                ('is_added', (YLeaf(YType.boolean, 'is-added'), ['bool'])),
                                ('is_suppressed', (YLeaf(YType.boolean, 'is-suppressed'), ['bool'])),
                            ])
                            self.interface_name_xr = None
                            self.uptime = None
                            self.expiration_time = None
                            self.explicit_tracking_enabled = None
                            self.is_self_join = None
                            self.row_status = None
                            self.is_low_memory = None
                            self.router_filter_mode = None
                            self.older_host_version1_timer = None
                            self.older_host_version2_timer = None
                            self.is_added = None
                            self.is_suppressed = None

                            self.group_address_xr = Mld.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.GroupAddressXr()
                            self.group_address_xr.parent = self
                            self._children_name_map["group_address_xr"] = "group-address-xr"

                            self.last_reporter = Mld.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.LastReporter()
                            self.last_reporter.parent = self
                            self._children_name_map["last_reporter"] = "last-reporter"

                            self.source_address = Mld.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.SourceAddress()
                            self.source_address.parent = self
                            self._children_name_map["source_address"] = "source-address"
                            self._segment_path = lambda: "group-info"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/standby/default-context/explicit-groups/explicit-group/%s" % self._segment_path()
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo, ['interface_name_xr', 'uptime', 'expiration_time', 'explicit_tracking_enabled', 'is_self_join', 'row_status', 'is_low_memory', 'router_filter_mode', 'older_host_version1_timer', 'older_host_version2_timer', 'is_added', 'is_suppressed'], name, value)


                        class GroupAddressXr(_Entity_):
                            """
                            Group Address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.GroupAddressXr, self).__init__()

                                self.yang_name = "group-address-xr"
                                self.yang_parent_name = "group-info"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "group-address-xr"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/standby/default-context/explicit-groups/explicit-group/group-info/%s" % self._segment_path()
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.GroupAddressXr, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.GroupAddressXr']['meta_info']


                        class LastReporter(_Entity_):
                            """
                            Last reporter address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.LastReporter, self).__init__()

                                self.yang_name = "last-reporter"
                                self.yang_parent_name = "group-info"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "last-reporter"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/standby/default-context/explicit-groups/explicit-group/group-info/%s" % self._segment_path()
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.LastReporter, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.LastReporter']['meta_info']


                        class SourceAddress(_Entity_):
                            """
                            Source Address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.SourceAddress, self).__init__()

                                self.yang_name = "source-address"
                                self.yang_parent_name = "group-info"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "source-address"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/standby/default-context/explicit-groups/explicit-group/group-info/%s" % self._segment_path()
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.SourceAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.SourceAddress']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo']['meta_info']


                    class Host(_Entity_):
                        """
                        List of hosts
                        
                        .. attribute:: address
                        
                        	Host Address
                        	**type**\:  :py:class:`Address <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.Host.Address>`
                        
                        	**config**\: False
                        
                        .. attribute:: uptime
                        
                        	Uptime in seconds
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        	**units**\: second
                        
                        .. attribute:: is_exclude
                        
                        	Exclude flag set
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: expiration_time
                        
                        	Expiration time in seconds
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        	**units**\: second
                        
                        .. attribute:: source_count
                        
                        	No. of sources in entry
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: source_address
                        
                        	First 3 source addresses
                        	**type**\: list of  		 :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.Host.SourceAddress>`
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.Host, self).__init__()

                            self.yang_name = "host"
                            self.yang_parent_name = "explicit-group"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("address", ("address", Mld.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.Host.Address)), ("source-address", ("source_address", Mld.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.Host.SourceAddress))])
                            self._leafs = OrderedDict([
                                ('uptime', (YLeaf(YType.uint32, 'uptime'), ['int'])),
                                ('is_exclude', (YLeaf(YType.boolean, 'is-exclude'), ['bool'])),
                                ('expiration_time', (YLeaf(YType.uint32, 'expiration-time'), ['int'])),
                                ('source_count', (YLeaf(YType.uint32, 'source-count'), ['int'])),
                            ])
                            self.uptime = None
                            self.is_exclude = None
                            self.expiration_time = None
                            self.source_count = None

                            self.address = Mld.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.Host.Address()
                            self.address.parent = self
                            self._children_name_map["address"] = "address"

                            self.source_address = YList(self)
                            self._segment_path = lambda: "host"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/standby/default-context/explicit-groups/explicit-group/%s" % self._segment_path()
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.Host, ['uptime', 'is_exclude', 'expiration_time', 'source_count'], name, value)


                        class Address(_Entity_):
                            """
                            Host Address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.Host.Address, self).__init__()

                                self.yang_name = "address"
                                self.yang_parent_name = "host"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "address"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/standby/default-context/explicit-groups/explicit-group/host/%s" % self._segment_path()
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.Host.Address, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.Host.Address']['meta_info']


                        class SourceAddress(_Entity_):
                            """
                            First 3 source addresses
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.Host.SourceAddress, self).__init__()

                                self.yang_name = "source-address"
                                self.yang_parent_name = "host"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "source-address"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/standby/default-context/explicit-groups/explicit-group/host/%s" % self._segment_path()
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.Host.SourceAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.Host.SourceAddress']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.Host']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Mld.Standby.DefaultContext.ExplicitGroups.ExplicitGroup']['meta_info']

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Mld.Standby.DefaultContext.ExplicitGroups']['meta_info']


            class InterfaceTable(_Entity_):
                """
                IGMP Interface specific Table
                
                .. attribute:: interface
                
                	IGMP Interface
                	**type**\: list of  		 :py:class:`Interface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.InterfaceTable.Interface>`
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Mld.Standby.DefaultContext.InterfaceTable, self).__init__()

                    self.yang_name = "interface-table"
                    self.yang_parent_name = "default-context"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("interface", ("interface", Mld.Standby.DefaultContext.InterfaceTable.Interface))])
                    self._leafs = OrderedDict()

                    self.interface = YList(self)
                    self._segment_path = lambda: "interface-table"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/standby/default-context/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Mld.Standby.DefaultContext.InterfaceTable, [], name, value)


                class Interface(_Entity_):
                    """
                    IGMP Interface
                    
                    .. attribute:: interface_name  (key)
                    
                    	Interface Name
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: address
                    
                    	IP address
                    	**type**\:  :py:class:`Address <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.InterfaceTable.Interface.Address>`
                    
                    	**config**\: False
                    
                    .. attribute:: querier_address
                    
                    	Address of the Querier
                    	**type**\:  :py:class:`QuerierAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.InterfaceTable.Interface.QuerierAddress>`
                    
                    	**config**\: False
                    
                    .. attribute:: subscriber_address
                    
                    	Address of subscriber
                    	**type**\:  :py:class:`SubscriberAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.InterfaceTable.Interface.SubscriberAddress>`
                    
                    	**config**\: False
                    
                    .. attribute:: interface_name_xr
                    
                    	Interface
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: state
                    
                    	Interface state
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: prefix_length
                    
                    	Prefix length
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_interface_up
                    
                    	Is interface up
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_ip_enabled
                    
                    	Is IP enabled
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_router_enabled
                    
                    	Is Router functionality enabled
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: igmp_version
                    
                    	IGMP Router version
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    	**config**\: False
                    
                    .. attribute:: host_version
                    
                    	IGMP Host version
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    	**config**\: False
                    
                    .. attribute:: query_interval
                    
                    	Query Interval value in seconds
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    	**units**\: second
                    
                    .. attribute:: query_timeout
                    
                    	Query Timeout value
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    .. attribute:: query_maximum_response_time
                    
                    	Max Response Timeout value
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    .. attribute:: last_member_query_interval
                    
                    	Last Member Query Interval
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    .. attribute:: group_joins
                    
                    	No. of group joins
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: group_leaves
                    
                    	No. of group leaves
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_querier
                    
                    	Are we querier
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: total_active_groups
                    
                    	Actual number of groups on interface
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: robustness
                    
                    	Robustness Variable value
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: proxy_interface
                    
                    	Proxy interface index
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: querier_uptime
                    
                    	Time since the last querier took over
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    .. attribute:: las_ll_registration_count
                    
                    	LAS reg count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_get_address_count
                    
                    	LAS get addr count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_update_count
                    
                    	LAS Update count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_ll_remove_update_count
                    
                    	LAS LL remove update count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_ll_add_update_count
                    
                    	LAS LL add update count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_null_update_count
                    
                    	LAS Null update count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_unregistration_count
                    
                    	LAS unreg count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_las_request
                    
                    	LAS req
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_las_registered
                    
                    	LAS registered
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: vrf_id
                    
                    	VRF id
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: mte_vrf_id
                    
                    	MTE VRF id
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: location
                    
                    	Location
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: mtu
                    
                    	MTU
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: vrf_state
                    
                    	Vrf State
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_configurationverify
                    
                    	CFG verify
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: configurationvrf_set
                    
                    	CFG vrf set
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: configurationvrf_error
                    
                    	CFG vrf error
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: configuration_mcast_vrf_set
                    
                    	Is mcast set
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: configuration_mcast_vrf_error
                    
                    	Is mcast error
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_im_state_registered
                    
                    	Im state registered
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_subscriber
                    
                    	Subscriber interface
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: subscriber_mode
                    
                    	Subscriber mode
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_identity_present
                    
                    	Subscriber ID or Address available from AAA
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: subscriber_id
                    
                    	ID string of subscriber
                    	**type**\: str
                    
                    	**length:** 0..257
                    
                    	**config**\: False
                    
                    .. attribute:: parent_ifhandle
                    
                    	Parent If Handle
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: time_since_last_query_in_seconds
                    
                    	Time elapsed since last query
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: time_since_last_report_in_seconds
                    
                    	Time elapsed since last report
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: router_uptime_in_seconds
                    
                    	Uptime since router enabled event
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: mte_tuple_count
                    
                    	MTE Tuple count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Mld.Standby.DefaultContext.InterfaceTable.Interface, self).__init__()

                        self.yang_name = "interface"
                        self.yang_parent_name = "interface-table"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['interface_name']
                        self._child_classes = OrderedDict([("address", ("address", Mld.Standby.DefaultContext.InterfaceTable.Interface.Address)), ("querier-address", ("querier_address", Mld.Standby.DefaultContext.InterfaceTable.Interface.QuerierAddress)), ("subscriber-address", ("subscriber_address", Mld.Standby.DefaultContext.InterfaceTable.Interface.SubscriberAddress))])
                        self._leafs = OrderedDict([
                            ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                            ('interface_name_xr', (YLeaf(YType.str, 'interface-name-xr'), ['str'])),
                            ('state', (YLeaf(YType.uint32, 'state'), ['int'])),
                            ('prefix_length', (YLeaf(YType.uint32, 'prefix-length'), ['int'])),
                            ('is_interface_up', (YLeaf(YType.boolean, 'is-interface-up'), ['bool'])),
                            ('is_ip_enabled', (YLeaf(YType.boolean, 'is-ip-enabled'), ['bool'])),
                            ('is_router_enabled', (YLeaf(YType.boolean, 'is-router-enabled'), ['bool'])),
                            ('igmp_version', (YLeaf(YType.uint8, 'igmp-version'), ['int'])),
                            ('host_version', (YLeaf(YType.uint8, 'host-version'), ['int'])),
                            ('query_interval', (YLeaf(YType.uint16, 'query-interval'), ['int'])),
                            ('query_timeout', (YLeaf(YType.uint16, 'query-timeout'), ['int'])),
                            ('query_maximum_response_time', (YLeaf(YType.uint16, 'query-maximum-response-time'), ['int'])),
                            ('last_member_query_interval', (YLeaf(YType.uint16, 'last-member-query-interval'), ['int'])),
                            ('group_joins', (YLeaf(YType.uint32, 'group-joins'), ['int'])),
                            ('group_leaves', (YLeaf(YType.uint32, 'group-leaves'), ['int'])),
                            ('is_querier', (YLeaf(YType.boolean, 'is-querier'), ['bool'])),
                            ('total_active_groups', (YLeaf(YType.uint32, 'total-active-groups'), ['int'])),
                            ('robustness', (YLeaf(YType.uint32, 'robustness'), ['int'])),
                            ('proxy_interface', (YLeaf(YType.str, 'proxy-interface'), ['str'])),
                            ('querier_uptime', (YLeaf(YType.uint16, 'querier-uptime'), ['int'])),
                            ('las_ll_registration_count', (YLeaf(YType.uint32, 'las-ll-registration-count'), ['int'])),
                            ('las_get_address_count', (YLeaf(YType.uint32, 'las-get-address-count'), ['int'])),
                            ('las_update_count', (YLeaf(YType.uint32, 'las-update-count'), ['int'])),
                            ('las_ll_remove_update_count', (YLeaf(YType.uint32, 'las-ll-remove-update-count'), ['int'])),
                            ('las_ll_add_update_count', (YLeaf(YType.uint32, 'las-ll-add-update-count'), ['int'])),
                            ('las_null_update_count', (YLeaf(YType.uint32, 'las-null-update-count'), ['int'])),
                            ('las_unregistration_count', (YLeaf(YType.uint32, 'las-unregistration-count'), ['int'])),
                            ('is_las_request', (YLeaf(YType.boolean, 'is-las-request'), ['bool'])),
                            ('is_las_registered', (YLeaf(YType.boolean, 'is-las-registered'), ['bool'])),
                            ('vrf_id', (YLeaf(YType.uint32, 'vrf-id'), ['int'])),
                            ('mte_vrf_id', (YLeaf(YType.uint32, 'mte-vrf-id'), ['int'])),
                            ('location', (YLeaf(YType.uint32, 'location'), ['int'])),
                            ('mtu', (YLeaf(YType.uint32, 'mtu'), ['int'])),
                            ('vrf_state', (YLeaf(YType.uint32, 'vrf-state'), ['int'])),
                            ('is_configurationverify', (YLeaf(YType.boolean, 'is-configurationverify'), ['bool'])),
                            ('configurationvrf_set', (YLeaf(YType.boolean, 'configurationvrf-set'), ['bool'])),
                            ('configurationvrf_error', (YLeaf(YType.boolean, 'configurationvrf-error'), ['bool'])),
                            ('configuration_mcast_vrf_set', (YLeaf(YType.boolean, 'configuration-mcast-vrf-set'), ['bool'])),
                            ('configuration_mcast_vrf_error', (YLeaf(YType.boolean, 'configuration-mcast-vrf-error'), ['bool'])),
                            ('is_im_state_registered', (YLeaf(YType.boolean, 'is-im-state-registered'), ['bool'])),
                            ('is_subscriber', (YLeaf(YType.boolean, 'is-subscriber'), ['bool'])),
                            ('subscriber_mode', (YLeaf(YType.uint32, 'subscriber-mode'), ['int'])),
                            ('is_identity_present', (YLeaf(YType.boolean, 'is-identity-present'), ['bool'])),
                            ('subscriber_id', (YLeaf(YType.str, 'subscriber-id'), ['str'])),
                            ('parent_ifhandle', (YLeaf(YType.str, 'parent-ifhandle'), ['str'])),
                            ('time_since_last_query_in_seconds', (YLeaf(YType.uint32, 'time-since-last-query-in-seconds'), ['int'])),
                            ('time_since_last_report_in_seconds', (YLeaf(YType.uint32, 'time-since-last-report-in-seconds'), ['int'])),
                            ('router_uptime_in_seconds', (YLeaf(YType.uint32, 'router-uptime-in-seconds'), ['int'])),
                            ('mte_tuple_count', (YLeaf(YType.uint32, 'mte-tuple-count'), ['int'])),
                        ])
                        self.interface_name = None
                        self.interface_name_xr = None
                        self.state = None
                        self.prefix_length = None
                        self.is_interface_up = None
                        self.is_ip_enabled = None
                        self.is_router_enabled = None
                        self.igmp_version = None
                        self.host_version = None
                        self.query_interval = None
                        self.query_timeout = None
                        self.query_maximum_response_time = None
                        self.last_member_query_interval = None
                        self.group_joins = None
                        self.group_leaves = None
                        self.is_querier = None
                        self.total_active_groups = None
                        self.robustness = None
                        self.proxy_interface = None
                        self.querier_uptime = None
                        self.las_ll_registration_count = None
                        self.las_get_address_count = None
                        self.las_update_count = None
                        self.las_ll_remove_update_count = None
                        self.las_ll_add_update_count = None
                        self.las_null_update_count = None
                        self.las_unregistration_count = None
                        self.is_las_request = None
                        self.is_las_registered = None
                        self.vrf_id = None
                        self.mte_vrf_id = None
                        self.location = None
                        self.mtu = None
                        self.vrf_state = None
                        self.is_configurationverify = None
                        self.configurationvrf_set = None
                        self.configurationvrf_error = None
                        self.configuration_mcast_vrf_set = None
                        self.configuration_mcast_vrf_error = None
                        self.is_im_state_registered = None
                        self.is_subscriber = None
                        self.subscriber_mode = None
                        self.is_identity_present = None
                        self.subscriber_id = None
                        self.parent_ifhandle = None
                        self.time_since_last_query_in_seconds = None
                        self.time_since_last_report_in_seconds = None
                        self.router_uptime_in_seconds = None
                        self.mte_tuple_count = None

                        self.address = Mld.Standby.DefaultContext.InterfaceTable.Interface.Address()
                        self.address.parent = self
                        self._children_name_map["address"] = "address"

                        self.querier_address = Mld.Standby.DefaultContext.InterfaceTable.Interface.QuerierAddress()
                        self.querier_address.parent = self
                        self._children_name_map["querier_address"] = "querier-address"

                        self.subscriber_address = Mld.Standby.DefaultContext.InterfaceTable.Interface.SubscriberAddress()
                        self.subscriber_address.parent = self
                        self._children_name_map["subscriber_address"] = "subscriber-address"
                        self._segment_path = lambda: "interface" + "[interface-name='" + str(self.interface_name) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/standby/default-context/interface-table/%s" % self._segment_path()
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Mld.Standby.DefaultContext.InterfaceTable.Interface, ['interface_name', 'interface_name_xr', 'state', 'prefix_length', 'is_interface_up', 'is_ip_enabled', 'is_router_enabled', 'igmp_version', 'host_version', 'query_interval', 'query_timeout', 'query_maximum_response_time', 'last_member_query_interval', 'group_joins', 'group_leaves', 'is_querier', 'total_active_groups', 'robustness', 'proxy_interface', 'querier_uptime', 'las_ll_registration_count', 'las_get_address_count', 'las_update_count', 'las_ll_remove_update_count', 'las_ll_add_update_count', 'las_null_update_count', 'las_unregistration_count', 'is_las_request', 'is_las_registered', 'vrf_id', 'mte_vrf_id', 'location', 'mtu', 'vrf_state', 'is_configurationverify', 'configurationvrf_set', 'configurationvrf_error', 'configuration_mcast_vrf_set', 'configuration_mcast_vrf_error', 'is_im_state_registered', 'is_subscriber', 'subscriber_mode', 'is_identity_present', 'subscriber_id', 'parent_ifhandle', 'time_since_last_query_in_seconds', 'time_since_last_report_in_seconds', 'router_uptime_in_seconds', 'mte_tuple_count'], name, value)


                    class Address(_Entity_):
                        """
                        IP address
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Standby.DefaultContext.InterfaceTable.Interface.Address, self).__init__()

                            self.yang_name = "address"
                            self.yang_parent_name = "interface"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "address"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Standby.DefaultContext.InterfaceTable.Interface.Address, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Standby.DefaultContext.InterfaceTable.Interface.Address']['meta_info']


                    class QuerierAddress(_Entity_):
                        """
                        Address of the Querier
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Standby.DefaultContext.InterfaceTable.Interface.QuerierAddress, self).__init__()

                            self.yang_name = "querier-address"
                            self.yang_parent_name = "interface"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "querier-address"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Standby.DefaultContext.InterfaceTable.Interface.QuerierAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Standby.DefaultContext.InterfaceTable.Interface.QuerierAddress']['meta_info']


                    class SubscriberAddress(_Entity_):
                        """
                        Address of subscriber
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Standby.DefaultContext.InterfaceTable.Interface.SubscriberAddress, self).__init__()

                            self.yang_name = "subscriber-address"
                            self.yang_parent_name = "interface"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "subscriber-address"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Standby.DefaultContext.InterfaceTable.Interface.SubscriberAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Standby.DefaultContext.InterfaceTable.Interface.SubscriberAddress']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Mld.Standby.DefaultContext.InterfaceTable.Interface']['meta_info']

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Mld.Standby.DefaultContext.InterfaceTable']['meta_info']


            class InterfaceUnicastQosAdjusts(_Entity_):
                """
                IGMP Interface Unicast\-Qos\-Adjust
                
                .. attribute:: interface_unicast_qos_adjust
                
                	IGMP Interface
                	**type**\: list of  		 :py:class:`InterfaceUnicastQosAdjust <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust>`
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Mld.Standby.DefaultContext.InterfaceUnicastQosAdjusts, self).__init__()

                    self.yang_name = "interface-unicast-qos-adjusts"
                    self.yang_parent_name = "default-context"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("interface-unicast-qos-adjust", ("interface_unicast_qos_adjust", Mld.Standby.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust))])
                    self._leafs = OrderedDict()

                    self.interface_unicast_qos_adjust = YList(self)
                    self._segment_path = lambda: "interface-unicast-qos-adjusts"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/standby/default-context/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Mld.Standby.DefaultContext.InterfaceUnicastQosAdjusts, [], name, value)


                class InterfaceUnicastQosAdjust(_Entity_):
                    """
                    IGMP Interface
                    
                    .. attribute:: interface_name  (key)
                    
                    	Interface Name
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: is_virtual_access
                    
                    	Is VirtualAccess Interface
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: rate
                    
                    	Overall rate in Kbps
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    	**units**\: kbit/s
                    
                    .. attribute:: rate_increments
                    
                    	Count of rate increments
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: rate_decrements
                    
                    	Count of rate decrements
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: update
                    
                    	List of updates
                    	**type**\: list of  		 :py:class:`Update <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Mld.Standby.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust, self).__init__()

                        self.yang_name = "interface-unicast-qos-adjust"
                        self.yang_parent_name = "interface-unicast-qos-adjusts"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['interface_name']
                        self._child_classes = OrderedDict([("update", ("update", Mld.Standby.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update))])
                        self._leafs = OrderedDict([
                            ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                            ('is_virtual_access', (YLeaf(YType.boolean, 'is-virtual-access'), ['bool'])),
                            ('rate', (YLeaf(YType.uint32, 'rate'), ['int'])),
                            ('rate_increments', (YLeaf(YType.uint32, 'rate-increments'), ['int'])),
                            ('rate_decrements', (YLeaf(YType.uint32, 'rate-decrements'), ['int'])),
                        ])
                        self.interface_name = None
                        self.is_virtual_access = None
                        self.rate = None
                        self.rate_increments = None
                        self.rate_decrements = None

                        self.update = YList(self)
                        self._segment_path = lambda: "interface-unicast-qos-adjust" + "[interface-name='" + str(self.interface_name) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/standby/default-context/interface-unicast-qos-adjusts/%s" % self._segment_path()
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Mld.Standby.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust, ['interface_name', 'is_virtual_access', 'rate', 'rate_increments', 'rate_decrements'], name, value)


                    class Update(_Entity_):
                        """
                        List of updates
                        
                        .. attribute:: source_address
                        
                        	Source address
                        	**type**\:  :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.SourceAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: group_address
                        
                        	Group address
                        	**type**\:  :py:class:`GroupAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.GroupAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: is_add
                        
                        	Is this a rate increment
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: weight
                        
                        	Weight from policy
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: received_time
                        
                        	Time this update is received
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Standby.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update, self).__init__()

                            self.yang_name = "update"
                            self.yang_parent_name = "interface-unicast-qos-adjust"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("source-address", ("source_address", Mld.Standby.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.SourceAddress)), ("group-address", ("group_address", Mld.Standby.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.GroupAddress))])
                            self._leafs = OrderedDict([
                                ('is_add', (YLeaf(YType.boolean, 'is-add'), ['bool'])),
                                ('weight', (YLeaf(YType.uint32, 'weight'), ['int'])),
                                ('received_time', (YLeaf(YType.uint64, 'received-time'), ['int'])),
                            ])
                            self.is_add = None
                            self.weight = None
                            self.received_time = None

                            self.source_address = Mld.Standby.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.SourceAddress()
                            self.source_address.parent = self
                            self._children_name_map["source_address"] = "source-address"

                            self.group_address = Mld.Standby.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.GroupAddress()
                            self.group_address.parent = self
                            self._children_name_map["group_address"] = "group-address"
                            self._segment_path = lambda: "update"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Standby.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update, ['is_add', 'weight', 'received_time'], name, value)


                        class SourceAddress(_Entity_):
                            """
                            Source address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Standby.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.SourceAddress, self).__init__()

                                self.yang_name = "source-address"
                                self.yang_parent_name = "update"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "source-address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Standby.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.SourceAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Standby.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.SourceAddress']['meta_info']


                        class GroupAddress(_Entity_):
                            """
                            Group address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Standby.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.GroupAddress, self).__init__()

                                self.yang_name = "group-address"
                                self.yang_parent_name = "update"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "group-address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Standby.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.GroupAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Standby.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.GroupAddress']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Standby.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Mld.Standby.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust']['meta_info']

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Mld.Standby.DefaultContext.InterfaceUnicastQosAdjusts']['meta_info']


            class Ranges(_Entity_):
                """
                Range table
                
                .. attribute:: range
                
                	Range information
                	**type**\: list of  		 :py:class:`Range <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.Ranges.Range>`
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Mld.Standby.DefaultContext.Ranges, self).__init__()

                    self.yang_name = "ranges"
                    self.yang_parent_name = "default-context"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("range", ("range", Mld.Standby.DefaultContext.Ranges.Range))])
                    self._leafs = OrderedDict()

                    self.range = YList(self)
                    self._segment_path = lambda: "ranges"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/standby/default-context/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Mld.Standby.DefaultContext.Ranges, [], name, value)


                class Range(_Entity_):
                    """
                    Range information
                    
                    .. attribute:: group_address
                    
                    	Group address
                    	**type**\: union of the below types:
                    
                    		**type**\: str
                    
                    			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    		**type**\: str
                    
                    			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    	**config**\: False
                    
                    .. attribute:: group_mask
                    
                    	Group Mask
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: group_address_xr
                    
                    	Group address
                    	**type**\:  :py:class:`GroupAddressXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.Ranges.Range.GroupAddressXr>`
                    
                    	**config**\: False
                    
                    .. attribute:: prefix_length
                    
                    	Prefix length
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: protocol
                    
                    	Protocol
                    	**type**\:  :py:class:`IgmpEdmProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpEdmProtocol>`
                    
                    	**config**\: False
                    
                    .. attribute:: is_stale
                    
                    	Is the entry stale
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Mld.Standby.DefaultContext.Ranges.Range, self).__init__()

                        self.yang_name = "range"
                        self.yang_parent_name = "ranges"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("group-address-xr", ("group_address_xr", Mld.Standby.DefaultContext.Ranges.Range.GroupAddressXr))])
                        self._leafs = OrderedDict([
                            ('group_address', (YLeaf(YType.str, 'group-address'), ['str','str'])),
                            ('group_mask', (YLeaf(YType.uint32, 'group-mask'), ['int'])),
                            ('prefix_length', (YLeaf(YType.uint32, 'prefix-length'), ['int'])),
                            ('protocol', (YLeaf(YType.enumeration, 'protocol'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpEdmProtocol', '')])),
                            ('is_stale', (YLeaf(YType.boolean, 'is-stale'), ['bool'])),
                        ])
                        self.group_address = None
                        self.group_mask = None
                        self.prefix_length = None
                        self.protocol = None
                        self.is_stale = None

                        self.group_address_xr = Mld.Standby.DefaultContext.Ranges.Range.GroupAddressXr()
                        self.group_address_xr.parent = self
                        self._children_name_map["group_address_xr"] = "group-address-xr"
                        self._segment_path = lambda: "range"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/standby/default-context/ranges/%s" % self._segment_path()
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Mld.Standby.DefaultContext.Ranges.Range, ['group_address', 'group_mask', 'prefix_length', 'protocol', 'is_stale'], name, value)


                    class GroupAddressXr(_Entity_):
                        """
                        Group address
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Standby.DefaultContext.Ranges.Range.GroupAddressXr, self).__init__()

                            self.yang_name = "group-address-xr"
                            self.yang_parent_name = "range"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "group-address-xr"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/standby/default-context/ranges/range/%s" % self._segment_path()
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Standby.DefaultContext.Ranges.Range.GroupAddressXr, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Standby.DefaultContext.Ranges.Range.GroupAddressXr']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Mld.Standby.DefaultContext.Ranges.Range']['meta_info']

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Mld.Standby.DefaultContext.Ranges']['meta_info']


            class IfrsInterfaces(_Entity_):
                """
                IGMP Interface specific
                
                .. attribute:: ifrs_interface
                
                	IGMP IFRS Interface
                	**type**\: list of  		 :py:class:`IfrsInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.IfrsInterfaces.IfrsInterface>`
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Mld.Standby.DefaultContext.IfrsInterfaces, self).__init__()

                    self.yang_name = "ifrs-interfaces"
                    self.yang_parent_name = "default-context"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("ifrs-interface", ("ifrs_interface", Mld.Standby.DefaultContext.IfrsInterfaces.IfrsInterface))])
                    self._leafs = OrderedDict()

                    self.ifrs_interface = YList(self)
                    self._segment_path = lambda: "ifrs-interfaces"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/standby/default-context/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Mld.Standby.DefaultContext.IfrsInterfaces, [], name, value)


                class IfrsInterface(_Entity_):
                    """
                    IGMP IFRS Interface
                    
                    .. attribute:: interface_name  (key)
                    
                    	IFRS Interface Name
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: igmp_interface_entry
                    
                    	IGMP interface entry
                    	**type**\:  :py:class:`IgmpInterfaceEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry>`
                    
                    	**config**\: False
                    
                    .. attribute:: join_group_count
                    
                    	Join group count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Mld.Standby.DefaultContext.IfrsInterfaces.IfrsInterface, self).__init__()

                        self.yang_name = "ifrs-interface"
                        self.yang_parent_name = "ifrs-interfaces"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['interface_name']
                        self._child_classes = OrderedDict([("igmp-interface-entry", ("igmp_interface_entry", Mld.Standby.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry))])
                        self._leafs = OrderedDict([
                            ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                            ('join_group_count', (YLeaf(YType.uint32, 'join-group-count'), ['int'])),
                        ])
                        self.interface_name = None
                        self.join_group_count = None

                        self.igmp_interface_entry = Mld.Standby.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry()
                        self.igmp_interface_entry.parent = self
                        self._children_name_map["igmp_interface_entry"] = "igmp-interface-entry"
                        self._segment_path = lambda: "ifrs-interface" + "[interface-name='" + str(self.interface_name) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/standby/default-context/ifrs-interfaces/%s" % self._segment_path()
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Mld.Standby.DefaultContext.IfrsInterfaces.IfrsInterface, ['interface_name', 'join_group_count'], name, value)


                    class IgmpInterfaceEntry(_Entity_):
                        """
                        IGMP interface entry
                        
                        .. attribute:: address
                        
                        	IP address
                        	**type**\:  :py:class:`Address <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.Address>`
                        
                        	**config**\: False
                        
                        .. attribute:: querier_address
                        
                        	Address of the Querier
                        	**type**\:  :py:class:`QuerierAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.QuerierAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: subscriber_address
                        
                        	Address of subscriber
                        	**type**\:  :py:class:`SubscriberAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.SubscriberAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: interface_name_xr
                        
                        	Interface
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: state
                        
                        	Interface state
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: prefix_length
                        
                        	Prefix length
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_interface_up
                        
                        	Is interface up
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_ip_enabled
                        
                        	Is IP enabled
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_router_enabled
                        
                        	Is Router functionality enabled
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: igmp_version
                        
                        	IGMP Router version
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        	**config**\: False
                        
                        .. attribute:: host_version
                        
                        	IGMP Host version
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        	**config**\: False
                        
                        .. attribute:: query_interval
                        
                        	Query Interval value in seconds
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        	**units**\: second
                        
                        .. attribute:: query_timeout
                        
                        	Query Timeout value
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: query_maximum_response_time
                        
                        	Max Response Timeout value
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: last_member_query_interval
                        
                        	Last Member Query Interval
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: group_joins
                        
                        	No. of group joins
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: group_leaves
                        
                        	No. of group leaves
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_querier
                        
                        	Are we querier
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: total_active_groups
                        
                        	Actual number of groups on interface
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: robustness
                        
                        	Robustness Variable value
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: proxy_interface
                        
                        	Proxy interface index
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: querier_uptime
                        
                        	Time since the last querier took over
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: las_ll_registration_count
                        
                        	LAS reg count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_get_address_count
                        
                        	LAS get addr count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_update_count
                        
                        	LAS Update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_ll_remove_update_count
                        
                        	LAS LL remove update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_ll_add_update_count
                        
                        	LAS LL add update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_null_update_count
                        
                        	LAS Null update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_unregistration_count
                        
                        	LAS unreg count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_las_request
                        
                        	LAS req
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_las_registered
                        
                        	LAS registered
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: vrf_id
                        
                        	VRF id
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: mte_vrf_id
                        
                        	MTE VRF id
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: location
                        
                        	Location
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: mtu
                        
                        	MTU
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: vrf_state
                        
                        	Vrf State
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_configurationverify
                        
                        	CFG verify
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configurationvrf_set
                        
                        	CFG vrf set
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configurationvrf_error
                        
                        	CFG vrf error
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configuration_mcast_vrf_set
                        
                        	Is mcast set
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configuration_mcast_vrf_error
                        
                        	Is mcast error
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_im_state_registered
                        
                        	Im state registered
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_subscriber
                        
                        	Subscriber interface
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: subscriber_mode
                        
                        	Subscriber mode
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_identity_present
                        
                        	Subscriber ID or Address available from AAA
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: subscriber_id
                        
                        	ID string of subscriber
                        	**type**\: str
                        
                        	**length:** 0..257
                        
                        	**config**\: False
                        
                        .. attribute:: parent_ifhandle
                        
                        	Parent If Handle
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: time_since_last_query_in_seconds
                        
                        	Time elapsed since last query
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: time_since_last_report_in_seconds
                        
                        	Time elapsed since last report
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: router_uptime_in_seconds
                        
                        	Uptime since router enabled event
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: mte_tuple_count
                        
                        	MTE Tuple count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Standby.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry, self).__init__()

                            self.yang_name = "igmp-interface-entry"
                            self.yang_parent_name = "ifrs-interface"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("address", ("address", Mld.Standby.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.Address)), ("querier-address", ("querier_address", Mld.Standby.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.QuerierAddress)), ("subscriber-address", ("subscriber_address", Mld.Standby.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.SubscriberAddress))])
                            self._leafs = OrderedDict([
                                ('interface_name_xr', (YLeaf(YType.str, 'interface-name-xr'), ['str'])),
                                ('state', (YLeaf(YType.uint32, 'state'), ['int'])),
                                ('prefix_length', (YLeaf(YType.uint32, 'prefix-length'), ['int'])),
                                ('is_interface_up', (YLeaf(YType.boolean, 'is-interface-up'), ['bool'])),
                                ('is_ip_enabled', (YLeaf(YType.boolean, 'is-ip-enabled'), ['bool'])),
                                ('is_router_enabled', (YLeaf(YType.boolean, 'is-router-enabled'), ['bool'])),
                                ('igmp_version', (YLeaf(YType.uint8, 'igmp-version'), ['int'])),
                                ('host_version', (YLeaf(YType.uint8, 'host-version'), ['int'])),
                                ('query_interval', (YLeaf(YType.uint16, 'query-interval'), ['int'])),
                                ('query_timeout', (YLeaf(YType.uint16, 'query-timeout'), ['int'])),
                                ('query_maximum_response_time', (YLeaf(YType.uint16, 'query-maximum-response-time'), ['int'])),
                                ('last_member_query_interval', (YLeaf(YType.uint16, 'last-member-query-interval'), ['int'])),
                                ('group_joins', (YLeaf(YType.uint32, 'group-joins'), ['int'])),
                                ('group_leaves', (YLeaf(YType.uint32, 'group-leaves'), ['int'])),
                                ('is_querier', (YLeaf(YType.boolean, 'is-querier'), ['bool'])),
                                ('total_active_groups', (YLeaf(YType.uint32, 'total-active-groups'), ['int'])),
                                ('robustness', (YLeaf(YType.uint32, 'robustness'), ['int'])),
                                ('proxy_interface', (YLeaf(YType.str, 'proxy-interface'), ['str'])),
                                ('querier_uptime', (YLeaf(YType.uint16, 'querier-uptime'), ['int'])),
                                ('las_ll_registration_count', (YLeaf(YType.uint32, 'las-ll-registration-count'), ['int'])),
                                ('las_get_address_count', (YLeaf(YType.uint32, 'las-get-address-count'), ['int'])),
                                ('las_update_count', (YLeaf(YType.uint32, 'las-update-count'), ['int'])),
                                ('las_ll_remove_update_count', (YLeaf(YType.uint32, 'las-ll-remove-update-count'), ['int'])),
                                ('las_ll_add_update_count', (YLeaf(YType.uint32, 'las-ll-add-update-count'), ['int'])),
                                ('las_null_update_count', (YLeaf(YType.uint32, 'las-null-update-count'), ['int'])),
                                ('las_unregistration_count', (YLeaf(YType.uint32, 'las-unregistration-count'), ['int'])),
                                ('is_las_request', (YLeaf(YType.boolean, 'is-las-request'), ['bool'])),
                                ('is_las_registered', (YLeaf(YType.boolean, 'is-las-registered'), ['bool'])),
                                ('vrf_id', (YLeaf(YType.uint32, 'vrf-id'), ['int'])),
                                ('mte_vrf_id', (YLeaf(YType.uint32, 'mte-vrf-id'), ['int'])),
                                ('location', (YLeaf(YType.uint32, 'location'), ['int'])),
                                ('mtu', (YLeaf(YType.uint32, 'mtu'), ['int'])),
                                ('vrf_state', (YLeaf(YType.uint32, 'vrf-state'), ['int'])),
                                ('is_configurationverify', (YLeaf(YType.boolean, 'is-configurationverify'), ['bool'])),
                                ('configurationvrf_set', (YLeaf(YType.boolean, 'configurationvrf-set'), ['bool'])),
                                ('configurationvrf_error', (YLeaf(YType.boolean, 'configurationvrf-error'), ['bool'])),
                                ('configuration_mcast_vrf_set', (YLeaf(YType.boolean, 'configuration-mcast-vrf-set'), ['bool'])),
                                ('configuration_mcast_vrf_error', (YLeaf(YType.boolean, 'configuration-mcast-vrf-error'), ['bool'])),
                                ('is_im_state_registered', (YLeaf(YType.boolean, 'is-im-state-registered'), ['bool'])),
                                ('is_subscriber', (YLeaf(YType.boolean, 'is-subscriber'), ['bool'])),
                                ('subscriber_mode', (YLeaf(YType.uint32, 'subscriber-mode'), ['int'])),
                                ('is_identity_present', (YLeaf(YType.boolean, 'is-identity-present'), ['bool'])),
                                ('subscriber_id', (YLeaf(YType.str, 'subscriber-id'), ['str'])),
                                ('parent_ifhandle', (YLeaf(YType.str, 'parent-ifhandle'), ['str'])),
                                ('time_since_last_query_in_seconds', (YLeaf(YType.uint32, 'time-since-last-query-in-seconds'), ['int'])),
                                ('time_since_last_report_in_seconds', (YLeaf(YType.uint32, 'time-since-last-report-in-seconds'), ['int'])),
                                ('router_uptime_in_seconds', (YLeaf(YType.uint32, 'router-uptime-in-seconds'), ['int'])),
                                ('mte_tuple_count', (YLeaf(YType.uint32, 'mte-tuple-count'), ['int'])),
                            ])
                            self.interface_name_xr = None
                            self.state = None
                            self.prefix_length = None
                            self.is_interface_up = None
                            self.is_ip_enabled = None
                            self.is_router_enabled = None
                            self.igmp_version = None
                            self.host_version = None
                            self.query_interval = None
                            self.query_timeout = None
                            self.query_maximum_response_time = None
                            self.last_member_query_interval = None
                            self.group_joins = None
                            self.group_leaves = None
                            self.is_querier = None
                            self.total_active_groups = None
                            self.robustness = None
                            self.proxy_interface = None
                            self.querier_uptime = None
                            self.las_ll_registration_count = None
                            self.las_get_address_count = None
                            self.las_update_count = None
                            self.las_ll_remove_update_count = None
                            self.las_ll_add_update_count = None
                            self.las_null_update_count = None
                            self.las_unregistration_count = None
                            self.is_las_request = None
                            self.is_las_registered = None
                            self.vrf_id = None
                            self.mte_vrf_id = None
                            self.location = None
                            self.mtu = None
                            self.vrf_state = None
                            self.is_configurationverify = None
                            self.configurationvrf_set = None
                            self.configurationvrf_error = None
                            self.configuration_mcast_vrf_set = None
                            self.configuration_mcast_vrf_error = None
                            self.is_im_state_registered = None
                            self.is_subscriber = None
                            self.subscriber_mode = None
                            self.is_identity_present = None
                            self.subscriber_id = None
                            self.parent_ifhandle = None
                            self.time_since_last_query_in_seconds = None
                            self.time_since_last_report_in_seconds = None
                            self.router_uptime_in_seconds = None
                            self.mte_tuple_count = None

                            self.address = Mld.Standby.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.Address()
                            self.address.parent = self
                            self._children_name_map["address"] = "address"

                            self.querier_address = Mld.Standby.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.QuerierAddress()
                            self.querier_address.parent = self
                            self._children_name_map["querier_address"] = "querier-address"

                            self.subscriber_address = Mld.Standby.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.SubscriberAddress()
                            self.subscriber_address.parent = self
                            self._children_name_map["subscriber_address"] = "subscriber-address"
                            self._segment_path = lambda: "igmp-interface-entry"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Standby.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry, ['interface_name_xr', 'state', 'prefix_length', 'is_interface_up', 'is_ip_enabled', 'is_router_enabled', 'igmp_version', 'host_version', 'query_interval', 'query_timeout', 'query_maximum_response_time', 'last_member_query_interval', 'group_joins', 'group_leaves', 'is_querier', 'total_active_groups', 'robustness', 'proxy_interface', 'querier_uptime', 'las_ll_registration_count', 'las_get_address_count', 'las_update_count', 'las_ll_remove_update_count', 'las_ll_add_update_count', 'las_null_update_count', 'las_unregistration_count', 'is_las_request', 'is_las_registered', 'vrf_id', 'mte_vrf_id', 'location', 'mtu', 'vrf_state', 'is_configurationverify', 'configurationvrf_set', 'configurationvrf_error', 'configuration_mcast_vrf_set', 'configuration_mcast_vrf_error', 'is_im_state_registered', 'is_subscriber', 'subscriber_mode', 'is_identity_present', 'subscriber_id', 'parent_ifhandle', 'time_since_last_query_in_seconds', 'time_since_last_report_in_seconds', 'router_uptime_in_seconds', 'mte_tuple_count'], name, value)


                        class Address(_Entity_):
                            """
                            IP address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Standby.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.Address, self).__init__()

                                self.yang_name = "address"
                                self.yang_parent_name = "igmp-interface-entry"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Standby.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.Address, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Standby.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.Address']['meta_info']


                        class QuerierAddress(_Entity_):
                            """
                            Address of the Querier
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Standby.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.QuerierAddress, self).__init__()

                                self.yang_name = "querier-address"
                                self.yang_parent_name = "igmp-interface-entry"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "querier-address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Standby.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.QuerierAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Standby.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.QuerierAddress']['meta_info']


                        class SubscriberAddress(_Entity_):
                            """
                            Address of subscriber
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Standby.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.SubscriberAddress, self).__init__()

                                self.yang_name = "subscriber-address"
                                self.yang_parent_name = "igmp-interface-entry"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "subscriber-address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Standby.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.SubscriberAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Standby.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.SubscriberAddress']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Standby.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Mld.Standby.DefaultContext.IfrsInterfaces.IfrsInterface']['meta_info']

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Mld.Standby.DefaultContext.IfrsInterfaces']['meta_info']


            class TrafficCounters(_Entity_):
                """
                IGMP Message Traffic Counters
                
                .. attribute:: elapsed_time
                
                	Running time for counters
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: packets_in
                
                	Packets in
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: packets_out
                
                	Packets out
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: format_errors
                
                	Malformed packets in
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: packet_manager_input_errors
                
                	Incoming Packet Manager packets dropped
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: packet_manager_output_errors
                
                	Outgoing Packet Manager packets dropped
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: checksum_errors
                
                	Checksum errors
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: receive_socket_errors
                
                	Socket errors on reception
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: socket_errors
                
                	Socket errors on send
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: bad_scope_errors
                
                	BadScope errors
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: auxillary_data_length_errors
                
                	AuxDataLen errors
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: invalid_source_address_errors
                
                	Invalid Source Address errors
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: no_socket_connection
                
                	Packets dropped since no socket connection
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: miscellaneous_errors
                
                	Packets dropped for other reasons
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: input_queries
                
                	Query packets in
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: input_reports
                
                	Reports in
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: input_leaves
                
                	Leaves in
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: input_mtrace
                
                	Mtrace packets in
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: input_dvmrp
                
                	DVMRP packets in
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: input_pim
                
                	PIM packets in
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: output_queries
                
                	Query packets out
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: output_reports
                
                	Reports out
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: output_leaves
                
                	Leaves out
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: output_mtrace
                
                	Mtrace packets out
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: output_dvmrp
                
                	DVMRP packets out
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: output_pim
                
                	PIM packets out
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: get_packet_failure
                
                	Packet get failed
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: output_no_parent_interface_handle
                
                	Failures setting 2nd ifhandle
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: input_no_idb
                
                	Packets received without idb
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: input_no_vrf_in_idb
                
                	Packets received on idb without VRF
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: input_disabled_idb
                
                	Packet received on disabled idb
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: input_martian_address
                
                	Packets received with Martian Address
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: input_no_assigned_vrf_id
                
                	Packets received with no assigned vrf id
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: input_no_vrf_mtrace
                
                	mtrace packets with no vrf associated
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: input_no_platform_support_mtrace
                
                	mtrace packets without platform support
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Mld.Standby.DefaultContext.TrafficCounters, self).__init__()

                    self.yang_name = "traffic-counters"
                    self.yang_parent_name = "default-context"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('elapsed_time', (YLeaf(YType.uint32, 'elapsed-time'), ['int'])),
                        ('packets_in', (YLeaf(YType.uint32, 'packets-in'), ['int'])),
                        ('packets_out', (YLeaf(YType.uint32, 'packets-out'), ['int'])),
                        ('format_errors', (YLeaf(YType.uint32, 'format-errors'), ['int'])),
                        ('packet_manager_input_errors', (YLeaf(YType.uint32, 'packet-manager-input-errors'), ['int'])),
                        ('packet_manager_output_errors', (YLeaf(YType.uint32, 'packet-manager-output-errors'), ['int'])),
                        ('checksum_errors', (YLeaf(YType.uint32, 'checksum-errors'), ['int'])),
                        ('receive_socket_errors', (YLeaf(YType.uint32, 'receive-socket-errors'), ['int'])),
                        ('socket_errors', (YLeaf(YType.uint32, 'socket-errors'), ['int'])),
                        ('bad_scope_errors', (YLeaf(YType.uint32, 'bad-scope-errors'), ['int'])),
                        ('auxillary_data_length_errors', (YLeaf(YType.uint32, 'auxillary-data-length-errors'), ['int'])),
                        ('invalid_source_address_errors', (YLeaf(YType.uint32, 'invalid-source-address-errors'), ['int'])),
                        ('no_socket_connection', (YLeaf(YType.uint32, 'no-socket-connection'), ['int'])),
                        ('miscellaneous_errors', (YLeaf(YType.uint32, 'miscellaneous-errors'), ['int'])),
                        ('input_queries', (YLeaf(YType.uint32, 'input-queries'), ['int'])),
                        ('input_reports', (YLeaf(YType.uint32, 'input-reports'), ['int'])),
                        ('input_leaves', (YLeaf(YType.uint32, 'input-leaves'), ['int'])),
                        ('input_mtrace', (YLeaf(YType.uint32, 'input-mtrace'), ['int'])),
                        ('input_dvmrp', (YLeaf(YType.uint32, 'input-dvmrp'), ['int'])),
                        ('input_pim', (YLeaf(YType.uint32, 'input-pim'), ['int'])),
                        ('output_queries', (YLeaf(YType.uint32, 'output-queries'), ['int'])),
                        ('output_reports', (YLeaf(YType.uint32, 'output-reports'), ['int'])),
                        ('output_leaves', (YLeaf(YType.uint32, 'output-leaves'), ['int'])),
                        ('output_mtrace', (YLeaf(YType.uint32, 'output-mtrace'), ['int'])),
                        ('output_dvmrp', (YLeaf(YType.uint32, 'output-dvmrp'), ['int'])),
                        ('output_pim', (YLeaf(YType.uint32, 'output-pim'), ['int'])),
                        ('get_packet_failure', (YLeaf(YType.uint32, 'get-packet-failure'), ['int'])),
                        ('output_no_parent_interface_handle', (YLeaf(YType.uint32, 'output-no-parent-interface-handle'), ['int'])),
                        ('input_no_idb', (YLeaf(YType.uint32, 'input-no-idb'), ['int'])),
                        ('input_no_vrf_in_idb', (YLeaf(YType.uint32, 'input-no-vrf-in-idb'), ['int'])),
                        ('input_disabled_idb', (YLeaf(YType.uint32, 'input-disabled-idb'), ['int'])),
                        ('input_martian_address', (YLeaf(YType.uint32, 'input-martian-address'), ['int'])),
                        ('input_no_assigned_vrf_id', (YLeaf(YType.uint32, 'input-no-assigned-vrf-id'), ['int'])),
                        ('input_no_vrf_mtrace', (YLeaf(YType.uint32, 'input-no-vrf-mtrace'), ['int'])),
                        ('input_no_platform_support_mtrace', (YLeaf(YType.uint32, 'input-no-platform-support-mtrace'), ['int'])),
                    ])
                    self.elapsed_time = None
                    self.packets_in = None
                    self.packets_out = None
                    self.format_errors = None
                    self.packet_manager_input_errors = None
                    self.packet_manager_output_errors = None
                    self.checksum_errors = None
                    self.receive_socket_errors = None
                    self.socket_errors = None
                    self.bad_scope_errors = None
                    self.auxillary_data_length_errors = None
                    self.invalid_source_address_errors = None
                    self.no_socket_connection = None
                    self.miscellaneous_errors = None
                    self.input_queries = None
                    self.input_reports = None
                    self.input_leaves = None
                    self.input_mtrace = None
                    self.input_dvmrp = None
                    self.input_pim = None
                    self.output_queries = None
                    self.output_reports = None
                    self.output_leaves = None
                    self.output_mtrace = None
                    self.output_dvmrp = None
                    self.output_pim = None
                    self.get_packet_failure = None
                    self.output_no_parent_interface_handle = None
                    self.input_no_idb = None
                    self.input_no_vrf_in_idb = None
                    self.input_disabled_idb = None
                    self.input_martian_address = None
                    self.input_no_assigned_vrf_id = None
                    self.input_no_vrf_mtrace = None
                    self.input_no_platform_support_mtrace = None
                    self._segment_path = lambda: "traffic-counters"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/standby/default-context/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Mld.Standby.DefaultContext.TrafficCounters, ['elapsed_time', 'packets_in', 'packets_out', 'format_errors', 'packet_manager_input_errors', 'packet_manager_output_errors', 'checksum_errors', 'receive_socket_errors', 'socket_errors', 'bad_scope_errors', 'auxillary_data_length_errors', 'invalid_source_address_errors', 'no_socket_connection', 'miscellaneous_errors', 'input_queries', 'input_reports', 'input_leaves', 'input_mtrace', 'input_dvmrp', 'input_pim', 'output_queries', 'output_reports', 'output_leaves', 'output_mtrace', 'output_dvmrp', 'output_pim', 'get_packet_failure', 'output_no_parent_interface_handle', 'input_no_idb', 'input_no_vrf_in_idb', 'input_disabled_idb', 'input_martian_address', 'input_no_assigned_vrf_id', 'input_no_vrf_mtrace', 'input_no_platform_support_mtrace'], name, value)

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Mld.Standby.DefaultContext.TrafficCounters']['meta_info']


            class Groups(_Entity_):
                """
                IGMP Group Database Table
                
                .. attribute:: group
                
                	IGMP Group Entry Information
                	**type**\: list of  		 :py:class:`Group <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.Groups.Group>`
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Mld.Standby.DefaultContext.Groups, self).__init__()

                    self.yang_name = "groups"
                    self.yang_parent_name = "default-context"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("group", ("group", Mld.Standby.DefaultContext.Groups.Group))])
                    self._leafs = OrderedDict()

                    self.group = YList(self)
                    self._segment_path = lambda: "groups"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/standby/default-context/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Mld.Standby.DefaultContext.Groups, [], name, value)


                class Group(_Entity_):
                    """
                    IGMP Group Entry Information
                    
                    .. attribute:: group_address
                    
                    	Group Address
                    	**type**\: union of the below types:
                    
                    		**type**\: str
                    
                    			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    		**type**\: str
                    
                    			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    	**config**\: False
                    
                    .. attribute:: interface_name
                    
                    	Interface Name
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: group_address_xr
                    
                    	Group Address
                    	**type**\:  :py:class:`GroupAddressXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.Groups.Group.GroupAddressXr>`
                    
                    	**config**\: False
                    
                    .. attribute:: last_reporter
                    
                    	Last reporter address
                    	**type**\:  :py:class:`LastReporter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.Groups.Group.LastReporter>`
                    
                    	**config**\: False
                    
                    .. attribute:: source_address
                    
                    	Source Address
                    	**type**\:  :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.Groups.Group.SourceAddress>`
                    
                    	**config**\: False
                    
                    .. attribute:: interface_name_xr
                    
                    	Interface
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: uptime
                    
                    	Uptime in seconds
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**config**\: False
                    
                    	**units**\: second
                    
                    .. attribute:: expiration_time
                    
                    	Expiration time in seconds
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    	**config**\: False
                    
                    	**units**\: second
                    
                    .. attribute:: explicit_tracking_enabled
                    
                    	Is explicit tracking enabled
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_self_join
                    
                    	If local system is member of this group on this interface
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: row_status
                    
                    	interface on or off for the group
                    	**type**\: str
                    
                    	**length:** 0..16
                    
                    	**config**\: False
                    
                    .. attribute:: is_low_memory
                    
                    	Node is running low on memory
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: router_filter_mode
                    
                    	Filter mode
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    	**config**\: False
                    
                    .. attribute:: older_host_version1_timer
                    
                    	IGMP Hostversion1timer
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: older_host_version2_timer
                    
                    	IGMP Hostversion2timer
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_added
                    
                    	Joined
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_suppressed
                    
                    	Suppressed
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Mld.Standby.DefaultContext.Groups.Group, self).__init__()

                        self.yang_name = "group"
                        self.yang_parent_name = "groups"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("group-address-xr", ("group_address_xr", Mld.Standby.DefaultContext.Groups.Group.GroupAddressXr)), ("last-reporter", ("last_reporter", Mld.Standby.DefaultContext.Groups.Group.LastReporter)), ("source-address", ("source_address", Mld.Standby.DefaultContext.Groups.Group.SourceAddress))])
                        self._leafs = OrderedDict([
                            ('group_address', (YLeaf(YType.str, 'group-address'), ['str','str'])),
                            ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                            ('interface_name_xr', (YLeaf(YType.str, 'interface-name-xr'), ['str'])),
                            ('uptime', (YLeaf(YType.uint64, 'uptime'), ['int'])),
                            ('expiration_time', (YLeaf(YType.int32, 'expiration-time'), ['int'])),
                            ('explicit_tracking_enabled', (YLeaf(YType.boolean, 'explicit-tracking-enabled'), ['bool'])),
                            ('is_self_join', (YLeaf(YType.boolean, 'is-self-join'), ['bool'])),
                            ('row_status', (YLeaf(YType.str, 'row-status'), ['str'])),
                            ('is_low_memory', (YLeaf(YType.boolean, 'is-low-memory'), ['bool'])),
                            ('router_filter_mode', (YLeaf(YType.uint8, 'router-filter-mode'), ['int'])),
                            ('older_host_version1_timer', (YLeaf(YType.uint32, 'older-host-version1-timer'), ['int'])),
                            ('older_host_version2_timer', (YLeaf(YType.uint32, 'older-host-version2-timer'), ['int'])),
                            ('is_added', (YLeaf(YType.boolean, 'is-added'), ['bool'])),
                            ('is_suppressed', (YLeaf(YType.boolean, 'is-suppressed'), ['bool'])),
                        ])
                        self.group_address = None
                        self.interface_name = None
                        self.interface_name_xr = None
                        self.uptime = None
                        self.expiration_time = None
                        self.explicit_tracking_enabled = None
                        self.is_self_join = None
                        self.row_status = None
                        self.is_low_memory = None
                        self.router_filter_mode = None
                        self.older_host_version1_timer = None
                        self.older_host_version2_timer = None
                        self.is_added = None
                        self.is_suppressed = None

                        self.group_address_xr = Mld.Standby.DefaultContext.Groups.Group.GroupAddressXr()
                        self.group_address_xr.parent = self
                        self._children_name_map["group_address_xr"] = "group-address-xr"

                        self.last_reporter = Mld.Standby.DefaultContext.Groups.Group.LastReporter()
                        self.last_reporter.parent = self
                        self._children_name_map["last_reporter"] = "last-reporter"

                        self.source_address = Mld.Standby.DefaultContext.Groups.Group.SourceAddress()
                        self.source_address.parent = self
                        self._children_name_map["source_address"] = "source-address"
                        self._segment_path = lambda: "group"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/standby/default-context/groups/%s" % self._segment_path()
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Mld.Standby.DefaultContext.Groups.Group, ['group_address', 'interface_name', 'interface_name_xr', 'uptime', 'expiration_time', 'explicit_tracking_enabled', 'is_self_join', 'row_status', 'is_low_memory', 'router_filter_mode', 'older_host_version1_timer', 'older_host_version2_timer', 'is_added', 'is_suppressed'], name, value)


                    class GroupAddressXr(_Entity_):
                        """
                        Group Address
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Standby.DefaultContext.Groups.Group.GroupAddressXr, self).__init__()

                            self.yang_name = "group-address-xr"
                            self.yang_parent_name = "group"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "group-address-xr"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/standby/default-context/groups/group/%s" % self._segment_path()
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Standby.DefaultContext.Groups.Group.GroupAddressXr, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Standby.DefaultContext.Groups.Group.GroupAddressXr']['meta_info']


                    class LastReporter(_Entity_):
                        """
                        Last reporter address
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Standby.DefaultContext.Groups.Group.LastReporter, self).__init__()

                            self.yang_name = "last-reporter"
                            self.yang_parent_name = "group"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "last-reporter"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/standby/default-context/groups/group/%s" % self._segment_path()
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Standby.DefaultContext.Groups.Group.LastReporter, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Standby.DefaultContext.Groups.Group.LastReporter']['meta_info']


                    class SourceAddress(_Entity_):
                        """
                        Source Address
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Standby.DefaultContext.Groups.Group.SourceAddress, self).__init__()

                            self.yang_name = "source-address"
                            self.yang_parent_name = "group"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "source-address"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/standby/default-context/groups/group/%s" % self._segment_path()
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Standby.DefaultContext.Groups.Group.SourceAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Standby.DefaultContext.Groups.Group.SourceAddress']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Mld.Standby.DefaultContext.Groups.Group']['meta_info']

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Mld.Standby.DefaultContext.Groups']['meta_info']


            class GroupSummary(_Entity_):
                """
                IGMP Groups Summary
                
                .. attribute:: groutes
                
                	No. of (\*,G) routes
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: sg_routes
                
                	No. of (S,G) routes
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: group_count
                
                	Current groups accepted
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: is_low_memory
                
                	Node is running low on memory
                	**type**\: bool
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Mld.Standby.DefaultContext.GroupSummary, self).__init__()

                    self.yang_name = "group-summary"
                    self.yang_parent_name = "default-context"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('groutes', (YLeaf(YType.uint32, 'groutes'), ['int'])),
                        ('sg_routes', (YLeaf(YType.uint32, 'sg-routes'), ['int'])),
                        ('group_count', (YLeaf(YType.uint32, 'group-count'), ['int'])),
                        ('is_low_memory', (YLeaf(YType.boolean, 'is-low-memory'), ['bool'])),
                    ])
                    self.groutes = None
                    self.sg_routes = None
                    self.group_count = None
                    self.is_low_memory = None
                    self._segment_path = lambda: "group-summary"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/standby/default-context/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Mld.Standby.DefaultContext.GroupSummary, ['groutes', 'sg_routes', 'group_count', 'is_low_memory'], name, value)

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Mld.Standby.DefaultContext.GroupSummary']['meta_info']


            class IfrsInterfaceSummary(_Entity_):
                """
                IGMP IFRS Interface summary
                
                .. attribute:: interface_count
                
                	Interface Count
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: configuration_count
                
                	Configuration count
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Mld.Standby.DefaultContext.IfrsInterfaceSummary, self).__init__()

                    self.yang_name = "ifrs-interface-summary"
                    self.yang_parent_name = "default-context"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('interface_count', (YLeaf(YType.uint32, 'interface-count'), ['int'])),
                        ('configuration_count', (YLeaf(YType.uint32, 'configuration-count'), ['int'])),
                    ])
                    self.interface_count = None
                    self.configuration_count = None
                    self._segment_path = lambda: "ifrs-interface-summary"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/standby/default-context/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Mld.Standby.DefaultContext.IfrsInterfaceSummary, ['interface_count', 'configuration_count'], name, value)

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Mld.Standby.DefaultContext.IfrsInterfaceSummary']['meta_info']


            class GlobalInterfaceTable(_Entity_):
                """
                IGMP Global Interface 
                
                .. attribute:: interface
                
                	IGMP Interface
                	**type**\: list of  		 :py:class:`Interface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.GlobalInterfaceTable.Interface>`
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Mld.Standby.DefaultContext.GlobalInterfaceTable, self).__init__()

                    self.yang_name = "global-interface-table"
                    self.yang_parent_name = "default-context"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("interface", ("interface", Mld.Standby.DefaultContext.GlobalInterfaceTable.Interface))])
                    self._leafs = OrderedDict()

                    self.interface = YList(self)
                    self._segment_path = lambda: "global-interface-table"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/standby/default-context/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Mld.Standby.DefaultContext.GlobalInterfaceTable, [], name, value)


                class Interface(_Entity_):
                    """
                    IGMP Interface
                    
                    .. attribute:: interface_name  (key)
                    
                    	Interface Name
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: address
                    
                    	IP address
                    	**type**\:  :py:class:`Address <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.GlobalInterfaceTable.Interface.Address>`
                    
                    	**config**\: False
                    
                    .. attribute:: querier_address
                    
                    	Address of the Querier
                    	**type**\:  :py:class:`QuerierAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.GlobalInterfaceTable.Interface.QuerierAddress>`
                    
                    	**config**\: False
                    
                    .. attribute:: subscriber_address
                    
                    	Address of subscriber
                    	**type**\:  :py:class:`SubscriberAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.GlobalInterfaceTable.Interface.SubscriberAddress>`
                    
                    	**config**\: False
                    
                    .. attribute:: interface_name_xr
                    
                    	Interface
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: state
                    
                    	Interface state
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: prefix_length
                    
                    	Prefix length
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_interface_up
                    
                    	Is interface up
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_ip_enabled
                    
                    	Is IP enabled
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_router_enabled
                    
                    	Is Router functionality enabled
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: igmp_version
                    
                    	IGMP Router version
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    	**config**\: False
                    
                    .. attribute:: host_version
                    
                    	IGMP Host version
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    	**config**\: False
                    
                    .. attribute:: query_interval
                    
                    	Query Interval value in seconds
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    	**units**\: second
                    
                    .. attribute:: query_timeout
                    
                    	Query Timeout value
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    .. attribute:: query_maximum_response_time
                    
                    	Max Response Timeout value
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    .. attribute:: last_member_query_interval
                    
                    	Last Member Query Interval
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    .. attribute:: group_joins
                    
                    	No. of group joins
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: group_leaves
                    
                    	No. of group leaves
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_querier
                    
                    	Are we querier
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: total_active_groups
                    
                    	Actual number of groups on interface
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: robustness
                    
                    	Robustness Variable value
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: proxy_interface
                    
                    	Proxy interface index
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: querier_uptime
                    
                    	Time since the last querier took over
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    .. attribute:: las_ll_registration_count
                    
                    	LAS reg count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_get_address_count
                    
                    	LAS get addr count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_update_count
                    
                    	LAS Update count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_ll_remove_update_count
                    
                    	LAS LL remove update count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_ll_add_update_count
                    
                    	LAS LL add update count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_null_update_count
                    
                    	LAS Null update count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_unregistration_count
                    
                    	LAS unreg count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_las_request
                    
                    	LAS req
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_las_registered
                    
                    	LAS registered
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: vrf_id
                    
                    	VRF id
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: mte_vrf_id
                    
                    	MTE VRF id
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: location
                    
                    	Location
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: mtu
                    
                    	MTU
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: vrf_state
                    
                    	Vrf State
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_configurationverify
                    
                    	CFG verify
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: configurationvrf_set
                    
                    	CFG vrf set
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: configurationvrf_error
                    
                    	CFG vrf error
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: configuration_mcast_vrf_set
                    
                    	Is mcast set
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: configuration_mcast_vrf_error
                    
                    	Is mcast error
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_im_state_registered
                    
                    	Im state registered
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_subscriber
                    
                    	Subscriber interface
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: subscriber_mode
                    
                    	Subscriber mode
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_identity_present
                    
                    	Subscriber ID or Address available from AAA
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: subscriber_id
                    
                    	ID string of subscriber
                    	**type**\: str
                    
                    	**length:** 0..257
                    
                    	**config**\: False
                    
                    .. attribute:: parent_ifhandle
                    
                    	Parent If Handle
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: time_since_last_query_in_seconds
                    
                    	Time elapsed since last query
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: time_since_last_report_in_seconds
                    
                    	Time elapsed since last report
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: router_uptime_in_seconds
                    
                    	Uptime since router enabled event
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: mte_tuple_count
                    
                    	MTE Tuple count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Mld.Standby.DefaultContext.GlobalInterfaceTable.Interface, self).__init__()

                        self.yang_name = "interface"
                        self.yang_parent_name = "global-interface-table"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['interface_name']
                        self._child_classes = OrderedDict([("address", ("address", Mld.Standby.DefaultContext.GlobalInterfaceTable.Interface.Address)), ("querier-address", ("querier_address", Mld.Standby.DefaultContext.GlobalInterfaceTable.Interface.QuerierAddress)), ("subscriber-address", ("subscriber_address", Mld.Standby.DefaultContext.GlobalInterfaceTable.Interface.SubscriberAddress))])
                        self._leafs = OrderedDict([
                            ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                            ('interface_name_xr', (YLeaf(YType.str, 'interface-name-xr'), ['str'])),
                            ('state', (YLeaf(YType.uint32, 'state'), ['int'])),
                            ('prefix_length', (YLeaf(YType.uint32, 'prefix-length'), ['int'])),
                            ('is_interface_up', (YLeaf(YType.boolean, 'is-interface-up'), ['bool'])),
                            ('is_ip_enabled', (YLeaf(YType.boolean, 'is-ip-enabled'), ['bool'])),
                            ('is_router_enabled', (YLeaf(YType.boolean, 'is-router-enabled'), ['bool'])),
                            ('igmp_version', (YLeaf(YType.uint8, 'igmp-version'), ['int'])),
                            ('host_version', (YLeaf(YType.uint8, 'host-version'), ['int'])),
                            ('query_interval', (YLeaf(YType.uint16, 'query-interval'), ['int'])),
                            ('query_timeout', (YLeaf(YType.uint16, 'query-timeout'), ['int'])),
                            ('query_maximum_response_time', (YLeaf(YType.uint16, 'query-maximum-response-time'), ['int'])),
                            ('last_member_query_interval', (YLeaf(YType.uint16, 'last-member-query-interval'), ['int'])),
                            ('group_joins', (YLeaf(YType.uint32, 'group-joins'), ['int'])),
                            ('group_leaves', (YLeaf(YType.uint32, 'group-leaves'), ['int'])),
                            ('is_querier', (YLeaf(YType.boolean, 'is-querier'), ['bool'])),
                            ('total_active_groups', (YLeaf(YType.uint32, 'total-active-groups'), ['int'])),
                            ('robustness', (YLeaf(YType.uint32, 'robustness'), ['int'])),
                            ('proxy_interface', (YLeaf(YType.str, 'proxy-interface'), ['str'])),
                            ('querier_uptime', (YLeaf(YType.uint16, 'querier-uptime'), ['int'])),
                            ('las_ll_registration_count', (YLeaf(YType.uint32, 'las-ll-registration-count'), ['int'])),
                            ('las_get_address_count', (YLeaf(YType.uint32, 'las-get-address-count'), ['int'])),
                            ('las_update_count', (YLeaf(YType.uint32, 'las-update-count'), ['int'])),
                            ('las_ll_remove_update_count', (YLeaf(YType.uint32, 'las-ll-remove-update-count'), ['int'])),
                            ('las_ll_add_update_count', (YLeaf(YType.uint32, 'las-ll-add-update-count'), ['int'])),
                            ('las_null_update_count', (YLeaf(YType.uint32, 'las-null-update-count'), ['int'])),
                            ('las_unregistration_count', (YLeaf(YType.uint32, 'las-unregistration-count'), ['int'])),
                            ('is_las_request', (YLeaf(YType.boolean, 'is-las-request'), ['bool'])),
                            ('is_las_registered', (YLeaf(YType.boolean, 'is-las-registered'), ['bool'])),
                            ('vrf_id', (YLeaf(YType.uint32, 'vrf-id'), ['int'])),
                            ('mte_vrf_id', (YLeaf(YType.uint32, 'mte-vrf-id'), ['int'])),
                            ('location', (YLeaf(YType.uint32, 'location'), ['int'])),
                            ('mtu', (YLeaf(YType.uint32, 'mtu'), ['int'])),
                            ('vrf_state', (YLeaf(YType.uint32, 'vrf-state'), ['int'])),
                            ('is_configurationverify', (YLeaf(YType.boolean, 'is-configurationverify'), ['bool'])),
                            ('configurationvrf_set', (YLeaf(YType.boolean, 'configurationvrf-set'), ['bool'])),
                            ('configurationvrf_error', (YLeaf(YType.boolean, 'configurationvrf-error'), ['bool'])),
                            ('configuration_mcast_vrf_set', (YLeaf(YType.boolean, 'configuration-mcast-vrf-set'), ['bool'])),
                            ('configuration_mcast_vrf_error', (YLeaf(YType.boolean, 'configuration-mcast-vrf-error'), ['bool'])),
                            ('is_im_state_registered', (YLeaf(YType.boolean, 'is-im-state-registered'), ['bool'])),
                            ('is_subscriber', (YLeaf(YType.boolean, 'is-subscriber'), ['bool'])),
                            ('subscriber_mode', (YLeaf(YType.uint32, 'subscriber-mode'), ['int'])),
                            ('is_identity_present', (YLeaf(YType.boolean, 'is-identity-present'), ['bool'])),
                            ('subscriber_id', (YLeaf(YType.str, 'subscriber-id'), ['str'])),
                            ('parent_ifhandle', (YLeaf(YType.str, 'parent-ifhandle'), ['str'])),
                            ('time_since_last_query_in_seconds', (YLeaf(YType.uint32, 'time-since-last-query-in-seconds'), ['int'])),
                            ('time_since_last_report_in_seconds', (YLeaf(YType.uint32, 'time-since-last-report-in-seconds'), ['int'])),
                            ('router_uptime_in_seconds', (YLeaf(YType.uint32, 'router-uptime-in-seconds'), ['int'])),
                            ('mte_tuple_count', (YLeaf(YType.uint32, 'mte-tuple-count'), ['int'])),
                        ])
                        self.interface_name = None
                        self.interface_name_xr = None
                        self.state = None
                        self.prefix_length = None
                        self.is_interface_up = None
                        self.is_ip_enabled = None
                        self.is_router_enabled = None
                        self.igmp_version = None
                        self.host_version = None
                        self.query_interval = None
                        self.query_timeout = None
                        self.query_maximum_response_time = None
                        self.last_member_query_interval = None
                        self.group_joins = None
                        self.group_leaves = None
                        self.is_querier = None
                        self.total_active_groups = None
                        self.robustness = None
                        self.proxy_interface = None
                        self.querier_uptime = None
                        self.las_ll_registration_count = None
                        self.las_get_address_count = None
                        self.las_update_count = None
                        self.las_ll_remove_update_count = None
                        self.las_ll_add_update_count = None
                        self.las_null_update_count = None
                        self.las_unregistration_count = None
                        self.is_las_request = None
                        self.is_las_registered = None
                        self.vrf_id = None
                        self.mte_vrf_id = None
                        self.location = None
                        self.mtu = None
                        self.vrf_state = None
                        self.is_configurationverify = None
                        self.configurationvrf_set = None
                        self.configurationvrf_error = None
                        self.configuration_mcast_vrf_set = None
                        self.configuration_mcast_vrf_error = None
                        self.is_im_state_registered = None
                        self.is_subscriber = None
                        self.subscriber_mode = None
                        self.is_identity_present = None
                        self.subscriber_id = None
                        self.parent_ifhandle = None
                        self.time_since_last_query_in_seconds = None
                        self.time_since_last_report_in_seconds = None
                        self.router_uptime_in_seconds = None
                        self.mte_tuple_count = None

                        self.address = Mld.Standby.DefaultContext.GlobalInterfaceTable.Interface.Address()
                        self.address.parent = self
                        self._children_name_map["address"] = "address"

                        self.querier_address = Mld.Standby.DefaultContext.GlobalInterfaceTable.Interface.QuerierAddress()
                        self.querier_address.parent = self
                        self._children_name_map["querier_address"] = "querier-address"

                        self.subscriber_address = Mld.Standby.DefaultContext.GlobalInterfaceTable.Interface.SubscriberAddress()
                        self.subscriber_address.parent = self
                        self._children_name_map["subscriber_address"] = "subscriber-address"
                        self._segment_path = lambda: "interface" + "[interface-name='" + str(self.interface_name) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/standby/default-context/global-interface-table/%s" % self._segment_path()
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Mld.Standby.DefaultContext.GlobalInterfaceTable.Interface, ['interface_name', 'interface_name_xr', 'state', 'prefix_length', 'is_interface_up', 'is_ip_enabled', 'is_router_enabled', 'igmp_version', 'host_version', 'query_interval', 'query_timeout', 'query_maximum_response_time', 'last_member_query_interval', 'group_joins', 'group_leaves', 'is_querier', 'total_active_groups', 'robustness', 'proxy_interface', 'querier_uptime', 'las_ll_registration_count', 'las_get_address_count', 'las_update_count', 'las_ll_remove_update_count', 'las_ll_add_update_count', 'las_null_update_count', 'las_unregistration_count', 'is_las_request', 'is_las_registered', 'vrf_id', 'mte_vrf_id', 'location', 'mtu', 'vrf_state', 'is_configurationverify', 'configurationvrf_set', 'configurationvrf_error', 'configuration_mcast_vrf_set', 'configuration_mcast_vrf_error', 'is_im_state_registered', 'is_subscriber', 'subscriber_mode', 'is_identity_present', 'subscriber_id', 'parent_ifhandle', 'time_since_last_query_in_seconds', 'time_since_last_report_in_seconds', 'router_uptime_in_seconds', 'mte_tuple_count'], name, value)


                    class Address(_Entity_):
                        """
                        IP address
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Standby.DefaultContext.GlobalInterfaceTable.Interface.Address, self).__init__()

                            self.yang_name = "address"
                            self.yang_parent_name = "interface"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "address"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Standby.DefaultContext.GlobalInterfaceTable.Interface.Address, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Standby.DefaultContext.GlobalInterfaceTable.Interface.Address']['meta_info']


                    class QuerierAddress(_Entity_):
                        """
                        Address of the Querier
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Standby.DefaultContext.GlobalInterfaceTable.Interface.QuerierAddress, self).__init__()

                            self.yang_name = "querier-address"
                            self.yang_parent_name = "interface"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "querier-address"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Standby.DefaultContext.GlobalInterfaceTable.Interface.QuerierAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Standby.DefaultContext.GlobalInterfaceTable.Interface.QuerierAddress']['meta_info']


                    class SubscriberAddress(_Entity_):
                        """
                        Address of subscriber
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Standby.DefaultContext.GlobalInterfaceTable.Interface.SubscriberAddress, self).__init__()

                            self.yang_name = "subscriber-address"
                            self.yang_parent_name = "interface"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "subscriber-address"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Standby.DefaultContext.GlobalInterfaceTable.Interface.SubscriberAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Standby.DefaultContext.GlobalInterfaceTable.Interface.SubscriberAddress']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Mld.Standby.DefaultContext.GlobalInterfaceTable.Interface']['meta_info']

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Mld.Standby.DefaultContext.GlobalInterfaceTable']['meta_info']


            class SsmMapDetails(_Entity_):
                """
                SSM Map Detail
                
                .. attribute:: ssm_map_detail
                
                	SSM Map Detail Table information
                	**type**\: list of  		 :py:class:`SsmMapDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.SsmMapDetails.SsmMapDetail>`
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Mld.Standby.DefaultContext.SsmMapDetails, self).__init__()

                    self.yang_name = "ssm-map-details"
                    self.yang_parent_name = "default-context"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("ssm-map-detail", ("ssm_map_detail", Mld.Standby.DefaultContext.SsmMapDetails.SsmMapDetail))])
                    self._leafs = OrderedDict()

                    self.ssm_map_detail = YList(self)
                    self._segment_path = lambda: "ssm-map-details"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/standby/default-context/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Mld.Standby.DefaultContext.SsmMapDetails, [], name, value)


                class SsmMapDetail(_Entity_):
                    """
                    SSM Map Detail Table information
                    
                    .. attribute:: ssm_map_type
                    
                    	SSM Map Type
                    	**type**\:  :py:class:`IgmpssmMap <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpssmMap>`
                    
                    	**config**\: False
                    
                    .. attribute:: group_address
                    
                    	Group address
                    	**type**\: union of the below types:
                    
                    		**type**\: str
                    
                    			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    		**type**\: str
                    
                    			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    	**config**\: False
                    
                    .. attribute:: map_info
                    
                    	Basic Map Info
                    	**type**\:  :py:class:`MapInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.SsmMapDetails.SsmMapDetail.MapInfo>`
                    
                    	**config**\: False
                    
                    .. attribute:: expiration_time
                    
                    	Expiration Time in Seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    	**units**\: second
                    
                    .. attribute:: response_pending
                    
                    	Response Pending
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: query_interval
                    
                    	Query interval
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: elapsed_time
                    
                    	Elapsed time
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**config**\: False
                    
                    .. attribute:: sources
                    
                    	List of sources
                    	**type**\: list of  		 :py:class:`Sources <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.SsmMapDetails.SsmMapDetail.Sources>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Mld.Standby.DefaultContext.SsmMapDetails.SsmMapDetail, self).__init__()

                        self.yang_name = "ssm-map-detail"
                        self.yang_parent_name = "ssm-map-details"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("map-info", ("map_info", Mld.Standby.DefaultContext.SsmMapDetails.SsmMapDetail.MapInfo)), ("sources", ("sources", Mld.Standby.DefaultContext.SsmMapDetails.SsmMapDetail.Sources))])
                        self._leafs = OrderedDict([
                            ('ssm_map_type', (YLeaf(YType.enumeration, 'ssm-map-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpssmMap', '')])),
                            ('group_address', (YLeaf(YType.str, 'group-address'), ['str','str'])),
                            ('expiration_time', (YLeaf(YType.uint32, 'expiration-time'), ['int'])),
                            ('response_pending', (YLeaf(YType.boolean, 'response-pending'), ['bool'])),
                            ('query_interval', (YLeaf(YType.uint32, 'query-interval'), ['int'])),
                            ('elapsed_time', (YLeaf(YType.uint64, 'elapsed-time'), ['int'])),
                        ])
                        self.ssm_map_type = None
                        self.group_address = None
                        self.expiration_time = None
                        self.response_pending = None
                        self.query_interval = None
                        self.elapsed_time = None

                        self.map_info = Mld.Standby.DefaultContext.SsmMapDetails.SsmMapDetail.MapInfo()
                        self.map_info.parent = self
                        self._children_name_map["map_info"] = "map-info"

                        self.sources = YList(self)
                        self._segment_path = lambda: "ssm-map-detail"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/standby/default-context/ssm-map-details/%s" % self._segment_path()
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Mld.Standby.DefaultContext.SsmMapDetails.SsmMapDetail, ['ssm_map_type', 'group_address', 'expiration_time', 'response_pending', 'query_interval', 'elapsed_time'], name, value)


                    class MapInfo(_Entity_):
                        """
                        Basic Map Info
                        
                        .. attribute:: group_address_xr
                        
                        	Group Address
                        	**type**\:  :py:class:`GroupAddressXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.SsmMapDetails.SsmMapDetail.MapInfo.GroupAddressXr>`
                        
                        	**config**\: False
                        
                        .. attribute:: map_type
                        
                        	Map Type of group
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: source_counts
                        
                        	Count of Sources
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Standby.DefaultContext.SsmMapDetails.SsmMapDetail.MapInfo, self).__init__()

                            self.yang_name = "map-info"
                            self.yang_parent_name = "ssm-map-detail"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("group-address-xr", ("group_address_xr", Mld.Standby.DefaultContext.SsmMapDetails.SsmMapDetail.MapInfo.GroupAddressXr))])
                            self._leafs = OrderedDict([
                                ('map_type', (YLeaf(YType.uint32, 'map-type'), ['int'])),
                                ('source_counts', (YLeaf(YType.uint32, 'source-counts'), ['int'])),
                            ])
                            self.map_type = None
                            self.source_counts = None

                            self.group_address_xr = Mld.Standby.DefaultContext.SsmMapDetails.SsmMapDetail.MapInfo.GroupAddressXr()
                            self.group_address_xr.parent = self
                            self._children_name_map["group_address_xr"] = "group-address-xr"
                            self._segment_path = lambda: "map-info"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/standby/default-context/ssm-map-details/ssm-map-detail/%s" % self._segment_path()
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Standby.DefaultContext.SsmMapDetails.SsmMapDetail.MapInfo, ['map_type', 'source_counts'], name, value)


                        class GroupAddressXr(_Entity_):
                            """
                            Group Address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Standby.DefaultContext.SsmMapDetails.SsmMapDetail.MapInfo.GroupAddressXr, self).__init__()

                                self.yang_name = "group-address-xr"
                                self.yang_parent_name = "map-info"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "group-address-xr"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/standby/default-context/ssm-map-details/ssm-map-detail/map-info/%s" % self._segment_path()
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Standby.DefaultContext.SsmMapDetails.SsmMapDetail.MapInfo.GroupAddressXr, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Standby.DefaultContext.SsmMapDetails.SsmMapDetail.MapInfo.GroupAddressXr']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Standby.DefaultContext.SsmMapDetails.SsmMapDetail.MapInfo']['meta_info']


                    class Sources(_Entity_):
                        """
                        List of sources
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Standby.DefaultContext.SsmMapDetails.SsmMapDetail.Sources, self).__init__()

                            self.yang_name = "sources"
                            self.yang_parent_name = "ssm-map-detail"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "sources"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/standby/default-context/ssm-map-details/ssm-map-detail/%s" % self._segment_path()
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Standby.DefaultContext.SsmMapDetails.SsmMapDetail.Sources, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Standby.DefaultContext.SsmMapDetails.SsmMapDetail.Sources']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Mld.Standby.DefaultContext.SsmMapDetails.SsmMapDetail']['meta_info']

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Mld.Standby.DefaultContext.SsmMapDetails']['meta_info']


            class InterfaceStateOffs(_Entity_):
                """
                IGMP Interface state off
                
                .. attribute:: interface_state_off
                
                	IGMP Interface
                	**type**\: list of  		 :py:class:`InterfaceStateOff <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.InterfaceStateOffs.InterfaceStateOff>`
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Mld.Standby.DefaultContext.InterfaceStateOffs, self).__init__()

                    self.yang_name = "interface-state-offs"
                    self.yang_parent_name = "default-context"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("interface-state-off", ("interface_state_off", Mld.Standby.DefaultContext.InterfaceStateOffs.InterfaceStateOff))])
                    self._leafs = OrderedDict()

                    self.interface_state_off = YList(self)
                    self._segment_path = lambda: "interface-state-offs"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/standby/default-context/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Mld.Standby.DefaultContext.InterfaceStateOffs, [], name, value)


                class InterfaceStateOff(_Entity_):
                    """
                    IGMP Interface
                    
                    .. attribute:: interface_name  (key)
                    
                    	Interface Name
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: address
                    
                    	IP address
                    	**type**\:  :py:class:`Address <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.InterfaceStateOffs.InterfaceStateOff.Address>`
                    
                    	**config**\: False
                    
                    .. attribute:: querier_address
                    
                    	Address of the Querier
                    	**type**\:  :py:class:`QuerierAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.InterfaceStateOffs.InterfaceStateOff.QuerierAddress>`
                    
                    	**config**\: False
                    
                    .. attribute:: subscriber_address
                    
                    	Address of subscriber
                    	**type**\:  :py:class:`SubscriberAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Standby.DefaultContext.InterfaceStateOffs.InterfaceStateOff.SubscriberAddress>`
                    
                    	**config**\: False
                    
                    .. attribute:: interface_name_xr
                    
                    	Interface
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: state
                    
                    	Interface state
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: prefix_length
                    
                    	Prefix length
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_interface_up
                    
                    	Is interface up
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_ip_enabled
                    
                    	Is IP enabled
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_router_enabled
                    
                    	Is Router functionality enabled
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: igmp_version
                    
                    	IGMP Router version
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    	**config**\: False
                    
                    .. attribute:: host_version
                    
                    	IGMP Host version
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    	**config**\: False
                    
                    .. attribute:: query_interval
                    
                    	Query Interval value in seconds
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    	**units**\: second
                    
                    .. attribute:: query_timeout
                    
                    	Query Timeout value
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    .. attribute:: query_maximum_response_time
                    
                    	Max Response Timeout value
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    .. attribute:: last_member_query_interval
                    
                    	Last Member Query Interval
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    .. attribute:: group_joins
                    
                    	No. of group joins
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: group_leaves
                    
                    	No. of group leaves
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_querier
                    
                    	Are we querier
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: total_active_groups
                    
                    	Actual number of groups on interface
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: robustness
                    
                    	Robustness Variable value
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: proxy_interface
                    
                    	Proxy interface index
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: querier_uptime
                    
                    	Time since the last querier took over
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    .. attribute:: las_ll_registration_count
                    
                    	LAS reg count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_get_address_count
                    
                    	LAS get addr count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_update_count
                    
                    	LAS Update count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_ll_remove_update_count
                    
                    	LAS LL remove update count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_ll_add_update_count
                    
                    	LAS LL add update count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_null_update_count
                    
                    	LAS Null update count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_unregistration_count
                    
                    	LAS unreg count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_las_request
                    
                    	LAS req
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_las_registered
                    
                    	LAS registered
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: vrf_id
                    
                    	VRF id
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: mte_vrf_id
                    
                    	MTE VRF id
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: location
                    
                    	Location
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: mtu
                    
                    	MTU
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: vrf_state
                    
                    	Vrf State
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_configurationverify
                    
                    	CFG verify
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: configurationvrf_set
                    
                    	CFG vrf set
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: configurationvrf_error
                    
                    	CFG vrf error
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: configuration_mcast_vrf_set
                    
                    	Is mcast set
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: configuration_mcast_vrf_error
                    
                    	Is mcast error
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_im_state_registered
                    
                    	Im state registered
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_subscriber
                    
                    	Subscriber interface
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: subscriber_mode
                    
                    	Subscriber mode
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_identity_present
                    
                    	Subscriber ID or Address available from AAA
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: subscriber_id
                    
                    	ID string of subscriber
                    	**type**\: str
                    
                    	**length:** 0..257
                    
                    	**config**\: False
                    
                    .. attribute:: parent_ifhandle
                    
                    	Parent If Handle
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: time_since_last_query_in_seconds
                    
                    	Time elapsed since last query
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: time_since_last_report_in_seconds
                    
                    	Time elapsed since last report
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: router_uptime_in_seconds
                    
                    	Uptime since router enabled event
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: mte_tuple_count
                    
                    	MTE Tuple count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Mld.Standby.DefaultContext.InterfaceStateOffs.InterfaceStateOff, self).__init__()

                        self.yang_name = "interface-state-off"
                        self.yang_parent_name = "interface-state-offs"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['interface_name']
                        self._child_classes = OrderedDict([("address", ("address", Mld.Standby.DefaultContext.InterfaceStateOffs.InterfaceStateOff.Address)), ("querier-address", ("querier_address", Mld.Standby.DefaultContext.InterfaceStateOffs.InterfaceStateOff.QuerierAddress)), ("subscriber-address", ("subscriber_address", Mld.Standby.DefaultContext.InterfaceStateOffs.InterfaceStateOff.SubscriberAddress))])
                        self._leafs = OrderedDict([
                            ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                            ('interface_name_xr', (YLeaf(YType.str, 'interface-name-xr'), ['str'])),
                            ('state', (YLeaf(YType.uint32, 'state'), ['int'])),
                            ('prefix_length', (YLeaf(YType.uint32, 'prefix-length'), ['int'])),
                            ('is_interface_up', (YLeaf(YType.boolean, 'is-interface-up'), ['bool'])),
                            ('is_ip_enabled', (YLeaf(YType.boolean, 'is-ip-enabled'), ['bool'])),
                            ('is_router_enabled', (YLeaf(YType.boolean, 'is-router-enabled'), ['bool'])),
                            ('igmp_version', (YLeaf(YType.uint8, 'igmp-version'), ['int'])),
                            ('host_version', (YLeaf(YType.uint8, 'host-version'), ['int'])),
                            ('query_interval', (YLeaf(YType.uint16, 'query-interval'), ['int'])),
                            ('query_timeout', (YLeaf(YType.uint16, 'query-timeout'), ['int'])),
                            ('query_maximum_response_time', (YLeaf(YType.uint16, 'query-maximum-response-time'), ['int'])),
                            ('last_member_query_interval', (YLeaf(YType.uint16, 'last-member-query-interval'), ['int'])),
                            ('group_joins', (YLeaf(YType.uint32, 'group-joins'), ['int'])),
                            ('group_leaves', (YLeaf(YType.uint32, 'group-leaves'), ['int'])),
                            ('is_querier', (YLeaf(YType.boolean, 'is-querier'), ['bool'])),
                            ('total_active_groups', (YLeaf(YType.uint32, 'total-active-groups'), ['int'])),
                            ('robustness', (YLeaf(YType.uint32, 'robustness'), ['int'])),
                            ('proxy_interface', (YLeaf(YType.str, 'proxy-interface'), ['str'])),
                            ('querier_uptime', (YLeaf(YType.uint16, 'querier-uptime'), ['int'])),
                            ('las_ll_registration_count', (YLeaf(YType.uint32, 'las-ll-registration-count'), ['int'])),
                            ('las_get_address_count', (YLeaf(YType.uint32, 'las-get-address-count'), ['int'])),
                            ('las_update_count', (YLeaf(YType.uint32, 'las-update-count'), ['int'])),
                            ('las_ll_remove_update_count', (YLeaf(YType.uint32, 'las-ll-remove-update-count'), ['int'])),
                            ('las_ll_add_update_count', (YLeaf(YType.uint32, 'las-ll-add-update-count'), ['int'])),
                            ('las_null_update_count', (YLeaf(YType.uint32, 'las-null-update-count'), ['int'])),
                            ('las_unregistration_count', (YLeaf(YType.uint32, 'las-unregistration-count'), ['int'])),
                            ('is_las_request', (YLeaf(YType.boolean, 'is-las-request'), ['bool'])),
                            ('is_las_registered', (YLeaf(YType.boolean, 'is-las-registered'), ['bool'])),
                            ('vrf_id', (YLeaf(YType.uint32, 'vrf-id'), ['int'])),
                            ('mte_vrf_id', (YLeaf(YType.uint32, 'mte-vrf-id'), ['int'])),
                            ('location', (YLeaf(YType.uint32, 'location'), ['int'])),
                            ('mtu', (YLeaf(YType.uint32, 'mtu'), ['int'])),
                            ('vrf_state', (YLeaf(YType.uint32, 'vrf-state'), ['int'])),
                            ('is_configurationverify', (YLeaf(YType.boolean, 'is-configurationverify'), ['bool'])),
                            ('configurationvrf_set', (YLeaf(YType.boolean, 'configurationvrf-set'), ['bool'])),
                            ('configurationvrf_error', (YLeaf(YType.boolean, 'configurationvrf-error'), ['bool'])),
                            ('configuration_mcast_vrf_set', (YLeaf(YType.boolean, 'configuration-mcast-vrf-set'), ['bool'])),
                            ('configuration_mcast_vrf_error', (YLeaf(YType.boolean, 'configuration-mcast-vrf-error'), ['bool'])),
                            ('is_im_state_registered', (YLeaf(YType.boolean, 'is-im-state-registered'), ['bool'])),
                            ('is_subscriber', (YLeaf(YType.boolean, 'is-subscriber'), ['bool'])),
                            ('subscriber_mode', (YLeaf(YType.uint32, 'subscriber-mode'), ['int'])),
                            ('is_identity_present', (YLeaf(YType.boolean, 'is-identity-present'), ['bool'])),
                            ('subscriber_id', (YLeaf(YType.str, 'subscriber-id'), ['str'])),
                            ('parent_ifhandle', (YLeaf(YType.str, 'parent-ifhandle'), ['str'])),
                            ('time_since_last_query_in_seconds', (YLeaf(YType.uint32, 'time-since-last-query-in-seconds'), ['int'])),
                            ('time_since_last_report_in_seconds', (YLeaf(YType.uint32, 'time-since-last-report-in-seconds'), ['int'])),
                            ('router_uptime_in_seconds', (YLeaf(YType.uint32, 'router-uptime-in-seconds'), ['int'])),
                            ('mte_tuple_count', (YLeaf(YType.uint32, 'mte-tuple-count'), ['int'])),
                        ])
                        self.interface_name = None
                        self.interface_name_xr = None
                        self.state = None
                        self.prefix_length = None
                        self.is_interface_up = None
                        self.is_ip_enabled = None
                        self.is_router_enabled = None
                        self.igmp_version = None
                        self.host_version = None
                        self.query_interval = None
                        self.query_timeout = None
                        self.query_maximum_response_time = None
                        self.last_member_query_interval = None
                        self.group_joins = None
                        self.group_leaves = None
                        self.is_querier = None
                        self.total_active_groups = None
                        self.robustness = None
                        self.proxy_interface = None
                        self.querier_uptime = None
                        self.las_ll_registration_count = None
                        self.las_get_address_count = None
                        self.las_update_count = None
                        self.las_ll_remove_update_count = None
                        self.las_ll_add_update_count = None
                        self.las_null_update_count = None
                        self.las_unregistration_count = None
                        self.is_las_request = None
                        self.is_las_registered = None
                        self.vrf_id = None
                        self.mte_vrf_id = None
                        self.location = None
                        self.mtu = None
                        self.vrf_state = None
                        self.is_configurationverify = None
                        self.configurationvrf_set = None
                        self.configurationvrf_error = None
                        self.configuration_mcast_vrf_set = None
                        self.configuration_mcast_vrf_error = None
                        self.is_im_state_registered = None
                        self.is_subscriber = None
                        self.subscriber_mode = None
                        self.is_identity_present = None
                        self.subscriber_id = None
                        self.parent_ifhandle = None
                        self.time_since_last_query_in_seconds = None
                        self.time_since_last_report_in_seconds = None
                        self.router_uptime_in_seconds = None
                        self.mte_tuple_count = None

                        self.address = Mld.Standby.DefaultContext.InterfaceStateOffs.InterfaceStateOff.Address()
                        self.address.parent = self
                        self._children_name_map["address"] = "address"

                        self.querier_address = Mld.Standby.DefaultContext.InterfaceStateOffs.InterfaceStateOff.QuerierAddress()
                        self.querier_address.parent = self
                        self._children_name_map["querier_address"] = "querier-address"

                        self.subscriber_address = Mld.Standby.DefaultContext.InterfaceStateOffs.InterfaceStateOff.SubscriberAddress()
                        self.subscriber_address.parent = self
                        self._children_name_map["subscriber_address"] = "subscriber-address"
                        self._segment_path = lambda: "interface-state-off" + "[interface-name='" + str(self.interface_name) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/standby/default-context/interface-state-offs/%s" % self._segment_path()
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Mld.Standby.DefaultContext.InterfaceStateOffs.InterfaceStateOff, ['interface_name', 'interface_name_xr', 'state', 'prefix_length', 'is_interface_up', 'is_ip_enabled', 'is_router_enabled', 'igmp_version', 'host_version', 'query_interval', 'query_timeout', 'query_maximum_response_time', 'last_member_query_interval', 'group_joins', 'group_leaves', 'is_querier', 'total_active_groups', 'robustness', 'proxy_interface', 'querier_uptime', 'las_ll_registration_count', 'las_get_address_count', 'las_update_count', 'las_ll_remove_update_count', 'las_ll_add_update_count', 'las_null_update_count', 'las_unregistration_count', 'is_las_request', 'is_las_registered', 'vrf_id', 'mte_vrf_id', 'location', 'mtu', 'vrf_state', 'is_configurationverify', 'configurationvrf_set', 'configurationvrf_error', 'configuration_mcast_vrf_set', 'configuration_mcast_vrf_error', 'is_im_state_registered', 'is_subscriber', 'subscriber_mode', 'is_identity_present', 'subscriber_id', 'parent_ifhandle', 'time_since_last_query_in_seconds', 'time_since_last_report_in_seconds', 'router_uptime_in_seconds', 'mte_tuple_count'], name, value)


                    class Address(_Entity_):
                        """
                        IP address
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Standby.DefaultContext.InterfaceStateOffs.InterfaceStateOff.Address, self).__init__()

                            self.yang_name = "address"
                            self.yang_parent_name = "interface-state-off"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "address"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Standby.DefaultContext.InterfaceStateOffs.InterfaceStateOff.Address, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Standby.DefaultContext.InterfaceStateOffs.InterfaceStateOff.Address']['meta_info']


                    class QuerierAddress(_Entity_):
                        """
                        Address of the Querier
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Standby.DefaultContext.InterfaceStateOffs.InterfaceStateOff.QuerierAddress, self).__init__()

                            self.yang_name = "querier-address"
                            self.yang_parent_name = "interface-state-off"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "querier-address"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Standby.DefaultContext.InterfaceStateOffs.InterfaceStateOff.QuerierAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Standby.DefaultContext.InterfaceStateOffs.InterfaceStateOff.QuerierAddress']['meta_info']


                    class SubscriberAddress(_Entity_):
                        """
                        Address of subscriber
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Standby.DefaultContext.InterfaceStateOffs.InterfaceStateOff.SubscriberAddress, self).__init__()

                            self.yang_name = "subscriber-address"
                            self.yang_parent_name = "interface-state-off"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "subscriber-address"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Standby.DefaultContext.InterfaceStateOffs.InterfaceStateOff.SubscriberAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Standby.DefaultContext.InterfaceStateOffs.InterfaceStateOff.SubscriberAddress']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Mld.Standby.DefaultContext.InterfaceStateOffs.InterfaceStateOff']['meta_info']

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Mld.Standby.DefaultContext.InterfaceStateOffs']['meta_info']

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                return meta._meta_table['Mld.Standby.DefaultContext']['meta_info']

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
            return meta._meta_table['Mld.Standby']['meta_info']


    class Active(_Entity_):
        """
        Active Process
        
        .. attribute:: vrfs
        
        	VRF Table
        	**type**\:  :py:class:`Vrfs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs>`
        
        	**config**\: False
        
        .. attribute:: process
        
        	Process
        	**type**\:  :py:class:`Process <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Process>`
        
        	**config**\: False
        
        .. attribute:: default_context
        
        	Default Context
        	**type**\:  :py:class:`DefaultContext <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext>`
        
        	**config**\: False
        
        

        """

        _prefix = 'ipv4-igmp-oper'
        _revision = '2018-01-31'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(Mld.Active, self).__init__()

            self.yang_name = "active"
            self.yang_parent_name = "mld"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([("vrfs", ("vrfs", Mld.Active.Vrfs)), ("process", ("process", Mld.Active.Process)), ("default-context", ("default_context", Mld.Active.DefaultContext))])
            self._leafs = OrderedDict()

            self.vrfs = Mld.Active.Vrfs()
            self.vrfs.parent = self
            self._children_name_map["vrfs"] = "vrfs"

            self.process = Mld.Active.Process()
            self.process.parent = self
            self._children_name_map["process"] = "process"

            self.default_context = Mld.Active.DefaultContext()
            self.default_context.parent = self
            self._children_name_map["default_context"] = "default-context"
            self._segment_path = lambda: "active"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(Mld.Active, [], name, value)


        class Vrfs(_Entity_):
            """
            VRF Table
            
            .. attribute:: vrf
            
            	VRF table Names
            	**type**\: list of  		 :py:class:`Vrf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf>`
            
            	**config**\: False
            
            

            """

            _prefix = 'ipv4-igmp-oper'
            _revision = '2018-01-31'

            def __init__(self):
                if sys.version_info > (3,):
                    super().__init__()
                else:
                    super(Mld.Active.Vrfs, self).__init__()

                self.yang_name = "vrfs"
                self.yang_parent_name = "active"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("vrf", ("vrf", Mld.Active.Vrfs.Vrf))])
                self._leafs = OrderedDict()

                self.vrf = YList(self)
                self._segment_path = lambda: "vrfs"
                self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/active/%s" % self._segment_path()
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(Mld.Active.Vrfs, [], name, value)


            class Vrf(_Entity_):
                """
                VRF table Names
                
                .. attribute:: vrf_name  (key)
                
                	VRF name
                	**type**\: str
                
                	**length:** 1..32
                
                	**config**\: False
                
                .. attribute:: summary
                
                	IGMP Summary Information
                	**type**\:  :py:class:`Summary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.Summary>`
                
                	**config**\: False
                
                .. attribute:: interface_state_ons
                
                	IGMP Interface state on
                	**type**\:  :py:class:`InterfaceStateOns <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.InterfaceStateOns>`
                
                	**config**\: False
                
                .. attribute:: detail_groups
                
                	IGMP Detail Group Database
                	**type**\:  :py:class:`DetailGroups <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.DetailGroups>`
                
                	**config**\: False
                
                .. attribute:: non_active_groups
                
                	IGMP Non\-Active Groups Information
                	**type**\:  :py:class:`NonActiveGroups <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.NonActiveGroups>`
                
                	**config**\: False
                
                .. attribute:: ssm_maps
                
                	SSM Map Table
                	**type**\:  :py:class:`SsmMaps <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.SsmMaps>`
                
                	**config**\: False
                
                .. attribute:: explicit_groups
                
                	IGMP Explicit Group Database
                	**type**\:  :py:class:`ExplicitGroups <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.ExplicitGroups>`
                
                	**config**\: False
                
                .. attribute:: interface_table
                
                	IGMP Interface specific Table
                	**type**\:  :py:class:`InterfaceTable <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.InterfaceTable>`
                
                	**config**\: False
                
                .. attribute:: interface_unicast_qos_adjusts
                
                	IGMP Interface Unicast\-Qos\-Adjust
                	**type**\:  :py:class:`InterfaceUnicastQosAdjusts <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.InterfaceUnicastQosAdjusts>`
                
                	**config**\: False
                
                .. attribute:: ranges
                
                	Range table
                	**type**\:  :py:class:`Ranges <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.Ranges>`
                
                	**config**\: False
                
                .. attribute:: ifrs_interfaces
                
                	IGMP Interface specific
                	**type**\:  :py:class:`IfrsInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.IfrsInterfaces>`
                
                	**config**\: False
                
                .. attribute:: traffic_counters
                
                	IGMP Message Traffic Counters
                	**type**\:  :py:class:`TrafficCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.TrafficCounters>`
                
                	**config**\: False
                
                .. attribute:: groups
                
                	IGMP Group Database Table
                	**type**\:  :py:class:`Groups <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.Groups>`
                
                	**config**\: False
                
                .. attribute:: group_summary
                
                	IGMP Groups Summary
                	**type**\:  :py:class:`GroupSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.GroupSummary>`
                
                	**config**\: False
                
                .. attribute:: ifrs_interface_summary
                
                	IGMP IFRS Interface summary
                	**type**\:  :py:class:`IfrsInterfaceSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.IfrsInterfaceSummary>`
                
                	**config**\: False
                
                .. attribute:: global_interface_table
                
                	IGMP Global Interface 
                	**type**\:  :py:class:`GlobalInterfaceTable <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.GlobalInterfaceTable>`
                
                	**config**\: False
                
                .. attribute:: ssm_map_details
                
                	SSM Map Detail
                	**type**\:  :py:class:`SsmMapDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.SsmMapDetails>`
                
                	**config**\: False
                
                .. attribute:: interface_state_offs
                
                	IGMP Interface state off
                	**type**\:  :py:class:`InterfaceStateOffs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.InterfaceStateOffs>`
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Mld.Active.Vrfs.Vrf, self).__init__()

                    self.yang_name = "vrf"
                    self.yang_parent_name = "vrfs"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = ['vrf_name']
                    self._child_classes = OrderedDict([("summary", ("summary", Mld.Active.Vrfs.Vrf.Summary)), ("interface-state-ons", ("interface_state_ons", Mld.Active.Vrfs.Vrf.InterfaceStateOns)), ("detail-groups", ("detail_groups", Mld.Active.Vrfs.Vrf.DetailGroups)), ("non-active-groups", ("non_active_groups", Mld.Active.Vrfs.Vrf.NonActiveGroups)), ("ssm-maps", ("ssm_maps", Mld.Active.Vrfs.Vrf.SsmMaps)), ("explicit-groups", ("explicit_groups", Mld.Active.Vrfs.Vrf.ExplicitGroups)), ("interface-table", ("interface_table", Mld.Active.Vrfs.Vrf.InterfaceTable)), ("interface-unicast-qos-adjusts", ("interface_unicast_qos_adjusts", Mld.Active.Vrfs.Vrf.InterfaceUnicastQosAdjusts)), ("ranges", ("ranges", Mld.Active.Vrfs.Vrf.Ranges)), ("ifrs-interfaces", ("ifrs_interfaces", Mld.Active.Vrfs.Vrf.IfrsInterfaces)), ("traffic-counters", ("traffic_counters", Mld.Active.Vrfs.Vrf.TrafficCounters)), ("groups", ("groups", Mld.Active.Vrfs.Vrf.Groups)), ("group-summary", ("group_summary", Mld.Active.Vrfs.Vrf.GroupSummary)), ("ifrs-interface-summary", ("ifrs_interface_summary", Mld.Active.Vrfs.Vrf.IfrsInterfaceSummary)), ("global-interface-table", ("global_interface_table", Mld.Active.Vrfs.Vrf.GlobalInterfaceTable)), ("ssm-map-details", ("ssm_map_details", Mld.Active.Vrfs.Vrf.SsmMapDetails)), ("interface-state-offs", ("interface_state_offs", Mld.Active.Vrfs.Vrf.InterfaceStateOffs))])
                    self._leafs = OrderedDict([
                        ('vrf_name', (YLeaf(YType.str, 'vrf-name'), ['str'])),
                    ])
                    self.vrf_name = None

                    self.summary = Mld.Active.Vrfs.Vrf.Summary()
                    self.summary.parent = self
                    self._children_name_map["summary"] = "summary"

                    self.interface_state_ons = Mld.Active.Vrfs.Vrf.InterfaceStateOns()
                    self.interface_state_ons.parent = self
                    self._children_name_map["interface_state_ons"] = "interface-state-ons"

                    self.detail_groups = Mld.Active.Vrfs.Vrf.DetailGroups()
                    self.detail_groups.parent = self
                    self._children_name_map["detail_groups"] = "detail-groups"

                    self.non_active_groups = Mld.Active.Vrfs.Vrf.NonActiveGroups()
                    self.non_active_groups.parent = self
                    self._children_name_map["non_active_groups"] = "non-active-groups"

                    self.ssm_maps = Mld.Active.Vrfs.Vrf.SsmMaps()
                    self.ssm_maps.parent = self
                    self._children_name_map["ssm_maps"] = "ssm-maps"

                    self.explicit_groups = Mld.Active.Vrfs.Vrf.ExplicitGroups()
                    self.explicit_groups.parent = self
                    self._children_name_map["explicit_groups"] = "explicit-groups"

                    self.interface_table = Mld.Active.Vrfs.Vrf.InterfaceTable()
                    self.interface_table.parent = self
                    self._children_name_map["interface_table"] = "interface-table"

                    self.interface_unicast_qos_adjusts = Mld.Active.Vrfs.Vrf.InterfaceUnicastQosAdjusts()
                    self.interface_unicast_qos_adjusts.parent = self
                    self._children_name_map["interface_unicast_qos_adjusts"] = "interface-unicast-qos-adjusts"

                    self.ranges = Mld.Active.Vrfs.Vrf.Ranges()
                    self.ranges.parent = self
                    self._children_name_map["ranges"] = "ranges"

                    self.ifrs_interfaces = Mld.Active.Vrfs.Vrf.IfrsInterfaces()
                    self.ifrs_interfaces.parent = self
                    self._children_name_map["ifrs_interfaces"] = "ifrs-interfaces"

                    self.traffic_counters = Mld.Active.Vrfs.Vrf.TrafficCounters()
                    self.traffic_counters.parent = self
                    self._children_name_map["traffic_counters"] = "traffic-counters"

                    self.groups = Mld.Active.Vrfs.Vrf.Groups()
                    self.groups.parent = self
                    self._children_name_map["groups"] = "groups"

                    self.group_summary = Mld.Active.Vrfs.Vrf.GroupSummary()
                    self.group_summary.parent = self
                    self._children_name_map["group_summary"] = "group-summary"

                    self.ifrs_interface_summary = Mld.Active.Vrfs.Vrf.IfrsInterfaceSummary()
                    self.ifrs_interface_summary.parent = self
                    self._children_name_map["ifrs_interface_summary"] = "ifrs-interface-summary"

                    self.global_interface_table = Mld.Active.Vrfs.Vrf.GlobalInterfaceTable()
                    self.global_interface_table.parent = self
                    self._children_name_map["global_interface_table"] = "global-interface-table"

                    self.ssm_map_details = Mld.Active.Vrfs.Vrf.SsmMapDetails()
                    self.ssm_map_details.parent = self
                    self._children_name_map["ssm_map_details"] = "ssm-map-details"

                    self.interface_state_offs = Mld.Active.Vrfs.Vrf.InterfaceStateOffs()
                    self.interface_state_offs.parent = self
                    self._children_name_map["interface_state_offs"] = "interface-state-offs"
                    self._segment_path = lambda: "vrf" + "[vrf-name='" + str(self.vrf_name) + "']"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/active/vrfs/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Mld.Active.Vrfs.Vrf, ['vrf_name'], name, value)


                class Summary(_Entity_):
                    """
                    IGMP Summary Information
                    
                    .. attribute:: robustness
                    
                    	Robustness variable
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: group_limit
                    
                    	Maximum groups accepted
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: group_count
                    
                    	Current groups accepted
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_disabled
                    
                    	Is maximum enforcement disabled
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: supported_interfaces
                    
                    	No. of supported interfaces
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: unsupported_interfaces
                    
                    	No. of unsupported interfaces
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: enabled_interface_count
                    
                    	No. of enabled interfaces
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: disabled_interface_count
                    
                    	No. of disabled interfaces
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: tunnel_mte_config_count
                    
                    	No. of static group commands
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: node_low_memory
                    
                    	Is node in low memory condition
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: interface
                    
                    	Maximum and current groups accepted for each interface
                    	**type**\: list of  		 :py:class:`Interface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.Summary.Interface>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Mld.Active.Vrfs.Vrf.Summary, self).__init__()

                        self.yang_name = "summary"
                        self.yang_parent_name = "vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("interface", ("interface", Mld.Active.Vrfs.Vrf.Summary.Interface))])
                        self._leafs = OrderedDict([
                            ('robustness', (YLeaf(YType.uint32, 'robustness'), ['int'])),
                            ('group_limit', (YLeaf(YType.uint32, 'group-limit'), ['int'])),
                            ('group_count', (YLeaf(YType.uint32, 'group-count'), ['int'])),
                            ('is_disabled', (YLeaf(YType.boolean, 'is-disabled'), ['bool'])),
                            ('supported_interfaces', (YLeaf(YType.uint32, 'supported-interfaces'), ['int'])),
                            ('unsupported_interfaces', (YLeaf(YType.uint32, 'unsupported-interfaces'), ['int'])),
                            ('enabled_interface_count', (YLeaf(YType.uint32, 'enabled-interface-count'), ['int'])),
                            ('disabled_interface_count', (YLeaf(YType.uint32, 'disabled-interface-count'), ['int'])),
                            ('tunnel_mte_config_count', (YLeaf(YType.uint32, 'tunnel-mte-config-count'), ['int'])),
                            ('node_low_memory', (YLeaf(YType.boolean, 'node-low-memory'), ['bool'])),
                        ])
                        self.robustness = None
                        self.group_limit = None
                        self.group_count = None
                        self.is_disabled = None
                        self.supported_interfaces = None
                        self.unsupported_interfaces = None
                        self.enabled_interface_count = None
                        self.disabled_interface_count = None
                        self.tunnel_mte_config_count = None
                        self.node_low_memory = None

                        self.interface = YList(self)
                        self._segment_path = lambda: "summary"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Mld.Active.Vrfs.Vrf.Summary, ['robustness', 'group_limit', 'group_count', 'is_disabled', 'supported_interfaces', 'unsupported_interfaces', 'enabled_interface_count', 'disabled_interface_count', 'tunnel_mte_config_count', 'node_low_memory'], name, value)


                    class Interface(_Entity_):
                        """
                        Maximum and current groups accepted for each
                        interface
                        
                        .. attribute:: interface_name
                        
                        	Interface
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: group_limit
                        
                        	Maximum groups accepted per interface
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: group_count
                        
                        	Current groups accepted per interface
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: parent_ifhandle
                        
                        	Parent if handle
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: on_off
                        
                        	Enabled/Disabled
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: time_since_last_query_in_seconds
                        
                        	Time elapsed since last query
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: time_since_last_report_in_seconds
                        
                        	Time elapsed since last report
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: router_uptime_in_seconds
                        
                        	Time elapsed since router enabled event
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Active.Vrfs.Vrf.Summary.Interface, self).__init__()

                            self.yang_name = "interface"
                            self.yang_parent_name = "summary"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                ('group_limit', (YLeaf(YType.uint32, 'group-limit'), ['int'])),
                                ('group_count', (YLeaf(YType.uint32, 'group-count'), ['int'])),
                                ('parent_ifhandle', (YLeaf(YType.str, 'parent-ifhandle'), ['str'])),
                                ('on_off', (YLeaf(YType.boolean, 'on-off'), ['bool'])),
                                ('time_since_last_query_in_seconds', (YLeaf(YType.uint32, 'time-since-last-query-in-seconds'), ['int'])),
                                ('time_since_last_report_in_seconds', (YLeaf(YType.uint32, 'time-since-last-report-in-seconds'), ['int'])),
                                ('router_uptime_in_seconds', (YLeaf(YType.uint32, 'router-uptime-in-seconds'), ['int'])),
                            ])
                            self.interface_name = None
                            self.group_limit = None
                            self.group_count = None
                            self.parent_ifhandle = None
                            self.on_off = None
                            self.time_since_last_query_in_seconds = None
                            self.time_since_last_report_in_seconds = None
                            self.router_uptime_in_seconds = None
                            self._segment_path = lambda: "interface"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Active.Vrfs.Vrf.Summary.Interface, ['interface_name', 'group_limit', 'group_count', 'parent_ifhandle', 'on_off', 'time_since_last_query_in_seconds', 'time_since_last_report_in_seconds', 'router_uptime_in_seconds'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Active.Vrfs.Vrf.Summary.Interface']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Mld.Active.Vrfs.Vrf.Summary']['meta_info']


                class InterfaceStateOns(_Entity_):
                    """
                    IGMP Interface state on
                    
                    .. attribute:: interface_state_on
                    
                    	IGMP Interface
                    	**type**\: list of  		 :py:class:`InterfaceStateOn <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Mld.Active.Vrfs.Vrf.InterfaceStateOns, self).__init__()

                        self.yang_name = "interface-state-ons"
                        self.yang_parent_name = "vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("interface-state-on", ("interface_state_on", Mld.Active.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn))])
                        self._leafs = OrderedDict()

                        self.interface_state_on = YList(self)
                        self._segment_path = lambda: "interface-state-ons"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Mld.Active.Vrfs.Vrf.InterfaceStateOns, [], name, value)


                    class InterfaceStateOn(_Entity_):
                        """
                        IGMP Interface
                        
                        .. attribute:: interface_name  (key)
                        
                        	Interface Name
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: address
                        
                        	IP address
                        	**type**\:  :py:class:`Address <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.Address>`
                        
                        	**config**\: False
                        
                        .. attribute:: querier_address
                        
                        	Address of the Querier
                        	**type**\:  :py:class:`QuerierAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.QuerierAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: subscriber_address
                        
                        	Address of subscriber
                        	**type**\:  :py:class:`SubscriberAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.SubscriberAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: interface_name_xr
                        
                        	Interface
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: state
                        
                        	Interface state
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: prefix_length
                        
                        	Prefix length
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_interface_up
                        
                        	Is interface up
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_ip_enabled
                        
                        	Is IP enabled
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_router_enabled
                        
                        	Is Router functionality enabled
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: igmp_version
                        
                        	IGMP Router version
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        	**config**\: False
                        
                        .. attribute:: host_version
                        
                        	IGMP Host version
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        	**config**\: False
                        
                        .. attribute:: query_interval
                        
                        	Query Interval value in seconds
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        	**units**\: second
                        
                        .. attribute:: query_timeout
                        
                        	Query Timeout value
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: query_maximum_response_time
                        
                        	Max Response Timeout value
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: last_member_query_interval
                        
                        	Last Member Query Interval
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: group_joins
                        
                        	No. of group joins
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: group_leaves
                        
                        	No. of group leaves
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_querier
                        
                        	Are we querier
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: total_active_groups
                        
                        	Actual number of groups on interface
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: robustness
                        
                        	Robustness Variable value
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: proxy_interface
                        
                        	Proxy interface index
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: querier_uptime
                        
                        	Time since the last querier took over
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: las_ll_registration_count
                        
                        	LAS reg count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_get_address_count
                        
                        	LAS get addr count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_update_count
                        
                        	LAS Update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_ll_remove_update_count
                        
                        	LAS LL remove update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_ll_add_update_count
                        
                        	LAS LL add update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_null_update_count
                        
                        	LAS Null update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_unregistration_count
                        
                        	LAS unreg count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_las_request
                        
                        	LAS req
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_las_registered
                        
                        	LAS registered
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: vrf_id
                        
                        	VRF id
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: mte_vrf_id
                        
                        	MTE VRF id
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: location
                        
                        	Location
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: mtu
                        
                        	MTU
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: vrf_state
                        
                        	Vrf State
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_configurationverify
                        
                        	CFG verify
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configurationvrf_set
                        
                        	CFG vrf set
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configurationvrf_error
                        
                        	CFG vrf error
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configuration_mcast_vrf_set
                        
                        	Is mcast set
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configuration_mcast_vrf_error
                        
                        	Is mcast error
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_im_state_registered
                        
                        	Im state registered
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_subscriber
                        
                        	Subscriber interface
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: subscriber_mode
                        
                        	Subscriber mode
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_identity_present
                        
                        	Subscriber ID or Address available from AAA
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: subscriber_id
                        
                        	ID string of subscriber
                        	**type**\: str
                        
                        	**length:** 0..257
                        
                        	**config**\: False
                        
                        .. attribute:: parent_ifhandle
                        
                        	Parent If Handle
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: time_since_last_query_in_seconds
                        
                        	Time elapsed since last query
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: time_since_last_report_in_seconds
                        
                        	Time elapsed since last report
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: router_uptime_in_seconds
                        
                        	Uptime since router enabled event
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: mte_tuple_count
                        
                        	MTE Tuple count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Active.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn, self).__init__()

                            self.yang_name = "interface-state-on"
                            self.yang_parent_name = "interface-state-ons"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['interface_name']
                            self._child_classes = OrderedDict([("address", ("address", Mld.Active.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.Address)), ("querier-address", ("querier_address", Mld.Active.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.QuerierAddress)), ("subscriber-address", ("subscriber_address", Mld.Active.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.SubscriberAddress))])
                            self._leafs = OrderedDict([
                                ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                ('interface_name_xr', (YLeaf(YType.str, 'interface-name-xr'), ['str'])),
                                ('state', (YLeaf(YType.uint32, 'state'), ['int'])),
                                ('prefix_length', (YLeaf(YType.uint32, 'prefix-length'), ['int'])),
                                ('is_interface_up', (YLeaf(YType.boolean, 'is-interface-up'), ['bool'])),
                                ('is_ip_enabled', (YLeaf(YType.boolean, 'is-ip-enabled'), ['bool'])),
                                ('is_router_enabled', (YLeaf(YType.boolean, 'is-router-enabled'), ['bool'])),
                                ('igmp_version', (YLeaf(YType.uint8, 'igmp-version'), ['int'])),
                                ('host_version', (YLeaf(YType.uint8, 'host-version'), ['int'])),
                                ('query_interval', (YLeaf(YType.uint16, 'query-interval'), ['int'])),
                                ('query_timeout', (YLeaf(YType.uint16, 'query-timeout'), ['int'])),
                                ('query_maximum_response_time', (YLeaf(YType.uint16, 'query-maximum-response-time'), ['int'])),
                                ('last_member_query_interval', (YLeaf(YType.uint16, 'last-member-query-interval'), ['int'])),
                                ('group_joins', (YLeaf(YType.uint32, 'group-joins'), ['int'])),
                                ('group_leaves', (YLeaf(YType.uint32, 'group-leaves'), ['int'])),
                                ('is_querier', (YLeaf(YType.boolean, 'is-querier'), ['bool'])),
                                ('total_active_groups', (YLeaf(YType.uint32, 'total-active-groups'), ['int'])),
                                ('robustness', (YLeaf(YType.uint32, 'robustness'), ['int'])),
                                ('proxy_interface', (YLeaf(YType.str, 'proxy-interface'), ['str'])),
                                ('querier_uptime', (YLeaf(YType.uint16, 'querier-uptime'), ['int'])),
                                ('las_ll_registration_count', (YLeaf(YType.uint32, 'las-ll-registration-count'), ['int'])),
                                ('las_get_address_count', (YLeaf(YType.uint32, 'las-get-address-count'), ['int'])),
                                ('las_update_count', (YLeaf(YType.uint32, 'las-update-count'), ['int'])),
                                ('las_ll_remove_update_count', (YLeaf(YType.uint32, 'las-ll-remove-update-count'), ['int'])),
                                ('las_ll_add_update_count', (YLeaf(YType.uint32, 'las-ll-add-update-count'), ['int'])),
                                ('las_null_update_count', (YLeaf(YType.uint32, 'las-null-update-count'), ['int'])),
                                ('las_unregistration_count', (YLeaf(YType.uint32, 'las-unregistration-count'), ['int'])),
                                ('is_las_request', (YLeaf(YType.boolean, 'is-las-request'), ['bool'])),
                                ('is_las_registered', (YLeaf(YType.boolean, 'is-las-registered'), ['bool'])),
                                ('vrf_id', (YLeaf(YType.uint32, 'vrf-id'), ['int'])),
                                ('mte_vrf_id', (YLeaf(YType.uint32, 'mte-vrf-id'), ['int'])),
                                ('location', (YLeaf(YType.uint32, 'location'), ['int'])),
                                ('mtu', (YLeaf(YType.uint32, 'mtu'), ['int'])),
                                ('vrf_state', (YLeaf(YType.uint32, 'vrf-state'), ['int'])),
                                ('is_configurationverify', (YLeaf(YType.boolean, 'is-configurationverify'), ['bool'])),
                                ('configurationvrf_set', (YLeaf(YType.boolean, 'configurationvrf-set'), ['bool'])),
                                ('configurationvrf_error', (YLeaf(YType.boolean, 'configurationvrf-error'), ['bool'])),
                                ('configuration_mcast_vrf_set', (YLeaf(YType.boolean, 'configuration-mcast-vrf-set'), ['bool'])),
                                ('configuration_mcast_vrf_error', (YLeaf(YType.boolean, 'configuration-mcast-vrf-error'), ['bool'])),
                                ('is_im_state_registered', (YLeaf(YType.boolean, 'is-im-state-registered'), ['bool'])),
                                ('is_subscriber', (YLeaf(YType.boolean, 'is-subscriber'), ['bool'])),
                                ('subscriber_mode', (YLeaf(YType.uint32, 'subscriber-mode'), ['int'])),
                                ('is_identity_present', (YLeaf(YType.boolean, 'is-identity-present'), ['bool'])),
                                ('subscriber_id', (YLeaf(YType.str, 'subscriber-id'), ['str'])),
                                ('parent_ifhandle', (YLeaf(YType.str, 'parent-ifhandle'), ['str'])),
                                ('time_since_last_query_in_seconds', (YLeaf(YType.uint32, 'time-since-last-query-in-seconds'), ['int'])),
                                ('time_since_last_report_in_seconds', (YLeaf(YType.uint32, 'time-since-last-report-in-seconds'), ['int'])),
                                ('router_uptime_in_seconds', (YLeaf(YType.uint32, 'router-uptime-in-seconds'), ['int'])),
                                ('mte_tuple_count', (YLeaf(YType.uint32, 'mte-tuple-count'), ['int'])),
                            ])
                            self.interface_name = None
                            self.interface_name_xr = None
                            self.state = None
                            self.prefix_length = None
                            self.is_interface_up = None
                            self.is_ip_enabled = None
                            self.is_router_enabled = None
                            self.igmp_version = None
                            self.host_version = None
                            self.query_interval = None
                            self.query_timeout = None
                            self.query_maximum_response_time = None
                            self.last_member_query_interval = None
                            self.group_joins = None
                            self.group_leaves = None
                            self.is_querier = None
                            self.total_active_groups = None
                            self.robustness = None
                            self.proxy_interface = None
                            self.querier_uptime = None
                            self.las_ll_registration_count = None
                            self.las_get_address_count = None
                            self.las_update_count = None
                            self.las_ll_remove_update_count = None
                            self.las_ll_add_update_count = None
                            self.las_null_update_count = None
                            self.las_unregistration_count = None
                            self.is_las_request = None
                            self.is_las_registered = None
                            self.vrf_id = None
                            self.mte_vrf_id = None
                            self.location = None
                            self.mtu = None
                            self.vrf_state = None
                            self.is_configurationverify = None
                            self.configurationvrf_set = None
                            self.configurationvrf_error = None
                            self.configuration_mcast_vrf_set = None
                            self.configuration_mcast_vrf_error = None
                            self.is_im_state_registered = None
                            self.is_subscriber = None
                            self.subscriber_mode = None
                            self.is_identity_present = None
                            self.subscriber_id = None
                            self.parent_ifhandle = None
                            self.time_since_last_query_in_seconds = None
                            self.time_since_last_report_in_seconds = None
                            self.router_uptime_in_seconds = None
                            self.mte_tuple_count = None

                            self.address = Mld.Active.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.Address()
                            self.address.parent = self
                            self._children_name_map["address"] = "address"

                            self.querier_address = Mld.Active.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.QuerierAddress()
                            self.querier_address.parent = self
                            self._children_name_map["querier_address"] = "querier-address"

                            self.subscriber_address = Mld.Active.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.SubscriberAddress()
                            self.subscriber_address.parent = self
                            self._children_name_map["subscriber_address"] = "subscriber-address"
                            self._segment_path = lambda: "interface-state-on" + "[interface-name='" + str(self.interface_name) + "']"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Active.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn, ['interface_name', 'interface_name_xr', 'state', 'prefix_length', 'is_interface_up', 'is_ip_enabled', 'is_router_enabled', 'igmp_version', 'host_version', 'query_interval', 'query_timeout', 'query_maximum_response_time', 'last_member_query_interval', 'group_joins', 'group_leaves', 'is_querier', 'total_active_groups', 'robustness', 'proxy_interface', 'querier_uptime', 'las_ll_registration_count', 'las_get_address_count', 'las_update_count', 'las_ll_remove_update_count', 'las_ll_add_update_count', 'las_null_update_count', 'las_unregistration_count', 'is_las_request', 'is_las_registered', 'vrf_id', 'mte_vrf_id', 'location', 'mtu', 'vrf_state', 'is_configurationverify', 'configurationvrf_set', 'configurationvrf_error', 'configuration_mcast_vrf_set', 'configuration_mcast_vrf_error', 'is_im_state_registered', 'is_subscriber', 'subscriber_mode', 'is_identity_present', 'subscriber_id', 'parent_ifhandle', 'time_since_last_query_in_seconds', 'time_since_last_report_in_seconds', 'router_uptime_in_seconds', 'mte_tuple_count'], name, value)


                        class Address(_Entity_):
                            """
                            IP address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Active.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.Address, self).__init__()

                                self.yang_name = "address"
                                self.yang_parent_name = "interface-state-on"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Active.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.Address, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Active.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.Address']['meta_info']


                        class QuerierAddress(_Entity_):
                            """
                            Address of the Querier
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Active.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.QuerierAddress, self).__init__()

                                self.yang_name = "querier-address"
                                self.yang_parent_name = "interface-state-on"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "querier-address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Active.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.QuerierAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Active.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.QuerierAddress']['meta_info']


                        class SubscriberAddress(_Entity_):
                            """
                            Address of subscriber
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Active.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.SubscriberAddress, self).__init__()

                                self.yang_name = "subscriber-address"
                                self.yang_parent_name = "interface-state-on"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "subscriber-address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Active.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.SubscriberAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Active.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.SubscriberAddress']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Active.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Mld.Active.Vrfs.Vrf.InterfaceStateOns']['meta_info']


                class DetailGroups(_Entity_):
                    """
                    IGMP Detail Group Database
                    
                    .. attribute:: detail_group
                    
                    	IGMP Detail Group Entry Information
                    	**type**\: list of  		 :py:class:`DetailGroup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.DetailGroups.DetailGroup>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Mld.Active.Vrfs.Vrf.DetailGroups, self).__init__()

                        self.yang_name = "detail-groups"
                        self.yang_parent_name = "vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("detail-group", ("detail_group", Mld.Active.Vrfs.Vrf.DetailGroups.DetailGroup))])
                        self._leafs = OrderedDict()

                        self.detail_group = YList(self)
                        self._segment_path = lambda: "detail-groups"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Mld.Active.Vrfs.Vrf.DetailGroups, [], name, value)


                    class DetailGroup(_Entity_):
                        """
                        IGMP Detail Group Entry Information
                        
                        .. attribute:: group_address
                        
                        	Group Address
                        	**type**\: union of the below types:
                        
                        		**type**\: str
                        
                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        		**type**\: str
                        
                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: interface_name
                        
                        	Interface Name
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: source_address
                        
                        	Source/Host Address
                        	**type**\: union of the below types:
                        
                        		**type**\: str
                        
                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        		**type**\: str
                        
                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: group_info
                        
                        	Basic Group information
                        	**type**\:  :py:class:`GroupInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo>`
                        
                        	**config**\: False
                        
                        .. attribute:: is_router_exclude_mode
                        
                        	Group router filter mode
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_host_exclude_mode
                        
                        	Group host filter mode
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: source
                        
                        	List of sources
                        	**type**\: list of  		 :py:class:`Source <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.DetailGroups.DetailGroup.Source>`
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Active.Vrfs.Vrf.DetailGroups.DetailGroup, self).__init__()

                            self.yang_name = "detail-group"
                            self.yang_parent_name = "detail-groups"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("group-info", ("group_info", Mld.Active.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo)), ("source", ("source", Mld.Active.Vrfs.Vrf.DetailGroups.DetailGroup.Source))])
                            self._leafs = OrderedDict([
                                ('group_address', (YLeaf(YType.str, 'group-address'), ['str','str'])),
                                ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                ('source_address', (YLeaf(YType.str, 'source-address'), ['str','str'])),
                                ('is_router_exclude_mode', (YLeaf(YType.boolean, 'is-router-exclude-mode'), ['bool'])),
                                ('is_host_exclude_mode', (YLeaf(YType.boolean, 'is-host-exclude-mode'), ['bool'])),
                            ])
                            self.group_address = None
                            self.interface_name = None
                            self.source_address = None
                            self.is_router_exclude_mode = None
                            self.is_host_exclude_mode = None

                            self.group_info = Mld.Active.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo()
                            self.group_info.parent = self
                            self._children_name_map["group_info"] = "group-info"

                            self.source = YList(self)
                            self._segment_path = lambda: "detail-group"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Active.Vrfs.Vrf.DetailGroups.DetailGroup, ['group_address', 'interface_name', 'source_address', 'is_router_exclude_mode', 'is_host_exclude_mode'], name, value)


                        class GroupInfo(_Entity_):
                            """
                            Basic Group information
                            
                            .. attribute:: group_address_xr
                            
                            	Group Address
                            	**type**\:  :py:class:`GroupAddressXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.GroupAddressXr>`
                            
                            	**config**\: False
                            
                            .. attribute:: last_reporter
                            
                            	Last reporter address
                            	**type**\:  :py:class:`LastReporter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.LastReporter>`
                            
                            	**config**\: False
                            
                            .. attribute:: source_address
                            
                            	Source Address
                            	**type**\:  :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.SourceAddress>`
                            
                            	**config**\: False
                            
                            .. attribute:: interface_name_xr
                            
                            	Interface
                            	**type**\: str
                            
                            	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                            
                            	**config**\: False
                            
                            .. attribute:: uptime
                            
                            	Uptime in seconds
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            	**config**\: False
                            
                            	**units**\: second
                            
                            .. attribute:: expiration_time
                            
                            	Expiration time in seconds
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            	**config**\: False
                            
                            	**units**\: second
                            
                            .. attribute:: explicit_tracking_enabled
                            
                            	Is explicit tracking enabled
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: is_self_join
                            
                            	If local system is member of this group on this interface
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: row_status
                            
                            	interface on or off for the group
                            	**type**\: str
                            
                            	**length:** 0..16
                            
                            	**config**\: False
                            
                            .. attribute:: is_low_memory
                            
                            	Node is running low on memory
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: router_filter_mode
                            
                            	Filter mode
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            	**config**\: False
                            
                            .. attribute:: older_host_version1_timer
                            
                            	IGMP Hostversion1timer
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: older_host_version2_timer
                            
                            	IGMP Hostversion2timer
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: is_added
                            
                            	Joined
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: is_suppressed
                            
                            	Suppressed
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Active.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo, self).__init__()

                                self.yang_name = "group-info"
                                self.yang_parent_name = "detail-group"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("group-address-xr", ("group_address_xr", Mld.Active.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.GroupAddressXr)), ("last-reporter", ("last_reporter", Mld.Active.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.LastReporter)), ("source-address", ("source_address", Mld.Active.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.SourceAddress))])
                                self._leafs = OrderedDict([
                                    ('interface_name_xr', (YLeaf(YType.str, 'interface-name-xr'), ['str'])),
                                    ('uptime', (YLeaf(YType.uint64, 'uptime'), ['int'])),
                                    ('expiration_time', (YLeaf(YType.int32, 'expiration-time'), ['int'])),
                                    ('explicit_tracking_enabled', (YLeaf(YType.boolean, 'explicit-tracking-enabled'), ['bool'])),
                                    ('is_self_join', (YLeaf(YType.boolean, 'is-self-join'), ['bool'])),
                                    ('row_status', (YLeaf(YType.str, 'row-status'), ['str'])),
                                    ('is_low_memory', (YLeaf(YType.boolean, 'is-low-memory'), ['bool'])),
                                    ('router_filter_mode', (YLeaf(YType.uint8, 'router-filter-mode'), ['int'])),
                                    ('older_host_version1_timer', (YLeaf(YType.uint32, 'older-host-version1-timer'), ['int'])),
                                    ('older_host_version2_timer', (YLeaf(YType.uint32, 'older-host-version2-timer'), ['int'])),
                                    ('is_added', (YLeaf(YType.boolean, 'is-added'), ['bool'])),
                                    ('is_suppressed', (YLeaf(YType.boolean, 'is-suppressed'), ['bool'])),
                                ])
                                self.interface_name_xr = None
                                self.uptime = None
                                self.expiration_time = None
                                self.explicit_tracking_enabled = None
                                self.is_self_join = None
                                self.row_status = None
                                self.is_low_memory = None
                                self.router_filter_mode = None
                                self.older_host_version1_timer = None
                                self.older_host_version2_timer = None
                                self.is_added = None
                                self.is_suppressed = None

                                self.group_address_xr = Mld.Active.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.GroupAddressXr()
                                self.group_address_xr.parent = self
                                self._children_name_map["group_address_xr"] = "group-address-xr"

                                self.last_reporter = Mld.Active.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.LastReporter()
                                self.last_reporter.parent = self
                                self._children_name_map["last_reporter"] = "last-reporter"

                                self.source_address = Mld.Active.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.SourceAddress()
                                self.source_address.parent = self
                                self._children_name_map["source_address"] = "source-address"
                                self._segment_path = lambda: "group-info"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Active.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo, ['interface_name_xr', 'uptime', 'expiration_time', 'explicit_tracking_enabled', 'is_self_join', 'row_status', 'is_low_memory', 'router_filter_mode', 'older_host_version1_timer', 'older_host_version2_timer', 'is_added', 'is_suppressed'], name, value)


                            class GroupAddressXr(_Entity_):
                                """
                                Group Address
                                
                                .. attribute:: af_name
                                
                                	AFName
                                	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                                
                                	**config**\: False
                                
                                .. attribute:: ipv4_address
                                
                                	IPv4 Addr
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                .. attribute:: ipv6_address
                                
                                	IPV6 Addr
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                

                                """

                                _prefix = 'ipv4-igmp-oper'
                                _revision = '2018-01-31'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Mld.Active.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.GroupAddressXr, self).__init__()

                                    self.yang_name = "group-address-xr"
                                    self.yang_parent_name = "group-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                        ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                        ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                    ])
                                    self.af_name = None
                                    self.ipv4_address = None
                                    self.ipv6_address = None
                                    self._segment_path = lambda: "group-address-xr"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Mld.Active.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.GroupAddressXr, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                    return meta._meta_table['Mld.Active.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.GroupAddressXr']['meta_info']


                            class LastReporter(_Entity_):
                                """
                                Last reporter address
                                
                                .. attribute:: af_name
                                
                                	AFName
                                	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                                
                                	**config**\: False
                                
                                .. attribute:: ipv4_address
                                
                                	IPv4 Addr
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                .. attribute:: ipv6_address
                                
                                	IPV6 Addr
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                

                                """

                                _prefix = 'ipv4-igmp-oper'
                                _revision = '2018-01-31'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Mld.Active.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.LastReporter, self).__init__()

                                    self.yang_name = "last-reporter"
                                    self.yang_parent_name = "group-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                        ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                        ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                    ])
                                    self.af_name = None
                                    self.ipv4_address = None
                                    self.ipv6_address = None
                                    self._segment_path = lambda: "last-reporter"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Mld.Active.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.LastReporter, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                    return meta._meta_table['Mld.Active.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.LastReporter']['meta_info']


                            class SourceAddress(_Entity_):
                                """
                                Source Address
                                
                                .. attribute:: af_name
                                
                                	AFName
                                	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                                
                                	**config**\: False
                                
                                .. attribute:: ipv4_address
                                
                                	IPv4 Addr
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                .. attribute:: ipv6_address
                                
                                	IPV6 Addr
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                

                                """

                                _prefix = 'ipv4-igmp-oper'
                                _revision = '2018-01-31'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Mld.Active.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.SourceAddress, self).__init__()

                                    self.yang_name = "source-address"
                                    self.yang_parent_name = "group-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                        ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                        ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                    ])
                                    self.af_name = None
                                    self.ipv4_address = None
                                    self.ipv6_address = None
                                    self._segment_path = lambda: "source-address"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Mld.Active.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.SourceAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                    return meta._meta_table['Mld.Active.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.SourceAddress']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Active.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo']['meta_info']


                        class Source(_Entity_):
                            """
                            List of sources
                            
                            .. attribute:: source_address
                            
                            	Source Address
                            	**type**\:  :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.DetailGroups.DetailGroup.Source.SourceAddress>`
                            
                            	**config**\: False
                            
                            .. attribute:: uptime
                            
                            	Uptime in seconds
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            	**config**\: False
                            
                            	**units**\: second
                            
                            .. attribute:: expiration_time
                            
                            	Expiration time in seconds
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            	**config**\: False
                            
                            	**units**\: second
                            
                            .. attribute:: is_local
                            
                            	Is this a local source
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: is_remote
                            
                            	Is this a remote source
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: is_forward
                            
                            	Should we forward on this entry
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: is_we_report
                            
                            	Should we report the source
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: flags
                            
                            	Source flags
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            	**config**\: False
                            
                            .. attribute:: is_added
                            
                            	Joined
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Active.Vrfs.Vrf.DetailGroups.DetailGroup.Source, self).__init__()

                                self.yang_name = "source"
                                self.yang_parent_name = "detail-group"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("source-address", ("source_address", Mld.Active.Vrfs.Vrf.DetailGroups.DetailGroup.Source.SourceAddress))])
                                self._leafs = OrderedDict([
                                    ('uptime', (YLeaf(YType.uint64, 'uptime'), ['int'])),
                                    ('expiration_time', (YLeaf(YType.int32, 'expiration-time'), ['int'])),
                                    ('is_local', (YLeaf(YType.boolean, 'is-local'), ['bool'])),
                                    ('is_remote', (YLeaf(YType.boolean, 'is-remote'), ['bool'])),
                                    ('is_forward', (YLeaf(YType.boolean, 'is-forward'), ['bool'])),
                                    ('is_we_report', (YLeaf(YType.boolean, 'is-we-report'), ['bool'])),
                                    ('flags', (YLeaf(YType.int32, 'flags'), ['int'])),
                                    ('is_added', (YLeaf(YType.boolean, 'is-added'), ['bool'])),
                                ])
                                self.uptime = None
                                self.expiration_time = None
                                self.is_local = None
                                self.is_remote = None
                                self.is_forward = None
                                self.is_we_report = None
                                self.flags = None
                                self.is_added = None

                                self.source_address = Mld.Active.Vrfs.Vrf.DetailGroups.DetailGroup.Source.SourceAddress()
                                self.source_address.parent = self
                                self._children_name_map["source_address"] = "source-address"
                                self._segment_path = lambda: "source"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Active.Vrfs.Vrf.DetailGroups.DetailGroup.Source, ['uptime', 'expiration_time', 'is_local', 'is_remote', 'is_forward', 'is_we_report', 'flags', 'is_added'], name, value)


                            class SourceAddress(_Entity_):
                                """
                                Source Address
                                
                                .. attribute:: af_name
                                
                                	AFName
                                	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                                
                                	**config**\: False
                                
                                .. attribute:: ipv4_address
                                
                                	IPv4 Addr
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                .. attribute:: ipv6_address
                                
                                	IPV6 Addr
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                

                                """

                                _prefix = 'ipv4-igmp-oper'
                                _revision = '2018-01-31'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Mld.Active.Vrfs.Vrf.DetailGroups.DetailGroup.Source.SourceAddress, self).__init__()

                                    self.yang_name = "source-address"
                                    self.yang_parent_name = "source"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                        ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                        ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                    ])
                                    self.af_name = None
                                    self.ipv4_address = None
                                    self.ipv6_address = None
                                    self._segment_path = lambda: "source-address"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Mld.Active.Vrfs.Vrf.DetailGroups.DetailGroup.Source.SourceAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                    return meta._meta_table['Mld.Active.Vrfs.Vrf.DetailGroups.DetailGroup.Source.SourceAddress']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Active.Vrfs.Vrf.DetailGroups.DetailGroup.Source']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Active.Vrfs.Vrf.DetailGroups.DetailGroup']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Mld.Active.Vrfs.Vrf.DetailGroups']['meta_info']


                class NonActiveGroups(_Entity_):
                    """
                    IGMP Non\-Active Groups Information
                    
                    .. attribute:: non_active_groups
                    
                    	List of non\-active groups
                    	**type**\: list of  		 :py:class:`NonActiveGroups_ <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.NonActiveGroups.NonActiveGroups_>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Mld.Active.Vrfs.Vrf.NonActiveGroups, self).__init__()

                        self.yang_name = "non-active-groups"
                        self.yang_parent_name = "vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("non-active-groups", ("non_active_groups", Mld.Active.Vrfs.Vrf.NonActiveGroups.NonActiveGroups_))])
                        self._leafs = OrderedDict()

                        self.non_active_groups = YList(self)
                        self._segment_path = lambda: "non-active-groups"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Mld.Active.Vrfs.Vrf.NonActiveGroups, [], name, value)


                    class NonActiveGroups_(_Entity_):
                        """
                        List of non\-active groups
                        
                        .. attribute:: group_address
                        
                        	Group Address
                        	**type**\:  :py:class:`GroupAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.NonActiveGroups.NonActiveGroups_.GroupAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\:  :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.NonActiveGroups.NonActiveGroups_.SourceAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: interface
                        
                        	Interface Name
                        	**type**\: str
                        
                        	**length:** 0..65
                        
                        	**config**\: False
                        
                        .. attribute:: reason_for_non_activity
                        
                        	Reason for group join not being processed
                        	**type**\: str
                        
                        	**length:** 0..257
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Active.Vrfs.Vrf.NonActiveGroups.NonActiveGroups_, self).__init__()

                            self.yang_name = "non-active-groups"
                            self.yang_parent_name = "non-active-groups"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("group-address", ("group_address", Mld.Active.Vrfs.Vrf.NonActiveGroups.NonActiveGroups_.GroupAddress)), ("source-address", ("source_address", Mld.Active.Vrfs.Vrf.NonActiveGroups.NonActiveGroups_.SourceAddress))])
                            self._leafs = OrderedDict([
                                ('interface', (YLeaf(YType.str, 'interface'), ['str'])),
                                ('reason_for_non_activity', (YLeaf(YType.str, 'reason-for-non-activity'), ['str'])),
                            ])
                            self.interface = None
                            self.reason_for_non_activity = None

                            self.group_address = Mld.Active.Vrfs.Vrf.NonActiveGroups.NonActiveGroups_.GroupAddress()
                            self.group_address.parent = self
                            self._children_name_map["group_address"] = "group-address"

                            self.source_address = Mld.Active.Vrfs.Vrf.NonActiveGroups.NonActiveGroups_.SourceAddress()
                            self.source_address.parent = self
                            self._children_name_map["source_address"] = "source-address"
                            self._segment_path = lambda: "non-active-groups"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Active.Vrfs.Vrf.NonActiveGroups.NonActiveGroups_, ['interface', 'reason_for_non_activity'], name, value)


                        class GroupAddress(_Entity_):
                            """
                            Group Address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Active.Vrfs.Vrf.NonActiveGroups.NonActiveGroups_.GroupAddress, self).__init__()

                                self.yang_name = "group-address"
                                self.yang_parent_name = "non-active-groups"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "group-address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Active.Vrfs.Vrf.NonActiveGroups.NonActiveGroups_.GroupAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Active.Vrfs.Vrf.NonActiveGroups.NonActiveGroups_.GroupAddress']['meta_info']


                        class SourceAddress(_Entity_):
                            """
                            Source Address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Active.Vrfs.Vrf.NonActiveGroups.NonActiveGroups_.SourceAddress, self).__init__()

                                self.yang_name = "source-address"
                                self.yang_parent_name = "non-active-groups"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "source-address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Active.Vrfs.Vrf.NonActiveGroups.NonActiveGroups_.SourceAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Active.Vrfs.Vrf.NonActiveGroups.NonActiveGroups_.SourceAddress']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Active.Vrfs.Vrf.NonActiveGroups.NonActiveGroups_']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Mld.Active.Vrfs.Vrf.NonActiveGroups']['meta_info']


                class SsmMaps(_Entity_):
                    """
                    SSM Map Table
                    
                    .. attribute:: ssm_map
                    
                    	SSM Map information
                    	**type**\: list of  		 :py:class:`SsmMap <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.SsmMaps.SsmMap>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Mld.Active.Vrfs.Vrf.SsmMaps, self).__init__()

                        self.yang_name = "ssm-maps"
                        self.yang_parent_name = "vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("ssm-map", ("ssm_map", Mld.Active.Vrfs.Vrf.SsmMaps.SsmMap))])
                        self._leafs = OrderedDict()

                        self.ssm_map = YList(self)
                        self._segment_path = lambda: "ssm-maps"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Mld.Active.Vrfs.Vrf.SsmMaps, [], name, value)


                    class SsmMap(_Entity_):
                        """
                        SSM Map information
                        
                        .. attribute:: ssm_map_type
                        
                        	SSM Map Type
                        	**type**\:  :py:class:`IgmpssmMap <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpssmMap>`
                        
                        	**config**\: False
                        
                        .. attribute:: group_address
                        
                        	Group address
                        	**type**\: union of the below types:
                        
                        		**type**\: str
                        
                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        		**type**\: str
                        
                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: group_address_xr
                        
                        	Group Address
                        	**type**\:  :py:class:`GroupAddressXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.SsmMaps.SsmMap.GroupAddressXr>`
                        
                        	**config**\: False
                        
                        .. attribute:: map_type
                        
                        	Map Type of group
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: source_counts
                        
                        	Count of Sources
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Active.Vrfs.Vrf.SsmMaps.SsmMap, self).__init__()

                            self.yang_name = "ssm-map"
                            self.yang_parent_name = "ssm-maps"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("group-address-xr", ("group_address_xr", Mld.Active.Vrfs.Vrf.SsmMaps.SsmMap.GroupAddressXr))])
                            self._leafs = OrderedDict([
                                ('ssm_map_type', (YLeaf(YType.enumeration, 'ssm-map-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpssmMap', '')])),
                                ('group_address', (YLeaf(YType.str, 'group-address'), ['str','str'])),
                                ('map_type', (YLeaf(YType.uint32, 'map-type'), ['int'])),
                                ('source_counts', (YLeaf(YType.uint32, 'source-counts'), ['int'])),
                            ])
                            self.ssm_map_type = None
                            self.group_address = None
                            self.map_type = None
                            self.source_counts = None

                            self.group_address_xr = Mld.Active.Vrfs.Vrf.SsmMaps.SsmMap.GroupAddressXr()
                            self.group_address_xr.parent = self
                            self._children_name_map["group_address_xr"] = "group-address-xr"
                            self._segment_path = lambda: "ssm-map"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Active.Vrfs.Vrf.SsmMaps.SsmMap, ['ssm_map_type', 'group_address', 'map_type', 'source_counts'], name, value)


                        class GroupAddressXr(_Entity_):
                            """
                            Group Address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Active.Vrfs.Vrf.SsmMaps.SsmMap.GroupAddressXr, self).__init__()

                                self.yang_name = "group-address-xr"
                                self.yang_parent_name = "ssm-map"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "group-address-xr"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Active.Vrfs.Vrf.SsmMaps.SsmMap.GroupAddressXr, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Active.Vrfs.Vrf.SsmMaps.SsmMap.GroupAddressXr']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Active.Vrfs.Vrf.SsmMaps.SsmMap']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Mld.Active.Vrfs.Vrf.SsmMaps']['meta_info']


                class ExplicitGroups(_Entity_):
                    """
                    IGMP Explicit Group Database
                    
                    .. attribute:: explicit_group
                    
                    	IGMP Explicit Group Entry Information
                    	**type**\: list of  		 :py:class:`ExplicitGroup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Mld.Active.Vrfs.Vrf.ExplicitGroups, self).__init__()

                        self.yang_name = "explicit-groups"
                        self.yang_parent_name = "vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("explicit-group", ("explicit_group", Mld.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup))])
                        self._leafs = OrderedDict()

                        self.explicit_group = YList(self)
                        self._segment_path = lambda: "explicit-groups"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Mld.Active.Vrfs.Vrf.ExplicitGroups, [], name, value)


                    class ExplicitGroup(_Entity_):
                        """
                        IGMP Explicit Group Entry Information
                        
                        .. attribute:: group_address
                        
                        	Group Address
                        	**type**\: union of the below types:
                        
                        		**type**\: str
                        
                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        		**type**\: str
                        
                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: interface_name
                        
                        	Interface Name
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: source_address
                        
                        	Source/Host Address
                        	**type**\: union of the below types:
                        
                        		**type**\: str
                        
                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        		**type**\: str
                        
                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: group_info
                        
                        	Basic Group information
                        	**type**\:  :py:class:`GroupInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo>`
                        
                        	**config**\: False
                        
                        .. attribute:: include_hosts
                        
                        	No. of hosts who are included
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: exclude_hosts
                        
                        	No. of hosts who are excluded
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: host
                        
                        	List of hosts
                        	**type**\: list of  		 :py:class:`Host <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.Host>`
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup, self).__init__()

                            self.yang_name = "explicit-group"
                            self.yang_parent_name = "explicit-groups"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("group-info", ("group_info", Mld.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo)), ("host", ("host", Mld.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.Host))])
                            self._leafs = OrderedDict([
                                ('group_address', (YLeaf(YType.str, 'group-address'), ['str','str'])),
                                ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                ('source_address', (YLeaf(YType.str, 'source-address'), ['str','str'])),
                                ('include_hosts', (YLeaf(YType.uint32, 'include-hosts'), ['int'])),
                                ('exclude_hosts', (YLeaf(YType.uint32, 'exclude-hosts'), ['int'])),
                            ])
                            self.group_address = None
                            self.interface_name = None
                            self.source_address = None
                            self.include_hosts = None
                            self.exclude_hosts = None

                            self.group_info = Mld.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo()
                            self.group_info.parent = self
                            self._children_name_map["group_info"] = "group-info"

                            self.host = YList(self)
                            self._segment_path = lambda: "explicit-group"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup, ['group_address', 'interface_name', 'source_address', 'include_hosts', 'exclude_hosts'], name, value)


                        class GroupInfo(_Entity_):
                            """
                            Basic Group information
                            
                            .. attribute:: group_address_xr
                            
                            	Group Address
                            	**type**\:  :py:class:`GroupAddressXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.GroupAddressXr>`
                            
                            	**config**\: False
                            
                            .. attribute:: last_reporter
                            
                            	Last reporter address
                            	**type**\:  :py:class:`LastReporter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.LastReporter>`
                            
                            	**config**\: False
                            
                            .. attribute:: source_address
                            
                            	Source Address
                            	**type**\:  :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.SourceAddress>`
                            
                            	**config**\: False
                            
                            .. attribute:: interface_name_xr
                            
                            	Interface
                            	**type**\: str
                            
                            	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                            
                            	**config**\: False
                            
                            .. attribute:: uptime
                            
                            	Uptime in seconds
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            	**config**\: False
                            
                            	**units**\: second
                            
                            .. attribute:: expiration_time
                            
                            	Expiration time in seconds
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            	**config**\: False
                            
                            	**units**\: second
                            
                            .. attribute:: explicit_tracking_enabled
                            
                            	Is explicit tracking enabled
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: is_self_join
                            
                            	If local system is member of this group on this interface
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: row_status
                            
                            	interface on or off for the group
                            	**type**\: str
                            
                            	**length:** 0..16
                            
                            	**config**\: False
                            
                            .. attribute:: is_low_memory
                            
                            	Node is running low on memory
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: router_filter_mode
                            
                            	Filter mode
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            	**config**\: False
                            
                            .. attribute:: older_host_version1_timer
                            
                            	IGMP Hostversion1timer
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: older_host_version2_timer
                            
                            	IGMP Hostversion2timer
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: is_added
                            
                            	Joined
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: is_suppressed
                            
                            	Suppressed
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo, self).__init__()

                                self.yang_name = "group-info"
                                self.yang_parent_name = "explicit-group"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("group-address-xr", ("group_address_xr", Mld.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.GroupAddressXr)), ("last-reporter", ("last_reporter", Mld.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.LastReporter)), ("source-address", ("source_address", Mld.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.SourceAddress))])
                                self._leafs = OrderedDict([
                                    ('interface_name_xr', (YLeaf(YType.str, 'interface-name-xr'), ['str'])),
                                    ('uptime', (YLeaf(YType.uint64, 'uptime'), ['int'])),
                                    ('expiration_time', (YLeaf(YType.int32, 'expiration-time'), ['int'])),
                                    ('explicit_tracking_enabled', (YLeaf(YType.boolean, 'explicit-tracking-enabled'), ['bool'])),
                                    ('is_self_join', (YLeaf(YType.boolean, 'is-self-join'), ['bool'])),
                                    ('row_status', (YLeaf(YType.str, 'row-status'), ['str'])),
                                    ('is_low_memory', (YLeaf(YType.boolean, 'is-low-memory'), ['bool'])),
                                    ('router_filter_mode', (YLeaf(YType.uint8, 'router-filter-mode'), ['int'])),
                                    ('older_host_version1_timer', (YLeaf(YType.uint32, 'older-host-version1-timer'), ['int'])),
                                    ('older_host_version2_timer', (YLeaf(YType.uint32, 'older-host-version2-timer'), ['int'])),
                                    ('is_added', (YLeaf(YType.boolean, 'is-added'), ['bool'])),
                                    ('is_suppressed', (YLeaf(YType.boolean, 'is-suppressed'), ['bool'])),
                                ])
                                self.interface_name_xr = None
                                self.uptime = None
                                self.expiration_time = None
                                self.explicit_tracking_enabled = None
                                self.is_self_join = None
                                self.row_status = None
                                self.is_low_memory = None
                                self.router_filter_mode = None
                                self.older_host_version1_timer = None
                                self.older_host_version2_timer = None
                                self.is_added = None
                                self.is_suppressed = None

                                self.group_address_xr = Mld.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.GroupAddressXr()
                                self.group_address_xr.parent = self
                                self._children_name_map["group_address_xr"] = "group-address-xr"

                                self.last_reporter = Mld.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.LastReporter()
                                self.last_reporter.parent = self
                                self._children_name_map["last_reporter"] = "last-reporter"

                                self.source_address = Mld.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.SourceAddress()
                                self.source_address.parent = self
                                self._children_name_map["source_address"] = "source-address"
                                self._segment_path = lambda: "group-info"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo, ['interface_name_xr', 'uptime', 'expiration_time', 'explicit_tracking_enabled', 'is_self_join', 'row_status', 'is_low_memory', 'router_filter_mode', 'older_host_version1_timer', 'older_host_version2_timer', 'is_added', 'is_suppressed'], name, value)


                            class GroupAddressXr(_Entity_):
                                """
                                Group Address
                                
                                .. attribute:: af_name
                                
                                	AFName
                                	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                                
                                	**config**\: False
                                
                                .. attribute:: ipv4_address
                                
                                	IPv4 Addr
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                .. attribute:: ipv6_address
                                
                                	IPV6 Addr
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                

                                """

                                _prefix = 'ipv4-igmp-oper'
                                _revision = '2018-01-31'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Mld.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.GroupAddressXr, self).__init__()

                                    self.yang_name = "group-address-xr"
                                    self.yang_parent_name = "group-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                        ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                        ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                    ])
                                    self.af_name = None
                                    self.ipv4_address = None
                                    self.ipv6_address = None
                                    self._segment_path = lambda: "group-address-xr"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Mld.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.GroupAddressXr, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                    return meta._meta_table['Mld.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.GroupAddressXr']['meta_info']


                            class LastReporter(_Entity_):
                                """
                                Last reporter address
                                
                                .. attribute:: af_name
                                
                                	AFName
                                	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                                
                                	**config**\: False
                                
                                .. attribute:: ipv4_address
                                
                                	IPv4 Addr
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                .. attribute:: ipv6_address
                                
                                	IPV6 Addr
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                

                                """

                                _prefix = 'ipv4-igmp-oper'
                                _revision = '2018-01-31'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Mld.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.LastReporter, self).__init__()

                                    self.yang_name = "last-reporter"
                                    self.yang_parent_name = "group-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                        ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                        ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                    ])
                                    self.af_name = None
                                    self.ipv4_address = None
                                    self.ipv6_address = None
                                    self._segment_path = lambda: "last-reporter"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Mld.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.LastReporter, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                    return meta._meta_table['Mld.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.LastReporter']['meta_info']


                            class SourceAddress(_Entity_):
                                """
                                Source Address
                                
                                .. attribute:: af_name
                                
                                	AFName
                                	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                                
                                	**config**\: False
                                
                                .. attribute:: ipv4_address
                                
                                	IPv4 Addr
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                .. attribute:: ipv6_address
                                
                                	IPV6 Addr
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                

                                """

                                _prefix = 'ipv4-igmp-oper'
                                _revision = '2018-01-31'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Mld.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.SourceAddress, self).__init__()

                                    self.yang_name = "source-address"
                                    self.yang_parent_name = "group-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                        ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                        ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                    ])
                                    self.af_name = None
                                    self.ipv4_address = None
                                    self.ipv6_address = None
                                    self._segment_path = lambda: "source-address"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Mld.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.SourceAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                    return meta._meta_table['Mld.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.SourceAddress']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo']['meta_info']


                        class Host(_Entity_):
                            """
                            List of hosts
                            
                            .. attribute:: address
                            
                            	Host Address
                            	**type**\:  :py:class:`Address <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.Host.Address>`
                            
                            	**config**\: False
                            
                            .. attribute:: uptime
                            
                            	Uptime in seconds
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            	**units**\: second
                            
                            .. attribute:: is_exclude
                            
                            	Exclude flag set
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: expiration_time
                            
                            	Expiration time in seconds
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            	**units**\: second
                            
                            .. attribute:: source_count
                            
                            	No. of sources in entry
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: source_address
                            
                            	First 3 source addresses
                            	**type**\: list of  		 :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.Host.SourceAddress>`
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.Host, self).__init__()

                                self.yang_name = "host"
                                self.yang_parent_name = "explicit-group"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("address", ("address", Mld.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.Host.Address)), ("source-address", ("source_address", Mld.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.Host.SourceAddress))])
                                self._leafs = OrderedDict([
                                    ('uptime', (YLeaf(YType.uint32, 'uptime'), ['int'])),
                                    ('is_exclude', (YLeaf(YType.boolean, 'is-exclude'), ['bool'])),
                                    ('expiration_time', (YLeaf(YType.uint32, 'expiration-time'), ['int'])),
                                    ('source_count', (YLeaf(YType.uint32, 'source-count'), ['int'])),
                                ])
                                self.uptime = None
                                self.is_exclude = None
                                self.expiration_time = None
                                self.source_count = None

                                self.address = Mld.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.Host.Address()
                                self.address.parent = self
                                self._children_name_map["address"] = "address"

                                self.source_address = YList(self)
                                self._segment_path = lambda: "host"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.Host, ['uptime', 'is_exclude', 'expiration_time', 'source_count'], name, value)


                            class Address(_Entity_):
                                """
                                Host Address
                                
                                .. attribute:: af_name
                                
                                	AFName
                                	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                                
                                	**config**\: False
                                
                                .. attribute:: ipv4_address
                                
                                	IPv4 Addr
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                .. attribute:: ipv6_address
                                
                                	IPV6 Addr
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                

                                """

                                _prefix = 'ipv4-igmp-oper'
                                _revision = '2018-01-31'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Mld.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.Host.Address, self).__init__()

                                    self.yang_name = "address"
                                    self.yang_parent_name = "host"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                        ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                        ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                    ])
                                    self.af_name = None
                                    self.ipv4_address = None
                                    self.ipv6_address = None
                                    self._segment_path = lambda: "address"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Mld.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.Host.Address, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                    return meta._meta_table['Mld.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.Host.Address']['meta_info']


                            class SourceAddress(_Entity_):
                                """
                                First 3 source addresses
                                
                                .. attribute:: af_name
                                
                                	AFName
                                	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                                
                                	**config**\: False
                                
                                .. attribute:: ipv4_address
                                
                                	IPv4 Addr
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                .. attribute:: ipv6_address
                                
                                	IPV6 Addr
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                

                                """

                                _prefix = 'ipv4-igmp-oper'
                                _revision = '2018-01-31'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Mld.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.Host.SourceAddress, self).__init__()

                                    self.yang_name = "source-address"
                                    self.yang_parent_name = "host"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                        ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                        ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                    ])
                                    self.af_name = None
                                    self.ipv4_address = None
                                    self.ipv6_address = None
                                    self._segment_path = lambda: "source-address"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Mld.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.Host.SourceAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                    return meta._meta_table['Mld.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.Host.SourceAddress']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.Host']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Mld.Active.Vrfs.Vrf.ExplicitGroups']['meta_info']


                class InterfaceTable(_Entity_):
                    """
                    IGMP Interface specific Table
                    
                    .. attribute:: interface
                    
                    	IGMP Interface
                    	**type**\: list of  		 :py:class:`Interface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.InterfaceTable.Interface>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Mld.Active.Vrfs.Vrf.InterfaceTable, self).__init__()

                        self.yang_name = "interface-table"
                        self.yang_parent_name = "vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("interface", ("interface", Mld.Active.Vrfs.Vrf.InterfaceTable.Interface))])
                        self._leafs = OrderedDict()

                        self.interface = YList(self)
                        self._segment_path = lambda: "interface-table"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Mld.Active.Vrfs.Vrf.InterfaceTable, [], name, value)


                    class Interface(_Entity_):
                        """
                        IGMP Interface
                        
                        .. attribute:: interface_name  (key)
                        
                        	Interface Name
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: address
                        
                        	IP address
                        	**type**\:  :py:class:`Address <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.InterfaceTable.Interface.Address>`
                        
                        	**config**\: False
                        
                        .. attribute:: querier_address
                        
                        	Address of the Querier
                        	**type**\:  :py:class:`QuerierAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.InterfaceTable.Interface.QuerierAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: subscriber_address
                        
                        	Address of subscriber
                        	**type**\:  :py:class:`SubscriberAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.InterfaceTable.Interface.SubscriberAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: interface_name_xr
                        
                        	Interface
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: state
                        
                        	Interface state
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: prefix_length
                        
                        	Prefix length
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_interface_up
                        
                        	Is interface up
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_ip_enabled
                        
                        	Is IP enabled
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_router_enabled
                        
                        	Is Router functionality enabled
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: igmp_version
                        
                        	IGMP Router version
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        	**config**\: False
                        
                        .. attribute:: host_version
                        
                        	IGMP Host version
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        	**config**\: False
                        
                        .. attribute:: query_interval
                        
                        	Query Interval value in seconds
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        	**units**\: second
                        
                        .. attribute:: query_timeout
                        
                        	Query Timeout value
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: query_maximum_response_time
                        
                        	Max Response Timeout value
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: last_member_query_interval
                        
                        	Last Member Query Interval
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: group_joins
                        
                        	No. of group joins
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: group_leaves
                        
                        	No. of group leaves
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_querier
                        
                        	Are we querier
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: total_active_groups
                        
                        	Actual number of groups on interface
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: robustness
                        
                        	Robustness Variable value
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: proxy_interface
                        
                        	Proxy interface index
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: querier_uptime
                        
                        	Time since the last querier took over
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: las_ll_registration_count
                        
                        	LAS reg count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_get_address_count
                        
                        	LAS get addr count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_update_count
                        
                        	LAS Update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_ll_remove_update_count
                        
                        	LAS LL remove update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_ll_add_update_count
                        
                        	LAS LL add update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_null_update_count
                        
                        	LAS Null update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_unregistration_count
                        
                        	LAS unreg count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_las_request
                        
                        	LAS req
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_las_registered
                        
                        	LAS registered
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: vrf_id
                        
                        	VRF id
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: mte_vrf_id
                        
                        	MTE VRF id
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: location
                        
                        	Location
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: mtu
                        
                        	MTU
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: vrf_state
                        
                        	Vrf State
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_configurationverify
                        
                        	CFG verify
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configurationvrf_set
                        
                        	CFG vrf set
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configurationvrf_error
                        
                        	CFG vrf error
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configuration_mcast_vrf_set
                        
                        	Is mcast set
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configuration_mcast_vrf_error
                        
                        	Is mcast error
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_im_state_registered
                        
                        	Im state registered
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_subscriber
                        
                        	Subscriber interface
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: subscriber_mode
                        
                        	Subscriber mode
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_identity_present
                        
                        	Subscriber ID or Address available from AAA
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: subscriber_id
                        
                        	ID string of subscriber
                        	**type**\: str
                        
                        	**length:** 0..257
                        
                        	**config**\: False
                        
                        .. attribute:: parent_ifhandle
                        
                        	Parent If Handle
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: time_since_last_query_in_seconds
                        
                        	Time elapsed since last query
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: time_since_last_report_in_seconds
                        
                        	Time elapsed since last report
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: router_uptime_in_seconds
                        
                        	Uptime since router enabled event
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: mte_tuple_count
                        
                        	MTE Tuple count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Active.Vrfs.Vrf.InterfaceTable.Interface, self).__init__()

                            self.yang_name = "interface"
                            self.yang_parent_name = "interface-table"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['interface_name']
                            self._child_classes = OrderedDict([("address", ("address", Mld.Active.Vrfs.Vrf.InterfaceTable.Interface.Address)), ("querier-address", ("querier_address", Mld.Active.Vrfs.Vrf.InterfaceTable.Interface.QuerierAddress)), ("subscriber-address", ("subscriber_address", Mld.Active.Vrfs.Vrf.InterfaceTable.Interface.SubscriberAddress))])
                            self._leafs = OrderedDict([
                                ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                ('interface_name_xr', (YLeaf(YType.str, 'interface-name-xr'), ['str'])),
                                ('state', (YLeaf(YType.uint32, 'state'), ['int'])),
                                ('prefix_length', (YLeaf(YType.uint32, 'prefix-length'), ['int'])),
                                ('is_interface_up', (YLeaf(YType.boolean, 'is-interface-up'), ['bool'])),
                                ('is_ip_enabled', (YLeaf(YType.boolean, 'is-ip-enabled'), ['bool'])),
                                ('is_router_enabled', (YLeaf(YType.boolean, 'is-router-enabled'), ['bool'])),
                                ('igmp_version', (YLeaf(YType.uint8, 'igmp-version'), ['int'])),
                                ('host_version', (YLeaf(YType.uint8, 'host-version'), ['int'])),
                                ('query_interval', (YLeaf(YType.uint16, 'query-interval'), ['int'])),
                                ('query_timeout', (YLeaf(YType.uint16, 'query-timeout'), ['int'])),
                                ('query_maximum_response_time', (YLeaf(YType.uint16, 'query-maximum-response-time'), ['int'])),
                                ('last_member_query_interval', (YLeaf(YType.uint16, 'last-member-query-interval'), ['int'])),
                                ('group_joins', (YLeaf(YType.uint32, 'group-joins'), ['int'])),
                                ('group_leaves', (YLeaf(YType.uint32, 'group-leaves'), ['int'])),
                                ('is_querier', (YLeaf(YType.boolean, 'is-querier'), ['bool'])),
                                ('total_active_groups', (YLeaf(YType.uint32, 'total-active-groups'), ['int'])),
                                ('robustness', (YLeaf(YType.uint32, 'robustness'), ['int'])),
                                ('proxy_interface', (YLeaf(YType.str, 'proxy-interface'), ['str'])),
                                ('querier_uptime', (YLeaf(YType.uint16, 'querier-uptime'), ['int'])),
                                ('las_ll_registration_count', (YLeaf(YType.uint32, 'las-ll-registration-count'), ['int'])),
                                ('las_get_address_count', (YLeaf(YType.uint32, 'las-get-address-count'), ['int'])),
                                ('las_update_count', (YLeaf(YType.uint32, 'las-update-count'), ['int'])),
                                ('las_ll_remove_update_count', (YLeaf(YType.uint32, 'las-ll-remove-update-count'), ['int'])),
                                ('las_ll_add_update_count', (YLeaf(YType.uint32, 'las-ll-add-update-count'), ['int'])),
                                ('las_null_update_count', (YLeaf(YType.uint32, 'las-null-update-count'), ['int'])),
                                ('las_unregistration_count', (YLeaf(YType.uint32, 'las-unregistration-count'), ['int'])),
                                ('is_las_request', (YLeaf(YType.boolean, 'is-las-request'), ['bool'])),
                                ('is_las_registered', (YLeaf(YType.boolean, 'is-las-registered'), ['bool'])),
                                ('vrf_id', (YLeaf(YType.uint32, 'vrf-id'), ['int'])),
                                ('mte_vrf_id', (YLeaf(YType.uint32, 'mte-vrf-id'), ['int'])),
                                ('location', (YLeaf(YType.uint32, 'location'), ['int'])),
                                ('mtu', (YLeaf(YType.uint32, 'mtu'), ['int'])),
                                ('vrf_state', (YLeaf(YType.uint32, 'vrf-state'), ['int'])),
                                ('is_configurationverify', (YLeaf(YType.boolean, 'is-configurationverify'), ['bool'])),
                                ('configurationvrf_set', (YLeaf(YType.boolean, 'configurationvrf-set'), ['bool'])),
                                ('configurationvrf_error', (YLeaf(YType.boolean, 'configurationvrf-error'), ['bool'])),
                                ('configuration_mcast_vrf_set', (YLeaf(YType.boolean, 'configuration-mcast-vrf-set'), ['bool'])),
                                ('configuration_mcast_vrf_error', (YLeaf(YType.boolean, 'configuration-mcast-vrf-error'), ['bool'])),
                                ('is_im_state_registered', (YLeaf(YType.boolean, 'is-im-state-registered'), ['bool'])),
                                ('is_subscriber', (YLeaf(YType.boolean, 'is-subscriber'), ['bool'])),
                                ('subscriber_mode', (YLeaf(YType.uint32, 'subscriber-mode'), ['int'])),
                                ('is_identity_present', (YLeaf(YType.boolean, 'is-identity-present'), ['bool'])),
                                ('subscriber_id', (YLeaf(YType.str, 'subscriber-id'), ['str'])),
                                ('parent_ifhandle', (YLeaf(YType.str, 'parent-ifhandle'), ['str'])),
                                ('time_since_last_query_in_seconds', (YLeaf(YType.uint32, 'time-since-last-query-in-seconds'), ['int'])),
                                ('time_since_last_report_in_seconds', (YLeaf(YType.uint32, 'time-since-last-report-in-seconds'), ['int'])),
                                ('router_uptime_in_seconds', (YLeaf(YType.uint32, 'router-uptime-in-seconds'), ['int'])),
                                ('mte_tuple_count', (YLeaf(YType.uint32, 'mte-tuple-count'), ['int'])),
                            ])
                            self.interface_name = None
                            self.interface_name_xr = None
                            self.state = None
                            self.prefix_length = None
                            self.is_interface_up = None
                            self.is_ip_enabled = None
                            self.is_router_enabled = None
                            self.igmp_version = None
                            self.host_version = None
                            self.query_interval = None
                            self.query_timeout = None
                            self.query_maximum_response_time = None
                            self.last_member_query_interval = None
                            self.group_joins = None
                            self.group_leaves = None
                            self.is_querier = None
                            self.total_active_groups = None
                            self.robustness = None
                            self.proxy_interface = None
                            self.querier_uptime = None
                            self.las_ll_registration_count = None
                            self.las_get_address_count = None
                            self.las_update_count = None
                            self.las_ll_remove_update_count = None
                            self.las_ll_add_update_count = None
                            self.las_null_update_count = None
                            self.las_unregistration_count = None
                            self.is_las_request = None
                            self.is_las_registered = None
                            self.vrf_id = None
                            self.mte_vrf_id = None
                            self.location = None
                            self.mtu = None
                            self.vrf_state = None
                            self.is_configurationverify = None
                            self.configurationvrf_set = None
                            self.configurationvrf_error = None
                            self.configuration_mcast_vrf_set = None
                            self.configuration_mcast_vrf_error = None
                            self.is_im_state_registered = None
                            self.is_subscriber = None
                            self.subscriber_mode = None
                            self.is_identity_present = None
                            self.subscriber_id = None
                            self.parent_ifhandle = None
                            self.time_since_last_query_in_seconds = None
                            self.time_since_last_report_in_seconds = None
                            self.router_uptime_in_seconds = None
                            self.mte_tuple_count = None

                            self.address = Mld.Active.Vrfs.Vrf.InterfaceTable.Interface.Address()
                            self.address.parent = self
                            self._children_name_map["address"] = "address"

                            self.querier_address = Mld.Active.Vrfs.Vrf.InterfaceTable.Interface.QuerierAddress()
                            self.querier_address.parent = self
                            self._children_name_map["querier_address"] = "querier-address"

                            self.subscriber_address = Mld.Active.Vrfs.Vrf.InterfaceTable.Interface.SubscriberAddress()
                            self.subscriber_address.parent = self
                            self._children_name_map["subscriber_address"] = "subscriber-address"
                            self._segment_path = lambda: "interface" + "[interface-name='" + str(self.interface_name) + "']"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Active.Vrfs.Vrf.InterfaceTable.Interface, ['interface_name', 'interface_name_xr', 'state', 'prefix_length', 'is_interface_up', 'is_ip_enabled', 'is_router_enabled', 'igmp_version', 'host_version', 'query_interval', 'query_timeout', 'query_maximum_response_time', 'last_member_query_interval', 'group_joins', 'group_leaves', 'is_querier', 'total_active_groups', 'robustness', 'proxy_interface', 'querier_uptime', 'las_ll_registration_count', 'las_get_address_count', 'las_update_count', 'las_ll_remove_update_count', 'las_ll_add_update_count', 'las_null_update_count', 'las_unregistration_count', 'is_las_request', 'is_las_registered', 'vrf_id', 'mte_vrf_id', 'location', 'mtu', 'vrf_state', 'is_configurationverify', 'configurationvrf_set', 'configurationvrf_error', 'configuration_mcast_vrf_set', 'configuration_mcast_vrf_error', 'is_im_state_registered', 'is_subscriber', 'subscriber_mode', 'is_identity_present', 'subscriber_id', 'parent_ifhandle', 'time_since_last_query_in_seconds', 'time_since_last_report_in_seconds', 'router_uptime_in_seconds', 'mte_tuple_count'], name, value)


                        class Address(_Entity_):
                            """
                            IP address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Active.Vrfs.Vrf.InterfaceTable.Interface.Address, self).__init__()

                                self.yang_name = "address"
                                self.yang_parent_name = "interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Active.Vrfs.Vrf.InterfaceTable.Interface.Address, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Active.Vrfs.Vrf.InterfaceTable.Interface.Address']['meta_info']


                        class QuerierAddress(_Entity_):
                            """
                            Address of the Querier
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Active.Vrfs.Vrf.InterfaceTable.Interface.QuerierAddress, self).__init__()

                                self.yang_name = "querier-address"
                                self.yang_parent_name = "interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "querier-address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Active.Vrfs.Vrf.InterfaceTable.Interface.QuerierAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Active.Vrfs.Vrf.InterfaceTable.Interface.QuerierAddress']['meta_info']


                        class SubscriberAddress(_Entity_):
                            """
                            Address of subscriber
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Active.Vrfs.Vrf.InterfaceTable.Interface.SubscriberAddress, self).__init__()

                                self.yang_name = "subscriber-address"
                                self.yang_parent_name = "interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "subscriber-address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Active.Vrfs.Vrf.InterfaceTable.Interface.SubscriberAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Active.Vrfs.Vrf.InterfaceTable.Interface.SubscriberAddress']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Active.Vrfs.Vrf.InterfaceTable.Interface']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Mld.Active.Vrfs.Vrf.InterfaceTable']['meta_info']


                class InterfaceUnicastQosAdjusts(_Entity_):
                    """
                    IGMP Interface Unicast\-Qos\-Adjust
                    
                    .. attribute:: interface_unicast_qos_adjust
                    
                    	IGMP Interface
                    	**type**\: list of  		 :py:class:`InterfaceUnicastQosAdjust <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Mld.Active.Vrfs.Vrf.InterfaceUnicastQosAdjusts, self).__init__()

                        self.yang_name = "interface-unicast-qos-adjusts"
                        self.yang_parent_name = "vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("interface-unicast-qos-adjust", ("interface_unicast_qos_adjust", Mld.Active.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust))])
                        self._leafs = OrderedDict()

                        self.interface_unicast_qos_adjust = YList(self)
                        self._segment_path = lambda: "interface-unicast-qos-adjusts"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Mld.Active.Vrfs.Vrf.InterfaceUnicastQosAdjusts, [], name, value)


                    class InterfaceUnicastQosAdjust(_Entity_):
                        """
                        IGMP Interface
                        
                        .. attribute:: interface_name  (key)
                        
                        	Interface Name
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: is_virtual_access
                        
                        	Is VirtualAccess Interface
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: rate
                        
                        	Overall rate in Kbps
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        	**units**\: kbit/s
                        
                        .. attribute:: rate_increments
                        
                        	Count of rate increments
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: rate_decrements
                        
                        	Count of rate decrements
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: update
                        
                        	List of updates
                        	**type**\: list of  		 :py:class:`Update <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update>`
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Active.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust, self).__init__()

                            self.yang_name = "interface-unicast-qos-adjust"
                            self.yang_parent_name = "interface-unicast-qos-adjusts"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['interface_name']
                            self._child_classes = OrderedDict([("update", ("update", Mld.Active.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update))])
                            self._leafs = OrderedDict([
                                ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                ('is_virtual_access', (YLeaf(YType.boolean, 'is-virtual-access'), ['bool'])),
                                ('rate', (YLeaf(YType.uint32, 'rate'), ['int'])),
                                ('rate_increments', (YLeaf(YType.uint32, 'rate-increments'), ['int'])),
                                ('rate_decrements', (YLeaf(YType.uint32, 'rate-decrements'), ['int'])),
                            ])
                            self.interface_name = None
                            self.is_virtual_access = None
                            self.rate = None
                            self.rate_increments = None
                            self.rate_decrements = None

                            self.update = YList(self)
                            self._segment_path = lambda: "interface-unicast-qos-adjust" + "[interface-name='" + str(self.interface_name) + "']"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Active.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust, ['interface_name', 'is_virtual_access', 'rate', 'rate_increments', 'rate_decrements'], name, value)


                        class Update(_Entity_):
                            """
                            List of updates
                            
                            .. attribute:: source_address
                            
                            	Source address
                            	**type**\:  :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.SourceAddress>`
                            
                            	**config**\: False
                            
                            .. attribute:: group_address
                            
                            	Group address
                            	**type**\:  :py:class:`GroupAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.GroupAddress>`
                            
                            	**config**\: False
                            
                            .. attribute:: is_add
                            
                            	Is this a rate increment
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: weight
                            
                            	Weight from policy
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: received_time
                            
                            	Time this update is received
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Active.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update, self).__init__()

                                self.yang_name = "update"
                                self.yang_parent_name = "interface-unicast-qos-adjust"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("source-address", ("source_address", Mld.Active.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.SourceAddress)), ("group-address", ("group_address", Mld.Active.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.GroupAddress))])
                                self._leafs = OrderedDict([
                                    ('is_add', (YLeaf(YType.boolean, 'is-add'), ['bool'])),
                                    ('weight', (YLeaf(YType.uint32, 'weight'), ['int'])),
                                    ('received_time', (YLeaf(YType.uint64, 'received-time'), ['int'])),
                                ])
                                self.is_add = None
                                self.weight = None
                                self.received_time = None

                                self.source_address = Mld.Active.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.SourceAddress()
                                self.source_address.parent = self
                                self._children_name_map["source_address"] = "source-address"

                                self.group_address = Mld.Active.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.GroupAddress()
                                self.group_address.parent = self
                                self._children_name_map["group_address"] = "group-address"
                                self._segment_path = lambda: "update"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Active.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update, ['is_add', 'weight', 'received_time'], name, value)


                            class SourceAddress(_Entity_):
                                """
                                Source address
                                
                                .. attribute:: af_name
                                
                                	AFName
                                	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                                
                                	**config**\: False
                                
                                .. attribute:: ipv4_address
                                
                                	IPv4 Addr
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                .. attribute:: ipv6_address
                                
                                	IPV6 Addr
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                

                                """

                                _prefix = 'ipv4-igmp-oper'
                                _revision = '2018-01-31'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Mld.Active.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.SourceAddress, self).__init__()

                                    self.yang_name = "source-address"
                                    self.yang_parent_name = "update"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                        ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                        ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                    ])
                                    self.af_name = None
                                    self.ipv4_address = None
                                    self.ipv6_address = None
                                    self._segment_path = lambda: "source-address"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Mld.Active.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.SourceAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                    return meta._meta_table['Mld.Active.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.SourceAddress']['meta_info']


                            class GroupAddress(_Entity_):
                                """
                                Group address
                                
                                .. attribute:: af_name
                                
                                	AFName
                                	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                                
                                	**config**\: False
                                
                                .. attribute:: ipv4_address
                                
                                	IPv4 Addr
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                .. attribute:: ipv6_address
                                
                                	IPV6 Addr
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                

                                """

                                _prefix = 'ipv4-igmp-oper'
                                _revision = '2018-01-31'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Mld.Active.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.GroupAddress, self).__init__()

                                    self.yang_name = "group-address"
                                    self.yang_parent_name = "update"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                        ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                        ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                    ])
                                    self.af_name = None
                                    self.ipv4_address = None
                                    self.ipv6_address = None
                                    self._segment_path = lambda: "group-address"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Mld.Active.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.GroupAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                    return meta._meta_table['Mld.Active.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.GroupAddress']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Active.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Active.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Mld.Active.Vrfs.Vrf.InterfaceUnicastQosAdjusts']['meta_info']


                class Ranges(_Entity_):
                    """
                    Range table
                    
                    .. attribute:: range
                    
                    	Range information
                    	**type**\: list of  		 :py:class:`Range <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.Ranges.Range>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Mld.Active.Vrfs.Vrf.Ranges, self).__init__()

                        self.yang_name = "ranges"
                        self.yang_parent_name = "vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("range", ("range", Mld.Active.Vrfs.Vrf.Ranges.Range))])
                        self._leafs = OrderedDict()

                        self.range = YList(self)
                        self._segment_path = lambda: "ranges"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Mld.Active.Vrfs.Vrf.Ranges, [], name, value)


                    class Range(_Entity_):
                        """
                        Range information
                        
                        .. attribute:: group_address
                        
                        	Group address
                        	**type**\: union of the below types:
                        
                        		**type**\: str
                        
                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        		**type**\: str
                        
                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: group_mask
                        
                        	Group Mask
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: group_address_xr
                        
                        	Group address
                        	**type**\:  :py:class:`GroupAddressXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.Ranges.Range.GroupAddressXr>`
                        
                        	**config**\: False
                        
                        .. attribute:: prefix_length
                        
                        	Prefix length
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: protocol
                        
                        	Protocol
                        	**type**\:  :py:class:`IgmpEdmProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpEdmProtocol>`
                        
                        	**config**\: False
                        
                        .. attribute:: is_stale
                        
                        	Is the entry stale
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Active.Vrfs.Vrf.Ranges.Range, self).__init__()

                            self.yang_name = "range"
                            self.yang_parent_name = "ranges"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("group-address-xr", ("group_address_xr", Mld.Active.Vrfs.Vrf.Ranges.Range.GroupAddressXr))])
                            self._leafs = OrderedDict([
                                ('group_address', (YLeaf(YType.str, 'group-address'), ['str','str'])),
                                ('group_mask', (YLeaf(YType.uint32, 'group-mask'), ['int'])),
                                ('prefix_length', (YLeaf(YType.uint32, 'prefix-length'), ['int'])),
                                ('protocol', (YLeaf(YType.enumeration, 'protocol'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpEdmProtocol', '')])),
                                ('is_stale', (YLeaf(YType.boolean, 'is-stale'), ['bool'])),
                            ])
                            self.group_address = None
                            self.group_mask = None
                            self.prefix_length = None
                            self.protocol = None
                            self.is_stale = None

                            self.group_address_xr = Mld.Active.Vrfs.Vrf.Ranges.Range.GroupAddressXr()
                            self.group_address_xr.parent = self
                            self._children_name_map["group_address_xr"] = "group-address-xr"
                            self._segment_path = lambda: "range"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Active.Vrfs.Vrf.Ranges.Range, ['group_address', 'group_mask', 'prefix_length', 'protocol', 'is_stale'], name, value)


                        class GroupAddressXr(_Entity_):
                            """
                            Group address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Active.Vrfs.Vrf.Ranges.Range.GroupAddressXr, self).__init__()

                                self.yang_name = "group-address-xr"
                                self.yang_parent_name = "range"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "group-address-xr"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Active.Vrfs.Vrf.Ranges.Range.GroupAddressXr, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Active.Vrfs.Vrf.Ranges.Range.GroupAddressXr']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Active.Vrfs.Vrf.Ranges.Range']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Mld.Active.Vrfs.Vrf.Ranges']['meta_info']


                class IfrsInterfaces(_Entity_):
                    """
                    IGMP Interface specific
                    
                    .. attribute:: ifrs_interface
                    
                    	IGMP IFRS Interface
                    	**type**\: list of  		 :py:class:`IfrsInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.IfrsInterfaces.IfrsInterface>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Mld.Active.Vrfs.Vrf.IfrsInterfaces, self).__init__()

                        self.yang_name = "ifrs-interfaces"
                        self.yang_parent_name = "vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("ifrs-interface", ("ifrs_interface", Mld.Active.Vrfs.Vrf.IfrsInterfaces.IfrsInterface))])
                        self._leafs = OrderedDict()

                        self.ifrs_interface = YList(self)
                        self._segment_path = lambda: "ifrs-interfaces"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Mld.Active.Vrfs.Vrf.IfrsInterfaces, [], name, value)


                    class IfrsInterface(_Entity_):
                        """
                        IGMP IFRS Interface
                        
                        .. attribute:: interface_name  (key)
                        
                        	IFRS Interface Name
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: igmp_interface_entry
                        
                        	IGMP interface entry
                        	**type**\:  :py:class:`IgmpInterfaceEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry>`
                        
                        	**config**\: False
                        
                        .. attribute:: join_group_count
                        
                        	Join group count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Active.Vrfs.Vrf.IfrsInterfaces.IfrsInterface, self).__init__()

                            self.yang_name = "ifrs-interface"
                            self.yang_parent_name = "ifrs-interfaces"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['interface_name']
                            self._child_classes = OrderedDict([("igmp-interface-entry", ("igmp_interface_entry", Mld.Active.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry))])
                            self._leafs = OrderedDict([
                                ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                ('join_group_count', (YLeaf(YType.uint32, 'join-group-count'), ['int'])),
                            ])
                            self.interface_name = None
                            self.join_group_count = None

                            self.igmp_interface_entry = Mld.Active.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry()
                            self.igmp_interface_entry.parent = self
                            self._children_name_map["igmp_interface_entry"] = "igmp-interface-entry"
                            self._segment_path = lambda: "ifrs-interface" + "[interface-name='" + str(self.interface_name) + "']"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Active.Vrfs.Vrf.IfrsInterfaces.IfrsInterface, ['interface_name', 'join_group_count'], name, value)


                        class IgmpInterfaceEntry(_Entity_):
                            """
                            IGMP interface entry
                            
                            .. attribute:: address
                            
                            	IP address
                            	**type**\:  :py:class:`Address <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.Address>`
                            
                            	**config**\: False
                            
                            .. attribute:: querier_address
                            
                            	Address of the Querier
                            	**type**\:  :py:class:`QuerierAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.QuerierAddress>`
                            
                            	**config**\: False
                            
                            .. attribute:: subscriber_address
                            
                            	Address of subscriber
                            	**type**\:  :py:class:`SubscriberAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.SubscriberAddress>`
                            
                            	**config**\: False
                            
                            .. attribute:: interface_name_xr
                            
                            	Interface
                            	**type**\: str
                            
                            	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                            
                            	**config**\: False
                            
                            .. attribute:: state
                            
                            	Interface state
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: prefix_length
                            
                            	Prefix length
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: is_interface_up
                            
                            	Is interface up
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: is_ip_enabled
                            
                            	Is IP enabled
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: is_router_enabled
                            
                            	Is Router functionality enabled
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: igmp_version
                            
                            	IGMP Router version
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            	**config**\: False
                            
                            .. attribute:: host_version
                            
                            	IGMP Host version
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            	**config**\: False
                            
                            .. attribute:: query_interval
                            
                            	Query Interval value in seconds
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            	**config**\: False
                            
                            	**units**\: second
                            
                            .. attribute:: query_timeout
                            
                            	Query Timeout value
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            	**config**\: False
                            
                            .. attribute:: query_maximum_response_time
                            
                            	Max Response Timeout value
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            	**config**\: False
                            
                            .. attribute:: last_member_query_interval
                            
                            	Last Member Query Interval
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            	**config**\: False
                            
                            .. attribute:: group_joins
                            
                            	No. of group joins
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: group_leaves
                            
                            	No. of group leaves
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: is_querier
                            
                            	Are we querier
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: total_active_groups
                            
                            	Actual number of groups on interface
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: robustness
                            
                            	Robustness Variable value
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: proxy_interface
                            
                            	Proxy interface index
                            	**type**\: str
                            
                            	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                            
                            	**config**\: False
                            
                            .. attribute:: querier_uptime
                            
                            	Time since the last querier took over
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            	**config**\: False
                            
                            .. attribute:: las_ll_registration_count
                            
                            	LAS reg count
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: las_get_address_count
                            
                            	LAS get addr count
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: las_update_count
                            
                            	LAS Update count
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: las_ll_remove_update_count
                            
                            	LAS LL remove update count
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: las_ll_add_update_count
                            
                            	LAS LL add update count
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: las_null_update_count
                            
                            	LAS Null update count
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: las_unregistration_count
                            
                            	LAS unreg count
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: is_las_request
                            
                            	LAS req
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: is_las_registered
                            
                            	LAS registered
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: vrf_id
                            
                            	VRF id
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: mte_vrf_id
                            
                            	MTE VRF id
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: location
                            
                            	Location
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: mtu
                            
                            	MTU
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: vrf_state
                            
                            	Vrf State
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: is_configurationverify
                            
                            	CFG verify
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: configurationvrf_set
                            
                            	CFG vrf set
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: configurationvrf_error
                            
                            	CFG vrf error
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: configuration_mcast_vrf_set
                            
                            	Is mcast set
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: configuration_mcast_vrf_error
                            
                            	Is mcast error
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: is_im_state_registered
                            
                            	Im state registered
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: is_subscriber
                            
                            	Subscriber interface
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: subscriber_mode
                            
                            	Subscriber mode
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: is_identity_present
                            
                            	Subscriber ID or Address available from AAA
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: subscriber_id
                            
                            	ID string of subscriber
                            	**type**\: str
                            
                            	**length:** 0..257
                            
                            	**config**\: False
                            
                            .. attribute:: parent_ifhandle
                            
                            	Parent If Handle
                            	**type**\: str
                            
                            	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                            
                            	**config**\: False
                            
                            .. attribute:: time_since_last_query_in_seconds
                            
                            	Time elapsed since last query
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: time_since_last_report_in_seconds
                            
                            	Time elapsed since last report
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: router_uptime_in_seconds
                            
                            	Uptime since router enabled event
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: mte_tuple_count
                            
                            	MTE Tuple count
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Active.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry, self).__init__()

                                self.yang_name = "igmp-interface-entry"
                                self.yang_parent_name = "ifrs-interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("address", ("address", Mld.Active.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.Address)), ("querier-address", ("querier_address", Mld.Active.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.QuerierAddress)), ("subscriber-address", ("subscriber_address", Mld.Active.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.SubscriberAddress))])
                                self._leafs = OrderedDict([
                                    ('interface_name_xr', (YLeaf(YType.str, 'interface-name-xr'), ['str'])),
                                    ('state', (YLeaf(YType.uint32, 'state'), ['int'])),
                                    ('prefix_length', (YLeaf(YType.uint32, 'prefix-length'), ['int'])),
                                    ('is_interface_up', (YLeaf(YType.boolean, 'is-interface-up'), ['bool'])),
                                    ('is_ip_enabled', (YLeaf(YType.boolean, 'is-ip-enabled'), ['bool'])),
                                    ('is_router_enabled', (YLeaf(YType.boolean, 'is-router-enabled'), ['bool'])),
                                    ('igmp_version', (YLeaf(YType.uint8, 'igmp-version'), ['int'])),
                                    ('host_version', (YLeaf(YType.uint8, 'host-version'), ['int'])),
                                    ('query_interval', (YLeaf(YType.uint16, 'query-interval'), ['int'])),
                                    ('query_timeout', (YLeaf(YType.uint16, 'query-timeout'), ['int'])),
                                    ('query_maximum_response_time', (YLeaf(YType.uint16, 'query-maximum-response-time'), ['int'])),
                                    ('last_member_query_interval', (YLeaf(YType.uint16, 'last-member-query-interval'), ['int'])),
                                    ('group_joins', (YLeaf(YType.uint32, 'group-joins'), ['int'])),
                                    ('group_leaves', (YLeaf(YType.uint32, 'group-leaves'), ['int'])),
                                    ('is_querier', (YLeaf(YType.boolean, 'is-querier'), ['bool'])),
                                    ('total_active_groups', (YLeaf(YType.uint32, 'total-active-groups'), ['int'])),
                                    ('robustness', (YLeaf(YType.uint32, 'robustness'), ['int'])),
                                    ('proxy_interface', (YLeaf(YType.str, 'proxy-interface'), ['str'])),
                                    ('querier_uptime', (YLeaf(YType.uint16, 'querier-uptime'), ['int'])),
                                    ('las_ll_registration_count', (YLeaf(YType.uint32, 'las-ll-registration-count'), ['int'])),
                                    ('las_get_address_count', (YLeaf(YType.uint32, 'las-get-address-count'), ['int'])),
                                    ('las_update_count', (YLeaf(YType.uint32, 'las-update-count'), ['int'])),
                                    ('las_ll_remove_update_count', (YLeaf(YType.uint32, 'las-ll-remove-update-count'), ['int'])),
                                    ('las_ll_add_update_count', (YLeaf(YType.uint32, 'las-ll-add-update-count'), ['int'])),
                                    ('las_null_update_count', (YLeaf(YType.uint32, 'las-null-update-count'), ['int'])),
                                    ('las_unregistration_count', (YLeaf(YType.uint32, 'las-unregistration-count'), ['int'])),
                                    ('is_las_request', (YLeaf(YType.boolean, 'is-las-request'), ['bool'])),
                                    ('is_las_registered', (YLeaf(YType.boolean, 'is-las-registered'), ['bool'])),
                                    ('vrf_id', (YLeaf(YType.uint32, 'vrf-id'), ['int'])),
                                    ('mte_vrf_id', (YLeaf(YType.uint32, 'mte-vrf-id'), ['int'])),
                                    ('location', (YLeaf(YType.uint32, 'location'), ['int'])),
                                    ('mtu', (YLeaf(YType.uint32, 'mtu'), ['int'])),
                                    ('vrf_state', (YLeaf(YType.uint32, 'vrf-state'), ['int'])),
                                    ('is_configurationverify', (YLeaf(YType.boolean, 'is-configurationverify'), ['bool'])),
                                    ('configurationvrf_set', (YLeaf(YType.boolean, 'configurationvrf-set'), ['bool'])),
                                    ('configurationvrf_error', (YLeaf(YType.boolean, 'configurationvrf-error'), ['bool'])),
                                    ('configuration_mcast_vrf_set', (YLeaf(YType.boolean, 'configuration-mcast-vrf-set'), ['bool'])),
                                    ('configuration_mcast_vrf_error', (YLeaf(YType.boolean, 'configuration-mcast-vrf-error'), ['bool'])),
                                    ('is_im_state_registered', (YLeaf(YType.boolean, 'is-im-state-registered'), ['bool'])),
                                    ('is_subscriber', (YLeaf(YType.boolean, 'is-subscriber'), ['bool'])),
                                    ('subscriber_mode', (YLeaf(YType.uint32, 'subscriber-mode'), ['int'])),
                                    ('is_identity_present', (YLeaf(YType.boolean, 'is-identity-present'), ['bool'])),
                                    ('subscriber_id', (YLeaf(YType.str, 'subscriber-id'), ['str'])),
                                    ('parent_ifhandle', (YLeaf(YType.str, 'parent-ifhandle'), ['str'])),
                                    ('time_since_last_query_in_seconds', (YLeaf(YType.uint32, 'time-since-last-query-in-seconds'), ['int'])),
                                    ('time_since_last_report_in_seconds', (YLeaf(YType.uint32, 'time-since-last-report-in-seconds'), ['int'])),
                                    ('router_uptime_in_seconds', (YLeaf(YType.uint32, 'router-uptime-in-seconds'), ['int'])),
                                    ('mte_tuple_count', (YLeaf(YType.uint32, 'mte-tuple-count'), ['int'])),
                                ])
                                self.interface_name_xr = None
                                self.state = None
                                self.prefix_length = None
                                self.is_interface_up = None
                                self.is_ip_enabled = None
                                self.is_router_enabled = None
                                self.igmp_version = None
                                self.host_version = None
                                self.query_interval = None
                                self.query_timeout = None
                                self.query_maximum_response_time = None
                                self.last_member_query_interval = None
                                self.group_joins = None
                                self.group_leaves = None
                                self.is_querier = None
                                self.total_active_groups = None
                                self.robustness = None
                                self.proxy_interface = None
                                self.querier_uptime = None
                                self.las_ll_registration_count = None
                                self.las_get_address_count = None
                                self.las_update_count = None
                                self.las_ll_remove_update_count = None
                                self.las_ll_add_update_count = None
                                self.las_null_update_count = None
                                self.las_unregistration_count = None
                                self.is_las_request = None
                                self.is_las_registered = None
                                self.vrf_id = None
                                self.mte_vrf_id = None
                                self.location = None
                                self.mtu = None
                                self.vrf_state = None
                                self.is_configurationverify = None
                                self.configurationvrf_set = None
                                self.configurationvrf_error = None
                                self.configuration_mcast_vrf_set = None
                                self.configuration_mcast_vrf_error = None
                                self.is_im_state_registered = None
                                self.is_subscriber = None
                                self.subscriber_mode = None
                                self.is_identity_present = None
                                self.subscriber_id = None
                                self.parent_ifhandle = None
                                self.time_since_last_query_in_seconds = None
                                self.time_since_last_report_in_seconds = None
                                self.router_uptime_in_seconds = None
                                self.mte_tuple_count = None

                                self.address = Mld.Active.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.Address()
                                self.address.parent = self
                                self._children_name_map["address"] = "address"

                                self.querier_address = Mld.Active.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.QuerierAddress()
                                self.querier_address.parent = self
                                self._children_name_map["querier_address"] = "querier-address"

                                self.subscriber_address = Mld.Active.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.SubscriberAddress()
                                self.subscriber_address.parent = self
                                self._children_name_map["subscriber_address"] = "subscriber-address"
                                self._segment_path = lambda: "igmp-interface-entry"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Active.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry, ['interface_name_xr', 'state', 'prefix_length', 'is_interface_up', 'is_ip_enabled', 'is_router_enabled', 'igmp_version', 'host_version', 'query_interval', 'query_timeout', 'query_maximum_response_time', 'last_member_query_interval', 'group_joins', 'group_leaves', 'is_querier', 'total_active_groups', 'robustness', 'proxy_interface', 'querier_uptime', 'las_ll_registration_count', 'las_get_address_count', 'las_update_count', 'las_ll_remove_update_count', 'las_ll_add_update_count', 'las_null_update_count', 'las_unregistration_count', 'is_las_request', 'is_las_registered', 'vrf_id', 'mte_vrf_id', 'location', 'mtu', 'vrf_state', 'is_configurationverify', 'configurationvrf_set', 'configurationvrf_error', 'configuration_mcast_vrf_set', 'configuration_mcast_vrf_error', 'is_im_state_registered', 'is_subscriber', 'subscriber_mode', 'is_identity_present', 'subscriber_id', 'parent_ifhandle', 'time_since_last_query_in_seconds', 'time_since_last_report_in_seconds', 'router_uptime_in_seconds', 'mte_tuple_count'], name, value)


                            class Address(_Entity_):
                                """
                                IP address
                                
                                .. attribute:: af_name
                                
                                	AFName
                                	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                                
                                	**config**\: False
                                
                                .. attribute:: ipv4_address
                                
                                	IPv4 Addr
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                .. attribute:: ipv6_address
                                
                                	IPV6 Addr
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                

                                """

                                _prefix = 'ipv4-igmp-oper'
                                _revision = '2018-01-31'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Mld.Active.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.Address, self).__init__()

                                    self.yang_name = "address"
                                    self.yang_parent_name = "igmp-interface-entry"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                        ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                        ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                    ])
                                    self.af_name = None
                                    self.ipv4_address = None
                                    self.ipv6_address = None
                                    self._segment_path = lambda: "address"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Mld.Active.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.Address, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                    return meta._meta_table['Mld.Active.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.Address']['meta_info']


                            class QuerierAddress(_Entity_):
                                """
                                Address of the Querier
                                
                                .. attribute:: af_name
                                
                                	AFName
                                	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                                
                                	**config**\: False
                                
                                .. attribute:: ipv4_address
                                
                                	IPv4 Addr
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                .. attribute:: ipv6_address
                                
                                	IPV6 Addr
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                

                                """

                                _prefix = 'ipv4-igmp-oper'
                                _revision = '2018-01-31'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Mld.Active.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.QuerierAddress, self).__init__()

                                    self.yang_name = "querier-address"
                                    self.yang_parent_name = "igmp-interface-entry"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                        ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                        ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                    ])
                                    self.af_name = None
                                    self.ipv4_address = None
                                    self.ipv6_address = None
                                    self._segment_path = lambda: "querier-address"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Mld.Active.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.QuerierAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                    return meta._meta_table['Mld.Active.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.QuerierAddress']['meta_info']


                            class SubscriberAddress(_Entity_):
                                """
                                Address of subscriber
                                
                                .. attribute:: af_name
                                
                                	AFName
                                	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                                
                                	**config**\: False
                                
                                .. attribute:: ipv4_address
                                
                                	IPv4 Addr
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                .. attribute:: ipv6_address
                                
                                	IPV6 Addr
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                

                                """

                                _prefix = 'ipv4-igmp-oper'
                                _revision = '2018-01-31'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Mld.Active.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.SubscriberAddress, self).__init__()

                                    self.yang_name = "subscriber-address"
                                    self.yang_parent_name = "igmp-interface-entry"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                        ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                        ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                    ])
                                    self.af_name = None
                                    self.ipv4_address = None
                                    self.ipv6_address = None
                                    self._segment_path = lambda: "subscriber-address"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Mld.Active.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.SubscriberAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                    return meta._meta_table['Mld.Active.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.SubscriberAddress']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Active.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Active.Vrfs.Vrf.IfrsInterfaces.IfrsInterface']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Mld.Active.Vrfs.Vrf.IfrsInterfaces']['meta_info']


                class TrafficCounters(_Entity_):
                    """
                    IGMP Message Traffic Counters
                    
                    .. attribute:: elapsed_time
                    
                    	Running time for counters
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: packets_in
                    
                    	Packets in
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: packets_out
                    
                    	Packets out
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: format_errors
                    
                    	Malformed packets in
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: packet_manager_input_errors
                    
                    	Incoming Packet Manager packets dropped
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: packet_manager_output_errors
                    
                    	Outgoing Packet Manager packets dropped
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: checksum_errors
                    
                    	Checksum errors
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: receive_socket_errors
                    
                    	Socket errors on reception
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: socket_errors
                    
                    	Socket errors on send
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: bad_scope_errors
                    
                    	BadScope errors
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: auxillary_data_length_errors
                    
                    	AuxDataLen errors
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: invalid_source_address_errors
                    
                    	Invalid Source Address errors
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: no_socket_connection
                    
                    	Packets dropped since no socket connection
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: miscellaneous_errors
                    
                    	Packets dropped for other reasons
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: input_queries
                    
                    	Query packets in
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: input_reports
                    
                    	Reports in
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: input_leaves
                    
                    	Leaves in
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: input_mtrace
                    
                    	Mtrace packets in
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: input_dvmrp
                    
                    	DVMRP packets in
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: input_pim
                    
                    	PIM packets in
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: output_queries
                    
                    	Query packets out
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: output_reports
                    
                    	Reports out
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: output_leaves
                    
                    	Leaves out
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: output_mtrace
                    
                    	Mtrace packets out
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: output_dvmrp
                    
                    	DVMRP packets out
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: output_pim
                    
                    	PIM packets out
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: get_packet_failure
                    
                    	Packet get failed
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: output_no_parent_interface_handle
                    
                    	Failures setting 2nd ifhandle
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: input_no_idb
                    
                    	Packets received without idb
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: input_no_vrf_in_idb
                    
                    	Packets received on idb without VRF
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: input_disabled_idb
                    
                    	Packet received on disabled idb
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: input_martian_address
                    
                    	Packets received with Martian Address
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: input_no_assigned_vrf_id
                    
                    	Packets received with no assigned vrf id
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: input_no_vrf_mtrace
                    
                    	mtrace packets with no vrf associated
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: input_no_platform_support_mtrace
                    
                    	mtrace packets without platform support
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Mld.Active.Vrfs.Vrf.TrafficCounters, self).__init__()

                        self.yang_name = "traffic-counters"
                        self.yang_parent_name = "vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('elapsed_time', (YLeaf(YType.uint32, 'elapsed-time'), ['int'])),
                            ('packets_in', (YLeaf(YType.uint32, 'packets-in'), ['int'])),
                            ('packets_out', (YLeaf(YType.uint32, 'packets-out'), ['int'])),
                            ('format_errors', (YLeaf(YType.uint32, 'format-errors'), ['int'])),
                            ('packet_manager_input_errors', (YLeaf(YType.uint32, 'packet-manager-input-errors'), ['int'])),
                            ('packet_manager_output_errors', (YLeaf(YType.uint32, 'packet-manager-output-errors'), ['int'])),
                            ('checksum_errors', (YLeaf(YType.uint32, 'checksum-errors'), ['int'])),
                            ('receive_socket_errors', (YLeaf(YType.uint32, 'receive-socket-errors'), ['int'])),
                            ('socket_errors', (YLeaf(YType.uint32, 'socket-errors'), ['int'])),
                            ('bad_scope_errors', (YLeaf(YType.uint32, 'bad-scope-errors'), ['int'])),
                            ('auxillary_data_length_errors', (YLeaf(YType.uint32, 'auxillary-data-length-errors'), ['int'])),
                            ('invalid_source_address_errors', (YLeaf(YType.uint32, 'invalid-source-address-errors'), ['int'])),
                            ('no_socket_connection', (YLeaf(YType.uint32, 'no-socket-connection'), ['int'])),
                            ('miscellaneous_errors', (YLeaf(YType.uint32, 'miscellaneous-errors'), ['int'])),
                            ('input_queries', (YLeaf(YType.uint32, 'input-queries'), ['int'])),
                            ('input_reports', (YLeaf(YType.uint32, 'input-reports'), ['int'])),
                            ('input_leaves', (YLeaf(YType.uint32, 'input-leaves'), ['int'])),
                            ('input_mtrace', (YLeaf(YType.uint32, 'input-mtrace'), ['int'])),
                            ('input_dvmrp', (YLeaf(YType.uint32, 'input-dvmrp'), ['int'])),
                            ('input_pim', (YLeaf(YType.uint32, 'input-pim'), ['int'])),
                            ('output_queries', (YLeaf(YType.uint32, 'output-queries'), ['int'])),
                            ('output_reports', (YLeaf(YType.uint32, 'output-reports'), ['int'])),
                            ('output_leaves', (YLeaf(YType.uint32, 'output-leaves'), ['int'])),
                            ('output_mtrace', (YLeaf(YType.uint32, 'output-mtrace'), ['int'])),
                            ('output_dvmrp', (YLeaf(YType.uint32, 'output-dvmrp'), ['int'])),
                            ('output_pim', (YLeaf(YType.uint32, 'output-pim'), ['int'])),
                            ('get_packet_failure', (YLeaf(YType.uint32, 'get-packet-failure'), ['int'])),
                            ('output_no_parent_interface_handle', (YLeaf(YType.uint32, 'output-no-parent-interface-handle'), ['int'])),
                            ('input_no_idb', (YLeaf(YType.uint32, 'input-no-idb'), ['int'])),
                            ('input_no_vrf_in_idb', (YLeaf(YType.uint32, 'input-no-vrf-in-idb'), ['int'])),
                            ('input_disabled_idb', (YLeaf(YType.uint32, 'input-disabled-idb'), ['int'])),
                            ('input_martian_address', (YLeaf(YType.uint32, 'input-martian-address'), ['int'])),
                            ('input_no_assigned_vrf_id', (YLeaf(YType.uint32, 'input-no-assigned-vrf-id'), ['int'])),
                            ('input_no_vrf_mtrace', (YLeaf(YType.uint32, 'input-no-vrf-mtrace'), ['int'])),
                            ('input_no_platform_support_mtrace', (YLeaf(YType.uint32, 'input-no-platform-support-mtrace'), ['int'])),
                        ])
                        self.elapsed_time = None
                        self.packets_in = None
                        self.packets_out = None
                        self.format_errors = None
                        self.packet_manager_input_errors = None
                        self.packet_manager_output_errors = None
                        self.checksum_errors = None
                        self.receive_socket_errors = None
                        self.socket_errors = None
                        self.bad_scope_errors = None
                        self.auxillary_data_length_errors = None
                        self.invalid_source_address_errors = None
                        self.no_socket_connection = None
                        self.miscellaneous_errors = None
                        self.input_queries = None
                        self.input_reports = None
                        self.input_leaves = None
                        self.input_mtrace = None
                        self.input_dvmrp = None
                        self.input_pim = None
                        self.output_queries = None
                        self.output_reports = None
                        self.output_leaves = None
                        self.output_mtrace = None
                        self.output_dvmrp = None
                        self.output_pim = None
                        self.get_packet_failure = None
                        self.output_no_parent_interface_handle = None
                        self.input_no_idb = None
                        self.input_no_vrf_in_idb = None
                        self.input_disabled_idb = None
                        self.input_martian_address = None
                        self.input_no_assigned_vrf_id = None
                        self.input_no_vrf_mtrace = None
                        self.input_no_platform_support_mtrace = None
                        self._segment_path = lambda: "traffic-counters"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Mld.Active.Vrfs.Vrf.TrafficCounters, ['elapsed_time', 'packets_in', 'packets_out', 'format_errors', 'packet_manager_input_errors', 'packet_manager_output_errors', 'checksum_errors', 'receive_socket_errors', 'socket_errors', 'bad_scope_errors', 'auxillary_data_length_errors', 'invalid_source_address_errors', 'no_socket_connection', 'miscellaneous_errors', 'input_queries', 'input_reports', 'input_leaves', 'input_mtrace', 'input_dvmrp', 'input_pim', 'output_queries', 'output_reports', 'output_leaves', 'output_mtrace', 'output_dvmrp', 'output_pim', 'get_packet_failure', 'output_no_parent_interface_handle', 'input_no_idb', 'input_no_vrf_in_idb', 'input_disabled_idb', 'input_martian_address', 'input_no_assigned_vrf_id', 'input_no_vrf_mtrace', 'input_no_platform_support_mtrace'], name, value)

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Mld.Active.Vrfs.Vrf.TrafficCounters']['meta_info']


                class Groups(_Entity_):
                    """
                    IGMP Group Database Table
                    
                    .. attribute:: group
                    
                    	IGMP Group Entry Information
                    	**type**\: list of  		 :py:class:`Group <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.Groups.Group>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Mld.Active.Vrfs.Vrf.Groups, self).__init__()

                        self.yang_name = "groups"
                        self.yang_parent_name = "vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("group", ("group", Mld.Active.Vrfs.Vrf.Groups.Group))])
                        self._leafs = OrderedDict()

                        self.group = YList(self)
                        self._segment_path = lambda: "groups"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Mld.Active.Vrfs.Vrf.Groups, [], name, value)


                    class Group(_Entity_):
                        """
                        IGMP Group Entry Information
                        
                        .. attribute:: group_address
                        
                        	Group Address
                        	**type**\: union of the below types:
                        
                        		**type**\: str
                        
                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        		**type**\: str
                        
                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: interface_name
                        
                        	Interface Name
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: group_address_xr
                        
                        	Group Address
                        	**type**\:  :py:class:`GroupAddressXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.Groups.Group.GroupAddressXr>`
                        
                        	**config**\: False
                        
                        .. attribute:: last_reporter
                        
                        	Last reporter address
                        	**type**\:  :py:class:`LastReporter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.Groups.Group.LastReporter>`
                        
                        	**config**\: False
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\:  :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.Groups.Group.SourceAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: interface_name_xr
                        
                        	Interface
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: uptime
                        
                        	Uptime in seconds
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        	**config**\: False
                        
                        	**units**\: second
                        
                        .. attribute:: expiration_time
                        
                        	Expiration time in seconds
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        	**config**\: False
                        
                        	**units**\: second
                        
                        .. attribute:: explicit_tracking_enabled
                        
                        	Is explicit tracking enabled
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_self_join
                        
                        	If local system is member of this group on this interface
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: row_status
                        
                        	interface on or off for the group
                        	**type**\: str
                        
                        	**length:** 0..16
                        
                        	**config**\: False
                        
                        .. attribute:: is_low_memory
                        
                        	Node is running low on memory
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: router_filter_mode
                        
                        	Filter mode
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        	**config**\: False
                        
                        .. attribute:: older_host_version1_timer
                        
                        	IGMP Hostversion1timer
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: older_host_version2_timer
                        
                        	IGMP Hostversion2timer
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_added
                        
                        	Joined
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_suppressed
                        
                        	Suppressed
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Active.Vrfs.Vrf.Groups.Group, self).__init__()

                            self.yang_name = "group"
                            self.yang_parent_name = "groups"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("group-address-xr", ("group_address_xr", Mld.Active.Vrfs.Vrf.Groups.Group.GroupAddressXr)), ("last-reporter", ("last_reporter", Mld.Active.Vrfs.Vrf.Groups.Group.LastReporter)), ("source-address", ("source_address", Mld.Active.Vrfs.Vrf.Groups.Group.SourceAddress))])
                            self._leafs = OrderedDict([
                                ('group_address', (YLeaf(YType.str, 'group-address'), ['str','str'])),
                                ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                ('interface_name_xr', (YLeaf(YType.str, 'interface-name-xr'), ['str'])),
                                ('uptime', (YLeaf(YType.uint64, 'uptime'), ['int'])),
                                ('expiration_time', (YLeaf(YType.int32, 'expiration-time'), ['int'])),
                                ('explicit_tracking_enabled', (YLeaf(YType.boolean, 'explicit-tracking-enabled'), ['bool'])),
                                ('is_self_join', (YLeaf(YType.boolean, 'is-self-join'), ['bool'])),
                                ('row_status', (YLeaf(YType.str, 'row-status'), ['str'])),
                                ('is_low_memory', (YLeaf(YType.boolean, 'is-low-memory'), ['bool'])),
                                ('router_filter_mode', (YLeaf(YType.uint8, 'router-filter-mode'), ['int'])),
                                ('older_host_version1_timer', (YLeaf(YType.uint32, 'older-host-version1-timer'), ['int'])),
                                ('older_host_version2_timer', (YLeaf(YType.uint32, 'older-host-version2-timer'), ['int'])),
                                ('is_added', (YLeaf(YType.boolean, 'is-added'), ['bool'])),
                                ('is_suppressed', (YLeaf(YType.boolean, 'is-suppressed'), ['bool'])),
                            ])
                            self.group_address = None
                            self.interface_name = None
                            self.interface_name_xr = None
                            self.uptime = None
                            self.expiration_time = None
                            self.explicit_tracking_enabled = None
                            self.is_self_join = None
                            self.row_status = None
                            self.is_low_memory = None
                            self.router_filter_mode = None
                            self.older_host_version1_timer = None
                            self.older_host_version2_timer = None
                            self.is_added = None
                            self.is_suppressed = None

                            self.group_address_xr = Mld.Active.Vrfs.Vrf.Groups.Group.GroupAddressXr()
                            self.group_address_xr.parent = self
                            self._children_name_map["group_address_xr"] = "group-address-xr"

                            self.last_reporter = Mld.Active.Vrfs.Vrf.Groups.Group.LastReporter()
                            self.last_reporter.parent = self
                            self._children_name_map["last_reporter"] = "last-reporter"

                            self.source_address = Mld.Active.Vrfs.Vrf.Groups.Group.SourceAddress()
                            self.source_address.parent = self
                            self._children_name_map["source_address"] = "source-address"
                            self._segment_path = lambda: "group"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Active.Vrfs.Vrf.Groups.Group, ['group_address', 'interface_name', 'interface_name_xr', 'uptime', 'expiration_time', 'explicit_tracking_enabled', 'is_self_join', 'row_status', 'is_low_memory', 'router_filter_mode', 'older_host_version1_timer', 'older_host_version2_timer', 'is_added', 'is_suppressed'], name, value)


                        class GroupAddressXr(_Entity_):
                            """
                            Group Address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Active.Vrfs.Vrf.Groups.Group.GroupAddressXr, self).__init__()

                                self.yang_name = "group-address-xr"
                                self.yang_parent_name = "group"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "group-address-xr"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Active.Vrfs.Vrf.Groups.Group.GroupAddressXr, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Active.Vrfs.Vrf.Groups.Group.GroupAddressXr']['meta_info']


                        class LastReporter(_Entity_):
                            """
                            Last reporter address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Active.Vrfs.Vrf.Groups.Group.LastReporter, self).__init__()

                                self.yang_name = "last-reporter"
                                self.yang_parent_name = "group"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "last-reporter"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Active.Vrfs.Vrf.Groups.Group.LastReporter, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Active.Vrfs.Vrf.Groups.Group.LastReporter']['meta_info']


                        class SourceAddress(_Entity_):
                            """
                            Source Address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Active.Vrfs.Vrf.Groups.Group.SourceAddress, self).__init__()

                                self.yang_name = "source-address"
                                self.yang_parent_name = "group"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "source-address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Active.Vrfs.Vrf.Groups.Group.SourceAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Active.Vrfs.Vrf.Groups.Group.SourceAddress']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Active.Vrfs.Vrf.Groups.Group']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Mld.Active.Vrfs.Vrf.Groups']['meta_info']


                class GroupSummary(_Entity_):
                    """
                    IGMP Groups Summary
                    
                    .. attribute:: groutes
                    
                    	No. of (\*,G) routes
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: sg_routes
                    
                    	No. of (S,G) routes
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: group_count
                    
                    	Current groups accepted
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_low_memory
                    
                    	Node is running low on memory
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Mld.Active.Vrfs.Vrf.GroupSummary, self).__init__()

                        self.yang_name = "group-summary"
                        self.yang_parent_name = "vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('groutes', (YLeaf(YType.uint32, 'groutes'), ['int'])),
                            ('sg_routes', (YLeaf(YType.uint32, 'sg-routes'), ['int'])),
                            ('group_count', (YLeaf(YType.uint32, 'group-count'), ['int'])),
                            ('is_low_memory', (YLeaf(YType.boolean, 'is-low-memory'), ['bool'])),
                        ])
                        self.groutes = None
                        self.sg_routes = None
                        self.group_count = None
                        self.is_low_memory = None
                        self._segment_path = lambda: "group-summary"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Mld.Active.Vrfs.Vrf.GroupSummary, ['groutes', 'sg_routes', 'group_count', 'is_low_memory'], name, value)

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Mld.Active.Vrfs.Vrf.GroupSummary']['meta_info']


                class IfrsInterfaceSummary(_Entity_):
                    """
                    IGMP IFRS Interface summary
                    
                    .. attribute:: interface_count
                    
                    	Interface Count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: configuration_count
                    
                    	Configuration count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Mld.Active.Vrfs.Vrf.IfrsInterfaceSummary, self).__init__()

                        self.yang_name = "ifrs-interface-summary"
                        self.yang_parent_name = "vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('interface_count', (YLeaf(YType.uint32, 'interface-count'), ['int'])),
                            ('configuration_count', (YLeaf(YType.uint32, 'configuration-count'), ['int'])),
                        ])
                        self.interface_count = None
                        self.configuration_count = None
                        self._segment_path = lambda: "ifrs-interface-summary"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Mld.Active.Vrfs.Vrf.IfrsInterfaceSummary, ['interface_count', 'configuration_count'], name, value)

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Mld.Active.Vrfs.Vrf.IfrsInterfaceSummary']['meta_info']


                class GlobalInterfaceTable(_Entity_):
                    """
                    IGMP Global Interface 
                    
                    .. attribute:: interface
                    
                    	IGMP Interface
                    	**type**\: list of  		 :py:class:`Interface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.GlobalInterfaceTable.Interface>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Mld.Active.Vrfs.Vrf.GlobalInterfaceTable, self).__init__()

                        self.yang_name = "global-interface-table"
                        self.yang_parent_name = "vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("interface", ("interface", Mld.Active.Vrfs.Vrf.GlobalInterfaceTable.Interface))])
                        self._leafs = OrderedDict()

                        self.interface = YList(self)
                        self._segment_path = lambda: "global-interface-table"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Mld.Active.Vrfs.Vrf.GlobalInterfaceTable, [], name, value)


                    class Interface(_Entity_):
                        """
                        IGMP Interface
                        
                        .. attribute:: interface_name  (key)
                        
                        	Interface Name
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: address
                        
                        	IP address
                        	**type**\:  :py:class:`Address <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.GlobalInterfaceTable.Interface.Address>`
                        
                        	**config**\: False
                        
                        .. attribute:: querier_address
                        
                        	Address of the Querier
                        	**type**\:  :py:class:`QuerierAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.GlobalInterfaceTable.Interface.QuerierAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: subscriber_address
                        
                        	Address of subscriber
                        	**type**\:  :py:class:`SubscriberAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.GlobalInterfaceTable.Interface.SubscriberAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: interface_name_xr
                        
                        	Interface
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: state
                        
                        	Interface state
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: prefix_length
                        
                        	Prefix length
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_interface_up
                        
                        	Is interface up
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_ip_enabled
                        
                        	Is IP enabled
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_router_enabled
                        
                        	Is Router functionality enabled
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: igmp_version
                        
                        	IGMP Router version
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        	**config**\: False
                        
                        .. attribute:: host_version
                        
                        	IGMP Host version
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        	**config**\: False
                        
                        .. attribute:: query_interval
                        
                        	Query Interval value in seconds
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        	**units**\: second
                        
                        .. attribute:: query_timeout
                        
                        	Query Timeout value
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: query_maximum_response_time
                        
                        	Max Response Timeout value
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: last_member_query_interval
                        
                        	Last Member Query Interval
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: group_joins
                        
                        	No. of group joins
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: group_leaves
                        
                        	No. of group leaves
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_querier
                        
                        	Are we querier
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: total_active_groups
                        
                        	Actual number of groups on interface
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: robustness
                        
                        	Robustness Variable value
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: proxy_interface
                        
                        	Proxy interface index
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: querier_uptime
                        
                        	Time since the last querier took over
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: las_ll_registration_count
                        
                        	LAS reg count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_get_address_count
                        
                        	LAS get addr count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_update_count
                        
                        	LAS Update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_ll_remove_update_count
                        
                        	LAS LL remove update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_ll_add_update_count
                        
                        	LAS LL add update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_null_update_count
                        
                        	LAS Null update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_unregistration_count
                        
                        	LAS unreg count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_las_request
                        
                        	LAS req
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_las_registered
                        
                        	LAS registered
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: vrf_id
                        
                        	VRF id
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: mte_vrf_id
                        
                        	MTE VRF id
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: location
                        
                        	Location
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: mtu
                        
                        	MTU
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: vrf_state
                        
                        	Vrf State
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_configurationverify
                        
                        	CFG verify
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configurationvrf_set
                        
                        	CFG vrf set
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configurationvrf_error
                        
                        	CFG vrf error
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configuration_mcast_vrf_set
                        
                        	Is mcast set
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configuration_mcast_vrf_error
                        
                        	Is mcast error
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_im_state_registered
                        
                        	Im state registered
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_subscriber
                        
                        	Subscriber interface
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: subscriber_mode
                        
                        	Subscriber mode
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_identity_present
                        
                        	Subscriber ID or Address available from AAA
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: subscriber_id
                        
                        	ID string of subscriber
                        	**type**\: str
                        
                        	**length:** 0..257
                        
                        	**config**\: False
                        
                        .. attribute:: parent_ifhandle
                        
                        	Parent If Handle
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: time_since_last_query_in_seconds
                        
                        	Time elapsed since last query
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: time_since_last_report_in_seconds
                        
                        	Time elapsed since last report
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: router_uptime_in_seconds
                        
                        	Uptime since router enabled event
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: mte_tuple_count
                        
                        	MTE Tuple count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Active.Vrfs.Vrf.GlobalInterfaceTable.Interface, self).__init__()

                            self.yang_name = "interface"
                            self.yang_parent_name = "global-interface-table"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['interface_name']
                            self._child_classes = OrderedDict([("address", ("address", Mld.Active.Vrfs.Vrf.GlobalInterfaceTable.Interface.Address)), ("querier-address", ("querier_address", Mld.Active.Vrfs.Vrf.GlobalInterfaceTable.Interface.QuerierAddress)), ("subscriber-address", ("subscriber_address", Mld.Active.Vrfs.Vrf.GlobalInterfaceTable.Interface.SubscriberAddress))])
                            self._leafs = OrderedDict([
                                ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                ('interface_name_xr', (YLeaf(YType.str, 'interface-name-xr'), ['str'])),
                                ('state', (YLeaf(YType.uint32, 'state'), ['int'])),
                                ('prefix_length', (YLeaf(YType.uint32, 'prefix-length'), ['int'])),
                                ('is_interface_up', (YLeaf(YType.boolean, 'is-interface-up'), ['bool'])),
                                ('is_ip_enabled', (YLeaf(YType.boolean, 'is-ip-enabled'), ['bool'])),
                                ('is_router_enabled', (YLeaf(YType.boolean, 'is-router-enabled'), ['bool'])),
                                ('igmp_version', (YLeaf(YType.uint8, 'igmp-version'), ['int'])),
                                ('host_version', (YLeaf(YType.uint8, 'host-version'), ['int'])),
                                ('query_interval', (YLeaf(YType.uint16, 'query-interval'), ['int'])),
                                ('query_timeout', (YLeaf(YType.uint16, 'query-timeout'), ['int'])),
                                ('query_maximum_response_time', (YLeaf(YType.uint16, 'query-maximum-response-time'), ['int'])),
                                ('last_member_query_interval', (YLeaf(YType.uint16, 'last-member-query-interval'), ['int'])),
                                ('group_joins', (YLeaf(YType.uint32, 'group-joins'), ['int'])),
                                ('group_leaves', (YLeaf(YType.uint32, 'group-leaves'), ['int'])),
                                ('is_querier', (YLeaf(YType.boolean, 'is-querier'), ['bool'])),
                                ('total_active_groups', (YLeaf(YType.uint32, 'total-active-groups'), ['int'])),
                                ('robustness', (YLeaf(YType.uint32, 'robustness'), ['int'])),
                                ('proxy_interface', (YLeaf(YType.str, 'proxy-interface'), ['str'])),
                                ('querier_uptime', (YLeaf(YType.uint16, 'querier-uptime'), ['int'])),
                                ('las_ll_registration_count', (YLeaf(YType.uint32, 'las-ll-registration-count'), ['int'])),
                                ('las_get_address_count', (YLeaf(YType.uint32, 'las-get-address-count'), ['int'])),
                                ('las_update_count', (YLeaf(YType.uint32, 'las-update-count'), ['int'])),
                                ('las_ll_remove_update_count', (YLeaf(YType.uint32, 'las-ll-remove-update-count'), ['int'])),
                                ('las_ll_add_update_count', (YLeaf(YType.uint32, 'las-ll-add-update-count'), ['int'])),
                                ('las_null_update_count', (YLeaf(YType.uint32, 'las-null-update-count'), ['int'])),
                                ('las_unregistration_count', (YLeaf(YType.uint32, 'las-unregistration-count'), ['int'])),
                                ('is_las_request', (YLeaf(YType.boolean, 'is-las-request'), ['bool'])),
                                ('is_las_registered', (YLeaf(YType.boolean, 'is-las-registered'), ['bool'])),
                                ('vrf_id', (YLeaf(YType.uint32, 'vrf-id'), ['int'])),
                                ('mte_vrf_id', (YLeaf(YType.uint32, 'mte-vrf-id'), ['int'])),
                                ('location', (YLeaf(YType.uint32, 'location'), ['int'])),
                                ('mtu', (YLeaf(YType.uint32, 'mtu'), ['int'])),
                                ('vrf_state', (YLeaf(YType.uint32, 'vrf-state'), ['int'])),
                                ('is_configurationverify', (YLeaf(YType.boolean, 'is-configurationverify'), ['bool'])),
                                ('configurationvrf_set', (YLeaf(YType.boolean, 'configurationvrf-set'), ['bool'])),
                                ('configurationvrf_error', (YLeaf(YType.boolean, 'configurationvrf-error'), ['bool'])),
                                ('configuration_mcast_vrf_set', (YLeaf(YType.boolean, 'configuration-mcast-vrf-set'), ['bool'])),
                                ('configuration_mcast_vrf_error', (YLeaf(YType.boolean, 'configuration-mcast-vrf-error'), ['bool'])),
                                ('is_im_state_registered', (YLeaf(YType.boolean, 'is-im-state-registered'), ['bool'])),
                                ('is_subscriber', (YLeaf(YType.boolean, 'is-subscriber'), ['bool'])),
                                ('subscriber_mode', (YLeaf(YType.uint32, 'subscriber-mode'), ['int'])),
                                ('is_identity_present', (YLeaf(YType.boolean, 'is-identity-present'), ['bool'])),
                                ('subscriber_id', (YLeaf(YType.str, 'subscriber-id'), ['str'])),
                                ('parent_ifhandle', (YLeaf(YType.str, 'parent-ifhandle'), ['str'])),
                                ('time_since_last_query_in_seconds', (YLeaf(YType.uint32, 'time-since-last-query-in-seconds'), ['int'])),
                                ('time_since_last_report_in_seconds', (YLeaf(YType.uint32, 'time-since-last-report-in-seconds'), ['int'])),
                                ('router_uptime_in_seconds', (YLeaf(YType.uint32, 'router-uptime-in-seconds'), ['int'])),
                                ('mte_tuple_count', (YLeaf(YType.uint32, 'mte-tuple-count'), ['int'])),
                            ])
                            self.interface_name = None
                            self.interface_name_xr = None
                            self.state = None
                            self.prefix_length = None
                            self.is_interface_up = None
                            self.is_ip_enabled = None
                            self.is_router_enabled = None
                            self.igmp_version = None
                            self.host_version = None
                            self.query_interval = None
                            self.query_timeout = None
                            self.query_maximum_response_time = None
                            self.last_member_query_interval = None
                            self.group_joins = None
                            self.group_leaves = None
                            self.is_querier = None
                            self.total_active_groups = None
                            self.robustness = None
                            self.proxy_interface = None
                            self.querier_uptime = None
                            self.las_ll_registration_count = None
                            self.las_get_address_count = None
                            self.las_update_count = None
                            self.las_ll_remove_update_count = None
                            self.las_ll_add_update_count = None
                            self.las_null_update_count = None
                            self.las_unregistration_count = None
                            self.is_las_request = None
                            self.is_las_registered = None
                            self.vrf_id = None
                            self.mte_vrf_id = None
                            self.location = None
                            self.mtu = None
                            self.vrf_state = None
                            self.is_configurationverify = None
                            self.configurationvrf_set = None
                            self.configurationvrf_error = None
                            self.configuration_mcast_vrf_set = None
                            self.configuration_mcast_vrf_error = None
                            self.is_im_state_registered = None
                            self.is_subscriber = None
                            self.subscriber_mode = None
                            self.is_identity_present = None
                            self.subscriber_id = None
                            self.parent_ifhandle = None
                            self.time_since_last_query_in_seconds = None
                            self.time_since_last_report_in_seconds = None
                            self.router_uptime_in_seconds = None
                            self.mte_tuple_count = None

                            self.address = Mld.Active.Vrfs.Vrf.GlobalInterfaceTable.Interface.Address()
                            self.address.parent = self
                            self._children_name_map["address"] = "address"

                            self.querier_address = Mld.Active.Vrfs.Vrf.GlobalInterfaceTable.Interface.QuerierAddress()
                            self.querier_address.parent = self
                            self._children_name_map["querier_address"] = "querier-address"

                            self.subscriber_address = Mld.Active.Vrfs.Vrf.GlobalInterfaceTable.Interface.SubscriberAddress()
                            self.subscriber_address.parent = self
                            self._children_name_map["subscriber_address"] = "subscriber-address"
                            self._segment_path = lambda: "interface" + "[interface-name='" + str(self.interface_name) + "']"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Active.Vrfs.Vrf.GlobalInterfaceTable.Interface, ['interface_name', 'interface_name_xr', 'state', 'prefix_length', 'is_interface_up', 'is_ip_enabled', 'is_router_enabled', 'igmp_version', 'host_version', 'query_interval', 'query_timeout', 'query_maximum_response_time', 'last_member_query_interval', 'group_joins', 'group_leaves', 'is_querier', 'total_active_groups', 'robustness', 'proxy_interface', 'querier_uptime', 'las_ll_registration_count', 'las_get_address_count', 'las_update_count', 'las_ll_remove_update_count', 'las_ll_add_update_count', 'las_null_update_count', 'las_unregistration_count', 'is_las_request', 'is_las_registered', 'vrf_id', 'mte_vrf_id', 'location', 'mtu', 'vrf_state', 'is_configurationverify', 'configurationvrf_set', 'configurationvrf_error', 'configuration_mcast_vrf_set', 'configuration_mcast_vrf_error', 'is_im_state_registered', 'is_subscriber', 'subscriber_mode', 'is_identity_present', 'subscriber_id', 'parent_ifhandle', 'time_since_last_query_in_seconds', 'time_since_last_report_in_seconds', 'router_uptime_in_seconds', 'mte_tuple_count'], name, value)


                        class Address(_Entity_):
                            """
                            IP address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Active.Vrfs.Vrf.GlobalInterfaceTable.Interface.Address, self).__init__()

                                self.yang_name = "address"
                                self.yang_parent_name = "interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Active.Vrfs.Vrf.GlobalInterfaceTable.Interface.Address, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Active.Vrfs.Vrf.GlobalInterfaceTable.Interface.Address']['meta_info']


                        class QuerierAddress(_Entity_):
                            """
                            Address of the Querier
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Active.Vrfs.Vrf.GlobalInterfaceTable.Interface.QuerierAddress, self).__init__()

                                self.yang_name = "querier-address"
                                self.yang_parent_name = "interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "querier-address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Active.Vrfs.Vrf.GlobalInterfaceTable.Interface.QuerierAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Active.Vrfs.Vrf.GlobalInterfaceTable.Interface.QuerierAddress']['meta_info']


                        class SubscriberAddress(_Entity_):
                            """
                            Address of subscriber
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Active.Vrfs.Vrf.GlobalInterfaceTable.Interface.SubscriberAddress, self).__init__()

                                self.yang_name = "subscriber-address"
                                self.yang_parent_name = "interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "subscriber-address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Active.Vrfs.Vrf.GlobalInterfaceTable.Interface.SubscriberAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Active.Vrfs.Vrf.GlobalInterfaceTable.Interface.SubscriberAddress']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Active.Vrfs.Vrf.GlobalInterfaceTable.Interface']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Mld.Active.Vrfs.Vrf.GlobalInterfaceTable']['meta_info']


                class SsmMapDetails(_Entity_):
                    """
                    SSM Map Detail
                    
                    .. attribute:: ssm_map_detail
                    
                    	SSM Map Detail Table information
                    	**type**\: list of  		 :py:class:`SsmMapDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.SsmMapDetails.SsmMapDetail>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Mld.Active.Vrfs.Vrf.SsmMapDetails, self).__init__()

                        self.yang_name = "ssm-map-details"
                        self.yang_parent_name = "vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("ssm-map-detail", ("ssm_map_detail", Mld.Active.Vrfs.Vrf.SsmMapDetails.SsmMapDetail))])
                        self._leafs = OrderedDict()

                        self.ssm_map_detail = YList(self)
                        self._segment_path = lambda: "ssm-map-details"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Mld.Active.Vrfs.Vrf.SsmMapDetails, [], name, value)


                    class SsmMapDetail(_Entity_):
                        """
                        SSM Map Detail Table information
                        
                        .. attribute:: ssm_map_type
                        
                        	SSM Map Type
                        	**type**\:  :py:class:`IgmpssmMap <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpssmMap>`
                        
                        	**config**\: False
                        
                        .. attribute:: group_address
                        
                        	Group address
                        	**type**\: union of the below types:
                        
                        		**type**\: str
                        
                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        		**type**\: str
                        
                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: map_info
                        
                        	Basic Map Info
                        	**type**\:  :py:class:`MapInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.SsmMapDetails.SsmMapDetail.MapInfo>`
                        
                        	**config**\: False
                        
                        .. attribute:: expiration_time
                        
                        	Expiration Time in Seconds
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        	**units**\: second
                        
                        .. attribute:: response_pending
                        
                        	Response Pending
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: query_interval
                        
                        	Query interval
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: elapsed_time
                        
                        	Elapsed time
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        	**config**\: False
                        
                        .. attribute:: sources
                        
                        	List of sources
                        	**type**\: list of  		 :py:class:`Sources <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.SsmMapDetails.SsmMapDetail.Sources>`
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Active.Vrfs.Vrf.SsmMapDetails.SsmMapDetail, self).__init__()

                            self.yang_name = "ssm-map-detail"
                            self.yang_parent_name = "ssm-map-details"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("map-info", ("map_info", Mld.Active.Vrfs.Vrf.SsmMapDetails.SsmMapDetail.MapInfo)), ("sources", ("sources", Mld.Active.Vrfs.Vrf.SsmMapDetails.SsmMapDetail.Sources))])
                            self._leafs = OrderedDict([
                                ('ssm_map_type', (YLeaf(YType.enumeration, 'ssm-map-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpssmMap', '')])),
                                ('group_address', (YLeaf(YType.str, 'group-address'), ['str','str'])),
                                ('expiration_time', (YLeaf(YType.uint32, 'expiration-time'), ['int'])),
                                ('response_pending', (YLeaf(YType.boolean, 'response-pending'), ['bool'])),
                                ('query_interval', (YLeaf(YType.uint32, 'query-interval'), ['int'])),
                                ('elapsed_time', (YLeaf(YType.uint64, 'elapsed-time'), ['int'])),
                            ])
                            self.ssm_map_type = None
                            self.group_address = None
                            self.expiration_time = None
                            self.response_pending = None
                            self.query_interval = None
                            self.elapsed_time = None

                            self.map_info = Mld.Active.Vrfs.Vrf.SsmMapDetails.SsmMapDetail.MapInfo()
                            self.map_info.parent = self
                            self._children_name_map["map_info"] = "map-info"

                            self.sources = YList(self)
                            self._segment_path = lambda: "ssm-map-detail"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Active.Vrfs.Vrf.SsmMapDetails.SsmMapDetail, ['ssm_map_type', 'group_address', 'expiration_time', 'response_pending', 'query_interval', 'elapsed_time'], name, value)


                        class MapInfo(_Entity_):
                            """
                            Basic Map Info
                            
                            .. attribute:: group_address_xr
                            
                            	Group Address
                            	**type**\:  :py:class:`GroupAddressXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.SsmMapDetails.SsmMapDetail.MapInfo.GroupAddressXr>`
                            
                            	**config**\: False
                            
                            .. attribute:: map_type
                            
                            	Map Type of group
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: source_counts
                            
                            	Count of Sources
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Active.Vrfs.Vrf.SsmMapDetails.SsmMapDetail.MapInfo, self).__init__()

                                self.yang_name = "map-info"
                                self.yang_parent_name = "ssm-map-detail"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("group-address-xr", ("group_address_xr", Mld.Active.Vrfs.Vrf.SsmMapDetails.SsmMapDetail.MapInfo.GroupAddressXr))])
                                self._leafs = OrderedDict([
                                    ('map_type', (YLeaf(YType.uint32, 'map-type'), ['int'])),
                                    ('source_counts', (YLeaf(YType.uint32, 'source-counts'), ['int'])),
                                ])
                                self.map_type = None
                                self.source_counts = None

                                self.group_address_xr = Mld.Active.Vrfs.Vrf.SsmMapDetails.SsmMapDetail.MapInfo.GroupAddressXr()
                                self.group_address_xr.parent = self
                                self._children_name_map["group_address_xr"] = "group-address-xr"
                                self._segment_path = lambda: "map-info"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Active.Vrfs.Vrf.SsmMapDetails.SsmMapDetail.MapInfo, ['map_type', 'source_counts'], name, value)


                            class GroupAddressXr(_Entity_):
                                """
                                Group Address
                                
                                .. attribute:: af_name
                                
                                	AFName
                                	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                                
                                	**config**\: False
                                
                                .. attribute:: ipv4_address
                                
                                	IPv4 Addr
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                .. attribute:: ipv6_address
                                
                                	IPV6 Addr
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                

                                """

                                _prefix = 'ipv4-igmp-oper'
                                _revision = '2018-01-31'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Mld.Active.Vrfs.Vrf.SsmMapDetails.SsmMapDetail.MapInfo.GroupAddressXr, self).__init__()

                                    self.yang_name = "group-address-xr"
                                    self.yang_parent_name = "map-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                        ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                        ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                    ])
                                    self.af_name = None
                                    self.ipv4_address = None
                                    self.ipv6_address = None
                                    self._segment_path = lambda: "group-address-xr"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Mld.Active.Vrfs.Vrf.SsmMapDetails.SsmMapDetail.MapInfo.GroupAddressXr, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                    return meta._meta_table['Mld.Active.Vrfs.Vrf.SsmMapDetails.SsmMapDetail.MapInfo.GroupAddressXr']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Active.Vrfs.Vrf.SsmMapDetails.SsmMapDetail.MapInfo']['meta_info']


                        class Sources(_Entity_):
                            """
                            List of sources
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Active.Vrfs.Vrf.SsmMapDetails.SsmMapDetail.Sources, self).__init__()

                                self.yang_name = "sources"
                                self.yang_parent_name = "ssm-map-detail"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "sources"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Active.Vrfs.Vrf.SsmMapDetails.SsmMapDetail.Sources, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Active.Vrfs.Vrf.SsmMapDetails.SsmMapDetail.Sources']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Active.Vrfs.Vrf.SsmMapDetails.SsmMapDetail']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Mld.Active.Vrfs.Vrf.SsmMapDetails']['meta_info']


                class InterfaceStateOffs(_Entity_):
                    """
                    IGMP Interface state off
                    
                    .. attribute:: interface_state_off
                    
                    	IGMP Interface
                    	**type**\: list of  		 :py:class:`InterfaceStateOff <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Mld.Active.Vrfs.Vrf.InterfaceStateOffs, self).__init__()

                        self.yang_name = "interface-state-offs"
                        self.yang_parent_name = "vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("interface-state-off", ("interface_state_off", Mld.Active.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff))])
                        self._leafs = OrderedDict()

                        self.interface_state_off = YList(self)
                        self._segment_path = lambda: "interface-state-offs"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Mld.Active.Vrfs.Vrf.InterfaceStateOffs, [], name, value)


                    class InterfaceStateOff(_Entity_):
                        """
                        IGMP Interface
                        
                        .. attribute:: interface_name  (key)
                        
                        	Interface Name
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: address
                        
                        	IP address
                        	**type**\:  :py:class:`Address <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.Address>`
                        
                        	**config**\: False
                        
                        .. attribute:: querier_address
                        
                        	Address of the Querier
                        	**type**\:  :py:class:`QuerierAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.QuerierAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: subscriber_address
                        
                        	Address of subscriber
                        	**type**\:  :py:class:`SubscriberAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.SubscriberAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: interface_name_xr
                        
                        	Interface
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: state
                        
                        	Interface state
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: prefix_length
                        
                        	Prefix length
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_interface_up
                        
                        	Is interface up
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_ip_enabled
                        
                        	Is IP enabled
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_router_enabled
                        
                        	Is Router functionality enabled
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: igmp_version
                        
                        	IGMP Router version
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        	**config**\: False
                        
                        .. attribute:: host_version
                        
                        	IGMP Host version
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        	**config**\: False
                        
                        .. attribute:: query_interval
                        
                        	Query Interval value in seconds
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        	**units**\: second
                        
                        .. attribute:: query_timeout
                        
                        	Query Timeout value
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: query_maximum_response_time
                        
                        	Max Response Timeout value
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: last_member_query_interval
                        
                        	Last Member Query Interval
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: group_joins
                        
                        	No. of group joins
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: group_leaves
                        
                        	No. of group leaves
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_querier
                        
                        	Are we querier
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: total_active_groups
                        
                        	Actual number of groups on interface
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: robustness
                        
                        	Robustness Variable value
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: proxy_interface
                        
                        	Proxy interface index
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: querier_uptime
                        
                        	Time since the last querier took over
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: las_ll_registration_count
                        
                        	LAS reg count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_get_address_count
                        
                        	LAS get addr count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_update_count
                        
                        	LAS Update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_ll_remove_update_count
                        
                        	LAS LL remove update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_ll_add_update_count
                        
                        	LAS LL add update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_null_update_count
                        
                        	LAS Null update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_unregistration_count
                        
                        	LAS unreg count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_las_request
                        
                        	LAS req
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_las_registered
                        
                        	LAS registered
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: vrf_id
                        
                        	VRF id
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: mte_vrf_id
                        
                        	MTE VRF id
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: location
                        
                        	Location
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: mtu
                        
                        	MTU
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: vrf_state
                        
                        	Vrf State
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_configurationverify
                        
                        	CFG verify
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configurationvrf_set
                        
                        	CFG vrf set
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configurationvrf_error
                        
                        	CFG vrf error
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configuration_mcast_vrf_set
                        
                        	Is mcast set
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configuration_mcast_vrf_error
                        
                        	Is mcast error
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_im_state_registered
                        
                        	Im state registered
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_subscriber
                        
                        	Subscriber interface
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: subscriber_mode
                        
                        	Subscriber mode
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_identity_present
                        
                        	Subscriber ID or Address available from AAA
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: subscriber_id
                        
                        	ID string of subscriber
                        	**type**\: str
                        
                        	**length:** 0..257
                        
                        	**config**\: False
                        
                        .. attribute:: parent_ifhandle
                        
                        	Parent If Handle
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: time_since_last_query_in_seconds
                        
                        	Time elapsed since last query
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: time_since_last_report_in_seconds
                        
                        	Time elapsed since last report
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: router_uptime_in_seconds
                        
                        	Uptime since router enabled event
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: mte_tuple_count
                        
                        	MTE Tuple count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Active.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff, self).__init__()

                            self.yang_name = "interface-state-off"
                            self.yang_parent_name = "interface-state-offs"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['interface_name']
                            self._child_classes = OrderedDict([("address", ("address", Mld.Active.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.Address)), ("querier-address", ("querier_address", Mld.Active.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.QuerierAddress)), ("subscriber-address", ("subscriber_address", Mld.Active.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.SubscriberAddress))])
                            self._leafs = OrderedDict([
                                ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                ('interface_name_xr', (YLeaf(YType.str, 'interface-name-xr'), ['str'])),
                                ('state', (YLeaf(YType.uint32, 'state'), ['int'])),
                                ('prefix_length', (YLeaf(YType.uint32, 'prefix-length'), ['int'])),
                                ('is_interface_up', (YLeaf(YType.boolean, 'is-interface-up'), ['bool'])),
                                ('is_ip_enabled', (YLeaf(YType.boolean, 'is-ip-enabled'), ['bool'])),
                                ('is_router_enabled', (YLeaf(YType.boolean, 'is-router-enabled'), ['bool'])),
                                ('igmp_version', (YLeaf(YType.uint8, 'igmp-version'), ['int'])),
                                ('host_version', (YLeaf(YType.uint8, 'host-version'), ['int'])),
                                ('query_interval', (YLeaf(YType.uint16, 'query-interval'), ['int'])),
                                ('query_timeout', (YLeaf(YType.uint16, 'query-timeout'), ['int'])),
                                ('query_maximum_response_time', (YLeaf(YType.uint16, 'query-maximum-response-time'), ['int'])),
                                ('last_member_query_interval', (YLeaf(YType.uint16, 'last-member-query-interval'), ['int'])),
                                ('group_joins', (YLeaf(YType.uint32, 'group-joins'), ['int'])),
                                ('group_leaves', (YLeaf(YType.uint32, 'group-leaves'), ['int'])),
                                ('is_querier', (YLeaf(YType.boolean, 'is-querier'), ['bool'])),
                                ('total_active_groups', (YLeaf(YType.uint32, 'total-active-groups'), ['int'])),
                                ('robustness', (YLeaf(YType.uint32, 'robustness'), ['int'])),
                                ('proxy_interface', (YLeaf(YType.str, 'proxy-interface'), ['str'])),
                                ('querier_uptime', (YLeaf(YType.uint16, 'querier-uptime'), ['int'])),
                                ('las_ll_registration_count', (YLeaf(YType.uint32, 'las-ll-registration-count'), ['int'])),
                                ('las_get_address_count', (YLeaf(YType.uint32, 'las-get-address-count'), ['int'])),
                                ('las_update_count', (YLeaf(YType.uint32, 'las-update-count'), ['int'])),
                                ('las_ll_remove_update_count', (YLeaf(YType.uint32, 'las-ll-remove-update-count'), ['int'])),
                                ('las_ll_add_update_count', (YLeaf(YType.uint32, 'las-ll-add-update-count'), ['int'])),
                                ('las_null_update_count', (YLeaf(YType.uint32, 'las-null-update-count'), ['int'])),
                                ('las_unregistration_count', (YLeaf(YType.uint32, 'las-unregistration-count'), ['int'])),
                                ('is_las_request', (YLeaf(YType.boolean, 'is-las-request'), ['bool'])),
                                ('is_las_registered', (YLeaf(YType.boolean, 'is-las-registered'), ['bool'])),
                                ('vrf_id', (YLeaf(YType.uint32, 'vrf-id'), ['int'])),
                                ('mte_vrf_id', (YLeaf(YType.uint32, 'mte-vrf-id'), ['int'])),
                                ('location', (YLeaf(YType.uint32, 'location'), ['int'])),
                                ('mtu', (YLeaf(YType.uint32, 'mtu'), ['int'])),
                                ('vrf_state', (YLeaf(YType.uint32, 'vrf-state'), ['int'])),
                                ('is_configurationverify', (YLeaf(YType.boolean, 'is-configurationverify'), ['bool'])),
                                ('configurationvrf_set', (YLeaf(YType.boolean, 'configurationvrf-set'), ['bool'])),
                                ('configurationvrf_error', (YLeaf(YType.boolean, 'configurationvrf-error'), ['bool'])),
                                ('configuration_mcast_vrf_set', (YLeaf(YType.boolean, 'configuration-mcast-vrf-set'), ['bool'])),
                                ('configuration_mcast_vrf_error', (YLeaf(YType.boolean, 'configuration-mcast-vrf-error'), ['bool'])),
                                ('is_im_state_registered', (YLeaf(YType.boolean, 'is-im-state-registered'), ['bool'])),
                                ('is_subscriber', (YLeaf(YType.boolean, 'is-subscriber'), ['bool'])),
                                ('subscriber_mode', (YLeaf(YType.uint32, 'subscriber-mode'), ['int'])),
                                ('is_identity_present', (YLeaf(YType.boolean, 'is-identity-present'), ['bool'])),
                                ('subscriber_id', (YLeaf(YType.str, 'subscriber-id'), ['str'])),
                                ('parent_ifhandle', (YLeaf(YType.str, 'parent-ifhandle'), ['str'])),
                                ('time_since_last_query_in_seconds', (YLeaf(YType.uint32, 'time-since-last-query-in-seconds'), ['int'])),
                                ('time_since_last_report_in_seconds', (YLeaf(YType.uint32, 'time-since-last-report-in-seconds'), ['int'])),
                                ('router_uptime_in_seconds', (YLeaf(YType.uint32, 'router-uptime-in-seconds'), ['int'])),
                                ('mte_tuple_count', (YLeaf(YType.uint32, 'mte-tuple-count'), ['int'])),
                            ])
                            self.interface_name = None
                            self.interface_name_xr = None
                            self.state = None
                            self.prefix_length = None
                            self.is_interface_up = None
                            self.is_ip_enabled = None
                            self.is_router_enabled = None
                            self.igmp_version = None
                            self.host_version = None
                            self.query_interval = None
                            self.query_timeout = None
                            self.query_maximum_response_time = None
                            self.last_member_query_interval = None
                            self.group_joins = None
                            self.group_leaves = None
                            self.is_querier = None
                            self.total_active_groups = None
                            self.robustness = None
                            self.proxy_interface = None
                            self.querier_uptime = None
                            self.las_ll_registration_count = None
                            self.las_get_address_count = None
                            self.las_update_count = None
                            self.las_ll_remove_update_count = None
                            self.las_ll_add_update_count = None
                            self.las_null_update_count = None
                            self.las_unregistration_count = None
                            self.is_las_request = None
                            self.is_las_registered = None
                            self.vrf_id = None
                            self.mte_vrf_id = None
                            self.location = None
                            self.mtu = None
                            self.vrf_state = None
                            self.is_configurationverify = None
                            self.configurationvrf_set = None
                            self.configurationvrf_error = None
                            self.configuration_mcast_vrf_set = None
                            self.configuration_mcast_vrf_error = None
                            self.is_im_state_registered = None
                            self.is_subscriber = None
                            self.subscriber_mode = None
                            self.is_identity_present = None
                            self.subscriber_id = None
                            self.parent_ifhandle = None
                            self.time_since_last_query_in_seconds = None
                            self.time_since_last_report_in_seconds = None
                            self.router_uptime_in_seconds = None
                            self.mte_tuple_count = None

                            self.address = Mld.Active.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.Address()
                            self.address.parent = self
                            self._children_name_map["address"] = "address"

                            self.querier_address = Mld.Active.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.QuerierAddress()
                            self.querier_address.parent = self
                            self._children_name_map["querier_address"] = "querier-address"

                            self.subscriber_address = Mld.Active.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.SubscriberAddress()
                            self.subscriber_address.parent = self
                            self._children_name_map["subscriber_address"] = "subscriber-address"
                            self._segment_path = lambda: "interface-state-off" + "[interface-name='" + str(self.interface_name) + "']"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Active.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff, ['interface_name', 'interface_name_xr', 'state', 'prefix_length', 'is_interface_up', 'is_ip_enabled', 'is_router_enabled', 'igmp_version', 'host_version', 'query_interval', 'query_timeout', 'query_maximum_response_time', 'last_member_query_interval', 'group_joins', 'group_leaves', 'is_querier', 'total_active_groups', 'robustness', 'proxy_interface', 'querier_uptime', 'las_ll_registration_count', 'las_get_address_count', 'las_update_count', 'las_ll_remove_update_count', 'las_ll_add_update_count', 'las_null_update_count', 'las_unregistration_count', 'is_las_request', 'is_las_registered', 'vrf_id', 'mte_vrf_id', 'location', 'mtu', 'vrf_state', 'is_configurationverify', 'configurationvrf_set', 'configurationvrf_error', 'configuration_mcast_vrf_set', 'configuration_mcast_vrf_error', 'is_im_state_registered', 'is_subscriber', 'subscriber_mode', 'is_identity_present', 'subscriber_id', 'parent_ifhandle', 'time_since_last_query_in_seconds', 'time_since_last_report_in_seconds', 'router_uptime_in_seconds', 'mte_tuple_count'], name, value)


                        class Address(_Entity_):
                            """
                            IP address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Active.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.Address, self).__init__()

                                self.yang_name = "address"
                                self.yang_parent_name = "interface-state-off"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Active.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.Address, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Active.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.Address']['meta_info']


                        class QuerierAddress(_Entity_):
                            """
                            Address of the Querier
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Active.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.QuerierAddress, self).__init__()

                                self.yang_name = "querier-address"
                                self.yang_parent_name = "interface-state-off"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "querier-address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Active.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.QuerierAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Active.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.QuerierAddress']['meta_info']


                        class SubscriberAddress(_Entity_):
                            """
                            Address of subscriber
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Active.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.SubscriberAddress, self).__init__()

                                self.yang_name = "subscriber-address"
                                self.yang_parent_name = "interface-state-off"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "subscriber-address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Active.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.SubscriberAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Active.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.SubscriberAddress']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Active.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Mld.Active.Vrfs.Vrf.InterfaceStateOffs']['meta_info']

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Mld.Active.Vrfs.Vrf']['meta_info']

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                return meta._meta_table['Mld.Active.Vrfs']['meta_info']


        class Process(_Entity_):
            """
            Process
            
            .. attribute:: amt_summary
            
            	MRIB RouteDB Expiry Information
            	**type**\:  :py:class:`AmtSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Process.AmtSummary>`
            
            	**config**\: False
            
            .. attribute:: nsr
            
            	NSR Information
            	**type**\:  :py:class:`Nsr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Process.Nsr>`
            
            	**config**\: False
            
            .. attribute:: amt_gateways
            
            	Table containing AMT Gateway DataBase information
            	**type**\:  :py:class:`AmtGateways <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Process.AmtGateways>`
            
            	**config**\: False
            
            .. attribute:: unicast_qos_adjust_stats
            
            	IGMP Unicast\-Qos\-Adjust Statistics
            	**type**\:  :py:class:`UnicastQosAdjustStats <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Process.UnicastQosAdjustStats>`
            
            	**config**\: False
            
            .. attribute:: bvi_statistics
            
            	IGMP BVI Stats
            	**type**\:  :py:class:`BviStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Process.BviStatistics>`
            
            	**config**\: False
            
            .. attribute:: nsf
            
            	NSF Information
            	**type**\:  :py:class:`Nsf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Process.Nsf>`
            
            	**config**\: False
            
            

            """

            _prefix = 'ipv4-igmp-oper'
            _revision = '2018-01-31'

            def __init__(self):
                if sys.version_info > (3,):
                    super().__init__()
                else:
                    super(Mld.Active.Process, self).__init__()

                self.yang_name = "process"
                self.yang_parent_name = "active"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("amt-summary", ("amt_summary", Mld.Active.Process.AmtSummary)), ("nsr", ("nsr", Mld.Active.Process.Nsr)), ("amt-gateways", ("amt_gateways", Mld.Active.Process.AmtGateways)), ("unicast-qos-adjust-stats", ("unicast_qos_adjust_stats", Mld.Active.Process.UnicastQosAdjustStats)), ("bvi-statistics", ("bvi_statistics", Mld.Active.Process.BviStatistics)), ("nsf", ("nsf", Mld.Active.Process.Nsf))])
                self._leafs = OrderedDict()

                self.amt_summary = Mld.Active.Process.AmtSummary()
                self.amt_summary.parent = self
                self._children_name_map["amt_summary"] = "amt-summary"

                self.nsr = Mld.Active.Process.Nsr()
                self.nsr.parent = self
                self._children_name_map["nsr"] = "nsr"

                self.amt_gateways = Mld.Active.Process.AmtGateways()
                self.amt_gateways.parent = self
                self._children_name_map["amt_gateways"] = "amt-gateways"

                self.unicast_qos_adjust_stats = Mld.Active.Process.UnicastQosAdjustStats()
                self.unicast_qos_adjust_stats.parent = self
                self._children_name_map["unicast_qos_adjust_stats"] = "unicast-qos-adjust-stats"

                self.bvi_statistics = Mld.Active.Process.BviStatistics()
                self.bvi_statistics.parent = self
                self._children_name_map["bvi_statistics"] = "bvi-statistics"

                self.nsf = Mld.Active.Process.Nsf()
                self.nsf.parent = self
                self._children_name_map["nsf"] = "nsf"
                self._segment_path = lambda: "process"
                self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/active/%s" % self._segment_path()
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(Mld.Active.Process, [], name, value)


            class AmtSummary(_Entity_):
                """
                MRIB RouteDB Expiry Information
                
                .. attribute:: anycast_prefix
                
                	Robustness variable
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                	**config**\: False
                
                .. attribute:: prefix_length
                
                	Advertize AMT prefix length
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: relay_address
                
                	Advertaisment for AMT Relay address
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                	**config**\: False
                
                .. attribute:: mtu
                
                	AMT Tunnel MTU
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: tos
                
                	Type Of Service value in AMT header
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: ttl
                
                	Time To Live value in AMT header
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: query_interval
                
                	AMT Query interval
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: gateway_count
                
                	Number of AMT Gateway
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: max_gateway
                
                	Maximum Gateway allowed
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: tunnel_count
                
                	AMT Tunnel Count
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: tunnel_configured_maximum
                
                	AMT Tunnel configured Maximum
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: is_acl_configured
                
                	ACL configured under AMT
                	**type**\: bool
                
                	**config**\: False
                
                .. attribute:: is_gateway_simulation
                
                	AMT Gateway Simulation
                	**type**\: bool
                
                	**config**\: False
                
                .. attribute:: is_ou_of_resource
                
                	AMT Out Of Resource
                	**type**\: bool
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Mld.Active.Process.AmtSummary, self).__init__()

                    self.yang_name = "amt-summary"
                    self.yang_parent_name = "process"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('anycast_prefix', (YLeaf(YType.str, 'anycast-prefix'), ['str'])),
                        ('prefix_length', (YLeaf(YType.uint32, 'prefix-length'), ['int'])),
                        ('relay_address', (YLeaf(YType.str, 'relay-address'), ['str'])),
                        ('mtu', (YLeaf(YType.uint32, 'mtu'), ['int'])),
                        ('tos', (YLeaf(YType.uint32, 'tos'), ['int'])),
                        ('ttl', (YLeaf(YType.uint32, 'ttl'), ['int'])),
                        ('query_interval', (YLeaf(YType.uint32, 'query-interval'), ['int'])),
                        ('gateway_count', (YLeaf(YType.uint32, 'gateway-count'), ['int'])),
                        ('max_gateway', (YLeaf(YType.uint32, 'max-gateway'), ['int'])),
                        ('tunnel_count', (YLeaf(YType.uint32, 'tunnel-count'), ['int'])),
                        ('tunnel_configured_maximum', (YLeaf(YType.uint32, 'tunnel-configured-maximum'), ['int'])),
                        ('is_acl_configured', (YLeaf(YType.boolean, 'is-acl-configured'), ['bool'])),
                        ('is_gateway_simulation', (YLeaf(YType.boolean, 'is-gateway-simulation'), ['bool'])),
                        ('is_ou_of_resource', (YLeaf(YType.boolean, 'is-ou-of-resource'), ['bool'])),
                    ])
                    self.anycast_prefix = None
                    self.prefix_length = None
                    self.relay_address = None
                    self.mtu = None
                    self.tos = None
                    self.ttl = None
                    self.query_interval = None
                    self.gateway_count = None
                    self.max_gateway = None
                    self.tunnel_count = None
                    self.tunnel_configured_maximum = None
                    self.is_acl_configured = None
                    self.is_gateway_simulation = None
                    self.is_ou_of_resource = None
                    self._segment_path = lambda: "amt-summary"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/active/process/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Mld.Active.Process.AmtSummary, ['anycast_prefix', 'prefix_length', 'relay_address', 'mtu', 'tos', 'ttl', 'query_interval', 'gateway_count', 'max_gateway', 'tunnel_count', 'tunnel_configured_maximum', 'is_acl_configured', 'is_gateway_simulation', 'is_ou_of_resource'], name, value)

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Mld.Active.Process.AmtSummary']['meta_info']


            class Nsr(_Entity_):
                """
                NSR Information
                
                .. attribute:: state
                
                	NSR state
                	**type**\: int
                
                	**range:** 0..255
                
                	**config**\: False
                
                .. attribute:: partner_proc_connected
                
                	Partner process connected
                	**type**\: bool
                
                	**config**\: False
                
                .. attribute:: collab_conv_done
                
                	Collaborators convergence done
                	**type**\: bool
                
                	**config**\: False
                
                .. attribute:: rmf_notification_done
                
                	RMF Notification done
                	**type**\: bool
                
                	**config**\: False
                
                .. attribute:: last_proc
                
                	Time when process came up
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                	**config**\: False
                
                .. attribute:: last_proc_connection_up
                
                	Time when process connection went up
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                	**config**\: False
                
                .. attribute:: last_proc_connection_dn
                
                	Time when process connection went down
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                	**config**\: False
                
                .. attribute:: last_rmf_ready
                
                	Time when RMF Rdy notif was sent
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                	**config**\: False
                
                .. attribute:: last_rmf_not_ready
                
                	Time when RMF Not\-Rdy notif was sent
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                	**config**\: False
                
                .. attribute:: count_proc_connection_up
                
                	No. of times process connection went up
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: count_proc_connection_dn
                
                	No. of times process connection went down
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: count_rmf_ready
                
                	No. of times RMF Ready notif was sent
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: count_rmf_not_ready
                
                	No. of times RMF Not Ready notif was sent
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Mld.Active.Process.Nsr, self).__init__()

                    self.yang_name = "nsr"
                    self.yang_parent_name = "process"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('state', (YLeaf(YType.uint8, 'state'), ['int'])),
                        ('partner_proc_connected', (YLeaf(YType.boolean, 'partner-proc-connected'), ['bool'])),
                        ('collab_conv_done', (YLeaf(YType.boolean, 'collab-conv-done'), ['bool'])),
                        ('rmf_notification_done', (YLeaf(YType.boolean, 'rmf-notification-done'), ['bool'])),
                        ('last_proc', (YLeaf(YType.uint64, 'last-proc'), ['int'])),
                        ('last_proc_connection_up', (YLeaf(YType.uint64, 'last-proc-connection-up'), ['int'])),
                        ('last_proc_connection_dn', (YLeaf(YType.uint64, 'last-proc-connection-dn'), ['int'])),
                        ('last_rmf_ready', (YLeaf(YType.uint64, 'last-rmf-ready'), ['int'])),
                        ('last_rmf_not_ready', (YLeaf(YType.uint64, 'last-rmf-not-ready'), ['int'])),
                        ('count_proc_connection_up', (YLeaf(YType.uint32, 'count-proc-connection-up'), ['int'])),
                        ('count_proc_connection_dn', (YLeaf(YType.uint32, 'count-proc-connection-dn'), ['int'])),
                        ('count_rmf_ready', (YLeaf(YType.uint32, 'count-rmf-ready'), ['int'])),
                        ('count_rmf_not_ready', (YLeaf(YType.uint32, 'count-rmf-not-ready'), ['int'])),
                    ])
                    self.state = None
                    self.partner_proc_connected = None
                    self.collab_conv_done = None
                    self.rmf_notification_done = None
                    self.last_proc = None
                    self.last_proc_connection_up = None
                    self.last_proc_connection_dn = None
                    self.last_rmf_ready = None
                    self.last_rmf_not_ready = None
                    self.count_proc_connection_up = None
                    self.count_proc_connection_dn = None
                    self.count_rmf_ready = None
                    self.count_rmf_not_ready = None
                    self._segment_path = lambda: "nsr"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/active/process/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Mld.Active.Process.Nsr, ['state', 'partner_proc_connected', 'collab_conv_done', 'rmf_notification_done', 'last_proc', 'last_proc_connection_up', 'last_proc_connection_dn', 'last_rmf_ready', 'last_rmf_not_ready', 'count_proc_connection_up', 'count_proc_connection_dn', 'count_rmf_ready', 'count_rmf_not_ready'], name, value)

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Mld.Active.Process.Nsr']['meta_info']


            class AmtGateways(_Entity_):
                """
                Table containing AMT Gateway DataBase
                information
                
                .. attribute:: amt_gateway
                
                	AMT Gateway DataBase information
                	**type**\: list of  		 :py:class:`AmtGateway <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.Process.AmtGateways.AmtGateway>`
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Mld.Active.Process.AmtGateways, self).__init__()

                    self.yang_name = "amt-gateways"
                    self.yang_parent_name = "process"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("amt-gateway", ("amt_gateway", Mld.Active.Process.AmtGateways.AmtGateway))])
                    self._leafs = OrderedDict()

                    self.amt_gateway = YList(self)
                    self._segment_path = lambda: "amt-gateways"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/active/process/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Mld.Active.Process.AmtGateways, [], name, value)


                class AmtGateway(_Entity_):
                    """
                    AMT Gateway DataBase information
                    
                    .. attribute:: gateway_address
                    
                    	Gateway Address
                    	**type**\: union of the below types:
                    
                    		**type**\: str
                    
                    			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    		**type**\: str
                    
                    			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    	**config**\: False
                    
                    .. attribute:: port
                    
                    	Port
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: amtgw
                    
                    	GW
                    	**type**\: str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    	**config**\: False
                    
                    .. attribute:: amt_port
                    
                    	Port
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: key_len
                    
                    	Len
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: amtnh
                    
                    	AMT NH
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: amt_nonce
                    
                    	Nonce
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: idb
                    
                    	IDB
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**config**\: False
                    
                    .. attribute:: mem_upd_in
                    
                    	UpdIn
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: mem_upd_out
                    
                    	UpdOut
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Mld.Active.Process.AmtGateways.AmtGateway, self).__init__()

                        self.yang_name = "amt-gateway"
                        self.yang_parent_name = "amt-gateways"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('gateway_address', (YLeaf(YType.str, 'gateway-address'), ['str','str'])),
                            ('port', (YLeaf(YType.uint32, 'port'), ['int'])),
                            ('amtgw', (YLeaf(YType.str, 'amtgw'), ['str'])),
                            ('amt_port', (YLeaf(YType.uint32, 'amt-port'), ['int'])),
                            ('key_len', (YLeaf(YType.uint32, 'key-len'), ['int'])),
                            ('amtnh', (YLeaf(YType.uint32, 'amtnh'), ['int'])),
                            ('amt_nonce', (YLeaf(YType.uint32, 'amt-nonce'), ['int'])),
                            ('idb', (YLeaf(YType.uint64, 'idb'), ['int'])),
                            ('mem_upd_in', (YLeaf(YType.uint32, 'mem-upd-in'), ['int'])),
                            ('mem_upd_out', (YLeaf(YType.uint32, 'mem-upd-out'), ['int'])),
                        ])
                        self.gateway_address = None
                        self.port = None
                        self.amtgw = None
                        self.amt_port = None
                        self.key_len = None
                        self.amtnh = None
                        self.amt_nonce = None
                        self.idb = None
                        self.mem_upd_in = None
                        self.mem_upd_out = None
                        self._segment_path = lambda: "amt-gateway"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/active/process/amt-gateways/%s" % self._segment_path()
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Mld.Active.Process.AmtGateways.AmtGateway, ['gateway_address', 'port', 'amtgw', 'amt_port', 'key_len', 'amtnh', 'amt_nonce', 'idb', 'mem_upd_in', 'mem_upd_out'], name, value)

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Mld.Active.Process.AmtGateways.AmtGateway']['meta_info']

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Mld.Active.Process.AmtGateways']['meta_info']


            class UnicastQosAdjustStats(_Entity_):
                """
                IGMP Unicast\-Qos\-Adjust Statistics
                
                .. attribute:: queues
                
                	I2Q Queue count
                	**type**\: int
                
                	**range:** 0..65535
                
                	**config**\: False
                
                .. attribute:: batches
                
                	I2Q Rate Batch count
                	**type**\: int
                
                	**range:** 0..65535
                
                	**config**\: False
                
                .. attribute:: add_to_batches
                
                	Add to batch count
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: delete_to_batches
                
                	Delete to batch count
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: send_success
                
                	Send Success count
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: send_errors
                
                	Number of Send errors in batch
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: send_comm_errors
                
                	Send Error due to comms count
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: send_partial_errors
                
                	Send Error due to partial issue count
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: received_resync_requests
                
                	Number of Resync request received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: sent_resync_bulks
                
                	Number of bulks sent for last resync received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: is_resync_received
                
                	Is Resync request received
                	**type**\: bool
                
                	**config**\: False
                
                .. attribute:: is_resync_required
                
                	Is Resync required
                	**type**\: bool
                
                	**config**\: False
                
                .. attribute:: is_resync_start_sent
                
                	Is Resync Start message sent
                	**type**\: bool
                
                	**config**\: False
                
                .. attribute:: is_qos_s_sweeped
                
                	Is QOS Sweeped once 
                	**type**\: bool
                
                	**config**\: False
                
                .. attribute:: last_sweep_time
                
                	Time elapsed since Last mark and sweep in seconds
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                	**config**\: False
                
                	**units**\: second
                
                .. attribute:: last_download_time
                
                	Time elapsed since Last download to QOS in seconds
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                	**config**\: False
                
                	**units**\: second
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Mld.Active.Process.UnicastQosAdjustStats, self).__init__()

                    self.yang_name = "unicast-qos-adjust-stats"
                    self.yang_parent_name = "process"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('queues', (YLeaf(YType.uint16, 'queues'), ['int'])),
                        ('batches', (YLeaf(YType.uint16, 'batches'), ['int'])),
                        ('add_to_batches', (YLeaf(YType.uint32, 'add-to-batches'), ['int'])),
                        ('delete_to_batches', (YLeaf(YType.uint32, 'delete-to-batches'), ['int'])),
                        ('send_success', (YLeaf(YType.uint32, 'send-success'), ['int'])),
                        ('send_errors', (YLeaf(YType.uint32, 'send-errors'), ['int'])),
                        ('send_comm_errors', (YLeaf(YType.uint32, 'send-comm-errors'), ['int'])),
                        ('send_partial_errors', (YLeaf(YType.uint32, 'send-partial-errors'), ['int'])),
                        ('received_resync_requests', (YLeaf(YType.uint32, 'received-resync-requests'), ['int'])),
                        ('sent_resync_bulks', (YLeaf(YType.uint32, 'sent-resync-bulks'), ['int'])),
                        ('is_resync_received', (YLeaf(YType.boolean, 'is-resync-received'), ['bool'])),
                        ('is_resync_required', (YLeaf(YType.boolean, 'is-resync-required'), ['bool'])),
                        ('is_resync_start_sent', (YLeaf(YType.boolean, 'is-resync-start-sent'), ['bool'])),
                        ('is_qos_s_sweeped', (YLeaf(YType.boolean, 'is-qos-s-sweeped'), ['bool'])),
                        ('last_sweep_time', (YLeaf(YType.uint64, 'last-sweep-time'), ['int'])),
                        ('last_download_time', (YLeaf(YType.uint64, 'last-download-time'), ['int'])),
                    ])
                    self.queues = None
                    self.batches = None
                    self.add_to_batches = None
                    self.delete_to_batches = None
                    self.send_success = None
                    self.send_errors = None
                    self.send_comm_errors = None
                    self.send_partial_errors = None
                    self.received_resync_requests = None
                    self.sent_resync_bulks = None
                    self.is_resync_received = None
                    self.is_resync_required = None
                    self.is_resync_start_sent = None
                    self.is_qos_s_sweeped = None
                    self.last_sweep_time = None
                    self.last_download_time = None
                    self._segment_path = lambda: "unicast-qos-adjust-stats"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/active/process/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Mld.Active.Process.UnicastQosAdjustStats, ['queues', 'batches', 'add_to_batches', 'delete_to_batches', 'send_success', 'send_errors', 'send_comm_errors', 'send_partial_errors', 'received_resync_requests', 'sent_resync_bulks', 'is_resync_received', 'is_resync_required', 'is_resync_start_sent', 'is_qos_s_sweeped', 'last_sweep_time', 'last_download_time'], name, value)

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Mld.Active.Process.UnicastQosAdjustStats']['meta_info']


            class BviStatistics(_Entity_):
                """
                IGMP BVI Stats
                
                .. attribute:: receive_buffers
                
                	Number of AIPC buffers received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: release_buffers
                
                	Number of AIPC buffers released
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: send_blocks
                
                	Number of AIPC buffers send blocked
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: release_fail_buffers
                
                	Number of AIPC buffers release failed
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: null_buffer_handles
                
                	Number of AIPC NULL buffer handles
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: rx_ipc_open_notif
                
                	Number of AIPC open notifications received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: rx_ipc_close_notif
                
                	Number of AIPC close notifications received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: rx_ipc_error_notif
                
                	Number of AIPC error notifications received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: rx_ipc_lwm_notif
                
                	Number of AIPC LWM notifications received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: rx_ipc_input_wait_notif
                
                	Number of AIPC input waiting notifications received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: rx_ipc_send_status_notif
                
                	Number of AIPC send status notifications received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: rx_ipc_publish_notif
                
                	Number of AIPC publish notifications received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: rx_ipc_q_full_notif
                
                	Number of AIPC queue full notifications received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: rx_ipc_output_notif
                
                	Number of AIPC output notifications received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: rx_ipc_connect_notif
                
                	Number of AIPC connect notifications received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: rx_igmp_packet_success
                
                	Number of IGMP protocol messages received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: rx_add_mrouter_msg
                
                	Number of IGMP Mrouter Add messages received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: rx_delete_mrouter_msg
                
                	Number of IGMP Mrouter Delete messages received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: rx_sweep_mrouter_msg
                
                	Number of IGMP Mrouter Sweep messages received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: tx_add_mrouter_msg
                
                	Number of IGMP Mrouter Add messages transmitted
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: tx_delete_mrouter_msg
                
                	Number of IGMP Mrouter Delete messages transmitted
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: tx_sweep_mrouter_msg
                
                	Number of IGMP Mrouter Sweep messages received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: rx_unknown_mrouter_msg
                
                	Number of IGMP Mrouter Unknown messages received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: tx_unknown_mrouter_msg
                
                	Number of IGMP Mrouter Unknown messages transmitted
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: tx_buffer_errors
                
                	Number of AIPC transmission errors
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: tx_buffers
                
                	Number of AIPC buffers transmited
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: tx_protocol_buffers
                
                	Number of IGMP protocol buffers transmitted
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: tx_mrouter_buffers
                
                	Number of IGMP Mrouter buffers transmitted
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: tx_unknown_buffers
                
                	Number of IGMP Unknown buffers transmited
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: wtx_msg_recvd
                
                	Number of WTX messages received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: wtx_msg_sent
                
                	Number of WTX messages sent
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: wtx_msg_proto_sent
                
                	Number of WTX messages sent to Protocol
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: wtx_msg_drop_dc
                
                	Number of WTX messages dropped due to disconnect
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: wtx_msg_drop_nomem
                
                	Number of WTX messages dropped to memory
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: wtx_msg_freed
                
                	Number of WTX messages freed
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Mld.Active.Process.BviStatistics, self).__init__()

                    self.yang_name = "bvi-statistics"
                    self.yang_parent_name = "process"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('receive_buffers', (YLeaf(YType.uint32, 'receive-buffers'), ['int'])),
                        ('release_buffers', (YLeaf(YType.uint32, 'release-buffers'), ['int'])),
                        ('send_blocks', (YLeaf(YType.uint32, 'send-blocks'), ['int'])),
                        ('release_fail_buffers', (YLeaf(YType.uint32, 'release-fail-buffers'), ['int'])),
                        ('null_buffer_handles', (YLeaf(YType.uint32, 'null-buffer-handles'), ['int'])),
                        ('rx_ipc_open_notif', (YLeaf(YType.uint32, 'rx-ipc-open-notif'), ['int'])),
                        ('rx_ipc_close_notif', (YLeaf(YType.uint32, 'rx-ipc-close-notif'), ['int'])),
                        ('rx_ipc_error_notif', (YLeaf(YType.uint32, 'rx-ipc-error-notif'), ['int'])),
                        ('rx_ipc_lwm_notif', (YLeaf(YType.uint32, 'rx-ipc-lwm-notif'), ['int'])),
                        ('rx_ipc_input_wait_notif', (YLeaf(YType.uint32, 'rx-ipc-input-wait-notif'), ['int'])),
                        ('rx_ipc_send_status_notif', (YLeaf(YType.uint32, 'rx-ipc-send-status-notif'), ['int'])),
                        ('rx_ipc_publish_notif', (YLeaf(YType.uint32, 'rx-ipc-publish-notif'), ['int'])),
                        ('rx_ipc_q_full_notif', (YLeaf(YType.uint32, 'rx-ipc-q-full-notif'), ['int'])),
                        ('rx_ipc_output_notif', (YLeaf(YType.uint32, 'rx-ipc-output-notif'), ['int'])),
                        ('rx_ipc_connect_notif', (YLeaf(YType.uint32, 'rx-ipc-connect-notif'), ['int'])),
                        ('rx_igmp_packet_success', (YLeaf(YType.uint32, 'rx-igmp-packet-success'), ['int'])),
                        ('rx_add_mrouter_msg', (YLeaf(YType.uint32, 'rx-add-mrouter-msg'), ['int'])),
                        ('rx_delete_mrouter_msg', (YLeaf(YType.uint32, 'rx-delete-mrouter-msg'), ['int'])),
                        ('rx_sweep_mrouter_msg', (YLeaf(YType.uint32, 'rx-sweep-mrouter-msg'), ['int'])),
                        ('tx_add_mrouter_msg', (YLeaf(YType.uint32, 'tx-add-mrouter-msg'), ['int'])),
                        ('tx_delete_mrouter_msg', (YLeaf(YType.uint32, 'tx-delete-mrouter-msg'), ['int'])),
                        ('tx_sweep_mrouter_msg', (YLeaf(YType.uint32, 'tx-sweep-mrouter-msg'), ['int'])),
                        ('rx_unknown_mrouter_msg', (YLeaf(YType.uint32, 'rx-unknown-mrouter-msg'), ['int'])),
                        ('tx_unknown_mrouter_msg', (YLeaf(YType.uint32, 'tx-unknown-mrouter-msg'), ['int'])),
                        ('tx_buffer_errors', (YLeaf(YType.uint32, 'tx-buffer-errors'), ['int'])),
                        ('tx_buffers', (YLeaf(YType.uint32, 'tx-buffers'), ['int'])),
                        ('tx_protocol_buffers', (YLeaf(YType.uint32, 'tx-protocol-buffers'), ['int'])),
                        ('tx_mrouter_buffers', (YLeaf(YType.uint32, 'tx-mrouter-buffers'), ['int'])),
                        ('tx_unknown_buffers', (YLeaf(YType.uint32, 'tx-unknown-buffers'), ['int'])),
                        ('wtx_msg_recvd', (YLeaf(YType.uint32, 'wtx-msg-recvd'), ['int'])),
                        ('wtx_msg_sent', (YLeaf(YType.uint32, 'wtx-msg-sent'), ['int'])),
                        ('wtx_msg_proto_sent', (YLeaf(YType.uint32, 'wtx-msg-proto-sent'), ['int'])),
                        ('wtx_msg_drop_dc', (YLeaf(YType.uint32, 'wtx-msg-drop-dc'), ['int'])),
                        ('wtx_msg_drop_nomem', (YLeaf(YType.uint32, 'wtx-msg-drop-nomem'), ['int'])),
                        ('wtx_msg_freed', (YLeaf(YType.uint32, 'wtx-msg-freed'), ['int'])),
                    ])
                    self.receive_buffers = None
                    self.release_buffers = None
                    self.send_blocks = None
                    self.release_fail_buffers = None
                    self.null_buffer_handles = None
                    self.rx_ipc_open_notif = None
                    self.rx_ipc_close_notif = None
                    self.rx_ipc_error_notif = None
                    self.rx_ipc_lwm_notif = None
                    self.rx_ipc_input_wait_notif = None
                    self.rx_ipc_send_status_notif = None
                    self.rx_ipc_publish_notif = None
                    self.rx_ipc_q_full_notif = None
                    self.rx_ipc_output_notif = None
                    self.rx_ipc_connect_notif = None
                    self.rx_igmp_packet_success = None
                    self.rx_add_mrouter_msg = None
                    self.rx_delete_mrouter_msg = None
                    self.rx_sweep_mrouter_msg = None
                    self.tx_add_mrouter_msg = None
                    self.tx_delete_mrouter_msg = None
                    self.tx_sweep_mrouter_msg = None
                    self.rx_unknown_mrouter_msg = None
                    self.tx_unknown_mrouter_msg = None
                    self.tx_buffer_errors = None
                    self.tx_buffers = None
                    self.tx_protocol_buffers = None
                    self.tx_mrouter_buffers = None
                    self.tx_unknown_buffers = None
                    self.wtx_msg_recvd = None
                    self.wtx_msg_sent = None
                    self.wtx_msg_proto_sent = None
                    self.wtx_msg_drop_dc = None
                    self.wtx_msg_drop_nomem = None
                    self.wtx_msg_freed = None
                    self._segment_path = lambda: "bvi-statistics"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/active/process/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Mld.Active.Process.BviStatistics, ['receive_buffers', 'release_buffers', 'send_blocks', 'release_fail_buffers', 'null_buffer_handles', 'rx_ipc_open_notif', 'rx_ipc_close_notif', 'rx_ipc_error_notif', 'rx_ipc_lwm_notif', 'rx_ipc_input_wait_notif', 'rx_ipc_send_status_notif', 'rx_ipc_publish_notif', 'rx_ipc_q_full_notif', 'rx_ipc_output_notif', 'rx_ipc_connect_notif', 'rx_igmp_packet_success', 'rx_add_mrouter_msg', 'rx_delete_mrouter_msg', 'rx_sweep_mrouter_msg', 'tx_add_mrouter_msg', 'tx_delete_mrouter_msg', 'tx_sweep_mrouter_msg', 'rx_unknown_mrouter_msg', 'tx_unknown_mrouter_msg', 'tx_buffer_errors', 'tx_buffers', 'tx_protocol_buffers', 'tx_mrouter_buffers', 'tx_unknown_buffers', 'wtx_msg_recvd', 'wtx_msg_sent', 'wtx_msg_proto_sent', 'wtx_msg_drop_dc', 'wtx_msg_drop_nomem', 'wtx_msg_freed'], name, value)

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Mld.Active.Process.BviStatistics']['meta_info']


            class Nsf(_Entity_):
                """
                NSF Information
                
                .. attribute:: is_multicast_nsf_active
                
                	Is Multicast NSF active
                	**type**\: bool
                
                	**config**\: False
                
                .. attribute:: multicast_nsf_timeout
                
                	Multicast NSF timeout in secs
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                	**units**\: second
                
                .. attribute:: multicast_nsf_time_left
                
                	Multicast NSF time remaining in secs
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                	**units**\: second
                
                .. attribute:: respawn_count
                
                	Respawn Count
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: last_nsf_on
                
                	Last NSF time ON
                	**type**\: int
                
                	**range:** \-9223372036854775808..9223372036854775807
                
                	**config**\: False
                
                .. attribute:: last_nsf_off
                
                	Last NSF time off
                	**type**\: int
                
                	**range:** \-9223372036854775808..9223372036854775807
                
                	**config**\: False
                
                .. attribute:: last_nsf_on_min
                
                	Last NSF time ON in Seconds
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                	**config**\: False
                
                	**units**\: second
                
                .. attribute:: last_nsf_off_min
                
                	Last NSF time OFF in Seconds
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                	**config**\: False
                
                	**units**\: second
                
                .. attribute:: last_icd_notif_recv
                
                	Last ICD Notif Recv
                	**type**\: int
                
                	**range:** \-9223372036854775808..9223372036854775807
                
                	**config**\: False
                
                .. attribute:: last_icd_notif_recv_min
                
                	Last ICD Notif Recv in Seconds
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                	**config**\: False
                
                	**units**\: second
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Mld.Active.Process.Nsf, self).__init__()

                    self.yang_name = "nsf"
                    self.yang_parent_name = "process"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('is_multicast_nsf_active', (YLeaf(YType.boolean, 'is-multicast-nsf-active'), ['bool'])),
                        ('multicast_nsf_timeout', (YLeaf(YType.uint32, 'multicast-nsf-timeout'), ['int'])),
                        ('multicast_nsf_time_left', (YLeaf(YType.uint32, 'multicast-nsf-time-left'), ['int'])),
                        ('respawn_count', (YLeaf(YType.uint32, 'respawn-count'), ['int'])),
                        ('last_nsf_on', (YLeaf(YType.int64, 'last-nsf-on'), ['int'])),
                        ('last_nsf_off', (YLeaf(YType.int64, 'last-nsf-off'), ['int'])),
                        ('last_nsf_on_min', (YLeaf(YType.int32, 'last-nsf-on-min'), ['int'])),
                        ('last_nsf_off_min', (YLeaf(YType.int32, 'last-nsf-off-min'), ['int'])),
                        ('last_icd_notif_recv', (YLeaf(YType.int64, 'last-icd-notif-recv'), ['int'])),
                        ('last_icd_notif_recv_min', (YLeaf(YType.int32, 'last-icd-notif-recv-min'), ['int'])),
                    ])
                    self.is_multicast_nsf_active = None
                    self.multicast_nsf_timeout = None
                    self.multicast_nsf_time_left = None
                    self.respawn_count = None
                    self.last_nsf_on = None
                    self.last_nsf_off = None
                    self.last_nsf_on_min = None
                    self.last_nsf_off_min = None
                    self.last_icd_notif_recv = None
                    self.last_icd_notif_recv_min = None
                    self._segment_path = lambda: "nsf"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/active/process/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Mld.Active.Process.Nsf, ['is_multicast_nsf_active', 'multicast_nsf_timeout', 'multicast_nsf_time_left', 'respawn_count', 'last_nsf_on', 'last_nsf_off', 'last_nsf_on_min', 'last_nsf_off_min', 'last_icd_notif_recv', 'last_icd_notif_recv_min'], name, value)

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Mld.Active.Process.Nsf']['meta_info']

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                return meta._meta_table['Mld.Active.Process']['meta_info']


        class DefaultContext(_Entity_):
            """
            Default Context
            
            .. attribute:: summary
            
            	IGMP Summary Information
            	**type**\:  :py:class:`Summary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.Summary>`
            
            	**config**\: False
            
            .. attribute:: interface_state_ons
            
            	IGMP Interface state on
            	**type**\:  :py:class:`InterfaceStateOns <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.InterfaceStateOns>`
            
            	**config**\: False
            
            .. attribute:: detail_groups
            
            	IGMP Detail Group Database
            	**type**\:  :py:class:`DetailGroups <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.DetailGroups>`
            
            	**config**\: False
            
            .. attribute:: non_active_groups
            
            	IGMP Non\-Active Groups Information
            	**type**\:  :py:class:`NonActiveGroups <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.NonActiveGroups>`
            
            	**config**\: False
            
            .. attribute:: ssm_maps
            
            	SSM Map Table
            	**type**\:  :py:class:`SsmMaps <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.SsmMaps>`
            
            	**config**\: False
            
            .. attribute:: explicit_groups
            
            	IGMP Explicit Group Database
            	**type**\:  :py:class:`ExplicitGroups <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.ExplicitGroups>`
            
            	**config**\: False
            
            .. attribute:: interface_table
            
            	IGMP Interface specific Table
            	**type**\:  :py:class:`InterfaceTable <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.InterfaceTable>`
            
            	**config**\: False
            
            .. attribute:: interface_unicast_qos_adjusts
            
            	IGMP Interface Unicast\-Qos\-Adjust
            	**type**\:  :py:class:`InterfaceUnicastQosAdjusts <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.InterfaceUnicastQosAdjusts>`
            
            	**config**\: False
            
            .. attribute:: ranges
            
            	Range table
            	**type**\:  :py:class:`Ranges <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.Ranges>`
            
            	**config**\: False
            
            .. attribute:: ifrs_interfaces
            
            	IGMP Interface specific
            	**type**\:  :py:class:`IfrsInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.IfrsInterfaces>`
            
            	**config**\: False
            
            .. attribute:: traffic_counters
            
            	IGMP Message Traffic Counters
            	**type**\:  :py:class:`TrafficCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.TrafficCounters>`
            
            	**config**\: False
            
            .. attribute:: groups
            
            	IGMP Group Database Table
            	**type**\:  :py:class:`Groups <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.Groups>`
            
            	**config**\: False
            
            .. attribute:: group_summary
            
            	IGMP Groups Summary
            	**type**\:  :py:class:`GroupSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.GroupSummary>`
            
            	**config**\: False
            
            .. attribute:: ifrs_interface_summary
            
            	IGMP IFRS Interface summary
            	**type**\:  :py:class:`IfrsInterfaceSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.IfrsInterfaceSummary>`
            
            	**config**\: False
            
            .. attribute:: global_interface_table
            
            	IGMP Global Interface 
            	**type**\:  :py:class:`GlobalInterfaceTable <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.GlobalInterfaceTable>`
            
            	**config**\: False
            
            .. attribute:: ssm_map_details
            
            	SSM Map Detail
            	**type**\:  :py:class:`SsmMapDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.SsmMapDetails>`
            
            	**config**\: False
            
            .. attribute:: interface_state_offs
            
            	IGMP Interface state off
            	**type**\:  :py:class:`InterfaceStateOffs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.InterfaceStateOffs>`
            
            	**config**\: False
            
            

            """

            _prefix = 'ipv4-igmp-oper'
            _revision = '2018-01-31'

            def __init__(self):
                if sys.version_info > (3,):
                    super().__init__()
                else:
                    super(Mld.Active.DefaultContext, self).__init__()

                self.yang_name = "default-context"
                self.yang_parent_name = "active"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("summary", ("summary", Mld.Active.DefaultContext.Summary)), ("interface-state-ons", ("interface_state_ons", Mld.Active.DefaultContext.InterfaceStateOns)), ("detail-groups", ("detail_groups", Mld.Active.DefaultContext.DetailGroups)), ("non-active-groups", ("non_active_groups", Mld.Active.DefaultContext.NonActiveGroups)), ("ssm-maps", ("ssm_maps", Mld.Active.DefaultContext.SsmMaps)), ("explicit-groups", ("explicit_groups", Mld.Active.DefaultContext.ExplicitGroups)), ("interface-table", ("interface_table", Mld.Active.DefaultContext.InterfaceTable)), ("interface-unicast-qos-adjusts", ("interface_unicast_qos_adjusts", Mld.Active.DefaultContext.InterfaceUnicastQosAdjusts)), ("ranges", ("ranges", Mld.Active.DefaultContext.Ranges)), ("ifrs-interfaces", ("ifrs_interfaces", Mld.Active.DefaultContext.IfrsInterfaces)), ("traffic-counters", ("traffic_counters", Mld.Active.DefaultContext.TrafficCounters)), ("groups", ("groups", Mld.Active.DefaultContext.Groups)), ("group-summary", ("group_summary", Mld.Active.DefaultContext.GroupSummary)), ("ifrs-interface-summary", ("ifrs_interface_summary", Mld.Active.DefaultContext.IfrsInterfaceSummary)), ("global-interface-table", ("global_interface_table", Mld.Active.DefaultContext.GlobalInterfaceTable)), ("ssm-map-details", ("ssm_map_details", Mld.Active.DefaultContext.SsmMapDetails)), ("interface-state-offs", ("interface_state_offs", Mld.Active.DefaultContext.InterfaceStateOffs))])
                self._leafs = OrderedDict()

                self.summary = Mld.Active.DefaultContext.Summary()
                self.summary.parent = self
                self._children_name_map["summary"] = "summary"

                self.interface_state_ons = Mld.Active.DefaultContext.InterfaceStateOns()
                self.interface_state_ons.parent = self
                self._children_name_map["interface_state_ons"] = "interface-state-ons"

                self.detail_groups = Mld.Active.DefaultContext.DetailGroups()
                self.detail_groups.parent = self
                self._children_name_map["detail_groups"] = "detail-groups"

                self.non_active_groups = Mld.Active.DefaultContext.NonActiveGroups()
                self.non_active_groups.parent = self
                self._children_name_map["non_active_groups"] = "non-active-groups"

                self.ssm_maps = Mld.Active.DefaultContext.SsmMaps()
                self.ssm_maps.parent = self
                self._children_name_map["ssm_maps"] = "ssm-maps"

                self.explicit_groups = Mld.Active.DefaultContext.ExplicitGroups()
                self.explicit_groups.parent = self
                self._children_name_map["explicit_groups"] = "explicit-groups"

                self.interface_table = Mld.Active.DefaultContext.InterfaceTable()
                self.interface_table.parent = self
                self._children_name_map["interface_table"] = "interface-table"

                self.interface_unicast_qos_adjusts = Mld.Active.DefaultContext.InterfaceUnicastQosAdjusts()
                self.interface_unicast_qos_adjusts.parent = self
                self._children_name_map["interface_unicast_qos_adjusts"] = "interface-unicast-qos-adjusts"

                self.ranges = Mld.Active.DefaultContext.Ranges()
                self.ranges.parent = self
                self._children_name_map["ranges"] = "ranges"

                self.ifrs_interfaces = Mld.Active.DefaultContext.IfrsInterfaces()
                self.ifrs_interfaces.parent = self
                self._children_name_map["ifrs_interfaces"] = "ifrs-interfaces"

                self.traffic_counters = Mld.Active.DefaultContext.TrafficCounters()
                self.traffic_counters.parent = self
                self._children_name_map["traffic_counters"] = "traffic-counters"

                self.groups = Mld.Active.DefaultContext.Groups()
                self.groups.parent = self
                self._children_name_map["groups"] = "groups"

                self.group_summary = Mld.Active.DefaultContext.GroupSummary()
                self.group_summary.parent = self
                self._children_name_map["group_summary"] = "group-summary"

                self.ifrs_interface_summary = Mld.Active.DefaultContext.IfrsInterfaceSummary()
                self.ifrs_interface_summary.parent = self
                self._children_name_map["ifrs_interface_summary"] = "ifrs-interface-summary"

                self.global_interface_table = Mld.Active.DefaultContext.GlobalInterfaceTable()
                self.global_interface_table.parent = self
                self._children_name_map["global_interface_table"] = "global-interface-table"

                self.ssm_map_details = Mld.Active.DefaultContext.SsmMapDetails()
                self.ssm_map_details.parent = self
                self._children_name_map["ssm_map_details"] = "ssm-map-details"

                self.interface_state_offs = Mld.Active.DefaultContext.InterfaceStateOffs()
                self.interface_state_offs.parent = self
                self._children_name_map["interface_state_offs"] = "interface-state-offs"
                self._segment_path = lambda: "default-context"
                self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/active/%s" % self._segment_path()
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(Mld.Active.DefaultContext, [], name, value)


            class Summary(_Entity_):
                """
                IGMP Summary Information
                
                .. attribute:: robustness
                
                	Robustness variable
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: group_limit
                
                	Maximum groups accepted
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: group_count
                
                	Current groups accepted
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: is_disabled
                
                	Is maximum enforcement disabled
                	**type**\: bool
                
                	**config**\: False
                
                .. attribute:: supported_interfaces
                
                	No. of supported interfaces
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: unsupported_interfaces
                
                	No. of unsupported interfaces
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: enabled_interface_count
                
                	No. of enabled interfaces
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: disabled_interface_count
                
                	No. of disabled interfaces
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: tunnel_mte_config_count
                
                	No. of static group commands
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: node_low_memory
                
                	Is node in low memory condition
                	**type**\: bool
                
                	**config**\: False
                
                .. attribute:: interface
                
                	Maximum and current groups accepted for each interface
                	**type**\: list of  		 :py:class:`Interface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.Summary.Interface>`
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Mld.Active.DefaultContext.Summary, self).__init__()

                    self.yang_name = "summary"
                    self.yang_parent_name = "default-context"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("interface", ("interface", Mld.Active.DefaultContext.Summary.Interface))])
                    self._leafs = OrderedDict([
                        ('robustness', (YLeaf(YType.uint32, 'robustness'), ['int'])),
                        ('group_limit', (YLeaf(YType.uint32, 'group-limit'), ['int'])),
                        ('group_count', (YLeaf(YType.uint32, 'group-count'), ['int'])),
                        ('is_disabled', (YLeaf(YType.boolean, 'is-disabled'), ['bool'])),
                        ('supported_interfaces', (YLeaf(YType.uint32, 'supported-interfaces'), ['int'])),
                        ('unsupported_interfaces', (YLeaf(YType.uint32, 'unsupported-interfaces'), ['int'])),
                        ('enabled_interface_count', (YLeaf(YType.uint32, 'enabled-interface-count'), ['int'])),
                        ('disabled_interface_count', (YLeaf(YType.uint32, 'disabled-interface-count'), ['int'])),
                        ('tunnel_mte_config_count', (YLeaf(YType.uint32, 'tunnel-mte-config-count'), ['int'])),
                        ('node_low_memory', (YLeaf(YType.boolean, 'node-low-memory'), ['bool'])),
                    ])
                    self.robustness = None
                    self.group_limit = None
                    self.group_count = None
                    self.is_disabled = None
                    self.supported_interfaces = None
                    self.unsupported_interfaces = None
                    self.enabled_interface_count = None
                    self.disabled_interface_count = None
                    self.tunnel_mte_config_count = None
                    self.node_low_memory = None

                    self.interface = YList(self)
                    self._segment_path = lambda: "summary"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/active/default-context/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Mld.Active.DefaultContext.Summary, ['robustness', 'group_limit', 'group_count', 'is_disabled', 'supported_interfaces', 'unsupported_interfaces', 'enabled_interface_count', 'disabled_interface_count', 'tunnel_mte_config_count', 'node_low_memory'], name, value)


                class Interface(_Entity_):
                    """
                    Maximum and current groups accepted for each
                    interface
                    
                    .. attribute:: interface_name
                    
                    	Interface
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: group_limit
                    
                    	Maximum groups accepted per interface
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: group_count
                    
                    	Current groups accepted per interface
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: parent_ifhandle
                    
                    	Parent if handle
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: on_off
                    
                    	Enabled/Disabled
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: time_since_last_query_in_seconds
                    
                    	Time elapsed since last query
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: time_since_last_report_in_seconds
                    
                    	Time elapsed since last report
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: router_uptime_in_seconds
                    
                    	Time elapsed since router enabled event
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Mld.Active.DefaultContext.Summary.Interface, self).__init__()

                        self.yang_name = "interface"
                        self.yang_parent_name = "summary"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                            ('group_limit', (YLeaf(YType.uint32, 'group-limit'), ['int'])),
                            ('group_count', (YLeaf(YType.uint32, 'group-count'), ['int'])),
                            ('parent_ifhandle', (YLeaf(YType.str, 'parent-ifhandle'), ['str'])),
                            ('on_off', (YLeaf(YType.boolean, 'on-off'), ['bool'])),
                            ('time_since_last_query_in_seconds', (YLeaf(YType.uint32, 'time-since-last-query-in-seconds'), ['int'])),
                            ('time_since_last_report_in_seconds', (YLeaf(YType.uint32, 'time-since-last-report-in-seconds'), ['int'])),
                            ('router_uptime_in_seconds', (YLeaf(YType.uint32, 'router-uptime-in-seconds'), ['int'])),
                        ])
                        self.interface_name = None
                        self.group_limit = None
                        self.group_count = None
                        self.parent_ifhandle = None
                        self.on_off = None
                        self.time_since_last_query_in_seconds = None
                        self.time_since_last_report_in_seconds = None
                        self.router_uptime_in_seconds = None
                        self._segment_path = lambda: "interface"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/active/default-context/summary/%s" % self._segment_path()
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Mld.Active.DefaultContext.Summary.Interface, ['interface_name', 'group_limit', 'group_count', 'parent_ifhandle', 'on_off', 'time_since_last_query_in_seconds', 'time_since_last_report_in_seconds', 'router_uptime_in_seconds'], name, value)

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Mld.Active.DefaultContext.Summary.Interface']['meta_info']

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Mld.Active.DefaultContext.Summary']['meta_info']


            class InterfaceStateOns(_Entity_):
                """
                IGMP Interface state on
                
                .. attribute:: interface_state_on
                
                	IGMP Interface
                	**type**\: list of  		 :py:class:`InterfaceStateOn <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.InterfaceStateOns.InterfaceStateOn>`
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Mld.Active.DefaultContext.InterfaceStateOns, self).__init__()

                    self.yang_name = "interface-state-ons"
                    self.yang_parent_name = "default-context"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("interface-state-on", ("interface_state_on", Mld.Active.DefaultContext.InterfaceStateOns.InterfaceStateOn))])
                    self._leafs = OrderedDict()

                    self.interface_state_on = YList(self)
                    self._segment_path = lambda: "interface-state-ons"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/active/default-context/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Mld.Active.DefaultContext.InterfaceStateOns, [], name, value)


                class InterfaceStateOn(_Entity_):
                    """
                    IGMP Interface
                    
                    .. attribute:: interface_name  (key)
                    
                    	Interface Name
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: address
                    
                    	IP address
                    	**type**\:  :py:class:`Address <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.InterfaceStateOns.InterfaceStateOn.Address>`
                    
                    	**config**\: False
                    
                    .. attribute:: querier_address
                    
                    	Address of the Querier
                    	**type**\:  :py:class:`QuerierAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.InterfaceStateOns.InterfaceStateOn.QuerierAddress>`
                    
                    	**config**\: False
                    
                    .. attribute:: subscriber_address
                    
                    	Address of subscriber
                    	**type**\:  :py:class:`SubscriberAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.InterfaceStateOns.InterfaceStateOn.SubscriberAddress>`
                    
                    	**config**\: False
                    
                    .. attribute:: interface_name_xr
                    
                    	Interface
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: state
                    
                    	Interface state
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: prefix_length
                    
                    	Prefix length
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_interface_up
                    
                    	Is interface up
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_ip_enabled
                    
                    	Is IP enabled
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_router_enabled
                    
                    	Is Router functionality enabled
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: igmp_version
                    
                    	IGMP Router version
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    	**config**\: False
                    
                    .. attribute:: host_version
                    
                    	IGMP Host version
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    	**config**\: False
                    
                    .. attribute:: query_interval
                    
                    	Query Interval value in seconds
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    	**units**\: second
                    
                    .. attribute:: query_timeout
                    
                    	Query Timeout value
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    .. attribute:: query_maximum_response_time
                    
                    	Max Response Timeout value
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    .. attribute:: last_member_query_interval
                    
                    	Last Member Query Interval
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    .. attribute:: group_joins
                    
                    	No. of group joins
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: group_leaves
                    
                    	No. of group leaves
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_querier
                    
                    	Are we querier
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: total_active_groups
                    
                    	Actual number of groups on interface
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: robustness
                    
                    	Robustness Variable value
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: proxy_interface
                    
                    	Proxy interface index
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: querier_uptime
                    
                    	Time since the last querier took over
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    .. attribute:: las_ll_registration_count
                    
                    	LAS reg count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_get_address_count
                    
                    	LAS get addr count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_update_count
                    
                    	LAS Update count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_ll_remove_update_count
                    
                    	LAS LL remove update count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_ll_add_update_count
                    
                    	LAS LL add update count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_null_update_count
                    
                    	LAS Null update count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_unregistration_count
                    
                    	LAS unreg count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_las_request
                    
                    	LAS req
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_las_registered
                    
                    	LAS registered
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: vrf_id
                    
                    	VRF id
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: mte_vrf_id
                    
                    	MTE VRF id
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: location
                    
                    	Location
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: mtu
                    
                    	MTU
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: vrf_state
                    
                    	Vrf State
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_configurationverify
                    
                    	CFG verify
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: configurationvrf_set
                    
                    	CFG vrf set
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: configurationvrf_error
                    
                    	CFG vrf error
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: configuration_mcast_vrf_set
                    
                    	Is mcast set
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: configuration_mcast_vrf_error
                    
                    	Is mcast error
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_im_state_registered
                    
                    	Im state registered
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_subscriber
                    
                    	Subscriber interface
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: subscriber_mode
                    
                    	Subscriber mode
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_identity_present
                    
                    	Subscriber ID or Address available from AAA
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: subscriber_id
                    
                    	ID string of subscriber
                    	**type**\: str
                    
                    	**length:** 0..257
                    
                    	**config**\: False
                    
                    .. attribute:: parent_ifhandle
                    
                    	Parent If Handle
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: time_since_last_query_in_seconds
                    
                    	Time elapsed since last query
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: time_since_last_report_in_seconds
                    
                    	Time elapsed since last report
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: router_uptime_in_seconds
                    
                    	Uptime since router enabled event
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: mte_tuple_count
                    
                    	MTE Tuple count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Mld.Active.DefaultContext.InterfaceStateOns.InterfaceStateOn, self).__init__()

                        self.yang_name = "interface-state-on"
                        self.yang_parent_name = "interface-state-ons"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['interface_name']
                        self._child_classes = OrderedDict([("address", ("address", Mld.Active.DefaultContext.InterfaceStateOns.InterfaceStateOn.Address)), ("querier-address", ("querier_address", Mld.Active.DefaultContext.InterfaceStateOns.InterfaceStateOn.QuerierAddress)), ("subscriber-address", ("subscriber_address", Mld.Active.DefaultContext.InterfaceStateOns.InterfaceStateOn.SubscriberAddress))])
                        self._leafs = OrderedDict([
                            ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                            ('interface_name_xr', (YLeaf(YType.str, 'interface-name-xr'), ['str'])),
                            ('state', (YLeaf(YType.uint32, 'state'), ['int'])),
                            ('prefix_length', (YLeaf(YType.uint32, 'prefix-length'), ['int'])),
                            ('is_interface_up', (YLeaf(YType.boolean, 'is-interface-up'), ['bool'])),
                            ('is_ip_enabled', (YLeaf(YType.boolean, 'is-ip-enabled'), ['bool'])),
                            ('is_router_enabled', (YLeaf(YType.boolean, 'is-router-enabled'), ['bool'])),
                            ('igmp_version', (YLeaf(YType.uint8, 'igmp-version'), ['int'])),
                            ('host_version', (YLeaf(YType.uint8, 'host-version'), ['int'])),
                            ('query_interval', (YLeaf(YType.uint16, 'query-interval'), ['int'])),
                            ('query_timeout', (YLeaf(YType.uint16, 'query-timeout'), ['int'])),
                            ('query_maximum_response_time', (YLeaf(YType.uint16, 'query-maximum-response-time'), ['int'])),
                            ('last_member_query_interval', (YLeaf(YType.uint16, 'last-member-query-interval'), ['int'])),
                            ('group_joins', (YLeaf(YType.uint32, 'group-joins'), ['int'])),
                            ('group_leaves', (YLeaf(YType.uint32, 'group-leaves'), ['int'])),
                            ('is_querier', (YLeaf(YType.boolean, 'is-querier'), ['bool'])),
                            ('total_active_groups', (YLeaf(YType.uint32, 'total-active-groups'), ['int'])),
                            ('robustness', (YLeaf(YType.uint32, 'robustness'), ['int'])),
                            ('proxy_interface', (YLeaf(YType.str, 'proxy-interface'), ['str'])),
                            ('querier_uptime', (YLeaf(YType.uint16, 'querier-uptime'), ['int'])),
                            ('las_ll_registration_count', (YLeaf(YType.uint32, 'las-ll-registration-count'), ['int'])),
                            ('las_get_address_count', (YLeaf(YType.uint32, 'las-get-address-count'), ['int'])),
                            ('las_update_count', (YLeaf(YType.uint32, 'las-update-count'), ['int'])),
                            ('las_ll_remove_update_count', (YLeaf(YType.uint32, 'las-ll-remove-update-count'), ['int'])),
                            ('las_ll_add_update_count', (YLeaf(YType.uint32, 'las-ll-add-update-count'), ['int'])),
                            ('las_null_update_count', (YLeaf(YType.uint32, 'las-null-update-count'), ['int'])),
                            ('las_unregistration_count', (YLeaf(YType.uint32, 'las-unregistration-count'), ['int'])),
                            ('is_las_request', (YLeaf(YType.boolean, 'is-las-request'), ['bool'])),
                            ('is_las_registered', (YLeaf(YType.boolean, 'is-las-registered'), ['bool'])),
                            ('vrf_id', (YLeaf(YType.uint32, 'vrf-id'), ['int'])),
                            ('mte_vrf_id', (YLeaf(YType.uint32, 'mte-vrf-id'), ['int'])),
                            ('location', (YLeaf(YType.uint32, 'location'), ['int'])),
                            ('mtu', (YLeaf(YType.uint32, 'mtu'), ['int'])),
                            ('vrf_state', (YLeaf(YType.uint32, 'vrf-state'), ['int'])),
                            ('is_configurationverify', (YLeaf(YType.boolean, 'is-configurationverify'), ['bool'])),
                            ('configurationvrf_set', (YLeaf(YType.boolean, 'configurationvrf-set'), ['bool'])),
                            ('configurationvrf_error', (YLeaf(YType.boolean, 'configurationvrf-error'), ['bool'])),
                            ('configuration_mcast_vrf_set', (YLeaf(YType.boolean, 'configuration-mcast-vrf-set'), ['bool'])),
                            ('configuration_mcast_vrf_error', (YLeaf(YType.boolean, 'configuration-mcast-vrf-error'), ['bool'])),
                            ('is_im_state_registered', (YLeaf(YType.boolean, 'is-im-state-registered'), ['bool'])),
                            ('is_subscriber', (YLeaf(YType.boolean, 'is-subscriber'), ['bool'])),
                            ('subscriber_mode', (YLeaf(YType.uint32, 'subscriber-mode'), ['int'])),
                            ('is_identity_present', (YLeaf(YType.boolean, 'is-identity-present'), ['bool'])),
                            ('subscriber_id', (YLeaf(YType.str, 'subscriber-id'), ['str'])),
                            ('parent_ifhandle', (YLeaf(YType.str, 'parent-ifhandle'), ['str'])),
                            ('time_since_last_query_in_seconds', (YLeaf(YType.uint32, 'time-since-last-query-in-seconds'), ['int'])),
                            ('time_since_last_report_in_seconds', (YLeaf(YType.uint32, 'time-since-last-report-in-seconds'), ['int'])),
                            ('router_uptime_in_seconds', (YLeaf(YType.uint32, 'router-uptime-in-seconds'), ['int'])),
                            ('mte_tuple_count', (YLeaf(YType.uint32, 'mte-tuple-count'), ['int'])),
                        ])
                        self.interface_name = None
                        self.interface_name_xr = None
                        self.state = None
                        self.prefix_length = None
                        self.is_interface_up = None
                        self.is_ip_enabled = None
                        self.is_router_enabled = None
                        self.igmp_version = None
                        self.host_version = None
                        self.query_interval = None
                        self.query_timeout = None
                        self.query_maximum_response_time = None
                        self.last_member_query_interval = None
                        self.group_joins = None
                        self.group_leaves = None
                        self.is_querier = None
                        self.total_active_groups = None
                        self.robustness = None
                        self.proxy_interface = None
                        self.querier_uptime = None
                        self.las_ll_registration_count = None
                        self.las_get_address_count = None
                        self.las_update_count = None
                        self.las_ll_remove_update_count = None
                        self.las_ll_add_update_count = None
                        self.las_null_update_count = None
                        self.las_unregistration_count = None
                        self.is_las_request = None
                        self.is_las_registered = None
                        self.vrf_id = None
                        self.mte_vrf_id = None
                        self.location = None
                        self.mtu = None
                        self.vrf_state = None
                        self.is_configurationverify = None
                        self.configurationvrf_set = None
                        self.configurationvrf_error = None
                        self.configuration_mcast_vrf_set = None
                        self.configuration_mcast_vrf_error = None
                        self.is_im_state_registered = None
                        self.is_subscriber = None
                        self.subscriber_mode = None
                        self.is_identity_present = None
                        self.subscriber_id = None
                        self.parent_ifhandle = None
                        self.time_since_last_query_in_seconds = None
                        self.time_since_last_report_in_seconds = None
                        self.router_uptime_in_seconds = None
                        self.mte_tuple_count = None

                        self.address = Mld.Active.DefaultContext.InterfaceStateOns.InterfaceStateOn.Address()
                        self.address.parent = self
                        self._children_name_map["address"] = "address"

                        self.querier_address = Mld.Active.DefaultContext.InterfaceStateOns.InterfaceStateOn.QuerierAddress()
                        self.querier_address.parent = self
                        self._children_name_map["querier_address"] = "querier-address"

                        self.subscriber_address = Mld.Active.DefaultContext.InterfaceStateOns.InterfaceStateOn.SubscriberAddress()
                        self.subscriber_address.parent = self
                        self._children_name_map["subscriber_address"] = "subscriber-address"
                        self._segment_path = lambda: "interface-state-on" + "[interface-name='" + str(self.interface_name) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/active/default-context/interface-state-ons/%s" % self._segment_path()
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Mld.Active.DefaultContext.InterfaceStateOns.InterfaceStateOn, ['interface_name', 'interface_name_xr', 'state', 'prefix_length', 'is_interface_up', 'is_ip_enabled', 'is_router_enabled', 'igmp_version', 'host_version', 'query_interval', 'query_timeout', 'query_maximum_response_time', 'last_member_query_interval', 'group_joins', 'group_leaves', 'is_querier', 'total_active_groups', 'robustness', 'proxy_interface', 'querier_uptime', 'las_ll_registration_count', 'las_get_address_count', 'las_update_count', 'las_ll_remove_update_count', 'las_ll_add_update_count', 'las_null_update_count', 'las_unregistration_count', 'is_las_request', 'is_las_registered', 'vrf_id', 'mte_vrf_id', 'location', 'mtu', 'vrf_state', 'is_configurationverify', 'configurationvrf_set', 'configurationvrf_error', 'configuration_mcast_vrf_set', 'configuration_mcast_vrf_error', 'is_im_state_registered', 'is_subscriber', 'subscriber_mode', 'is_identity_present', 'subscriber_id', 'parent_ifhandle', 'time_since_last_query_in_seconds', 'time_since_last_report_in_seconds', 'router_uptime_in_seconds', 'mte_tuple_count'], name, value)


                    class Address(_Entity_):
                        """
                        IP address
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Active.DefaultContext.InterfaceStateOns.InterfaceStateOn.Address, self).__init__()

                            self.yang_name = "address"
                            self.yang_parent_name = "interface-state-on"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "address"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Active.DefaultContext.InterfaceStateOns.InterfaceStateOn.Address, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Active.DefaultContext.InterfaceStateOns.InterfaceStateOn.Address']['meta_info']


                    class QuerierAddress(_Entity_):
                        """
                        Address of the Querier
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Active.DefaultContext.InterfaceStateOns.InterfaceStateOn.QuerierAddress, self).__init__()

                            self.yang_name = "querier-address"
                            self.yang_parent_name = "interface-state-on"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "querier-address"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Active.DefaultContext.InterfaceStateOns.InterfaceStateOn.QuerierAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Active.DefaultContext.InterfaceStateOns.InterfaceStateOn.QuerierAddress']['meta_info']


                    class SubscriberAddress(_Entity_):
                        """
                        Address of subscriber
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Active.DefaultContext.InterfaceStateOns.InterfaceStateOn.SubscriberAddress, self).__init__()

                            self.yang_name = "subscriber-address"
                            self.yang_parent_name = "interface-state-on"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "subscriber-address"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Active.DefaultContext.InterfaceStateOns.InterfaceStateOn.SubscriberAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Active.DefaultContext.InterfaceStateOns.InterfaceStateOn.SubscriberAddress']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Mld.Active.DefaultContext.InterfaceStateOns.InterfaceStateOn']['meta_info']

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Mld.Active.DefaultContext.InterfaceStateOns']['meta_info']


            class DetailGroups(_Entity_):
                """
                IGMP Detail Group Database
                
                .. attribute:: detail_group
                
                	IGMP Detail Group Entry Information
                	**type**\: list of  		 :py:class:`DetailGroup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.DetailGroups.DetailGroup>`
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Mld.Active.DefaultContext.DetailGroups, self).__init__()

                    self.yang_name = "detail-groups"
                    self.yang_parent_name = "default-context"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("detail-group", ("detail_group", Mld.Active.DefaultContext.DetailGroups.DetailGroup))])
                    self._leafs = OrderedDict()

                    self.detail_group = YList(self)
                    self._segment_path = lambda: "detail-groups"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/active/default-context/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Mld.Active.DefaultContext.DetailGroups, [], name, value)


                class DetailGroup(_Entity_):
                    """
                    IGMP Detail Group Entry Information
                    
                    .. attribute:: group_address
                    
                    	Group Address
                    	**type**\: union of the below types:
                    
                    		**type**\: str
                    
                    			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    		**type**\: str
                    
                    			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    	**config**\: False
                    
                    .. attribute:: interface_name
                    
                    	Interface Name
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: source_address
                    
                    	Source/Host Address
                    	**type**\: union of the below types:
                    
                    		**type**\: str
                    
                    			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    		**type**\: str
                    
                    			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    	**config**\: False
                    
                    .. attribute:: group_info
                    
                    	Basic Group information
                    	**type**\:  :py:class:`GroupInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.DetailGroups.DetailGroup.GroupInfo>`
                    
                    	**config**\: False
                    
                    .. attribute:: is_router_exclude_mode
                    
                    	Group router filter mode
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_host_exclude_mode
                    
                    	Group host filter mode
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: source
                    
                    	List of sources
                    	**type**\: list of  		 :py:class:`Source <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.DetailGroups.DetailGroup.Source>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Mld.Active.DefaultContext.DetailGroups.DetailGroup, self).__init__()

                        self.yang_name = "detail-group"
                        self.yang_parent_name = "detail-groups"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("group-info", ("group_info", Mld.Active.DefaultContext.DetailGroups.DetailGroup.GroupInfo)), ("source", ("source", Mld.Active.DefaultContext.DetailGroups.DetailGroup.Source))])
                        self._leafs = OrderedDict([
                            ('group_address', (YLeaf(YType.str, 'group-address'), ['str','str'])),
                            ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                            ('source_address', (YLeaf(YType.str, 'source-address'), ['str','str'])),
                            ('is_router_exclude_mode', (YLeaf(YType.boolean, 'is-router-exclude-mode'), ['bool'])),
                            ('is_host_exclude_mode', (YLeaf(YType.boolean, 'is-host-exclude-mode'), ['bool'])),
                        ])
                        self.group_address = None
                        self.interface_name = None
                        self.source_address = None
                        self.is_router_exclude_mode = None
                        self.is_host_exclude_mode = None

                        self.group_info = Mld.Active.DefaultContext.DetailGroups.DetailGroup.GroupInfo()
                        self.group_info.parent = self
                        self._children_name_map["group_info"] = "group-info"

                        self.source = YList(self)
                        self._segment_path = lambda: "detail-group"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/active/default-context/detail-groups/%s" % self._segment_path()
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Mld.Active.DefaultContext.DetailGroups.DetailGroup, ['group_address', 'interface_name', 'source_address', 'is_router_exclude_mode', 'is_host_exclude_mode'], name, value)


                    class GroupInfo(_Entity_):
                        """
                        Basic Group information
                        
                        .. attribute:: group_address_xr
                        
                        	Group Address
                        	**type**\:  :py:class:`GroupAddressXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.DetailGroups.DetailGroup.GroupInfo.GroupAddressXr>`
                        
                        	**config**\: False
                        
                        .. attribute:: last_reporter
                        
                        	Last reporter address
                        	**type**\:  :py:class:`LastReporter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.DetailGroups.DetailGroup.GroupInfo.LastReporter>`
                        
                        	**config**\: False
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\:  :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.DetailGroups.DetailGroup.GroupInfo.SourceAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: interface_name_xr
                        
                        	Interface
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: uptime
                        
                        	Uptime in seconds
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        	**config**\: False
                        
                        	**units**\: second
                        
                        .. attribute:: expiration_time
                        
                        	Expiration time in seconds
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        	**config**\: False
                        
                        	**units**\: second
                        
                        .. attribute:: explicit_tracking_enabled
                        
                        	Is explicit tracking enabled
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_self_join
                        
                        	If local system is member of this group on this interface
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: row_status
                        
                        	interface on or off for the group
                        	**type**\: str
                        
                        	**length:** 0..16
                        
                        	**config**\: False
                        
                        .. attribute:: is_low_memory
                        
                        	Node is running low on memory
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: router_filter_mode
                        
                        	Filter mode
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        	**config**\: False
                        
                        .. attribute:: older_host_version1_timer
                        
                        	IGMP Hostversion1timer
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: older_host_version2_timer
                        
                        	IGMP Hostversion2timer
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_added
                        
                        	Joined
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_suppressed
                        
                        	Suppressed
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Active.DefaultContext.DetailGroups.DetailGroup.GroupInfo, self).__init__()

                            self.yang_name = "group-info"
                            self.yang_parent_name = "detail-group"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("group-address-xr", ("group_address_xr", Mld.Active.DefaultContext.DetailGroups.DetailGroup.GroupInfo.GroupAddressXr)), ("last-reporter", ("last_reporter", Mld.Active.DefaultContext.DetailGroups.DetailGroup.GroupInfo.LastReporter)), ("source-address", ("source_address", Mld.Active.DefaultContext.DetailGroups.DetailGroup.GroupInfo.SourceAddress))])
                            self._leafs = OrderedDict([
                                ('interface_name_xr', (YLeaf(YType.str, 'interface-name-xr'), ['str'])),
                                ('uptime', (YLeaf(YType.uint64, 'uptime'), ['int'])),
                                ('expiration_time', (YLeaf(YType.int32, 'expiration-time'), ['int'])),
                                ('explicit_tracking_enabled', (YLeaf(YType.boolean, 'explicit-tracking-enabled'), ['bool'])),
                                ('is_self_join', (YLeaf(YType.boolean, 'is-self-join'), ['bool'])),
                                ('row_status', (YLeaf(YType.str, 'row-status'), ['str'])),
                                ('is_low_memory', (YLeaf(YType.boolean, 'is-low-memory'), ['bool'])),
                                ('router_filter_mode', (YLeaf(YType.uint8, 'router-filter-mode'), ['int'])),
                                ('older_host_version1_timer', (YLeaf(YType.uint32, 'older-host-version1-timer'), ['int'])),
                                ('older_host_version2_timer', (YLeaf(YType.uint32, 'older-host-version2-timer'), ['int'])),
                                ('is_added', (YLeaf(YType.boolean, 'is-added'), ['bool'])),
                                ('is_suppressed', (YLeaf(YType.boolean, 'is-suppressed'), ['bool'])),
                            ])
                            self.interface_name_xr = None
                            self.uptime = None
                            self.expiration_time = None
                            self.explicit_tracking_enabled = None
                            self.is_self_join = None
                            self.row_status = None
                            self.is_low_memory = None
                            self.router_filter_mode = None
                            self.older_host_version1_timer = None
                            self.older_host_version2_timer = None
                            self.is_added = None
                            self.is_suppressed = None

                            self.group_address_xr = Mld.Active.DefaultContext.DetailGroups.DetailGroup.GroupInfo.GroupAddressXr()
                            self.group_address_xr.parent = self
                            self._children_name_map["group_address_xr"] = "group-address-xr"

                            self.last_reporter = Mld.Active.DefaultContext.DetailGroups.DetailGroup.GroupInfo.LastReporter()
                            self.last_reporter.parent = self
                            self._children_name_map["last_reporter"] = "last-reporter"

                            self.source_address = Mld.Active.DefaultContext.DetailGroups.DetailGroup.GroupInfo.SourceAddress()
                            self.source_address.parent = self
                            self._children_name_map["source_address"] = "source-address"
                            self._segment_path = lambda: "group-info"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/active/default-context/detail-groups/detail-group/%s" % self._segment_path()
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Active.DefaultContext.DetailGroups.DetailGroup.GroupInfo, ['interface_name_xr', 'uptime', 'expiration_time', 'explicit_tracking_enabled', 'is_self_join', 'row_status', 'is_low_memory', 'router_filter_mode', 'older_host_version1_timer', 'older_host_version2_timer', 'is_added', 'is_suppressed'], name, value)


                        class GroupAddressXr(_Entity_):
                            """
                            Group Address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Active.DefaultContext.DetailGroups.DetailGroup.GroupInfo.GroupAddressXr, self).__init__()

                                self.yang_name = "group-address-xr"
                                self.yang_parent_name = "group-info"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "group-address-xr"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/active/default-context/detail-groups/detail-group/group-info/%s" % self._segment_path()
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Active.DefaultContext.DetailGroups.DetailGroup.GroupInfo.GroupAddressXr, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Active.DefaultContext.DetailGroups.DetailGroup.GroupInfo.GroupAddressXr']['meta_info']


                        class LastReporter(_Entity_):
                            """
                            Last reporter address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Active.DefaultContext.DetailGroups.DetailGroup.GroupInfo.LastReporter, self).__init__()

                                self.yang_name = "last-reporter"
                                self.yang_parent_name = "group-info"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "last-reporter"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/active/default-context/detail-groups/detail-group/group-info/%s" % self._segment_path()
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Active.DefaultContext.DetailGroups.DetailGroup.GroupInfo.LastReporter, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Active.DefaultContext.DetailGroups.DetailGroup.GroupInfo.LastReporter']['meta_info']


                        class SourceAddress(_Entity_):
                            """
                            Source Address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Active.DefaultContext.DetailGroups.DetailGroup.GroupInfo.SourceAddress, self).__init__()

                                self.yang_name = "source-address"
                                self.yang_parent_name = "group-info"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "source-address"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/active/default-context/detail-groups/detail-group/group-info/%s" % self._segment_path()
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Active.DefaultContext.DetailGroups.DetailGroup.GroupInfo.SourceAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Active.DefaultContext.DetailGroups.DetailGroup.GroupInfo.SourceAddress']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Active.DefaultContext.DetailGroups.DetailGroup.GroupInfo']['meta_info']


                    class Source(_Entity_):
                        """
                        List of sources
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\:  :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.DetailGroups.DetailGroup.Source.SourceAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: uptime
                        
                        	Uptime in seconds
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        	**config**\: False
                        
                        	**units**\: second
                        
                        .. attribute:: expiration_time
                        
                        	Expiration time in seconds
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        	**config**\: False
                        
                        	**units**\: second
                        
                        .. attribute:: is_local
                        
                        	Is this a local source
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_remote
                        
                        	Is this a remote source
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_forward
                        
                        	Should we forward on this entry
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_we_report
                        
                        	Should we report the source
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: flags
                        
                        	Source flags
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        	**config**\: False
                        
                        .. attribute:: is_added
                        
                        	Joined
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Active.DefaultContext.DetailGroups.DetailGroup.Source, self).__init__()

                            self.yang_name = "source"
                            self.yang_parent_name = "detail-group"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("source-address", ("source_address", Mld.Active.DefaultContext.DetailGroups.DetailGroup.Source.SourceAddress))])
                            self._leafs = OrderedDict([
                                ('uptime', (YLeaf(YType.uint64, 'uptime'), ['int'])),
                                ('expiration_time', (YLeaf(YType.int32, 'expiration-time'), ['int'])),
                                ('is_local', (YLeaf(YType.boolean, 'is-local'), ['bool'])),
                                ('is_remote', (YLeaf(YType.boolean, 'is-remote'), ['bool'])),
                                ('is_forward', (YLeaf(YType.boolean, 'is-forward'), ['bool'])),
                                ('is_we_report', (YLeaf(YType.boolean, 'is-we-report'), ['bool'])),
                                ('flags', (YLeaf(YType.int32, 'flags'), ['int'])),
                                ('is_added', (YLeaf(YType.boolean, 'is-added'), ['bool'])),
                            ])
                            self.uptime = None
                            self.expiration_time = None
                            self.is_local = None
                            self.is_remote = None
                            self.is_forward = None
                            self.is_we_report = None
                            self.flags = None
                            self.is_added = None

                            self.source_address = Mld.Active.DefaultContext.DetailGroups.DetailGroup.Source.SourceAddress()
                            self.source_address.parent = self
                            self._children_name_map["source_address"] = "source-address"
                            self._segment_path = lambda: "source"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/active/default-context/detail-groups/detail-group/%s" % self._segment_path()
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Active.DefaultContext.DetailGroups.DetailGroup.Source, ['uptime', 'expiration_time', 'is_local', 'is_remote', 'is_forward', 'is_we_report', 'flags', 'is_added'], name, value)


                        class SourceAddress(_Entity_):
                            """
                            Source Address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Active.DefaultContext.DetailGroups.DetailGroup.Source.SourceAddress, self).__init__()

                                self.yang_name = "source-address"
                                self.yang_parent_name = "source"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "source-address"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/active/default-context/detail-groups/detail-group/source/%s" % self._segment_path()
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Active.DefaultContext.DetailGroups.DetailGroup.Source.SourceAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Active.DefaultContext.DetailGroups.DetailGroup.Source.SourceAddress']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Active.DefaultContext.DetailGroups.DetailGroup.Source']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Mld.Active.DefaultContext.DetailGroups.DetailGroup']['meta_info']

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Mld.Active.DefaultContext.DetailGroups']['meta_info']


            class NonActiveGroups(_Entity_):
                """
                IGMP Non\-Active Groups Information
                
                .. attribute:: non_active_groups
                
                	List of non\-active groups
                	**type**\: list of  		 :py:class:`NonActiveGroups_ <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.NonActiveGroups.NonActiveGroups_>`
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Mld.Active.DefaultContext.NonActiveGroups, self).__init__()

                    self.yang_name = "non-active-groups"
                    self.yang_parent_name = "default-context"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("non-active-groups", ("non_active_groups", Mld.Active.DefaultContext.NonActiveGroups.NonActiveGroups_))])
                    self._leafs = OrderedDict()

                    self.non_active_groups = YList(self)
                    self._segment_path = lambda: "non-active-groups"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/active/default-context/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Mld.Active.DefaultContext.NonActiveGroups, [], name, value)


                class NonActiveGroups_(_Entity_):
                    """
                    List of non\-active groups
                    
                    .. attribute:: group_address
                    
                    	Group Address
                    	**type**\:  :py:class:`GroupAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.NonActiveGroups.NonActiveGroups_.GroupAddress>`
                    
                    	**config**\: False
                    
                    .. attribute:: source_address
                    
                    	Source Address
                    	**type**\:  :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.NonActiveGroups.NonActiveGroups_.SourceAddress>`
                    
                    	**config**\: False
                    
                    .. attribute:: interface
                    
                    	Interface Name
                    	**type**\: str
                    
                    	**length:** 0..65
                    
                    	**config**\: False
                    
                    .. attribute:: reason_for_non_activity
                    
                    	Reason for group join not being processed
                    	**type**\: str
                    
                    	**length:** 0..257
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Mld.Active.DefaultContext.NonActiveGroups.NonActiveGroups_, self).__init__()

                        self.yang_name = "non-active-groups"
                        self.yang_parent_name = "non-active-groups"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("group-address", ("group_address", Mld.Active.DefaultContext.NonActiveGroups.NonActiveGroups_.GroupAddress)), ("source-address", ("source_address", Mld.Active.DefaultContext.NonActiveGroups.NonActiveGroups_.SourceAddress))])
                        self._leafs = OrderedDict([
                            ('interface', (YLeaf(YType.str, 'interface'), ['str'])),
                            ('reason_for_non_activity', (YLeaf(YType.str, 'reason-for-non-activity'), ['str'])),
                        ])
                        self.interface = None
                        self.reason_for_non_activity = None

                        self.group_address = Mld.Active.DefaultContext.NonActiveGroups.NonActiveGroups_.GroupAddress()
                        self.group_address.parent = self
                        self._children_name_map["group_address"] = "group-address"

                        self.source_address = Mld.Active.DefaultContext.NonActiveGroups.NonActiveGroups_.SourceAddress()
                        self.source_address.parent = self
                        self._children_name_map["source_address"] = "source-address"
                        self._segment_path = lambda: "non-active-groups"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/active/default-context/non-active-groups/%s" % self._segment_path()
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Mld.Active.DefaultContext.NonActiveGroups.NonActiveGroups_, ['interface', 'reason_for_non_activity'], name, value)


                    class GroupAddress(_Entity_):
                        """
                        Group Address
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Active.DefaultContext.NonActiveGroups.NonActiveGroups_.GroupAddress, self).__init__()

                            self.yang_name = "group-address"
                            self.yang_parent_name = "non-active-groups"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "group-address"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/active/default-context/non-active-groups/non-active-groups/%s" % self._segment_path()
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Active.DefaultContext.NonActiveGroups.NonActiveGroups_.GroupAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Active.DefaultContext.NonActiveGroups.NonActiveGroups_.GroupAddress']['meta_info']


                    class SourceAddress(_Entity_):
                        """
                        Source Address
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Active.DefaultContext.NonActiveGroups.NonActiveGroups_.SourceAddress, self).__init__()

                            self.yang_name = "source-address"
                            self.yang_parent_name = "non-active-groups"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "source-address"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/active/default-context/non-active-groups/non-active-groups/%s" % self._segment_path()
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Active.DefaultContext.NonActiveGroups.NonActiveGroups_.SourceAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Active.DefaultContext.NonActiveGroups.NonActiveGroups_.SourceAddress']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Mld.Active.DefaultContext.NonActiveGroups.NonActiveGroups_']['meta_info']

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Mld.Active.DefaultContext.NonActiveGroups']['meta_info']


            class SsmMaps(_Entity_):
                """
                SSM Map Table
                
                .. attribute:: ssm_map
                
                	SSM Map information
                	**type**\: list of  		 :py:class:`SsmMap <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.SsmMaps.SsmMap>`
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Mld.Active.DefaultContext.SsmMaps, self).__init__()

                    self.yang_name = "ssm-maps"
                    self.yang_parent_name = "default-context"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("ssm-map", ("ssm_map", Mld.Active.DefaultContext.SsmMaps.SsmMap))])
                    self._leafs = OrderedDict()

                    self.ssm_map = YList(self)
                    self._segment_path = lambda: "ssm-maps"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/active/default-context/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Mld.Active.DefaultContext.SsmMaps, [], name, value)


                class SsmMap(_Entity_):
                    """
                    SSM Map information
                    
                    .. attribute:: ssm_map_type
                    
                    	SSM Map Type
                    	**type**\:  :py:class:`IgmpssmMap <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpssmMap>`
                    
                    	**config**\: False
                    
                    .. attribute:: group_address
                    
                    	Group address
                    	**type**\: union of the below types:
                    
                    		**type**\: str
                    
                    			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    		**type**\: str
                    
                    			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    	**config**\: False
                    
                    .. attribute:: group_address_xr
                    
                    	Group Address
                    	**type**\:  :py:class:`GroupAddressXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.SsmMaps.SsmMap.GroupAddressXr>`
                    
                    	**config**\: False
                    
                    .. attribute:: map_type
                    
                    	Map Type of group
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: source_counts
                    
                    	Count of Sources
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Mld.Active.DefaultContext.SsmMaps.SsmMap, self).__init__()

                        self.yang_name = "ssm-map"
                        self.yang_parent_name = "ssm-maps"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("group-address-xr", ("group_address_xr", Mld.Active.DefaultContext.SsmMaps.SsmMap.GroupAddressXr))])
                        self._leafs = OrderedDict([
                            ('ssm_map_type', (YLeaf(YType.enumeration, 'ssm-map-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpssmMap', '')])),
                            ('group_address', (YLeaf(YType.str, 'group-address'), ['str','str'])),
                            ('map_type', (YLeaf(YType.uint32, 'map-type'), ['int'])),
                            ('source_counts', (YLeaf(YType.uint32, 'source-counts'), ['int'])),
                        ])
                        self.ssm_map_type = None
                        self.group_address = None
                        self.map_type = None
                        self.source_counts = None

                        self.group_address_xr = Mld.Active.DefaultContext.SsmMaps.SsmMap.GroupAddressXr()
                        self.group_address_xr.parent = self
                        self._children_name_map["group_address_xr"] = "group-address-xr"
                        self._segment_path = lambda: "ssm-map"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/active/default-context/ssm-maps/%s" % self._segment_path()
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Mld.Active.DefaultContext.SsmMaps.SsmMap, ['ssm_map_type', 'group_address', 'map_type', 'source_counts'], name, value)


                    class GroupAddressXr(_Entity_):
                        """
                        Group Address
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Active.DefaultContext.SsmMaps.SsmMap.GroupAddressXr, self).__init__()

                            self.yang_name = "group-address-xr"
                            self.yang_parent_name = "ssm-map"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "group-address-xr"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/active/default-context/ssm-maps/ssm-map/%s" % self._segment_path()
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Active.DefaultContext.SsmMaps.SsmMap.GroupAddressXr, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Active.DefaultContext.SsmMaps.SsmMap.GroupAddressXr']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Mld.Active.DefaultContext.SsmMaps.SsmMap']['meta_info']

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Mld.Active.DefaultContext.SsmMaps']['meta_info']


            class ExplicitGroups(_Entity_):
                """
                IGMP Explicit Group Database
                
                .. attribute:: explicit_group
                
                	IGMP Explicit Group Entry Information
                	**type**\: list of  		 :py:class:`ExplicitGroup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.ExplicitGroups.ExplicitGroup>`
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Mld.Active.DefaultContext.ExplicitGroups, self).__init__()

                    self.yang_name = "explicit-groups"
                    self.yang_parent_name = "default-context"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("explicit-group", ("explicit_group", Mld.Active.DefaultContext.ExplicitGroups.ExplicitGroup))])
                    self._leafs = OrderedDict()

                    self.explicit_group = YList(self)
                    self._segment_path = lambda: "explicit-groups"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/active/default-context/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Mld.Active.DefaultContext.ExplicitGroups, [], name, value)


                class ExplicitGroup(_Entity_):
                    """
                    IGMP Explicit Group Entry Information
                    
                    .. attribute:: group_address
                    
                    	Group Address
                    	**type**\: union of the below types:
                    
                    		**type**\: str
                    
                    			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    		**type**\: str
                    
                    			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    	**config**\: False
                    
                    .. attribute:: interface_name
                    
                    	Interface Name
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: source_address
                    
                    	Source/Host Address
                    	**type**\: union of the below types:
                    
                    		**type**\: str
                    
                    			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    		**type**\: str
                    
                    			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    	**config**\: False
                    
                    .. attribute:: group_info
                    
                    	Basic Group information
                    	**type**\:  :py:class:`GroupInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo>`
                    
                    	**config**\: False
                    
                    .. attribute:: include_hosts
                    
                    	No. of hosts who are included
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: exclude_hosts
                    
                    	No. of hosts who are excluded
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: host
                    
                    	List of hosts
                    	**type**\: list of  		 :py:class:`Host <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.ExplicitGroups.ExplicitGroup.Host>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Mld.Active.DefaultContext.ExplicitGroups.ExplicitGroup, self).__init__()

                        self.yang_name = "explicit-group"
                        self.yang_parent_name = "explicit-groups"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("group-info", ("group_info", Mld.Active.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo)), ("host", ("host", Mld.Active.DefaultContext.ExplicitGroups.ExplicitGroup.Host))])
                        self._leafs = OrderedDict([
                            ('group_address', (YLeaf(YType.str, 'group-address'), ['str','str'])),
                            ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                            ('source_address', (YLeaf(YType.str, 'source-address'), ['str','str'])),
                            ('include_hosts', (YLeaf(YType.uint32, 'include-hosts'), ['int'])),
                            ('exclude_hosts', (YLeaf(YType.uint32, 'exclude-hosts'), ['int'])),
                        ])
                        self.group_address = None
                        self.interface_name = None
                        self.source_address = None
                        self.include_hosts = None
                        self.exclude_hosts = None

                        self.group_info = Mld.Active.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo()
                        self.group_info.parent = self
                        self._children_name_map["group_info"] = "group-info"

                        self.host = YList(self)
                        self._segment_path = lambda: "explicit-group"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/active/default-context/explicit-groups/%s" % self._segment_path()
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Mld.Active.DefaultContext.ExplicitGroups.ExplicitGroup, ['group_address', 'interface_name', 'source_address', 'include_hosts', 'exclude_hosts'], name, value)


                    class GroupInfo(_Entity_):
                        """
                        Basic Group information
                        
                        .. attribute:: group_address_xr
                        
                        	Group Address
                        	**type**\:  :py:class:`GroupAddressXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.GroupAddressXr>`
                        
                        	**config**\: False
                        
                        .. attribute:: last_reporter
                        
                        	Last reporter address
                        	**type**\:  :py:class:`LastReporter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.LastReporter>`
                        
                        	**config**\: False
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\:  :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.SourceAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: interface_name_xr
                        
                        	Interface
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: uptime
                        
                        	Uptime in seconds
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        	**config**\: False
                        
                        	**units**\: second
                        
                        .. attribute:: expiration_time
                        
                        	Expiration time in seconds
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        	**config**\: False
                        
                        	**units**\: second
                        
                        .. attribute:: explicit_tracking_enabled
                        
                        	Is explicit tracking enabled
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_self_join
                        
                        	If local system is member of this group on this interface
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: row_status
                        
                        	interface on or off for the group
                        	**type**\: str
                        
                        	**length:** 0..16
                        
                        	**config**\: False
                        
                        .. attribute:: is_low_memory
                        
                        	Node is running low on memory
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: router_filter_mode
                        
                        	Filter mode
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        	**config**\: False
                        
                        .. attribute:: older_host_version1_timer
                        
                        	IGMP Hostversion1timer
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: older_host_version2_timer
                        
                        	IGMP Hostversion2timer
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_added
                        
                        	Joined
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_suppressed
                        
                        	Suppressed
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Active.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo, self).__init__()

                            self.yang_name = "group-info"
                            self.yang_parent_name = "explicit-group"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("group-address-xr", ("group_address_xr", Mld.Active.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.GroupAddressXr)), ("last-reporter", ("last_reporter", Mld.Active.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.LastReporter)), ("source-address", ("source_address", Mld.Active.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.SourceAddress))])
                            self._leafs = OrderedDict([
                                ('interface_name_xr', (YLeaf(YType.str, 'interface-name-xr'), ['str'])),
                                ('uptime', (YLeaf(YType.uint64, 'uptime'), ['int'])),
                                ('expiration_time', (YLeaf(YType.int32, 'expiration-time'), ['int'])),
                                ('explicit_tracking_enabled', (YLeaf(YType.boolean, 'explicit-tracking-enabled'), ['bool'])),
                                ('is_self_join', (YLeaf(YType.boolean, 'is-self-join'), ['bool'])),
                                ('row_status', (YLeaf(YType.str, 'row-status'), ['str'])),
                                ('is_low_memory', (YLeaf(YType.boolean, 'is-low-memory'), ['bool'])),
                                ('router_filter_mode', (YLeaf(YType.uint8, 'router-filter-mode'), ['int'])),
                                ('older_host_version1_timer', (YLeaf(YType.uint32, 'older-host-version1-timer'), ['int'])),
                                ('older_host_version2_timer', (YLeaf(YType.uint32, 'older-host-version2-timer'), ['int'])),
                                ('is_added', (YLeaf(YType.boolean, 'is-added'), ['bool'])),
                                ('is_suppressed', (YLeaf(YType.boolean, 'is-suppressed'), ['bool'])),
                            ])
                            self.interface_name_xr = None
                            self.uptime = None
                            self.expiration_time = None
                            self.explicit_tracking_enabled = None
                            self.is_self_join = None
                            self.row_status = None
                            self.is_low_memory = None
                            self.router_filter_mode = None
                            self.older_host_version1_timer = None
                            self.older_host_version2_timer = None
                            self.is_added = None
                            self.is_suppressed = None

                            self.group_address_xr = Mld.Active.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.GroupAddressXr()
                            self.group_address_xr.parent = self
                            self._children_name_map["group_address_xr"] = "group-address-xr"

                            self.last_reporter = Mld.Active.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.LastReporter()
                            self.last_reporter.parent = self
                            self._children_name_map["last_reporter"] = "last-reporter"

                            self.source_address = Mld.Active.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.SourceAddress()
                            self.source_address.parent = self
                            self._children_name_map["source_address"] = "source-address"
                            self._segment_path = lambda: "group-info"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/active/default-context/explicit-groups/explicit-group/%s" % self._segment_path()
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Active.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo, ['interface_name_xr', 'uptime', 'expiration_time', 'explicit_tracking_enabled', 'is_self_join', 'row_status', 'is_low_memory', 'router_filter_mode', 'older_host_version1_timer', 'older_host_version2_timer', 'is_added', 'is_suppressed'], name, value)


                        class GroupAddressXr(_Entity_):
                            """
                            Group Address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Active.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.GroupAddressXr, self).__init__()

                                self.yang_name = "group-address-xr"
                                self.yang_parent_name = "group-info"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "group-address-xr"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/active/default-context/explicit-groups/explicit-group/group-info/%s" % self._segment_path()
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Active.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.GroupAddressXr, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Active.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.GroupAddressXr']['meta_info']


                        class LastReporter(_Entity_):
                            """
                            Last reporter address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Active.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.LastReporter, self).__init__()

                                self.yang_name = "last-reporter"
                                self.yang_parent_name = "group-info"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "last-reporter"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/active/default-context/explicit-groups/explicit-group/group-info/%s" % self._segment_path()
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Active.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.LastReporter, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Active.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.LastReporter']['meta_info']


                        class SourceAddress(_Entity_):
                            """
                            Source Address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Active.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.SourceAddress, self).__init__()

                                self.yang_name = "source-address"
                                self.yang_parent_name = "group-info"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "source-address"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/active/default-context/explicit-groups/explicit-group/group-info/%s" % self._segment_path()
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Active.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.SourceAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Active.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.SourceAddress']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Active.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo']['meta_info']


                    class Host(_Entity_):
                        """
                        List of hosts
                        
                        .. attribute:: address
                        
                        	Host Address
                        	**type**\:  :py:class:`Address <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.ExplicitGroups.ExplicitGroup.Host.Address>`
                        
                        	**config**\: False
                        
                        .. attribute:: uptime
                        
                        	Uptime in seconds
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        	**units**\: second
                        
                        .. attribute:: is_exclude
                        
                        	Exclude flag set
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: expiration_time
                        
                        	Expiration time in seconds
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        	**units**\: second
                        
                        .. attribute:: source_count
                        
                        	No. of sources in entry
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: source_address
                        
                        	First 3 source addresses
                        	**type**\: list of  		 :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.ExplicitGroups.ExplicitGroup.Host.SourceAddress>`
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Active.DefaultContext.ExplicitGroups.ExplicitGroup.Host, self).__init__()

                            self.yang_name = "host"
                            self.yang_parent_name = "explicit-group"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("address", ("address", Mld.Active.DefaultContext.ExplicitGroups.ExplicitGroup.Host.Address)), ("source-address", ("source_address", Mld.Active.DefaultContext.ExplicitGroups.ExplicitGroup.Host.SourceAddress))])
                            self._leafs = OrderedDict([
                                ('uptime', (YLeaf(YType.uint32, 'uptime'), ['int'])),
                                ('is_exclude', (YLeaf(YType.boolean, 'is-exclude'), ['bool'])),
                                ('expiration_time', (YLeaf(YType.uint32, 'expiration-time'), ['int'])),
                                ('source_count', (YLeaf(YType.uint32, 'source-count'), ['int'])),
                            ])
                            self.uptime = None
                            self.is_exclude = None
                            self.expiration_time = None
                            self.source_count = None

                            self.address = Mld.Active.DefaultContext.ExplicitGroups.ExplicitGroup.Host.Address()
                            self.address.parent = self
                            self._children_name_map["address"] = "address"

                            self.source_address = YList(self)
                            self._segment_path = lambda: "host"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/active/default-context/explicit-groups/explicit-group/%s" % self._segment_path()
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Active.DefaultContext.ExplicitGroups.ExplicitGroup.Host, ['uptime', 'is_exclude', 'expiration_time', 'source_count'], name, value)


                        class Address(_Entity_):
                            """
                            Host Address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Active.DefaultContext.ExplicitGroups.ExplicitGroup.Host.Address, self).__init__()

                                self.yang_name = "address"
                                self.yang_parent_name = "host"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "address"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/active/default-context/explicit-groups/explicit-group/host/%s" % self._segment_path()
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Active.DefaultContext.ExplicitGroups.ExplicitGroup.Host.Address, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Active.DefaultContext.ExplicitGroups.ExplicitGroup.Host.Address']['meta_info']


                        class SourceAddress(_Entity_):
                            """
                            First 3 source addresses
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Active.DefaultContext.ExplicitGroups.ExplicitGroup.Host.SourceAddress, self).__init__()

                                self.yang_name = "source-address"
                                self.yang_parent_name = "host"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "source-address"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/active/default-context/explicit-groups/explicit-group/host/%s" % self._segment_path()
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Active.DefaultContext.ExplicitGroups.ExplicitGroup.Host.SourceAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Active.DefaultContext.ExplicitGroups.ExplicitGroup.Host.SourceAddress']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Active.DefaultContext.ExplicitGroups.ExplicitGroup.Host']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Mld.Active.DefaultContext.ExplicitGroups.ExplicitGroup']['meta_info']

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Mld.Active.DefaultContext.ExplicitGroups']['meta_info']


            class InterfaceTable(_Entity_):
                """
                IGMP Interface specific Table
                
                .. attribute:: interface
                
                	IGMP Interface
                	**type**\: list of  		 :py:class:`Interface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.InterfaceTable.Interface>`
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Mld.Active.DefaultContext.InterfaceTable, self).__init__()

                    self.yang_name = "interface-table"
                    self.yang_parent_name = "default-context"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("interface", ("interface", Mld.Active.DefaultContext.InterfaceTable.Interface))])
                    self._leafs = OrderedDict()

                    self.interface = YList(self)
                    self._segment_path = lambda: "interface-table"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/active/default-context/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Mld.Active.DefaultContext.InterfaceTable, [], name, value)


                class Interface(_Entity_):
                    """
                    IGMP Interface
                    
                    .. attribute:: interface_name  (key)
                    
                    	Interface Name
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: address
                    
                    	IP address
                    	**type**\:  :py:class:`Address <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.InterfaceTable.Interface.Address>`
                    
                    	**config**\: False
                    
                    .. attribute:: querier_address
                    
                    	Address of the Querier
                    	**type**\:  :py:class:`QuerierAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.InterfaceTable.Interface.QuerierAddress>`
                    
                    	**config**\: False
                    
                    .. attribute:: subscriber_address
                    
                    	Address of subscriber
                    	**type**\:  :py:class:`SubscriberAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.InterfaceTable.Interface.SubscriberAddress>`
                    
                    	**config**\: False
                    
                    .. attribute:: interface_name_xr
                    
                    	Interface
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: state
                    
                    	Interface state
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: prefix_length
                    
                    	Prefix length
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_interface_up
                    
                    	Is interface up
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_ip_enabled
                    
                    	Is IP enabled
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_router_enabled
                    
                    	Is Router functionality enabled
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: igmp_version
                    
                    	IGMP Router version
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    	**config**\: False
                    
                    .. attribute:: host_version
                    
                    	IGMP Host version
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    	**config**\: False
                    
                    .. attribute:: query_interval
                    
                    	Query Interval value in seconds
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    	**units**\: second
                    
                    .. attribute:: query_timeout
                    
                    	Query Timeout value
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    .. attribute:: query_maximum_response_time
                    
                    	Max Response Timeout value
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    .. attribute:: last_member_query_interval
                    
                    	Last Member Query Interval
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    .. attribute:: group_joins
                    
                    	No. of group joins
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: group_leaves
                    
                    	No. of group leaves
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_querier
                    
                    	Are we querier
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: total_active_groups
                    
                    	Actual number of groups on interface
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: robustness
                    
                    	Robustness Variable value
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: proxy_interface
                    
                    	Proxy interface index
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: querier_uptime
                    
                    	Time since the last querier took over
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    .. attribute:: las_ll_registration_count
                    
                    	LAS reg count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_get_address_count
                    
                    	LAS get addr count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_update_count
                    
                    	LAS Update count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_ll_remove_update_count
                    
                    	LAS LL remove update count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_ll_add_update_count
                    
                    	LAS LL add update count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_null_update_count
                    
                    	LAS Null update count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_unregistration_count
                    
                    	LAS unreg count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_las_request
                    
                    	LAS req
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_las_registered
                    
                    	LAS registered
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: vrf_id
                    
                    	VRF id
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: mte_vrf_id
                    
                    	MTE VRF id
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: location
                    
                    	Location
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: mtu
                    
                    	MTU
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: vrf_state
                    
                    	Vrf State
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_configurationverify
                    
                    	CFG verify
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: configurationvrf_set
                    
                    	CFG vrf set
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: configurationvrf_error
                    
                    	CFG vrf error
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: configuration_mcast_vrf_set
                    
                    	Is mcast set
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: configuration_mcast_vrf_error
                    
                    	Is mcast error
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_im_state_registered
                    
                    	Im state registered
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_subscriber
                    
                    	Subscriber interface
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: subscriber_mode
                    
                    	Subscriber mode
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_identity_present
                    
                    	Subscriber ID or Address available from AAA
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: subscriber_id
                    
                    	ID string of subscriber
                    	**type**\: str
                    
                    	**length:** 0..257
                    
                    	**config**\: False
                    
                    .. attribute:: parent_ifhandle
                    
                    	Parent If Handle
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: time_since_last_query_in_seconds
                    
                    	Time elapsed since last query
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: time_since_last_report_in_seconds
                    
                    	Time elapsed since last report
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: router_uptime_in_seconds
                    
                    	Uptime since router enabled event
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: mte_tuple_count
                    
                    	MTE Tuple count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Mld.Active.DefaultContext.InterfaceTable.Interface, self).__init__()

                        self.yang_name = "interface"
                        self.yang_parent_name = "interface-table"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['interface_name']
                        self._child_classes = OrderedDict([("address", ("address", Mld.Active.DefaultContext.InterfaceTable.Interface.Address)), ("querier-address", ("querier_address", Mld.Active.DefaultContext.InterfaceTable.Interface.QuerierAddress)), ("subscriber-address", ("subscriber_address", Mld.Active.DefaultContext.InterfaceTable.Interface.SubscriberAddress))])
                        self._leafs = OrderedDict([
                            ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                            ('interface_name_xr', (YLeaf(YType.str, 'interface-name-xr'), ['str'])),
                            ('state', (YLeaf(YType.uint32, 'state'), ['int'])),
                            ('prefix_length', (YLeaf(YType.uint32, 'prefix-length'), ['int'])),
                            ('is_interface_up', (YLeaf(YType.boolean, 'is-interface-up'), ['bool'])),
                            ('is_ip_enabled', (YLeaf(YType.boolean, 'is-ip-enabled'), ['bool'])),
                            ('is_router_enabled', (YLeaf(YType.boolean, 'is-router-enabled'), ['bool'])),
                            ('igmp_version', (YLeaf(YType.uint8, 'igmp-version'), ['int'])),
                            ('host_version', (YLeaf(YType.uint8, 'host-version'), ['int'])),
                            ('query_interval', (YLeaf(YType.uint16, 'query-interval'), ['int'])),
                            ('query_timeout', (YLeaf(YType.uint16, 'query-timeout'), ['int'])),
                            ('query_maximum_response_time', (YLeaf(YType.uint16, 'query-maximum-response-time'), ['int'])),
                            ('last_member_query_interval', (YLeaf(YType.uint16, 'last-member-query-interval'), ['int'])),
                            ('group_joins', (YLeaf(YType.uint32, 'group-joins'), ['int'])),
                            ('group_leaves', (YLeaf(YType.uint32, 'group-leaves'), ['int'])),
                            ('is_querier', (YLeaf(YType.boolean, 'is-querier'), ['bool'])),
                            ('total_active_groups', (YLeaf(YType.uint32, 'total-active-groups'), ['int'])),
                            ('robustness', (YLeaf(YType.uint32, 'robustness'), ['int'])),
                            ('proxy_interface', (YLeaf(YType.str, 'proxy-interface'), ['str'])),
                            ('querier_uptime', (YLeaf(YType.uint16, 'querier-uptime'), ['int'])),
                            ('las_ll_registration_count', (YLeaf(YType.uint32, 'las-ll-registration-count'), ['int'])),
                            ('las_get_address_count', (YLeaf(YType.uint32, 'las-get-address-count'), ['int'])),
                            ('las_update_count', (YLeaf(YType.uint32, 'las-update-count'), ['int'])),
                            ('las_ll_remove_update_count', (YLeaf(YType.uint32, 'las-ll-remove-update-count'), ['int'])),
                            ('las_ll_add_update_count', (YLeaf(YType.uint32, 'las-ll-add-update-count'), ['int'])),
                            ('las_null_update_count', (YLeaf(YType.uint32, 'las-null-update-count'), ['int'])),
                            ('las_unregistration_count', (YLeaf(YType.uint32, 'las-unregistration-count'), ['int'])),
                            ('is_las_request', (YLeaf(YType.boolean, 'is-las-request'), ['bool'])),
                            ('is_las_registered', (YLeaf(YType.boolean, 'is-las-registered'), ['bool'])),
                            ('vrf_id', (YLeaf(YType.uint32, 'vrf-id'), ['int'])),
                            ('mte_vrf_id', (YLeaf(YType.uint32, 'mte-vrf-id'), ['int'])),
                            ('location', (YLeaf(YType.uint32, 'location'), ['int'])),
                            ('mtu', (YLeaf(YType.uint32, 'mtu'), ['int'])),
                            ('vrf_state', (YLeaf(YType.uint32, 'vrf-state'), ['int'])),
                            ('is_configurationverify', (YLeaf(YType.boolean, 'is-configurationverify'), ['bool'])),
                            ('configurationvrf_set', (YLeaf(YType.boolean, 'configurationvrf-set'), ['bool'])),
                            ('configurationvrf_error', (YLeaf(YType.boolean, 'configurationvrf-error'), ['bool'])),
                            ('configuration_mcast_vrf_set', (YLeaf(YType.boolean, 'configuration-mcast-vrf-set'), ['bool'])),
                            ('configuration_mcast_vrf_error', (YLeaf(YType.boolean, 'configuration-mcast-vrf-error'), ['bool'])),
                            ('is_im_state_registered', (YLeaf(YType.boolean, 'is-im-state-registered'), ['bool'])),
                            ('is_subscriber', (YLeaf(YType.boolean, 'is-subscriber'), ['bool'])),
                            ('subscriber_mode', (YLeaf(YType.uint32, 'subscriber-mode'), ['int'])),
                            ('is_identity_present', (YLeaf(YType.boolean, 'is-identity-present'), ['bool'])),
                            ('subscriber_id', (YLeaf(YType.str, 'subscriber-id'), ['str'])),
                            ('parent_ifhandle', (YLeaf(YType.str, 'parent-ifhandle'), ['str'])),
                            ('time_since_last_query_in_seconds', (YLeaf(YType.uint32, 'time-since-last-query-in-seconds'), ['int'])),
                            ('time_since_last_report_in_seconds', (YLeaf(YType.uint32, 'time-since-last-report-in-seconds'), ['int'])),
                            ('router_uptime_in_seconds', (YLeaf(YType.uint32, 'router-uptime-in-seconds'), ['int'])),
                            ('mte_tuple_count', (YLeaf(YType.uint32, 'mte-tuple-count'), ['int'])),
                        ])
                        self.interface_name = None
                        self.interface_name_xr = None
                        self.state = None
                        self.prefix_length = None
                        self.is_interface_up = None
                        self.is_ip_enabled = None
                        self.is_router_enabled = None
                        self.igmp_version = None
                        self.host_version = None
                        self.query_interval = None
                        self.query_timeout = None
                        self.query_maximum_response_time = None
                        self.last_member_query_interval = None
                        self.group_joins = None
                        self.group_leaves = None
                        self.is_querier = None
                        self.total_active_groups = None
                        self.robustness = None
                        self.proxy_interface = None
                        self.querier_uptime = None
                        self.las_ll_registration_count = None
                        self.las_get_address_count = None
                        self.las_update_count = None
                        self.las_ll_remove_update_count = None
                        self.las_ll_add_update_count = None
                        self.las_null_update_count = None
                        self.las_unregistration_count = None
                        self.is_las_request = None
                        self.is_las_registered = None
                        self.vrf_id = None
                        self.mte_vrf_id = None
                        self.location = None
                        self.mtu = None
                        self.vrf_state = None
                        self.is_configurationverify = None
                        self.configurationvrf_set = None
                        self.configurationvrf_error = None
                        self.configuration_mcast_vrf_set = None
                        self.configuration_mcast_vrf_error = None
                        self.is_im_state_registered = None
                        self.is_subscriber = None
                        self.subscriber_mode = None
                        self.is_identity_present = None
                        self.subscriber_id = None
                        self.parent_ifhandle = None
                        self.time_since_last_query_in_seconds = None
                        self.time_since_last_report_in_seconds = None
                        self.router_uptime_in_seconds = None
                        self.mte_tuple_count = None

                        self.address = Mld.Active.DefaultContext.InterfaceTable.Interface.Address()
                        self.address.parent = self
                        self._children_name_map["address"] = "address"

                        self.querier_address = Mld.Active.DefaultContext.InterfaceTable.Interface.QuerierAddress()
                        self.querier_address.parent = self
                        self._children_name_map["querier_address"] = "querier-address"

                        self.subscriber_address = Mld.Active.DefaultContext.InterfaceTable.Interface.SubscriberAddress()
                        self.subscriber_address.parent = self
                        self._children_name_map["subscriber_address"] = "subscriber-address"
                        self._segment_path = lambda: "interface" + "[interface-name='" + str(self.interface_name) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/active/default-context/interface-table/%s" % self._segment_path()
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Mld.Active.DefaultContext.InterfaceTable.Interface, ['interface_name', 'interface_name_xr', 'state', 'prefix_length', 'is_interface_up', 'is_ip_enabled', 'is_router_enabled', 'igmp_version', 'host_version', 'query_interval', 'query_timeout', 'query_maximum_response_time', 'last_member_query_interval', 'group_joins', 'group_leaves', 'is_querier', 'total_active_groups', 'robustness', 'proxy_interface', 'querier_uptime', 'las_ll_registration_count', 'las_get_address_count', 'las_update_count', 'las_ll_remove_update_count', 'las_ll_add_update_count', 'las_null_update_count', 'las_unregistration_count', 'is_las_request', 'is_las_registered', 'vrf_id', 'mte_vrf_id', 'location', 'mtu', 'vrf_state', 'is_configurationverify', 'configurationvrf_set', 'configurationvrf_error', 'configuration_mcast_vrf_set', 'configuration_mcast_vrf_error', 'is_im_state_registered', 'is_subscriber', 'subscriber_mode', 'is_identity_present', 'subscriber_id', 'parent_ifhandle', 'time_since_last_query_in_seconds', 'time_since_last_report_in_seconds', 'router_uptime_in_seconds', 'mte_tuple_count'], name, value)


                    class Address(_Entity_):
                        """
                        IP address
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Active.DefaultContext.InterfaceTable.Interface.Address, self).__init__()

                            self.yang_name = "address"
                            self.yang_parent_name = "interface"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "address"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Active.DefaultContext.InterfaceTable.Interface.Address, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Active.DefaultContext.InterfaceTable.Interface.Address']['meta_info']


                    class QuerierAddress(_Entity_):
                        """
                        Address of the Querier
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Active.DefaultContext.InterfaceTable.Interface.QuerierAddress, self).__init__()

                            self.yang_name = "querier-address"
                            self.yang_parent_name = "interface"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "querier-address"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Active.DefaultContext.InterfaceTable.Interface.QuerierAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Active.DefaultContext.InterfaceTable.Interface.QuerierAddress']['meta_info']


                    class SubscriberAddress(_Entity_):
                        """
                        Address of subscriber
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Active.DefaultContext.InterfaceTable.Interface.SubscriberAddress, self).__init__()

                            self.yang_name = "subscriber-address"
                            self.yang_parent_name = "interface"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "subscriber-address"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Active.DefaultContext.InterfaceTable.Interface.SubscriberAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Active.DefaultContext.InterfaceTable.Interface.SubscriberAddress']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Mld.Active.DefaultContext.InterfaceTable.Interface']['meta_info']

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Mld.Active.DefaultContext.InterfaceTable']['meta_info']


            class InterfaceUnicastQosAdjusts(_Entity_):
                """
                IGMP Interface Unicast\-Qos\-Adjust
                
                .. attribute:: interface_unicast_qos_adjust
                
                	IGMP Interface
                	**type**\: list of  		 :py:class:`InterfaceUnicastQosAdjust <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust>`
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Mld.Active.DefaultContext.InterfaceUnicastQosAdjusts, self).__init__()

                    self.yang_name = "interface-unicast-qos-adjusts"
                    self.yang_parent_name = "default-context"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("interface-unicast-qos-adjust", ("interface_unicast_qos_adjust", Mld.Active.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust))])
                    self._leafs = OrderedDict()

                    self.interface_unicast_qos_adjust = YList(self)
                    self._segment_path = lambda: "interface-unicast-qos-adjusts"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/active/default-context/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Mld.Active.DefaultContext.InterfaceUnicastQosAdjusts, [], name, value)


                class InterfaceUnicastQosAdjust(_Entity_):
                    """
                    IGMP Interface
                    
                    .. attribute:: interface_name  (key)
                    
                    	Interface Name
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: is_virtual_access
                    
                    	Is VirtualAccess Interface
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: rate
                    
                    	Overall rate in Kbps
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    	**units**\: kbit/s
                    
                    .. attribute:: rate_increments
                    
                    	Count of rate increments
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: rate_decrements
                    
                    	Count of rate decrements
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: update
                    
                    	List of updates
                    	**type**\: list of  		 :py:class:`Update <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Mld.Active.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust, self).__init__()

                        self.yang_name = "interface-unicast-qos-adjust"
                        self.yang_parent_name = "interface-unicast-qos-adjusts"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['interface_name']
                        self._child_classes = OrderedDict([("update", ("update", Mld.Active.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update))])
                        self._leafs = OrderedDict([
                            ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                            ('is_virtual_access', (YLeaf(YType.boolean, 'is-virtual-access'), ['bool'])),
                            ('rate', (YLeaf(YType.uint32, 'rate'), ['int'])),
                            ('rate_increments', (YLeaf(YType.uint32, 'rate-increments'), ['int'])),
                            ('rate_decrements', (YLeaf(YType.uint32, 'rate-decrements'), ['int'])),
                        ])
                        self.interface_name = None
                        self.is_virtual_access = None
                        self.rate = None
                        self.rate_increments = None
                        self.rate_decrements = None

                        self.update = YList(self)
                        self._segment_path = lambda: "interface-unicast-qos-adjust" + "[interface-name='" + str(self.interface_name) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/active/default-context/interface-unicast-qos-adjusts/%s" % self._segment_path()
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Mld.Active.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust, ['interface_name', 'is_virtual_access', 'rate', 'rate_increments', 'rate_decrements'], name, value)


                    class Update(_Entity_):
                        """
                        List of updates
                        
                        .. attribute:: source_address
                        
                        	Source address
                        	**type**\:  :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.SourceAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: group_address
                        
                        	Group address
                        	**type**\:  :py:class:`GroupAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.GroupAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: is_add
                        
                        	Is this a rate increment
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: weight
                        
                        	Weight from policy
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: received_time
                        
                        	Time this update is received
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Active.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update, self).__init__()

                            self.yang_name = "update"
                            self.yang_parent_name = "interface-unicast-qos-adjust"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("source-address", ("source_address", Mld.Active.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.SourceAddress)), ("group-address", ("group_address", Mld.Active.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.GroupAddress))])
                            self._leafs = OrderedDict([
                                ('is_add', (YLeaf(YType.boolean, 'is-add'), ['bool'])),
                                ('weight', (YLeaf(YType.uint32, 'weight'), ['int'])),
                                ('received_time', (YLeaf(YType.uint64, 'received-time'), ['int'])),
                            ])
                            self.is_add = None
                            self.weight = None
                            self.received_time = None

                            self.source_address = Mld.Active.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.SourceAddress()
                            self.source_address.parent = self
                            self._children_name_map["source_address"] = "source-address"

                            self.group_address = Mld.Active.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.GroupAddress()
                            self.group_address.parent = self
                            self._children_name_map["group_address"] = "group-address"
                            self._segment_path = lambda: "update"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Active.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update, ['is_add', 'weight', 'received_time'], name, value)


                        class SourceAddress(_Entity_):
                            """
                            Source address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Active.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.SourceAddress, self).__init__()

                                self.yang_name = "source-address"
                                self.yang_parent_name = "update"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "source-address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Active.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.SourceAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Active.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.SourceAddress']['meta_info']


                        class GroupAddress(_Entity_):
                            """
                            Group address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Active.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.GroupAddress, self).__init__()

                                self.yang_name = "group-address"
                                self.yang_parent_name = "update"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "group-address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Active.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.GroupAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Active.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.GroupAddress']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Active.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Mld.Active.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust']['meta_info']

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Mld.Active.DefaultContext.InterfaceUnicastQosAdjusts']['meta_info']


            class Ranges(_Entity_):
                """
                Range table
                
                .. attribute:: range
                
                	Range information
                	**type**\: list of  		 :py:class:`Range <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.Ranges.Range>`
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Mld.Active.DefaultContext.Ranges, self).__init__()

                    self.yang_name = "ranges"
                    self.yang_parent_name = "default-context"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("range", ("range", Mld.Active.DefaultContext.Ranges.Range))])
                    self._leafs = OrderedDict()

                    self.range = YList(self)
                    self._segment_path = lambda: "ranges"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/active/default-context/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Mld.Active.DefaultContext.Ranges, [], name, value)


                class Range(_Entity_):
                    """
                    Range information
                    
                    .. attribute:: group_address
                    
                    	Group address
                    	**type**\: union of the below types:
                    
                    		**type**\: str
                    
                    			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    		**type**\: str
                    
                    			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    	**config**\: False
                    
                    .. attribute:: group_mask
                    
                    	Group Mask
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: group_address_xr
                    
                    	Group address
                    	**type**\:  :py:class:`GroupAddressXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.Ranges.Range.GroupAddressXr>`
                    
                    	**config**\: False
                    
                    .. attribute:: prefix_length
                    
                    	Prefix length
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: protocol
                    
                    	Protocol
                    	**type**\:  :py:class:`IgmpEdmProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpEdmProtocol>`
                    
                    	**config**\: False
                    
                    .. attribute:: is_stale
                    
                    	Is the entry stale
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Mld.Active.DefaultContext.Ranges.Range, self).__init__()

                        self.yang_name = "range"
                        self.yang_parent_name = "ranges"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("group-address-xr", ("group_address_xr", Mld.Active.DefaultContext.Ranges.Range.GroupAddressXr))])
                        self._leafs = OrderedDict([
                            ('group_address', (YLeaf(YType.str, 'group-address'), ['str','str'])),
                            ('group_mask', (YLeaf(YType.uint32, 'group-mask'), ['int'])),
                            ('prefix_length', (YLeaf(YType.uint32, 'prefix-length'), ['int'])),
                            ('protocol', (YLeaf(YType.enumeration, 'protocol'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpEdmProtocol', '')])),
                            ('is_stale', (YLeaf(YType.boolean, 'is-stale'), ['bool'])),
                        ])
                        self.group_address = None
                        self.group_mask = None
                        self.prefix_length = None
                        self.protocol = None
                        self.is_stale = None

                        self.group_address_xr = Mld.Active.DefaultContext.Ranges.Range.GroupAddressXr()
                        self.group_address_xr.parent = self
                        self._children_name_map["group_address_xr"] = "group-address-xr"
                        self._segment_path = lambda: "range"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/active/default-context/ranges/%s" % self._segment_path()
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Mld.Active.DefaultContext.Ranges.Range, ['group_address', 'group_mask', 'prefix_length', 'protocol', 'is_stale'], name, value)


                    class GroupAddressXr(_Entity_):
                        """
                        Group address
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Active.DefaultContext.Ranges.Range.GroupAddressXr, self).__init__()

                            self.yang_name = "group-address-xr"
                            self.yang_parent_name = "range"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "group-address-xr"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/active/default-context/ranges/range/%s" % self._segment_path()
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Active.DefaultContext.Ranges.Range.GroupAddressXr, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Active.DefaultContext.Ranges.Range.GroupAddressXr']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Mld.Active.DefaultContext.Ranges.Range']['meta_info']

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Mld.Active.DefaultContext.Ranges']['meta_info']


            class IfrsInterfaces(_Entity_):
                """
                IGMP Interface specific
                
                .. attribute:: ifrs_interface
                
                	IGMP IFRS Interface
                	**type**\: list of  		 :py:class:`IfrsInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.IfrsInterfaces.IfrsInterface>`
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Mld.Active.DefaultContext.IfrsInterfaces, self).__init__()

                    self.yang_name = "ifrs-interfaces"
                    self.yang_parent_name = "default-context"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("ifrs-interface", ("ifrs_interface", Mld.Active.DefaultContext.IfrsInterfaces.IfrsInterface))])
                    self._leafs = OrderedDict()

                    self.ifrs_interface = YList(self)
                    self._segment_path = lambda: "ifrs-interfaces"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/active/default-context/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Mld.Active.DefaultContext.IfrsInterfaces, [], name, value)


                class IfrsInterface(_Entity_):
                    """
                    IGMP IFRS Interface
                    
                    .. attribute:: interface_name  (key)
                    
                    	IFRS Interface Name
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: igmp_interface_entry
                    
                    	IGMP interface entry
                    	**type**\:  :py:class:`IgmpInterfaceEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry>`
                    
                    	**config**\: False
                    
                    .. attribute:: join_group_count
                    
                    	Join group count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Mld.Active.DefaultContext.IfrsInterfaces.IfrsInterface, self).__init__()

                        self.yang_name = "ifrs-interface"
                        self.yang_parent_name = "ifrs-interfaces"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['interface_name']
                        self._child_classes = OrderedDict([("igmp-interface-entry", ("igmp_interface_entry", Mld.Active.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry))])
                        self._leafs = OrderedDict([
                            ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                            ('join_group_count', (YLeaf(YType.uint32, 'join-group-count'), ['int'])),
                        ])
                        self.interface_name = None
                        self.join_group_count = None

                        self.igmp_interface_entry = Mld.Active.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry()
                        self.igmp_interface_entry.parent = self
                        self._children_name_map["igmp_interface_entry"] = "igmp-interface-entry"
                        self._segment_path = lambda: "ifrs-interface" + "[interface-name='" + str(self.interface_name) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/active/default-context/ifrs-interfaces/%s" % self._segment_path()
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Mld.Active.DefaultContext.IfrsInterfaces.IfrsInterface, ['interface_name', 'join_group_count'], name, value)


                    class IgmpInterfaceEntry(_Entity_):
                        """
                        IGMP interface entry
                        
                        .. attribute:: address
                        
                        	IP address
                        	**type**\:  :py:class:`Address <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.Address>`
                        
                        	**config**\: False
                        
                        .. attribute:: querier_address
                        
                        	Address of the Querier
                        	**type**\:  :py:class:`QuerierAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.QuerierAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: subscriber_address
                        
                        	Address of subscriber
                        	**type**\:  :py:class:`SubscriberAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.SubscriberAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: interface_name_xr
                        
                        	Interface
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: state
                        
                        	Interface state
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: prefix_length
                        
                        	Prefix length
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_interface_up
                        
                        	Is interface up
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_ip_enabled
                        
                        	Is IP enabled
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_router_enabled
                        
                        	Is Router functionality enabled
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: igmp_version
                        
                        	IGMP Router version
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        	**config**\: False
                        
                        .. attribute:: host_version
                        
                        	IGMP Host version
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        	**config**\: False
                        
                        .. attribute:: query_interval
                        
                        	Query Interval value in seconds
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        	**units**\: second
                        
                        .. attribute:: query_timeout
                        
                        	Query Timeout value
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: query_maximum_response_time
                        
                        	Max Response Timeout value
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: last_member_query_interval
                        
                        	Last Member Query Interval
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: group_joins
                        
                        	No. of group joins
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: group_leaves
                        
                        	No. of group leaves
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_querier
                        
                        	Are we querier
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: total_active_groups
                        
                        	Actual number of groups on interface
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: robustness
                        
                        	Robustness Variable value
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: proxy_interface
                        
                        	Proxy interface index
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: querier_uptime
                        
                        	Time since the last querier took over
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: las_ll_registration_count
                        
                        	LAS reg count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_get_address_count
                        
                        	LAS get addr count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_update_count
                        
                        	LAS Update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_ll_remove_update_count
                        
                        	LAS LL remove update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_ll_add_update_count
                        
                        	LAS LL add update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_null_update_count
                        
                        	LAS Null update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_unregistration_count
                        
                        	LAS unreg count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_las_request
                        
                        	LAS req
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_las_registered
                        
                        	LAS registered
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: vrf_id
                        
                        	VRF id
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: mte_vrf_id
                        
                        	MTE VRF id
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: location
                        
                        	Location
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: mtu
                        
                        	MTU
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: vrf_state
                        
                        	Vrf State
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_configurationverify
                        
                        	CFG verify
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configurationvrf_set
                        
                        	CFG vrf set
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configurationvrf_error
                        
                        	CFG vrf error
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configuration_mcast_vrf_set
                        
                        	Is mcast set
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configuration_mcast_vrf_error
                        
                        	Is mcast error
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_im_state_registered
                        
                        	Im state registered
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_subscriber
                        
                        	Subscriber interface
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: subscriber_mode
                        
                        	Subscriber mode
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_identity_present
                        
                        	Subscriber ID or Address available from AAA
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: subscriber_id
                        
                        	ID string of subscriber
                        	**type**\: str
                        
                        	**length:** 0..257
                        
                        	**config**\: False
                        
                        .. attribute:: parent_ifhandle
                        
                        	Parent If Handle
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: time_since_last_query_in_seconds
                        
                        	Time elapsed since last query
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: time_since_last_report_in_seconds
                        
                        	Time elapsed since last report
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: router_uptime_in_seconds
                        
                        	Uptime since router enabled event
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: mte_tuple_count
                        
                        	MTE Tuple count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Active.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry, self).__init__()

                            self.yang_name = "igmp-interface-entry"
                            self.yang_parent_name = "ifrs-interface"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("address", ("address", Mld.Active.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.Address)), ("querier-address", ("querier_address", Mld.Active.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.QuerierAddress)), ("subscriber-address", ("subscriber_address", Mld.Active.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.SubscriberAddress))])
                            self._leafs = OrderedDict([
                                ('interface_name_xr', (YLeaf(YType.str, 'interface-name-xr'), ['str'])),
                                ('state', (YLeaf(YType.uint32, 'state'), ['int'])),
                                ('prefix_length', (YLeaf(YType.uint32, 'prefix-length'), ['int'])),
                                ('is_interface_up', (YLeaf(YType.boolean, 'is-interface-up'), ['bool'])),
                                ('is_ip_enabled', (YLeaf(YType.boolean, 'is-ip-enabled'), ['bool'])),
                                ('is_router_enabled', (YLeaf(YType.boolean, 'is-router-enabled'), ['bool'])),
                                ('igmp_version', (YLeaf(YType.uint8, 'igmp-version'), ['int'])),
                                ('host_version', (YLeaf(YType.uint8, 'host-version'), ['int'])),
                                ('query_interval', (YLeaf(YType.uint16, 'query-interval'), ['int'])),
                                ('query_timeout', (YLeaf(YType.uint16, 'query-timeout'), ['int'])),
                                ('query_maximum_response_time', (YLeaf(YType.uint16, 'query-maximum-response-time'), ['int'])),
                                ('last_member_query_interval', (YLeaf(YType.uint16, 'last-member-query-interval'), ['int'])),
                                ('group_joins', (YLeaf(YType.uint32, 'group-joins'), ['int'])),
                                ('group_leaves', (YLeaf(YType.uint32, 'group-leaves'), ['int'])),
                                ('is_querier', (YLeaf(YType.boolean, 'is-querier'), ['bool'])),
                                ('total_active_groups', (YLeaf(YType.uint32, 'total-active-groups'), ['int'])),
                                ('robustness', (YLeaf(YType.uint32, 'robustness'), ['int'])),
                                ('proxy_interface', (YLeaf(YType.str, 'proxy-interface'), ['str'])),
                                ('querier_uptime', (YLeaf(YType.uint16, 'querier-uptime'), ['int'])),
                                ('las_ll_registration_count', (YLeaf(YType.uint32, 'las-ll-registration-count'), ['int'])),
                                ('las_get_address_count', (YLeaf(YType.uint32, 'las-get-address-count'), ['int'])),
                                ('las_update_count', (YLeaf(YType.uint32, 'las-update-count'), ['int'])),
                                ('las_ll_remove_update_count', (YLeaf(YType.uint32, 'las-ll-remove-update-count'), ['int'])),
                                ('las_ll_add_update_count', (YLeaf(YType.uint32, 'las-ll-add-update-count'), ['int'])),
                                ('las_null_update_count', (YLeaf(YType.uint32, 'las-null-update-count'), ['int'])),
                                ('las_unregistration_count', (YLeaf(YType.uint32, 'las-unregistration-count'), ['int'])),
                                ('is_las_request', (YLeaf(YType.boolean, 'is-las-request'), ['bool'])),
                                ('is_las_registered', (YLeaf(YType.boolean, 'is-las-registered'), ['bool'])),
                                ('vrf_id', (YLeaf(YType.uint32, 'vrf-id'), ['int'])),
                                ('mte_vrf_id', (YLeaf(YType.uint32, 'mte-vrf-id'), ['int'])),
                                ('location', (YLeaf(YType.uint32, 'location'), ['int'])),
                                ('mtu', (YLeaf(YType.uint32, 'mtu'), ['int'])),
                                ('vrf_state', (YLeaf(YType.uint32, 'vrf-state'), ['int'])),
                                ('is_configurationverify', (YLeaf(YType.boolean, 'is-configurationverify'), ['bool'])),
                                ('configurationvrf_set', (YLeaf(YType.boolean, 'configurationvrf-set'), ['bool'])),
                                ('configurationvrf_error', (YLeaf(YType.boolean, 'configurationvrf-error'), ['bool'])),
                                ('configuration_mcast_vrf_set', (YLeaf(YType.boolean, 'configuration-mcast-vrf-set'), ['bool'])),
                                ('configuration_mcast_vrf_error', (YLeaf(YType.boolean, 'configuration-mcast-vrf-error'), ['bool'])),
                                ('is_im_state_registered', (YLeaf(YType.boolean, 'is-im-state-registered'), ['bool'])),
                                ('is_subscriber', (YLeaf(YType.boolean, 'is-subscriber'), ['bool'])),
                                ('subscriber_mode', (YLeaf(YType.uint32, 'subscriber-mode'), ['int'])),
                                ('is_identity_present', (YLeaf(YType.boolean, 'is-identity-present'), ['bool'])),
                                ('subscriber_id', (YLeaf(YType.str, 'subscriber-id'), ['str'])),
                                ('parent_ifhandle', (YLeaf(YType.str, 'parent-ifhandle'), ['str'])),
                                ('time_since_last_query_in_seconds', (YLeaf(YType.uint32, 'time-since-last-query-in-seconds'), ['int'])),
                                ('time_since_last_report_in_seconds', (YLeaf(YType.uint32, 'time-since-last-report-in-seconds'), ['int'])),
                                ('router_uptime_in_seconds', (YLeaf(YType.uint32, 'router-uptime-in-seconds'), ['int'])),
                                ('mte_tuple_count', (YLeaf(YType.uint32, 'mte-tuple-count'), ['int'])),
                            ])
                            self.interface_name_xr = None
                            self.state = None
                            self.prefix_length = None
                            self.is_interface_up = None
                            self.is_ip_enabled = None
                            self.is_router_enabled = None
                            self.igmp_version = None
                            self.host_version = None
                            self.query_interval = None
                            self.query_timeout = None
                            self.query_maximum_response_time = None
                            self.last_member_query_interval = None
                            self.group_joins = None
                            self.group_leaves = None
                            self.is_querier = None
                            self.total_active_groups = None
                            self.robustness = None
                            self.proxy_interface = None
                            self.querier_uptime = None
                            self.las_ll_registration_count = None
                            self.las_get_address_count = None
                            self.las_update_count = None
                            self.las_ll_remove_update_count = None
                            self.las_ll_add_update_count = None
                            self.las_null_update_count = None
                            self.las_unregistration_count = None
                            self.is_las_request = None
                            self.is_las_registered = None
                            self.vrf_id = None
                            self.mte_vrf_id = None
                            self.location = None
                            self.mtu = None
                            self.vrf_state = None
                            self.is_configurationverify = None
                            self.configurationvrf_set = None
                            self.configurationvrf_error = None
                            self.configuration_mcast_vrf_set = None
                            self.configuration_mcast_vrf_error = None
                            self.is_im_state_registered = None
                            self.is_subscriber = None
                            self.subscriber_mode = None
                            self.is_identity_present = None
                            self.subscriber_id = None
                            self.parent_ifhandle = None
                            self.time_since_last_query_in_seconds = None
                            self.time_since_last_report_in_seconds = None
                            self.router_uptime_in_seconds = None
                            self.mte_tuple_count = None

                            self.address = Mld.Active.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.Address()
                            self.address.parent = self
                            self._children_name_map["address"] = "address"

                            self.querier_address = Mld.Active.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.QuerierAddress()
                            self.querier_address.parent = self
                            self._children_name_map["querier_address"] = "querier-address"

                            self.subscriber_address = Mld.Active.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.SubscriberAddress()
                            self.subscriber_address.parent = self
                            self._children_name_map["subscriber_address"] = "subscriber-address"
                            self._segment_path = lambda: "igmp-interface-entry"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Active.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry, ['interface_name_xr', 'state', 'prefix_length', 'is_interface_up', 'is_ip_enabled', 'is_router_enabled', 'igmp_version', 'host_version', 'query_interval', 'query_timeout', 'query_maximum_response_time', 'last_member_query_interval', 'group_joins', 'group_leaves', 'is_querier', 'total_active_groups', 'robustness', 'proxy_interface', 'querier_uptime', 'las_ll_registration_count', 'las_get_address_count', 'las_update_count', 'las_ll_remove_update_count', 'las_ll_add_update_count', 'las_null_update_count', 'las_unregistration_count', 'is_las_request', 'is_las_registered', 'vrf_id', 'mte_vrf_id', 'location', 'mtu', 'vrf_state', 'is_configurationverify', 'configurationvrf_set', 'configurationvrf_error', 'configuration_mcast_vrf_set', 'configuration_mcast_vrf_error', 'is_im_state_registered', 'is_subscriber', 'subscriber_mode', 'is_identity_present', 'subscriber_id', 'parent_ifhandle', 'time_since_last_query_in_seconds', 'time_since_last_report_in_seconds', 'router_uptime_in_seconds', 'mte_tuple_count'], name, value)


                        class Address(_Entity_):
                            """
                            IP address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Active.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.Address, self).__init__()

                                self.yang_name = "address"
                                self.yang_parent_name = "igmp-interface-entry"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Active.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.Address, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Active.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.Address']['meta_info']


                        class QuerierAddress(_Entity_):
                            """
                            Address of the Querier
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Active.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.QuerierAddress, self).__init__()

                                self.yang_name = "querier-address"
                                self.yang_parent_name = "igmp-interface-entry"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "querier-address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Active.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.QuerierAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Active.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.QuerierAddress']['meta_info']


                        class SubscriberAddress(_Entity_):
                            """
                            Address of subscriber
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Active.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.SubscriberAddress, self).__init__()

                                self.yang_name = "subscriber-address"
                                self.yang_parent_name = "igmp-interface-entry"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "subscriber-address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Active.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.SubscriberAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Active.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.SubscriberAddress']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Active.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Mld.Active.DefaultContext.IfrsInterfaces.IfrsInterface']['meta_info']

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Mld.Active.DefaultContext.IfrsInterfaces']['meta_info']


            class TrafficCounters(_Entity_):
                """
                IGMP Message Traffic Counters
                
                .. attribute:: elapsed_time
                
                	Running time for counters
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: packets_in
                
                	Packets in
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: packets_out
                
                	Packets out
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: format_errors
                
                	Malformed packets in
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: packet_manager_input_errors
                
                	Incoming Packet Manager packets dropped
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: packet_manager_output_errors
                
                	Outgoing Packet Manager packets dropped
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: checksum_errors
                
                	Checksum errors
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: receive_socket_errors
                
                	Socket errors on reception
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: socket_errors
                
                	Socket errors on send
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: bad_scope_errors
                
                	BadScope errors
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: auxillary_data_length_errors
                
                	AuxDataLen errors
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: invalid_source_address_errors
                
                	Invalid Source Address errors
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: no_socket_connection
                
                	Packets dropped since no socket connection
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: miscellaneous_errors
                
                	Packets dropped for other reasons
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: input_queries
                
                	Query packets in
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: input_reports
                
                	Reports in
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: input_leaves
                
                	Leaves in
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: input_mtrace
                
                	Mtrace packets in
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: input_dvmrp
                
                	DVMRP packets in
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: input_pim
                
                	PIM packets in
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: output_queries
                
                	Query packets out
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: output_reports
                
                	Reports out
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: output_leaves
                
                	Leaves out
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: output_mtrace
                
                	Mtrace packets out
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: output_dvmrp
                
                	DVMRP packets out
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: output_pim
                
                	PIM packets out
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: get_packet_failure
                
                	Packet get failed
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: output_no_parent_interface_handle
                
                	Failures setting 2nd ifhandle
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: input_no_idb
                
                	Packets received without idb
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: input_no_vrf_in_idb
                
                	Packets received on idb without VRF
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: input_disabled_idb
                
                	Packet received on disabled idb
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: input_martian_address
                
                	Packets received with Martian Address
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: input_no_assigned_vrf_id
                
                	Packets received with no assigned vrf id
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: input_no_vrf_mtrace
                
                	mtrace packets with no vrf associated
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: input_no_platform_support_mtrace
                
                	mtrace packets without platform support
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Mld.Active.DefaultContext.TrafficCounters, self).__init__()

                    self.yang_name = "traffic-counters"
                    self.yang_parent_name = "default-context"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('elapsed_time', (YLeaf(YType.uint32, 'elapsed-time'), ['int'])),
                        ('packets_in', (YLeaf(YType.uint32, 'packets-in'), ['int'])),
                        ('packets_out', (YLeaf(YType.uint32, 'packets-out'), ['int'])),
                        ('format_errors', (YLeaf(YType.uint32, 'format-errors'), ['int'])),
                        ('packet_manager_input_errors', (YLeaf(YType.uint32, 'packet-manager-input-errors'), ['int'])),
                        ('packet_manager_output_errors', (YLeaf(YType.uint32, 'packet-manager-output-errors'), ['int'])),
                        ('checksum_errors', (YLeaf(YType.uint32, 'checksum-errors'), ['int'])),
                        ('receive_socket_errors', (YLeaf(YType.uint32, 'receive-socket-errors'), ['int'])),
                        ('socket_errors', (YLeaf(YType.uint32, 'socket-errors'), ['int'])),
                        ('bad_scope_errors', (YLeaf(YType.uint32, 'bad-scope-errors'), ['int'])),
                        ('auxillary_data_length_errors', (YLeaf(YType.uint32, 'auxillary-data-length-errors'), ['int'])),
                        ('invalid_source_address_errors', (YLeaf(YType.uint32, 'invalid-source-address-errors'), ['int'])),
                        ('no_socket_connection', (YLeaf(YType.uint32, 'no-socket-connection'), ['int'])),
                        ('miscellaneous_errors', (YLeaf(YType.uint32, 'miscellaneous-errors'), ['int'])),
                        ('input_queries', (YLeaf(YType.uint32, 'input-queries'), ['int'])),
                        ('input_reports', (YLeaf(YType.uint32, 'input-reports'), ['int'])),
                        ('input_leaves', (YLeaf(YType.uint32, 'input-leaves'), ['int'])),
                        ('input_mtrace', (YLeaf(YType.uint32, 'input-mtrace'), ['int'])),
                        ('input_dvmrp', (YLeaf(YType.uint32, 'input-dvmrp'), ['int'])),
                        ('input_pim', (YLeaf(YType.uint32, 'input-pim'), ['int'])),
                        ('output_queries', (YLeaf(YType.uint32, 'output-queries'), ['int'])),
                        ('output_reports', (YLeaf(YType.uint32, 'output-reports'), ['int'])),
                        ('output_leaves', (YLeaf(YType.uint32, 'output-leaves'), ['int'])),
                        ('output_mtrace', (YLeaf(YType.uint32, 'output-mtrace'), ['int'])),
                        ('output_dvmrp', (YLeaf(YType.uint32, 'output-dvmrp'), ['int'])),
                        ('output_pim', (YLeaf(YType.uint32, 'output-pim'), ['int'])),
                        ('get_packet_failure', (YLeaf(YType.uint32, 'get-packet-failure'), ['int'])),
                        ('output_no_parent_interface_handle', (YLeaf(YType.uint32, 'output-no-parent-interface-handle'), ['int'])),
                        ('input_no_idb', (YLeaf(YType.uint32, 'input-no-idb'), ['int'])),
                        ('input_no_vrf_in_idb', (YLeaf(YType.uint32, 'input-no-vrf-in-idb'), ['int'])),
                        ('input_disabled_idb', (YLeaf(YType.uint32, 'input-disabled-idb'), ['int'])),
                        ('input_martian_address', (YLeaf(YType.uint32, 'input-martian-address'), ['int'])),
                        ('input_no_assigned_vrf_id', (YLeaf(YType.uint32, 'input-no-assigned-vrf-id'), ['int'])),
                        ('input_no_vrf_mtrace', (YLeaf(YType.uint32, 'input-no-vrf-mtrace'), ['int'])),
                        ('input_no_platform_support_mtrace', (YLeaf(YType.uint32, 'input-no-platform-support-mtrace'), ['int'])),
                    ])
                    self.elapsed_time = None
                    self.packets_in = None
                    self.packets_out = None
                    self.format_errors = None
                    self.packet_manager_input_errors = None
                    self.packet_manager_output_errors = None
                    self.checksum_errors = None
                    self.receive_socket_errors = None
                    self.socket_errors = None
                    self.bad_scope_errors = None
                    self.auxillary_data_length_errors = None
                    self.invalid_source_address_errors = None
                    self.no_socket_connection = None
                    self.miscellaneous_errors = None
                    self.input_queries = None
                    self.input_reports = None
                    self.input_leaves = None
                    self.input_mtrace = None
                    self.input_dvmrp = None
                    self.input_pim = None
                    self.output_queries = None
                    self.output_reports = None
                    self.output_leaves = None
                    self.output_mtrace = None
                    self.output_dvmrp = None
                    self.output_pim = None
                    self.get_packet_failure = None
                    self.output_no_parent_interface_handle = None
                    self.input_no_idb = None
                    self.input_no_vrf_in_idb = None
                    self.input_disabled_idb = None
                    self.input_martian_address = None
                    self.input_no_assigned_vrf_id = None
                    self.input_no_vrf_mtrace = None
                    self.input_no_platform_support_mtrace = None
                    self._segment_path = lambda: "traffic-counters"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/active/default-context/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Mld.Active.DefaultContext.TrafficCounters, ['elapsed_time', 'packets_in', 'packets_out', 'format_errors', 'packet_manager_input_errors', 'packet_manager_output_errors', 'checksum_errors', 'receive_socket_errors', 'socket_errors', 'bad_scope_errors', 'auxillary_data_length_errors', 'invalid_source_address_errors', 'no_socket_connection', 'miscellaneous_errors', 'input_queries', 'input_reports', 'input_leaves', 'input_mtrace', 'input_dvmrp', 'input_pim', 'output_queries', 'output_reports', 'output_leaves', 'output_mtrace', 'output_dvmrp', 'output_pim', 'get_packet_failure', 'output_no_parent_interface_handle', 'input_no_idb', 'input_no_vrf_in_idb', 'input_disabled_idb', 'input_martian_address', 'input_no_assigned_vrf_id', 'input_no_vrf_mtrace', 'input_no_platform_support_mtrace'], name, value)

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Mld.Active.DefaultContext.TrafficCounters']['meta_info']


            class Groups(_Entity_):
                """
                IGMP Group Database Table
                
                .. attribute:: group
                
                	IGMP Group Entry Information
                	**type**\: list of  		 :py:class:`Group <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.Groups.Group>`
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Mld.Active.DefaultContext.Groups, self).__init__()

                    self.yang_name = "groups"
                    self.yang_parent_name = "default-context"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("group", ("group", Mld.Active.DefaultContext.Groups.Group))])
                    self._leafs = OrderedDict()

                    self.group = YList(self)
                    self._segment_path = lambda: "groups"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/active/default-context/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Mld.Active.DefaultContext.Groups, [], name, value)


                class Group(_Entity_):
                    """
                    IGMP Group Entry Information
                    
                    .. attribute:: group_address
                    
                    	Group Address
                    	**type**\: union of the below types:
                    
                    		**type**\: str
                    
                    			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    		**type**\: str
                    
                    			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    	**config**\: False
                    
                    .. attribute:: interface_name
                    
                    	Interface Name
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: group_address_xr
                    
                    	Group Address
                    	**type**\:  :py:class:`GroupAddressXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.Groups.Group.GroupAddressXr>`
                    
                    	**config**\: False
                    
                    .. attribute:: last_reporter
                    
                    	Last reporter address
                    	**type**\:  :py:class:`LastReporter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.Groups.Group.LastReporter>`
                    
                    	**config**\: False
                    
                    .. attribute:: source_address
                    
                    	Source Address
                    	**type**\:  :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.Groups.Group.SourceAddress>`
                    
                    	**config**\: False
                    
                    .. attribute:: interface_name_xr
                    
                    	Interface
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: uptime
                    
                    	Uptime in seconds
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**config**\: False
                    
                    	**units**\: second
                    
                    .. attribute:: expiration_time
                    
                    	Expiration time in seconds
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    	**config**\: False
                    
                    	**units**\: second
                    
                    .. attribute:: explicit_tracking_enabled
                    
                    	Is explicit tracking enabled
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_self_join
                    
                    	If local system is member of this group on this interface
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: row_status
                    
                    	interface on or off for the group
                    	**type**\: str
                    
                    	**length:** 0..16
                    
                    	**config**\: False
                    
                    .. attribute:: is_low_memory
                    
                    	Node is running low on memory
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: router_filter_mode
                    
                    	Filter mode
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    	**config**\: False
                    
                    .. attribute:: older_host_version1_timer
                    
                    	IGMP Hostversion1timer
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: older_host_version2_timer
                    
                    	IGMP Hostversion2timer
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_added
                    
                    	Joined
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_suppressed
                    
                    	Suppressed
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Mld.Active.DefaultContext.Groups.Group, self).__init__()

                        self.yang_name = "group"
                        self.yang_parent_name = "groups"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("group-address-xr", ("group_address_xr", Mld.Active.DefaultContext.Groups.Group.GroupAddressXr)), ("last-reporter", ("last_reporter", Mld.Active.DefaultContext.Groups.Group.LastReporter)), ("source-address", ("source_address", Mld.Active.DefaultContext.Groups.Group.SourceAddress))])
                        self._leafs = OrderedDict([
                            ('group_address', (YLeaf(YType.str, 'group-address'), ['str','str'])),
                            ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                            ('interface_name_xr', (YLeaf(YType.str, 'interface-name-xr'), ['str'])),
                            ('uptime', (YLeaf(YType.uint64, 'uptime'), ['int'])),
                            ('expiration_time', (YLeaf(YType.int32, 'expiration-time'), ['int'])),
                            ('explicit_tracking_enabled', (YLeaf(YType.boolean, 'explicit-tracking-enabled'), ['bool'])),
                            ('is_self_join', (YLeaf(YType.boolean, 'is-self-join'), ['bool'])),
                            ('row_status', (YLeaf(YType.str, 'row-status'), ['str'])),
                            ('is_low_memory', (YLeaf(YType.boolean, 'is-low-memory'), ['bool'])),
                            ('router_filter_mode', (YLeaf(YType.uint8, 'router-filter-mode'), ['int'])),
                            ('older_host_version1_timer', (YLeaf(YType.uint32, 'older-host-version1-timer'), ['int'])),
                            ('older_host_version2_timer', (YLeaf(YType.uint32, 'older-host-version2-timer'), ['int'])),
                            ('is_added', (YLeaf(YType.boolean, 'is-added'), ['bool'])),
                            ('is_suppressed', (YLeaf(YType.boolean, 'is-suppressed'), ['bool'])),
                        ])
                        self.group_address = None
                        self.interface_name = None
                        self.interface_name_xr = None
                        self.uptime = None
                        self.expiration_time = None
                        self.explicit_tracking_enabled = None
                        self.is_self_join = None
                        self.row_status = None
                        self.is_low_memory = None
                        self.router_filter_mode = None
                        self.older_host_version1_timer = None
                        self.older_host_version2_timer = None
                        self.is_added = None
                        self.is_suppressed = None

                        self.group_address_xr = Mld.Active.DefaultContext.Groups.Group.GroupAddressXr()
                        self.group_address_xr.parent = self
                        self._children_name_map["group_address_xr"] = "group-address-xr"

                        self.last_reporter = Mld.Active.DefaultContext.Groups.Group.LastReporter()
                        self.last_reporter.parent = self
                        self._children_name_map["last_reporter"] = "last-reporter"

                        self.source_address = Mld.Active.DefaultContext.Groups.Group.SourceAddress()
                        self.source_address.parent = self
                        self._children_name_map["source_address"] = "source-address"
                        self._segment_path = lambda: "group"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/active/default-context/groups/%s" % self._segment_path()
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Mld.Active.DefaultContext.Groups.Group, ['group_address', 'interface_name', 'interface_name_xr', 'uptime', 'expiration_time', 'explicit_tracking_enabled', 'is_self_join', 'row_status', 'is_low_memory', 'router_filter_mode', 'older_host_version1_timer', 'older_host_version2_timer', 'is_added', 'is_suppressed'], name, value)


                    class GroupAddressXr(_Entity_):
                        """
                        Group Address
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Active.DefaultContext.Groups.Group.GroupAddressXr, self).__init__()

                            self.yang_name = "group-address-xr"
                            self.yang_parent_name = "group"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "group-address-xr"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/active/default-context/groups/group/%s" % self._segment_path()
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Active.DefaultContext.Groups.Group.GroupAddressXr, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Active.DefaultContext.Groups.Group.GroupAddressXr']['meta_info']


                    class LastReporter(_Entity_):
                        """
                        Last reporter address
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Active.DefaultContext.Groups.Group.LastReporter, self).__init__()

                            self.yang_name = "last-reporter"
                            self.yang_parent_name = "group"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "last-reporter"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/active/default-context/groups/group/%s" % self._segment_path()
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Active.DefaultContext.Groups.Group.LastReporter, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Active.DefaultContext.Groups.Group.LastReporter']['meta_info']


                    class SourceAddress(_Entity_):
                        """
                        Source Address
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Active.DefaultContext.Groups.Group.SourceAddress, self).__init__()

                            self.yang_name = "source-address"
                            self.yang_parent_name = "group"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "source-address"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/active/default-context/groups/group/%s" % self._segment_path()
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Active.DefaultContext.Groups.Group.SourceAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Active.DefaultContext.Groups.Group.SourceAddress']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Mld.Active.DefaultContext.Groups.Group']['meta_info']

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Mld.Active.DefaultContext.Groups']['meta_info']


            class GroupSummary(_Entity_):
                """
                IGMP Groups Summary
                
                .. attribute:: groutes
                
                	No. of (\*,G) routes
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: sg_routes
                
                	No. of (S,G) routes
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: group_count
                
                	Current groups accepted
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: is_low_memory
                
                	Node is running low on memory
                	**type**\: bool
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Mld.Active.DefaultContext.GroupSummary, self).__init__()

                    self.yang_name = "group-summary"
                    self.yang_parent_name = "default-context"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('groutes', (YLeaf(YType.uint32, 'groutes'), ['int'])),
                        ('sg_routes', (YLeaf(YType.uint32, 'sg-routes'), ['int'])),
                        ('group_count', (YLeaf(YType.uint32, 'group-count'), ['int'])),
                        ('is_low_memory', (YLeaf(YType.boolean, 'is-low-memory'), ['bool'])),
                    ])
                    self.groutes = None
                    self.sg_routes = None
                    self.group_count = None
                    self.is_low_memory = None
                    self._segment_path = lambda: "group-summary"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/active/default-context/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Mld.Active.DefaultContext.GroupSummary, ['groutes', 'sg_routes', 'group_count', 'is_low_memory'], name, value)

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Mld.Active.DefaultContext.GroupSummary']['meta_info']


            class IfrsInterfaceSummary(_Entity_):
                """
                IGMP IFRS Interface summary
                
                .. attribute:: interface_count
                
                	Interface Count
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: configuration_count
                
                	Configuration count
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Mld.Active.DefaultContext.IfrsInterfaceSummary, self).__init__()

                    self.yang_name = "ifrs-interface-summary"
                    self.yang_parent_name = "default-context"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('interface_count', (YLeaf(YType.uint32, 'interface-count'), ['int'])),
                        ('configuration_count', (YLeaf(YType.uint32, 'configuration-count'), ['int'])),
                    ])
                    self.interface_count = None
                    self.configuration_count = None
                    self._segment_path = lambda: "ifrs-interface-summary"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/active/default-context/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Mld.Active.DefaultContext.IfrsInterfaceSummary, ['interface_count', 'configuration_count'], name, value)

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Mld.Active.DefaultContext.IfrsInterfaceSummary']['meta_info']


            class GlobalInterfaceTable(_Entity_):
                """
                IGMP Global Interface 
                
                .. attribute:: interface
                
                	IGMP Interface
                	**type**\: list of  		 :py:class:`Interface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.GlobalInterfaceTable.Interface>`
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Mld.Active.DefaultContext.GlobalInterfaceTable, self).__init__()

                    self.yang_name = "global-interface-table"
                    self.yang_parent_name = "default-context"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("interface", ("interface", Mld.Active.DefaultContext.GlobalInterfaceTable.Interface))])
                    self._leafs = OrderedDict()

                    self.interface = YList(self)
                    self._segment_path = lambda: "global-interface-table"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/active/default-context/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Mld.Active.DefaultContext.GlobalInterfaceTable, [], name, value)


                class Interface(_Entity_):
                    """
                    IGMP Interface
                    
                    .. attribute:: interface_name  (key)
                    
                    	Interface Name
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: address
                    
                    	IP address
                    	**type**\:  :py:class:`Address <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.GlobalInterfaceTable.Interface.Address>`
                    
                    	**config**\: False
                    
                    .. attribute:: querier_address
                    
                    	Address of the Querier
                    	**type**\:  :py:class:`QuerierAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.GlobalInterfaceTable.Interface.QuerierAddress>`
                    
                    	**config**\: False
                    
                    .. attribute:: subscriber_address
                    
                    	Address of subscriber
                    	**type**\:  :py:class:`SubscriberAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.GlobalInterfaceTable.Interface.SubscriberAddress>`
                    
                    	**config**\: False
                    
                    .. attribute:: interface_name_xr
                    
                    	Interface
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: state
                    
                    	Interface state
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: prefix_length
                    
                    	Prefix length
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_interface_up
                    
                    	Is interface up
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_ip_enabled
                    
                    	Is IP enabled
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_router_enabled
                    
                    	Is Router functionality enabled
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: igmp_version
                    
                    	IGMP Router version
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    	**config**\: False
                    
                    .. attribute:: host_version
                    
                    	IGMP Host version
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    	**config**\: False
                    
                    .. attribute:: query_interval
                    
                    	Query Interval value in seconds
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    	**units**\: second
                    
                    .. attribute:: query_timeout
                    
                    	Query Timeout value
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    .. attribute:: query_maximum_response_time
                    
                    	Max Response Timeout value
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    .. attribute:: last_member_query_interval
                    
                    	Last Member Query Interval
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    .. attribute:: group_joins
                    
                    	No. of group joins
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: group_leaves
                    
                    	No. of group leaves
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_querier
                    
                    	Are we querier
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: total_active_groups
                    
                    	Actual number of groups on interface
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: robustness
                    
                    	Robustness Variable value
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: proxy_interface
                    
                    	Proxy interface index
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: querier_uptime
                    
                    	Time since the last querier took over
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    .. attribute:: las_ll_registration_count
                    
                    	LAS reg count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_get_address_count
                    
                    	LAS get addr count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_update_count
                    
                    	LAS Update count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_ll_remove_update_count
                    
                    	LAS LL remove update count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_ll_add_update_count
                    
                    	LAS LL add update count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_null_update_count
                    
                    	LAS Null update count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_unregistration_count
                    
                    	LAS unreg count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_las_request
                    
                    	LAS req
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_las_registered
                    
                    	LAS registered
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: vrf_id
                    
                    	VRF id
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: mte_vrf_id
                    
                    	MTE VRF id
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: location
                    
                    	Location
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: mtu
                    
                    	MTU
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: vrf_state
                    
                    	Vrf State
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_configurationverify
                    
                    	CFG verify
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: configurationvrf_set
                    
                    	CFG vrf set
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: configurationvrf_error
                    
                    	CFG vrf error
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: configuration_mcast_vrf_set
                    
                    	Is mcast set
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: configuration_mcast_vrf_error
                    
                    	Is mcast error
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_im_state_registered
                    
                    	Im state registered
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_subscriber
                    
                    	Subscriber interface
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: subscriber_mode
                    
                    	Subscriber mode
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_identity_present
                    
                    	Subscriber ID or Address available from AAA
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: subscriber_id
                    
                    	ID string of subscriber
                    	**type**\: str
                    
                    	**length:** 0..257
                    
                    	**config**\: False
                    
                    .. attribute:: parent_ifhandle
                    
                    	Parent If Handle
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: time_since_last_query_in_seconds
                    
                    	Time elapsed since last query
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: time_since_last_report_in_seconds
                    
                    	Time elapsed since last report
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: router_uptime_in_seconds
                    
                    	Uptime since router enabled event
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: mte_tuple_count
                    
                    	MTE Tuple count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Mld.Active.DefaultContext.GlobalInterfaceTable.Interface, self).__init__()

                        self.yang_name = "interface"
                        self.yang_parent_name = "global-interface-table"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['interface_name']
                        self._child_classes = OrderedDict([("address", ("address", Mld.Active.DefaultContext.GlobalInterfaceTable.Interface.Address)), ("querier-address", ("querier_address", Mld.Active.DefaultContext.GlobalInterfaceTable.Interface.QuerierAddress)), ("subscriber-address", ("subscriber_address", Mld.Active.DefaultContext.GlobalInterfaceTable.Interface.SubscriberAddress))])
                        self._leafs = OrderedDict([
                            ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                            ('interface_name_xr', (YLeaf(YType.str, 'interface-name-xr'), ['str'])),
                            ('state', (YLeaf(YType.uint32, 'state'), ['int'])),
                            ('prefix_length', (YLeaf(YType.uint32, 'prefix-length'), ['int'])),
                            ('is_interface_up', (YLeaf(YType.boolean, 'is-interface-up'), ['bool'])),
                            ('is_ip_enabled', (YLeaf(YType.boolean, 'is-ip-enabled'), ['bool'])),
                            ('is_router_enabled', (YLeaf(YType.boolean, 'is-router-enabled'), ['bool'])),
                            ('igmp_version', (YLeaf(YType.uint8, 'igmp-version'), ['int'])),
                            ('host_version', (YLeaf(YType.uint8, 'host-version'), ['int'])),
                            ('query_interval', (YLeaf(YType.uint16, 'query-interval'), ['int'])),
                            ('query_timeout', (YLeaf(YType.uint16, 'query-timeout'), ['int'])),
                            ('query_maximum_response_time', (YLeaf(YType.uint16, 'query-maximum-response-time'), ['int'])),
                            ('last_member_query_interval', (YLeaf(YType.uint16, 'last-member-query-interval'), ['int'])),
                            ('group_joins', (YLeaf(YType.uint32, 'group-joins'), ['int'])),
                            ('group_leaves', (YLeaf(YType.uint32, 'group-leaves'), ['int'])),
                            ('is_querier', (YLeaf(YType.boolean, 'is-querier'), ['bool'])),
                            ('total_active_groups', (YLeaf(YType.uint32, 'total-active-groups'), ['int'])),
                            ('robustness', (YLeaf(YType.uint32, 'robustness'), ['int'])),
                            ('proxy_interface', (YLeaf(YType.str, 'proxy-interface'), ['str'])),
                            ('querier_uptime', (YLeaf(YType.uint16, 'querier-uptime'), ['int'])),
                            ('las_ll_registration_count', (YLeaf(YType.uint32, 'las-ll-registration-count'), ['int'])),
                            ('las_get_address_count', (YLeaf(YType.uint32, 'las-get-address-count'), ['int'])),
                            ('las_update_count', (YLeaf(YType.uint32, 'las-update-count'), ['int'])),
                            ('las_ll_remove_update_count', (YLeaf(YType.uint32, 'las-ll-remove-update-count'), ['int'])),
                            ('las_ll_add_update_count', (YLeaf(YType.uint32, 'las-ll-add-update-count'), ['int'])),
                            ('las_null_update_count', (YLeaf(YType.uint32, 'las-null-update-count'), ['int'])),
                            ('las_unregistration_count', (YLeaf(YType.uint32, 'las-unregistration-count'), ['int'])),
                            ('is_las_request', (YLeaf(YType.boolean, 'is-las-request'), ['bool'])),
                            ('is_las_registered', (YLeaf(YType.boolean, 'is-las-registered'), ['bool'])),
                            ('vrf_id', (YLeaf(YType.uint32, 'vrf-id'), ['int'])),
                            ('mte_vrf_id', (YLeaf(YType.uint32, 'mte-vrf-id'), ['int'])),
                            ('location', (YLeaf(YType.uint32, 'location'), ['int'])),
                            ('mtu', (YLeaf(YType.uint32, 'mtu'), ['int'])),
                            ('vrf_state', (YLeaf(YType.uint32, 'vrf-state'), ['int'])),
                            ('is_configurationverify', (YLeaf(YType.boolean, 'is-configurationverify'), ['bool'])),
                            ('configurationvrf_set', (YLeaf(YType.boolean, 'configurationvrf-set'), ['bool'])),
                            ('configurationvrf_error', (YLeaf(YType.boolean, 'configurationvrf-error'), ['bool'])),
                            ('configuration_mcast_vrf_set', (YLeaf(YType.boolean, 'configuration-mcast-vrf-set'), ['bool'])),
                            ('configuration_mcast_vrf_error', (YLeaf(YType.boolean, 'configuration-mcast-vrf-error'), ['bool'])),
                            ('is_im_state_registered', (YLeaf(YType.boolean, 'is-im-state-registered'), ['bool'])),
                            ('is_subscriber', (YLeaf(YType.boolean, 'is-subscriber'), ['bool'])),
                            ('subscriber_mode', (YLeaf(YType.uint32, 'subscriber-mode'), ['int'])),
                            ('is_identity_present', (YLeaf(YType.boolean, 'is-identity-present'), ['bool'])),
                            ('subscriber_id', (YLeaf(YType.str, 'subscriber-id'), ['str'])),
                            ('parent_ifhandle', (YLeaf(YType.str, 'parent-ifhandle'), ['str'])),
                            ('time_since_last_query_in_seconds', (YLeaf(YType.uint32, 'time-since-last-query-in-seconds'), ['int'])),
                            ('time_since_last_report_in_seconds', (YLeaf(YType.uint32, 'time-since-last-report-in-seconds'), ['int'])),
                            ('router_uptime_in_seconds', (YLeaf(YType.uint32, 'router-uptime-in-seconds'), ['int'])),
                            ('mte_tuple_count', (YLeaf(YType.uint32, 'mte-tuple-count'), ['int'])),
                        ])
                        self.interface_name = None
                        self.interface_name_xr = None
                        self.state = None
                        self.prefix_length = None
                        self.is_interface_up = None
                        self.is_ip_enabled = None
                        self.is_router_enabled = None
                        self.igmp_version = None
                        self.host_version = None
                        self.query_interval = None
                        self.query_timeout = None
                        self.query_maximum_response_time = None
                        self.last_member_query_interval = None
                        self.group_joins = None
                        self.group_leaves = None
                        self.is_querier = None
                        self.total_active_groups = None
                        self.robustness = None
                        self.proxy_interface = None
                        self.querier_uptime = None
                        self.las_ll_registration_count = None
                        self.las_get_address_count = None
                        self.las_update_count = None
                        self.las_ll_remove_update_count = None
                        self.las_ll_add_update_count = None
                        self.las_null_update_count = None
                        self.las_unregistration_count = None
                        self.is_las_request = None
                        self.is_las_registered = None
                        self.vrf_id = None
                        self.mte_vrf_id = None
                        self.location = None
                        self.mtu = None
                        self.vrf_state = None
                        self.is_configurationverify = None
                        self.configurationvrf_set = None
                        self.configurationvrf_error = None
                        self.configuration_mcast_vrf_set = None
                        self.configuration_mcast_vrf_error = None
                        self.is_im_state_registered = None
                        self.is_subscriber = None
                        self.subscriber_mode = None
                        self.is_identity_present = None
                        self.subscriber_id = None
                        self.parent_ifhandle = None
                        self.time_since_last_query_in_seconds = None
                        self.time_since_last_report_in_seconds = None
                        self.router_uptime_in_seconds = None
                        self.mte_tuple_count = None

                        self.address = Mld.Active.DefaultContext.GlobalInterfaceTable.Interface.Address()
                        self.address.parent = self
                        self._children_name_map["address"] = "address"

                        self.querier_address = Mld.Active.DefaultContext.GlobalInterfaceTable.Interface.QuerierAddress()
                        self.querier_address.parent = self
                        self._children_name_map["querier_address"] = "querier-address"

                        self.subscriber_address = Mld.Active.DefaultContext.GlobalInterfaceTable.Interface.SubscriberAddress()
                        self.subscriber_address.parent = self
                        self._children_name_map["subscriber_address"] = "subscriber-address"
                        self._segment_path = lambda: "interface" + "[interface-name='" + str(self.interface_name) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/active/default-context/global-interface-table/%s" % self._segment_path()
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Mld.Active.DefaultContext.GlobalInterfaceTable.Interface, ['interface_name', 'interface_name_xr', 'state', 'prefix_length', 'is_interface_up', 'is_ip_enabled', 'is_router_enabled', 'igmp_version', 'host_version', 'query_interval', 'query_timeout', 'query_maximum_response_time', 'last_member_query_interval', 'group_joins', 'group_leaves', 'is_querier', 'total_active_groups', 'robustness', 'proxy_interface', 'querier_uptime', 'las_ll_registration_count', 'las_get_address_count', 'las_update_count', 'las_ll_remove_update_count', 'las_ll_add_update_count', 'las_null_update_count', 'las_unregistration_count', 'is_las_request', 'is_las_registered', 'vrf_id', 'mte_vrf_id', 'location', 'mtu', 'vrf_state', 'is_configurationverify', 'configurationvrf_set', 'configurationvrf_error', 'configuration_mcast_vrf_set', 'configuration_mcast_vrf_error', 'is_im_state_registered', 'is_subscriber', 'subscriber_mode', 'is_identity_present', 'subscriber_id', 'parent_ifhandle', 'time_since_last_query_in_seconds', 'time_since_last_report_in_seconds', 'router_uptime_in_seconds', 'mte_tuple_count'], name, value)


                    class Address(_Entity_):
                        """
                        IP address
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Active.DefaultContext.GlobalInterfaceTable.Interface.Address, self).__init__()

                            self.yang_name = "address"
                            self.yang_parent_name = "interface"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "address"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Active.DefaultContext.GlobalInterfaceTable.Interface.Address, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Active.DefaultContext.GlobalInterfaceTable.Interface.Address']['meta_info']


                    class QuerierAddress(_Entity_):
                        """
                        Address of the Querier
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Active.DefaultContext.GlobalInterfaceTable.Interface.QuerierAddress, self).__init__()

                            self.yang_name = "querier-address"
                            self.yang_parent_name = "interface"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "querier-address"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Active.DefaultContext.GlobalInterfaceTable.Interface.QuerierAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Active.DefaultContext.GlobalInterfaceTable.Interface.QuerierAddress']['meta_info']


                    class SubscriberAddress(_Entity_):
                        """
                        Address of subscriber
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Active.DefaultContext.GlobalInterfaceTable.Interface.SubscriberAddress, self).__init__()

                            self.yang_name = "subscriber-address"
                            self.yang_parent_name = "interface"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "subscriber-address"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Active.DefaultContext.GlobalInterfaceTable.Interface.SubscriberAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Active.DefaultContext.GlobalInterfaceTable.Interface.SubscriberAddress']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Mld.Active.DefaultContext.GlobalInterfaceTable.Interface']['meta_info']

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Mld.Active.DefaultContext.GlobalInterfaceTable']['meta_info']


            class SsmMapDetails(_Entity_):
                """
                SSM Map Detail
                
                .. attribute:: ssm_map_detail
                
                	SSM Map Detail Table information
                	**type**\: list of  		 :py:class:`SsmMapDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.SsmMapDetails.SsmMapDetail>`
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Mld.Active.DefaultContext.SsmMapDetails, self).__init__()

                    self.yang_name = "ssm-map-details"
                    self.yang_parent_name = "default-context"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("ssm-map-detail", ("ssm_map_detail", Mld.Active.DefaultContext.SsmMapDetails.SsmMapDetail))])
                    self._leafs = OrderedDict()

                    self.ssm_map_detail = YList(self)
                    self._segment_path = lambda: "ssm-map-details"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/active/default-context/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Mld.Active.DefaultContext.SsmMapDetails, [], name, value)


                class SsmMapDetail(_Entity_):
                    """
                    SSM Map Detail Table information
                    
                    .. attribute:: ssm_map_type
                    
                    	SSM Map Type
                    	**type**\:  :py:class:`IgmpssmMap <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpssmMap>`
                    
                    	**config**\: False
                    
                    .. attribute:: group_address
                    
                    	Group address
                    	**type**\: union of the below types:
                    
                    		**type**\: str
                    
                    			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    		**type**\: str
                    
                    			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    	**config**\: False
                    
                    .. attribute:: map_info
                    
                    	Basic Map Info
                    	**type**\:  :py:class:`MapInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.SsmMapDetails.SsmMapDetail.MapInfo>`
                    
                    	**config**\: False
                    
                    .. attribute:: expiration_time
                    
                    	Expiration Time in Seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    	**units**\: second
                    
                    .. attribute:: response_pending
                    
                    	Response Pending
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: query_interval
                    
                    	Query interval
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: elapsed_time
                    
                    	Elapsed time
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**config**\: False
                    
                    .. attribute:: sources
                    
                    	List of sources
                    	**type**\: list of  		 :py:class:`Sources <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.SsmMapDetails.SsmMapDetail.Sources>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Mld.Active.DefaultContext.SsmMapDetails.SsmMapDetail, self).__init__()

                        self.yang_name = "ssm-map-detail"
                        self.yang_parent_name = "ssm-map-details"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("map-info", ("map_info", Mld.Active.DefaultContext.SsmMapDetails.SsmMapDetail.MapInfo)), ("sources", ("sources", Mld.Active.DefaultContext.SsmMapDetails.SsmMapDetail.Sources))])
                        self._leafs = OrderedDict([
                            ('ssm_map_type', (YLeaf(YType.enumeration, 'ssm-map-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpssmMap', '')])),
                            ('group_address', (YLeaf(YType.str, 'group-address'), ['str','str'])),
                            ('expiration_time', (YLeaf(YType.uint32, 'expiration-time'), ['int'])),
                            ('response_pending', (YLeaf(YType.boolean, 'response-pending'), ['bool'])),
                            ('query_interval', (YLeaf(YType.uint32, 'query-interval'), ['int'])),
                            ('elapsed_time', (YLeaf(YType.uint64, 'elapsed-time'), ['int'])),
                        ])
                        self.ssm_map_type = None
                        self.group_address = None
                        self.expiration_time = None
                        self.response_pending = None
                        self.query_interval = None
                        self.elapsed_time = None

                        self.map_info = Mld.Active.DefaultContext.SsmMapDetails.SsmMapDetail.MapInfo()
                        self.map_info.parent = self
                        self._children_name_map["map_info"] = "map-info"

                        self.sources = YList(self)
                        self._segment_path = lambda: "ssm-map-detail"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/active/default-context/ssm-map-details/%s" % self._segment_path()
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Mld.Active.DefaultContext.SsmMapDetails.SsmMapDetail, ['ssm_map_type', 'group_address', 'expiration_time', 'response_pending', 'query_interval', 'elapsed_time'], name, value)


                    class MapInfo(_Entity_):
                        """
                        Basic Map Info
                        
                        .. attribute:: group_address_xr
                        
                        	Group Address
                        	**type**\:  :py:class:`GroupAddressXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.SsmMapDetails.SsmMapDetail.MapInfo.GroupAddressXr>`
                        
                        	**config**\: False
                        
                        .. attribute:: map_type
                        
                        	Map Type of group
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: source_counts
                        
                        	Count of Sources
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Active.DefaultContext.SsmMapDetails.SsmMapDetail.MapInfo, self).__init__()

                            self.yang_name = "map-info"
                            self.yang_parent_name = "ssm-map-detail"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("group-address-xr", ("group_address_xr", Mld.Active.DefaultContext.SsmMapDetails.SsmMapDetail.MapInfo.GroupAddressXr))])
                            self._leafs = OrderedDict([
                                ('map_type', (YLeaf(YType.uint32, 'map-type'), ['int'])),
                                ('source_counts', (YLeaf(YType.uint32, 'source-counts'), ['int'])),
                            ])
                            self.map_type = None
                            self.source_counts = None

                            self.group_address_xr = Mld.Active.DefaultContext.SsmMapDetails.SsmMapDetail.MapInfo.GroupAddressXr()
                            self.group_address_xr.parent = self
                            self._children_name_map["group_address_xr"] = "group-address-xr"
                            self._segment_path = lambda: "map-info"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/active/default-context/ssm-map-details/ssm-map-detail/%s" % self._segment_path()
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Active.DefaultContext.SsmMapDetails.SsmMapDetail.MapInfo, ['map_type', 'source_counts'], name, value)


                        class GroupAddressXr(_Entity_):
                            """
                            Group Address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Mld.Active.DefaultContext.SsmMapDetails.SsmMapDetail.MapInfo.GroupAddressXr, self).__init__()

                                self.yang_name = "group-address-xr"
                                self.yang_parent_name = "map-info"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "group-address-xr"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/active/default-context/ssm-map-details/ssm-map-detail/map-info/%s" % self._segment_path()
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Mld.Active.DefaultContext.SsmMapDetails.SsmMapDetail.MapInfo.GroupAddressXr, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Mld.Active.DefaultContext.SsmMapDetails.SsmMapDetail.MapInfo.GroupAddressXr']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Active.DefaultContext.SsmMapDetails.SsmMapDetail.MapInfo']['meta_info']


                    class Sources(_Entity_):
                        """
                        List of sources
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Active.DefaultContext.SsmMapDetails.SsmMapDetail.Sources, self).__init__()

                            self.yang_name = "sources"
                            self.yang_parent_name = "ssm-map-detail"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "sources"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/active/default-context/ssm-map-details/ssm-map-detail/%s" % self._segment_path()
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Active.DefaultContext.SsmMapDetails.SsmMapDetail.Sources, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Active.DefaultContext.SsmMapDetails.SsmMapDetail.Sources']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Mld.Active.DefaultContext.SsmMapDetails.SsmMapDetail']['meta_info']

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Mld.Active.DefaultContext.SsmMapDetails']['meta_info']


            class InterfaceStateOffs(_Entity_):
                """
                IGMP Interface state off
                
                .. attribute:: interface_state_off
                
                	IGMP Interface
                	**type**\: list of  		 :py:class:`InterfaceStateOff <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.InterfaceStateOffs.InterfaceStateOff>`
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Mld.Active.DefaultContext.InterfaceStateOffs, self).__init__()

                    self.yang_name = "interface-state-offs"
                    self.yang_parent_name = "default-context"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("interface-state-off", ("interface_state_off", Mld.Active.DefaultContext.InterfaceStateOffs.InterfaceStateOff))])
                    self._leafs = OrderedDict()

                    self.interface_state_off = YList(self)
                    self._segment_path = lambda: "interface-state-offs"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/active/default-context/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Mld.Active.DefaultContext.InterfaceStateOffs, [], name, value)


                class InterfaceStateOff(_Entity_):
                    """
                    IGMP Interface
                    
                    .. attribute:: interface_name  (key)
                    
                    	Interface Name
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: address
                    
                    	IP address
                    	**type**\:  :py:class:`Address <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.InterfaceStateOffs.InterfaceStateOff.Address>`
                    
                    	**config**\: False
                    
                    .. attribute:: querier_address
                    
                    	Address of the Querier
                    	**type**\:  :py:class:`QuerierAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.InterfaceStateOffs.InterfaceStateOff.QuerierAddress>`
                    
                    	**config**\: False
                    
                    .. attribute:: subscriber_address
                    
                    	Address of subscriber
                    	**type**\:  :py:class:`SubscriberAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Mld.Active.DefaultContext.InterfaceStateOffs.InterfaceStateOff.SubscriberAddress>`
                    
                    	**config**\: False
                    
                    .. attribute:: interface_name_xr
                    
                    	Interface
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: state
                    
                    	Interface state
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: prefix_length
                    
                    	Prefix length
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_interface_up
                    
                    	Is interface up
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_ip_enabled
                    
                    	Is IP enabled
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_router_enabled
                    
                    	Is Router functionality enabled
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: igmp_version
                    
                    	IGMP Router version
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    	**config**\: False
                    
                    .. attribute:: host_version
                    
                    	IGMP Host version
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    	**config**\: False
                    
                    .. attribute:: query_interval
                    
                    	Query Interval value in seconds
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    	**units**\: second
                    
                    .. attribute:: query_timeout
                    
                    	Query Timeout value
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    .. attribute:: query_maximum_response_time
                    
                    	Max Response Timeout value
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    .. attribute:: last_member_query_interval
                    
                    	Last Member Query Interval
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    .. attribute:: group_joins
                    
                    	No. of group joins
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: group_leaves
                    
                    	No. of group leaves
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_querier
                    
                    	Are we querier
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: total_active_groups
                    
                    	Actual number of groups on interface
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: robustness
                    
                    	Robustness Variable value
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: proxy_interface
                    
                    	Proxy interface index
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: querier_uptime
                    
                    	Time since the last querier took over
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    .. attribute:: las_ll_registration_count
                    
                    	LAS reg count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_get_address_count
                    
                    	LAS get addr count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_update_count
                    
                    	LAS Update count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_ll_remove_update_count
                    
                    	LAS LL remove update count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_ll_add_update_count
                    
                    	LAS LL add update count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_null_update_count
                    
                    	LAS Null update count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_unregistration_count
                    
                    	LAS unreg count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_las_request
                    
                    	LAS req
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_las_registered
                    
                    	LAS registered
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: vrf_id
                    
                    	VRF id
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: mte_vrf_id
                    
                    	MTE VRF id
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: location
                    
                    	Location
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: mtu
                    
                    	MTU
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: vrf_state
                    
                    	Vrf State
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_configurationverify
                    
                    	CFG verify
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: configurationvrf_set
                    
                    	CFG vrf set
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: configurationvrf_error
                    
                    	CFG vrf error
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: configuration_mcast_vrf_set
                    
                    	Is mcast set
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: configuration_mcast_vrf_error
                    
                    	Is mcast error
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_im_state_registered
                    
                    	Im state registered
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_subscriber
                    
                    	Subscriber interface
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: subscriber_mode
                    
                    	Subscriber mode
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_identity_present
                    
                    	Subscriber ID or Address available from AAA
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: subscriber_id
                    
                    	ID string of subscriber
                    	**type**\: str
                    
                    	**length:** 0..257
                    
                    	**config**\: False
                    
                    .. attribute:: parent_ifhandle
                    
                    	Parent If Handle
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: time_since_last_query_in_seconds
                    
                    	Time elapsed since last query
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: time_since_last_report_in_seconds
                    
                    	Time elapsed since last report
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: router_uptime_in_seconds
                    
                    	Uptime since router enabled event
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: mte_tuple_count
                    
                    	MTE Tuple count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Mld.Active.DefaultContext.InterfaceStateOffs.InterfaceStateOff, self).__init__()

                        self.yang_name = "interface-state-off"
                        self.yang_parent_name = "interface-state-offs"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['interface_name']
                        self._child_classes = OrderedDict([("address", ("address", Mld.Active.DefaultContext.InterfaceStateOffs.InterfaceStateOff.Address)), ("querier-address", ("querier_address", Mld.Active.DefaultContext.InterfaceStateOffs.InterfaceStateOff.QuerierAddress)), ("subscriber-address", ("subscriber_address", Mld.Active.DefaultContext.InterfaceStateOffs.InterfaceStateOff.SubscriberAddress))])
                        self._leafs = OrderedDict([
                            ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                            ('interface_name_xr', (YLeaf(YType.str, 'interface-name-xr'), ['str'])),
                            ('state', (YLeaf(YType.uint32, 'state'), ['int'])),
                            ('prefix_length', (YLeaf(YType.uint32, 'prefix-length'), ['int'])),
                            ('is_interface_up', (YLeaf(YType.boolean, 'is-interface-up'), ['bool'])),
                            ('is_ip_enabled', (YLeaf(YType.boolean, 'is-ip-enabled'), ['bool'])),
                            ('is_router_enabled', (YLeaf(YType.boolean, 'is-router-enabled'), ['bool'])),
                            ('igmp_version', (YLeaf(YType.uint8, 'igmp-version'), ['int'])),
                            ('host_version', (YLeaf(YType.uint8, 'host-version'), ['int'])),
                            ('query_interval', (YLeaf(YType.uint16, 'query-interval'), ['int'])),
                            ('query_timeout', (YLeaf(YType.uint16, 'query-timeout'), ['int'])),
                            ('query_maximum_response_time', (YLeaf(YType.uint16, 'query-maximum-response-time'), ['int'])),
                            ('last_member_query_interval', (YLeaf(YType.uint16, 'last-member-query-interval'), ['int'])),
                            ('group_joins', (YLeaf(YType.uint32, 'group-joins'), ['int'])),
                            ('group_leaves', (YLeaf(YType.uint32, 'group-leaves'), ['int'])),
                            ('is_querier', (YLeaf(YType.boolean, 'is-querier'), ['bool'])),
                            ('total_active_groups', (YLeaf(YType.uint32, 'total-active-groups'), ['int'])),
                            ('robustness', (YLeaf(YType.uint32, 'robustness'), ['int'])),
                            ('proxy_interface', (YLeaf(YType.str, 'proxy-interface'), ['str'])),
                            ('querier_uptime', (YLeaf(YType.uint16, 'querier-uptime'), ['int'])),
                            ('las_ll_registration_count', (YLeaf(YType.uint32, 'las-ll-registration-count'), ['int'])),
                            ('las_get_address_count', (YLeaf(YType.uint32, 'las-get-address-count'), ['int'])),
                            ('las_update_count', (YLeaf(YType.uint32, 'las-update-count'), ['int'])),
                            ('las_ll_remove_update_count', (YLeaf(YType.uint32, 'las-ll-remove-update-count'), ['int'])),
                            ('las_ll_add_update_count', (YLeaf(YType.uint32, 'las-ll-add-update-count'), ['int'])),
                            ('las_null_update_count', (YLeaf(YType.uint32, 'las-null-update-count'), ['int'])),
                            ('las_unregistration_count', (YLeaf(YType.uint32, 'las-unregistration-count'), ['int'])),
                            ('is_las_request', (YLeaf(YType.boolean, 'is-las-request'), ['bool'])),
                            ('is_las_registered', (YLeaf(YType.boolean, 'is-las-registered'), ['bool'])),
                            ('vrf_id', (YLeaf(YType.uint32, 'vrf-id'), ['int'])),
                            ('mte_vrf_id', (YLeaf(YType.uint32, 'mte-vrf-id'), ['int'])),
                            ('location', (YLeaf(YType.uint32, 'location'), ['int'])),
                            ('mtu', (YLeaf(YType.uint32, 'mtu'), ['int'])),
                            ('vrf_state', (YLeaf(YType.uint32, 'vrf-state'), ['int'])),
                            ('is_configurationverify', (YLeaf(YType.boolean, 'is-configurationverify'), ['bool'])),
                            ('configurationvrf_set', (YLeaf(YType.boolean, 'configurationvrf-set'), ['bool'])),
                            ('configurationvrf_error', (YLeaf(YType.boolean, 'configurationvrf-error'), ['bool'])),
                            ('configuration_mcast_vrf_set', (YLeaf(YType.boolean, 'configuration-mcast-vrf-set'), ['bool'])),
                            ('configuration_mcast_vrf_error', (YLeaf(YType.boolean, 'configuration-mcast-vrf-error'), ['bool'])),
                            ('is_im_state_registered', (YLeaf(YType.boolean, 'is-im-state-registered'), ['bool'])),
                            ('is_subscriber', (YLeaf(YType.boolean, 'is-subscriber'), ['bool'])),
                            ('subscriber_mode', (YLeaf(YType.uint32, 'subscriber-mode'), ['int'])),
                            ('is_identity_present', (YLeaf(YType.boolean, 'is-identity-present'), ['bool'])),
                            ('subscriber_id', (YLeaf(YType.str, 'subscriber-id'), ['str'])),
                            ('parent_ifhandle', (YLeaf(YType.str, 'parent-ifhandle'), ['str'])),
                            ('time_since_last_query_in_seconds', (YLeaf(YType.uint32, 'time-since-last-query-in-seconds'), ['int'])),
                            ('time_since_last_report_in_seconds', (YLeaf(YType.uint32, 'time-since-last-report-in-seconds'), ['int'])),
                            ('router_uptime_in_seconds', (YLeaf(YType.uint32, 'router-uptime-in-seconds'), ['int'])),
                            ('mte_tuple_count', (YLeaf(YType.uint32, 'mte-tuple-count'), ['int'])),
                        ])
                        self.interface_name = None
                        self.interface_name_xr = None
                        self.state = None
                        self.prefix_length = None
                        self.is_interface_up = None
                        self.is_ip_enabled = None
                        self.is_router_enabled = None
                        self.igmp_version = None
                        self.host_version = None
                        self.query_interval = None
                        self.query_timeout = None
                        self.query_maximum_response_time = None
                        self.last_member_query_interval = None
                        self.group_joins = None
                        self.group_leaves = None
                        self.is_querier = None
                        self.total_active_groups = None
                        self.robustness = None
                        self.proxy_interface = None
                        self.querier_uptime = None
                        self.las_ll_registration_count = None
                        self.las_get_address_count = None
                        self.las_update_count = None
                        self.las_ll_remove_update_count = None
                        self.las_ll_add_update_count = None
                        self.las_null_update_count = None
                        self.las_unregistration_count = None
                        self.is_las_request = None
                        self.is_las_registered = None
                        self.vrf_id = None
                        self.mte_vrf_id = None
                        self.location = None
                        self.mtu = None
                        self.vrf_state = None
                        self.is_configurationverify = None
                        self.configurationvrf_set = None
                        self.configurationvrf_error = None
                        self.configuration_mcast_vrf_set = None
                        self.configuration_mcast_vrf_error = None
                        self.is_im_state_registered = None
                        self.is_subscriber = None
                        self.subscriber_mode = None
                        self.is_identity_present = None
                        self.subscriber_id = None
                        self.parent_ifhandle = None
                        self.time_since_last_query_in_seconds = None
                        self.time_since_last_report_in_seconds = None
                        self.router_uptime_in_seconds = None
                        self.mte_tuple_count = None

                        self.address = Mld.Active.DefaultContext.InterfaceStateOffs.InterfaceStateOff.Address()
                        self.address.parent = self
                        self._children_name_map["address"] = "address"

                        self.querier_address = Mld.Active.DefaultContext.InterfaceStateOffs.InterfaceStateOff.QuerierAddress()
                        self.querier_address.parent = self
                        self._children_name_map["querier_address"] = "querier-address"

                        self.subscriber_address = Mld.Active.DefaultContext.InterfaceStateOffs.InterfaceStateOff.SubscriberAddress()
                        self.subscriber_address.parent = self
                        self._children_name_map["subscriber_address"] = "subscriber-address"
                        self._segment_path = lambda: "interface-state-off" + "[interface-name='" + str(self.interface_name) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:mld/active/default-context/interface-state-offs/%s" % self._segment_path()
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Mld.Active.DefaultContext.InterfaceStateOffs.InterfaceStateOff, ['interface_name', 'interface_name_xr', 'state', 'prefix_length', 'is_interface_up', 'is_ip_enabled', 'is_router_enabled', 'igmp_version', 'host_version', 'query_interval', 'query_timeout', 'query_maximum_response_time', 'last_member_query_interval', 'group_joins', 'group_leaves', 'is_querier', 'total_active_groups', 'robustness', 'proxy_interface', 'querier_uptime', 'las_ll_registration_count', 'las_get_address_count', 'las_update_count', 'las_ll_remove_update_count', 'las_ll_add_update_count', 'las_null_update_count', 'las_unregistration_count', 'is_las_request', 'is_las_registered', 'vrf_id', 'mte_vrf_id', 'location', 'mtu', 'vrf_state', 'is_configurationverify', 'configurationvrf_set', 'configurationvrf_error', 'configuration_mcast_vrf_set', 'configuration_mcast_vrf_error', 'is_im_state_registered', 'is_subscriber', 'subscriber_mode', 'is_identity_present', 'subscriber_id', 'parent_ifhandle', 'time_since_last_query_in_seconds', 'time_since_last_report_in_seconds', 'router_uptime_in_seconds', 'mte_tuple_count'], name, value)


                    class Address(_Entity_):
                        """
                        IP address
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Active.DefaultContext.InterfaceStateOffs.InterfaceStateOff.Address, self).__init__()

                            self.yang_name = "address"
                            self.yang_parent_name = "interface-state-off"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "address"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Active.DefaultContext.InterfaceStateOffs.InterfaceStateOff.Address, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Active.DefaultContext.InterfaceStateOffs.InterfaceStateOff.Address']['meta_info']


                    class QuerierAddress(_Entity_):
                        """
                        Address of the Querier
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Active.DefaultContext.InterfaceStateOffs.InterfaceStateOff.QuerierAddress, self).__init__()

                            self.yang_name = "querier-address"
                            self.yang_parent_name = "interface-state-off"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "querier-address"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Active.DefaultContext.InterfaceStateOffs.InterfaceStateOff.QuerierAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Active.DefaultContext.InterfaceStateOffs.InterfaceStateOff.QuerierAddress']['meta_info']


                    class SubscriberAddress(_Entity_):
                        """
                        Address of subscriber
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Mld.Active.DefaultContext.InterfaceStateOffs.InterfaceStateOff.SubscriberAddress, self).__init__()

                            self.yang_name = "subscriber-address"
                            self.yang_parent_name = "interface-state-off"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "subscriber-address"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Mld.Active.DefaultContext.InterfaceStateOffs.InterfaceStateOff.SubscriberAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Mld.Active.DefaultContext.InterfaceStateOffs.InterfaceStateOff.SubscriberAddress']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Mld.Active.DefaultContext.InterfaceStateOffs.InterfaceStateOff']['meta_info']

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Mld.Active.DefaultContext.InterfaceStateOffs']['meta_info']

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                return meta._meta_table['Mld.Active.DefaultContext']['meta_info']

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
            return meta._meta_table['Mld.Active']['meta_info']

    def clone_ptr(self):
        self._top_entity = Mld()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
        return meta._meta_table['Mld']['meta_info']


class Igmp(_Entity_):
    """
    igmp
    
    .. attribute:: standby
    
    	Standby Process
    	**type**\:  :py:class:`Standby <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby>`
    
    	**config**\: False
    
    .. attribute:: active
    
    	Active Process
    	**type**\:  :py:class:`Active <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active>`
    
    	**config**\: False
    
    

    """

    _prefix = 'ipv4-igmp-oper'
    _revision = '2018-01-31'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(Igmp, self).__init__()
        self._top_entity = None

        self.yang_name = "igmp"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-igmp-oper"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([("standby", ("standby", Igmp.Standby)), ("active", ("active", Igmp.Active))])
        self._leafs = OrderedDict()

        self.standby = Igmp.Standby()
        self.standby.parent = self
        self._children_name_map["standby"] = "standby"

        self.active = Igmp.Active()
        self.active.parent = self
        self._children_name_map["active"] = "active"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp"
        self._is_frozen = True

    def __setattr__(self, name, value):
        self._perform_setattr(Igmp, [], name, value)


    class Standby(_Entity_):
        """
        Standby Process
        
        .. attribute:: vrfs
        
        	VRF Table
        	**type**\:  :py:class:`Vrfs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs>`
        
        	**config**\: False
        
        .. attribute:: process
        
        	Process
        	**type**\:  :py:class:`Process <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Process>`
        
        	**config**\: False
        
        .. attribute:: default_context
        
        	Default Context
        	**type**\:  :py:class:`DefaultContext <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext>`
        
        	**config**\: False
        
        

        """

        _prefix = 'ipv4-igmp-oper'
        _revision = '2018-01-31'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(Igmp.Standby, self).__init__()

            self.yang_name = "standby"
            self.yang_parent_name = "igmp"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([("vrfs", ("vrfs", Igmp.Standby.Vrfs)), ("process", ("process", Igmp.Standby.Process)), ("default-context", ("default_context", Igmp.Standby.DefaultContext))])
            self._leafs = OrderedDict()

            self.vrfs = Igmp.Standby.Vrfs()
            self.vrfs.parent = self
            self._children_name_map["vrfs"] = "vrfs"

            self.process = Igmp.Standby.Process()
            self.process.parent = self
            self._children_name_map["process"] = "process"

            self.default_context = Igmp.Standby.DefaultContext()
            self.default_context.parent = self
            self._children_name_map["default_context"] = "default-context"
            self._segment_path = lambda: "standby"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(Igmp.Standby, [], name, value)


        class Vrfs(_Entity_):
            """
            VRF Table
            
            .. attribute:: vrf
            
            	VRF table Names
            	**type**\: list of  		 :py:class:`Vrf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf>`
            
            	**config**\: False
            
            

            """

            _prefix = 'ipv4-igmp-oper'
            _revision = '2018-01-31'

            def __init__(self):
                if sys.version_info > (3,):
                    super().__init__()
                else:
                    super(Igmp.Standby.Vrfs, self).__init__()

                self.yang_name = "vrfs"
                self.yang_parent_name = "standby"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("vrf", ("vrf", Igmp.Standby.Vrfs.Vrf))])
                self._leafs = OrderedDict()

                self.vrf = YList(self)
                self._segment_path = lambda: "vrfs"
                self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/standby/%s" % self._segment_path()
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(Igmp.Standby.Vrfs, [], name, value)


            class Vrf(_Entity_):
                """
                VRF table Names
                
                .. attribute:: vrf_name  (key)
                
                	VRF name
                	**type**\: str
                
                	**length:** 1..32
                
                	**config**\: False
                
                .. attribute:: summary
                
                	IGMP Summary Information
                	**type**\:  :py:class:`Summary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.Summary>`
                
                	**config**\: False
                
                .. attribute:: interface_state_ons
                
                	IGMP Interface state on
                	**type**\:  :py:class:`InterfaceStateOns <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.InterfaceStateOns>`
                
                	**config**\: False
                
                .. attribute:: detail_groups
                
                	IGMP Detail Group Database
                	**type**\:  :py:class:`DetailGroups <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.DetailGroups>`
                
                	**config**\: False
                
                .. attribute:: non_active_groups
                
                	IGMP Non\-Active Groups Information
                	**type**\:  :py:class:`NonActiveGroups <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.NonActiveGroups>`
                
                	**config**\: False
                
                .. attribute:: ssm_maps
                
                	SSM Map Table
                	**type**\:  :py:class:`SsmMaps <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.SsmMaps>`
                
                	**config**\: False
                
                .. attribute:: explicit_groups
                
                	IGMP Explicit Group Database
                	**type**\:  :py:class:`ExplicitGroups <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.ExplicitGroups>`
                
                	**config**\: False
                
                .. attribute:: interface_table
                
                	IGMP Interface specific Table
                	**type**\:  :py:class:`InterfaceTable <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.InterfaceTable>`
                
                	**config**\: False
                
                .. attribute:: interface_unicast_qos_adjusts
                
                	IGMP Interface Unicast\-Qos\-Adjust
                	**type**\:  :py:class:`InterfaceUnicastQosAdjusts <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.InterfaceUnicastQosAdjusts>`
                
                	**config**\: False
                
                .. attribute:: ranges
                
                	Range table
                	**type**\:  :py:class:`Ranges <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.Ranges>`
                
                	**config**\: False
                
                .. attribute:: ifrs_interfaces
                
                	IGMP Interface specific
                	**type**\:  :py:class:`IfrsInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.IfrsInterfaces>`
                
                	**config**\: False
                
                .. attribute:: traffic_counters
                
                	IGMP Message Traffic Counters
                	**type**\:  :py:class:`TrafficCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.TrafficCounters>`
                
                	**config**\: False
                
                .. attribute:: groups
                
                	IGMP Group Database Table
                	**type**\:  :py:class:`Groups <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.Groups>`
                
                	**config**\: False
                
                .. attribute:: group_summary
                
                	IGMP Groups Summary
                	**type**\:  :py:class:`GroupSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.GroupSummary>`
                
                	**config**\: False
                
                .. attribute:: ifrs_interface_summary
                
                	IGMP IFRS Interface summary
                	**type**\:  :py:class:`IfrsInterfaceSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.IfrsInterfaceSummary>`
                
                	**config**\: False
                
                .. attribute:: global_interface_table
                
                	IGMP Global Interface 
                	**type**\:  :py:class:`GlobalInterfaceTable <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.GlobalInterfaceTable>`
                
                	**config**\: False
                
                .. attribute:: ssm_map_details
                
                	SSM Map Detail
                	**type**\:  :py:class:`SsmMapDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.SsmMapDetails>`
                
                	**config**\: False
                
                .. attribute:: interface_state_offs
                
                	IGMP Interface state off
                	**type**\:  :py:class:`InterfaceStateOffs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.InterfaceStateOffs>`
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Igmp.Standby.Vrfs.Vrf, self).__init__()

                    self.yang_name = "vrf"
                    self.yang_parent_name = "vrfs"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = ['vrf_name']
                    self._child_classes = OrderedDict([("summary", ("summary", Igmp.Standby.Vrfs.Vrf.Summary)), ("interface-state-ons", ("interface_state_ons", Igmp.Standby.Vrfs.Vrf.InterfaceStateOns)), ("detail-groups", ("detail_groups", Igmp.Standby.Vrfs.Vrf.DetailGroups)), ("non-active-groups", ("non_active_groups", Igmp.Standby.Vrfs.Vrf.NonActiveGroups)), ("ssm-maps", ("ssm_maps", Igmp.Standby.Vrfs.Vrf.SsmMaps)), ("explicit-groups", ("explicit_groups", Igmp.Standby.Vrfs.Vrf.ExplicitGroups)), ("interface-table", ("interface_table", Igmp.Standby.Vrfs.Vrf.InterfaceTable)), ("interface-unicast-qos-adjusts", ("interface_unicast_qos_adjusts", Igmp.Standby.Vrfs.Vrf.InterfaceUnicastQosAdjusts)), ("ranges", ("ranges", Igmp.Standby.Vrfs.Vrf.Ranges)), ("ifrs-interfaces", ("ifrs_interfaces", Igmp.Standby.Vrfs.Vrf.IfrsInterfaces)), ("traffic-counters", ("traffic_counters", Igmp.Standby.Vrfs.Vrf.TrafficCounters)), ("groups", ("groups", Igmp.Standby.Vrfs.Vrf.Groups)), ("group-summary", ("group_summary", Igmp.Standby.Vrfs.Vrf.GroupSummary)), ("ifrs-interface-summary", ("ifrs_interface_summary", Igmp.Standby.Vrfs.Vrf.IfrsInterfaceSummary)), ("global-interface-table", ("global_interface_table", Igmp.Standby.Vrfs.Vrf.GlobalInterfaceTable)), ("ssm-map-details", ("ssm_map_details", Igmp.Standby.Vrfs.Vrf.SsmMapDetails)), ("interface-state-offs", ("interface_state_offs", Igmp.Standby.Vrfs.Vrf.InterfaceStateOffs))])
                    self._leafs = OrderedDict([
                        ('vrf_name', (YLeaf(YType.str, 'vrf-name'), ['str'])),
                    ])
                    self.vrf_name = None

                    self.summary = Igmp.Standby.Vrfs.Vrf.Summary()
                    self.summary.parent = self
                    self._children_name_map["summary"] = "summary"

                    self.interface_state_ons = Igmp.Standby.Vrfs.Vrf.InterfaceStateOns()
                    self.interface_state_ons.parent = self
                    self._children_name_map["interface_state_ons"] = "interface-state-ons"

                    self.detail_groups = Igmp.Standby.Vrfs.Vrf.DetailGroups()
                    self.detail_groups.parent = self
                    self._children_name_map["detail_groups"] = "detail-groups"

                    self.non_active_groups = Igmp.Standby.Vrfs.Vrf.NonActiveGroups()
                    self.non_active_groups.parent = self
                    self._children_name_map["non_active_groups"] = "non-active-groups"

                    self.ssm_maps = Igmp.Standby.Vrfs.Vrf.SsmMaps()
                    self.ssm_maps.parent = self
                    self._children_name_map["ssm_maps"] = "ssm-maps"

                    self.explicit_groups = Igmp.Standby.Vrfs.Vrf.ExplicitGroups()
                    self.explicit_groups.parent = self
                    self._children_name_map["explicit_groups"] = "explicit-groups"

                    self.interface_table = Igmp.Standby.Vrfs.Vrf.InterfaceTable()
                    self.interface_table.parent = self
                    self._children_name_map["interface_table"] = "interface-table"

                    self.interface_unicast_qos_adjusts = Igmp.Standby.Vrfs.Vrf.InterfaceUnicastQosAdjusts()
                    self.interface_unicast_qos_adjusts.parent = self
                    self._children_name_map["interface_unicast_qos_adjusts"] = "interface-unicast-qos-adjusts"

                    self.ranges = Igmp.Standby.Vrfs.Vrf.Ranges()
                    self.ranges.parent = self
                    self._children_name_map["ranges"] = "ranges"

                    self.ifrs_interfaces = Igmp.Standby.Vrfs.Vrf.IfrsInterfaces()
                    self.ifrs_interfaces.parent = self
                    self._children_name_map["ifrs_interfaces"] = "ifrs-interfaces"

                    self.traffic_counters = Igmp.Standby.Vrfs.Vrf.TrafficCounters()
                    self.traffic_counters.parent = self
                    self._children_name_map["traffic_counters"] = "traffic-counters"

                    self.groups = Igmp.Standby.Vrfs.Vrf.Groups()
                    self.groups.parent = self
                    self._children_name_map["groups"] = "groups"

                    self.group_summary = Igmp.Standby.Vrfs.Vrf.GroupSummary()
                    self.group_summary.parent = self
                    self._children_name_map["group_summary"] = "group-summary"

                    self.ifrs_interface_summary = Igmp.Standby.Vrfs.Vrf.IfrsInterfaceSummary()
                    self.ifrs_interface_summary.parent = self
                    self._children_name_map["ifrs_interface_summary"] = "ifrs-interface-summary"

                    self.global_interface_table = Igmp.Standby.Vrfs.Vrf.GlobalInterfaceTable()
                    self.global_interface_table.parent = self
                    self._children_name_map["global_interface_table"] = "global-interface-table"

                    self.ssm_map_details = Igmp.Standby.Vrfs.Vrf.SsmMapDetails()
                    self.ssm_map_details.parent = self
                    self._children_name_map["ssm_map_details"] = "ssm-map-details"

                    self.interface_state_offs = Igmp.Standby.Vrfs.Vrf.InterfaceStateOffs()
                    self.interface_state_offs.parent = self
                    self._children_name_map["interface_state_offs"] = "interface-state-offs"
                    self._segment_path = lambda: "vrf" + "[vrf-name='" + str(self.vrf_name) + "']"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/standby/vrfs/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Igmp.Standby.Vrfs.Vrf, ['vrf_name'], name, value)


                class Summary(_Entity_):
                    """
                    IGMP Summary Information
                    
                    .. attribute:: robustness
                    
                    	Robustness variable
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: group_limit
                    
                    	Maximum groups accepted
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: group_count
                    
                    	Current groups accepted
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_disabled
                    
                    	Is maximum enforcement disabled
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: supported_interfaces
                    
                    	No. of supported interfaces
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: unsupported_interfaces
                    
                    	No. of unsupported interfaces
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: enabled_interface_count
                    
                    	No. of enabled interfaces
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: disabled_interface_count
                    
                    	No. of disabled interfaces
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: tunnel_mte_config_count
                    
                    	No. of static group commands
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: node_low_memory
                    
                    	Is node in low memory condition
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: interface
                    
                    	Maximum and current groups accepted for each interface
                    	**type**\: list of  		 :py:class:`Interface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.Summary.Interface>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Igmp.Standby.Vrfs.Vrf.Summary, self).__init__()

                        self.yang_name = "summary"
                        self.yang_parent_name = "vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("interface", ("interface", Igmp.Standby.Vrfs.Vrf.Summary.Interface))])
                        self._leafs = OrderedDict([
                            ('robustness', (YLeaf(YType.uint32, 'robustness'), ['int'])),
                            ('group_limit', (YLeaf(YType.uint32, 'group-limit'), ['int'])),
                            ('group_count', (YLeaf(YType.uint32, 'group-count'), ['int'])),
                            ('is_disabled', (YLeaf(YType.boolean, 'is-disabled'), ['bool'])),
                            ('supported_interfaces', (YLeaf(YType.uint32, 'supported-interfaces'), ['int'])),
                            ('unsupported_interfaces', (YLeaf(YType.uint32, 'unsupported-interfaces'), ['int'])),
                            ('enabled_interface_count', (YLeaf(YType.uint32, 'enabled-interface-count'), ['int'])),
                            ('disabled_interface_count', (YLeaf(YType.uint32, 'disabled-interface-count'), ['int'])),
                            ('tunnel_mte_config_count', (YLeaf(YType.uint32, 'tunnel-mte-config-count'), ['int'])),
                            ('node_low_memory', (YLeaf(YType.boolean, 'node-low-memory'), ['bool'])),
                        ])
                        self.robustness = None
                        self.group_limit = None
                        self.group_count = None
                        self.is_disabled = None
                        self.supported_interfaces = None
                        self.unsupported_interfaces = None
                        self.enabled_interface_count = None
                        self.disabled_interface_count = None
                        self.tunnel_mte_config_count = None
                        self.node_low_memory = None

                        self.interface = YList(self)
                        self._segment_path = lambda: "summary"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Igmp.Standby.Vrfs.Vrf.Summary, ['robustness', 'group_limit', 'group_count', 'is_disabled', 'supported_interfaces', 'unsupported_interfaces', 'enabled_interface_count', 'disabled_interface_count', 'tunnel_mte_config_count', 'node_low_memory'], name, value)


                    class Interface(_Entity_):
                        """
                        Maximum and current groups accepted for each
                        interface
                        
                        .. attribute:: interface_name
                        
                        	Interface
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: group_limit
                        
                        	Maximum groups accepted per interface
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: group_count
                        
                        	Current groups accepted per interface
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: parent_ifhandle
                        
                        	Parent if handle
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: on_off
                        
                        	Enabled/Disabled
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: time_since_last_query_in_seconds
                        
                        	Time elapsed since last query
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: time_since_last_report_in_seconds
                        
                        	Time elapsed since last report
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: router_uptime_in_seconds
                        
                        	Time elapsed since router enabled event
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Standby.Vrfs.Vrf.Summary.Interface, self).__init__()

                            self.yang_name = "interface"
                            self.yang_parent_name = "summary"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                ('group_limit', (YLeaf(YType.uint32, 'group-limit'), ['int'])),
                                ('group_count', (YLeaf(YType.uint32, 'group-count'), ['int'])),
                                ('parent_ifhandle', (YLeaf(YType.str, 'parent-ifhandle'), ['str'])),
                                ('on_off', (YLeaf(YType.boolean, 'on-off'), ['bool'])),
                                ('time_since_last_query_in_seconds', (YLeaf(YType.uint32, 'time-since-last-query-in-seconds'), ['int'])),
                                ('time_since_last_report_in_seconds', (YLeaf(YType.uint32, 'time-since-last-report-in-seconds'), ['int'])),
                                ('router_uptime_in_seconds', (YLeaf(YType.uint32, 'router-uptime-in-seconds'), ['int'])),
                            ])
                            self.interface_name = None
                            self.group_limit = None
                            self.group_count = None
                            self.parent_ifhandle = None
                            self.on_off = None
                            self.time_since_last_query_in_seconds = None
                            self.time_since_last_report_in_seconds = None
                            self.router_uptime_in_seconds = None
                            self._segment_path = lambda: "interface"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Standby.Vrfs.Vrf.Summary.Interface, ['interface_name', 'group_limit', 'group_count', 'parent_ifhandle', 'on_off', 'time_since_last_query_in_seconds', 'time_since_last_report_in_seconds', 'router_uptime_in_seconds'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Standby.Vrfs.Vrf.Summary.Interface']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Igmp.Standby.Vrfs.Vrf.Summary']['meta_info']


                class InterfaceStateOns(_Entity_):
                    """
                    IGMP Interface state on
                    
                    .. attribute:: interface_state_on
                    
                    	IGMP Interface
                    	**type**\: list of  		 :py:class:`InterfaceStateOn <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Igmp.Standby.Vrfs.Vrf.InterfaceStateOns, self).__init__()

                        self.yang_name = "interface-state-ons"
                        self.yang_parent_name = "vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("interface-state-on", ("interface_state_on", Igmp.Standby.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn))])
                        self._leafs = OrderedDict()

                        self.interface_state_on = YList(self)
                        self._segment_path = lambda: "interface-state-ons"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Igmp.Standby.Vrfs.Vrf.InterfaceStateOns, [], name, value)


                    class InterfaceStateOn(_Entity_):
                        """
                        IGMP Interface
                        
                        .. attribute:: interface_name  (key)
                        
                        	Interface Name
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: address
                        
                        	IP address
                        	**type**\:  :py:class:`Address <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.Address>`
                        
                        	**config**\: False
                        
                        .. attribute:: querier_address
                        
                        	Address of the Querier
                        	**type**\:  :py:class:`QuerierAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.QuerierAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: subscriber_address
                        
                        	Address of subscriber
                        	**type**\:  :py:class:`SubscriberAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.SubscriberAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: interface_name_xr
                        
                        	Interface
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: state
                        
                        	Interface state
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: prefix_length
                        
                        	Prefix length
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_interface_up
                        
                        	Is interface up
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_ip_enabled
                        
                        	Is IP enabled
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_router_enabled
                        
                        	Is Router functionality enabled
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: igmp_version
                        
                        	IGMP Router version
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        	**config**\: False
                        
                        .. attribute:: host_version
                        
                        	IGMP Host version
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        	**config**\: False
                        
                        .. attribute:: query_interval
                        
                        	Query Interval value in seconds
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        	**units**\: second
                        
                        .. attribute:: query_timeout
                        
                        	Query Timeout value
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: query_maximum_response_time
                        
                        	Max Response Timeout value
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: last_member_query_interval
                        
                        	Last Member Query Interval
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: group_joins
                        
                        	No. of group joins
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: group_leaves
                        
                        	No. of group leaves
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_querier
                        
                        	Are we querier
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: total_active_groups
                        
                        	Actual number of groups on interface
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: robustness
                        
                        	Robustness Variable value
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: proxy_interface
                        
                        	Proxy interface index
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: querier_uptime
                        
                        	Time since the last querier took over
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: las_ll_registration_count
                        
                        	LAS reg count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_get_address_count
                        
                        	LAS get addr count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_update_count
                        
                        	LAS Update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_ll_remove_update_count
                        
                        	LAS LL remove update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_ll_add_update_count
                        
                        	LAS LL add update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_null_update_count
                        
                        	LAS Null update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_unregistration_count
                        
                        	LAS unreg count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_las_request
                        
                        	LAS req
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_las_registered
                        
                        	LAS registered
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: vrf_id
                        
                        	VRF id
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: mte_vrf_id
                        
                        	MTE VRF id
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: location
                        
                        	Location
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: mtu
                        
                        	MTU
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: vrf_state
                        
                        	Vrf State
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_configurationverify
                        
                        	CFG verify
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configurationvrf_set
                        
                        	CFG vrf set
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configurationvrf_error
                        
                        	CFG vrf error
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configuration_mcast_vrf_set
                        
                        	Is mcast set
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configuration_mcast_vrf_error
                        
                        	Is mcast error
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_im_state_registered
                        
                        	Im state registered
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_subscriber
                        
                        	Subscriber interface
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: subscriber_mode
                        
                        	Subscriber mode
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_identity_present
                        
                        	Subscriber ID or Address available from AAA
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: subscriber_id
                        
                        	ID string of subscriber
                        	**type**\: str
                        
                        	**length:** 0..257
                        
                        	**config**\: False
                        
                        .. attribute:: parent_ifhandle
                        
                        	Parent If Handle
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: time_since_last_query_in_seconds
                        
                        	Time elapsed since last query
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: time_since_last_report_in_seconds
                        
                        	Time elapsed since last report
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: router_uptime_in_seconds
                        
                        	Uptime since router enabled event
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: mte_tuple_count
                        
                        	MTE Tuple count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Standby.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn, self).__init__()

                            self.yang_name = "interface-state-on"
                            self.yang_parent_name = "interface-state-ons"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['interface_name']
                            self._child_classes = OrderedDict([("address", ("address", Igmp.Standby.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.Address)), ("querier-address", ("querier_address", Igmp.Standby.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.QuerierAddress)), ("subscriber-address", ("subscriber_address", Igmp.Standby.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.SubscriberAddress))])
                            self._leafs = OrderedDict([
                                ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                ('interface_name_xr', (YLeaf(YType.str, 'interface-name-xr'), ['str'])),
                                ('state', (YLeaf(YType.uint32, 'state'), ['int'])),
                                ('prefix_length', (YLeaf(YType.uint32, 'prefix-length'), ['int'])),
                                ('is_interface_up', (YLeaf(YType.boolean, 'is-interface-up'), ['bool'])),
                                ('is_ip_enabled', (YLeaf(YType.boolean, 'is-ip-enabled'), ['bool'])),
                                ('is_router_enabled', (YLeaf(YType.boolean, 'is-router-enabled'), ['bool'])),
                                ('igmp_version', (YLeaf(YType.uint8, 'igmp-version'), ['int'])),
                                ('host_version', (YLeaf(YType.uint8, 'host-version'), ['int'])),
                                ('query_interval', (YLeaf(YType.uint16, 'query-interval'), ['int'])),
                                ('query_timeout', (YLeaf(YType.uint16, 'query-timeout'), ['int'])),
                                ('query_maximum_response_time', (YLeaf(YType.uint16, 'query-maximum-response-time'), ['int'])),
                                ('last_member_query_interval', (YLeaf(YType.uint16, 'last-member-query-interval'), ['int'])),
                                ('group_joins', (YLeaf(YType.uint32, 'group-joins'), ['int'])),
                                ('group_leaves', (YLeaf(YType.uint32, 'group-leaves'), ['int'])),
                                ('is_querier', (YLeaf(YType.boolean, 'is-querier'), ['bool'])),
                                ('total_active_groups', (YLeaf(YType.uint32, 'total-active-groups'), ['int'])),
                                ('robustness', (YLeaf(YType.uint32, 'robustness'), ['int'])),
                                ('proxy_interface', (YLeaf(YType.str, 'proxy-interface'), ['str'])),
                                ('querier_uptime', (YLeaf(YType.uint16, 'querier-uptime'), ['int'])),
                                ('las_ll_registration_count', (YLeaf(YType.uint32, 'las-ll-registration-count'), ['int'])),
                                ('las_get_address_count', (YLeaf(YType.uint32, 'las-get-address-count'), ['int'])),
                                ('las_update_count', (YLeaf(YType.uint32, 'las-update-count'), ['int'])),
                                ('las_ll_remove_update_count', (YLeaf(YType.uint32, 'las-ll-remove-update-count'), ['int'])),
                                ('las_ll_add_update_count', (YLeaf(YType.uint32, 'las-ll-add-update-count'), ['int'])),
                                ('las_null_update_count', (YLeaf(YType.uint32, 'las-null-update-count'), ['int'])),
                                ('las_unregistration_count', (YLeaf(YType.uint32, 'las-unregistration-count'), ['int'])),
                                ('is_las_request', (YLeaf(YType.boolean, 'is-las-request'), ['bool'])),
                                ('is_las_registered', (YLeaf(YType.boolean, 'is-las-registered'), ['bool'])),
                                ('vrf_id', (YLeaf(YType.uint32, 'vrf-id'), ['int'])),
                                ('mte_vrf_id', (YLeaf(YType.uint32, 'mte-vrf-id'), ['int'])),
                                ('location', (YLeaf(YType.uint32, 'location'), ['int'])),
                                ('mtu', (YLeaf(YType.uint32, 'mtu'), ['int'])),
                                ('vrf_state', (YLeaf(YType.uint32, 'vrf-state'), ['int'])),
                                ('is_configurationverify', (YLeaf(YType.boolean, 'is-configurationverify'), ['bool'])),
                                ('configurationvrf_set', (YLeaf(YType.boolean, 'configurationvrf-set'), ['bool'])),
                                ('configurationvrf_error', (YLeaf(YType.boolean, 'configurationvrf-error'), ['bool'])),
                                ('configuration_mcast_vrf_set', (YLeaf(YType.boolean, 'configuration-mcast-vrf-set'), ['bool'])),
                                ('configuration_mcast_vrf_error', (YLeaf(YType.boolean, 'configuration-mcast-vrf-error'), ['bool'])),
                                ('is_im_state_registered', (YLeaf(YType.boolean, 'is-im-state-registered'), ['bool'])),
                                ('is_subscriber', (YLeaf(YType.boolean, 'is-subscriber'), ['bool'])),
                                ('subscriber_mode', (YLeaf(YType.uint32, 'subscriber-mode'), ['int'])),
                                ('is_identity_present', (YLeaf(YType.boolean, 'is-identity-present'), ['bool'])),
                                ('subscriber_id', (YLeaf(YType.str, 'subscriber-id'), ['str'])),
                                ('parent_ifhandle', (YLeaf(YType.str, 'parent-ifhandle'), ['str'])),
                                ('time_since_last_query_in_seconds', (YLeaf(YType.uint32, 'time-since-last-query-in-seconds'), ['int'])),
                                ('time_since_last_report_in_seconds', (YLeaf(YType.uint32, 'time-since-last-report-in-seconds'), ['int'])),
                                ('router_uptime_in_seconds', (YLeaf(YType.uint32, 'router-uptime-in-seconds'), ['int'])),
                                ('mte_tuple_count', (YLeaf(YType.uint32, 'mte-tuple-count'), ['int'])),
                            ])
                            self.interface_name = None
                            self.interface_name_xr = None
                            self.state = None
                            self.prefix_length = None
                            self.is_interface_up = None
                            self.is_ip_enabled = None
                            self.is_router_enabled = None
                            self.igmp_version = None
                            self.host_version = None
                            self.query_interval = None
                            self.query_timeout = None
                            self.query_maximum_response_time = None
                            self.last_member_query_interval = None
                            self.group_joins = None
                            self.group_leaves = None
                            self.is_querier = None
                            self.total_active_groups = None
                            self.robustness = None
                            self.proxy_interface = None
                            self.querier_uptime = None
                            self.las_ll_registration_count = None
                            self.las_get_address_count = None
                            self.las_update_count = None
                            self.las_ll_remove_update_count = None
                            self.las_ll_add_update_count = None
                            self.las_null_update_count = None
                            self.las_unregistration_count = None
                            self.is_las_request = None
                            self.is_las_registered = None
                            self.vrf_id = None
                            self.mte_vrf_id = None
                            self.location = None
                            self.mtu = None
                            self.vrf_state = None
                            self.is_configurationverify = None
                            self.configurationvrf_set = None
                            self.configurationvrf_error = None
                            self.configuration_mcast_vrf_set = None
                            self.configuration_mcast_vrf_error = None
                            self.is_im_state_registered = None
                            self.is_subscriber = None
                            self.subscriber_mode = None
                            self.is_identity_present = None
                            self.subscriber_id = None
                            self.parent_ifhandle = None
                            self.time_since_last_query_in_seconds = None
                            self.time_since_last_report_in_seconds = None
                            self.router_uptime_in_seconds = None
                            self.mte_tuple_count = None

                            self.address = Igmp.Standby.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.Address()
                            self.address.parent = self
                            self._children_name_map["address"] = "address"

                            self.querier_address = Igmp.Standby.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.QuerierAddress()
                            self.querier_address.parent = self
                            self._children_name_map["querier_address"] = "querier-address"

                            self.subscriber_address = Igmp.Standby.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.SubscriberAddress()
                            self.subscriber_address.parent = self
                            self._children_name_map["subscriber_address"] = "subscriber-address"
                            self._segment_path = lambda: "interface-state-on" + "[interface-name='" + str(self.interface_name) + "']"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Standby.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn, ['interface_name', 'interface_name_xr', 'state', 'prefix_length', 'is_interface_up', 'is_ip_enabled', 'is_router_enabled', 'igmp_version', 'host_version', 'query_interval', 'query_timeout', 'query_maximum_response_time', 'last_member_query_interval', 'group_joins', 'group_leaves', 'is_querier', 'total_active_groups', 'robustness', 'proxy_interface', 'querier_uptime', 'las_ll_registration_count', 'las_get_address_count', 'las_update_count', 'las_ll_remove_update_count', 'las_ll_add_update_count', 'las_null_update_count', 'las_unregistration_count', 'is_las_request', 'is_las_registered', 'vrf_id', 'mte_vrf_id', 'location', 'mtu', 'vrf_state', 'is_configurationverify', 'configurationvrf_set', 'configurationvrf_error', 'configuration_mcast_vrf_set', 'configuration_mcast_vrf_error', 'is_im_state_registered', 'is_subscriber', 'subscriber_mode', 'is_identity_present', 'subscriber_id', 'parent_ifhandle', 'time_since_last_query_in_seconds', 'time_since_last_report_in_seconds', 'router_uptime_in_seconds', 'mte_tuple_count'], name, value)


                        class Address(_Entity_):
                            """
                            IP address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Standby.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.Address, self).__init__()

                                self.yang_name = "address"
                                self.yang_parent_name = "interface-state-on"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Standby.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.Address, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Standby.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.Address']['meta_info']


                        class QuerierAddress(_Entity_):
                            """
                            Address of the Querier
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Standby.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.QuerierAddress, self).__init__()

                                self.yang_name = "querier-address"
                                self.yang_parent_name = "interface-state-on"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "querier-address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Standby.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.QuerierAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Standby.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.QuerierAddress']['meta_info']


                        class SubscriberAddress(_Entity_):
                            """
                            Address of subscriber
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Standby.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.SubscriberAddress, self).__init__()

                                self.yang_name = "subscriber-address"
                                self.yang_parent_name = "interface-state-on"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "subscriber-address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Standby.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.SubscriberAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Standby.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.SubscriberAddress']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Standby.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Igmp.Standby.Vrfs.Vrf.InterfaceStateOns']['meta_info']


                class DetailGroups(_Entity_):
                    """
                    IGMP Detail Group Database
                    
                    .. attribute:: detail_group
                    
                    	IGMP Detail Group Entry Information
                    	**type**\: list of  		 :py:class:`DetailGroup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.DetailGroups.DetailGroup>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Igmp.Standby.Vrfs.Vrf.DetailGroups, self).__init__()

                        self.yang_name = "detail-groups"
                        self.yang_parent_name = "vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("detail-group", ("detail_group", Igmp.Standby.Vrfs.Vrf.DetailGroups.DetailGroup))])
                        self._leafs = OrderedDict()

                        self.detail_group = YList(self)
                        self._segment_path = lambda: "detail-groups"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Igmp.Standby.Vrfs.Vrf.DetailGroups, [], name, value)


                    class DetailGroup(_Entity_):
                        """
                        IGMP Detail Group Entry Information
                        
                        .. attribute:: group_address
                        
                        	Group Address
                        	**type**\: union of the below types:
                        
                        		**type**\: str
                        
                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        		**type**\: str
                        
                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: interface_name
                        
                        	Interface Name
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: source_address
                        
                        	Source/Host Address
                        	**type**\: union of the below types:
                        
                        		**type**\: str
                        
                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        		**type**\: str
                        
                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: group_info
                        
                        	Basic Group information
                        	**type**\:  :py:class:`GroupInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo>`
                        
                        	**config**\: False
                        
                        .. attribute:: is_router_exclude_mode
                        
                        	Group router filter mode
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_host_exclude_mode
                        
                        	Group host filter mode
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: source
                        
                        	List of sources
                        	**type**\: list of  		 :py:class:`Source <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.DetailGroups.DetailGroup.Source>`
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Standby.Vrfs.Vrf.DetailGroups.DetailGroup, self).__init__()

                            self.yang_name = "detail-group"
                            self.yang_parent_name = "detail-groups"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("group-info", ("group_info", Igmp.Standby.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo)), ("source", ("source", Igmp.Standby.Vrfs.Vrf.DetailGroups.DetailGroup.Source))])
                            self._leafs = OrderedDict([
                                ('group_address', (YLeaf(YType.str, 'group-address'), ['str','str'])),
                                ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                ('source_address', (YLeaf(YType.str, 'source-address'), ['str','str'])),
                                ('is_router_exclude_mode', (YLeaf(YType.boolean, 'is-router-exclude-mode'), ['bool'])),
                                ('is_host_exclude_mode', (YLeaf(YType.boolean, 'is-host-exclude-mode'), ['bool'])),
                            ])
                            self.group_address = None
                            self.interface_name = None
                            self.source_address = None
                            self.is_router_exclude_mode = None
                            self.is_host_exclude_mode = None

                            self.group_info = Igmp.Standby.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo()
                            self.group_info.parent = self
                            self._children_name_map["group_info"] = "group-info"

                            self.source = YList(self)
                            self._segment_path = lambda: "detail-group"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Standby.Vrfs.Vrf.DetailGroups.DetailGroup, ['group_address', 'interface_name', 'source_address', 'is_router_exclude_mode', 'is_host_exclude_mode'], name, value)


                        class GroupInfo(_Entity_):
                            """
                            Basic Group information
                            
                            .. attribute:: group_address_xr
                            
                            	Group Address
                            	**type**\:  :py:class:`GroupAddressXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.GroupAddressXr>`
                            
                            	**config**\: False
                            
                            .. attribute:: last_reporter
                            
                            	Last reporter address
                            	**type**\:  :py:class:`LastReporter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.LastReporter>`
                            
                            	**config**\: False
                            
                            .. attribute:: source_address
                            
                            	Source Address
                            	**type**\:  :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.SourceAddress>`
                            
                            	**config**\: False
                            
                            .. attribute:: interface_name_xr
                            
                            	Interface
                            	**type**\: str
                            
                            	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                            
                            	**config**\: False
                            
                            .. attribute:: uptime
                            
                            	Uptime in seconds
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            	**config**\: False
                            
                            	**units**\: second
                            
                            .. attribute:: expiration_time
                            
                            	Expiration time in seconds
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            	**config**\: False
                            
                            	**units**\: second
                            
                            .. attribute:: explicit_tracking_enabled
                            
                            	Is explicit tracking enabled
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: is_self_join
                            
                            	If local system is member of this group on this interface
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: row_status
                            
                            	interface on or off for the group
                            	**type**\: str
                            
                            	**length:** 0..16
                            
                            	**config**\: False
                            
                            .. attribute:: is_low_memory
                            
                            	Node is running low on memory
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: router_filter_mode
                            
                            	Filter mode
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            	**config**\: False
                            
                            .. attribute:: older_host_version1_timer
                            
                            	IGMP Hostversion1timer
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: older_host_version2_timer
                            
                            	IGMP Hostversion2timer
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: is_added
                            
                            	Joined
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: is_suppressed
                            
                            	Suppressed
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Standby.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo, self).__init__()

                                self.yang_name = "group-info"
                                self.yang_parent_name = "detail-group"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("group-address-xr", ("group_address_xr", Igmp.Standby.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.GroupAddressXr)), ("last-reporter", ("last_reporter", Igmp.Standby.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.LastReporter)), ("source-address", ("source_address", Igmp.Standby.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.SourceAddress))])
                                self._leafs = OrderedDict([
                                    ('interface_name_xr', (YLeaf(YType.str, 'interface-name-xr'), ['str'])),
                                    ('uptime', (YLeaf(YType.uint64, 'uptime'), ['int'])),
                                    ('expiration_time', (YLeaf(YType.int32, 'expiration-time'), ['int'])),
                                    ('explicit_tracking_enabled', (YLeaf(YType.boolean, 'explicit-tracking-enabled'), ['bool'])),
                                    ('is_self_join', (YLeaf(YType.boolean, 'is-self-join'), ['bool'])),
                                    ('row_status', (YLeaf(YType.str, 'row-status'), ['str'])),
                                    ('is_low_memory', (YLeaf(YType.boolean, 'is-low-memory'), ['bool'])),
                                    ('router_filter_mode', (YLeaf(YType.uint8, 'router-filter-mode'), ['int'])),
                                    ('older_host_version1_timer', (YLeaf(YType.uint32, 'older-host-version1-timer'), ['int'])),
                                    ('older_host_version2_timer', (YLeaf(YType.uint32, 'older-host-version2-timer'), ['int'])),
                                    ('is_added', (YLeaf(YType.boolean, 'is-added'), ['bool'])),
                                    ('is_suppressed', (YLeaf(YType.boolean, 'is-suppressed'), ['bool'])),
                                ])
                                self.interface_name_xr = None
                                self.uptime = None
                                self.expiration_time = None
                                self.explicit_tracking_enabled = None
                                self.is_self_join = None
                                self.row_status = None
                                self.is_low_memory = None
                                self.router_filter_mode = None
                                self.older_host_version1_timer = None
                                self.older_host_version2_timer = None
                                self.is_added = None
                                self.is_suppressed = None

                                self.group_address_xr = Igmp.Standby.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.GroupAddressXr()
                                self.group_address_xr.parent = self
                                self._children_name_map["group_address_xr"] = "group-address-xr"

                                self.last_reporter = Igmp.Standby.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.LastReporter()
                                self.last_reporter.parent = self
                                self._children_name_map["last_reporter"] = "last-reporter"

                                self.source_address = Igmp.Standby.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.SourceAddress()
                                self.source_address.parent = self
                                self._children_name_map["source_address"] = "source-address"
                                self._segment_path = lambda: "group-info"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Standby.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo, ['interface_name_xr', 'uptime', 'expiration_time', 'explicit_tracking_enabled', 'is_self_join', 'row_status', 'is_low_memory', 'router_filter_mode', 'older_host_version1_timer', 'older_host_version2_timer', 'is_added', 'is_suppressed'], name, value)


                            class GroupAddressXr(_Entity_):
                                """
                                Group Address
                                
                                .. attribute:: af_name
                                
                                	AFName
                                	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                                
                                	**config**\: False
                                
                                .. attribute:: ipv4_address
                                
                                	IPv4 Addr
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                .. attribute:: ipv6_address
                                
                                	IPV6 Addr
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                

                                """

                                _prefix = 'ipv4-igmp-oper'
                                _revision = '2018-01-31'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Igmp.Standby.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.GroupAddressXr, self).__init__()

                                    self.yang_name = "group-address-xr"
                                    self.yang_parent_name = "group-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                        ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                        ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                    ])
                                    self.af_name = None
                                    self.ipv4_address = None
                                    self.ipv6_address = None
                                    self._segment_path = lambda: "group-address-xr"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Igmp.Standby.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.GroupAddressXr, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                    return meta._meta_table['Igmp.Standby.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.GroupAddressXr']['meta_info']


                            class LastReporter(_Entity_):
                                """
                                Last reporter address
                                
                                .. attribute:: af_name
                                
                                	AFName
                                	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                                
                                	**config**\: False
                                
                                .. attribute:: ipv4_address
                                
                                	IPv4 Addr
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                .. attribute:: ipv6_address
                                
                                	IPV6 Addr
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                

                                """

                                _prefix = 'ipv4-igmp-oper'
                                _revision = '2018-01-31'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Igmp.Standby.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.LastReporter, self).__init__()

                                    self.yang_name = "last-reporter"
                                    self.yang_parent_name = "group-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                        ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                        ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                    ])
                                    self.af_name = None
                                    self.ipv4_address = None
                                    self.ipv6_address = None
                                    self._segment_path = lambda: "last-reporter"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Igmp.Standby.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.LastReporter, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                    return meta._meta_table['Igmp.Standby.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.LastReporter']['meta_info']


                            class SourceAddress(_Entity_):
                                """
                                Source Address
                                
                                .. attribute:: af_name
                                
                                	AFName
                                	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                                
                                	**config**\: False
                                
                                .. attribute:: ipv4_address
                                
                                	IPv4 Addr
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                .. attribute:: ipv6_address
                                
                                	IPV6 Addr
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                

                                """

                                _prefix = 'ipv4-igmp-oper'
                                _revision = '2018-01-31'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Igmp.Standby.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.SourceAddress, self).__init__()

                                    self.yang_name = "source-address"
                                    self.yang_parent_name = "group-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                        ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                        ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                    ])
                                    self.af_name = None
                                    self.ipv4_address = None
                                    self.ipv6_address = None
                                    self._segment_path = lambda: "source-address"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Igmp.Standby.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.SourceAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                    return meta._meta_table['Igmp.Standby.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.SourceAddress']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Standby.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo']['meta_info']


                        class Source(_Entity_):
                            """
                            List of sources
                            
                            .. attribute:: source_address
                            
                            	Source Address
                            	**type**\:  :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.DetailGroups.DetailGroup.Source.SourceAddress>`
                            
                            	**config**\: False
                            
                            .. attribute:: uptime
                            
                            	Uptime in seconds
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            	**config**\: False
                            
                            	**units**\: second
                            
                            .. attribute:: expiration_time
                            
                            	Expiration time in seconds
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            	**config**\: False
                            
                            	**units**\: second
                            
                            .. attribute:: is_local
                            
                            	Is this a local source
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: is_remote
                            
                            	Is this a remote source
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: is_forward
                            
                            	Should we forward on this entry
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: is_we_report
                            
                            	Should we report the source
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: flags
                            
                            	Source flags
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            	**config**\: False
                            
                            .. attribute:: is_added
                            
                            	Joined
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Standby.Vrfs.Vrf.DetailGroups.DetailGroup.Source, self).__init__()

                                self.yang_name = "source"
                                self.yang_parent_name = "detail-group"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("source-address", ("source_address", Igmp.Standby.Vrfs.Vrf.DetailGroups.DetailGroup.Source.SourceAddress))])
                                self._leafs = OrderedDict([
                                    ('uptime', (YLeaf(YType.uint64, 'uptime'), ['int'])),
                                    ('expiration_time', (YLeaf(YType.int32, 'expiration-time'), ['int'])),
                                    ('is_local', (YLeaf(YType.boolean, 'is-local'), ['bool'])),
                                    ('is_remote', (YLeaf(YType.boolean, 'is-remote'), ['bool'])),
                                    ('is_forward', (YLeaf(YType.boolean, 'is-forward'), ['bool'])),
                                    ('is_we_report', (YLeaf(YType.boolean, 'is-we-report'), ['bool'])),
                                    ('flags', (YLeaf(YType.int32, 'flags'), ['int'])),
                                    ('is_added', (YLeaf(YType.boolean, 'is-added'), ['bool'])),
                                ])
                                self.uptime = None
                                self.expiration_time = None
                                self.is_local = None
                                self.is_remote = None
                                self.is_forward = None
                                self.is_we_report = None
                                self.flags = None
                                self.is_added = None

                                self.source_address = Igmp.Standby.Vrfs.Vrf.DetailGroups.DetailGroup.Source.SourceAddress()
                                self.source_address.parent = self
                                self._children_name_map["source_address"] = "source-address"
                                self._segment_path = lambda: "source"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Standby.Vrfs.Vrf.DetailGroups.DetailGroup.Source, ['uptime', 'expiration_time', 'is_local', 'is_remote', 'is_forward', 'is_we_report', 'flags', 'is_added'], name, value)


                            class SourceAddress(_Entity_):
                                """
                                Source Address
                                
                                .. attribute:: af_name
                                
                                	AFName
                                	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                                
                                	**config**\: False
                                
                                .. attribute:: ipv4_address
                                
                                	IPv4 Addr
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                .. attribute:: ipv6_address
                                
                                	IPV6 Addr
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                

                                """

                                _prefix = 'ipv4-igmp-oper'
                                _revision = '2018-01-31'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Igmp.Standby.Vrfs.Vrf.DetailGroups.DetailGroup.Source.SourceAddress, self).__init__()

                                    self.yang_name = "source-address"
                                    self.yang_parent_name = "source"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                        ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                        ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                    ])
                                    self.af_name = None
                                    self.ipv4_address = None
                                    self.ipv6_address = None
                                    self._segment_path = lambda: "source-address"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Igmp.Standby.Vrfs.Vrf.DetailGroups.DetailGroup.Source.SourceAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                    return meta._meta_table['Igmp.Standby.Vrfs.Vrf.DetailGroups.DetailGroup.Source.SourceAddress']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Standby.Vrfs.Vrf.DetailGroups.DetailGroup.Source']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Standby.Vrfs.Vrf.DetailGroups.DetailGroup']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Igmp.Standby.Vrfs.Vrf.DetailGroups']['meta_info']


                class NonActiveGroups(_Entity_):
                    """
                    IGMP Non\-Active Groups Information
                    
                    .. attribute:: non_active_groups
                    
                    	List of non\-active groups
                    	**type**\: list of  		 :py:class:`NonActiveGroups_ <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.NonActiveGroups.NonActiveGroups_>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Igmp.Standby.Vrfs.Vrf.NonActiveGroups, self).__init__()

                        self.yang_name = "non-active-groups"
                        self.yang_parent_name = "vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("non-active-groups", ("non_active_groups", Igmp.Standby.Vrfs.Vrf.NonActiveGroups.NonActiveGroups_))])
                        self._leafs = OrderedDict()

                        self.non_active_groups = YList(self)
                        self._segment_path = lambda: "non-active-groups"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Igmp.Standby.Vrfs.Vrf.NonActiveGroups, [], name, value)


                    class NonActiveGroups_(_Entity_):
                        """
                        List of non\-active groups
                        
                        .. attribute:: group_address
                        
                        	Group Address
                        	**type**\:  :py:class:`GroupAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.NonActiveGroups.NonActiveGroups_.GroupAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\:  :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.NonActiveGroups.NonActiveGroups_.SourceAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: interface
                        
                        	Interface Name
                        	**type**\: str
                        
                        	**length:** 0..65
                        
                        	**config**\: False
                        
                        .. attribute:: reason_for_non_activity
                        
                        	Reason for group join not being processed
                        	**type**\: str
                        
                        	**length:** 0..257
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Standby.Vrfs.Vrf.NonActiveGroups.NonActiveGroups_, self).__init__()

                            self.yang_name = "non-active-groups"
                            self.yang_parent_name = "non-active-groups"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("group-address", ("group_address", Igmp.Standby.Vrfs.Vrf.NonActiveGroups.NonActiveGroups_.GroupAddress)), ("source-address", ("source_address", Igmp.Standby.Vrfs.Vrf.NonActiveGroups.NonActiveGroups_.SourceAddress))])
                            self._leafs = OrderedDict([
                                ('interface', (YLeaf(YType.str, 'interface'), ['str'])),
                                ('reason_for_non_activity', (YLeaf(YType.str, 'reason-for-non-activity'), ['str'])),
                            ])
                            self.interface = None
                            self.reason_for_non_activity = None

                            self.group_address = Igmp.Standby.Vrfs.Vrf.NonActiveGroups.NonActiveGroups_.GroupAddress()
                            self.group_address.parent = self
                            self._children_name_map["group_address"] = "group-address"

                            self.source_address = Igmp.Standby.Vrfs.Vrf.NonActiveGroups.NonActiveGroups_.SourceAddress()
                            self.source_address.parent = self
                            self._children_name_map["source_address"] = "source-address"
                            self._segment_path = lambda: "non-active-groups"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Standby.Vrfs.Vrf.NonActiveGroups.NonActiveGroups_, ['interface', 'reason_for_non_activity'], name, value)


                        class GroupAddress(_Entity_):
                            """
                            Group Address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Standby.Vrfs.Vrf.NonActiveGroups.NonActiveGroups_.GroupAddress, self).__init__()

                                self.yang_name = "group-address"
                                self.yang_parent_name = "non-active-groups"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "group-address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Standby.Vrfs.Vrf.NonActiveGroups.NonActiveGroups_.GroupAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Standby.Vrfs.Vrf.NonActiveGroups.NonActiveGroups_.GroupAddress']['meta_info']


                        class SourceAddress(_Entity_):
                            """
                            Source Address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Standby.Vrfs.Vrf.NonActiveGroups.NonActiveGroups_.SourceAddress, self).__init__()

                                self.yang_name = "source-address"
                                self.yang_parent_name = "non-active-groups"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "source-address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Standby.Vrfs.Vrf.NonActiveGroups.NonActiveGroups_.SourceAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Standby.Vrfs.Vrf.NonActiveGroups.NonActiveGroups_.SourceAddress']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Standby.Vrfs.Vrf.NonActiveGroups.NonActiveGroups_']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Igmp.Standby.Vrfs.Vrf.NonActiveGroups']['meta_info']


                class SsmMaps(_Entity_):
                    """
                    SSM Map Table
                    
                    .. attribute:: ssm_map
                    
                    	SSM Map information
                    	**type**\: list of  		 :py:class:`SsmMap <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.SsmMaps.SsmMap>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Igmp.Standby.Vrfs.Vrf.SsmMaps, self).__init__()

                        self.yang_name = "ssm-maps"
                        self.yang_parent_name = "vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("ssm-map", ("ssm_map", Igmp.Standby.Vrfs.Vrf.SsmMaps.SsmMap))])
                        self._leafs = OrderedDict()

                        self.ssm_map = YList(self)
                        self._segment_path = lambda: "ssm-maps"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Igmp.Standby.Vrfs.Vrf.SsmMaps, [], name, value)


                    class SsmMap(_Entity_):
                        """
                        SSM Map information
                        
                        .. attribute:: ssm_map_type
                        
                        	SSM Map Type
                        	**type**\:  :py:class:`IgmpssmMap <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpssmMap>`
                        
                        	**config**\: False
                        
                        .. attribute:: group_address
                        
                        	Group address
                        	**type**\: union of the below types:
                        
                        		**type**\: str
                        
                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        		**type**\: str
                        
                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: group_address_xr
                        
                        	Group Address
                        	**type**\:  :py:class:`GroupAddressXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.SsmMaps.SsmMap.GroupAddressXr>`
                        
                        	**config**\: False
                        
                        .. attribute:: map_type
                        
                        	Map Type of group
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: source_counts
                        
                        	Count of Sources
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Standby.Vrfs.Vrf.SsmMaps.SsmMap, self).__init__()

                            self.yang_name = "ssm-map"
                            self.yang_parent_name = "ssm-maps"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("group-address-xr", ("group_address_xr", Igmp.Standby.Vrfs.Vrf.SsmMaps.SsmMap.GroupAddressXr))])
                            self._leafs = OrderedDict([
                                ('ssm_map_type', (YLeaf(YType.enumeration, 'ssm-map-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpssmMap', '')])),
                                ('group_address', (YLeaf(YType.str, 'group-address'), ['str','str'])),
                                ('map_type', (YLeaf(YType.uint32, 'map-type'), ['int'])),
                                ('source_counts', (YLeaf(YType.uint32, 'source-counts'), ['int'])),
                            ])
                            self.ssm_map_type = None
                            self.group_address = None
                            self.map_type = None
                            self.source_counts = None

                            self.group_address_xr = Igmp.Standby.Vrfs.Vrf.SsmMaps.SsmMap.GroupAddressXr()
                            self.group_address_xr.parent = self
                            self._children_name_map["group_address_xr"] = "group-address-xr"
                            self._segment_path = lambda: "ssm-map"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Standby.Vrfs.Vrf.SsmMaps.SsmMap, ['ssm_map_type', 'group_address', 'map_type', 'source_counts'], name, value)


                        class GroupAddressXr(_Entity_):
                            """
                            Group Address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Standby.Vrfs.Vrf.SsmMaps.SsmMap.GroupAddressXr, self).__init__()

                                self.yang_name = "group-address-xr"
                                self.yang_parent_name = "ssm-map"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "group-address-xr"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Standby.Vrfs.Vrf.SsmMaps.SsmMap.GroupAddressXr, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Standby.Vrfs.Vrf.SsmMaps.SsmMap.GroupAddressXr']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Standby.Vrfs.Vrf.SsmMaps.SsmMap']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Igmp.Standby.Vrfs.Vrf.SsmMaps']['meta_info']


                class ExplicitGroups(_Entity_):
                    """
                    IGMP Explicit Group Database
                    
                    .. attribute:: explicit_group
                    
                    	IGMP Explicit Group Entry Information
                    	**type**\: list of  		 :py:class:`ExplicitGroup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Igmp.Standby.Vrfs.Vrf.ExplicitGroups, self).__init__()

                        self.yang_name = "explicit-groups"
                        self.yang_parent_name = "vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("explicit-group", ("explicit_group", Igmp.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup))])
                        self._leafs = OrderedDict()

                        self.explicit_group = YList(self)
                        self._segment_path = lambda: "explicit-groups"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Igmp.Standby.Vrfs.Vrf.ExplicitGroups, [], name, value)


                    class ExplicitGroup(_Entity_):
                        """
                        IGMP Explicit Group Entry Information
                        
                        .. attribute:: group_address
                        
                        	Group Address
                        	**type**\: union of the below types:
                        
                        		**type**\: str
                        
                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        		**type**\: str
                        
                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: interface_name
                        
                        	Interface Name
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: source_address
                        
                        	Source/Host Address
                        	**type**\: union of the below types:
                        
                        		**type**\: str
                        
                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        		**type**\: str
                        
                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: group_info
                        
                        	Basic Group information
                        	**type**\:  :py:class:`GroupInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo>`
                        
                        	**config**\: False
                        
                        .. attribute:: include_hosts
                        
                        	No. of hosts who are included
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: exclude_hosts
                        
                        	No. of hosts who are excluded
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: host
                        
                        	List of hosts
                        	**type**\: list of  		 :py:class:`Host <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.Host>`
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup, self).__init__()

                            self.yang_name = "explicit-group"
                            self.yang_parent_name = "explicit-groups"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("group-info", ("group_info", Igmp.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo)), ("host", ("host", Igmp.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.Host))])
                            self._leafs = OrderedDict([
                                ('group_address', (YLeaf(YType.str, 'group-address'), ['str','str'])),
                                ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                ('source_address', (YLeaf(YType.str, 'source-address'), ['str','str'])),
                                ('include_hosts', (YLeaf(YType.uint32, 'include-hosts'), ['int'])),
                                ('exclude_hosts', (YLeaf(YType.uint32, 'exclude-hosts'), ['int'])),
                            ])
                            self.group_address = None
                            self.interface_name = None
                            self.source_address = None
                            self.include_hosts = None
                            self.exclude_hosts = None

                            self.group_info = Igmp.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo()
                            self.group_info.parent = self
                            self._children_name_map["group_info"] = "group-info"

                            self.host = YList(self)
                            self._segment_path = lambda: "explicit-group"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup, ['group_address', 'interface_name', 'source_address', 'include_hosts', 'exclude_hosts'], name, value)


                        class GroupInfo(_Entity_):
                            """
                            Basic Group information
                            
                            .. attribute:: group_address_xr
                            
                            	Group Address
                            	**type**\:  :py:class:`GroupAddressXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.GroupAddressXr>`
                            
                            	**config**\: False
                            
                            .. attribute:: last_reporter
                            
                            	Last reporter address
                            	**type**\:  :py:class:`LastReporter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.LastReporter>`
                            
                            	**config**\: False
                            
                            .. attribute:: source_address
                            
                            	Source Address
                            	**type**\:  :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.SourceAddress>`
                            
                            	**config**\: False
                            
                            .. attribute:: interface_name_xr
                            
                            	Interface
                            	**type**\: str
                            
                            	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                            
                            	**config**\: False
                            
                            .. attribute:: uptime
                            
                            	Uptime in seconds
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            	**config**\: False
                            
                            	**units**\: second
                            
                            .. attribute:: expiration_time
                            
                            	Expiration time in seconds
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            	**config**\: False
                            
                            	**units**\: second
                            
                            .. attribute:: explicit_tracking_enabled
                            
                            	Is explicit tracking enabled
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: is_self_join
                            
                            	If local system is member of this group on this interface
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: row_status
                            
                            	interface on or off for the group
                            	**type**\: str
                            
                            	**length:** 0..16
                            
                            	**config**\: False
                            
                            .. attribute:: is_low_memory
                            
                            	Node is running low on memory
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: router_filter_mode
                            
                            	Filter mode
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            	**config**\: False
                            
                            .. attribute:: older_host_version1_timer
                            
                            	IGMP Hostversion1timer
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: older_host_version2_timer
                            
                            	IGMP Hostversion2timer
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: is_added
                            
                            	Joined
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: is_suppressed
                            
                            	Suppressed
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo, self).__init__()

                                self.yang_name = "group-info"
                                self.yang_parent_name = "explicit-group"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("group-address-xr", ("group_address_xr", Igmp.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.GroupAddressXr)), ("last-reporter", ("last_reporter", Igmp.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.LastReporter)), ("source-address", ("source_address", Igmp.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.SourceAddress))])
                                self._leafs = OrderedDict([
                                    ('interface_name_xr', (YLeaf(YType.str, 'interface-name-xr'), ['str'])),
                                    ('uptime', (YLeaf(YType.uint64, 'uptime'), ['int'])),
                                    ('expiration_time', (YLeaf(YType.int32, 'expiration-time'), ['int'])),
                                    ('explicit_tracking_enabled', (YLeaf(YType.boolean, 'explicit-tracking-enabled'), ['bool'])),
                                    ('is_self_join', (YLeaf(YType.boolean, 'is-self-join'), ['bool'])),
                                    ('row_status', (YLeaf(YType.str, 'row-status'), ['str'])),
                                    ('is_low_memory', (YLeaf(YType.boolean, 'is-low-memory'), ['bool'])),
                                    ('router_filter_mode', (YLeaf(YType.uint8, 'router-filter-mode'), ['int'])),
                                    ('older_host_version1_timer', (YLeaf(YType.uint32, 'older-host-version1-timer'), ['int'])),
                                    ('older_host_version2_timer', (YLeaf(YType.uint32, 'older-host-version2-timer'), ['int'])),
                                    ('is_added', (YLeaf(YType.boolean, 'is-added'), ['bool'])),
                                    ('is_suppressed', (YLeaf(YType.boolean, 'is-suppressed'), ['bool'])),
                                ])
                                self.interface_name_xr = None
                                self.uptime = None
                                self.expiration_time = None
                                self.explicit_tracking_enabled = None
                                self.is_self_join = None
                                self.row_status = None
                                self.is_low_memory = None
                                self.router_filter_mode = None
                                self.older_host_version1_timer = None
                                self.older_host_version2_timer = None
                                self.is_added = None
                                self.is_suppressed = None

                                self.group_address_xr = Igmp.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.GroupAddressXr()
                                self.group_address_xr.parent = self
                                self._children_name_map["group_address_xr"] = "group-address-xr"

                                self.last_reporter = Igmp.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.LastReporter()
                                self.last_reporter.parent = self
                                self._children_name_map["last_reporter"] = "last-reporter"

                                self.source_address = Igmp.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.SourceAddress()
                                self.source_address.parent = self
                                self._children_name_map["source_address"] = "source-address"
                                self._segment_path = lambda: "group-info"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo, ['interface_name_xr', 'uptime', 'expiration_time', 'explicit_tracking_enabled', 'is_self_join', 'row_status', 'is_low_memory', 'router_filter_mode', 'older_host_version1_timer', 'older_host_version2_timer', 'is_added', 'is_suppressed'], name, value)


                            class GroupAddressXr(_Entity_):
                                """
                                Group Address
                                
                                .. attribute:: af_name
                                
                                	AFName
                                	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                                
                                	**config**\: False
                                
                                .. attribute:: ipv4_address
                                
                                	IPv4 Addr
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                .. attribute:: ipv6_address
                                
                                	IPV6 Addr
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                

                                """

                                _prefix = 'ipv4-igmp-oper'
                                _revision = '2018-01-31'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Igmp.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.GroupAddressXr, self).__init__()

                                    self.yang_name = "group-address-xr"
                                    self.yang_parent_name = "group-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                        ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                        ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                    ])
                                    self.af_name = None
                                    self.ipv4_address = None
                                    self.ipv6_address = None
                                    self._segment_path = lambda: "group-address-xr"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Igmp.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.GroupAddressXr, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                    return meta._meta_table['Igmp.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.GroupAddressXr']['meta_info']


                            class LastReporter(_Entity_):
                                """
                                Last reporter address
                                
                                .. attribute:: af_name
                                
                                	AFName
                                	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                                
                                	**config**\: False
                                
                                .. attribute:: ipv4_address
                                
                                	IPv4 Addr
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                .. attribute:: ipv6_address
                                
                                	IPV6 Addr
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                

                                """

                                _prefix = 'ipv4-igmp-oper'
                                _revision = '2018-01-31'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Igmp.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.LastReporter, self).__init__()

                                    self.yang_name = "last-reporter"
                                    self.yang_parent_name = "group-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                        ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                        ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                    ])
                                    self.af_name = None
                                    self.ipv4_address = None
                                    self.ipv6_address = None
                                    self._segment_path = lambda: "last-reporter"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Igmp.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.LastReporter, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                    return meta._meta_table['Igmp.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.LastReporter']['meta_info']


                            class SourceAddress(_Entity_):
                                """
                                Source Address
                                
                                .. attribute:: af_name
                                
                                	AFName
                                	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                                
                                	**config**\: False
                                
                                .. attribute:: ipv4_address
                                
                                	IPv4 Addr
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                .. attribute:: ipv6_address
                                
                                	IPV6 Addr
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                

                                """

                                _prefix = 'ipv4-igmp-oper'
                                _revision = '2018-01-31'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Igmp.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.SourceAddress, self).__init__()

                                    self.yang_name = "source-address"
                                    self.yang_parent_name = "group-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                        ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                        ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                    ])
                                    self.af_name = None
                                    self.ipv4_address = None
                                    self.ipv6_address = None
                                    self._segment_path = lambda: "source-address"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Igmp.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.SourceAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                    return meta._meta_table['Igmp.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.SourceAddress']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo']['meta_info']


                        class Host(_Entity_):
                            """
                            List of hosts
                            
                            .. attribute:: address
                            
                            	Host Address
                            	**type**\:  :py:class:`Address <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.Host.Address>`
                            
                            	**config**\: False
                            
                            .. attribute:: uptime
                            
                            	Uptime in seconds
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            	**units**\: second
                            
                            .. attribute:: is_exclude
                            
                            	Exclude flag set
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: expiration_time
                            
                            	Expiration time in seconds
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            	**units**\: second
                            
                            .. attribute:: source_count
                            
                            	No. of sources in entry
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: source_address
                            
                            	First 3 source addresses
                            	**type**\: list of  		 :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.Host.SourceAddress>`
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.Host, self).__init__()

                                self.yang_name = "host"
                                self.yang_parent_name = "explicit-group"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("address", ("address", Igmp.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.Host.Address)), ("source-address", ("source_address", Igmp.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.Host.SourceAddress))])
                                self._leafs = OrderedDict([
                                    ('uptime', (YLeaf(YType.uint32, 'uptime'), ['int'])),
                                    ('is_exclude', (YLeaf(YType.boolean, 'is-exclude'), ['bool'])),
                                    ('expiration_time', (YLeaf(YType.uint32, 'expiration-time'), ['int'])),
                                    ('source_count', (YLeaf(YType.uint32, 'source-count'), ['int'])),
                                ])
                                self.uptime = None
                                self.is_exclude = None
                                self.expiration_time = None
                                self.source_count = None

                                self.address = Igmp.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.Host.Address()
                                self.address.parent = self
                                self._children_name_map["address"] = "address"

                                self.source_address = YList(self)
                                self._segment_path = lambda: "host"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.Host, ['uptime', 'is_exclude', 'expiration_time', 'source_count'], name, value)


                            class Address(_Entity_):
                                """
                                Host Address
                                
                                .. attribute:: af_name
                                
                                	AFName
                                	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                                
                                	**config**\: False
                                
                                .. attribute:: ipv4_address
                                
                                	IPv4 Addr
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                .. attribute:: ipv6_address
                                
                                	IPV6 Addr
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                

                                """

                                _prefix = 'ipv4-igmp-oper'
                                _revision = '2018-01-31'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Igmp.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.Host.Address, self).__init__()

                                    self.yang_name = "address"
                                    self.yang_parent_name = "host"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                        ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                        ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                    ])
                                    self.af_name = None
                                    self.ipv4_address = None
                                    self.ipv6_address = None
                                    self._segment_path = lambda: "address"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Igmp.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.Host.Address, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                    return meta._meta_table['Igmp.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.Host.Address']['meta_info']


                            class SourceAddress(_Entity_):
                                """
                                First 3 source addresses
                                
                                .. attribute:: af_name
                                
                                	AFName
                                	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                                
                                	**config**\: False
                                
                                .. attribute:: ipv4_address
                                
                                	IPv4 Addr
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                .. attribute:: ipv6_address
                                
                                	IPV6 Addr
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                

                                """

                                _prefix = 'ipv4-igmp-oper'
                                _revision = '2018-01-31'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Igmp.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.Host.SourceAddress, self).__init__()

                                    self.yang_name = "source-address"
                                    self.yang_parent_name = "host"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                        ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                        ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                    ])
                                    self.af_name = None
                                    self.ipv4_address = None
                                    self.ipv6_address = None
                                    self._segment_path = lambda: "source-address"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Igmp.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.Host.SourceAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                    return meta._meta_table['Igmp.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.Host.SourceAddress']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.Host']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Standby.Vrfs.Vrf.ExplicitGroups.ExplicitGroup']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Igmp.Standby.Vrfs.Vrf.ExplicitGroups']['meta_info']


                class InterfaceTable(_Entity_):
                    """
                    IGMP Interface specific Table
                    
                    .. attribute:: interface
                    
                    	IGMP Interface
                    	**type**\: list of  		 :py:class:`Interface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.InterfaceTable.Interface>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Igmp.Standby.Vrfs.Vrf.InterfaceTable, self).__init__()

                        self.yang_name = "interface-table"
                        self.yang_parent_name = "vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("interface", ("interface", Igmp.Standby.Vrfs.Vrf.InterfaceTable.Interface))])
                        self._leafs = OrderedDict()

                        self.interface = YList(self)
                        self._segment_path = lambda: "interface-table"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Igmp.Standby.Vrfs.Vrf.InterfaceTable, [], name, value)


                    class Interface(_Entity_):
                        """
                        IGMP Interface
                        
                        .. attribute:: interface_name  (key)
                        
                        	Interface Name
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: address
                        
                        	IP address
                        	**type**\:  :py:class:`Address <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.InterfaceTable.Interface.Address>`
                        
                        	**config**\: False
                        
                        .. attribute:: querier_address
                        
                        	Address of the Querier
                        	**type**\:  :py:class:`QuerierAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.InterfaceTable.Interface.QuerierAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: subscriber_address
                        
                        	Address of subscriber
                        	**type**\:  :py:class:`SubscriberAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.InterfaceTable.Interface.SubscriberAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: interface_name_xr
                        
                        	Interface
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: state
                        
                        	Interface state
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: prefix_length
                        
                        	Prefix length
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_interface_up
                        
                        	Is interface up
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_ip_enabled
                        
                        	Is IP enabled
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_router_enabled
                        
                        	Is Router functionality enabled
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: igmp_version
                        
                        	IGMP Router version
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        	**config**\: False
                        
                        .. attribute:: host_version
                        
                        	IGMP Host version
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        	**config**\: False
                        
                        .. attribute:: query_interval
                        
                        	Query Interval value in seconds
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        	**units**\: second
                        
                        .. attribute:: query_timeout
                        
                        	Query Timeout value
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: query_maximum_response_time
                        
                        	Max Response Timeout value
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: last_member_query_interval
                        
                        	Last Member Query Interval
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: group_joins
                        
                        	No. of group joins
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: group_leaves
                        
                        	No. of group leaves
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_querier
                        
                        	Are we querier
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: total_active_groups
                        
                        	Actual number of groups on interface
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: robustness
                        
                        	Robustness Variable value
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: proxy_interface
                        
                        	Proxy interface index
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: querier_uptime
                        
                        	Time since the last querier took over
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: las_ll_registration_count
                        
                        	LAS reg count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_get_address_count
                        
                        	LAS get addr count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_update_count
                        
                        	LAS Update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_ll_remove_update_count
                        
                        	LAS LL remove update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_ll_add_update_count
                        
                        	LAS LL add update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_null_update_count
                        
                        	LAS Null update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_unregistration_count
                        
                        	LAS unreg count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_las_request
                        
                        	LAS req
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_las_registered
                        
                        	LAS registered
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: vrf_id
                        
                        	VRF id
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: mte_vrf_id
                        
                        	MTE VRF id
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: location
                        
                        	Location
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: mtu
                        
                        	MTU
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: vrf_state
                        
                        	Vrf State
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_configurationverify
                        
                        	CFG verify
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configurationvrf_set
                        
                        	CFG vrf set
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configurationvrf_error
                        
                        	CFG vrf error
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configuration_mcast_vrf_set
                        
                        	Is mcast set
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configuration_mcast_vrf_error
                        
                        	Is mcast error
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_im_state_registered
                        
                        	Im state registered
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_subscriber
                        
                        	Subscriber interface
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: subscriber_mode
                        
                        	Subscriber mode
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_identity_present
                        
                        	Subscriber ID or Address available from AAA
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: subscriber_id
                        
                        	ID string of subscriber
                        	**type**\: str
                        
                        	**length:** 0..257
                        
                        	**config**\: False
                        
                        .. attribute:: parent_ifhandle
                        
                        	Parent If Handle
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: time_since_last_query_in_seconds
                        
                        	Time elapsed since last query
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: time_since_last_report_in_seconds
                        
                        	Time elapsed since last report
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: router_uptime_in_seconds
                        
                        	Uptime since router enabled event
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: mte_tuple_count
                        
                        	MTE Tuple count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Standby.Vrfs.Vrf.InterfaceTable.Interface, self).__init__()

                            self.yang_name = "interface"
                            self.yang_parent_name = "interface-table"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['interface_name']
                            self._child_classes = OrderedDict([("address", ("address", Igmp.Standby.Vrfs.Vrf.InterfaceTable.Interface.Address)), ("querier-address", ("querier_address", Igmp.Standby.Vrfs.Vrf.InterfaceTable.Interface.QuerierAddress)), ("subscriber-address", ("subscriber_address", Igmp.Standby.Vrfs.Vrf.InterfaceTable.Interface.SubscriberAddress))])
                            self._leafs = OrderedDict([
                                ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                ('interface_name_xr', (YLeaf(YType.str, 'interface-name-xr'), ['str'])),
                                ('state', (YLeaf(YType.uint32, 'state'), ['int'])),
                                ('prefix_length', (YLeaf(YType.uint32, 'prefix-length'), ['int'])),
                                ('is_interface_up', (YLeaf(YType.boolean, 'is-interface-up'), ['bool'])),
                                ('is_ip_enabled', (YLeaf(YType.boolean, 'is-ip-enabled'), ['bool'])),
                                ('is_router_enabled', (YLeaf(YType.boolean, 'is-router-enabled'), ['bool'])),
                                ('igmp_version', (YLeaf(YType.uint8, 'igmp-version'), ['int'])),
                                ('host_version', (YLeaf(YType.uint8, 'host-version'), ['int'])),
                                ('query_interval', (YLeaf(YType.uint16, 'query-interval'), ['int'])),
                                ('query_timeout', (YLeaf(YType.uint16, 'query-timeout'), ['int'])),
                                ('query_maximum_response_time', (YLeaf(YType.uint16, 'query-maximum-response-time'), ['int'])),
                                ('last_member_query_interval', (YLeaf(YType.uint16, 'last-member-query-interval'), ['int'])),
                                ('group_joins', (YLeaf(YType.uint32, 'group-joins'), ['int'])),
                                ('group_leaves', (YLeaf(YType.uint32, 'group-leaves'), ['int'])),
                                ('is_querier', (YLeaf(YType.boolean, 'is-querier'), ['bool'])),
                                ('total_active_groups', (YLeaf(YType.uint32, 'total-active-groups'), ['int'])),
                                ('robustness', (YLeaf(YType.uint32, 'robustness'), ['int'])),
                                ('proxy_interface', (YLeaf(YType.str, 'proxy-interface'), ['str'])),
                                ('querier_uptime', (YLeaf(YType.uint16, 'querier-uptime'), ['int'])),
                                ('las_ll_registration_count', (YLeaf(YType.uint32, 'las-ll-registration-count'), ['int'])),
                                ('las_get_address_count', (YLeaf(YType.uint32, 'las-get-address-count'), ['int'])),
                                ('las_update_count', (YLeaf(YType.uint32, 'las-update-count'), ['int'])),
                                ('las_ll_remove_update_count', (YLeaf(YType.uint32, 'las-ll-remove-update-count'), ['int'])),
                                ('las_ll_add_update_count', (YLeaf(YType.uint32, 'las-ll-add-update-count'), ['int'])),
                                ('las_null_update_count', (YLeaf(YType.uint32, 'las-null-update-count'), ['int'])),
                                ('las_unregistration_count', (YLeaf(YType.uint32, 'las-unregistration-count'), ['int'])),
                                ('is_las_request', (YLeaf(YType.boolean, 'is-las-request'), ['bool'])),
                                ('is_las_registered', (YLeaf(YType.boolean, 'is-las-registered'), ['bool'])),
                                ('vrf_id', (YLeaf(YType.uint32, 'vrf-id'), ['int'])),
                                ('mte_vrf_id', (YLeaf(YType.uint32, 'mte-vrf-id'), ['int'])),
                                ('location', (YLeaf(YType.uint32, 'location'), ['int'])),
                                ('mtu', (YLeaf(YType.uint32, 'mtu'), ['int'])),
                                ('vrf_state', (YLeaf(YType.uint32, 'vrf-state'), ['int'])),
                                ('is_configurationverify', (YLeaf(YType.boolean, 'is-configurationverify'), ['bool'])),
                                ('configurationvrf_set', (YLeaf(YType.boolean, 'configurationvrf-set'), ['bool'])),
                                ('configurationvrf_error', (YLeaf(YType.boolean, 'configurationvrf-error'), ['bool'])),
                                ('configuration_mcast_vrf_set', (YLeaf(YType.boolean, 'configuration-mcast-vrf-set'), ['bool'])),
                                ('configuration_mcast_vrf_error', (YLeaf(YType.boolean, 'configuration-mcast-vrf-error'), ['bool'])),
                                ('is_im_state_registered', (YLeaf(YType.boolean, 'is-im-state-registered'), ['bool'])),
                                ('is_subscriber', (YLeaf(YType.boolean, 'is-subscriber'), ['bool'])),
                                ('subscriber_mode', (YLeaf(YType.uint32, 'subscriber-mode'), ['int'])),
                                ('is_identity_present', (YLeaf(YType.boolean, 'is-identity-present'), ['bool'])),
                                ('subscriber_id', (YLeaf(YType.str, 'subscriber-id'), ['str'])),
                                ('parent_ifhandle', (YLeaf(YType.str, 'parent-ifhandle'), ['str'])),
                                ('time_since_last_query_in_seconds', (YLeaf(YType.uint32, 'time-since-last-query-in-seconds'), ['int'])),
                                ('time_since_last_report_in_seconds', (YLeaf(YType.uint32, 'time-since-last-report-in-seconds'), ['int'])),
                                ('router_uptime_in_seconds', (YLeaf(YType.uint32, 'router-uptime-in-seconds'), ['int'])),
                                ('mte_tuple_count', (YLeaf(YType.uint32, 'mte-tuple-count'), ['int'])),
                            ])
                            self.interface_name = None
                            self.interface_name_xr = None
                            self.state = None
                            self.prefix_length = None
                            self.is_interface_up = None
                            self.is_ip_enabled = None
                            self.is_router_enabled = None
                            self.igmp_version = None
                            self.host_version = None
                            self.query_interval = None
                            self.query_timeout = None
                            self.query_maximum_response_time = None
                            self.last_member_query_interval = None
                            self.group_joins = None
                            self.group_leaves = None
                            self.is_querier = None
                            self.total_active_groups = None
                            self.robustness = None
                            self.proxy_interface = None
                            self.querier_uptime = None
                            self.las_ll_registration_count = None
                            self.las_get_address_count = None
                            self.las_update_count = None
                            self.las_ll_remove_update_count = None
                            self.las_ll_add_update_count = None
                            self.las_null_update_count = None
                            self.las_unregistration_count = None
                            self.is_las_request = None
                            self.is_las_registered = None
                            self.vrf_id = None
                            self.mte_vrf_id = None
                            self.location = None
                            self.mtu = None
                            self.vrf_state = None
                            self.is_configurationverify = None
                            self.configurationvrf_set = None
                            self.configurationvrf_error = None
                            self.configuration_mcast_vrf_set = None
                            self.configuration_mcast_vrf_error = None
                            self.is_im_state_registered = None
                            self.is_subscriber = None
                            self.subscriber_mode = None
                            self.is_identity_present = None
                            self.subscriber_id = None
                            self.parent_ifhandle = None
                            self.time_since_last_query_in_seconds = None
                            self.time_since_last_report_in_seconds = None
                            self.router_uptime_in_seconds = None
                            self.mte_tuple_count = None

                            self.address = Igmp.Standby.Vrfs.Vrf.InterfaceTable.Interface.Address()
                            self.address.parent = self
                            self._children_name_map["address"] = "address"

                            self.querier_address = Igmp.Standby.Vrfs.Vrf.InterfaceTable.Interface.QuerierAddress()
                            self.querier_address.parent = self
                            self._children_name_map["querier_address"] = "querier-address"

                            self.subscriber_address = Igmp.Standby.Vrfs.Vrf.InterfaceTable.Interface.SubscriberAddress()
                            self.subscriber_address.parent = self
                            self._children_name_map["subscriber_address"] = "subscriber-address"
                            self._segment_path = lambda: "interface" + "[interface-name='" + str(self.interface_name) + "']"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Standby.Vrfs.Vrf.InterfaceTable.Interface, ['interface_name', 'interface_name_xr', 'state', 'prefix_length', 'is_interface_up', 'is_ip_enabled', 'is_router_enabled', 'igmp_version', 'host_version', 'query_interval', 'query_timeout', 'query_maximum_response_time', 'last_member_query_interval', 'group_joins', 'group_leaves', 'is_querier', 'total_active_groups', 'robustness', 'proxy_interface', 'querier_uptime', 'las_ll_registration_count', 'las_get_address_count', 'las_update_count', 'las_ll_remove_update_count', 'las_ll_add_update_count', 'las_null_update_count', 'las_unregistration_count', 'is_las_request', 'is_las_registered', 'vrf_id', 'mte_vrf_id', 'location', 'mtu', 'vrf_state', 'is_configurationverify', 'configurationvrf_set', 'configurationvrf_error', 'configuration_mcast_vrf_set', 'configuration_mcast_vrf_error', 'is_im_state_registered', 'is_subscriber', 'subscriber_mode', 'is_identity_present', 'subscriber_id', 'parent_ifhandle', 'time_since_last_query_in_seconds', 'time_since_last_report_in_seconds', 'router_uptime_in_seconds', 'mte_tuple_count'], name, value)


                        class Address(_Entity_):
                            """
                            IP address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Standby.Vrfs.Vrf.InterfaceTable.Interface.Address, self).__init__()

                                self.yang_name = "address"
                                self.yang_parent_name = "interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Standby.Vrfs.Vrf.InterfaceTable.Interface.Address, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Standby.Vrfs.Vrf.InterfaceTable.Interface.Address']['meta_info']


                        class QuerierAddress(_Entity_):
                            """
                            Address of the Querier
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Standby.Vrfs.Vrf.InterfaceTable.Interface.QuerierAddress, self).__init__()

                                self.yang_name = "querier-address"
                                self.yang_parent_name = "interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "querier-address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Standby.Vrfs.Vrf.InterfaceTable.Interface.QuerierAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Standby.Vrfs.Vrf.InterfaceTable.Interface.QuerierAddress']['meta_info']


                        class SubscriberAddress(_Entity_):
                            """
                            Address of subscriber
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Standby.Vrfs.Vrf.InterfaceTable.Interface.SubscriberAddress, self).__init__()

                                self.yang_name = "subscriber-address"
                                self.yang_parent_name = "interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "subscriber-address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Standby.Vrfs.Vrf.InterfaceTable.Interface.SubscriberAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Standby.Vrfs.Vrf.InterfaceTable.Interface.SubscriberAddress']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Standby.Vrfs.Vrf.InterfaceTable.Interface']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Igmp.Standby.Vrfs.Vrf.InterfaceTable']['meta_info']


                class InterfaceUnicastQosAdjusts(_Entity_):
                    """
                    IGMP Interface Unicast\-Qos\-Adjust
                    
                    .. attribute:: interface_unicast_qos_adjust
                    
                    	IGMP Interface
                    	**type**\: list of  		 :py:class:`InterfaceUnicastQosAdjust <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Igmp.Standby.Vrfs.Vrf.InterfaceUnicastQosAdjusts, self).__init__()

                        self.yang_name = "interface-unicast-qos-adjusts"
                        self.yang_parent_name = "vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("interface-unicast-qos-adjust", ("interface_unicast_qos_adjust", Igmp.Standby.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust))])
                        self._leafs = OrderedDict()

                        self.interface_unicast_qos_adjust = YList(self)
                        self._segment_path = lambda: "interface-unicast-qos-adjusts"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Igmp.Standby.Vrfs.Vrf.InterfaceUnicastQosAdjusts, [], name, value)


                    class InterfaceUnicastQosAdjust(_Entity_):
                        """
                        IGMP Interface
                        
                        .. attribute:: interface_name  (key)
                        
                        	Interface Name
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: is_virtual_access
                        
                        	Is VirtualAccess Interface
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: rate
                        
                        	Overall rate in Kbps
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        	**units**\: kbit/s
                        
                        .. attribute:: rate_increments
                        
                        	Count of rate increments
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: rate_decrements
                        
                        	Count of rate decrements
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: update
                        
                        	List of updates
                        	**type**\: list of  		 :py:class:`Update <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update>`
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Standby.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust, self).__init__()

                            self.yang_name = "interface-unicast-qos-adjust"
                            self.yang_parent_name = "interface-unicast-qos-adjusts"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['interface_name']
                            self._child_classes = OrderedDict([("update", ("update", Igmp.Standby.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update))])
                            self._leafs = OrderedDict([
                                ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                ('is_virtual_access', (YLeaf(YType.boolean, 'is-virtual-access'), ['bool'])),
                                ('rate', (YLeaf(YType.uint32, 'rate'), ['int'])),
                                ('rate_increments', (YLeaf(YType.uint32, 'rate-increments'), ['int'])),
                                ('rate_decrements', (YLeaf(YType.uint32, 'rate-decrements'), ['int'])),
                            ])
                            self.interface_name = None
                            self.is_virtual_access = None
                            self.rate = None
                            self.rate_increments = None
                            self.rate_decrements = None

                            self.update = YList(self)
                            self._segment_path = lambda: "interface-unicast-qos-adjust" + "[interface-name='" + str(self.interface_name) + "']"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Standby.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust, ['interface_name', 'is_virtual_access', 'rate', 'rate_increments', 'rate_decrements'], name, value)


                        class Update(_Entity_):
                            """
                            List of updates
                            
                            .. attribute:: source_address
                            
                            	Source address
                            	**type**\:  :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.SourceAddress>`
                            
                            	**config**\: False
                            
                            .. attribute:: group_address
                            
                            	Group address
                            	**type**\:  :py:class:`GroupAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.GroupAddress>`
                            
                            	**config**\: False
                            
                            .. attribute:: is_add
                            
                            	Is this a rate increment
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: weight
                            
                            	Weight from policy
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: received_time
                            
                            	Time this update is received
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Standby.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update, self).__init__()

                                self.yang_name = "update"
                                self.yang_parent_name = "interface-unicast-qos-adjust"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("source-address", ("source_address", Igmp.Standby.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.SourceAddress)), ("group-address", ("group_address", Igmp.Standby.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.GroupAddress))])
                                self._leafs = OrderedDict([
                                    ('is_add', (YLeaf(YType.boolean, 'is-add'), ['bool'])),
                                    ('weight', (YLeaf(YType.uint32, 'weight'), ['int'])),
                                    ('received_time', (YLeaf(YType.uint64, 'received-time'), ['int'])),
                                ])
                                self.is_add = None
                                self.weight = None
                                self.received_time = None

                                self.source_address = Igmp.Standby.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.SourceAddress()
                                self.source_address.parent = self
                                self._children_name_map["source_address"] = "source-address"

                                self.group_address = Igmp.Standby.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.GroupAddress()
                                self.group_address.parent = self
                                self._children_name_map["group_address"] = "group-address"
                                self._segment_path = lambda: "update"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Standby.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update, ['is_add', 'weight', 'received_time'], name, value)


                            class SourceAddress(_Entity_):
                                """
                                Source address
                                
                                .. attribute:: af_name
                                
                                	AFName
                                	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                                
                                	**config**\: False
                                
                                .. attribute:: ipv4_address
                                
                                	IPv4 Addr
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                .. attribute:: ipv6_address
                                
                                	IPV6 Addr
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                

                                """

                                _prefix = 'ipv4-igmp-oper'
                                _revision = '2018-01-31'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Igmp.Standby.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.SourceAddress, self).__init__()

                                    self.yang_name = "source-address"
                                    self.yang_parent_name = "update"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                        ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                        ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                    ])
                                    self.af_name = None
                                    self.ipv4_address = None
                                    self.ipv6_address = None
                                    self._segment_path = lambda: "source-address"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Igmp.Standby.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.SourceAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                    return meta._meta_table['Igmp.Standby.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.SourceAddress']['meta_info']


                            class GroupAddress(_Entity_):
                                """
                                Group address
                                
                                .. attribute:: af_name
                                
                                	AFName
                                	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                                
                                	**config**\: False
                                
                                .. attribute:: ipv4_address
                                
                                	IPv4 Addr
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                .. attribute:: ipv6_address
                                
                                	IPV6 Addr
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                

                                """

                                _prefix = 'ipv4-igmp-oper'
                                _revision = '2018-01-31'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Igmp.Standby.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.GroupAddress, self).__init__()

                                    self.yang_name = "group-address"
                                    self.yang_parent_name = "update"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                        ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                        ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                    ])
                                    self.af_name = None
                                    self.ipv4_address = None
                                    self.ipv6_address = None
                                    self._segment_path = lambda: "group-address"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Igmp.Standby.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.GroupAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                    return meta._meta_table['Igmp.Standby.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.GroupAddress']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Standby.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Standby.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Igmp.Standby.Vrfs.Vrf.InterfaceUnicastQosAdjusts']['meta_info']


                class Ranges(_Entity_):
                    """
                    Range table
                    
                    .. attribute:: range
                    
                    	Range information
                    	**type**\: list of  		 :py:class:`Range <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.Ranges.Range>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Igmp.Standby.Vrfs.Vrf.Ranges, self).__init__()

                        self.yang_name = "ranges"
                        self.yang_parent_name = "vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("range", ("range", Igmp.Standby.Vrfs.Vrf.Ranges.Range))])
                        self._leafs = OrderedDict()

                        self.range = YList(self)
                        self._segment_path = lambda: "ranges"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Igmp.Standby.Vrfs.Vrf.Ranges, [], name, value)


                    class Range(_Entity_):
                        """
                        Range information
                        
                        .. attribute:: group_address
                        
                        	Group address
                        	**type**\: union of the below types:
                        
                        		**type**\: str
                        
                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        		**type**\: str
                        
                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: group_mask
                        
                        	Group Mask
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: group_address_xr
                        
                        	Group address
                        	**type**\:  :py:class:`GroupAddressXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.Ranges.Range.GroupAddressXr>`
                        
                        	**config**\: False
                        
                        .. attribute:: prefix_length
                        
                        	Prefix length
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: protocol
                        
                        	Protocol
                        	**type**\:  :py:class:`IgmpEdmProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpEdmProtocol>`
                        
                        	**config**\: False
                        
                        .. attribute:: is_stale
                        
                        	Is the entry stale
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Standby.Vrfs.Vrf.Ranges.Range, self).__init__()

                            self.yang_name = "range"
                            self.yang_parent_name = "ranges"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("group-address-xr", ("group_address_xr", Igmp.Standby.Vrfs.Vrf.Ranges.Range.GroupAddressXr))])
                            self._leafs = OrderedDict([
                                ('group_address', (YLeaf(YType.str, 'group-address'), ['str','str'])),
                                ('group_mask', (YLeaf(YType.uint32, 'group-mask'), ['int'])),
                                ('prefix_length', (YLeaf(YType.uint32, 'prefix-length'), ['int'])),
                                ('protocol', (YLeaf(YType.enumeration, 'protocol'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpEdmProtocol', '')])),
                                ('is_stale', (YLeaf(YType.boolean, 'is-stale'), ['bool'])),
                            ])
                            self.group_address = None
                            self.group_mask = None
                            self.prefix_length = None
                            self.protocol = None
                            self.is_stale = None

                            self.group_address_xr = Igmp.Standby.Vrfs.Vrf.Ranges.Range.GroupAddressXr()
                            self.group_address_xr.parent = self
                            self._children_name_map["group_address_xr"] = "group-address-xr"
                            self._segment_path = lambda: "range"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Standby.Vrfs.Vrf.Ranges.Range, ['group_address', 'group_mask', 'prefix_length', 'protocol', 'is_stale'], name, value)


                        class GroupAddressXr(_Entity_):
                            """
                            Group address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Standby.Vrfs.Vrf.Ranges.Range.GroupAddressXr, self).__init__()

                                self.yang_name = "group-address-xr"
                                self.yang_parent_name = "range"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "group-address-xr"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Standby.Vrfs.Vrf.Ranges.Range.GroupAddressXr, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Standby.Vrfs.Vrf.Ranges.Range.GroupAddressXr']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Standby.Vrfs.Vrf.Ranges.Range']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Igmp.Standby.Vrfs.Vrf.Ranges']['meta_info']


                class IfrsInterfaces(_Entity_):
                    """
                    IGMP Interface specific
                    
                    .. attribute:: ifrs_interface
                    
                    	IGMP IFRS Interface
                    	**type**\: list of  		 :py:class:`IfrsInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.IfrsInterfaces.IfrsInterface>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Igmp.Standby.Vrfs.Vrf.IfrsInterfaces, self).__init__()

                        self.yang_name = "ifrs-interfaces"
                        self.yang_parent_name = "vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("ifrs-interface", ("ifrs_interface", Igmp.Standby.Vrfs.Vrf.IfrsInterfaces.IfrsInterface))])
                        self._leafs = OrderedDict()

                        self.ifrs_interface = YList(self)
                        self._segment_path = lambda: "ifrs-interfaces"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Igmp.Standby.Vrfs.Vrf.IfrsInterfaces, [], name, value)


                    class IfrsInterface(_Entity_):
                        """
                        IGMP IFRS Interface
                        
                        .. attribute:: interface_name  (key)
                        
                        	IFRS Interface Name
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: igmp_interface_entry
                        
                        	IGMP interface entry
                        	**type**\:  :py:class:`IgmpInterfaceEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry>`
                        
                        	**config**\: False
                        
                        .. attribute:: join_group_count
                        
                        	Join group count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Standby.Vrfs.Vrf.IfrsInterfaces.IfrsInterface, self).__init__()

                            self.yang_name = "ifrs-interface"
                            self.yang_parent_name = "ifrs-interfaces"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['interface_name']
                            self._child_classes = OrderedDict([("igmp-interface-entry", ("igmp_interface_entry", Igmp.Standby.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry))])
                            self._leafs = OrderedDict([
                                ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                ('join_group_count', (YLeaf(YType.uint32, 'join-group-count'), ['int'])),
                            ])
                            self.interface_name = None
                            self.join_group_count = None

                            self.igmp_interface_entry = Igmp.Standby.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry()
                            self.igmp_interface_entry.parent = self
                            self._children_name_map["igmp_interface_entry"] = "igmp-interface-entry"
                            self._segment_path = lambda: "ifrs-interface" + "[interface-name='" + str(self.interface_name) + "']"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Standby.Vrfs.Vrf.IfrsInterfaces.IfrsInterface, ['interface_name', 'join_group_count'], name, value)


                        class IgmpInterfaceEntry(_Entity_):
                            """
                            IGMP interface entry
                            
                            .. attribute:: address
                            
                            	IP address
                            	**type**\:  :py:class:`Address <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.Address>`
                            
                            	**config**\: False
                            
                            .. attribute:: querier_address
                            
                            	Address of the Querier
                            	**type**\:  :py:class:`QuerierAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.QuerierAddress>`
                            
                            	**config**\: False
                            
                            .. attribute:: subscriber_address
                            
                            	Address of subscriber
                            	**type**\:  :py:class:`SubscriberAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.SubscriberAddress>`
                            
                            	**config**\: False
                            
                            .. attribute:: interface_name_xr
                            
                            	Interface
                            	**type**\: str
                            
                            	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                            
                            	**config**\: False
                            
                            .. attribute:: state
                            
                            	Interface state
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: prefix_length
                            
                            	Prefix length
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: is_interface_up
                            
                            	Is interface up
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: is_ip_enabled
                            
                            	Is IP enabled
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: is_router_enabled
                            
                            	Is Router functionality enabled
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: igmp_version
                            
                            	IGMP Router version
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            	**config**\: False
                            
                            .. attribute:: host_version
                            
                            	IGMP Host version
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            	**config**\: False
                            
                            .. attribute:: query_interval
                            
                            	Query Interval value in seconds
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            	**config**\: False
                            
                            	**units**\: second
                            
                            .. attribute:: query_timeout
                            
                            	Query Timeout value
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            	**config**\: False
                            
                            .. attribute:: query_maximum_response_time
                            
                            	Max Response Timeout value
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            	**config**\: False
                            
                            .. attribute:: last_member_query_interval
                            
                            	Last Member Query Interval
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            	**config**\: False
                            
                            .. attribute:: group_joins
                            
                            	No. of group joins
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: group_leaves
                            
                            	No. of group leaves
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: is_querier
                            
                            	Are we querier
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: total_active_groups
                            
                            	Actual number of groups on interface
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: robustness
                            
                            	Robustness Variable value
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: proxy_interface
                            
                            	Proxy interface index
                            	**type**\: str
                            
                            	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                            
                            	**config**\: False
                            
                            .. attribute:: querier_uptime
                            
                            	Time since the last querier took over
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            	**config**\: False
                            
                            .. attribute:: las_ll_registration_count
                            
                            	LAS reg count
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: las_get_address_count
                            
                            	LAS get addr count
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: las_update_count
                            
                            	LAS Update count
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: las_ll_remove_update_count
                            
                            	LAS LL remove update count
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: las_ll_add_update_count
                            
                            	LAS LL add update count
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: las_null_update_count
                            
                            	LAS Null update count
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: las_unregistration_count
                            
                            	LAS unreg count
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: is_las_request
                            
                            	LAS req
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: is_las_registered
                            
                            	LAS registered
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: vrf_id
                            
                            	VRF id
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: mte_vrf_id
                            
                            	MTE VRF id
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: location
                            
                            	Location
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: mtu
                            
                            	MTU
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: vrf_state
                            
                            	Vrf State
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: is_configurationverify
                            
                            	CFG verify
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: configurationvrf_set
                            
                            	CFG vrf set
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: configurationvrf_error
                            
                            	CFG vrf error
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: configuration_mcast_vrf_set
                            
                            	Is mcast set
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: configuration_mcast_vrf_error
                            
                            	Is mcast error
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: is_im_state_registered
                            
                            	Im state registered
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: is_subscriber
                            
                            	Subscriber interface
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: subscriber_mode
                            
                            	Subscriber mode
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: is_identity_present
                            
                            	Subscriber ID or Address available from AAA
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: subscriber_id
                            
                            	ID string of subscriber
                            	**type**\: str
                            
                            	**length:** 0..257
                            
                            	**config**\: False
                            
                            .. attribute:: parent_ifhandle
                            
                            	Parent If Handle
                            	**type**\: str
                            
                            	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                            
                            	**config**\: False
                            
                            .. attribute:: time_since_last_query_in_seconds
                            
                            	Time elapsed since last query
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: time_since_last_report_in_seconds
                            
                            	Time elapsed since last report
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: router_uptime_in_seconds
                            
                            	Uptime since router enabled event
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: mte_tuple_count
                            
                            	MTE Tuple count
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Standby.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry, self).__init__()

                                self.yang_name = "igmp-interface-entry"
                                self.yang_parent_name = "ifrs-interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("address", ("address", Igmp.Standby.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.Address)), ("querier-address", ("querier_address", Igmp.Standby.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.QuerierAddress)), ("subscriber-address", ("subscriber_address", Igmp.Standby.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.SubscriberAddress))])
                                self._leafs = OrderedDict([
                                    ('interface_name_xr', (YLeaf(YType.str, 'interface-name-xr'), ['str'])),
                                    ('state', (YLeaf(YType.uint32, 'state'), ['int'])),
                                    ('prefix_length', (YLeaf(YType.uint32, 'prefix-length'), ['int'])),
                                    ('is_interface_up', (YLeaf(YType.boolean, 'is-interface-up'), ['bool'])),
                                    ('is_ip_enabled', (YLeaf(YType.boolean, 'is-ip-enabled'), ['bool'])),
                                    ('is_router_enabled', (YLeaf(YType.boolean, 'is-router-enabled'), ['bool'])),
                                    ('igmp_version', (YLeaf(YType.uint8, 'igmp-version'), ['int'])),
                                    ('host_version', (YLeaf(YType.uint8, 'host-version'), ['int'])),
                                    ('query_interval', (YLeaf(YType.uint16, 'query-interval'), ['int'])),
                                    ('query_timeout', (YLeaf(YType.uint16, 'query-timeout'), ['int'])),
                                    ('query_maximum_response_time', (YLeaf(YType.uint16, 'query-maximum-response-time'), ['int'])),
                                    ('last_member_query_interval', (YLeaf(YType.uint16, 'last-member-query-interval'), ['int'])),
                                    ('group_joins', (YLeaf(YType.uint32, 'group-joins'), ['int'])),
                                    ('group_leaves', (YLeaf(YType.uint32, 'group-leaves'), ['int'])),
                                    ('is_querier', (YLeaf(YType.boolean, 'is-querier'), ['bool'])),
                                    ('total_active_groups', (YLeaf(YType.uint32, 'total-active-groups'), ['int'])),
                                    ('robustness', (YLeaf(YType.uint32, 'robustness'), ['int'])),
                                    ('proxy_interface', (YLeaf(YType.str, 'proxy-interface'), ['str'])),
                                    ('querier_uptime', (YLeaf(YType.uint16, 'querier-uptime'), ['int'])),
                                    ('las_ll_registration_count', (YLeaf(YType.uint32, 'las-ll-registration-count'), ['int'])),
                                    ('las_get_address_count', (YLeaf(YType.uint32, 'las-get-address-count'), ['int'])),
                                    ('las_update_count', (YLeaf(YType.uint32, 'las-update-count'), ['int'])),
                                    ('las_ll_remove_update_count', (YLeaf(YType.uint32, 'las-ll-remove-update-count'), ['int'])),
                                    ('las_ll_add_update_count', (YLeaf(YType.uint32, 'las-ll-add-update-count'), ['int'])),
                                    ('las_null_update_count', (YLeaf(YType.uint32, 'las-null-update-count'), ['int'])),
                                    ('las_unregistration_count', (YLeaf(YType.uint32, 'las-unregistration-count'), ['int'])),
                                    ('is_las_request', (YLeaf(YType.boolean, 'is-las-request'), ['bool'])),
                                    ('is_las_registered', (YLeaf(YType.boolean, 'is-las-registered'), ['bool'])),
                                    ('vrf_id', (YLeaf(YType.uint32, 'vrf-id'), ['int'])),
                                    ('mte_vrf_id', (YLeaf(YType.uint32, 'mte-vrf-id'), ['int'])),
                                    ('location', (YLeaf(YType.uint32, 'location'), ['int'])),
                                    ('mtu', (YLeaf(YType.uint32, 'mtu'), ['int'])),
                                    ('vrf_state', (YLeaf(YType.uint32, 'vrf-state'), ['int'])),
                                    ('is_configurationverify', (YLeaf(YType.boolean, 'is-configurationverify'), ['bool'])),
                                    ('configurationvrf_set', (YLeaf(YType.boolean, 'configurationvrf-set'), ['bool'])),
                                    ('configurationvrf_error', (YLeaf(YType.boolean, 'configurationvrf-error'), ['bool'])),
                                    ('configuration_mcast_vrf_set', (YLeaf(YType.boolean, 'configuration-mcast-vrf-set'), ['bool'])),
                                    ('configuration_mcast_vrf_error', (YLeaf(YType.boolean, 'configuration-mcast-vrf-error'), ['bool'])),
                                    ('is_im_state_registered', (YLeaf(YType.boolean, 'is-im-state-registered'), ['bool'])),
                                    ('is_subscriber', (YLeaf(YType.boolean, 'is-subscriber'), ['bool'])),
                                    ('subscriber_mode', (YLeaf(YType.uint32, 'subscriber-mode'), ['int'])),
                                    ('is_identity_present', (YLeaf(YType.boolean, 'is-identity-present'), ['bool'])),
                                    ('subscriber_id', (YLeaf(YType.str, 'subscriber-id'), ['str'])),
                                    ('parent_ifhandle', (YLeaf(YType.str, 'parent-ifhandle'), ['str'])),
                                    ('time_since_last_query_in_seconds', (YLeaf(YType.uint32, 'time-since-last-query-in-seconds'), ['int'])),
                                    ('time_since_last_report_in_seconds', (YLeaf(YType.uint32, 'time-since-last-report-in-seconds'), ['int'])),
                                    ('router_uptime_in_seconds', (YLeaf(YType.uint32, 'router-uptime-in-seconds'), ['int'])),
                                    ('mte_tuple_count', (YLeaf(YType.uint32, 'mte-tuple-count'), ['int'])),
                                ])
                                self.interface_name_xr = None
                                self.state = None
                                self.prefix_length = None
                                self.is_interface_up = None
                                self.is_ip_enabled = None
                                self.is_router_enabled = None
                                self.igmp_version = None
                                self.host_version = None
                                self.query_interval = None
                                self.query_timeout = None
                                self.query_maximum_response_time = None
                                self.last_member_query_interval = None
                                self.group_joins = None
                                self.group_leaves = None
                                self.is_querier = None
                                self.total_active_groups = None
                                self.robustness = None
                                self.proxy_interface = None
                                self.querier_uptime = None
                                self.las_ll_registration_count = None
                                self.las_get_address_count = None
                                self.las_update_count = None
                                self.las_ll_remove_update_count = None
                                self.las_ll_add_update_count = None
                                self.las_null_update_count = None
                                self.las_unregistration_count = None
                                self.is_las_request = None
                                self.is_las_registered = None
                                self.vrf_id = None
                                self.mte_vrf_id = None
                                self.location = None
                                self.mtu = None
                                self.vrf_state = None
                                self.is_configurationverify = None
                                self.configurationvrf_set = None
                                self.configurationvrf_error = None
                                self.configuration_mcast_vrf_set = None
                                self.configuration_mcast_vrf_error = None
                                self.is_im_state_registered = None
                                self.is_subscriber = None
                                self.subscriber_mode = None
                                self.is_identity_present = None
                                self.subscriber_id = None
                                self.parent_ifhandle = None
                                self.time_since_last_query_in_seconds = None
                                self.time_since_last_report_in_seconds = None
                                self.router_uptime_in_seconds = None
                                self.mte_tuple_count = None

                                self.address = Igmp.Standby.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.Address()
                                self.address.parent = self
                                self._children_name_map["address"] = "address"

                                self.querier_address = Igmp.Standby.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.QuerierAddress()
                                self.querier_address.parent = self
                                self._children_name_map["querier_address"] = "querier-address"

                                self.subscriber_address = Igmp.Standby.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.SubscriberAddress()
                                self.subscriber_address.parent = self
                                self._children_name_map["subscriber_address"] = "subscriber-address"
                                self._segment_path = lambda: "igmp-interface-entry"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Standby.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry, ['interface_name_xr', 'state', 'prefix_length', 'is_interface_up', 'is_ip_enabled', 'is_router_enabled', 'igmp_version', 'host_version', 'query_interval', 'query_timeout', 'query_maximum_response_time', 'last_member_query_interval', 'group_joins', 'group_leaves', 'is_querier', 'total_active_groups', 'robustness', 'proxy_interface', 'querier_uptime', 'las_ll_registration_count', 'las_get_address_count', 'las_update_count', 'las_ll_remove_update_count', 'las_ll_add_update_count', 'las_null_update_count', 'las_unregistration_count', 'is_las_request', 'is_las_registered', 'vrf_id', 'mte_vrf_id', 'location', 'mtu', 'vrf_state', 'is_configurationverify', 'configurationvrf_set', 'configurationvrf_error', 'configuration_mcast_vrf_set', 'configuration_mcast_vrf_error', 'is_im_state_registered', 'is_subscriber', 'subscriber_mode', 'is_identity_present', 'subscriber_id', 'parent_ifhandle', 'time_since_last_query_in_seconds', 'time_since_last_report_in_seconds', 'router_uptime_in_seconds', 'mte_tuple_count'], name, value)


                            class Address(_Entity_):
                                """
                                IP address
                                
                                .. attribute:: af_name
                                
                                	AFName
                                	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                                
                                	**config**\: False
                                
                                .. attribute:: ipv4_address
                                
                                	IPv4 Addr
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                .. attribute:: ipv6_address
                                
                                	IPV6 Addr
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                

                                """

                                _prefix = 'ipv4-igmp-oper'
                                _revision = '2018-01-31'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Igmp.Standby.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.Address, self).__init__()

                                    self.yang_name = "address"
                                    self.yang_parent_name = "igmp-interface-entry"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                        ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                        ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                    ])
                                    self.af_name = None
                                    self.ipv4_address = None
                                    self.ipv6_address = None
                                    self._segment_path = lambda: "address"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Igmp.Standby.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.Address, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                    return meta._meta_table['Igmp.Standby.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.Address']['meta_info']


                            class QuerierAddress(_Entity_):
                                """
                                Address of the Querier
                                
                                .. attribute:: af_name
                                
                                	AFName
                                	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                                
                                	**config**\: False
                                
                                .. attribute:: ipv4_address
                                
                                	IPv4 Addr
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                .. attribute:: ipv6_address
                                
                                	IPV6 Addr
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                

                                """

                                _prefix = 'ipv4-igmp-oper'
                                _revision = '2018-01-31'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Igmp.Standby.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.QuerierAddress, self).__init__()

                                    self.yang_name = "querier-address"
                                    self.yang_parent_name = "igmp-interface-entry"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                        ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                        ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                    ])
                                    self.af_name = None
                                    self.ipv4_address = None
                                    self.ipv6_address = None
                                    self._segment_path = lambda: "querier-address"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Igmp.Standby.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.QuerierAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                    return meta._meta_table['Igmp.Standby.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.QuerierAddress']['meta_info']


                            class SubscriberAddress(_Entity_):
                                """
                                Address of subscriber
                                
                                .. attribute:: af_name
                                
                                	AFName
                                	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                                
                                	**config**\: False
                                
                                .. attribute:: ipv4_address
                                
                                	IPv4 Addr
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                .. attribute:: ipv6_address
                                
                                	IPV6 Addr
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                

                                """

                                _prefix = 'ipv4-igmp-oper'
                                _revision = '2018-01-31'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Igmp.Standby.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.SubscriberAddress, self).__init__()

                                    self.yang_name = "subscriber-address"
                                    self.yang_parent_name = "igmp-interface-entry"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                        ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                        ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                    ])
                                    self.af_name = None
                                    self.ipv4_address = None
                                    self.ipv6_address = None
                                    self._segment_path = lambda: "subscriber-address"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Igmp.Standby.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.SubscriberAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                    return meta._meta_table['Igmp.Standby.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.SubscriberAddress']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Standby.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Standby.Vrfs.Vrf.IfrsInterfaces.IfrsInterface']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Igmp.Standby.Vrfs.Vrf.IfrsInterfaces']['meta_info']


                class TrafficCounters(_Entity_):
                    """
                    IGMP Message Traffic Counters
                    
                    .. attribute:: elapsed_time
                    
                    	Running time for counters
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: packets_in
                    
                    	Packets in
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: packets_out
                    
                    	Packets out
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: format_errors
                    
                    	Malformed packets in
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: packet_manager_input_errors
                    
                    	Incoming Packet Manager packets dropped
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: packet_manager_output_errors
                    
                    	Outgoing Packet Manager packets dropped
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: checksum_errors
                    
                    	Checksum errors
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: receive_socket_errors
                    
                    	Socket errors on reception
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: socket_errors
                    
                    	Socket errors on send
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: bad_scope_errors
                    
                    	BadScope errors
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: auxillary_data_length_errors
                    
                    	AuxDataLen errors
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: invalid_source_address_errors
                    
                    	Invalid Source Address errors
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: no_socket_connection
                    
                    	Packets dropped since no socket connection
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: miscellaneous_errors
                    
                    	Packets dropped for other reasons
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: input_queries
                    
                    	Query packets in
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: input_reports
                    
                    	Reports in
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: input_leaves
                    
                    	Leaves in
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: input_mtrace
                    
                    	Mtrace packets in
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: input_dvmrp
                    
                    	DVMRP packets in
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: input_pim
                    
                    	PIM packets in
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: output_queries
                    
                    	Query packets out
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: output_reports
                    
                    	Reports out
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: output_leaves
                    
                    	Leaves out
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: output_mtrace
                    
                    	Mtrace packets out
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: output_dvmrp
                    
                    	DVMRP packets out
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: output_pim
                    
                    	PIM packets out
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: get_packet_failure
                    
                    	Packet get failed
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: output_no_parent_interface_handle
                    
                    	Failures setting 2nd ifhandle
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: input_no_idb
                    
                    	Packets received without idb
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: input_no_vrf_in_idb
                    
                    	Packets received on idb without VRF
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: input_disabled_idb
                    
                    	Packet received on disabled idb
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: input_martian_address
                    
                    	Packets received with Martian Address
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: input_no_assigned_vrf_id
                    
                    	Packets received with no assigned vrf id
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: input_no_vrf_mtrace
                    
                    	mtrace packets with no vrf associated
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: input_no_platform_support_mtrace
                    
                    	mtrace packets without platform support
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Igmp.Standby.Vrfs.Vrf.TrafficCounters, self).__init__()

                        self.yang_name = "traffic-counters"
                        self.yang_parent_name = "vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('elapsed_time', (YLeaf(YType.uint32, 'elapsed-time'), ['int'])),
                            ('packets_in', (YLeaf(YType.uint32, 'packets-in'), ['int'])),
                            ('packets_out', (YLeaf(YType.uint32, 'packets-out'), ['int'])),
                            ('format_errors', (YLeaf(YType.uint32, 'format-errors'), ['int'])),
                            ('packet_manager_input_errors', (YLeaf(YType.uint32, 'packet-manager-input-errors'), ['int'])),
                            ('packet_manager_output_errors', (YLeaf(YType.uint32, 'packet-manager-output-errors'), ['int'])),
                            ('checksum_errors', (YLeaf(YType.uint32, 'checksum-errors'), ['int'])),
                            ('receive_socket_errors', (YLeaf(YType.uint32, 'receive-socket-errors'), ['int'])),
                            ('socket_errors', (YLeaf(YType.uint32, 'socket-errors'), ['int'])),
                            ('bad_scope_errors', (YLeaf(YType.uint32, 'bad-scope-errors'), ['int'])),
                            ('auxillary_data_length_errors', (YLeaf(YType.uint32, 'auxillary-data-length-errors'), ['int'])),
                            ('invalid_source_address_errors', (YLeaf(YType.uint32, 'invalid-source-address-errors'), ['int'])),
                            ('no_socket_connection', (YLeaf(YType.uint32, 'no-socket-connection'), ['int'])),
                            ('miscellaneous_errors', (YLeaf(YType.uint32, 'miscellaneous-errors'), ['int'])),
                            ('input_queries', (YLeaf(YType.uint32, 'input-queries'), ['int'])),
                            ('input_reports', (YLeaf(YType.uint32, 'input-reports'), ['int'])),
                            ('input_leaves', (YLeaf(YType.uint32, 'input-leaves'), ['int'])),
                            ('input_mtrace', (YLeaf(YType.uint32, 'input-mtrace'), ['int'])),
                            ('input_dvmrp', (YLeaf(YType.uint32, 'input-dvmrp'), ['int'])),
                            ('input_pim', (YLeaf(YType.uint32, 'input-pim'), ['int'])),
                            ('output_queries', (YLeaf(YType.uint32, 'output-queries'), ['int'])),
                            ('output_reports', (YLeaf(YType.uint32, 'output-reports'), ['int'])),
                            ('output_leaves', (YLeaf(YType.uint32, 'output-leaves'), ['int'])),
                            ('output_mtrace', (YLeaf(YType.uint32, 'output-mtrace'), ['int'])),
                            ('output_dvmrp', (YLeaf(YType.uint32, 'output-dvmrp'), ['int'])),
                            ('output_pim', (YLeaf(YType.uint32, 'output-pim'), ['int'])),
                            ('get_packet_failure', (YLeaf(YType.uint32, 'get-packet-failure'), ['int'])),
                            ('output_no_parent_interface_handle', (YLeaf(YType.uint32, 'output-no-parent-interface-handle'), ['int'])),
                            ('input_no_idb', (YLeaf(YType.uint32, 'input-no-idb'), ['int'])),
                            ('input_no_vrf_in_idb', (YLeaf(YType.uint32, 'input-no-vrf-in-idb'), ['int'])),
                            ('input_disabled_idb', (YLeaf(YType.uint32, 'input-disabled-idb'), ['int'])),
                            ('input_martian_address', (YLeaf(YType.uint32, 'input-martian-address'), ['int'])),
                            ('input_no_assigned_vrf_id', (YLeaf(YType.uint32, 'input-no-assigned-vrf-id'), ['int'])),
                            ('input_no_vrf_mtrace', (YLeaf(YType.uint32, 'input-no-vrf-mtrace'), ['int'])),
                            ('input_no_platform_support_mtrace', (YLeaf(YType.uint32, 'input-no-platform-support-mtrace'), ['int'])),
                        ])
                        self.elapsed_time = None
                        self.packets_in = None
                        self.packets_out = None
                        self.format_errors = None
                        self.packet_manager_input_errors = None
                        self.packet_manager_output_errors = None
                        self.checksum_errors = None
                        self.receive_socket_errors = None
                        self.socket_errors = None
                        self.bad_scope_errors = None
                        self.auxillary_data_length_errors = None
                        self.invalid_source_address_errors = None
                        self.no_socket_connection = None
                        self.miscellaneous_errors = None
                        self.input_queries = None
                        self.input_reports = None
                        self.input_leaves = None
                        self.input_mtrace = None
                        self.input_dvmrp = None
                        self.input_pim = None
                        self.output_queries = None
                        self.output_reports = None
                        self.output_leaves = None
                        self.output_mtrace = None
                        self.output_dvmrp = None
                        self.output_pim = None
                        self.get_packet_failure = None
                        self.output_no_parent_interface_handle = None
                        self.input_no_idb = None
                        self.input_no_vrf_in_idb = None
                        self.input_disabled_idb = None
                        self.input_martian_address = None
                        self.input_no_assigned_vrf_id = None
                        self.input_no_vrf_mtrace = None
                        self.input_no_platform_support_mtrace = None
                        self._segment_path = lambda: "traffic-counters"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Igmp.Standby.Vrfs.Vrf.TrafficCounters, ['elapsed_time', 'packets_in', 'packets_out', 'format_errors', 'packet_manager_input_errors', 'packet_manager_output_errors', 'checksum_errors', 'receive_socket_errors', 'socket_errors', 'bad_scope_errors', 'auxillary_data_length_errors', 'invalid_source_address_errors', 'no_socket_connection', 'miscellaneous_errors', 'input_queries', 'input_reports', 'input_leaves', 'input_mtrace', 'input_dvmrp', 'input_pim', 'output_queries', 'output_reports', 'output_leaves', 'output_mtrace', 'output_dvmrp', 'output_pim', 'get_packet_failure', 'output_no_parent_interface_handle', 'input_no_idb', 'input_no_vrf_in_idb', 'input_disabled_idb', 'input_martian_address', 'input_no_assigned_vrf_id', 'input_no_vrf_mtrace', 'input_no_platform_support_mtrace'], name, value)

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Igmp.Standby.Vrfs.Vrf.TrafficCounters']['meta_info']


                class Groups(_Entity_):
                    """
                    IGMP Group Database Table
                    
                    .. attribute:: group
                    
                    	IGMP Group Entry Information
                    	**type**\: list of  		 :py:class:`Group <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.Groups.Group>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Igmp.Standby.Vrfs.Vrf.Groups, self).__init__()

                        self.yang_name = "groups"
                        self.yang_parent_name = "vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("group", ("group", Igmp.Standby.Vrfs.Vrf.Groups.Group))])
                        self._leafs = OrderedDict()

                        self.group = YList(self)
                        self._segment_path = lambda: "groups"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Igmp.Standby.Vrfs.Vrf.Groups, [], name, value)


                    class Group(_Entity_):
                        """
                        IGMP Group Entry Information
                        
                        .. attribute:: group_address
                        
                        	Group Address
                        	**type**\: union of the below types:
                        
                        		**type**\: str
                        
                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        		**type**\: str
                        
                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: interface_name
                        
                        	Interface Name
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: group_address_xr
                        
                        	Group Address
                        	**type**\:  :py:class:`GroupAddressXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.Groups.Group.GroupAddressXr>`
                        
                        	**config**\: False
                        
                        .. attribute:: last_reporter
                        
                        	Last reporter address
                        	**type**\:  :py:class:`LastReporter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.Groups.Group.LastReporter>`
                        
                        	**config**\: False
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\:  :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.Groups.Group.SourceAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: interface_name_xr
                        
                        	Interface
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: uptime
                        
                        	Uptime in seconds
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        	**config**\: False
                        
                        	**units**\: second
                        
                        .. attribute:: expiration_time
                        
                        	Expiration time in seconds
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        	**config**\: False
                        
                        	**units**\: second
                        
                        .. attribute:: explicit_tracking_enabled
                        
                        	Is explicit tracking enabled
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_self_join
                        
                        	If local system is member of this group on this interface
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: row_status
                        
                        	interface on or off for the group
                        	**type**\: str
                        
                        	**length:** 0..16
                        
                        	**config**\: False
                        
                        .. attribute:: is_low_memory
                        
                        	Node is running low on memory
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: router_filter_mode
                        
                        	Filter mode
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        	**config**\: False
                        
                        .. attribute:: older_host_version1_timer
                        
                        	IGMP Hostversion1timer
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: older_host_version2_timer
                        
                        	IGMP Hostversion2timer
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_added
                        
                        	Joined
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_suppressed
                        
                        	Suppressed
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Standby.Vrfs.Vrf.Groups.Group, self).__init__()

                            self.yang_name = "group"
                            self.yang_parent_name = "groups"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("group-address-xr", ("group_address_xr", Igmp.Standby.Vrfs.Vrf.Groups.Group.GroupAddressXr)), ("last-reporter", ("last_reporter", Igmp.Standby.Vrfs.Vrf.Groups.Group.LastReporter)), ("source-address", ("source_address", Igmp.Standby.Vrfs.Vrf.Groups.Group.SourceAddress))])
                            self._leafs = OrderedDict([
                                ('group_address', (YLeaf(YType.str, 'group-address'), ['str','str'])),
                                ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                ('interface_name_xr', (YLeaf(YType.str, 'interface-name-xr'), ['str'])),
                                ('uptime', (YLeaf(YType.uint64, 'uptime'), ['int'])),
                                ('expiration_time', (YLeaf(YType.int32, 'expiration-time'), ['int'])),
                                ('explicit_tracking_enabled', (YLeaf(YType.boolean, 'explicit-tracking-enabled'), ['bool'])),
                                ('is_self_join', (YLeaf(YType.boolean, 'is-self-join'), ['bool'])),
                                ('row_status', (YLeaf(YType.str, 'row-status'), ['str'])),
                                ('is_low_memory', (YLeaf(YType.boolean, 'is-low-memory'), ['bool'])),
                                ('router_filter_mode', (YLeaf(YType.uint8, 'router-filter-mode'), ['int'])),
                                ('older_host_version1_timer', (YLeaf(YType.uint32, 'older-host-version1-timer'), ['int'])),
                                ('older_host_version2_timer', (YLeaf(YType.uint32, 'older-host-version2-timer'), ['int'])),
                                ('is_added', (YLeaf(YType.boolean, 'is-added'), ['bool'])),
                                ('is_suppressed', (YLeaf(YType.boolean, 'is-suppressed'), ['bool'])),
                            ])
                            self.group_address = None
                            self.interface_name = None
                            self.interface_name_xr = None
                            self.uptime = None
                            self.expiration_time = None
                            self.explicit_tracking_enabled = None
                            self.is_self_join = None
                            self.row_status = None
                            self.is_low_memory = None
                            self.router_filter_mode = None
                            self.older_host_version1_timer = None
                            self.older_host_version2_timer = None
                            self.is_added = None
                            self.is_suppressed = None

                            self.group_address_xr = Igmp.Standby.Vrfs.Vrf.Groups.Group.GroupAddressXr()
                            self.group_address_xr.parent = self
                            self._children_name_map["group_address_xr"] = "group-address-xr"

                            self.last_reporter = Igmp.Standby.Vrfs.Vrf.Groups.Group.LastReporter()
                            self.last_reporter.parent = self
                            self._children_name_map["last_reporter"] = "last-reporter"

                            self.source_address = Igmp.Standby.Vrfs.Vrf.Groups.Group.SourceAddress()
                            self.source_address.parent = self
                            self._children_name_map["source_address"] = "source-address"
                            self._segment_path = lambda: "group"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Standby.Vrfs.Vrf.Groups.Group, ['group_address', 'interface_name', 'interface_name_xr', 'uptime', 'expiration_time', 'explicit_tracking_enabled', 'is_self_join', 'row_status', 'is_low_memory', 'router_filter_mode', 'older_host_version1_timer', 'older_host_version2_timer', 'is_added', 'is_suppressed'], name, value)


                        class GroupAddressXr(_Entity_):
                            """
                            Group Address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Standby.Vrfs.Vrf.Groups.Group.GroupAddressXr, self).__init__()

                                self.yang_name = "group-address-xr"
                                self.yang_parent_name = "group"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "group-address-xr"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Standby.Vrfs.Vrf.Groups.Group.GroupAddressXr, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Standby.Vrfs.Vrf.Groups.Group.GroupAddressXr']['meta_info']


                        class LastReporter(_Entity_):
                            """
                            Last reporter address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Standby.Vrfs.Vrf.Groups.Group.LastReporter, self).__init__()

                                self.yang_name = "last-reporter"
                                self.yang_parent_name = "group"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "last-reporter"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Standby.Vrfs.Vrf.Groups.Group.LastReporter, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Standby.Vrfs.Vrf.Groups.Group.LastReporter']['meta_info']


                        class SourceAddress(_Entity_):
                            """
                            Source Address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Standby.Vrfs.Vrf.Groups.Group.SourceAddress, self).__init__()

                                self.yang_name = "source-address"
                                self.yang_parent_name = "group"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "source-address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Standby.Vrfs.Vrf.Groups.Group.SourceAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Standby.Vrfs.Vrf.Groups.Group.SourceAddress']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Standby.Vrfs.Vrf.Groups.Group']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Igmp.Standby.Vrfs.Vrf.Groups']['meta_info']


                class GroupSummary(_Entity_):
                    """
                    IGMP Groups Summary
                    
                    .. attribute:: groutes
                    
                    	No. of (\*,G) routes
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: sg_routes
                    
                    	No. of (S,G) routes
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: group_count
                    
                    	Current groups accepted
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_low_memory
                    
                    	Node is running low on memory
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Igmp.Standby.Vrfs.Vrf.GroupSummary, self).__init__()

                        self.yang_name = "group-summary"
                        self.yang_parent_name = "vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('groutes', (YLeaf(YType.uint32, 'groutes'), ['int'])),
                            ('sg_routes', (YLeaf(YType.uint32, 'sg-routes'), ['int'])),
                            ('group_count', (YLeaf(YType.uint32, 'group-count'), ['int'])),
                            ('is_low_memory', (YLeaf(YType.boolean, 'is-low-memory'), ['bool'])),
                        ])
                        self.groutes = None
                        self.sg_routes = None
                        self.group_count = None
                        self.is_low_memory = None
                        self._segment_path = lambda: "group-summary"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Igmp.Standby.Vrfs.Vrf.GroupSummary, ['groutes', 'sg_routes', 'group_count', 'is_low_memory'], name, value)

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Igmp.Standby.Vrfs.Vrf.GroupSummary']['meta_info']


                class IfrsInterfaceSummary(_Entity_):
                    """
                    IGMP IFRS Interface summary
                    
                    .. attribute:: interface_count
                    
                    	Interface Count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: configuration_count
                    
                    	Configuration count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Igmp.Standby.Vrfs.Vrf.IfrsInterfaceSummary, self).__init__()

                        self.yang_name = "ifrs-interface-summary"
                        self.yang_parent_name = "vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('interface_count', (YLeaf(YType.uint32, 'interface-count'), ['int'])),
                            ('configuration_count', (YLeaf(YType.uint32, 'configuration-count'), ['int'])),
                        ])
                        self.interface_count = None
                        self.configuration_count = None
                        self._segment_path = lambda: "ifrs-interface-summary"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Igmp.Standby.Vrfs.Vrf.IfrsInterfaceSummary, ['interface_count', 'configuration_count'], name, value)

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Igmp.Standby.Vrfs.Vrf.IfrsInterfaceSummary']['meta_info']


                class GlobalInterfaceTable(_Entity_):
                    """
                    IGMP Global Interface 
                    
                    .. attribute:: interface
                    
                    	IGMP Interface
                    	**type**\: list of  		 :py:class:`Interface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.GlobalInterfaceTable.Interface>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Igmp.Standby.Vrfs.Vrf.GlobalInterfaceTable, self).__init__()

                        self.yang_name = "global-interface-table"
                        self.yang_parent_name = "vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("interface", ("interface", Igmp.Standby.Vrfs.Vrf.GlobalInterfaceTable.Interface))])
                        self._leafs = OrderedDict()

                        self.interface = YList(self)
                        self._segment_path = lambda: "global-interface-table"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Igmp.Standby.Vrfs.Vrf.GlobalInterfaceTable, [], name, value)


                    class Interface(_Entity_):
                        """
                        IGMP Interface
                        
                        .. attribute:: interface_name  (key)
                        
                        	Interface Name
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: address
                        
                        	IP address
                        	**type**\:  :py:class:`Address <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.GlobalInterfaceTable.Interface.Address>`
                        
                        	**config**\: False
                        
                        .. attribute:: querier_address
                        
                        	Address of the Querier
                        	**type**\:  :py:class:`QuerierAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.GlobalInterfaceTable.Interface.QuerierAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: subscriber_address
                        
                        	Address of subscriber
                        	**type**\:  :py:class:`SubscriberAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.GlobalInterfaceTable.Interface.SubscriberAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: interface_name_xr
                        
                        	Interface
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: state
                        
                        	Interface state
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: prefix_length
                        
                        	Prefix length
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_interface_up
                        
                        	Is interface up
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_ip_enabled
                        
                        	Is IP enabled
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_router_enabled
                        
                        	Is Router functionality enabled
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: igmp_version
                        
                        	IGMP Router version
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        	**config**\: False
                        
                        .. attribute:: host_version
                        
                        	IGMP Host version
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        	**config**\: False
                        
                        .. attribute:: query_interval
                        
                        	Query Interval value in seconds
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        	**units**\: second
                        
                        .. attribute:: query_timeout
                        
                        	Query Timeout value
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: query_maximum_response_time
                        
                        	Max Response Timeout value
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: last_member_query_interval
                        
                        	Last Member Query Interval
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: group_joins
                        
                        	No. of group joins
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: group_leaves
                        
                        	No. of group leaves
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_querier
                        
                        	Are we querier
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: total_active_groups
                        
                        	Actual number of groups on interface
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: robustness
                        
                        	Robustness Variable value
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: proxy_interface
                        
                        	Proxy interface index
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: querier_uptime
                        
                        	Time since the last querier took over
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: las_ll_registration_count
                        
                        	LAS reg count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_get_address_count
                        
                        	LAS get addr count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_update_count
                        
                        	LAS Update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_ll_remove_update_count
                        
                        	LAS LL remove update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_ll_add_update_count
                        
                        	LAS LL add update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_null_update_count
                        
                        	LAS Null update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_unregistration_count
                        
                        	LAS unreg count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_las_request
                        
                        	LAS req
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_las_registered
                        
                        	LAS registered
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: vrf_id
                        
                        	VRF id
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: mte_vrf_id
                        
                        	MTE VRF id
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: location
                        
                        	Location
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: mtu
                        
                        	MTU
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: vrf_state
                        
                        	Vrf State
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_configurationverify
                        
                        	CFG verify
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configurationvrf_set
                        
                        	CFG vrf set
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configurationvrf_error
                        
                        	CFG vrf error
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configuration_mcast_vrf_set
                        
                        	Is mcast set
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configuration_mcast_vrf_error
                        
                        	Is mcast error
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_im_state_registered
                        
                        	Im state registered
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_subscriber
                        
                        	Subscriber interface
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: subscriber_mode
                        
                        	Subscriber mode
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_identity_present
                        
                        	Subscriber ID or Address available from AAA
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: subscriber_id
                        
                        	ID string of subscriber
                        	**type**\: str
                        
                        	**length:** 0..257
                        
                        	**config**\: False
                        
                        .. attribute:: parent_ifhandle
                        
                        	Parent If Handle
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: time_since_last_query_in_seconds
                        
                        	Time elapsed since last query
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: time_since_last_report_in_seconds
                        
                        	Time elapsed since last report
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: router_uptime_in_seconds
                        
                        	Uptime since router enabled event
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: mte_tuple_count
                        
                        	MTE Tuple count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Standby.Vrfs.Vrf.GlobalInterfaceTable.Interface, self).__init__()

                            self.yang_name = "interface"
                            self.yang_parent_name = "global-interface-table"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['interface_name']
                            self._child_classes = OrderedDict([("address", ("address", Igmp.Standby.Vrfs.Vrf.GlobalInterfaceTable.Interface.Address)), ("querier-address", ("querier_address", Igmp.Standby.Vrfs.Vrf.GlobalInterfaceTable.Interface.QuerierAddress)), ("subscriber-address", ("subscriber_address", Igmp.Standby.Vrfs.Vrf.GlobalInterfaceTable.Interface.SubscriberAddress))])
                            self._leafs = OrderedDict([
                                ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                ('interface_name_xr', (YLeaf(YType.str, 'interface-name-xr'), ['str'])),
                                ('state', (YLeaf(YType.uint32, 'state'), ['int'])),
                                ('prefix_length', (YLeaf(YType.uint32, 'prefix-length'), ['int'])),
                                ('is_interface_up', (YLeaf(YType.boolean, 'is-interface-up'), ['bool'])),
                                ('is_ip_enabled', (YLeaf(YType.boolean, 'is-ip-enabled'), ['bool'])),
                                ('is_router_enabled', (YLeaf(YType.boolean, 'is-router-enabled'), ['bool'])),
                                ('igmp_version', (YLeaf(YType.uint8, 'igmp-version'), ['int'])),
                                ('host_version', (YLeaf(YType.uint8, 'host-version'), ['int'])),
                                ('query_interval', (YLeaf(YType.uint16, 'query-interval'), ['int'])),
                                ('query_timeout', (YLeaf(YType.uint16, 'query-timeout'), ['int'])),
                                ('query_maximum_response_time', (YLeaf(YType.uint16, 'query-maximum-response-time'), ['int'])),
                                ('last_member_query_interval', (YLeaf(YType.uint16, 'last-member-query-interval'), ['int'])),
                                ('group_joins', (YLeaf(YType.uint32, 'group-joins'), ['int'])),
                                ('group_leaves', (YLeaf(YType.uint32, 'group-leaves'), ['int'])),
                                ('is_querier', (YLeaf(YType.boolean, 'is-querier'), ['bool'])),
                                ('total_active_groups', (YLeaf(YType.uint32, 'total-active-groups'), ['int'])),
                                ('robustness', (YLeaf(YType.uint32, 'robustness'), ['int'])),
                                ('proxy_interface', (YLeaf(YType.str, 'proxy-interface'), ['str'])),
                                ('querier_uptime', (YLeaf(YType.uint16, 'querier-uptime'), ['int'])),
                                ('las_ll_registration_count', (YLeaf(YType.uint32, 'las-ll-registration-count'), ['int'])),
                                ('las_get_address_count', (YLeaf(YType.uint32, 'las-get-address-count'), ['int'])),
                                ('las_update_count', (YLeaf(YType.uint32, 'las-update-count'), ['int'])),
                                ('las_ll_remove_update_count', (YLeaf(YType.uint32, 'las-ll-remove-update-count'), ['int'])),
                                ('las_ll_add_update_count', (YLeaf(YType.uint32, 'las-ll-add-update-count'), ['int'])),
                                ('las_null_update_count', (YLeaf(YType.uint32, 'las-null-update-count'), ['int'])),
                                ('las_unregistration_count', (YLeaf(YType.uint32, 'las-unregistration-count'), ['int'])),
                                ('is_las_request', (YLeaf(YType.boolean, 'is-las-request'), ['bool'])),
                                ('is_las_registered', (YLeaf(YType.boolean, 'is-las-registered'), ['bool'])),
                                ('vrf_id', (YLeaf(YType.uint32, 'vrf-id'), ['int'])),
                                ('mte_vrf_id', (YLeaf(YType.uint32, 'mte-vrf-id'), ['int'])),
                                ('location', (YLeaf(YType.uint32, 'location'), ['int'])),
                                ('mtu', (YLeaf(YType.uint32, 'mtu'), ['int'])),
                                ('vrf_state', (YLeaf(YType.uint32, 'vrf-state'), ['int'])),
                                ('is_configurationverify', (YLeaf(YType.boolean, 'is-configurationverify'), ['bool'])),
                                ('configurationvrf_set', (YLeaf(YType.boolean, 'configurationvrf-set'), ['bool'])),
                                ('configurationvrf_error', (YLeaf(YType.boolean, 'configurationvrf-error'), ['bool'])),
                                ('configuration_mcast_vrf_set', (YLeaf(YType.boolean, 'configuration-mcast-vrf-set'), ['bool'])),
                                ('configuration_mcast_vrf_error', (YLeaf(YType.boolean, 'configuration-mcast-vrf-error'), ['bool'])),
                                ('is_im_state_registered', (YLeaf(YType.boolean, 'is-im-state-registered'), ['bool'])),
                                ('is_subscriber', (YLeaf(YType.boolean, 'is-subscriber'), ['bool'])),
                                ('subscriber_mode', (YLeaf(YType.uint32, 'subscriber-mode'), ['int'])),
                                ('is_identity_present', (YLeaf(YType.boolean, 'is-identity-present'), ['bool'])),
                                ('subscriber_id', (YLeaf(YType.str, 'subscriber-id'), ['str'])),
                                ('parent_ifhandle', (YLeaf(YType.str, 'parent-ifhandle'), ['str'])),
                                ('time_since_last_query_in_seconds', (YLeaf(YType.uint32, 'time-since-last-query-in-seconds'), ['int'])),
                                ('time_since_last_report_in_seconds', (YLeaf(YType.uint32, 'time-since-last-report-in-seconds'), ['int'])),
                                ('router_uptime_in_seconds', (YLeaf(YType.uint32, 'router-uptime-in-seconds'), ['int'])),
                                ('mte_tuple_count', (YLeaf(YType.uint32, 'mte-tuple-count'), ['int'])),
                            ])
                            self.interface_name = None
                            self.interface_name_xr = None
                            self.state = None
                            self.prefix_length = None
                            self.is_interface_up = None
                            self.is_ip_enabled = None
                            self.is_router_enabled = None
                            self.igmp_version = None
                            self.host_version = None
                            self.query_interval = None
                            self.query_timeout = None
                            self.query_maximum_response_time = None
                            self.last_member_query_interval = None
                            self.group_joins = None
                            self.group_leaves = None
                            self.is_querier = None
                            self.total_active_groups = None
                            self.robustness = None
                            self.proxy_interface = None
                            self.querier_uptime = None
                            self.las_ll_registration_count = None
                            self.las_get_address_count = None
                            self.las_update_count = None
                            self.las_ll_remove_update_count = None
                            self.las_ll_add_update_count = None
                            self.las_null_update_count = None
                            self.las_unregistration_count = None
                            self.is_las_request = None
                            self.is_las_registered = None
                            self.vrf_id = None
                            self.mte_vrf_id = None
                            self.location = None
                            self.mtu = None
                            self.vrf_state = None
                            self.is_configurationverify = None
                            self.configurationvrf_set = None
                            self.configurationvrf_error = None
                            self.configuration_mcast_vrf_set = None
                            self.configuration_mcast_vrf_error = None
                            self.is_im_state_registered = None
                            self.is_subscriber = None
                            self.subscriber_mode = None
                            self.is_identity_present = None
                            self.subscriber_id = None
                            self.parent_ifhandle = None
                            self.time_since_last_query_in_seconds = None
                            self.time_since_last_report_in_seconds = None
                            self.router_uptime_in_seconds = None
                            self.mte_tuple_count = None

                            self.address = Igmp.Standby.Vrfs.Vrf.GlobalInterfaceTable.Interface.Address()
                            self.address.parent = self
                            self._children_name_map["address"] = "address"

                            self.querier_address = Igmp.Standby.Vrfs.Vrf.GlobalInterfaceTable.Interface.QuerierAddress()
                            self.querier_address.parent = self
                            self._children_name_map["querier_address"] = "querier-address"

                            self.subscriber_address = Igmp.Standby.Vrfs.Vrf.GlobalInterfaceTable.Interface.SubscriberAddress()
                            self.subscriber_address.parent = self
                            self._children_name_map["subscriber_address"] = "subscriber-address"
                            self._segment_path = lambda: "interface" + "[interface-name='" + str(self.interface_name) + "']"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Standby.Vrfs.Vrf.GlobalInterfaceTable.Interface, ['interface_name', 'interface_name_xr', 'state', 'prefix_length', 'is_interface_up', 'is_ip_enabled', 'is_router_enabled', 'igmp_version', 'host_version', 'query_interval', 'query_timeout', 'query_maximum_response_time', 'last_member_query_interval', 'group_joins', 'group_leaves', 'is_querier', 'total_active_groups', 'robustness', 'proxy_interface', 'querier_uptime', 'las_ll_registration_count', 'las_get_address_count', 'las_update_count', 'las_ll_remove_update_count', 'las_ll_add_update_count', 'las_null_update_count', 'las_unregistration_count', 'is_las_request', 'is_las_registered', 'vrf_id', 'mte_vrf_id', 'location', 'mtu', 'vrf_state', 'is_configurationverify', 'configurationvrf_set', 'configurationvrf_error', 'configuration_mcast_vrf_set', 'configuration_mcast_vrf_error', 'is_im_state_registered', 'is_subscriber', 'subscriber_mode', 'is_identity_present', 'subscriber_id', 'parent_ifhandle', 'time_since_last_query_in_seconds', 'time_since_last_report_in_seconds', 'router_uptime_in_seconds', 'mte_tuple_count'], name, value)


                        class Address(_Entity_):
                            """
                            IP address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Standby.Vrfs.Vrf.GlobalInterfaceTable.Interface.Address, self).__init__()

                                self.yang_name = "address"
                                self.yang_parent_name = "interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Standby.Vrfs.Vrf.GlobalInterfaceTable.Interface.Address, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Standby.Vrfs.Vrf.GlobalInterfaceTable.Interface.Address']['meta_info']


                        class QuerierAddress(_Entity_):
                            """
                            Address of the Querier
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Standby.Vrfs.Vrf.GlobalInterfaceTable.Interface.QuerierAddress, self).__init__()

                                self.yang_name = "querier-address"
                                self.yang_parent_name = "interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "querier-address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Standby.Vrfs.Vrf.GlobalInterfaceTable.Interface.QuerierAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Standby.Vrfs.Vrf.GlobalInterfaceTable.Interface.QuerierAddress']['meta_info']


                        class SubscriberAddress(_Entity_):
                            """
                            Address of subscriber
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Standby.Vrfs.Vrf.GlobalInterfaceTable.Interface.SubscriberAddress, self).__init__()

                                self.yang_name = "subscriber-address"
                                self.yang_parent_name = "interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "subscriber-address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Standby.Vrfs.Vrf.GlobalInterfaceTable.Interface.SubscriberAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Standby.Vrfs.Vrf.GlobalInterfaceTable.Interface.SubscriberAddress']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Standby.Vrfs.Vrf.GlobalInterfaceTable.Interface']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Igmp.Standby.Vrfs.Vrf.GlobalInterfaceTable']['meta_info']


                class SsmMapDetails(_Entity_):
                    """
                    SSM Map Detail
                    
                    .. attribute:: ssm_map_detail
                    
                    	SSM Map Detail Table information
                    	**type**\: list of  		 :py:class:`SsmMapDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.SsmMapDetails.SsmMapDetail>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Igmp.Standby.Vrfs.Vrf.SsmMapDetails, self).__init__()

                        self.yang_name = "ssm-map-details"
                        self.yang_parent_name = "vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("ssm-map-detail", ("ssm_map_detail", Igmp.Standby.Vrfs.Vrf.SsmMapDetails.SsmMapDetail))])
                        self._leafs = OrderedDict()

                        self.ssm_map_detail = YList(self)
                        self._segment_path = lambda: "ssm-map-details"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Igmp.Standby.Vrfs.Vrf.SsmMapDetails, [], name, value)


                    class SsmMapDetail(_Entity_):
                        """
                        SSM Map Detail Table information
                        
                        .. attribute:: ssm_map_type
                        
                        	SSM Map Type
                        	**type**\:  :py:class:`IgmpssmMap <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpssmMap>`
                        
                        	**config**\: False
                        
                        .. attribute:: group_address
                        
                        	Group address
                        	**type**\: union of the below types:
                        
                        		**type**\: str
                        
                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        		**type**\: str
                        
                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: map_info
                        
                        	Basic Map Info
                        	**type**\:  :py:class:`MapInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.SsmMapDetails.SsmMapDetail.MapInfo>`
                        
                        	**config**\: False
                        
                        .. attribute:: expiration_time
                        
                        	Expiration Time in Seconds
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        	**units**\: second
                        
                        .. attribute:: response_pending
                        
                        	Response Pending
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: query_interval
                        
                        	Query interval
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: elapsed_time
                        
                        	Elapsed time
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        	**config**\: False
                        
                        .. attribute:: sources
                        
                        	List of sources
                        	**type**\: list of  		 :py:class:`Sources <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.SsmMapDetails.SsmMapDetail.Sources>`
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Standby.Vrfs.Vrf.SsmMapDetails.SsmMapDetail, self).__init__()

                            self.yang_name = "ssm-map-detail"
                            self.yang_parent_name = "ssm-map-details"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("map-info", ("map_info", Igmp.Standby.Vrfs.Vrf.SsmMapDetails.SsmMapDetail.MapInfo)), ("sources", ("sources", Igmp.Standby.Vrfs.Vrf.SsmMapDetails.SsmMapDetail.Sources))])
                            self._leafs = OrderedDict([
                                ('ssm_map_type', (YLeaf(YType.enumeration, 'ssm-map-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpssmMap', '')])),
                                ('group_address', (YLeaf(YType.str, 'group-address'), ['str','str'])),
                                ('expiration_time', (YLeaf(YType.uint32, 'expiration-time'), ['int'])),
                                ('response_pending', (YLeaf(YType.boolean, 'response-pending'), ['bool'])),
                                ('query_interval', (YLeaf(YType.uint32, 'query-interval'), ['int'])),
                                ('elapsed_time', (YLeaf(YType.uint64, 'elapsed-time'), ['int'])),
                            ])
                            self.ssm_map_type = None
                            self.group_address = None
                            self.expiration_time = None
                            self.response_pending = None
                            self.query_interval = None
                            self.elapsed_time = None

                            self.map_info = Igmp.Standby.Vrfs.Vrf.SsmMapDetails.SsmMapDetail.MapInfo()
                            self.map_info.parent = self
                            self._children_name_map["map_info"] = "map-info"

                            self.sources = YList(self)
                            self._segment_path = lambda: "ssm-map-detail"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Standby.Vrfs.Vrf.SsmMapDetails.SsmMapDetail, ['ssm_map_type', 'group_address', 'expiration_time', 'response_pending', 'query_interval', 'elapsed_time'], name, value)


                        class MapInfo(_Entity_):
                            """
                            Basic Map Info
                            
                            .. attribute:: group_address_xr
                            
                            	Group Address
                            	**type**\:  :py:class:`GroupAddressXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.SsmMapDetails.SsmMapDetail.MapInfo.GroupAddressXr>`
                            
                            	**config**\: False
                            
                            .. attribute:: map_type
                            
                            	Map Type of group
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: source_counts
                            
                            	Count of Sources
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Standby.Vrfs.Vrf.SsmMapDetails.SsmMapDetail.MapInfo, self).__init__()

                                self.yang_name = "map-info"
                                self.yang_parent_name = "ssm-map-detail"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("group-address-xr", ("group_address_xr", Igmp.Standby.Vrfs.Vrf.SsmMapDetails.SsmMapDetail.MapInfo.GroupAddressXr))])
                                self._leafs = OrderedDict([
                                    ('map_type', (YLeaf(YType.uint32, 'map-type'), ['int'])),
                                    ('source_counts', (YLeaf(YType.uint32, 'source-counts'), ['int'])),
                                ])
                                self.map_type = None
                                self.source_counts = None

                                self.group_address_xr = Igmp.Standby.Vrfs.Vrf.SsmMapDetails.SsmMapDetail.MapInfo.GroupAddressXr()
                                self.group_address_xr.parent = self
                                self._children_name_map["group_address_xr"] = "group-address-xr"
                                self._segment_path = lambda: "map-info"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Standby.Vrfs.Vrf.SsmMapDetails.SsmMapDetail.MapInfo, ['map_type', 'source_counts'], name, value)


                            class GroupAddressXr(_Entity_):
                                """
                                Group Address
                                
                                .. attribute:: af_name
                                
                                	AFName
                                	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                                
                                	**config**\: False
                                
                                .. attribute:: ipv4_address
                                
                                	IPv4 Addr
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                .. attribute:: ipv6_address
                                
                                	IPV6 Addr
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                

                                """

                                _prefix = 'ipv4-igmp-oper'
                                _revision = '2018-01-31'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Igmp.Standby.Vrfs.Vrf.SsmMapDetails.SsmMapDetail.MapInfo.GroupAddressXr, self).__init__()

                                    self.yang_name = "group-address-xr"
                                    self.yang_parent_name = "map-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                        ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                        ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                    ])
                                    self.af_name = None
                                    self.ipv4_address = None
                                    self.ipv6_address = None
                                    self._segment_path = lambda: "group-address-xr"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Igmp.Standby.Vrfs.Vrf.SsmMapDetails.SsmMapDetail.MapInfo.GroupAddressXr, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                    return meta._meta_table['Igmp.Standby.Vrfs.Vrf.SsmMapDetails.SsmMapDetail.MapInfo.GroupAddressXr']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Standby.Vrfs.Vrf.SsmMapDetails.SsmMapDetail.MapInfo']['meta_info']


                        class Sources(_Entity_):
                            """
                            List of sources
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Standby.Vrfs.Vrf.SsmMapDetails.SsmMapDetail.Sources, self).__init__()

                                self.yang_name = "sources"
                                self.yang_parent_name = "ssm-map-detail"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "sources"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Standby.Vrfs.Vrf.SsmMapDetails.SsmMapDetail.Sources, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Standby.Vrfs.Vrf.SsmMapDetails.SsmMapDetail.Sources']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Standby.Vrfs.Vrf.SsmMapDetails.SsmMapDetail']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Igmp.Standby.Vrfs.Vrf.SsmMapDetails']['meta_info']


                class InterfaceStateOffs(_Entity_):
                    """
                    IGMP Interface state off
                    
                    .. attribute:: interface_state_off
                    
                    	IGMP Interface
                    	**type**\: list of  		 :py:class:`InterfaceStateOff <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Igmp.Standby.Vrfs.Vrf.InterfaceStateOffs, self).__init__()

                        self.yang_name = "interface-state-offs"
                        self.yang_parent_name = "vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("interface-state-off", ("interface_state_off", Igmp.Standby.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff))])
                        self._leafs = OrderedDict()

                        self.interface_state_off = YList(self)
                        self._segment_path = lambda: "interface-state-offs"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Igmp.Standby.Vrfs.Vrf.InterfaceStateOffs, [], name, value)


                    class InterfaceStateOff(_Entity_):
                        """
                        IGMP Interface
                        
                        .. attribute:: interface_name  (key)
                        
                        	Interface Name
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: address
                        
                        	IP address
                        	**type**\:  :py:class:`Address <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.Address>`
                        
                        	**config**\: False
                        
                        .. attribute:: querier_address
                        
                        	Address of the Querier
                        	**type**\:  :py:class:`QuerierAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.QuerierAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: subscriber_address
                        
                        	Address of subscriber
                        	**type**\:  :py:class:`SubscriberAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.SubscriberAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: interface_name_xr
                        
                        	Interface
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: state
                        
                        	Interface state
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: prefix_length
                        
                        	Prefix length
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_interface_up
                        
                        	Is interface up
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_ip_enabled
                        
                        	Is IP enabled
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_router_enabled
                        
                        	Is Router functionality enabled
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: igmp_version
                        
                        	IGMP Router version
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        	**config**\: False
                        
                        .. attribute:: host_version
                        
                        	IGMP Host version
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        	**config**\: False
                        
                        .. attribute:: query_interval
                        
                        	Query Interval value in seconds
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        	**units**\: second
                        
                        .. attribute:: query_timeout
                        
                        	Query Timeout value
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: query_maximum_response_time
                        
                        	Max Response Timeout value
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: last_member_query_interval
                        
                        	Last Member Query Interval
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: group_joins
                        
                        	No. of group joins
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: group_leaves
                        
                        	No. of group leaves
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_querier
                        
                        	Are we querier
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: total_active_groups
                        
                        	Actual number of groups on interface
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: robustness
                        
                        	Robustness Variable value
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: proxy_interface
                        
                        	Proxy interface index
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: querier_uptime
                        
                        	Time since the last querier took over
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: las_ll_registration_count
                        
                        	LAS reg count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_get_address_count
                        
                        	LAS get addr count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_update_count
                        
                        	LAS Update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_ll_remove_update_count
                        
                        	LAS LL remove update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_ll_add_update_count
                        
                        	LAS LL add update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_null_update_count
                        
                        	LAS Null update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_unregistration_count
                        
                        	LAS unreg count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_las_request
                        
                        	LAS req
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_las_registered
                        
                        	LAS registered
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: vrf_id
                        
                        	VRF id
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: mte_vrf_id
                        
                        	MTE VRF id
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: location
                        
                        	Location
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: mtu
                        
                        	MTU
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: vrf_state
                        
                        	Vrf State
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_configurationverify
                        
                        	CFG verify
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configurationvrf_set
                        
                        	CFG vrf set
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configurationvrf_error
                        
                        	CFG vrf error
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configuration_mcast_vrf_set
                        
                        	Is mcast set
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configuration_mcast_vrf_error
                        
                        	Is mcast error
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_im_state_registered
                        
                        	Im state registered
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_subscriber
                        
                        	Subscriber interface
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: subscriber_mode
                        
                        	Subscriber mode
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_identity_present
                        
                        	Subscriber ID or Address available from AAA
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: subscriber_id
                        
                        	ID string of subscriber
                        	**type**\: str
                        
                        	**length:** 0..257
                        
                        	**config**\: False
                        
                        .. attribute:: parent_ifhandle
                        
                        	Parent If Handle
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: time_since_last_query_in_seconds
                        
                        	Time elapsed since last query
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: time_since_last_report_in_seconds
                        
                        	Time elapsed since last report
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: router_uptime_in_seconds
                        
                        	Uptime since router enabled event
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: mte_tuple_count
                        
                        	MTE Tuple count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Standby.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff, self).__init__()

                            self.yang_name = "interface-state-off"
                            self.yang_parent_name = "interface-state-offs"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['interface_name']
                            self._child_classes = OrderedDict([("address", ("address", Igmp.Standby.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.Address)), ("querier-address", ("querier_address", Igmp.Standby.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.QuerierAddress)), ("subscriber-address", ("subscriber_address", Igmp.Standby.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.SubscriberAddress))])
                            self._leafs = OrderedDict([
                                ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                ('interface_name_xr', (YLeaf(YType.str, 'interface-name-xr'), ['str'])),
                                ('state', (YLeaf(YType.uint32, 'state'), ['int'])),
                                ('prefix_length', (YLeaf(YType.uint32, 'prefix-length'), ['int'])),
                                ('is_interface_up', (YLeaf(YType.boolean, 'is-interface-up'), ['bool'])),
                                ('is_ip_enabled', (YLeaf(YType.boolean, 'is-ip-enabled'), ['bool'])),
                                ('is_router_enabled', (YLeaf(YType.boolean, 'is-router-enabled'), ['bool'])),
                                ('igmp_version', (YLeaf(YType.uint8, 'igmp-version'), ['int'])),
                                ('host_version', (YLeaf(YType.uint8, 'host-version'), ['int'])),
                                ('query_interval', (YLeaf(YType.uint16, 'query-interval'), ['int'])),
                                ('query_timeout', (YLeaf(YType.uint16, 'query-timeout'), ['int'])),
                                ('query_maximum_response_time', (YLeaf(YType.uint16, 'query-maximum-response-time'), ['int'])),
                                ('last_member_query_interval', (YLeaf(YType.uint16, 'last-member-query-interval'), ['int'])),
                                ('group_joins', (YLeaf(YType.uint32, 'group-joins'), ['int'])),
                                ('group_leaves', (YLeaf(YType.uint32, 'group-leaves'), ['int'])),
                                ('is_querier', (YLeaf(YType.boolean, 'is-querier'), ['bool'])),
                                ('total_active_groups', (YLeaf(YType.uint32, 'total-active-groups'), ['int'])),
                                ('robustness', (YLeaf(YType.uint32, 'robustness'), ['int'])),
                                ('proxy_interface', (YLeaf(YType.str, 'proxy-interface'), ['str'])),
                                ('querier_uptime', (YLeaf(YType.uint16, 'querier-uptime'), ['int'])),
                                ('las_ll_registration_count', (YLeaf(YType.uint32, 'las-ll-registration-count'), ['int'])),
                                ('las_get_address_count', (YLeaf(YType.uint32, 'las-get-address-count'), ['int'])),
                                ('las_update_count', (YLeaf(YType.uint32, 'las-update-count'), ['int'])),
                                ('las_ll_remove_update_count', (YLeaf(YType.uint32, 'las-ll-remove-update-count'), ['int'])),
                                ('las_ll_add_update_count', (YLeaf(YType.uint32, 'las-ll-add-update-count'), ['int'])),
                                ('las_null_update_count', (YLeaf(YType.uint32, 'las-null-update-count'), ['int'])),
                                ('las_unregistration_count', (YLeaf(YType.uint32, 'las-unregistration-count'), ['int'])),
                                ('is_las_request', (YLeaf(YType.boolean, 'is-las-request'), ['bool'])),
                                ('is_las_registered', (YLeaf(YType.boolean, 'is-las-registered'), ['bool'])),
                                ('vrf_id', (YLeaf(YType.uint32, 'vrf-id'), ['int'])),
                                ('mte_vrf_id', (YLeaf(YType.uint32, 'mte-vrf-id'), ['int'])),
                                ('location', (YLeaf(YType.uint32, 'location'), ['int'])),
                                ('mtu', (YLeaf(YType.uint32, 'mtu'), ['int'])),
                                ('vrf_state', (YLeaf(YType.uint32, 'vrf-state'), ['int'])),
                                ('is_configurationverify', (YLeaf(YType.boolean, 'is-configurationverify'), ['bool'])),
                                ('configurationvrf_set', (YLeaf(YType.boolean, 'configurationvrf-set'), ['bool'])),
                                ('configurationvrf_error', (YLeaf(YType.boolean, 'configurationvrf-error'), ['bool'])),
                                ('configuration_mcast_vrf_set', (YLeaf(YType.boolean, 'configuration-mcast-vrf-set'), ['bool'])),
                                ('configuration_mcast_vrf_error', (YLeaf(YType.boolean, 'configuration-mcast-vrf-error'), ['bool'])),
                                ('is_im_state_registered', (YLeaf(YType.boolean, 'is-im-state-registered'), ['bool'])),
                                ('is_subscriber', (YLeaf(YType.boolean, 'is-subscriber'), ['bool'])),
                                ('subscriber_mode', (YLeaf(YType.uint32, 'subscriber-mode'), ['int'])),
                                ('is_identity_present', (YLeaf(YType.boolean, 'is-identity-present'), ['bool'])),
                                ('subscriber_id', (YLeaf(YType.str, 'subscriber-id'), ['str'])),
                                ('parent_ifhandle', (YLeaf(YType.str, 'parent-ifhandle'), ['str'])),
                                ('time_since_last_query_in_seconds', (YLeaf(YType.uint32, 'time-since-last-query-in-seconds'), ['int'])),
                                ('time_since_last_report_in_seconds', (YLeaf(YType.uint32, 'time-since-last-report-in-seconds'), ['int'])),
                                ('router_uptime_in_seconds', (YLeaf(YType.uint32, 'router-uptime-in-seconds'), ['int'])),
                                ('mte_tuple_count', (YLeaf(YType.uint32, 'mte-tuple-count'), ['int'])),
                            ])
                            self.interface_name = None
                            self.interface_name_xr = None
                            self.state = None
                            self.prefix_length = None
                            self.is_interface_up = None
                            self.is_ip_enabled = None
                            self.is_router_enabled = None
                            self.igmp_version = None
                            self.host_version = None
                            self.query_interval = None
                            self.query_timeout = None
                            self.query_maximum_response_time = None
                            self.last_member_query_interval = None
                            self.group_joins = None
                            self.group_leaves = None
                            self.is_querier = None
                            self.total_active_groups = None
                            self.robustness = None
                            self.proxy_interface = None
                            self.querier_uptime = None
                            self.las_ll_registration_count = None
                            self.las_get_address_count = None
                            self.las_update_count = None
                            self.las_ll_remove_update_count = None
                            self.las_ll_add_update_count = None
                            self.las_null_update_count = None
                            self.las_unregistration_count = None
                            self.is_las_request = None
                            self.is_las_registered = None
                            self.vrf_id = None
                            self.mte_vrf_id = None
                            self.location = None
                            self.mtu = None
                            self.vrf_state = None
                            self.is_configurationverify = None
                            self.configurationvrf_set = None
                            self.configurationvrf_error = None
                            self.configuration_mcast_vrf_set = None
                            self.configuration_mcast_vrf_error = None
                            self.is_im_state_registered = None
                            self.is_subscriber = None
                            self.subscriber_mode = None
                            self.is_identity_present = None
                            self.subscriber_id = None
                            self.parent_ifhandle = None
                            self.time_since_last_query_in_seconds = None
                            self.time_since_last_report_in_seconds = None
                            self.router_uptime_in_seconds = None
                            self.mte_tuple_count = None

                            self.address = Igmp.Standby.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.Address()
                            self.address.parent = self
                            self._children_name_map["address"] = "address"

                            self.querier_address = Igmp.Standby.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.QuerierAddress()
                            self.querier_address.parent = self
                            self._children_name_map["querier_address"] = "querier-address"

                            self.subscriber_address = Igmp.Standby.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.SubscriberAddress()
                            self.subscriber_address.parent = self
                            self._children_name_map["subscriber_address"] = "subscriber-address"
                            self._segment_path = lambda: "interface-state-off" + "[interface-name='" + str(self.interface_name) + "']"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Standby.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff, ['interface_name', 'interface_name_xr', 'state', 'prefix_length', 'is_interface_up', 'is_ip_enabled', 'is_router_enabled', 'igmp_version', 'host_version', 'query_interval', 'query_timeout', 'query_maximum_response_time', 'last_member_query_interval', 'group_joins', 'group_leaves', 'is_querier', 'total_active_groups', 'robustness', 'proxy_interface', 'querier_uptime', 'las_ll_registration_count', 'las_get_address_count', 'las_update_count', 'las_ll_remove_update_count', 'las_ll_add_update_count', 'las_null_update_count', 'las_unregistration_count', 'is_las_request', 'is_las_registered', 'vrf_id', 'mte_vrf_id', 'location', 'mtu', 'vrf_state', 'is_configurationverify', 'configurationvrf_set', 'configurationvrf_error', 'configuration_mcast_vrf_set', 'configuration_mcast_vrf_error', 'is_im_state_registered', 'is_subscriber', 'subscriber_mode', 'is_identity_present', 'subscriber_id', 'parent_ifhandle', 'time_since_last_query_in_seconds', 'time_since_last_report_in_seconds', 'router_uptime_in_seconds', 'mte_tuple_count'], name, value)


                        class Address(_Entity_):
                            """
                            IP address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Standby.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.Address, self).__init__()

                                self.yang_name = "address"
                                self.yang_parent_name = "interface-state-off"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Standby.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.Address, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Standby.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.Address']['meta_info']


                        class QuerierAddress(_Entity_):
                            """
                            Address of the Querier
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Standby.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.QuerierAddress, self).__init__()

                                self.yang_name = "querier-address"
                                self.yang_parent_name = "interface-state-off"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "querier-address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Standby.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.QuerierAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Standby.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.QuerierAddress']['meta_info']


                        class SubscriberAddress(_Entity_):
                            """
                            Address of subscriber
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Standby.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.SubscriberAddress, self).__init__()

                                self.yang_name = "subscriber-address"
                                self.yang_parent_name = "interface-state-off"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "subscriber-address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Standby.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.SubscriberAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Standby.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.SubscriberAddress']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Standby.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Igmp.Standby.Vrfs.Vrf.InterfaceStateOffs']['meta_info']

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Igmp.Standby.Vrfs.Vrf']['meta_info']

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                return meta._meta_table['Igmp.Standby.Vrfs']['meta_info']


        class Process(_Entity_):
            """
            Process
            
            .. attribute:: amt_summary
            
            	MRIB RouteDB Expiry Information
            	**type**\:  :py:class:`AmtSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Process.AmtSummary>`
            
            	**config**\: False
            
            .. attribute:: nsr
            
            	NSR Information
            	**type**\:  :py:class:`Nsr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Process.Nsr>`
            
            	**config**\: False
            
            .. attribute:: amt_gateways
            
            	Table containing AMT Gateway DataBase information
            	**type**\:  :py:class:`AmtGateways <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Process.AmtGateways>`
            
            	**config**\: False
            
            .. attribute:: unicast_qos_adjust_stats
            
            	IGMP Unicast\-Qos\-Adjust Statistics
            	**type**\:  :py:class:`UnicastQosAdjustStats <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Process.UnicastQosAdjustStats>`
            
            	**config**\: False
            
            .. attribute:: bvi_statistics
            
            	IGMP BVI Stats
            	**type**\:  :py:class:`BviStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Process.BviStatistics>`
            
            	**config**\: False
            
            .. attribute:: nsf
            
            	NSF Information
            	**type**\:  :py:class:`Nsf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Process.Nsf>`
            
            	**config**\: False
            
            

            """

            _prefix = 'ipv4-igmp-oper'
            _revision = '2018-01-31'

            def __init__(self):
                if sys.version_info > (3,):
                    super().__init__()
                else:
                    super(Igmp.Standby.Process, self).__init__()

                self.yang_name = "process"
                self.yang_parent_name = "standby"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("amt-summary", ("amt_summary", Igmp.Standby.Process.AmtSummary)), ("nsr", ("nsr", Igmp.Standby.Process.Nsr)), ("amt-gateways", ("amt_gateways", Igmp.Standby.Process.AmtGateways)), ("unicast-qos-adjust-stats", ("unicast_qos_adjust_stats", Igmp.Standby.Process.UnicastQosAdjustStats)), ("bvi-statistics", ("bvi_statistics", Igmp.Standby.Process.BviStatistics)), ("nsf", ("nsf", Igmp.Standby.Process.Nsf))])
                self._leafs = OrderedDict()

                self.amt_summary = Igmp.Standby.Process.AmtSummary()
                self.amt_summary.parent = self
                self._children_name_map["amt_summary"] = "amt-summary"

                self.nsr = Igmp.Standby.Process.Nsr()
                self.nsr.parent = self
                self._children_name_map["nsr"] = "nsr"

                self.amt_gateways = Igmp.Standby.Process.AmtGateways()
                self.amt_gateways.parent = self
                self._children_name_map["amt_gateways"] = "amt-gateways"

                self.unicast_qos_adjust_stats = Igmp.Standby.Process.UnicastQosAdjustStats()
                self.unicast_qos_adjust_stats.parent = self
                self._children_name_map["unicast_qos_adjust_stats"] = "unicast-qos-adjust-stats"

                self.bvi_statistics = Igmp.Standby.Process.BviStatistics()
                self.bvi_statistics.parent = self
                self._children_name_map["bvi_statistics"] = "bvi-statistics"

                self.nsf = Igmp.Standby.Process.Nsf()
                self.nsf.parent = self
                self._children_name_map["nsf"] = "nsf"
                self._segment_path = lambda: "process"
                self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/standby/%s" % self._segment_path()
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(Igmp.Standby.Process, [], name, value)


            class AmtSummary(_Entity_):
                """
                MRIB RouteDB Expiry Information
                
                .. attribute:: anycast_prefix
                
                	Robustness variable
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                	**config**\: False
                
                .. attribute:: prefix_length
                
                	Advertize AMT prefix length
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: relay_address
                
                	Advertaisment for AMT Relay address
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                	**config**\: False
                
                .. attribute:: mtu
                
                	AMT Tunnel MTU
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: tos
                
                	Type Of Service value in AMT header
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: ttl
                
                	Time To Live value in AMT header
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: query_interval
                
                	AMT Query interval
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: gateway_count
                
                	Number of AMT Gateway
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: max_gateway
                
                	Maximum Gateway allowed
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: tunnel_count
                
                	AMT Tunnel Count
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: tunnel_configured_maximum
                
                	AMT Tunnel configured Maximum
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: is_acl_configured
                
                	ACL configured under AMT
                	**type**\: bool
                
                	**config**\: False
                
                .. attribute:: is_gateway_simulation
                
                	AMT Gateway Simulation
                	**type**\: bool
                
                	**config**\: False
                
                .. attribute:: is_ou_of_resource
                
                	AMT Out Of Resource
                	**type**\: bool
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Igmp.Standby.Process.AmtSummary, self).__init__()

                    self.yang_name = "amt-summary"
                    self.yang_parent_name = "process"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('anycast_prefix', (YLeaf(YType.str, 'anycast-prefix'), ['str'])),
                        ('prefix_length', (YLeaf(YType.uint32, 'prefix-length'), ['int'])),
                        ('relay_address', (YLeaf(YType.str, 'relay-address'), ['str'])),
                        ('mtu', (YLeaf(YType.uint32, 'mtu'), ['int'])),
                        ('tos', (YLeaf(YType.uint32, 'tos'), ['int'])),
                        ('ttl', (YLeaf(YType.uint32, 'ttl'), ['int'])),
                        ('query_interval', (YLeaf(YType.uint32, 'query-interval'), ['int'])),
                        ('gateway_count', (YLeaf(YType.uint32, 'gateway-count'), ['int'])),
                        ('max_gateway', (YLeaf(YType.uint32, 'max-gateway'), ['int'])),
                        ('tunnel_count', (YLeaf(YType.uint32, 'tunnel-count'), ['int'])),
                        ('tunnel_configured_maximum', (YLeaf(YType.uint32, 'tunnel-configured-maximum'), ['int'])),
                        ('is_acl_configured', (YLeaf(YType.boolean, 'is-acl-configured'), ['bool'])),
                        ('is_gateway_simulation', (YLeaf(YType.boolean, 'is-gateway-simulation'), ['bool'])),
                        ('is_ou_of_resource', (YLeaf(YType.boolean, 'is-ou-of-resource'), ['bool'])),
                    ])
                    self.anycast_prefix = None
                    self.prefix_length = None
                    self.relay_address = None
                    self.mtu = None
                    self.tos = None
                    self.ttl = None
                    self.query_interval = None
                    self.gateway_count = None
                    self.max_gateway = None
                    self.tunnel_count = None
                    self.tunnel_configured_maximum = None
                    self.is_acl_configured = None
                    self.is_gateway_simulation = None
                    self.is_ou_of_resource = None
                    self._segment_path = lambda: "amt-summary"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/standby/process/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Igmp.Standby.Process.AmtSummary, ['anycast_prefix', 'prefix_length', 'relay_address', 'mtu', 'tos', 'ttl', 'query_interval', 'gateway_count', 'max_gateway', 'tunnel_count', 'tunnel_configured_maximum', 'is_acl_configured', 'is_gateway_simulation', 'is_ou_of_resource'], name, value)

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Igmp.Standby.Process.AmtSummary']['meta_info']


            class Nsr(_Entity_):
                """
                NSR Information
                
                .. attribute:: state
                
                	NSR state
                	**type**\: int
                
                	**range:** 0..255
                
                	**config**\: False
                
                .. attribute:: partner_proc_connected
                
                	Partner process connected
                	**type**\: bool
                
                	**config**\: False
                
                .. attribute:: collab_conv_done
                
                	Collaborators convergence done
                	**type**\: bool
                
                	**config**\: False
                
                .. attribute:: rmf_notification_done
                
                	RMF Notification done
                	**type**\: bool
                
                	**config**\: False
                
                .. attribute:: last_proc
                
                	Time when process came up
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                	**config**\: False
                
                .. attribute:: last_proc_connection_up
                
                	Time when process connection went up
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                	**config**\: False
                
                .. attribute:: last_proc_connection_dn
                
                	Time when process connection went down
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                	**config**\: False
                
                .. attribute:: last_rmf_ready
                
                	Time when RMF Rdy notif was sent
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                	**config**\: False
                
                .. attribute:: last_rmf_not_ready
                
                	Time when RMF Not\-Rdy notif was sent
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                	**config**\: False
                
                .. attribute:: count_proc_connection_up
                
                	No. of times process connection went up
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: count_proc_connection_dn
                
                	No. of times process connection went down
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: count_rmf_ready
                
                	No. of times RMF Ready notif was sent
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: count_rmf_not_ready
                
                	No. of times RMF Not Ready notif was sent
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Igmp.Standby.Process.Nsr, self).__init__()

                    self.yang_name = "nsr"
                    self.yang_parent_name = "process"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('state', (YLeaf(YType.uint8, 'state'), ['int'])),
                        ('partner_proc_connected', (YLeaf(YType.boolean, 'partner-proc-connected'), ['bool'])),
                        ('collab_conv_done', (YLeaf(YType.boolean, 'collab-conv-done'), ['bool'])),
                        ('rmf_notification_done', (YLeaf(YType.boolean, 'rmf-notification-done'), ['bool'])),
                        ('last_proc', (YLeaf(YType.uint64, 'last-proc'), ['int'])),
                        ('last_proc_connection_up', (YLeaf(YType.uint64, 'last-proc-connection-up'), ['int'])),
                        ('last_proc_connection_dn', (YLeaf(YType.uint64, 'last-proc-connection-dn'), ['int'])),
                        ('last_rmf_ready', (YLeaf(YType.uint64, 'last-rmf-ready'), ['int'])),
                        ('last_rmf_not_ready', (YLeaf(YType.uint64, 'last-rmf-not-ready'), ['int'])),
                        ('count_proc_connection_up', (YLeaf(YType.uint32, 'count-proc-connection-up'), ['int'])),
                        ('count_proc_connection_dn', (YLeaf(YType.uint32, 'count-proc-connection-dn'), ['int'])),
                        ('count_rmf_ready', (YLeaf(YType.uint32, 'count-rmf-ready'), ['int'])),
                        ('count_rmf_not_ready', (YLeaf(YType.uint32, 'count-rmf-not-ready'), ['int'])),
                    ])
                    self.state = None
                    self.partner_proc_connected = None
                    self.collab_conv_done = None
                    self.rmf_notification_done = None
                    self.last_proc = None
                    self.last_proc_connection_up = None
                    self.last_proc_connection_dn = None
                    self.last_rmf_ready = None
                    self.last_rmf_not_ready = None
                    self.count_proc_connection_up = None
                    self.count_proc_connection_dn = None
                    self.count_rmf_ready = None
                    self.count_rmf_not_ready = None
                    self._segment_path = lambda: "nsr"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/standby/process/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Igmp.Standby.Process.Nsr, ['state', 'partner_proc_connected', 'collab_conv_done', 'rmf_notification_done', 'last_proc', 'last_proc_connection_up', 'last_proc_connection_dn', 'last_rmf_ready', 'last_rmf_not_ready', 'count_proc_connection_up', 'count_proc_connection_dn', 'count_rmf_ready', 'count_rmf_not_ready'], name, value)

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Igmp.Standby.Process.Nsr']['meta_info']


            class AmtGateways(_Entity_):
                """
                Table containing AMT Gateway DataBase
                information
                
                .. attribute:: amt_gateway
                
                	AMT Gateway DataBase information
                	**type**\: list of  		 :py:class:`AmtGateway <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.Process.AmtGateways.AmtGateway>`
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Igmp.Standby.Process.AmtGateways, self).__init__()

                    self.yang_name = "amt-gateways"
                    self.yang_parent_name = "process"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("amt-gateway", ("amt_gateway", Igmp.Standby.Process.AmtGateways.AmtGateway))])
                    self._leafs = OrderedDict()

                    self.amt_gateway = YList(self)
                    self._segment_path = lambda: "amt-gateways"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/standby/process/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Igmp.Standby.Process.AmtGateways, [], name, value)


                class AmtGateway(_Entity_):
                    """
                    AMT Gateway DataBase information
                    
                    .. attribute:: gateway_address
                    
                    	Gateway Address
                    	**type**\: union of the below types:
                    
                    		**type**\: str
                    
                    			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    		**type**\: str
                    
                    			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    	**config**\: False
                    
                    .. attribute:: port
                    
                    	Port
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: amtgw
                    
                    	GW
                    	**type**\: str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    	**config**\: False
                    
                    .. attribute:: amt_port
                    
                    	Port
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: key_len
                    
                    	Len
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: amtnh
                    
                    	AMT NH
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: amt_nonce
                    
                    	Nonce
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: idb
                    
                    	IDB
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**config**\: False
                    
                    .. attribute:: mem_upd_in
                    
                    	UpdIn
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: mem_upd_out
                    
                    	UpdOut
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Igmp.Standby.Process.AmtGateways.AmtGateway, self).__init__()

                        self.yang_name = "amt-gateway"
                        self.yang_parent_name = "amt-gateways"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('gateway_address', (YLeaf(YType.str, 'gateway-address'), ['str','str'])),
                            ('port', (YLeaf(YType.uint32, 'port'), ['int'])),
                            ('amtgw', (YLeaf(YType.str, 'amtgw'), ['str'])),
                            ('amt_port', (YLeaf(YType.uint32, 'amt-port'), ['int'])),
                            ('key_len', (YLeaf(YType.uint32, 'key-len'), ['int'])),
                            ('amtnh', (YLeaf(YType.uint32, 'amtnh'), ['int'])),
                            ('amt_nonce', (YLeaf(YType.uint32, 'amt-nonce'), ['int'])),
                            ('idb', (YLeaf(YType.uint64, 'idb'), ['int'])),
                            ('mem_upd_in', (YLeaf(YType.uint32, 'mem-upd-in'), ['int'])),
                            ('mem_upd_out', (YLeaf(YType.uint32, 'mem-upd-out'), ['int'])),
                        ])
                        self.gateway_address = None
                        self.port = None
                        self.amtgw = None
                        self.amt_port = None
                        self.key_len = None
                        self.amtnh = None
                        self.amt_nonce = None
                        self.idb = None
                        self.mem_upd_in = None
                        self.mem_upd_out = None
                        self._segment_path = lambda: "amt-gateway"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/standby/process/amt-gateways/%s" % self._segment_path()
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Igmp.Standby.Process.AmtGateways.AmtGateway, ['gateway_address', 'port', 'amtgw', 'amt_port', 'key_len', 'amtnh', 'amt_nonce', 'idb', 'mem_upd_in', 'mem_upd_out'], name, value)

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Igmp.Standby.Process.AmtGateways.AmtGateway']['meta_info']

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Igmp.Standby.Process.AmtGateways']['meta_info']


            class UnicastQosAdjustStats(_Entity_):
                """
                IGMP Unicast\-Qos\-Adjust Statistics
                
                .. attribute:: queues
                
                	I2Q Queue count
                	**type**\: int
                
                	**range:** 0..65535
                
                	**config**\: False
                
                .. attribute:: batches
                
                	I2Q Rate Batch count
                	**type**\: int
                
                	**range:** 0..65535
                
                	**config**\: False
                
                .. attribute:: add_to_batches
                
                	Add to batch count
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: delete_to_batches
                
                	Delete to batch count
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: send_success
                
                	Send Success count
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: send_errors
                
                	Number of Send errors in batch
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: send_comm_errors
                
                	Send Error due to comms count
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: send_partial_errors
                
                	Send Error due to partial issue count
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: received_resync_requests
                
                	Number of Resync request received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: sent_resync_bulks
                
                	Number of bulks sent for last resync received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: is_resync_received
                
                	Is Resync request received
                	**type**\: bool
                
                	**config**\: False
                
                .. attribute:: is_resync_required
                
                	Is Resync required
                	**type**\: bool
                
                	**config**\: False
                
                .. attribute:: is_resync_start_sent
                
                	Is Resync Start message sent
                	**type**\: bool
                
                	**config**\: False
                
                .. attribute:: is_qos_s_sweeped
                
                	Is QOS Sweeped once 
                	**type**\: bool
                
                	**config**\: False
                
                .. attribute:: last_sweep_time
                
                	Time elapsed since Last mark and sweep in seconds
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                	**config**\: False
                
                	**units**\: second
                
                .. attribute:: last_download_time
                
                	Time elapsed since Last download to QOS in seconds
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                	**config**\: False
                
                	**units**\: second
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Igmp.Standby.Process.UnicastQosAdjustStats, self).__init__()

                    self.yang_name = "unicast-qos-adjust-stats"
                    self.yang_parent_name = "process"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('queues', (YLeaf(YType.uint16, 'queues'), ['int'])),
                        ('batches', (YLeaf(YType.uint16, 'batches'), ['int'])),
                        ('add_to_batches', (YLeaf(YType.uint32, 'add-to-batches'), ['int'])),
                        ('delete_to_batches', (YLeaf(YType.uint32, 'delete-to-batches'), ['int'])),
                        ('send_success', (YLeaf(YType.uint32, 'send-success'), ['int'])),
                        ('send_errors', (YLeaf(YType.uint32, 'send-errors'), ['int'])),
                        ('send_comm_errors', (YLeaf(YType.uint32, 'send-comm-errors'), ['int'])),
                        ('send_partial_errors', (YLeaf(YType.uint32, 'send-partial-errors'), ['int'])),
                        ('received_resync_requests', (YLeaf(YType.uint32, 'received-resync-requests'), ['int'])),
                        ('sent_resync_bulks', (YLeaf(YType.uint32, 'sent-resync-bulks'), ['int'])),
                        ('is_resync_received', (YLeaf(YType.boolean, 'is-resync-received'), ['bool'])),
                        ('is_resync_required', (YLeaf(YType.boolean, 'is-resync-required'), ['bool'])),
                        ('is_resync_start_sent', (YLeaf(YType.boolean, 'is-resync-start-sent'), ['bool'])),
                        ('is_qos_s_sweeped', (YLeaf(YType.boolean, 'is-qos-s-sweeped'), ['bool'])),
                        ('last_sweep_time', (YLeaf(YType.uint64, 'last-sweep-time'), ['int'])),
                        ('last_download_time', (YLeaf(YType.uint64, 'last-download-time'), ['int'])),
                    ])
                    self.queues = None
                    self.batches = None
                    self.add_to_batches = None
                    self.delete_to_batches = None
                    self.send_success = None
                    self.send_errors = None
                    self.send_comm_errors = None
                    self.send_partial_errors = None
                    self.received_resync_requests = None
                    self.sent_resync_bulks = None
                    self.is_resync_received = None
                    self.is_resync_required = None
                    self.is_resync_start_sent = None
                    self.is_qos_s_sweeped = None
                    self.last_sweep_time = None
                    self.last_download_time = None
                    self._segment_path = lambda: "unicast-qos-adjust-stats"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/standby/process/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Igmp.Standby.Process.UnicastQosAdjustStats, ['queues', 'batches', 'add_to_batches', 'delete_to_batches', 'send_success', 'send_errors', 'send_comm_errors', 'send_partial_errors', 'received_resync_requests', 'sent_resync_bulks', 'is_resync_received', 'is_resync_required', 'is_resync_start_sent', 'is_qos_s_sweeped', 'last_sweep_time', 'last_download_time'], name, value)

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Igmp.Standby.Process.UnicastQosAdjustStats']['meta_info']


            class BviStatistics(_Entity_):
                """
                IGMP BVI Stats
                
                .. attribute:: receive_buffers
                
                	Number of AIPC buffers received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: release_buffers
                
                	Number of AIPC buffers released
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: send_blocks
                
                	Number of AIPC buffers send blocked
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: release_fail_buffers
                
                	Number of AIPC buffers release failed
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: null_buffer_handles
                
                	Number of AIPC NULL buffer handles
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: rx_ipc_open_notif
                
                	Number of AIPC open notifications received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: rx_ipc_close_notif
                
                	Number of AIPC close notifications received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: rx_ipc_error_notif
                
                	Number of AIPC error notifications received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: rx_ipc_lwm_notif
                
                	Number of AIPC LWM notifications received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: rx_ipc_input_wait_notif
                
                	Number of AIPC input waiting notifications received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: rx_ipc_send_status_notif
                
                	Number of AIPC send status notifications received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: rx_ipc_publish_notif
                
                	Number of AIPC publish notifications received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: rx_ipc_q_full_notif
                
                	Number of AIPC queue full notifications received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: rx_ipc_output_notif
                
                	Number of AIPC output notifications received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: rx_ipc_connect_notif
                
                	Number of AIPC connect notifications received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: rx_igmp_packet_success
                
                	Number of IGMP protocol messages received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: rx_add_mrouter_msg
                
                	Number of IGMP Mrouter Add messages received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: rx_delete_mrouter_msg
                
                	Number of IGMP Mrouter Delete messages received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: rx_sweep_mrouter_msg
                
                	Number of IGMP Mrouter Sweep messages received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: tx_add_mrouter_msg
                
                	Number of IGMP Mrouter Add messages transmitted
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: tx_delete_mrouter_msg
                
                	Number of IGMP Mrouter Delete messages transmitted
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: tx_sweep_mrouter_msg
                
                	Number of IGMP Mrouter Sweep messages received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: rx_unknown_mrouter_msg
                
                	Number of IGMP Mrouter Unknown messages received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: tx_unknown_mrouter_msg
                
                	Number of IGMP Mrouter Unknown messages transmitted
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: tx_buffer_errors
                
                	Number of AIPC transmission errors
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: tx_buffers
                
                	Number of AIPC buffers transmited
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: tx_protocol_buffers
                
                	Number of IGMP protocol buffers transmitted
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: tx_mrouter_buffers
                
                	Number of IGMP Mrouter buffers transmitted
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: tx_unknown_buffers
                
                	Number of IGMP Unknown buffers transmited
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: wtx_msg_recvd
                
                	Number of WTX messages received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: wtx_msg_sent
                
                	Number of WTX messages sent
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: wtx_msg_proto_sent
                
                	Number of WTX messages sent to Protocol
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: wtx_msg_drop_dc
                
                	Number of WTX messages dropped due to disconnect
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: wtx_msg_drop_nomem
                
                	Number of WTX messages dropped to memory
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: wtx_msg_freed
                
                	Number of WTX messages freed
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Igmp.Standby.Process.BviStatistics, self).__init__()

                    self.yang_name = "bvi-statistics"
                    self.yang_parent_name = "process"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('receive_buffers', (YLeaf(YType.uint32, 'receive-buffers'), ['int'])),
                        ('release_buffers', (YLeaf(YType.uint32, 'release-buffers'), ['int'])),
                        ('send_blocks', (YLeaf(YType.uint32, 'send-blocks'), ['int'])),
                        ('release_fail_buffers', (YLeaf(YType.uint32, 'release-fail-buffers'), ['int'])),
                        ('null_buffer_handles', (YLeaf(YType.uint32, 'null-buffer-handles'), ['int'])),
                        ('rx_ipc_open_notif', (YLeaf(YType.uint32, 'rx-ipc-open-notif'), ['int'])),
                        ('rx_ipc_close_notif', (YLeaf(YType.uint32, 'rx-ipc-close-notif'), ['int'])),
                        ('rx_ipc_error_notif', (YLeaf(YType.uint32, 'rx-ipc-error-notif'), ['int'])),
                        ('rx_ipc_lwm_notif', (YLeaf(YType.uint32, 'rx-ipc-lwm-notif'), ['int'])),
                        ('rx_ipc_input_wait_notif', (YLeaf(YType.uint32, 'rx-ipc-input-wait-notif'), ['int'])),
                        ('rx_ipc_send_status_notif', (YLeaf(YType.uint32, 'rx-ipc-send-status-notif'), ['int'])),
                        ('rx_ipc_publish_notif', (YLeaf(YType.uint32, 'rx-ipc-publish-notif'), ['int'])),
                        ('rx_ipc_q_full_notif', (YLeaf(YType.uint32, 'rx-ipc-q-full-notif'), ['int'])),
                        ('rx_ipc_output_notif', (YLeaf(YType.uint32, 'rx-ipc-output-notif'), ['int'])),
                        ('rx_ipc_connect_notif', (YLeaf(YType.uint32, 'rx-ipc-connect-notif'), ['int'])),
                        ('rx_igmp_packet_success', (YLeaf(YType.uint32, 'rx-igmp-packet-success'), ['int'])),
                        ('rx_add_mrouter_msg', (YLeaf(YType.uint32, 'rx-add-mrouter-msg'), ['int'])),
                        ('rx_delete_mrouter_msg', (YLeaf(YType.uint32, 'rx-delete-mrouter-msg'), ['int'])),
                        ('rx_sweep_mrouter_msg', (YLeaf(YType.uint32, 'rx-sweep-mrouter-msg'), ['int'])),
                        ('tx_add_mrouter_msg', (YLeaf(YType.uint32, 'tx-add-mrouter-msg'), ['int'])),
                        ('tx_delete_mrouter_msg', (YLeaf(YType.uint32, 'tx-delete-mrouter-msg'), ['int'])),
                        ('tx_sweep_mrouter_msg', (YLeaf(YType.uint32, 'tx-sweep-mrouter-msg'), ['int'])),
                        ('rx_unknown_mrouter_msg', (YLeaf(YType.uint32, 'rx-unknown-mrouter-msg'), ['int'])),
                        ('tx_unknown_mrouter_msg', (YLeaf(YType.uint32, 'tx-unknown-mrouter-msg'), ['int'])),
                        ('tx_buffer_errors', (YLeaf(YType.uint32, 'tx-buffer-errors'), ['int'])),
                        ('tx_buffers', (YLeaf(YType.uint32, 'tx-buffers'), ['int'])),
                        ('tx_protocol_buffers', (YLeaf(YType.uint32, 'tx-protocol-buffers'), ['int'])),
                        ('tx_mrouter_buffers', (YLeaf(YType.uint32, 'tx-mrouter-buffers'), ['int'])),
                        ('tx_unknown_buffers', (YLeaf(YType.uint32, 'tx-unknown-buffers'), ['int'])),
                        ('wtx_msg_recvd', (YLeaf(YType.uint32, 'wtx-msg-recvd'), ['int'])),
                        ('wtx_msg_sent', (YLeaf(YType.uint32, 'wtx-msg-sent'), ['int'])),
                        ('wtx_msg_proto_sent', (YLeaf(YType.uint32, 'wtx-msg-proto-sent'), ['int'])),
                        ('wtx_msg_drop_dc', (YLeaf(YType.uint32, 'wtx-msg-drop-dc'), ['int'])),
                        ('wtx_msg_drop_nomem', (YLeaf(YType.uint32, 'wtx-msg-drop-nomem'), ['int'])),
                        ('wtx_msg_freed', (YLeaf(YType.uint32, 'wtx-msg-freed'), ['int'])),
                    ])
                    self.receive_buffers = None
                    self.release_buffers = None
                    self.send_blocks = None
                    self.release_fail_buffers = None
                    self.null_buffer_handles = None
                    self.rx_ipc_open_notif = None
                    self.rx_ipc_close_notif = None
                    self.rx_ipc_error_notif = None
                    self.rx_ipc_lwm_notif = None
                    self.rx_ipc_input_wait_notif = None
                    self.rx_ipc_send_status_notif = None
                    self.rx_ipc_publish_notif = None
                    self.rx_ipc_q_full_notif = None
                    self.rx_ipc_output_notif = None
                    self.rx_ipc_connect_notif = None
                    self.rx_igmp_packet_success = None
                    self.rx_add_mrouter_msg = None
                    self.rx_delete_mrouter_msg = None
                    self.rx_sweep_mrouter_msg = None
                    self.tx_add_mrouter_msg = None
                    self.tx_delete_mrouter_msg = None
                    self.tx_sweep_mrouter_msg = None
                    self.rx_unknown_mrouter_msg = None
                    self.tx_unknown_mrouter_msg = None
                    self.tx_buffer_errors = None
                    self.tx_buffers = None
                    self.tx_protocol_buffers = None
                    self.tx_mrouter_buffers = None
                    self.tx_unknown_buffers = None
                    self.wtx_msg_recvd = None
                    self.wtx_msg_sent = None
                    self.wtx_msg_proto_sent = None
                    self.wtx_msg_drop_dc = None
                    self.wtx_msg_drop_nomem = None
                    self.wtx_msg_freed = None
                    self._segment_path = lambda: "bvi-statistics"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/standby/process/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Igmp.Standby.Process.BviStatistics, ['receive_buffers', 'release_buffers', 'send_blocks', 'release_fail_buffers', 'null_buffer_handles', 'rx_ipc_open_notif', 'rx_ipc_close_notif', 'rx_ipc_error_notif', 'rx_ipc_lwm_notif', 'rx_ipc_input_wait_notif', 'rx_ipc_send_status_notif', 'rx_ipc_publish_notif', 'rx_ipc_q_full_notif', 'rx_ipc_output_notif', 'rx_ipc_connect_notif', 'rx_igmp_packet_success', 'rx_add_mrouter_msg', 'rx_delete_mrouter_msg', 'rx_sweep_mrouter_msg', 'tx_add_mrouter_msg', 'tx_delete_mrouter_msg', 'tx_sweep_mrouter_msg', 'rx_unknown_mrouter_msg', 'tx_unknown_mrouter_msg', 'tx_buffer_errors', 'tx_buffers', 'tx_protocol_buffers', 'tx_mrouter_buffers', 'tx_unknown_buffers', 'wtx_msg_recvd', 'wtx_msg_sent', 'wtx_msg_proto_sent', 'wtx_msg_drop_dc', 'wtx_msg_drop_nomem', 'wtx_msg_freed'], name, value)

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Igmp.Standby.Process.BviStatistics']['meta_info']


            class Nsf(_Entity_):
                """
                NSF Information
                
                .. attribute:: is_multicast_nsf_active
                
                	Is Multicast NSF active
                	**type**\: bool
                
                	**config**\: False
                
                .. attribute:: multicast_nsf_timeout
                
                	Multicast NSF timeout in secs
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                	**units**\: second
                
                .. attribute:: multicast_nsf_time_left
                
                	Multicast NSF time remaining in secs
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                	**units**\: second
                
                .. attribute:: respawn_count
                
                	Respawn Count
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: last_nsf_on
                
                	Last NSF time ON
                	**type**\: int
                
                	**range:** \-9223372036854775808..9223372036854775807
                
                	**config**\: False
                
                .. attribute:: last_nsf_off
                
                	Last NSF time off
                	**type**\: int
                
                	**range:** \-9223372036854775808..9223372036854775807
                
                	**config**\: False
                
                .. attribute:: last_nsf_on_min
                
                	Last NSF time ON in Seconds
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                	**config**\: False
                
                	**units**\: second
                
                .. attribute:: last_nsf_off_min
                
                	Last NSF time OFF in Seconds
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                	**config**\: False
                
                	**units**\: second
                
                .. attribute:: last_icd_notif_recv
                
                	Last ICD Notif Recv
                	**type**\: int
                
                	**range:** \-9223372036854775808..9223372036854775807
                
                	**config**\: False
                
                .. attribute:: last_icd_notif_recv_min
                
                	Last ICD Notif Recv in Seconds
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                	**config**\: False
                
                	**units**\: second
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Igmp.Standby.Process.Nsf, self).__init__()

                    self.yang_name = "nsf"
                    self.yang_parent_name = "process"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('is_multicast_nsf_active', (YLeaf(YType.boolean, 'is-multicast-nsf-active'), ['bool'])),
                        ('multicast_nsf_timeout', (YLeaf(YType.uint32, 'multicast-nsf-timeout'), ['int'])),
                        ('multicast_nsf_time_left', (YLeaf(YType.uint32, 'multicast-nsf-time-left'), ['int'])),
                        ('respawn_count', (YLeaf(YType.uint32, 'respawn-count'), ['int'])),
                        ('last_nsf_on', (YLeaf(YType.int64, 'last-nsf-on'), ['int'])),
                        ('last_nsf_off', (YLeaf(YType.int64, 'last-nsf-off'), ['int'])),
                        ('last_nsf_on_min', (YLeaf(YType.int32, 'last-nsf-on-min'), ['int'])),
                        ('last_nsf_off_min', (YLeaf(YType.int32, 'last-nsf-off-min'), ['int'])),
                        ('last_icd_notif_recv', (YLeaf(YType.int64, 'last-icd-notif-recv'), ['int'])),
                        ('last_icd_notif_recv_min', (YLeaf(YType.int32, 'last-icd-notif-recv-min'), ['int'])),
                    ])
                    self.is_multicast_nsf_active = None
                    self.multicast_nsf_timeout = None
                    self.multicast_nsf_time_left = None
                    self.respawn_count = None
                    self.last_nsf_on = None
                    self.last_nsf_off = None
                    self.last_nsf_on_min = None
                    self.last_nsf_off_min = None
                    self.last_icd_notif_recv = None
                    self.last_icd_notif_recv_min = None
                    self._segment_path = lambda: "nsf"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/standby/process/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Igmp.Standby.Process.Nsf, ['is_multicast_nsf_active', 'multicast_nsf_timeout', 'multicast_nsf_time_left', 'respawn_count', 'last_nsf_on', 'last_nsf_off', 'last_nsf_on_min', 'last_nsf_off_min', 'last_icd_notif_recv', 'last_icd_notif_recv_min'], name, value)

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Igmp.Standby.Process.Nsf']['meta_info']

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                return meta._meta_table['Igmp.Standby.Process']['meta_info']


        class DefaultContext(_Entity_):
            """
            Default Context
            
            .. attribute:: summary
            
            	IGMP Summary Information
            	**type**\:  :py:class:`Summary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.Summary>`
            
            	**config**\: False
            
            .. attribute:: interface_state_ons
            
            	IGMP Interface state on
            	**type**\:  :py:class:`InterfaceStateOns <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.InterfaceStateOns>`
            
            	**config**\: False
            
            .. attribute:: detail_groups
            
            	IGMP Detail Group Database
            	**type**\:  :py:class:`DetailGroups <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.DetailGroups>`
            
            	**config**\: False
            
            .. attribute:: non_active_groups
            
            	IGMP Non\-Active Groups Information
            	**type**\:  :py:class:`NonActiveGroups <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.NonActiveGroups>`
            
            	**config**\: False
            
            .. attribute:: ssm_maps
            
            	SSM Map Table
            	**type**\:  :py:class:`SsmMaps <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.SsmMaps>`
            
            	**config**\: False
            
            .. attribute:: explicit_groups
            
            	IGMP Explicit Group Database
            	**type**\:  :py:class:`ExplicitGroups <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.ExplicitGroups>`
            
            	**config**\: False
            
            .. attribute:: interface_table
            
            	IGMP Interface specific Table
            	**type**\:  :py:class:`InterfaceTable <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.InterfaceTable>`
            
            	**config**\: False
            
            .. attribute:: interface_unicast_qos_adjusts
            
            	IGMP Interface Unicast\-Qos\-Adjust
            	**type**\:  :py:class:`InterfaceUnicastQosAdjusts <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.InterfaceUnicastQosAdjusts>`
            
            	**config**\: False
            
            .. attribute:: ranges
            
            	Range table
            	**type**\:  :py:class:`Ranges <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.Ranges>`
            
            	**config**\: False
            
            .. attribute:: ifrs_interfaces
            
            	IGMP Interface specific
            	**type**\:  :py:class:`IfrsInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.IfrsInterfaces>`
            
            	**config**\: False
            
            .. attribute:: traffic_counters
            
            	IGMP Message Traffic Counters
            	**type**\:  :py:class:`TrafficCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.TrafficCounters>`
            
            	**config**\: False
            
            .. attribute:: groups
            
            	IGMP Group Database Table
            	**type**\:  :py:class:`Groups <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.Groups>`
            
            	**config**\: False
            
            .. attribute:: group_summary
            
            	IGMP Groups Summary
            	**type**\:  :py:class:`GroupSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.GroupSummary>`
            
            	**config**\: False
            
            .. attribute:: ifrs_interface_summary
            
            	IGMP IFRS Interface summary
            	**type**\:  :py:class:`IfrsInterfaceSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.IfrsInterfaceSummary>`
            
            	**config**\: False
            
            .. attribute:: global_interface_table
            
            	IGMP Global Interface 
            	**type**\:  :py:class:`GlobalInterfaceTable <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.GlobalInterfaceTable>`
            
            	**config**\: False
            
            .. attribute:: ssm_map_details
            
            	SSM Map Detail
            	**type**\:  :py:class:`SsmMapDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.SsmMapDetails>`
            
            	**config**\: False
            
            .. attribute:: interface_state_offs
            
            	IGMP Interface state off
            	**type**\:  :py:class:`InterfaceStateOffs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.InterfaceStateOffs>`
            
            	**config**\: False
            
            

            """

            _prefix = 'ipv4-igmp-oper'
            _revision = '2018-01-31'

            def __init__(self):
                if sys.version_info > (3,):
                    super().__init__()
                else:
                    super(Igmp.Standby.DefaultContext, self).__init__()

                self.yang_name = "default-context"
                self.yang_parent_name = "standby"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("summary", ("summary", Igmp.Standby.DefaultContext.Summary)), ("interface-state-ons", ("interface_state_ons", Igmp.Standby.DefaultContext.InterfaceStateOns)), ("detail-groups", ("detail_groups", Igmp.Standby.DefaultContext.DetailGroups)), ("non-active-groups", ("non_active_groups", Igmp.Standby.DefaultContext.NonActiveGroups)), ("ssm-maps", ("ssm_maps", Igmp.Standby.DefaultContext.SsmMaps)), ("explicit-groups", ("explicit_groups", Igmp.Standby.DefaultContext.ExplicitGroups)), ("interface-table", ("interface_table", Igmp.Standby.DefaultContext.InterfaceTable)), ("interface-unicast-qos-adjusts", ("interface_unicast_qos_adjusts", Igmp.Standby.DefaultContext.InterfaceUnicastQosAdjusts)), ("ranges", ("ranges", Igmp.Standby.DefaultContext.Ranges)), ("ifrs-interfaces", ("ifrs_interfaces", Igmp.Standby.DefaultContext.IfrsInterfaces)), ("traffic-counters", ("traffic_counters", Igmp.Standby.DefaultContext.TrafficCounters)), ("groups", ("groups", Igmp.Standby.DefaultContext.Groups)), ("group-summary", ("group_summary", Igmp.Standby.DefaultContext.GroupSummary)), ("ifrs-interface-summary", ("ifrs_interface_summary", Igmp.Standby.DefaultContext.IfrsInterfaceSummary)), ("global-interface-table", ("global_interface_table", Igmp.Standby.DefaultContext.GlobalInterfaceTable)), ("ssm-map-details", ("ssm_map_details", Igmp.Standby.DefaultContext.SsmMapDetails)), ("interface-state-offs", ("interface_state_offs", Igmp.Standby.DefaultContext.InterfaceStateOffs))])
                self._leafs = OrderedDict()

                self.summary = Igmp.Standby.DefaultContext.Summary()
                self.summary.parent = self
                self._children_name_map["summary"] = "summary"

                self.interface_state_ons = Igmp.Standby.DefaultContext.InterfaceStateOns()
                self.interface_state_ons.parent = self
                self._children_name_map["interface_state_ons"] = "interface-state-ons"

                self.detail_groups = Igmp.Standby.DefaultContext.DetailGroups()
                self.detail_groups.parent = self
                self._children_name_map["detail_groups"] = "detail-groups"

                self.non_active_groups = Igmp.Standby.DefaultContext.NonActiveGroups()
                self.non_active_groups.parent = self
                self._children_name_map["non_active_groups"] = "non-active-groups"

                self.ssm_maps = Igmp.Standby.DefaultContext.SsmMaps()
                self.ssm_maps.parent = self
                self._children_name_map["ssm_maps"] = "ssm-maps"

                self.explicit_groups = Igmp.Standby.DefaultContext.ExplicitGroups()
                self.explicit_groups.parent = self
                self._children_name_map["explicit_groups"] = "explicit-groups"

                self.interface_table = Igmp.Standby.DefaultContext.InterfaceTable()
                self.interface_table.parent = self
                self._children_name_map["interface_table"] = "interface-table"

                self.interface_unicast_qos_adjusts = Igmp.Standby.DefaultContext.InterfaceUnicastQosAdjusts()
                self.interface_unicast_qos_adjusts.parent = self
                self._children_name_map["interface_unicast_qos_adjusts"] = "interface-unicast-qos-adjusts"

                self.ranges = Igmp.Standby.DefaultContext.Ranges()
                self.ranges.parent = self
                self._children_name_map["ranges"] = "ranges"

                self.ifrs_interfaces = Igmp.Standby.DefaultContext.IfrsInterfaces()
                self.ifrs_interfaces.parent = self
                self._children_name_map["ifrs_interfaces"] = "ifrs-interfaces"

                self.traffic_counters = Igmp.Standby.DefaultContext.TrafficCounters()
                self.traffic_counters.parent = self
                self._children_name_map["traffic_counters"] = "traffic-counters"

                self.groups = Igmp.Standby.DefaultContext.Groups()
                self.groups.parent = self
                self._children_name_map["groups"] = "groups"

                self.group_summary = Igmp.Standby.DefaultContext.GroupSummary()
                self.group_summary.parent = self
                self._children_name_map["group_summary"] = "group-summary"

                self.ifrs_interface_summary = Igmp.Standby.DefaultContext.IfrsInterfaceSummary()
                self.ifrs_interface_summary.parent = self
                self._children_name_map["ifrs_interface_summary"] = "ifrs-interface-summary"

                self.global_interface_table = Igmp.Standby.DefaultContext.GlobalInterfaceTable()
                self.global_interface_table.parent = self
                self._children_name_map["global_interface_table"] = "global-interface-table"

                self.ssm_map_details = Igmp.Standby.DefaultContext.SsmMapDetails()
                self.ssm_map_details.parent = self
                self._children_name_map["ssm_map_details"] = "ssm-map-details"

                self.interface_state_offs = Igmp.Standby.DefaultContext.InterfaceStateOffs()
                self.interface_state_offs.parent = self
                self._children_name_map["interface_state_offs"] = "interface-state-offs"
                self._segment_path = lambda: "default-context"
                self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/standby/%s" % self._segment_path()
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(Igmp.Standby.DefaultContext, [], name, value)


            class Summary(_Entity_):
                """
                IGMP Summary Information
                
                .. attribute:: robustness
                
                	Robustness variable
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: group_limit
                
                	Maximum groups accepted
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: group_count
                
                	Current groups accepted
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: is_disabled
                
                	Is maximum enforcement disabled
                	**type**\: bool
                
                	**config**\: False
                
                .. attribute:: supported_interfaces
                
                	No. of supported interfaces
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: unsupported_interfaces
                
                	No. of unsupported interfaces
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: enabled_interface_count
                
                	No. of enabled interfaces
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: disabled_interface_count
                
                	No. of disabled interfaces
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: tunnel_mte_config_count
                
                	No. of static group commands
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: node_low_memory
                
                	Is node in low memory condition
                	**type**\: bool
                
                	**config**\: False
                
                .. attribute:: interface
                
                	Maximum and current groups accepted for each interface
                	**type**\: list of  		 :py:class:`Interface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.Summary.Interface>`
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Igmp.Standby.DefaultContext.Summary, self).__init__()

                    self.yang_name = "summary"
                    self.yang_parent_name = "default-context"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("interface", ("interface", Igmp.Standby.DefaultContext.Summary.Interface))])
                    self._leafs = OrderedDict([
                        ('robustness', (YLeaf(YType.uint32, 'robustness'), ['int'])),
                        ('group_limit', (YLeaf(YType.uint32, 'group-limit'), ['int'])),
                        ('group_count', (YLeaf(YType.uint32, 'group-count'), ['int'])),
                        ('is_disabled', (YLeaf(YType.boolean, 'is-disabled'), ['bool'])),
                        ('supported_interfaces', (YLeaf(YType.uint32, 'supported-interfaces'), ['int'])),
                        ('unsupported_interfaces', (YLeaf(YType.uint32, 'unsupported-interfaces'), ['int'])),
                        ('enabled_interface_count', (YLeaf(YType.uint32, 'enabled-interface-count'), ['int'])),
                        ('disabled_interface_count', (YLeaf(YType.uint32, 'disabled-interface-count'), ['int'])),
                        ('tunnel_mte_config_count', (YLeaf(YType.uint32, 'tunnel-mte-config-count'), ['int'])),
                        ('node_low_memory', (YLeaf(YType.boolean, 'node-low-memory'), ['bool'])),
                    ])
                    self.robustness = None
                    self.group_limit = None
                    self.group_count = None
                    self.is_disabled = None
                    self.supported_interfaces = None
                    self.unsupported_interfaces = None
                    self.enabled_interface_count = None
                    self.disabled_interface_count = None
                    self.tunnel_mte_config_count = None
                    self.node_low_memory = None

                    self.interface = YList(self)
                    self._segment_path = lambda: "summary"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/standby/default-context/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Igmp.Standby.DefaultContext.Summary, ['robustness', 'group_limit', 'group_count', 'is_disabled', 'supported_interfaces', 'unsupported_interfaces', 'enabled_interface_count', 'disabled_interface_count', 'tunnel_mte_config_count', 'node_low_memory'], name, value)


                class Interface(_Entity_):
                    """
                    Maximum and current groups accepted for each
                    interface
                    
                    .. attribute:: interface_name
                    
                    	Interface
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: group_limit
                    
                    	Maximum groups accepted per interface
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: group_count
                    
                    	Current groups accepted per interface
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: parent_ifhandle
                    
                    	Parent if handle
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: on_off
                    
                    	Enabled/Disabled
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: time_since_last_query_in_seconds
                    
                    	Time elapsed since last query
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: time_since_last_report_in_seconds
                    
                    	Time elapsed since last report
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: router_uptime_in_seconds
                    
                    	Time elapsed since router enabled event
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Igmp.Standby.DefaultContext.Summary.Interface, self).__init__()

                        self.yang_name = "interface"
                        self.yang_parent_name = "summary"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                            ('group_limit', (YLeaf(YType.uint32, 'group-limit'), ['int'])),
                            ('group_count', (YLeaf(YType.uint32, 'group-count'), ['int'])),
                            ('parent_ifhandle', (YLeaf(YType.str, 'parent-ifhandle'), ['str'])),
                            ('on_off', (YLeaf(YType.boolean, 'on-off'), ['bool'])),
                            ('time_since_last_query_in_seconds', (YLeaf(YType.uint32, 'time-since-last-query-in-seconds'), ['int'])),
                            ('time_since_last_report_in_seconds', (YLeaf(YType.uint32, 'time-since-last-report-in-seconds'), ['int'])),
                            ('router_uptime_in_seconds', (YLeaf(YType.uint32, 'router-uptime-in-seconds'), ['int'])),
                        ])
                        self.interface_name = None
                        self.group_limit = None
                        self.group_count = None
                        self.parent_ifhandle = None
                        self.on_off = None
                        self.time_since_last_query_in_seconds = None
                        self.time_since_last_report_in_seconds = None
                        self.router_uptime_in_seconds = None
                        self._segment_path = lambda: "interface"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/standby/default-context/summary/%s" % self._segment_path()
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Igmp.Standby.DefaultContext.Summary.Interface, ['interface_name', 'group_limit', 'group_count', 'parent_ifhandle', 'on_off', 'time_since_last_query_in_seconds', 'time_since_last_report_in_seconds', 'router_uptime_in_seconds'], name, value)

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Igmp.Standby.DefaultContext.Summary.Interface']['meta_info']

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Igmp.Standby.DefaultContext.Summary']['meta_info']


            class InterfaceStateOns(_Entity_):
                """
                IGMP Interface state on
                
                .. attribute:: interface_state_on
                
                	IGMP Interface
                	**type**\: list of  		 :py:class:`InterfaceStateOn <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.InterfaceStateOns.InterfaceStateOn>`
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Igmp.Standby.DefaultContext.InterfaceStateOns, self).__init__()

                    self.yang_name = "interface-state-ons"
                    self.yang_parent_name = "default-context"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("interface-state-on", ("interface_state_on", Igmp.Standby.DefaultContext.InterfaceStateOns.InterfaceStateOn))])
                    self._leafs = OrderedDict()

                    self.interface_state_on = YList(self)
                    self._segment_path = lambda: "interface-state-ons"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/standby/default-context/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Igmp.Standby.DefaultContext.InterfaceStateOns, [], name, value)


                class InterfaceStateOn(_Entity_):
                    """
                    IGMP Interface
                    
                    .. attribute:: interface_name  (key)
                    
                    	Interface Name
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: address
                    
                    	IP address
                    	**type**\:  :py:class:`Address <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.InterfaceStateOns.InterfaceStateOn.Address>`
                    
                    	**config**\: False
                    
                    .. attribute:: querier_address
                    
                    	Address of the Querier
                    	**type**\:  :py:class:`QuerierAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.InterfaceStateOns.InterfaceStateOn.QuerierAddress>`
                    
                    	**config**\: False
                    
                    .. attribute:: subscriber_address
                    
                    	Address of subscriber
                    	**type**\:  :py:class:`SubscriberAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.InterfaceStateOns.InterfaceStateOn.SubscriberAddress>`
                    
                    	**config**\: False
                    
                    .. attribute:: interface_name_xr
                    
                    	Interface
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: state
                    
                    	Interface state
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: prefix_length
                    
                    	Prefix length
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_interface_up
                    
                    	Is interface up
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_ip_enabled
                    
                    	Is IP enabled
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_router_enabled
                    
                    	Is Router functionality enabled
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: igmp_version
                    
                    	IGMP Router version
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    	**config**\: False
                    
                    .. attribute:: host_version
                    
                    	IGMP Host version
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    	**config**\: False
                    
                    .. attribute:: query_interval
                    
                    	Query Interval value in seconds
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    	**units**\: second
                    
                    .. attribute:: query_timeout
                    
                    	Query Timeout value
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    .. attribute:: query_maximum_response_time
                    
                    	Max Response Timeout value
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    .. attribute:: last_member_query_interval
                    
                    	Last Member Query Interval
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    .. attribute:: group_joins
                    
                    	No. of group joins
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: group_leaves
                    
                    	No. of group leaves
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_querier
                    
                    	Are we querier
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: total_active_groups
                    
                    	Actual number of groups on interface
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: robustness
                    
                    	Robustness Variable value
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: proxy_interface
                    
                    	Proxy interface index
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: querier_uptime
                    
                    	Time since the last querier took over
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    .. attribute:: las_ll_registration_count
                    
                    	LAS reg count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_get_address_count
                    
                    	LAS get addr count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_update_count
                    
                    	LAS Update count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_ll_remove_update_count
                    
                    	LAS LL remove update count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_ll_add_update_count
                    
                    	LAS LL add update count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_null_update_count
                    
                    	LAS Null update count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_unregistration_count
                    
                    	LAS unreg count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_las_request
                    
                    	LAS req
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_las_registered
                    
                    	LAS registered
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: vrf_id
                    
                    	VRF id
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: mte_vrf_id
                    
                    	MTE VRF id
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: location
                    
                    	Location
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: mtu
                    
                    	MTU
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: vrf_state
                    
                    	Vrf State
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_configurationverify
                    
                    	CFG verify
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: configurationvrf_set
                    
                    	CFG vrf set
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: configurationvrf_error
                    
                    	CFG vrf error
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: configuration_mcast_vrf_set
                    
                    	Is mcast set
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: configuration_mcast_vrf_error
                    
                    	Is mcast error
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_im_state_registered
                    
                    	Im state registered
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_subscriber
                    
                    	Subscriber interface
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: subscriber_mode
                    
                    	Subscriber mode
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_identity_present
                    
                    	Subscriber ID or Address available from AAA
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: subscriber_id
                    
                    	ID string of subscriber
                    	**type**\: str
                    
                    	**length:** 0..257
                    
                    	**config**\: False
                    
                    .. attribute:: parent_ifhandle
                    
                    	Parent If Handle
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: time_since_last_query_in_seconds
                    
                    	Time elapsed since last query
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: time_since_last_report_in_seconds
                    
                    	Time elapsed since last report
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: router_uptime_in_seconds
                    
                    	Uptime since router enabled event
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: mte_tuple_count
                    
                    	MTE Tuple count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Igmp.Standby.DefaultContext.InterfaceStateOns.InterfaceStateOn, self).__init__()

                        self.yang_name = "interface-state-on"
                        self.yang_parent_name = "interface-state-ons"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['interface_name']
                        self._child_classes = OrderedDict([("address", ("address", Igmp.Standby.DefaultContext.InterfaceStateOns.InterfaceStateOn.Address)), ("querier-address", ("querier_address", Igmp.Standby.DefaultContext.InterfaceStateOns.InterfaceStateOn.QuerierAddress)), ("subscriber-address", ("subscriber_address", Igmp.Standby.DefaultContext.InterfaceStateOns.InterfaceStateOn.SubscriberAddress))])
                        self._leafs = OrderedDict([
                            ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                            ('interface_name_xr', (YLeaf(YType.str, 'interface-name-xr'), ['str'])),
                            ('state', (YLeaf(YType.uint32, 'state'), ['int'])),
                            ('prefix_length', (YLeaf(YType.uint32, 'prefix-length'), ['int'])),
                            ('is_interface_up', (YLeaf(YType.boolean, 'is-interface-up'), ['bool'])),
                            ('is_ip_enabled', (YLeaf(YType.boolean, 'is-ip-enabled'), ['bool'])),
                            ('is_router_enabled', (YLeaf(YType.boolean, 'is-router-enabled'), ['bool'])),
                            ('igmp_version', (YLeaf(YType.uint8, 'igmp-version'), ['int'])),
                            ('host_version', (YLeaf(YType.uint8, 'host-version'), ['int'])),
                            ('query_interval', (YLeaf(YType.uint16, 'query-interval'), ['int'])),
                            ('query_timeout', (YLeaf(YType.uint16, 'query-timeout'), ['int'])),
                            ('query_maximum_response_time', (YLeaf(YType.uint16, 'query-maximum-response-time'), ['int'])),
                            ('last_member_query_interval', (YLeaf(YType.uint16, 'last-member-query-interval'), ['int'])),
                            ('group_joins', (YLeaf(YType.uint32, 'group-joins'), ['int'])),
                            ('group_leaves', (YLeaf(YType.uint32, 'group-leaves'), ['int'])),
                            ('is_querier', (YLeaf(YType.boolean, 'is-querier'), ['bool'])),
                            ('total_active_groups', (YLeaf(YType.uint32, 'total-active-groups'), ['int'])),
                            ('robustness', (YLeaf(YType.uint32, 'robustness'), ['int'])),
                            ('proxy_interface', (YLeaf(YType.str, 'proxy-interface'), ['str'])),
                            ('querier_uptime', (YLeaf(YType.uint16, 'querier-uptime'), ['int'])),
                            ('las_ll_registration_count', (YLeaf(YType.uint32, 'las-ll-registration-count'), ['int'])),
                            ('las_get_address_count', (YLeaf(YType.uint32, 'las-get-address-count'), ['int'])),
                            ('las_update_count', (YLeaf(YType.uint32, 'las-update-count'), ['int'])),
                            ('las_ll_remove_update_count', (YLeaf(YType.uint32, 'las-ll-remove-update-count'), ['int'])),
                            ('las_ll_add_update_count', (YLeaf(YType.uint32, 'las-ll-add-update-count'), ['int'])),
                            ('las_null_update_count', (YLeaf(YType.uint32, 'las-null-update-count'), ['int'])),
                            ('las_unregistration_count', (YLeaf(YType.uint32, 'las-unregistration-count'), ['int'])),
                            ('is_las_request', (YLeaf(YType.boolean, 'is-las-request'), ['bool'])),
                            ('is_las_registered', (YLeaf(YType.boolean, 'is-las-registered'), ['bool'])),
                            ('vrf_id', (YLeaf(YType.uint32, 'vrf-id'), ['int'])),
                            ('mte_vrf_id', (YLeaf(YType.uint32, 'mte-vrf-id'), ['int'])),
                            ('location', (YLeaf(YType.uint32, 'location'), ['int'])),
                            ('mtu', (YLeaf(YType.uint32, 'mtu'), ['int'])),
                            ('vrf_state', (YLeaf(YType.uint32, 'vrf-state'), ['int'])),
                            ('is_configurationverify', (YLeaf(YType.boolean, 'is-configurationverify'), ['bool'])),
                            ('configurationvrf_set', (YLeaf(YType.boolean, 'configurationvrf-set'), ['bool'])),
                            ('configurationvrf_error', (YLeaf(YType.boolean, 'configurationvrf-error'), ['bool'])),
                            ('configuration_mcast_vrf_set', (YLeaf(YType.boolean, 'configuration-mcast-vrf-set'), ['bool'])),
                            ('configuration_mcast_vrf_error', (YLeaf(YType.boolean, 'configuration-mcast-vrf-error'), ['bool'])),
                            ('is_im_state_registered', (YLeaf(YType.boolean, 'is-im-state-registered'), ['bool'])),
                            ('is_subscriber', (YLeaf(YType.boolean, 'is-subscriber'), ['bool'])),
                            ('subscriber_mode', (YLeaf(YType.uint32, 'subscriber-mode'), ['int'])),
                            ('is_identity_present', (YLeaf(YType.boolean, 'is-identity-present'), ['bool'])),
                            ('subscriber_id', (YLeaf(YType.str, 'subscriber-id'), ['str'])),
                            ('parent_ifhandle', (YLeaf(YType.str, 'parent-ifhandle'), ['str'])),
                            ('time_since_last_query_in_seconds', (YLeaf(YType.uint32, 'time-since-last-query-in-seconds'), ['int'])),
                            ('time_since_last_report_in_seconds', (YLeaf(YType.uint32, 'time-since-last-report-in-seconds'), ['int'])),
                            ('router_uptime_in_seconds', (YLeaf(YType.uint32, 'router-uptime-in-seconds'), ['int'])),
                            ('mte_tuple_count', (YLeaf(YType.uint32, 'mte-tuple-count'), ['int'])),
                        ])
                        self.interface_name = None
                        self.interface_name_xr = None
                        self.state = None
                        self.prefix_length = None
                        self.is_interface_up = None
                        self.is_ip_enabled = None
                        self.is_router_enabled = None
                        self.igmp_version = None
                        self.host_version = None
                        self.query_interval = None
                        self.query_timeout = None
                        self.query_maximum_response_time = None
                        self.last_member_query_interval = None
                        self.group_joins = None
                        self.group_leaves = None
                        self.is_querier = None
                        self.total_active_groups = None
                        self.robustness = None
                        self.proxy_interface = None
                        self.querier_uptime = None
                        self.las_ll_registration_count = None
                        self.las_get_address_count = None
                        self.las_update_count = None
                        self.las_ll_remove_update_count = None
                        self.las_ll_add_update_count = None
                        self.las_null_update_count = None
                        self.las_unregistration_count = None
                        self.is_las_request = None
                        self.is_las_registered = None
                        self.vrf_id = None
                        self.mte_vrf_id = None
                        self.location = None
                        self.mtu = None
                        self.vrf_state = None
                        self.is_configurationverify = None
                        self.configurationvrf_set = None
                        self.configurationvrf_error = None
                        self.configuration_mcast_vrf_set = None
                        self.configuration_mcast_vrf_error = None
                        self.is_im_state_registered = None
                        self.is_subscriber = None
                        self.subscriber_mode = None
                        self.is_identity_present = None
                        self.subscriber_id = None
                        self.parent_ifhandle = None
                        self.time_since_last_query_in_seconds = None
                        self.time_since_last_report_in_seconds = None
                        self.router_uptime_in_seconds = None
                        self.mte_tuple_count = None

                        self.address = Igmp.Standby.DefaultContext.InterfaceStateOns.InterfaceStateOn.Address()
                        self.address.parent = self
                        self._children_name_map["address"] = "address"

                        self.querier_address = Igmp.Standby.DefaultContext.InterfaceStateOns.InterfaceStateOn.QuerierAddress()
                        self.querier_address.parent = self
                        self._children_name_map["querier_address"] = "querier-address"

                        self.subscriber_address = Igmp.Standby.DefaultContext.InterfaceStateOns.InterfaceStateOn.SubscriberAddress()
                        self.subscriber_address.parent = self
                        self._children_name_map["subscriber_address"] = "subscriber-address"
                        self._segment_path = lambda: "interface-state-on" + "[interface-name='" + str(self.interface_name) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/standby/default-context/interface-state-ons/%s" % self._segment_path()
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Igmp.Standby.DefaultContext.InterfaceStateOns.InterfaceStateOn, ['interface_name', 'interface_name_xr', 'state', 'prefix_length', 'is_interface_up', 'is_ip_enabled', 'is_router_enabled', 'igmp_version', 'host_version', 'query_interval', 'query_timeout', 'query_maximum_response_time', 'last_member_query_interval', 'group_joins', 'group_leaves', 'is_querier', 'total_active_groups', 'robustness', 'proxy_interface', 'querier_uptime', 'las_ll_registration_count', 'las_get_address_count', 'las_update_count', 'las_ll_remove_update_count', 'las_ll_add_update_count', 'las_null_update_count', 'las_unregistration_count', 'is_las_request', 'is_las_registered', 'vrf_id', 'mte_vrf_id', 'location', 'mtu', 'vrf_state', 'is_configurationverify', 'configurationvrf_set', 'configurationvrf_error', 'configuration_mcast_vrf_set', 'configuration_mcast_vrf_error', 'is_im_state_registered', 'is_subscriber', 'subscriber_mode', 'is_identity_present', 'subscriber_id', 'parent_ifhandle', 'time_since_last_query_in_seconds', 'time_since_last_report_in_seconds', 'router_uptime_in_seconds', 'mte_tuple_count'], name, value)


                    class Address(_Entity_):
                        """
                        IP address
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Standby.DefaultContext.InterfaceStateOns.InterfaceStateOn.Address, self).__init__()

                            self.yang_name = "address"
                            self.yang_parent_name = "interface-state-on"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "address"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Standby.DefaultContext.InterfaceStateOns.InterfaceStateOn.Address, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Standby.DefaultContext.InterfaceStateOns.InterfaceStateOn.Address']['meta_info']


                    class QuerierAddress(_Entity_):
                        """
                        Address of the Querier
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Standby.DefaultContext.InterfaceStateOns.InterfaceStateOn.QuerierAddress, self).__init__()

                            self.yang_name = "querier-address"
                            self.yang_parent_name = "interface-state-on"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "querier-address"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Standby.DefaultContext.InterfaceStateOns.InterfaceStateOn.QuerierAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Standby.DefaultContext.InterfaceStateOns.InterfaceStateOn.QuerierAddress']['meta_info']


                    class SubscriberAddress(_Entity_):
                        """
                        Address of subscriber
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Standby.DefaultContext.InterfaceStateOns.InterfaceStateOn.SubscriberAddress, self).__init__()

                            self.yang_name = "subscriber-address"
                            self.yang_parent_name = "interface-state-on"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "subscriber-address"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Standby.DefaultContext.InterfaceStateOns.InterfaceStateOn.SubscriberAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Standby.DefaultContext.InterfaceStateOns.InterfaceStateOn.SubscriberAddress']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Igmp.Standby.DefaultContext.InterfaceStateOns.InterfaceStateOn']['meta_info']

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Igmp.Standby.DefaultContext.InterfaceStateOns']['meta_info']


            class DetailGroups(_Entity_):
                """
                IGMP Detail Group Database
                
                .. attribute:: detail_group
                
                	IGMP Detail Group Entry Information
                	**type**\: list of  		 :py:class:`DetailGroup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.DetailGroups.DetailGroup>`
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Igmp.Standby.DefaultContext.DetailGroups, self).__init__()

                    self.yang_name = "detail-groups"
                    self.yang_parent_name = "default-context"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("detail-group", ("detail_group", Igmp.Standby.DefaultContext.DetailGroups.DetailGroup))])
                    self._leafs = OrderedDict()

                    self.detail_group = YList(self)
                    self._segment_path = lambda: "detail-groups"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/standby/default-context/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Igmp.Standby.DefaultContext.DetailGroups, [], name, value)


                class DetailGroup(_Entity_):
                    """
                    IGMP Detail Group Entry Information
                    
                    .. attribute:: group_address
                    
                    	Group Address
                    	**type**\: union of the below types:
                    
                    		**type**\: str
                    
                    			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    		**type**\: str
                    
                    			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    	**config**\: False
                    
                    .. attribute:: interface_name
                    
                    	Interface Name
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: source_address
                    
                    	Source/Host Address
                    	**type**\: union of the below types:
                    
                    		**type**\: str
                    
                    			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    		**type**\: str
                    
                    			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    	**config**\: False
                    
                    .. attribute:: group_info
                    
                    	Basic Group information
                    	**type**\:  :py:class:`GroupInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.DetailGroups.DetailGroup.GroupInfo>`
                    
                    	**config**\: False
                    
                    .. attribute:: is_router_exclude_mode
                    
                    	Group router filter mode
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_host_exclude_mode
                    
                    	Group host filter mode
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: source
                    
                    	List of sources
                    	**type**\: list of  		 :py:class:`Source <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.DetailGroups.DetailGroup.Source>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Igmp.Standby.DefaultContext.DetailGroups.DetailGroup, self).__init__()

                        self.yang_name = "detail-group"
                        self.yang_parent_name = "detail-groups"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("group-info", ("group_info", Igmp.Standby.DefaultContext.DetailGroups.DetailGroup.GroupInfo)), ("source", ("source", Igmp.Standby.DefaultContext.DetailGroups.DetailGroup.Source))])
                        self._leafs = OrderedDict([
                            ('group_address', (YLeaf(YType.str, 'group-address'), ['str','str'])),
                            ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                            ('source_address', (YLeaf(YType.str, 'source-address'), ['str','str'])),
                            ('is_router_exclude_mode', (YLeaf(YType.boolean, 'is-router-exclude-mode'), ['bool'])),
                            ('is_host_exclude_mode', (YLeaf(YType.boolean, 'is-host-exclude-mode'), ['bool'])),
                        ])
                        self.group_address = None
                        self.interface_name = None
                        self.source_address = None
                        self.is_router_exclude_mode = None
                        self.is_host_exclude_mode = None

                        self.group_info = Igmp.Standby.DefaultContext.DetailGroups.DetailGroup.GroupInfo()
                        self.group_info.parent = self
                        self._children_name_map["group_info"] = "group-info"

                        self.source = YList(self)
                        self._segment_path = lambda: "detail-group"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/standby/default-context/detail-groups/%s" % self._segment_path()
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Igmp.Standby.DefaultContext.DetailGroups.DetailGroup, ['group_address', 'interface_name', 'source_address', 'is_router_exclude_mode', 'is_host_exclude_mode'], name, value)


                    class GroupInfo(_Entity_):
                        """
                        Basic Group information
                        
                        .. attribute:: group_address_xr
                        
                        	Group Address
                        	**type**\:  :py:class:`GroupAddressXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.DetailGroups.DetailGroup.GroupInfo.GroupAddressXr>`
                        
                        	**config**\: False
                        
                        .. attribute:: last_reporter
                        
                        	Last reporter address
                        	**type**\:  :py:class:`LastReporter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.DetailGroups.DetailGroup.GroupInfo.LastReporter>`
                        
                        	**config**\: False
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\:  :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.DetailGroups.DetailGroup.GroupInfo.SourceAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: interface_name_xr
                        
                        	Interface
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: uptime
                        
                        	Uptime in seconds
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        	**config**\: False
                        
                        	**units**\: second
                        
                        .. attribute:: expiration_time
                        
                        	Expiration time in seconds
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        	**config**\: False
                        
                        	**units**\: second
                        
                        .. attribute:: explicit_tracking_enabled
                        
                        	Is explicit tracking enabled
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_self_join
                        
                        	If local system is member of this group on this interface
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: row_status
                        
                        	interface on or off for the group
                        	**type**\: str
                        
                        	**length:** 0..16
                        
                        	**config**\: False
                        
                        .. attribute:: is_low_memory
                        
                        	Node is running low on memory
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: router_filter_mode
                        
                        	Filter mode
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        	**config**\: False
                        
                        .. attribute:: older_host_version1_timer
                        
                        	IGMP Hostversion1timer
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: older_host_version2_timer
                        
                        	IGMP Hostversion2timer
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_added
                        
                        	Joined
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_suppressed
                        
                        	Suppressed
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Standby.DefaultContext.DetailGroups.DetailGroup.GroupInfo, self).__init__()

                            self.yang_name = "group-info"
                            self.yang_parent_name = "detail-group"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("group-address-xr", ("group_address_xr", Igmp.Standby.DefaultContext.DetailGroups.DetailGroup.GroupInfo.GroupAddressXr)), ("last-reporter", ("last_reporter", Igmp.Standby.DefaultContext.DetailGroups.DetailGroup.GroupInfo.LastReporter)), ("source-address", ("source_address", Igmp.Standby.DefaultContext.DetailGroups.DetailGroup.GroupInfo.SourceAddress))])
                            self._leafs = OrderedDict([
                                ('interface_name_xr', (YLeaf(YType.str, 'interface-name-xr'), ['str'])),
                                ('uptime', (YLeaf(YType.uint64, 'uptime'), ['int'])),
                                ('expiration_time', (YLeaf(YType.int32, 'expiration-time'), ['int'])),
                                ('explicit_tracking_enabled', (YLeaf(YType.boolean, 'explicit-tracking-enabled'), ['bool'])),
                                ('is_self_join', (YLeaf(YType.boolean, 'is-self-join'), ['bool'])),
                                ('row_status', (YLeaf(YType.str, 'row-status'), ['str'])),
                                ('is_low_memory', (YLeaf(YType.boolean, 'is-low-memory'), ['bool'])),
                                ('router_filter_mode', (YLeaf(YType.uint8, 'router-filter-mode'), ['int'])),
                                ('older_host_version1_timer', (YLeaf(YType.uint32, 'older-host-version1-timer'), ['int'])),
                                ('older_host_version2_timer', (YLeaf(YType.uint32, 'older-host-version2-timer'), ['int'])),
                                ('is_added', (YLeaf(YType.boolean, 'is-added'), ['bool'])),
                                ('is_suppressed', (YLeaf(YType.boolean, 'is-suppressed'), ['bool'])),
                            ])
                            self.interface_name_xr = None
                            self.uptime = None
                            self.expiration_time = None
                            self.explicit_tracking_enabled = None
                            self.is_self_join = None
                            self.row_status = None
                            self.is_low_memory = None
                            self.router_filter_mode = None
                            self.older_host_version1_timer = None
                            self.older_host_version2_timer = None
                            self.is_added = None
                            self.is_suppressed = None

                            self.group_address_xr = Igmp.Standby.DefaultContext.DetailGroups.DetailGroup.GroupInfo.GroupAddressXr()
                            self.group_address_xr.parent = self
                            self._children_name_map["group_address_xr"] = "group-address-xr"

                            self.last_reporter = Igmp.Standby.DefaultContext.DetailGroups.DetailGroup.GroupInfo.LastReporter()
                            self.last_reporter.parent = self
                            self._children_name_map["last_reporter"] = "last-reporter"

                            self.source_address = Igmp.Standby.DefaultContext.DetailGroups.DetailGroup.GroupInfo.SourceAddress()
                            self.source_address.parent = self
                            self._children_name_map["source_address"] = "source-address"
                            self._segment_path = lambda: "group-info"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/standby/default-context/detail-groups/detail-group/%s" % self._segment_path()
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Standby.DefaultContext.DetailGroups.DetailGroup.GroupInfo, ['interface_name_xr', 'uptime', 'expiration_time', 'explicit_tracking_enabled', 'is_self_join', 'row_status', 'is_low_memory', 'router_filter_mode', 'older_host_version1_timer', 'older_host_version2_timer', 'is_added', 'is_suppressed'], name, value)


                        class GroupAddressXr(_Entity_):
                            """
                            Group Address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Standby.DefaultContext.DetailGroups.DetailGroup.GroupInfo.GroupAddressXr, self).__init__()

                                self.yang_name = "group-address-xr"
                                self.yang_parent_name = "group-info"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "group-address-xr"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/standby/default-context/detail-groups/detail-group/group-info/%s" % self._segment_path()
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Standby.DefaultContext.DetailGroups.DetailGroup.GroupInfo.GroupAddressXr, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Standby.DefaultContext.DetailGroups.DetailGroup.GroupInfo.GroupAddressXr']['meta_info']


                        class LastReporter(_Entity_):
                            """
                            Last reporter address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Standby.DefaultContext.DetailGroups.DetailGroup.GroupInfo.LastReporter, self).__init__()

                                self.yang_name = "last-reporter"
                                self.yang_parent_name = "group-info"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "last-reporter"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/standby/default-context/detail-groups/detail-group/group-info/%s" % self._segment_path()
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Standby.DefaultContext.DetailGroups.DetailGroup.GroupInfo.LastReporter, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Standby.DefaultContext.DetailGroups.DetailGroup.GroupInfo.LastReporter']['meta_info']


                        class SourceAddress(_Entity_):
                            """
                            Source Address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Standby.DefaultContext.DetailGroups.DetailGroup.GroupInfo.SourceAddress, self).__init__()

                                self.yang_name = "source-address"
                                self.yang_parent_name = "group-info"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "source-address"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/standby/default-context/detail-groups/detail-group/group-info/%s" % self._segment_path()
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Standby.DefaultContext.DetailGroups.DetailGroup.GroupInfo.SourceAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Standby.DefaultContext.DetailGroups.DetailGroup.GroupInfo.SourceAddress']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Standby.DefaultContext.DetailGroups.DetailGroup.GroupInfo']['meta_info']


                    class Source(_Entity_):
                        """
                        List of sources
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\:  :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.DetailGroups.DetailGroup.Source.SourceAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: uptime
                        
                        	Uptime in seconds
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        	**config**\: False
                        
                        	**units**\: second
                        
                        .. attribute:: expiration_time
                        
                        	Expiration time in seconds
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        	**config**\: False
                        
                        	**units**\: second
                        
                        .. attribute:: is_local
                        
                        	Is this a local source
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_remote
                        
                        	Is this a remote source
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_forward
                        
                        	Should we forward on this entry
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_we_report
                        
                        	Should we report the source
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: flags
                        
                        	Source flags
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        	**config**\: False
                        
                        .. attribute:: is_added
                        
                        	Joined
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Standby.DefaultContext.DetailGroups.DetailGroup.Source, self).__init__()

                            self.yang_name = "source"
                            self.yang_parent_name = "detail-group"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("source-address", ("source_address", Igmp.Standby.DefaultContext.DetailGroups.DetailGroup.Source.SourceAddress))])
                            self._leafs = OrderedDict([
                                ('uptime', (YLeaf(YType.uint64, 'uptime'), ['int'])),
                                ('expiration_time', (YLeaf(YType.int32, 'expiration-time'), ['int'])),
                                ('is_local', (YLeaf(YType.boolean, 'is-local'), ['bool'])),
                                ('is_remote', (YLeaf(YType.boolean, 'is-remote'), ['bool'])),
                                ('is_forward', (YLeaf(YType.boolean, 'is-forward'), ['bool'])),
                                ('is_we_report', (YLeaf(YType.boolean, 'is-we-report'), ['bool'])),
                                ('flags', (YLeaf(YType.int32, 'flags'), ['int'])),
                                ('is_added', (YLeaf(YType.boolean, 'is-added'), ['bool'])),
                            ])
                            self.uptime = None
                            self.expiration_time = None
                            self.is_local = None
                            self.is_remote = None
                            self.is_forward = None
                            self.is_we_report = None
                            self.flags = None
                            self.is_added = None

                            self.source_address = Igmp.Standby.DefaultContext.DetailGroups.DetailGroup.Source.SourceAddress()
                            self.source_address.parent = self
                            self._children_name_map["source_address"] = "source-address"
                            self._segment_path = lambda: "source"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/standby/default-context/detail-groups/detail-group/%s" % self._segment_path()
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Standby.DefaultContext.DetailGroups.DetailGroup.Source, ['uptime', 'expiration_time', 'is_local', 'is_remote', 'is_forward', 'is_we_report', 'flags', 'is_added'], name, value)


                        class SourceAddress(_Entity_):
                            """
                            Source Address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Standby.DefaultContext.DetailGroups.DetailGroup.Source.SourceAddress, self).__init__()

                                self.yang_name = "source-address"
                                self.yang_parent_name = "source"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "source-address"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/standby/default-context/detail-groups/detail-group/source/%s" % self._segment_path()
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Standby.DefaultContext.DetailGroups.DetailGroup.Source.SourceAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Standby.DefaultContext.DetailGroups.DetailGroup.Source.SourceAddress']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Standby.DefaultContext.DetailGroups.DetailGroup.Source']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Igmp.Standby.DefaultContext.DetailGroups.DetailGroup']['meta_info']

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Igmp.Standby.DefaultContext.DetailGroups']['meta_info']


            class NonActiveGroups(_Entity_):
                """
                IGMP Non\-Active Groups Information
                
                .. attribute:: non_active_groups
                
                	List of non\-active groups
                	**type**\: list of  		 :py:class:`NonActiveGroups_ <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.NonActiveGroups.NonActiveGroups_>`
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Igmp.Standby.DefaultContext.NonActiveGroups, self).__init__()

                    self.yang_name = "non-active-groups"
                    self.yang_parent_name = "default-context"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("non-active-groups", ("non_active_groups", Igmp.Standby.DefaultContext.NonActiveGroups.NonActiveGroups_))])
                    self._leafs = OrderedDict()

                    self.non_active_groups = YList(self)
                    self._segment_path = lambda: "non-active-groups"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/standby/default-context/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Igmp.Standby.DefaultContext.NonActiveGroups, [], name, value)


                class NonActiveGroups_(_Entity_):
                    """
                    List of non\-active groups
                    
                    .. attribute:: group_address
                    
                    	Group Address
                    	**type**\:  :py:class:`GroupAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.NonActiveGroups.NonActiveGroups_.GroupAddress>`
                    
                    	**config**\: False
                    
                    .. attribute:: source_address
                    
                    	Source Address
                    	**type**\:  :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.NonActiveGroups.NonActiveGroups_.SourceAddress>`
                    
                    	**config**\: False
                    
                    .. attribute:: interface
                    
                    	Interface Name
                    	**type**\: str
                    
                    	**length:** 0..65
                    
                    	**config**\: False
                    
                    .. attribute:: reason_for_non_activity
                    
                    	Reason for group join not being processed
                    	**type**\: str
                    
                    	**length:** 0..257
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Igmp.Standby.DefaultContext.NonActiveGroups.NonActiveGroups_, self).__init__()

                        self.yang_name = "non-active-groups"
                        self.yang_parent_name = "non-active-groups"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("group-address", ("group_address", Igmp.Standby.DefaultContext.NonActiveGroups.NonActiveGroups_.GroupAddress)), ("source-address", ("source_address", Igmp.Standby.DefaultContext.NonActiveGroups.NonActiveGroups_.SourceAddress))])
                        self._leafs = OrderedDict([
                            ('interface', (YLeaf(YType.str, 'interface'), ['str'])),
                            ('reason_for_non_activity', (YLeaf(YType.str, 'reason-for-non-activity'), ['str'])),
                        ])
                        self.interface = None
                        self.reason_for_non_activity = None

                        self.group_address = Igmp.Standby.DefaultContext.NonActiveGroups.NonActiveGroups_.GroupAddress()
                        self.group_address.parent = self
                        self._children_name_map["group_address"] = "group-address"

                        self.source_address = Igmp.Standby.DefaultContext.NonActiveGroups.NonActiveGroups_.SourceAddress()
                        self.source_address.parent = self
                        self._children_name_map["source_address"] = "source-address"
                        self._segment_path = lambda: "non-active-groups"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/standby/default-context/non-active-groups/%s" % self._segment_path()
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Igmp.Standby.DefaultContext.NonActiveGroups.NonActiveGroups_, ['interface', 'reason_for_non_activity'], name, value)


                    class GroupAddress(_Entity_):
                        """
                        Group Address
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Standby.DefaultContext.NonActiveGroups.NonActiveGroups_.GroupAddress, self).__init__()

                            self.yang_name = "group-address"
                            self.yang_parent_name = "non-active-groups"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "group-address"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/standby/default-context/non-active-groups/non-active-groups/%s" % self._segment_path()
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Standby.DefaultContext.NonActiveGroups.NonActiveGroups_.GroupAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Standby.DefaultContext.NonActiveGroups.NonActiveGroups_.GroupAddress']['meta_info']


                    class SourceAddress(_Entity_):
                        """
                        Source Address
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Standby.DefaultContext.NonActiveGroups.NonActiveGroups_.SourceAddress, self).__init__()

                            self.yang_name = "source-address"
                            self.yang_parent_name = "non-active-groups"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "source-address"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/standby/default-context/non-active-groups/non-active-groups/%s" % self._segment_path()
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Standby.DefaultContext.NonActiveGroups.NonActiveGroups_.SourceAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Standby.DefaultContext.NonActiveGroups.NonActiveGroups_.SourceAddress']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Igmp.Standby.DefaultContext.NonActiveGroups.NonActiveGroups_']['meta_info']

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Igmp.Standby.DefaultContext.NonActiveGroups']['meta_info']


            class SsmMaps(_Entity_):
                """
                SSM Map Table
                
                .. attribute:: ssm_map
                
                	SSM Map information
                	**type**\: list of  		 :py:class:`SsmMap <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.SsmMaps.SsmMap>`
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Igmp.Standby.DefaultContext.SsmMaps, self).__init__()

                    self.yang_name = "ssm-maps"
                    self.yang_parent_name = "default-context"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("ssm-map", ("ssm_map", Igmp.Standby.DefaultContext.SsmMaps.SsmMap))])
                    self._leafs = OrderedDict()

                    self.ssm_map = YList(self)
                    self._segment_path = lambda: "ssm-maps"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/standby/default-context/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Igmp.Standby.DefaultContext.SsmMaps, [], name, value)


                class SsmMap(_Entity_):
                    """
                    SSM Map information
                    
                    .. attribute:: ssm_map_type
                    
                    	SSM Map Type
                    	**type**\:  :py:class:`IgmpssmMap <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpssmMap>`
                    
                    	**config**\: False
                    
                    .. attribute:: group_address
                    
                    	Group address
                    	**type**\: union of the below types:
                    
                    		**type**\: str
                    
                    			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    		**type**\: str
                    
                    			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    	**config**\: False
                    
                    .. attribute:: group_address_xr
                    
                    	Group Address
                    	**type**\:  :py:class:`GroupAddressXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.SsmMaps.SsmMap.GroupAddressXr>`
                    
                    	**config**\: False
                    
                    .. attribute:: map_type
                    
                    	Map Type of group
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: source_counts
                    
                    	Count of Sources
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Igmp.Standby.DefaultContext.SsmMaps.SsmMap, self).__init__()

                        self.yang_name = "ssm-map"
                        self.yang_parent_name = "ssm-maps"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("group-address-xr", ("group_address_xr", Igmp.Standby.DefaultContext.SsmMaps.SsmMap.GroupAddressXr))])
                        self._leafs = OrderedDict([
                            ('ssm_map_type', (YLeaf(YType.enumeration, 'ssm-map-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpssmMap', '')])),
                            ('group_address', (YLeaf(YType.str, 'group-address'), ['str','str'])),
                            ('map_type', (YLeaf(YType.uint32, 'map-type'), ['int'])),
                            ('source_counts', (YLeaf(YType.uint32, 'source-counts'), ['int'])),
                        ])
                        self.ssm_map_type = None
                        self.group_address = None
                        self.map_type = None
                        self.source_counts = None

                        self.group_address_xr = Igmp.Standby.DefaultContext.SsmMaps.SsmMap.GroupAddressXr()
                        self.group_address_xr.parent = self
                        self._children_name_map["group_address_xr"] = "group-address-xr"
                        self._segment_path = lambda: "ssm-map"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/standby/default-context/ssm-maps/%s" % self._segment_path()
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Igmp.Standby.DefaultContext.SsmMaps.SsmMap, ['ssm_map_type', 'group_address', 'map_type', 'source_counts'], name, value)


                    class GroupAddressXr(_Entity_):
                        """
                        Group Address
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Standby.DefaultContext.SsmMaps.SsmMap.GroupAddressXr, self).__init__()

                            self.yang_name = "group-address-xr"
                            self.yang_parent_name = "ssm-map"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "group-address-xr"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/standby/default-context/ssm-maps/ssm-map/%s" % self._segment_path()
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Standby.DefaultContext.SsmMaps.SsmMap.GroupAddressXr, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Standby.DefaultContext.SsmMaps.SsmMap.GroupAddressXr']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Igmp.Standby.DefaultContext.SsmMaps.SsmMap']['meta_info']

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Igmp.Standby.DefaultContext.SsmMaps']['meta_info']


            class ExplicitGroups(_Entity_):
                """
                IGMP Explicit Group Database
                
                .. attribute:: explicit_group
                
                	IGMP Explicit Group Entry Information
                	**type**\: list of  		 :py:class:`ExplicitGroup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.ExplicitGroups.ExplicitGroup>`
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Igmp.Standby.DefaultContext.ExplicitGroups, self).__init__()

                    self.yang_name = "explicit-groups"
                    self.yang_parent_name = "default-context"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("explicit-group", ("explicit_group", Igmp.Standby.DefaultContext.ExplicitGroups.ExplicitGroup))])
                    self._leafs = OrderedDict()

                    self.explicit_group = YList(self)
                    self._segment_path = lambda: "explicit-groups"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/standby/default-context/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Igmp.Standby.DefaultContext.ExplicitGroups, [], name, value)


                class ExplicitGroup(_Entity_):
                    """
                    IGMP Explicit Group Entry Information
                    
                    .. attribute:: group_address
                    
                    	Group Address
                    	**type**\: union of the below types:
                    
                    		**type**\: str
                    
                    			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    		**type**\: str
                    
                    			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    	**config**\: False
                    
                    .. attribute:: interface_name
                    
                    	Interface Name
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: source_address
                    
                    	Source/Host Address
                    	**type**\: union of the below types:
                    
                    		**type**\: str
                    
                    			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    		**type**\: str
                    
                    			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    	**config**\: False
                    
                    .. attribute:: group_info
                    
                    	Basic Group information
                    	**type**\:  :py:class:`GroupInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo>`
                    
                    	**config**\: False
                    
                    .. attribute:: include_hosts
                    
                    	No. of hosts who are included
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: exclude_hosts
                    
                    	No. of hosts who are excluded
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: host
                    
                    	List of hosts
                    	**type**\: list of  		 :py:class:`Host <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.Host>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Igmp.Standby.DefaultContext.ExplicitGroups.ExplicitGroup, self).__init__()

                        self.yang_name = "explicit-group"
                        self.yang_parent_name = "explicit-groups"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("group-info", ("group_info", Igmp.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo)), ("host", ("host", Igmp.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.Host))])
                        self._leafs = OrderedDict([
                            ('group_address', (YLeaf(YType.str, 'group-address'), ['str','str'])),
                            ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                            ('source_address', (YLeaf(YType.str, 'source-address'), ['str','str'])),
                            ('include_hosts', (YLeaf(YType.uint32, 'include-hosts'), ['int'])),
                            ('exclude_hosts', (YLeaf(YType.uint32, 'exclude-hosts'), ['int'])),
                        ])
                        self.group_address = None
                        self.interface_name = None
                        self.source_address = None
                        self.include_hosts = None
                        self.exclude_hosts = None

                        self.group_info = Igmp.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo()
                        self.group_info.parent = self
                        self._children_name_map["group_info"] = "group-info"

                        self.host = YList(self)
                        self._segment_path = lambda: "explicit-group"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/standby/default-context/explicit-groups/%s" % self._segment_path()
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Igmp.Standby.DefaultContext.ExplicitGroups.ExplicitGroup, ['group_address', 'interface_name', 'source_address', 'include_hosts', 'exclude_hosts'], name, value)


                    class GroupInfo(_Entity_):
                        """
                        Basic Group information
                        
                        .. attribute:: group_address_xr
                        
                        	Group Address
                        	**type**\:  :py:class:`GroupAddressXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.GroupAddressXr>`
                        
                        	**config**\: False
                        
                        .. attribute:: last_reporter
                        
                        	Last reporter address
                        	**type**\:  :py:class:`LastReporter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.LastReporter>`
                        
                        	**config**\: False
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\:  :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.SourceAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: interface_name_xr
                        
                        	Interface
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: uptime
                        
                        	Uptime in seconds
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        	**config**\: False
                        
                        	**units**\: second
                        
                        .. attribute:: expiration_time
                        
                        	Expiration time in seconds
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        	**config**\: False
                        
                        	**units**\: second
                        
                        .. attribute:: explicit_tracking_enabled
                        
                        	Is explicit tracking enabled
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_self_join
                        
                        	If local system is member of this group on this interface
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: row_status
                        
                        	interface on or off for the group
                        	**type**\: str
                        
                        	**length:** 0..16
                        
                        	**config**\: False
                        
                        .. attribute:: is_low_memory
                        
                        	Node is running low on memory
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: router_filter_mode
                        
                        	Filter mode
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        	**config**\: False
                        
                        .. attribute:: older_host_version1_timer
                        
                        	IGMP Hostversion1timer
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: older_host_version2_timer
                        
                        	IGMP Hostversion2timer
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_added
                        
                        	Joined
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_suppressed
                        
                        	Suppressed
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo, self).__init__()

                            self.yang_name = "group-info"
                            self.yang_parent_name = "explicit-group"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("group-address-xr", ("group_address_xr", Igmp.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.GroupAddressXr)), ("last-reporter", ("last_reporter", Igmp.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.LastReporter)), ("source-address", ("source_address", Igmp.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.SourceAddress))])
                            self._leafs = OrderedDict([
                                ('interface_name_xr', (YLeaf(YType.str, 'interface-name-xr'), ['str'])),
                                ('uptime', (YLeaf(YType.uint64, 'uptime'), ['int'])),
                                ('expiration_time', (YLeaf(YType.int32, 'expiration-time'), ['int'])),
                                ('explicit_tracking_enabled', (YLeaf(YType.boolean, 'explicit-tracking-enabled'), ['bool'])),
                                ('is_self_join', (YLeaf(YType.boolean, 'is-self-join'), ['bool'])),
                                ('row_status', (YLeaf(YType.str, 'row-status'), ['str'])),
                                ('is_low_memory', (YLeaf(YType.boolean, 'is-low-memory'), ['bool'])),
                                ('router_filter_mode', (YLeaf(YType.uint8, 'router-filter-mode'), ['int'])),
                                ('older_host_version1_timer', (YLeaf(YType.uint32, 'older-host-version1-timer'), ['int'])),
                                ('older_host_version2_timer', (YLeaf(YType.uint32, 'older-host-version2-timer'), ['int'])),
                                ('is_added', (YLeaf(YType.boolean, 'is-added'), ['bool'])),
                                ('is_suppressed', (YLeaf(YType.boolean, 'is-suppressed'), ['bool'])),
                            ])
                            self.interface_name_xr = None
                            self.uptime = None
                            self.expiration_time = None
                            self.explicit_tracking_enabled = None
                            self.is_self_join = None
                            self.row_status = None
                            self.is_low_memory = None
                            self.router_filter_mode = None
                            self.older_host_version1_timer = None
                            self.older_host_version2_timer = None
                            self.is_added = None
                            self.is_suppressed = None

                            self.group_address_xr = Igmp.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.GroupAddressXr()
                            self.group_address_xr.parent = self
                            self._children_name_map["group_address_xr"] = "group-address-xr"

                            self.last_reporter = Igmp.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.LastReporter()
                            self.last_reporter.parent = self
                            self._children_name_map["last_reporter"] = "last-reporter"

                            self.source_address = Igmp.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.SourceAddress()
                            self.source_address.parent = self
                            self._children_name_map["source_address"] = "source-address"
                            self._segment_path = lambda: "group-info"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/standby/default-context/explicit-groups/explicit-group/%s" % self._segment_path()
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo, ['interface_name_xr', 'uptime', 'expiration_time', 'explicit_tracking_enabled', 'is_self_join', 'row_status', 'is_low_memory', 'router_filter_mode', 'older_host_version1_timer', 'older_host_version2_timer', 'is_added', 'is_suppressed'], name, value)


                        class GroupAddressXr(_Entity_):
                            """
                            Group Address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.GroupAddressXr, self).__init__()

                                self.yang_name = "group-address-xr"
                                self.yang_parent_name = "group-info"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "group-address-xr"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/standby/default-context/explicit-groups/explicit-group/group-info/%s" % self._segment_path()
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.GroupAddressXr, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.GroupAddressXr']['meta_info']


                        class LastReporter(_Entity_):
                            """
                            Last reporter address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.LastReporter, self).__init__()

                                self.yang_name = "last-reporter"
                                self.yang_parent_name = "group-info"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "last-reporter"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/standby/default-context/explicit-groups/explicit-group/group-info/%s" % self._segment_path()
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.LastReporter, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.LastReporter']['meta_info']


                        class SourceAddress(_Entity_):
                            """
                            Source Address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.SourceAddress, self).__init__()

                                self.yang_name = "source-address"
                                self.yang_parent_name = "group-info"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "source-address"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/standby/default-context/explicit-groups/explicit-group/group-info/%s" % self._segment_path()
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.SourceAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.SourceAddress']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo']['meta_info']


                    class Host(_Entity_):
                        """
                        List of hosts
                        
                        .. attribute:: address
                        
                        	Host Address
                        	**type**\:  :py:class:`Address <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.Host.Address>`
                        
                        	**config**\: False
                        
                        .. attribute:: uptime
                        
                        	Uptime in seconds
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        	**units**\: second
                        
                        .. attribute:: is_exclude
                        
                        	Exclude flag set
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: expiration_time
                        
                        	Expiration time in seconds
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        	**units**\: second
                        
                        .. attribute:: source_count
                        
                        	No. of sources in entry
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: source_address
                        
                        	First 3 source addresses
                        	**type**\: list of  		 :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.Host.SourceAddress>`
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.Host, self).__init__()

                            self.yang_name = "host"
                            self.yang_parent_name = "explicit-group"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("address", ("address", Igmp.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.Host.Address)), ("source-address", ("source_address", Igmp.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.Host.SourceAddress))])
                            self._leafs = OrderedDict([
                                ('uptime', (YLeaf(YType.uint32, 'uptime'), ['int'])),
                                ('is_exclude', (YLeaf(YType.boolean, 'is-exclude'), ['bool'])),
                                ('expiration_time', (YLeaf(YType.uint32, 'expiration-time'), ['int'])),
                                ('source_count', (YLeaf(YType.uint32, 'source-count'), ['int'])),
                            ])
                            self.uptime = None
                            self.is_exclude = None
                            self.expiration_time = None
                            self.source_count = None

                            self.address = Igmp.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.Host.Address()
                            self.address.parent = self
                            self._children_name_map["address"] = "address"

                            self.source_address = YList(self)
                            self._segment_path = lambda: "host"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/standby/default-context/explicit-groups/explicit-group/%s" % self._segment_path()
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.Host, ['uptime', 'is_exclude', 'expiration_time', 'source_count'], name, value)


                        class Address(_Entity_):
                            """
                            Host Address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.Host.Address, self).__init__()

                                self.yang_name = "address"
                                self.yang_parent_name = "host"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "address"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/standby/default-context/explicit-groups/explicit-group/host/%s" % self._segment_path()
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.Host.Address, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.Host.Address']['meta_info']


                        class SourceAddress(_Entity_):
                            """
                            First 3 source addresses
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.Host.SourceAddress, self).__init__()

                                self.yang_name = "source-address"
                                self.yang_parent_name = "host"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "source-address"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/standby/default-context/explicit-groups/explicit-group/host/%s" % self._segment_path()
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.Host.SourceAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.Host.SourceAddress']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Standby.DefaultContext.ExplicitGroups.ExplicitGroup.Host']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Igmp.Standby.DefaultContext.ExplicitGroups.ExplicitGroup']['meta_info']

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Igmp.Standby.DefaultContext.ExplicitGroups']['meta_info']


            class InterfaceTable(_Entity_):
                """
                IGMP Interface specific Table
                
                .. attribute:: interface
                
                	IGMP Interface
                	**type**\: list of  		 :py:class:`Interface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.InterfaceTable.Interface>`
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Igmp.Standby.DefaultContext.InterfaceTable, self).__init__()

                    self.yang_name = "interface-table"
                    self.yang_parent_name = "default-context"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("interface", ("interface", Igmp.Standby.DefaultContext.InterfaceTable.Interface))])
                    self._leafs = OrderedDict()

                    self.interface = YList(self)
                    self._segment_path = lambda: "interface-table"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/standby/default-context/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Igmp.Standby.DefaultContext.InterfaceTable, [], name, value)


                class Interface(_Entity_):
                    """
                    IGMP Interface
                    
                    .. attribute:: interface_name  (key)
                    
                    	Interface Name
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: address
                    
                    	IP address
                    	**type**\:  :py:class:`Address <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.InterfaceTable.Interface.Address>`
                    
                    	**config**\: False
                    
                    .. attribute:: querier_address
                    
                    	Address of the Querier
                    	**type**\:  :py:class:`QuerierAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.InterfaceTable.Interface.QuerierAddress>`
                    
                    	**config**\: False
                    
                    .. attribute:: subscriber_address
                    
                    	Address of subscriber
                    	**type**\:  :py:class:`SubscriberAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.InterfaceTable.Interface.SubscriberAddress>`
                    
                    	**config**\: False
                    
                    .. attribute:: interface_name_xr
                    
                    	Interface
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: state
                    
                    	Interface state
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: prefix_length
                    
                    	Prefix length
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_interface_up
                    
                    	Is interface up
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_ip_enabled
                    
                    	Is IP enabled
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_router_enabled
                    
                    	Is Router functionality enabled
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: igmp_version
                    
                    	IGMP Router version
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    	**config**\: False
                    
                    .. attribute:: host_version
                    
                    	IGMP Host version
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    	**config**\: False
                    
                    .. attribute:: query_interval
                    
                    	Query Interval value in seconds
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    	**units**\: second
                    
                    .. attribute:: query_timeout
                    
                    	Query Timeout value
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    .. attribute:: query_maximum_response_time
                    
                    	Max Response Timeout value
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    .. attribute:: last_member_query_interval
                    
                    	Last Member Query Interval
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    .. attribute:: group_joins
                    
                    	No. of group joins
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: group_leaves
                    
                    	No. of group leaves
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_querier
                    
                    	Are we querier
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: total_active_groups
                    
                    	Actual number of groups on interface
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: robustness
                    
                    	Robustness Variable value
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: proxy_interface
                    
                    	Proxy interface index
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: querier_uptime
                    
                    	Time since the last querier took over
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    .. attribute:: las_ll_registration_count
                    
                    	LAS reg count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_get_address_count
                    
                    	LAS get addr count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_update_count
                    
                    	LAS Update count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_ll_remove_update_count
                    
                    	LAS LL remove update count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_ll_add_update_count
                    
                    	LAS LL add update count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_null_update_count
                    
                    	LAS Null update count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_unregistration_count
                    
                    	LAS unreg count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_las_request
                    
                    	LAS req
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_las_registered
                    
                    	LAS registered
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: vrf_id
                    
                    	VRF id
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: mte_vrf_id
                    
                    	MTE VRF id
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: location
                    
                    	Location
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: mtu
                    
                    	MTU
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: vrf_state
                    
                    	Vrf State
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_configurationverify
                    
                    	CFG verify
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: configurationvrf_set
                    
                    	CFG vrf set
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: configurationvrf_error
                    
                    	CFG vrf error
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: configuration_mcast_vrf_set
                    
                    	Is mcast set
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: configuration_mcast_vrf_error
                    
                    	Is mcast error
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_im_state_registered
                    
                    	Im state registered
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_subscriber
                    
                    	Subscriber interface
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: subscriber_mode
                    
                    	Subscriber mode
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_identity_present
                    
                    	Subscriber ID or Address available from AAA
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: subscriber_id
                    
                    	ID string of subscriber
                    	**type**\: str
                    
                    	**length:** 0..257
                    
                    	**config**\: False
                    
                    .. attribute:: parent_ifhandle
                    
                    	Parent If Handle
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: time_since_last_query_in_seconds
                    
                    	Time elapsed since last query
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: time_since_last_report_in_seconds
                    
                    	Time elapsed since last report
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: router_uptime_in_seconds
                    
                    	Uptime since router enabled event
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: mte_tuple_count
                    
                    	MTE Tuple count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Igmp.Standby.DefaultContext.InterfaceTable.Interface, self).__init__()

                        self.yang_name = "interface"
                        self.yang_parent_name = "interface-table"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['interface_name']
                        self._child_classes = OrderedDict([("address", ("address", Igmp.Standby.DefaultContext.InterfaceTable.Interface.Address)), ("querier-address", ("querier_address", Igmp.Standby.DefaultContext.InterfaceTable.Interface.QuerierAddress)), ("subscriber-address", ("subscriber_address", Igmp.Standby.DefaultContext.InterfaceTable.Interface.SubscriberAddress))])
                        self._leafs = OrderedDict([
                            ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                            ('interface_name_xr', (YLeaf(YType.str, 'interface-name-xr'), ['str'])),
                            ('state', (YLeaf(YType.uint32, 'state'), ['int'])),
                            ('prefix_length', (YLeaf(YType.uint32, 'prefix-length'), ['int'])),
                            ('is_interface_up', (YLeaf(YType.boolean, 'is-interface-up'), ['bool'])),
                            ('is_ip_enabled', (YLeaf(YType.boolean, 'is-ip-enabled'), ['bool'])),
                            ('is_router_enabled', (YLeaf(YType.boolean, 'is-router-enabled'), ['bool'])),
                            ('igmp_version', (YLeaf(YType.uint8, 'igmp-version'), ['int'])),
                            ('host_version', (YLeaf(YType.uint8, 'host-version'), ['int'])),
                            ('query_interval', (YLeaf(YType.uint16, 'query-interval'), ['int'])),
                            ('query_timeout', (YLeaf(YType.uint16, 'query-timeout'), ['int'])),
                            ('query_maximum_response_time', (YLeaf(YType.uint16, 'query-maximum-response-time'), ['int'])),
                            ('last_member_query_interval', (YLeaf(YType.uint16, 'last-member-query-interval'), ['int'])),
                            ('group_joins', (YLeaf(YType.uint32, 'group-joins'), ['int'])),
                            ('group_leaves', (YLeaf(YType.uint32, 'group-leaves'), ['int'])),
                            ('is_querier', (YLeaf(YType.boolean, 'is-querier'), ['bool'])),
                            ('total_active_groups', (YLeaf(YType.uint32, 'total-active-groups'), ['int'])),
                            ('robustness', (YLeaf(YType.uint32, 'robustness'), ['int'])),
                            ('proxy_interface', (YLeaf(YType.str, 'proxy-interface'), ['str'])),
                            ('querier_uptime', (YLeaf(YType.uint16, 'querier-uptime'), ['int'])),
                            ('las_ll_registration_count', (YLeaf(YType.uint32, 'las-ll-registration-count'), ['int'])),
                            ('las_get_address_count', (YLeaf(YType.uint32, 'las-get-address-count'), ['int'])),
                            ('las_update_count', (YLeaf(YType.uint32, 'las-update-count'), ['int'])),
                            ('las_ll_remove_update_count', (YLeaf(YType.uint32, 'las-ll-remove-update-count'), ['int'])),
                            ('las_ll_add_update_count', (YLeaf(YType.uint32, 'las-ll-add-update-count'), ['int'])),
                            ('las_null_update_count', (YLeaf(YType.uint32, 'las-null-update-count'), ['int'])),
                            ('las_unregistration_count', (YLeaf(YType.uint32, 'las-unregistration-count'), ['int'])),
                            ('is_las_request', (YLeaf(YType.boolean, 'is-las-request'), ['bool'])),
                            ('is_las_registered', (YLeaf(YType.boolean, 'is-las-registered'), ['bool'])),
                            ('vrf_id', (YLeaf(YType.uint32, 'vrf-id'), ['int'])),
                            ('mte_vrf_id', (YLeaf(YType.uint32, 'mte-vrf-id'), ['int'])),
                            ('location', (YLeaf(YType.uint32, 'location'), ['int'])),
                            ('mtu', (YLeaf(YType.uint32, 'mtu'), ['int'])),
                            ('vrf_state', (YLeaf(YType.uint32, 'vrf-state'), ['int'])),
                            ('is_configurationverify', (YLeaf(YType.boolean, 'is-configurationverify'), ['bool'])),
                            ('configurationvrf_set', (YLeaf(YType.boolean, 'configurationvrf-set'), ['bool'])),
                            ('configurationvrf_error', (YLeaf(YType.boolean, 'configurationvrf-error'), ['bool'])),
                            ('configuration_mcast_vrf_set', (YLeaf(YType.boolean, 'configuration-mcast-vrf-set'), ['bool'])),
                            ('configuration_mcast_vrf_error', (YLeaf(YType.boolean, 'configuration-mcast-vrf-error'), ['bool'])),
                            ('is_im_state_registered', (YLeaf(YType.boolean, 'is-im-state-registered'), ['bool'])),
                            ('is_subscriber', (YLeaf(YType.boolean, 'is-subscriber'), ['bool'])),
                            ('subscriber_mode', (YLeaf(YType.uint32, 'subscriber-mode'), ['int'])),
                            ('is_identity_present', (YLeaf(YType.boolean, 'is-identity-present'), ['bool'])),
                            ('subscriber_id', (YLeaf(YType.str, 'subscriber-id'), ['str'])),
                            ('parent_ifhandle', (YLeaf(YType.str, 'parent-ifhandle'), ['str'])),
                            ('time_since_last_query_in_seconds', (YLeaf(YType.uint32, 'time-since-last-query-in-seconds'), ['int'])),
                            ('time_since_last_report_in_seconds', (YLeaf(YType.uint32, 'time-since-last-report-in-seconds'), ['int'])),
                            ('router_uptime_in_seconds', (YLeaf(YType.uint32, 'router-uptime-in-seconds'), ['int'])),
                            ('mte_tuple_count', (YLeaf(YType.uint32, 'mte-tuple-count'), ['int'])),
                        ])
                        self.interface_name = None
                        self.interface_name_xr = None
                        self.state = None
                        self.prefix_length = None
                        self.is_interface_up = None
                        self.is_ip_enabled = None
                        self.is_router_enabled = None
                        self.igmp_version = None
                        self.host_version = None
                        self.query_interval = None
                        self.query_timeout = None
                        self.query_maximum_response_time = None
                        self.last_member_query_interval = None
                        self.group_joins = None
                        self.group_leaves = None
                        self.is_querier = None
                        self.total_active_groups = None
                        self.robustness = None
                        self.proxy_interface = None
                        self.querier_uptime = None
                        self.las_ll_registration_count = None
                        self.las_get_address_count = None
                        self.las_update_count = None
                        self.las_ll_remove_update_count = None
                        self.las_ll_add_update_count = None
                        self.las_null_update_count = None
                        self.las_unregistration_count = None
                        self.is_las_request = None
                        self.is_las_registered = None
                        self.vrf_id = None
                        self.mte_vrf_id = None
                        self.location = None
                        self.mtu = None
                        self.vrf_state = None
                        self.is_configurationverify = None
                        self.configurationvrf_set = None
                        self.configurationvrf_error = None
                        self.configuration_mcast_vrf_set = None
                        self.configuration_mcast_vrf_error = None
                        self.is_im_state_registered = None
                        self.is_subscriber = None
                        self.subscriber_mode = None
                        self.is_identity_present = None
                        self.subscriber_id = None
                        self.parent_ifhandle = None
                        self.time_since_last_query_in_seconds = None
                        self.time_since_last_report_in_seconds = None
                        self.router_uptime_in_seconds = None
                        self.mte_tuple_count = None

                        self.address = Igmp.Standby.DefaultContext.InterfaceTable.Interface.Address()
                        self.address.parent = self
                        self._children_name_map["address"] = "address"

                        self.querier_address = Igmp.Standby.DefaultContext.InterfaceTable.Interface.QuerierAddress()
                        self.querier_address.parent = self
                        self._children_name_map["querier_address"] = "querier-address"

                        self.subscriber_address = Igmp.Standby.DefaultContext.InterfaceTable.Interface.SubscriberAddress()
                        self.subscriber_address.parent = self
                        self._children_name_map["subscriber_address"] = "subscriber-address"
                        self._segment_path = lambda: "interface" + "[interface-name='" + str(self.interface_name) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/standby/default-context/interface-table/%s" % self._segment_path()
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Igmp.Standby.DefaultContext.InterfaceTable.Interface, ['interface_name', 'interface_name_xr', 'state', 'prefix_length', 'is_interface_up', 'is_ip_enabled', 'is_router_enabled', 'igmp_version', 'host_version', 'query_interval', 'query_timeout', 'query_maximum_response_time', 'last_member_query_interval', 'group_joins', 'group_leaves', 'is_querier', 'total_active_groups', 'robustness', 'proxy_interface', 'querier_uptime', 'las_ll_registration_count', 'las_get_address_count', 'las_update_count', 'las_ll_remove_update_count', 'las_ll_add_update_count', 'las_null_update_count', 'las_unregistration_count', 'is_las_request', 'is_las_registered', 'vrf_id', 'mte_vrf_id', 'location', 'mtu', 'vrf_state', 'is_configurationverify', 'configurationvrf_set', 'configurationvrf_error', 'configuration_mcast_vrf_set', 'configuration_mcast_vrf_error', 'is_im_state_registered', 'is_subscriber', 'subscriber_mode', 'is_identity_present', 'subscriber_id', 'parent_ifhandle', 'time_since_last_query_in_seconds', 'time_since_last_report_in_seconds', 'router_uptime_in_seconds', 'mte_tuple_count'], name, value)


                    class Address(_Entity_):
                        """
                        IP address
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Standby.DefaultContext.InterfaceTable.Interface.Address, self).__init__()

                            self.yang_name = "address"
                            self.yang_parent_name = "interface"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "address"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Standby.DefaultContext.InterfaceTable.Interface.Address, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Standby.DefaultContext.InterfaceTable.Interface.Address']['meta_info']


                    class QuerierAddress(_Entity_):
                        """
                        Address of the Querier
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Standby.DefaultContext.InterfaceTable.Interface.QuerierAddress, self).__init__()

                            self.yang_name = "querier-address"
                            self.yang_parent_name = "interface"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "querier-address"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Standby.DefaultContext.InterfaceTable.Interface.QuerierAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Standby.DefaultContext.InterfaceTable.Interface.QuerierAddress']['meta_info']


                    class SubscriberAddress(_Entity_):
                        """
                        Address of subscriber
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Standby.DefaultContext.InterfaceTable.Interface.SubscriberAddress, self).__init__()

                            self.yang_name = "subscriber-address"
                            self.yang_parent_name = "interface"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "subscriber-address"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Standby.DefaultContext.InterfaceTable.Interface.SubscriberAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Standby.DefaultContext.InterfaceTable.Interface.SubscriberAddress']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Igmp.Standby.DefaultContext.InterfaceTable.Interface']['meta_info']

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Igmp.Standby.DefaultContext.InterfaceTable']['meta_info']


            class InterfaceUnicastQosAdjusts(_Entity_):
                """
                IGMP Interface Unicast\-Qos\-Adjust
                
                .. attribute:: interface_unicast_qos_adjust
                
                	IGMP Interface
                	**type**\: list of  		 :py:class:`InterfaceUnicastQosAdjust <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust>`
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Igmp.Standby.DefaultContext.InterfaceUnicastQosAdjusts, self).__init__()

                    self.yang_name = "interface-unicast-qos-adjusts"
                    self.yang_parent_name = "default-context"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("interface-unicast-qos-adjust", ("interface_unicast_qos_adjust", Igmp.Standby.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust))])
                    self._leafs = OrderedDict()

                    self.interface_unicast_qos_adjust = YList(self)
                    self._segment_path = lambda: "interface-unicast-qos-adjusts"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/standby/default-context/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Igmp.Standby.DefaultContext.InterfaceUnicastQosAdjusts, [], name, value)


                class InterfaceUnicastQosAdjust(_Entity_):
                    """
                    IGMP Interface
                    
                    .. attribute:: interface_name  (key)
                    
                    	Interface Name
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: is_virtual_access
                    
                    	Is VirtualAccess Interface
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: rate
                    
                    	Overall rate in Kbps
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    	**units**\: kbit/s
                    
                    .. attribute:: rate_increments
                    
                    	Count of rate increments
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: rate_decrements
                    
                    	Count of rate decrements
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: update
                    
                    	List of updates
                    	**type**\: list of  		 :py:class:`Update <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Igmp.Standby.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust, self).__init__()

                        self.yang_name = "interface-unicast-qos-adjust"
                        self.yang_parent_name = "interface-unicast-qos-adjusts"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['interface_name']
                        self._child_classes = OrderedDict([("update", ("update", Igmp.Standby.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update))])
                        self._leafs = OrderedDict([
                            ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                            ('is_virtual_access', (YLeaf(YType.boolean, 'is-virtual-access'), ['bool'])),
                            ('rate', (YLeaf(YType.uint32, 'rate'), ['int'])),
                            ('rate_increments', (YLeaf(YType.uint32, 'rate-increments'), ['int'])),
                            ('rate_decrements', (YLeaf(YType.uint32, 'rate-decrements'), ['int'])),
                        ])
                        self.interface_name = None
                        self.is_virtual_access = None
                        self.rate = None
                        self.rate_increments = None
                        self.rate_decrements = None

                        self.update = YList(self)
                        self._segment_path = lambda: "interface-unicast-qos-adjust" + "[interface-name='" + str(self.interface_name) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/standby/default-context/interface-unicast-qos-adjusts/%s" % self._segment_path()
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Igmp.Standby.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust, ['interface_name', 'is_virtual_access', 'rate', 'rate_increments', 'rate_decrements'], name, value)


                    class Update(_Entity_):
                        """
                        List of updates
                        
                        .. attribute:: source_address
                        
                        	Source address
                        	**type**\:  :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.SourceAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: group_address
                        
                        	Group address
                        	**type**\:  :py:class:`GroupAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.GroupAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: is_add
                        
                        	Is this a rate increment
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: weight
                        
                        	Weight from policy
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: received_time
                        
                        	Time this update is received
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Standby.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update, self).__init__()

                            self.yang_name = "update"
                            self.yang_parent_name = "interface-unicast-qos-adjust"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("source-address", ("source_address", Igmp.Standby.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.SourceAddress)), ("group-address", ("group_address", Igmp.Standby.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.GroupAddress))])
                            self._leafs = OrderedDict([
                                ('is_add', (YLeaf(YType.boolean, 'is-add'), ['bool'])),
                                ('weight', (YLeaf(YType.uint32, 'weight'), ['int'])),
                                ('received_time', (YLeaf(YType.uint64, 'received-time'), ['int'])),
                            ])
                            self.is_add = None
                            self.weight = None
                            self.received_time = None

                            self.source_address = Igmp.Standby.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.SourceAddress()
                            self.source_address.parent = self
                            self._children_name_map["source_address"] = "source-address"

                            self.group_address = Igmp.Standby.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.GroupAddress()
                            self.group_address.parent = self
                            self._children_name_map["group_address"] = "group-address"
                            self._segment_path = lambda: "update"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Standby.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update, ['is_add', 'weight', 'received_time'], name, value)


                        class SourceAddress(_Entity_):
                            """
                            Source address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Standby.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.SourceAddress, self).__init__()

                                self.yang_name = "source-address"
                                self.yang_parent_name = "update"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "source-address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Standby.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.SourceAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Standby.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.SourceAddress']['meta_info']


                        class GroupAddress(_Entity_):
                            """
                            Group address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Standby.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.GroupAddress, self).__init__()

                                self.yang_name = "group-address"
                                self.yang_parent_name = "update"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "group-address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Standby.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.GroupAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Standby.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.GroupAddress']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Standby.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Igmp.Standby.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust']['meta_info']

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Igmp.Standby.DefaultContext.InterfaceUnicastQosAdjusts']['meta_info']


            class Ranges(_Entity_):
                """
                Range table
                
                .. attribute:: range
                
                	Range information
                	**type**\: list of  		 :py:class:`Range <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.Ranges.Range>`
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Igmp.Standby.DefaultContext.Ranges, self).__init__()

                    self.yang_name = "ranges"
                    self.yang_parent_name = "default-context"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("range", ("range", Igmp.Standby.DefaultContext.Ranges.Range))])
                    self._leafs = OrderedDict()

                    self.range = YList(self)
                    self._segment_path = lambda: "ranges"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/standby/default-context/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Igmp.Standby.DefaultContext.Ranges, [], name, value)


                class Range(_Entity_):
                    """
                    Range information
                    
                    .. attribute:: group_address
                    
                    	Group address
                    	**type**\: union of the below types:
                    
                    		**type**\: str
                    
                    			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    		**type**\: str
                    
                    			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    	**config**\: False
                    
                    .. attribute:: group_mask
                    
                    	Group Mask
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: group_address_xr
                    
                    	Group address
                    	**type**\:  :py:class:`GroupAddressXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.Ranges.Range.GroupAddressXr>`
                    
                    	**config**\: False
                    
                    .. attribute:: prefix_length
                    
                    	Prefix length
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: protocol
                    
                    	Protocol
                    	**type**\:  :py:class:`IgmpEdmProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpEdmProtocol>`
                    
                    	**config**\: False
                    
                    .. attribute:: is_stale
                    
                    	Is the entry stale
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Igmp.Standby.DefaultContext.Ranges.Range, self).__init__()

                        self.yang_name = "range"
                        self.yang_parent_name = "ranges"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("group-address-xr", ("group_address_xr", Igmp.Standby.DefaultContext.Ranges.Range.GroupAddressXr))])
                        self._leafs = OrderedDict([
                            ('group_address', (YLeaf(YType.str, 'group-address'), ['str','str'])),
                            ('group_mask', (YLeaf(YType.uint32, 'group-mask'), ['int'])),
                            ('prefix_length', (YLeaf(YType.uint32, 'prefix-length'), ['int'])),
                            ('protocol', (YLeaf(YType.enumeration, 'protocol'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpEdmProtocol', '')])),
                            ('is_stale', (YLeaf(YType.boolean, 'is-stale'), ['bool'])),
                        ])
                        self.group_address = None
                        self.group_mask = None
                        self.prefix_length = None
                        self.protocol = None
                        self.is_stale = None

                        self.group_address_xr = Igmp.Standby.DefaultContext.Ranges.Range.GroupAddressXr()
                        self.group_address_xr.parent = self
                        self._children_name_map["group_address_xr"] = "group-address-xr"
                        self._segment_path = lambda: "range"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/standby/default-context/ranges/%s" % self._segment_path()
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Igmp.Standby.DefaultContext.Ranges.Range, ['group_address', 'group_mask', 'prefix_length', 'protocol', 'is_stale'], name, value)


                    class GroupAddressXr(_Entity_):
                        """
                        Group address
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Standby.DefaultContext.Ranges.Range.GroupAddressXr, self).__init__()

                            self.yang_name = "group-address-xr"
                            self.yang_parent_name = "range"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "group-address-xr"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/standby/default-context/ranges/range/%s" % self._segment_path()
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Standby.DefaultContext.Ranges.Range.GroupAddressXr, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Standby.DefaultContext.Ranges.Range.GroupAddressXr']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Igmp.Standby.DefaultContext.Ranges.Range']['meta_info']

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Igmp.Standby.DefaultContext.Ranges']['meta_info']


            class IfrsInterfaces(_Entity_):
                """
                IGMP Interface specific
                
                .. attribute:: ifrs_interface
                
                	IGMP IFRS Interface
                	**type**\: list of  		 :py:class:`IfrsInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.IfrsInterfaces.IfrsInterface>`
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Igmp.Standby.DefaultContext.IfrsInterfaces, self).__init__()

                    self.yang_name = "ifrs-interfaces"
                    self.yang_parent_name = "default-context"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("ifrs-interface", ("ifrs_interface", Igmp.Standby.DefaultContext.IfrsInterfaces.IfrsInterface))])
                    self._leafs = OrderedDict()

                    self.ifrs_interface = YList(self)
                    self._segment_path = lambda: "ifrs-interfaces"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/standby/default-context/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Igmp.Standby.DefaultContext.IfrsInterfaces, [], name, value)


                class IfrsInterface(_Entity_):
                    """
                    IGMP IFRS Interface
                    
                    .. attribute:: interface_name  (key)
                    
                    	IFRS Interface Name
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: igmp_interface_entry
                    
                    	IGMP interface entry
                    	**type**\:  :py:class:`IgmpInterfaceEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry>`
                    
                    	**config**\: False
                    
                    .. attribute:: join_group_count
                    
                    	Join group count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Igmp.Standby.DefaultContext.IfrsInterfaces.IfrsInterface, self).__init__()

                        self.yang_name = "ifrs-interface"
                        self.yang_parent_name = "ifrs-interfaces"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['interface_name']
                        self._child_classes = OrderedDict([("igmp-interface-entry", ("igmp_interface_entry", Igmp.Standby.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry))])
                        self._leafs = OrderedDict([
                            ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                            ('join_group_count', (YLeaf(YType.uint32, 'join-group-count'), ['int'])),
                        ])
                        self.interface_name = None
                        self.join_group_count = None

                        self.igmp_interface_entry = Igmp.Standby.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry()
                        self.igmp_interface_entry.parent = self
                        self._children_name_map["igmp_interface_entry"] = "igmp-interface-entry"
                        self._segment_path = lambda: "ifrs-interface" + "[interface-name='" + str(self.interface_name) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/standby/default-context/ifrs-interfaces/%s" % self._segment_path()
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Igmp.Standby.DefaultContext.IfrsInterfaces.IfrsInterface, ['interface_name', 'join_group_count'], name, value)


                    class IgmpInterfaceEntry(_Entity_):
                        """
                        IGMP interface entry
                        
                        .. attribute:: address
                        
                        	IP address
                        	**type**\:  :py:class:`Address <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.Address>`
                        
                        	**config**\: False
                        
                        .. attribute:: querier_address
                        
                        	Address of the Querier
                        	**type**\:  :py:class:`QuerierAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.QuerierAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: subscriber_address
                        
                        	Address of subscriber
                        	**type**\:  :py:class:`SubscriberAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.SubscriberAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: interface_name_xr
                        
                        	Interface
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: state
                        
                        	Interface state
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: prefix_length
                        
                        	Prefix length
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_interface_up
                        
                        	Is interface up
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_ip_enabled
                        
                        	Is IP enabled
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_router_enabled
                        
                        	Is Router functionality enabled
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: igmp_version
                        
                        	IGMP Router version
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        	**config**\: False
                        
                        .. attribute:: host_version
                        
                        	IGMP Host version
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        	**config**\: False
                        
                        .. attribute:: query_interval
                        
                        	Query Interval value in seconds
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        	**units**\: second
                        
                        .. attribute:: query_timeout
                        
                        	Query Timeout value
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: query_maximum_response_time
                        
                        	Max Response Timeout value
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: last_member_query_interval
                        
                        	Last Member Query Interval
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: group_joins
                        
                        	No. of group joins
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: group_leaves
                        
                        	No. of group leaves
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_querier
                        
                        	Are we querier
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: total_active_groups
                        
                        	Actual number of groups on interface
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: robustness
                        
                        	Robustness Variable value
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: proxy_interface
                        
                        	Proxy interface index
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: querier_uptime
                        
                        	Time since the last querier took over
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: las_ll_registration_count
                        
                        	LAS reg count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_get_address_count
                        
                        	LAS get addr count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_update_count
                        
                        	LAS Update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_ll_remove_update_count
                        
                        	LAS LL remove update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_ll_add_update_count
                        
                        	LAS LL add update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_null_update_count
                        
                        	LAS Null update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_unregistration_count
                        
                        	LAS unreg count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_las_request
                        
                        	LAS req
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_las_registered
                        
                        	LAS registered
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: vrf_id
                        
                        	VRF id
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: mte_vrf_id
                        
                        	MTE VRF id
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: location
                        
                        	Location
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: mtu
                        
                        	MTU
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: vrf_state
                        
                        	Vrf State
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_configurationverify
                        
                        	CFG verify
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configurationvrf_set
                        
                        	CFG vrf set
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configurationvrf_error
                        
                        	CFG vrf error
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configuration_mcast_vrf_set
                        
                        	Is mcast set
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configuration_mcast_vrf_error
                        
                        	Is mcast error
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_im_state_registered
                        
                        	Im state registered
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_subscriber
                        
                        	Subscriber interface
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: subscriber_mode
                        
                        	Subscriber mode
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_identity_present
                        
                        	Subscriber ID or Address available from AAA
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: subscriber_id
                        
                        	ID string of subscriber
                        	**type**\: str
                        
                        	**length:** 0..257
                        
                        	**config**\: False
                        
                        .. attribute:: parent_ifhandle
                        
                        	Parent If Handle
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: time_since_last_query_in_seconds
                        
                        	Time elapsed since last query
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: time_since_last_report_in_seconds
                        
                        	Time elapsed since last report
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: router_uptime_in_seconds
                        
                        	Uptime since router enabled event
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: mte_tuple_count
                        
                        	MTE Tuple count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Standby.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry, self).__init__()

                            self.yang_name = "igmp-interface-entry"
                            self.yang_parent_name = "ifrs-interface"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("address", ("address", Igmp.Standby.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.Address)), ("querier-address", ("querier_address", Igmp.Standby.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.QuerierAddress)), ("subscriber-address", ("subscriber_address", Igmp.Standby.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.SubscriberAddress))])
                            self._leafs = OrderedDict([
                                ('interface_name_xr', (YLeaf(YType.str, 'interface-name-xr'), ['str'])),
                                ('state', (YLeaf(YType.uint32, 'state'), ['int'])),
                                ('prefix_length', (YLeaf(YType.uint32, 'prefix-length'), ['int'])),
                                ('is_interface_up', (YLeaf(YType.boolean, 'is-interface-up'), ['bool'])),
                                ('is_ip_enabled', (YLeaf(YType.boolean, 'is-ip-enabled'), ['bool'])),
                                ('is_router_enabled', (YLeaf(YType.boolean, 'is-router-enabled'), ['bool'])),
                                ('igmp_version', (YLeaf(YType.uint8, 'igmp-version'), ['int'])),
                                ('host_version', (YLeaf(YType.uint8, 'host-version'), ['int'])),
                                ('query_interval', (YLeaf(YType.uint16, 'query-interval'), ['int'])),
                                ('query_timeout', (YLeaf(YType.uint16, 'query-timeout'), ['int'])),
                                ('query_maximum_response_time', (YLeaf(YType.uint16, 'query-maximum-response-time'), ['int'])),
                                ('last_member_query_interval', (YLeaf(YType.uint16, 'last-member-query-interval'), ['int'])),
                                ('group_joins', (YLeaf(YType.uint32, 'group-joins'), ['int'])),
                                ('group_leaves', (YLeaf(YType.uint32, 'group-leaves'), ['int'])),
                                ('is_querier', (YLeaf(YType.boolean, 'is-querier'), ['bool'])),
                                ('total_active_groups', (YLeaf(YType.uint32, 'total-active-groups'), ['int'])),
                                ('robustness', (YLeaf(YType.uint32, 'robustness'), ['int'])),
                                ('proxy_interface', (YLeaf(YType.str, 'proxy-interface'), ['str'])),
                                ('querier_uptime', (YLeaf(YType.uint16, 'querier-uptime'), ['int'])),
                                ('las_ll_registration_count', (YLeaf(YType.uint32, 'las-ll-registration-count'), ['int'])),
                                ('las_get_address_count', (YLeaf(YType.uint32, 'las-get-address-count'), ['int'])),
                                ('las_update_count', (YLeaf(YType.uint32, 'las-update-count'), ['int'])),
                                ('las_ll_remove_update_count', (YLeaf(YType.uint32, 'las-ll-remove-update-count'), ['int'])),
                                ('las_ll_add_update_count', (YLeaf(YType.uint32, 'las-ll-add-update-count'), ['int'])),
                                ('las_null_update_count', (YLeaf(YType.uint32, 'las-null-update-count'), ['int'])),
                                ('las_unregistration_count', (YLeaf(YType.uint32, 'las-unregistration-count'), ['int'])),
                                ('is_las_request', (YLeaf(YType.boolean, 'is-las-request'), ['bool'])),
                                ('is_las_registered', (YLeaf(YType.boolean, 'is-las-registered'), ['bool'])),
                                ('vrf_id', (YLeaf(YType.uint32, 'vrf-id'), ['int'])),
                                ('mte_vrf_id', (YLeaf(YType.uint32, 'mte-vrf-id'), ['int'])),
                                ('location', (YLeaf(YType.uint32, 'location'), ['int'])),
                                ('mtu', (YLeaf(YType.uint32, 'mtu'), ['int'])),
                                ('vrf_state', (YLeaf(YType.uint32, 'vrf-state'), ['int'])),
                                ('is_configurationverify', (YLeaf(YType.boolean, 'is-configurationverify'), ['bool'])),
                                ('configurationvrf_set', (YLeaf(YType.boolean, 'configurationvrf-set'), ['bool'])),
                                ('configurationvrf_error', (YLeaf(YType.boolean, 'configurationvrf-error'), ['bool'])),
                                ('configuration_mcast_vrf_set', (YLeaf(YType.boolean, 'configuration-mcast-vrf-set'), ['bool'])),
                                ('configuration_mcast_vrf_error', (YLeaf(YType.boolean, 'configuration-mcast-vrf-error'), ['bool'])),
                                ('is_im_state_registered', (YLeaf(YType.boolean, 'is-im-state-registered'), ['bool'])),
                                ('is_subscriber', (YLeaf(YType.boolean, 'is-subscriber'), ['bool'])),
                                ('subscriber_mode', (YLeaf(YType.uint32, 'subscriber-mode'), ['int'])),
                                ('is_identity_present', (YLeaf(YType.boolean, 'is-identity-present'), ['bool'])),
                                ('subscriber_id', (YLeaf(YType.str, 'subscriber-id'), ['str'])),
                                ('parent_ifhandle', (YLeaf(YType.str, 'parent-ifhandle'), ['str'])),
                                ('time_since_last_query_in_seconds', (YLeaf(YType.uint32, 'time-since-last-query-in-seconds'), ['int'])),
                                ('time_since_last_report_in_seconds', (YLeaf(YType.uint32, 'time-since-last-report-in-seconds'), ['int'])),
                                ('router_uptime_in_seconds', (YLeaf(YType.uint32, 'router-uptime-in-seconds'), ['int'])),
                                ('mte_tuple_count', (YLeaf(YType.uint32, 'mte-tuple-count'), ['int'])),
                            ])
                            self.interface_name_xr = None
                            self.state = None
                            self.prefix_length = None
                            self.is_interface_up = None
                            self.is_ip_enabled = None
                            self.is_router_enabled = None
                            self.igmp_version = None
                            self.host_version = None
                            self.query_interval = None
                            self.query_timeout = None
                            self.query_maximum_response_time = None
                            self.last_member_query_interval = None
                            self.group_joins = None
                            self.group_leaves = None
                            self.is_querier = None
                            self.total_active_groups = None
                            self.robustness = None
                            self.proxy_interface = None
                            self.querier_uptime = None
                            self.las_ll_registration_count = None
                            self.las_get_address_count = None
                            self.las_update_count = None
                            self.las_ll_remove_update_count = None
                            self.las_ll_add_update_count = None
                            self.las_null_update_count = None
                            self.las_unregistration_count = None
                            self.is_las_request = None
                            self.is_las_registered = None
                            self.vrf_id = None
                            self.mte_vrf_id = None
                            self.location = None
                            self.mtu = None
                            self.vrf_state = None
                            self.is_configurationverify = None
                            self.configurationvrf_set = None
                            self.configurationvrf_error = None
                            self.configuration_mcast_vrf_set = None
                            self.configuration_mcast_vrf_error = None
                            self.is_im_state_registered = None
                            self.is_subscriber = None
                            self.subscriber_mode = None
                            self.is_identity_present = None
                            self.subscriber_id = None
                            self.parent_ifhandle = None
                            self.time_since_last_query_in_seconds = None
                            self.time_since_last_report_in_seconds = None
                            self.router_uptime_in_seconds = None
                            self.mte_tuple_count = None

                            self.address = Igmp.Standby.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.Address()
                            self.address.parent = self
                            self._children_name_map["address"] = "address"

                            self.querier_address = Igmp.Standby.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.QuerierAddress()
                            self.querier_address.parent = self
                            self._children_name_map["querier_address"] = "querier-address"

                            self.subscriber_address = Igmp.Standby.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.SubscriberAddress()
                            self.subscriber_address.parent = self
                            self._children_name_map["subscriber_address"] = "subscriber-address"
                            self._segment_path = lambda: "igmp-interface-entry"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Standby.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry, ['interface_name_xr', 'state', 'prefix_length', 'is_interface_up', 'is_ip_enabled', 'is_router_enabled', 'igmp_version', 'host_version', 'query_interval', 'query_timeout', 'query_maximum_response_time', 'last_member_query_interval', 'group_joins', 'group_leaves', 'is_querier', 'total_active_groups', 'robustness', 'proxy_interface', 'querier_uptime', 'las_ll_registration_count', 'las_get_address_count', 'las_update_count', 'las_ll_remove_update_count', 'las_ll_add_update_count', 'las_null_update_count', 'las_unregistration_count', 'is_las_request', 'is_las_registered', 'vrf_id', 'mte_vrf_id', 'location', 'mtu', 'vrf_state', 'is_configurationverify', 'configurationvrf_set', 'configurationvrf_error', 'configuration_mcast_vrf_set', 'configuration_mcast_vrf_error', 'is_im_state_registered', 'is_subscriber', 'subscriber_mode', 'is_identity_present', 'subscriber_id', 'parent_ifhandle', 'time_since_last_query_in_seconds', 'time_since_last_report_in_seconds', 'router_uptime_in_seconds', 'mte_tuple_count'], name, value)


                        class Address(_Entity_):
                            """
                            IP address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Standby.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.Address, self).__init__()

                                self.yang_name = "address"
                                self.yang_parent_name = "igmp-interface-entry"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Standby.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.Address, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Standby.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.Address']['meta_info']


                        class QuerierAddress(_Entity_):
                            """
                            Address of the Querier
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Standby.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.QuerierAddress, self).__init__()

                                self.yang_name = "querier-address"
                                self.yang_parent_name = "igmp-interface-entry"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "querier-address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Standby.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.QuerierAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Standby.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.QuerierAddress']['meta_info']


                        class SubscriberAddress(_Entity_):
                            """
                            Address of subscriber
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Standby.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.SubscriberAddress, self).__init__()

                                self.yang_name = "subscriber-address"
                                self.yang_parent_name = "igmp-interface-entry"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "subscriber-address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Standby.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.SubscriberAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Standby.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.SubscriberAddress']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Standby.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Igmp.Standby.DefaultContext.IfrsInterfaces.IfrsInterface']['meta_info']

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Igmp.Standby.DefaultContext.IfrsInterfaces']['meta_info']


            class TrafficCounters(_Entity_):
                """
                IGMP Message Traffic Counters
                
                .. attribute:: elapsed_time
                
                	Running time for counters
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: packets_in
                
                	Packets in
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: packets_out
                
                	Packets out
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: format_errors
                
                	Malformed packets in
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: packet_manager_input_errors
                
                	Incoming Packet Manager packets dropped
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: packet_manager_output_errors
                
                	Outgoing Packet Manager packets dropped
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: checksum_errors
                
                	Checksum errors
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: receive_socket_errors
                
                	Socket errors on reception
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: socket_errors
                
                	Socket errors on send
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: bad_scope_errors
                
                	BadScope errors
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: auxillary_data_length_errors
                
                	AuxDataLen errors
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: invalid_source_address_errors
                
                	Invalid Source Address errors
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: no_socket_connection
                
                	Packets dropped since no socket connection
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: miscellaneous_errors
                
                	Packets dropped for other reasons
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: input_queries
                
                	Query packets in
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: input_reports
                
                	Reports in
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: input_leaves
                
                	Leaves in
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: input_mtrace
                
                	Mtrace packets in
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: input_dvmrp
                
                	DVMRP packets in
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: input_pim
                
                	PIM packets in
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: output_queries
                
                	Query packets out
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: output_reports
                
                	Reports out
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: output_leaves
                
                	Leaves out
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: output_mtrace
                
                	Mtrace packets out
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: output_dvmrp
                
                	DVMRP packets out
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: output_pim
                
                	PIM packets out
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: get_packet_failure
                
                	Packet get failed
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: output_no_parent_interface_handle
                
                	Failures setting 2nd ifhandle
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: input_no_idb
                
                	Packets received without idb
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: input_no_vrf_in_idb
                
                	Packets received on idb without VRF
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: input_disabled_idb
                
                	Packet received on disabled idb
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: input_martian_address
                
                	Packets received with Martian Address
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: input_no_assigned_vrf_id
                
                	Packets received with no assigned vrf id
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: input_no_vrf_mtrace
                
                	mtrace packets with no vrf associated
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: input_no_platform_support_mtrace
                
                	mtrace packets without platform support
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Igmp.Standby.DefaultContext.TrafficCounters, self).__init__()

                    self.yang_name = "traffic-counters"
                    self.yang_parent_name = "default-context"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('elapsed_time', (YLeaf(YType.uint32, 'elapsed-time'), ['int'])),
                        ('packets_in', (YLeaf(YType.uint32, 'packets-in'), ['int'])),
                        ('packets_out', (YLeaf(YType.uint32, 'packets-out'), ['int'])),
                        ('format_errors', (YLeaf(YType.uint32, 'format-errors'), ['int'])),
                        ('packet_manager_input_errors', (YLeaf(YType.uint32, 'packet-manager-input-errors'), ['int'])),
                        ('packet_manager_output_errors', (YLeaf(YType.uint32, 'packet-manager-output-errors'), ['int'])),
                        ('checksum_errors', (YLeaf(YType.uint32, 'checksum-errors'), ['int'])),
                        ('receive_socket_errors', (YLeaf(YType.uint32, 'receive-socket-errors'), ['int'])),
                        ('socket_errors', (YLeaf(YType.uint32, 'socket-errors'), ['int'])),
                        ('bad_scope_errors', (YLeaf(YType.uint32, 'bad-scope-errors'), ['int'])),
                        ('auxillary_data_length_errors', (YLeaf(YType.uint32, 'auxillary-data-length-errors'), ['int'])),
                        ('invalid_source_address_errors', (YLeaf(YType.uint32, 'invalid-source-address-errors'), ['int'])),
                        ('no_socket_connection', (YLeaf(YType.uint32, 'no-socket-connection'), ['int'])),
                        ('miscellaneous_errors', (YLeaf(YType.uint32, 'miscellaneous-errors'), ['int'])),
                        ('input_queries', (YLeaf(YType.uint32, 'input-queries'), ['int'])),
                        ('input_reports', (YLeaf(YType.uint32, 'input-reports'), ['int'])),
                        ('input_leaves', (YLeaf(YType.uint32, 'input-leaves'), ['int'])),
                        ('input_mtrace', (YLeaf(YType.uint32, 'input-mtrace'), ['int'])),
                        ('input_dvmrp', (YLeaf(YType.uint32, 'input-dvmrp'), ['int'])),
                        ('input_pim', (YLeaf(YType.uint32, 'input-pim'), ['int'])),
                        ('output_queries', (YLeaf(YType.uint32, 'output-queries'), ['int'])),
                        ('output_reports', (YLeaf(YType.uint32, 'output-reports'), ['int'])),
                        ('output_leaves', (YLeaf(YType.uint32, 'output-leaves'), ['int'])),
                        ('output_mtrace', (YLeaf(YType.uint32, 'output-mtrace'), ['int'])),
                        ('output_dvmrp', (YLeaf(YType.uint32, 'output-dvmrp'), ['int'])),
                        ('output_pim', (YLeaf(YType.uint32, 'output-pim'), ['int'])),
                        ('get_packet_failure', (YLeaf(YType.uint32, 'get-packet-failure'), ['int'])),
                        ('output_no_parent_interface_handle', (YLeaf(YType.uint32, 'output-no-parent-interface-handle'), ['int'])),
                        ('input_no_idb', (YLeaf(YType.uint32, 'input-no-idb'), ['int'])),
                        ('input_no_vrf_in_idb', (YLeaf(YType.uint32, 'input-no-vrf-in-idb'), ['int'])),
                        ('input_disabled_idb', (YLeaf(YType.uint32, 'input-disabled-idb'), ['int'])),
                        ('input_martian_address', (YLeaf(YType.uint32, 'input-martian-address'), ['int'])),
                        ('input_no_assigned_vrf_id', (YLeaf(YType.uint32, 'input-no-assigned-vrf-id'), ['int'])),
                        ('input_no_vrf_mtrace', (YLeaf(YType.uint32, 'input-no-vrf-mtrace'), ['int'])),
                        ('input_no_platform_support_mtrace', (YLeaf(YType.uint32, 'input-no-platform-support-mtrace'), ['int'])),
                    ])
                    self.elapsed_time = None
                    self.packets_in = None
                    self.packets_out = None
                    self.format_errors = None
                    self.packet_manager_input_errors = None
                    self.packet_manager_output_errors = None
                    self.checksum_errors = None
                    self.receive_socket_errors = None
                    self.socket_errors = None
                    self.bad_scope_errors = None
                    self.auxillary_data_length_errors = None
                    self.invalid_source_address_errors = None
                    self.no_socket_connection = None
                    self.miscellaneous_errors = None
                    self.input_queries = None
                    self.input_reports = None
                    self.input_leaves = None
                    self.input_mtrace = None
                    self.input_dvmrp = None
                    self.input_pim = None
                    self.output_queries = None
                    self.output_reports = None
                    self.output_leaves = None
                    self.output_mtrace = None
                    self.output_dvmrp = None
                    self.output_pim = None
                    self.get_packet_failure = None
                    self.output_no_parent_interface_handle = None
                    self.input_no_idb = None
                    self.input_no_vrf_in_idb = None
                    self.input_disabled_idb = None
                    self.input_martian_address = None
                    self.input_no_assigned_vrf_id = None
                    self.input_no_vrf_mtrace = None
                    self.input_no_platform_support_mtrace = None
                    self._segment_path = lambda: "traffic-counters"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/standby/default-context/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Igmp.Standby.DefaultContext.TrafficCounters, ['elapsed_time', 'packets_in', 'packets_out', 'format_errors', 'packet_manager_input_errors', 'packet_manager_output_errors', 'checksum_errors', 'receive_socket_errors', 'socket_errors', 'bad_scope_errors', 'auxillary_data_length_errors', 'invalid_source_address_errors', 'no_socket_connection', 'miscellaneous_errors', 'input_queries', 'input_reports', 'input_leaves', 'input_mtrace', 'input_dvmrp', 'input_pim', 'output_queries', 'output_reports', 'output_leaves', 'output_mtrace', 'output_dvmrp', 'output_pim', 'get_packet_failure', 'output_no_parent_interface_handle', 'input_no_idb', 'input_no_vrf_in_idb', 'input_disabled_idb', 'input_martian_address', 'input_no_assigned_vrf_id', 'input_no_vrf_mtrace', 'input_no_platform_support_mtrace'], name, value)

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Igmp.Standby.DefaultContext.TrafficCounters']['meta_info']


            class Groups(_Entity_):
                """
                IGMP Group Database Table
                
                .. attribute:: group
                
                	IGMP Group Entry Information
                	**type**\: list of  		 :py:class:`Group <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.Groups.Group>`
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Igmp.Standby.DefaultContext.Groups, self).__init__()

                    self.yang_name = "groups"
                    self.yang_parent_name = "default-context"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("group", ("group", Igmp.Standby.DefaultContext.Groups.Group))])
                    self._leafs = OrderedDict()

                    self.group = YList(self)
                    self._segment_path = lambda: "groups"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/standby/default-context/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Igmp.Standby.DefaultContext.Groups, [], name, value)


                class Group(_Entity_):
                    """
                    IGMP Group Entry Information
                    
                    .. attribute:: group_address
                    
                    	Group Address
                    	**type**\: union of the below types:
                    
                    		**type**\: str
                    
                    			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    		**type**\: str
                    
                    			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    	**config**\: False
                    
                    .. attribute:: interface_name
                    
                    	Interface Name
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: group_address_xr
                    
                    	Group Address
                    	**type**\:  :py:class:`GroupAddressXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.Groups.Group.GroupAddressXr>`
                    
                    	**config**\: False
                    
                    .. attribute:: last_reporter
                    
                    	Last reporter address
                    	**type**\:  :py:class:`LastReporter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.Groups.Group.LastReporter>`
                    
                    	**config**\: False
                    
                    .. attribute:: source_address
                    
                    	Source Address
                    	**type**\:  :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.Groups.Group.SourceAddress>`
                    
                    	**config**\: False
                    
                    .. attribute:: interface_name_xr
                    
                    	Interface
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: uptime
                    
                    	Uptime in seconds
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**config**\: False
                    
                    	**units**\: second
                    
                    .. attribute:: expiration_time
                    
                    	Expiration time in seconds
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    	**config**\: False
                    
                    	**units**\: second
                    
                    .. attribute:: explicit_tracking_enabled
                    
                    	Is explicit tracking enabled
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_self_join
                    
                    	If local system is member of this group on this interface
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: row_status
                    
                    	interface on or off for the group
                    	**type**\: str
                    
                    	**length:** 0..16
                    
                    	**config**\: False
                    
                    .. attribute:: is_low_memory
                    
                    	Node is running low on memory
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: router_filter_mode
                    
                    	Filter mode
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    	**config**\: False
                    
                    .. attribute:: older_host_version1_timer
                    
                    	IGMP Hostversion1timer
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: older_host_version2_timer
                    
                    	IGMP Hostversion2timer
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_added
                    
                    	Joined
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_suppressed
                    
                    	Suppressed
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Igmp.Standby.DefaultContext.Groups.Group, self).__init__()

                        self.yang_name = "group"
                        self.yang_parent_name = "groups"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("group-address-xr", ("group_address_xr", Igmp.Standby.DefaultContext.Groups.Group.GroupAddressXr)), ("last-reporter", ("last_reporter", Igmp.Standby.DefaultContext.Groups.Group.LastReporter)), ("source-address", ("source_address", Igmp.Standby.DefaultContext.Groups.Group.SourceAddress))])
                        self._leafs = OrderedDict([
                            ('group_address', (YLeaf(YType.str, 'group-address'), ['str','str'])),
                            ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                            ('interface_name_xr', (YLeaf(YType.str, 'interface-name-xr'), ['str'])),
                            ('uptime', (YLeaf(YType.uint64, 'uptime'), ['int'])),
                            ('expiration_time', (YLeaf(YType.int32, 'expiration-time'), ['int'])),
                            ('explicit_tracking_enabled', (YLeaf(YType.boolean, 'explicit-tracking-enabled'), ['bool'])),
                            ('is_self_join', (YLeaf(YType.boolean, 'is-self-join'), ['bool'])),
                            ('row_status', (YLeaf(YType.str, 'row-status'), ['str'])),
                            ('is_low_memory', (YLeaf(YType.boolean, 'is-low-memory'), ['bool'])),
                            ('router_filter_mode', (YLeaf(YType.uint8, 'router-filter-mode'), ['int'])),
                            ('older_host_version1_timer', (YLeaf(YType.uint32, 'older-host-version1-timer'), ['int'])),
                            ('older_host_version2_timer', (YLeaf(YType.uint32, 'older-host-version2-timer'), ['int'])),
                            ('is_added', (YLeaf(YType.boolean, 'is-added'), ['bool'])),
                            ('is_suppressed', (YLeaf(YType.boolean, 'is-suppressed'), ['bool'])),
                        ])
                        self.group_address = None
                        self.interface_name = None
                        self.interface_name_xr = None
                        self.uptime = None
                        self.expiration_time = None
                        self.explicit_tracking_enabled = None
                        self.is_self_join = None
                        self.row_status = None
                        self.is_low_memory = None
                        self.router_filter_mode = None
                        self.older_host_version1_timer = None
                        self.older_host_version2_timer = None
                        self.is_added = None
                        self.is_suppressed = None

                        self.group_address_xr = Igmp.Standby.DefaultContext.Groups.Group.GroupAddressXr()
                        self.group_address_xr.parent = self
                        self._children_name_map["group_address_xr"] = "group-address-xr"

                        self.last_reporter = Igmp.Standby.DefaultContext.Groups.Group.LastReporter()
                        self.last_reporter.parent = self
                        self._children_name_map["last_reporter"] = "last-reporter"

                        self.source_address = Igmp.Standby.DefaultContext.Groups.Group.SourceAddress()
                        self.source_address.parent = self
                        self._children_name_map["source_address"] = "source-address"
                        self._segment_path = lambda: "group"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/standby/default-context/groups/%s" % self._segment_path()
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Igmp.Standby.DefaultContext.Groups.Group, ['group_address', 'interface_name', 'interface_name_xr', 'uptime', 'expiration_time', 'explicit_tracking_enabled', 'is_self_join', 'row_status', 'is_low_memory', 'router_filter_mode', 'older_host_version1_timer', 'older_host_version2_timer', 'is_added', 'is_suppressed'], name, value)


                    class GroupAddressXr(_Entity_):
                        """
                        Group Address
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Standby.DefaultContext.Groups.Group.GroupAddressXr, self).__init__()

                            self.yang_name = "group-address-xr"
                            self.yang_parent_name = "group"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "group-address-xr"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/standby/default-context/groups/group/%s" % self._segment_path()
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Standby.DefaultContext.Groups.Group.GroupAddressXr, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Standby.DefaultContext.Groups.Group.GroupAddressXr']['meta_info']


                    class LastReporter(_Entity_):
                        """
                        Last reporter address
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Standby.DefaultContext.Groups.Group.LastReporter, self).__init__()

                            self.yang_name = "last-reporter"
                            self.yang_parent_name = "group"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "last-reporter"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/standby/default-context/groups/group/%s" % self._segment_path()
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Standby.DefaultContext.Groups.Group.LastReporter, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Standby.DefaultContext.Groups.Group.LastReporter']['meta_info']


                    class SourceAddress(_Entity_):
                        """
                        Source Address
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Standby.DefaultContext.Groups.Group.SourceAddress, self).__init__()

                            self.yang_name = "source-address"
                            self.yang_parent_name = "group"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "source-address"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/standby/default-context/groups/group/%s" % self._segment_path()
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Standby.DefaultContext.Groups.Group.SourceAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Standby.DefaultContext.Groups.Group.SourceAddress']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Igmp.Standby.DefaultContext.Groups.Group']['meta_info']

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Igmp.Standby.DefaultContext.Groups']['meta_info']


            class GroupSummary(_Entity_):
                """
                IGMP Groups Summary
                
                .. attribute:: groutes
                
                	No. of (\*,G) routes
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: sg_routes
                
                	No. of (S,G) routes
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: group_count
                
                	Current groups accepted
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: is_low_memory
                
                	Node is running low on memory
                	**type**\: bool
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Igmp.Standby.DefaultContext.GroupSummary, self).__init__()

                    self.yang_name = "group-summary"
                    self.yang_parent_name = "default-context"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('groutes', (YLeaf(YType.uint32, 'groutes'), ['int'])),
                        ('sg_routes', (YLeaf(YType.uint32, 'sg-routes'), ['int'])),
                        ('group_count', (YLeaf(YType.uint32, 'group-count'), ['int'])),
                        ('is_low_memory', (YLeaf(YType.boolean, 'is-low-memory'), ['bool'])),
                    ])
                    self.groutes = None
                    self.sg_routes = None
                    self.group_count = None
                    self.is_low_memory = None
                    self._segment_path = lambda: "group-summary"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/standby/default-context/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Igmp.Standby.DefaultContext.GroupSummary, ['groutes', 'sg_routes', 'group_count', 'is_low_memory'], name, value)

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Igmp.Standby.DefaultContext.GroupSummary']['meta_info']


            class IfrsInterfaceSummary(_Entity_):
                """
                IGMP IFRS Interface summary
                
                .. attribute:: interface_count
                
                	Interface Count
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: configuration_count
                
                	Configuration count
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Igmp.Standby.DefaultContext.IfrsInterfaceSummary, self).__init__()

                    self.yang_name = "ifrs-interface-summary"
                    self.yang_parent_name = "default-context"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('interface_count', (YLeaf(YType.uint32, 'interface-count'), ['int'])),
                        ('configuration_count', (YLeaf(YType.uint32, 'configuration-count'), ['int'])),
                    ])
                    self.interface_count = None
                    self.configuration_count = None
                    self._segment_path = lambda: "ifrs-interface-summary"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/standby/default-context/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Igmp.Standby.DefaultContext.IfrsInterfaceSummary, ['interface_count', 'configuration_count'], name, value)

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Igmp.Standby.DefaultContext.IfrsInterfaceSummary']['meta_info']


            class GlobalInterfaceTable(_Entity_):
                """
                IGMP Global Interface 
                
                .. attribute:: interface
                
                	IGMP Interface
                	**type**\: list of  		 :py:class:`Interface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.GlobalInterfaceTable.Interface>`
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Igmp.Standby.DefaultContext.GlobalInterfaceTable, self).__init__()

                    self.yang_name = "global-interface-table"
                    self.yang_parent_name = "default-context"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("interface", ("interface", Igmp.Standby.DefaultContext.GlobalInterfaceTable.Interface))])
                    self._leafs = OrderedDict()

                    self.interface = YList(self)
                    self._segment_path = lambda: "global-interface-table"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/standby/default-context/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Igmp.Standby.DefaultContext.GlobalInterfaceTable, [], name, value)


                class Interface(_Entity_):
                    """
                    IGMP Interface
                    
                    .. attribute:: interface_name  (key)
                    
                    	Interface Name
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: address
                    
                    	IP address
                    	**type**\:  :py:class:`Address <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.GlobalInterfaceTable.Interface.Address>`
                    
                    	**config**\: False
                    
                    .. attribute:: querier_address
                    
                    	Address of the Querier
                    	**type**\:  :py:class:`QuerierAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.GlobalInterfaceTable.Interface.QuerierAddress>`
                    
                    	**config**\: False
                    
                    .. attribute:: subscriber_address
                    
                    	Address of subscriber
                    	**type**\:  :py:class:`SubscriberAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.GlobalInterfaceTable.Interface.SubscriberAddress>`
                    
                    	**config**\: False
                    
                    .. attribute:: interface_name_xr
                    
                    	Interface
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: state
                    
                    	Interface state
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: prefix_length
                    
                    	Prefix length
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_interface_up
                    
                    	Is interface up
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_ip_enabled
                    
                    	Is IP enabled
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_router_enabled
                    
                    	Is Router functionality enabled
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: igmp_version
                    
                    	IGMP Router version
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    	**config**\: False
                    
                    .. attribute:: host_version
                    
                    	IGMP Host version
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    	**config**\: False
                    
                    .. attribute:: query_interval
                    
                    	Query Interval value in seconds
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    	**units**\: second
                    
                    .. attribute:: query_timeout
                    
                    	Query Timeout value
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    .. attribute:: query_maximum_response_time
                    
                    	Max Response Timeout value
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    .. attribute:: last_member_query_interval
                    
                    	Last Member Query Interval
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    .. attribute:: group_joins
                    
                    	No. of group joins
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: group_leaves
                    
                    	No. of group leaves
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_querier
                    
                    	Are we querier
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: total_active_groups
                    
                    	Actual number of groups on interface
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: robustness
                    
                    	Robustness Variable value
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: proxy_interface
                    
                    	Proxy interface index
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: querier_uptime
                    
                    	Time since the last querier took over
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    .. attribute:: las_ll_registration_count
                    
                    	LAS reg count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_get_address_count
                    
                    	LAS get addr count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_update_count
                    
                    	LAS Update count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_ll_remove_update_count
                    
                    	LAS LL remove update count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_ll_add_update_count
                    
                    	LAS LL add update count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_null_update_count
                    
                    	LAS Null update count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_unregistration_count
                    
                    	LAS unreg count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_las_request
                    
                    	LAS req
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_las_registered
                    
                    	LAS registered
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: vrf_id
                    
                    	VRF id
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: mte_vrf_id
                    
                    	MTE VRF id
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: location
                    
                    	Location
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: mtu
                    
                    	MTU
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: vrf_state
                    
                    	Vrf State
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_configurationverify
                    
                    	CFG verify
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: configurationvrf_set
                    
                    	CFG vrf set
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: configurationvrf_error
                    
                    	CFG vrf error
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: configuration_mcast_vrf_set
                    
                    	Is mcast set
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: configuration_mcast_vrf_error
                    
                    	Is mcast error
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_im_state_registered
                    
                    	Im state registered
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_subscriber
                    
                    	Subscriber interface
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: subscriber_mode
                    
                    	Subscriber mode
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_identity_present
                    
                    	Subscriber ID or Address available from AAA
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: subscriber_id
                    
                    	ID string of subscriber
                    	**type**\: str
                    
                    	**length:** 0..257
                    
                    	**config**\: False
                    
                    .. attribute:: parent_ifhandle
                    
                    	Parent If Handle
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: time_since_last_query_in_seconds
                    
                    	Time elapsed since last query
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: time_since_last_report_in_seconds
                    
                    	Time elapsed since last report
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: router_uptime_in_seconds
                    
                    	Uptime since router enabled event
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: mte_tuple_count
                    
                    	MTE Tuple count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Igmp.Standby.DefaultContext.GlobalInterfaceTable.Interface, self).__init__()

                        self.yang_name = "interface"
                        self.yang_parent_name = "global-interface-table"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['interface_name']
                        self._child_classes = OrderedDict([("address", ("address", Igmp.Standby.DefaultContext.GlobalInterfaceTable.Interface.Address)), ("querier-address", ("querier_address", Igmp.Standby.DefaultContext.GlobalInterfaceTable.Interface.QuerierAddress)), ("subscriber-address", ("subscriber_address", Igmp.Standby.DefaultContext.GlobalInterfaceTable.Interface.SubscriberAddress))])
                        self._leafs = OrderedDict([
                            ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                            ('interface_name_xr', (YLeaf(YType.str, 'interface-name-xr'), ['str'])),
                            ('state', (YLeaf(YType.uint32, 'state'), ['int'])),
                            ('prefix_length', (YLeaf(YType.uint32, 'prefix-length'), ['int'])),
                            ('is_interface_up', (YLeaf(YType.boolean, 'is-interface-up'), ['bool'])),
                            ('is_ip_enabled', (YLeaf(YType.boolean, 'is-ip-enabled'), ['bool'])),
                            ('is_router_enabled', (YLeaf(YType.boolean, 'is-router-enabled'), ['bool'])),
                            ('igmp_version', (YLeaf(YType.uint8, 'igmp-version'), ['int'])),
                            ('host_version', (YLeaf(YType.uint8, 'host-version'), ['int'])),
                            ('query_interval', (YLeaf(YType.uint16, 'query-interval'), ['int'])),
                            ('query_timeout', (YLeaf(YType.uint16, 'query-timeout'), ['int'])),
                            ('query_maximum_response_time', (YLeaf(YType.uint16, 'query-maximum-response-time'), ['int'])),
                            ('last_member_query_interval', (YLeaf(YType.uint16, 'last-member-query-interval'), ['int'])),
                            ('group_joins', (YLeaf(YType.uint32, 'group-joins'), ['int'])),
                            ('group_leaves', (YLeaf(YType.uint32, 'group-leaves'), ['int'])),
                            ('is_querier', (YLeaf(YType.boolean, 'is-querier'), ['bool'])),
                            ('total_active_groups', (YLeaf(YType.uint32, 'total-active-groups'), ['int'])),
                            ('robustness', (YLeaf(YType.uint32, 'robustness'), ['int'])),
                            ('proxy_interface', (YLeaf(YType.str, 'proxy-interface'), ['str'])),
                            ('querier_uptime', (YLeaf(YType.uint16, 'querier-uptime'), ['int'])),
                            ('las_ll_registration_count', (YLeaf(YType.uint32, 'las-ll-registration-count'), ['int'])),
                            ('las_get_address_count', (YLeaf(YType.uint32, 'las-get-address-count'), ['int'])),
                            ('las_update_count', (YLeaf(YType.uint32, 'las-update-count'), ['int'])),
                            ('las_ll_remove_update_count', (YLeaf(YType.uint32, 'las-ll-remove-update-count'), ['int'])),
                            ('las_ll_add_update_count', (YLeaf(YType.uint32, 'las-ll-add-update-count'), ['int'])),
                            ('las_null_update_count', (YLeaf(YType.uint32, 'las-null-update-count'), ['int'])),
                            ('las_unregistration_count', (YLeaf(YType.uint32, 'las-unregistration-count'), ['int'])),
                            ('is_las_request', (YLeaf(YType.boolean, 'is-las-request'), ['bool'])),
                            ('is_las_registered', (YLeaf(YType.boolean, 'is-las-registered'), ['bool'])),
                            ('vrf_id', (YLeaf(YType.uint32, 'vrf-id'), ['int'])),
                            ('mte_vrf_id', (YLeaf(YType.uint32, 'mte-vrf-id'), ['int'])),
                            ('location', (YLeaf(YType.uint32, 'location'), ['int'])),
                            ('mtu', (YLeaf(YType.uint32, 'mtu'), ['int'])),
                            ('vrf_state', (YLeaf(YType.uint32, 'vrf-state'), ['int'])),
                            ('is_configurationverify', (YLeaf(YType.boolean, 'is-configurationverify'), ['bool'])),
                            ('configurationvrf_set', (YLeaf(YType.boolean, 'configurationvrf-set'), ['bool'])),
                            ('configurationvrf_error', (YLeaf(YType.boolean, 'configurationvrf-error'), ['bool'])),
                            ('configuration_mcast_vrf_set', (YLeaf(YType.boolean, 'configuration-mcast-vrf-set'), ['bool'])),
                            ('configuration_mcast_vrf_error', (YLeaf(YType.boolean, 'configuration-mcast-vrf-error'), ['bool'])),
                            ('is_im_state_registered', (YLeaf(YType.boolean, 'is-im-state-registered'), ['bool'])),
                            ('is_subscriber', (YLeaf(YType.boolean, 'is-subscriber'), ['bool'])),
                            ('subscriber_mode', (YLeaf(YType.uint32, 'subscriber-mode'), ['int'])),
                            ('is_identity_present', (YLeaf(YType.boolean, 'is-identity-present'), ['bool'])),
                            ('subscriber_id', (YLeaf(YType.str, 'subscriber-id'), ['str'])),
                            ('parent_ifhandle', (YLeaf(YType.str, 'parent-ifhandle'), ['str'])),
                            ('time_since_last_query_in_seconds', (YLeaf(YType.uint32, 'time-since-last-query-in-seconds'), ['int'])),
                            ('time_since_last_report_in_seconds', (YLeaf(YType.uint32, 'time-since-last-report-in-seconds'), ['int'])),
                            ('router_uptime_in_seconds', (YLeaf(YType.uint32, 'router-uptime-in-seconds'), ['int'])),
                            ('mte_tuple_count', (YLeaf(YType.uint32, 'mte-tuple-count'), ['int'])),
                        ])
                        self.interface_name = None
                        self.interface_name_xr = None
                        self.state = None
                        self.prefix_length = None
                        self.is_interface_up = None
                        self.is_ip_enabled = None
                        self.is_router_enabled = None
                        self.igmp_version = None
                        self.host_version = None
                        self.query_interval = None
                        self.query_timeout = None
                        self.query_maximum_response_time = None
                        self.last_member_query_interval = None
                        self.group_joins = None
                        self.group_leaves = None
                        self.is_querier = None
                        self.total_active_groups = None
                        self.robustness = None
                        self.proxy_interface = None
                        self.querier_uptime = None
                        self.las_ll_registration_count = None
                        self.las_get_address_count = None
                        self.las_update_count = None
                        self.las_ll_remove_update_count = None
                        self.las_ll_add_update_count = None
                        self.las_null_update_count = None
                        self.las_unregistration_count = None
                        self.is_las_request = None
                        self.is_las_registered = None
                        self.vrf_id = None
                        self.mte_vrf_id = None
                        self.location = None
                        self.mtu = None
                        self.vrf_state = None
                        self.is_configurationverify = None
                        self.configurationvrf_set = None
                        self.configurationvrf_error = None
                        self.configuration_mcast_vrf_set = None
                        self.configuration_mcast_vrf_error = None
                        self.is_im_state_registered = None
                        self.is_subscriber = None
                        self.subscriber_mode = None
                        self.is_identity_present = None
                        self.subscriber_id = None
                        self.parent_ifhandle = None
                        self.time_since_last_query_in_seconds = None
                        self.time_since_last_report_in_seconds = None
                        self.router_uptime_in_seconds = None
                        self.mte_tuple_count = None

                        self.address = Igmp.Standby.DefaultContext.GlobalInterfaceTable.Interface.Address()
                        self.address.parent = self
                        self._children_name_map["address"] = "address"

                        self.querier_address = Igmp.Standby.DefaultContext.GlobalInterfaceTable.Interface.QuerierAddress()
                        self.querier_address.parent = self
                        self._children_name_map["querier_address"] = "querier-address"

                        self.subscriber_address = Igmp.Standby.DefaultContext.GlobalInterfaceTable.Interface.SubscriberAddress()
                        self.subscriber_address.parent = self
                        self._children_name_map["subscriber_address"] = "subscriber-address"
                        self._segment_path = lambda: "interface" + "[interface-name='" + str(self.interface_name) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/standby/default-context/global-interface-table/%s" % self._segment_path()
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Igmp.Standby.DefaultContext.GlobalInterfaceTable.Interface, ['interface_name', 'interface_name_xr', 'state', 'prefix_length', 'is_interface_up', 'is_ip_enabled', 'is_router_enabled', 'igmp_version', 'host_version', 'query_interval', 'query_timeout', 'query_maximum_response_time', 'last_member_query_interval', 'group_joins', 'group_leaves', 'is_querier', 'total_active_groups', 'robustness', 'proxy_interface', 'querier_uptime', 'las_ll_registration_count', 'las_get_address_count', 'las_update_count', 'las_ll_remove_update_count', 'las_ll_add_update_count', 'las_null_update_count', 'las_unregistration_count', 'is_las_request', 'is_las_registered', 'vrf_id', 'mte_vrf_id', 'location', 'mtu', 'vrf_state', 'is_configurationverify', 'configurationvrf_set', 'configurationvrf_error', 'configuration_mcast_vrf_set', 'configuration_mcast_vrf_error', 'is_im_state_registered', 'is_subscriber', 'subscriber_mode', 'is_identity_present', 'subscriber_id', 'parent_ifhandle', 'time_since_last_query_in_seconds', 'time_since_last_report_in_seconds', 'router_uptime_in_seconds', 'mte_tuple_count'], name, value)


                    class Address(_Entity_):
                        """
                        IP address
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Standby.DefaultContext.GlobalInterfaceTable.Interface.Address, self).__init__()

                            self.yang_name = "address"
                            self.yang_parent_name = "interface"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "address"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Standby.DefaultContext.GlobalInterfaceTable.Interface.Address, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Standby.DefaultContext.GlobalInterfaceTable.Interface.Address']['meta_info']


                    class QuerierAddress(_Entity_):
                        """
                        Address of the Querier
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Standby.DefaultContext.GlobalInterfaceTable.Interface.QuerierAddress, self).__init__()

                            self.yang_name = "querier-address"
                            self.yang_parent_name = "interface"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "querier-address"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Standby.DefaultContext.GlobalInterfaceTable.Interface.QuerierAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Standby.DefaultContext.GlobalInterfaceTable.Interface.QuerierAddress']['meta_info']


                    class SubscriberAddress(_Entity_):
                        """
                        Address of subscriber
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Standby.DefaultContext.GlobalInterfaceTable.Interface.SubscriberAddress, self).__init__()

                            self.yang_name = "subscriber-address"
                            self.yang_parent_name = "interface"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "subscriber-address"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Standby.DefaultContext.GlobalInterfaceTable.Interface.SubscriberAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Standby.DefaultContext.GlobalInterfaceTable.Interface.SubscriberAddress']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Igmp.Standby.DefaultContext.GlobalInterfaceTable.Interface']['meta_info']

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Igmp.Standby.DefaultContext.GlobalInterfaceTable']['meta_info']


            class SsmMapDetails(_Entity_):
                """
                SSM Map Detail
                
                .. attribute:: ssm_map_detail
                
                	SSM Map Detail Table information
                	**type**\: list of  		 :py:class:`SsmMapDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.SsmMapDetails.SsmMapDetail>`
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Igmp.Standby.DefaultContext.SsmMapDetails, self).__init__()

                    self.yang_name = "ssm-map-details"
                    self.yang_parent_name = "default-context"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("ssm-map-detail", ("ssm_map_detail", Igmp.Standby.DefaultContext.SsmMapDetails.SsmMapDetail))])
                    self._leafs = OrderedDict()

                    self.ssm_map_detail = YList(self)
                    self._segment_path = lambda: "ssm-map-details"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/standby/default-context/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Igmp.Standby.DefaultContext.SsmMapDetails, [], name, value)


                class SsmMapDetail(_Entity_):
                    """
                    SSM Map Detail Table information
                    
                    .. attribute:: ssm_map_type
                    
                    	SSM Map Type
                    	**type**\:  :py:class:`IgmpssmMap <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpssmMap>`
                    
                    	**config**\: False
                    
                    .. attribute:: group_address
                    
                    	Group address
                    	**type**\: union of the below types:
                    
                    		**type**\: str
                    
                    			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    		**type**\: str
                    
                    			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    	**config**\: False
                    
                    .. attribute:: map_info
                    
                    	Basic Map Info
                    	**type**\:  :py:class:`MapInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.SsmMapDetails.SsmMapDetail.MapInfo>`
                    
                    	**config**\: False
                    
                    .. attribute:: expiration_time
                    
                    	Expiration Time in Seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    	**units**\: second
                    
                    .. attribute:: response_pending
                    
                    	Response Pending
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: query_interval
                    
                    	Query interval
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: elapsed_time
                    
                    	Elapsed time
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**config**\: False
                    
                    .. attribute:: sources
                    
                    	List of sources
                    	**type**\: list of  		 :py:class:`Sources <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.SsmMapDetails.SsmMapDetail.Sources>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Igmp.Standby.DefaultContext.SsmMapDetails.SsmMapDetail, self).__init__()

                        self.yang_name = "ssm-map-detail"
                        self.yang_parent_name = "ssm-map-details"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("map-info", ("map_info", Igmp.Standby.DefaultContext.SsmMapDetails.SsmMapDetail.MapInfo)), ("sources", ("sources", Igmp.Standby.DefaultContext.SsmMapDetails.SsmMapDetail.Sources))])
                        self._leafs = OrderedDict([
                            ('ssm_map_type', (YLeaf(YType.enumeration, 'ssm-map-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpssmMap', '')])),
                            ('group_address', (YLeaf(YType.str, 'group-address'), ['str','str'])),
                            ('expiration_time', (YLeaf(YType.uint32, 'expiration-time'), ['int'])),
                            ('response_pending', (YLeaf(YType.boolean, 'response-pending'), ['bool'])),
                            ('query_interval', (YLeaf(YType.uint32, 'query-interval'), ['int'])),
                            ('elapsed_time', (YLeaf(YType.uint64, 'elapsed-time'), ['int'])),
                        ])
                        self.ssm_map_type = None
                        self.group_address = None
                        self.expiration_time = None
                        self.response_pending = None
                        self.query_interval = None
                        self.elapsed_time = None

                        self.map_info = Igmp.Standby.DefaultContext.SsmMapDetails.SsmMapDetail.MapInfo()
                        self.map_info.parent = self
                        self._children_name_map["map_info"] = "map-info"

                        self.sources = YList(self)
                        self._segment_path = lambda: "ssm-map-detail"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/standby/default-context/ssm-map-details/%s" % self._segment_path()
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Igmp.Standby.DefaultContext.SsmMapDetails.SsmMapDetail, ['ssm_map_type', 'group_address', 'expiration_time', 'response_pending', 'query_interval', 'elapsed_time'], name, value)


                    class MapInfo(_Entity_):
                        """
                        Basic Map Info
                        
                        .. attribute:: group_address_xr
                        
                        	Group Address
                        	**type**\:  :py:class:`GroupAddressXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.SsmMapDetails.SsmMapDetail.MapInfo.GroupAddressXr>`
                        
                        	**config**\: False
                        
                        .. attribute:: map_type
                        
                        	Map Type of group
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: source_counts
                        
                        	Count of Sources
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Standby.DefaultContext.SsmMapDetails.SsmMapDetail.MapInfo, self).__init__()

                            self.yang_name = "map-info"
                            self.yang_parent_name = "ssm-map-detail"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("group-address-xr", ("group_address_xr", Igmp.Standby.DefaultContext.SsmMapDetails.SsmMapDetail.MapInfo.GroupAddressXr))])
                            self._leafs = OrderedDict([
                                ('map_type', (YLeaf(YType.uint32, 'map-type'), ['int'])),
                                ('source_counts', (YLeaf(YType.uint32, 'source-counts'), ['int'])),
                            ])
                            self.map_type = None
                            self.source_counts = None

                            self.group_address_xr = Igmp.Standby.DefaultContext.SsmMapDetails.SsmMapDetail.MapInfo.GroupAddressXr()
                            self.group_address_xr.parent = self
                            self._children_name_map["group_address_xr"] = "group-address-xr"
                            self._segment_path = lambda: "map-info"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/standby/default-context/ssm-map-details/ssm-map-detail/%s" % self._segment_path()
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Standby.DefaultContext.SsmMapDetails.SsmMapDetail.MapInfo, ['map_type', 'source_counts'], name, value)


                        class GroupAddressXr(_Entity_):
                            """
                            Group Address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Standby.DefaultContext.SsmMapDetails.SsmMapDetail.MapInfo.GroupAddressXr, self).__init__()

                                self.yang_name = "group-address-xr"
                                self.yang_parent_name = "map-info"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "group-address-xr"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/standby/default-context/ssm-map-details/ssm-map-detail/map-info/%s" % self._segment_path()
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Standby.DefaultContext.SsmMapDetails.SsmMapDetail.MapInfo.GroupAddressXr, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Standby.DefaultContext.SsmMapDetails.SsmMapDetail.MapInfo.GroupAddressXr']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Standby.DefaultContext.SsmMapDetails.SsmMapDetail.MapInfo']['meta_info']


                    class Sources(_Entity_):
                        """
                        List of sources
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Standby.DefaultContext.SsmMapDetails.SsmMapDetail.Sources, self).__init__()

                            self.yang_name = "sources"
                            self.yang_parent_name = "ssm-map-detail"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "sources"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/standby/default-context/ssm-map-details/ssm-map-detail/%s" % self._segment_path()
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Standby.DefaultContext.SsmMapDetails.SsmMapDetail.Sources, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Standby.DefaultContext.SsmMapDetails.SsmMapDetail.Sources']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Igmp.Standby.DefaultContext.SsmMapDetails.SsmMapDetail']['meta_info']

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Igmp.Standby.DefaultContext.SsmMapDetails']['meta_info']


            class InterfaceStateOffs(_Entity_):
                """
                IGMP Interface state off
                
                .. attribute:: interface_state_off
                
                	IGMP Interface
                	**type**\: list of  		 :py:class:`InterfaceStateOff <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.InterfaceStateOffs.InterfaceStateOff>`
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Igmp.Standby.DefaultContext.InterfaceStateOffs, self).__init__()

                    self.yang_name = "interface-state-offs"
                    self.yang_parent_name = "default-context"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("interface-state-off", ("interface_state_off", Igmp.Standby.DefaultContext.InterfaceStateOffs.InterfaceStateOff))])
                    self._leafs = OrderedDict()

                    self.interface_state_off = YList(self)
                    self._segment_path = lambda: "interface-state-offs"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/standby/default-context/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Igmp.Standby.DefaultContext.InterfaceStateOffs, [], name, value)


                class InterfaceStateOff(_Entity_):
                    """
                    IGMP Interface
                    
                    .. attribute:: interface_name  (key)
                    
                    	Interface Name
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: address
                    
                    	IP address
                    	**type**\:  :py:class:`Address <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.InterfaceStateOffs.InterfaceStateOff.Address>`
                    
                    	**config**\: False
                    
                    .. attribute:: querier_address
                    
                    	Address of the Querier
                    	**type**\:  :py:class:`QuerierAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.InterfaceStateOffs.InterfaceStateOff.QuerierAddress>`
                    
                    	**config**\: False
                    
                    .. attribute:: subscriber_address
                    
                    	Address of subscriber
                    	**type**\:  :py:class:`SubscriberAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Standby.DefaultContext.InterfaceStateOffs.InterfaceStateOff.SubscriberAddress>`
                    
                    	**config**\: False
                    
                    .. attribute:: interface_name_xr
                    
                    	Interface
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: state
                    
                    	Interface state
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: prefix_length
                    
                    	Prefix length
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_interface_up
                    
                    	Is interface up
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_ip_enabled
                    
                    	Is IP enabled
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_router_enabled
                    
                    	Is Router functionality enabled
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: igmp_version
                    
                    	IGMP Router version
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    	**config**\: False
                    
                    .. attribute:: host_version
                    
                    	IGMP Host version
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    	**config**\: False
                    
                    .. attribute:: query_interval
                    
                    	Query Interval value in seconds
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    	**units**\: second
                    
                    .. attribute:: query_timeout
                    
                    	Query Timeout value
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    .. attribute:: query_maximum_response_time
                    
                    	Max Response Timeout value
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    .. attribute:: last_member_query_interval
                    
                    	Last Member Query Interval
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    .. attribute:: group_joins
                    
                    	No. of group joins
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: group_leaves
                    
                    	No. of group leaves
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_querier
                    
                    	Are we querier
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: total_active_groups
                    
                    	Actual number of groups on interface
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: robustness
                    
                    	Robustness Variable value
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: proxy_interface
                    
                    	Proxy interface index
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: querier_uptime
                    
                    	Time since the last querier took over
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    .. attribute:: las_ll_registration_count
                    
                    	LAS reg count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_get_address_count
                    
                    	LAS get addr count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_update_count
                    
                    	LAS Update count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_ll_remove_update_count
                    
                    	LAS LL remove update count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_ll_add_update_count
                    
                    	LAS LL add update count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_null_update_count
                    
                    	LAS Null update count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_unregistration_count
                    
                    	LAS unreg count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_las_request
                    
                    	LAS req
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_las_registered
                    
                    	LAS registered
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: vrf_id
                    
                    	VRF id
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: mte_vrf_id
                    
                    	MTE VRF id
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: location
                    
                    	Location
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: mtu
                    
                    	MTU
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: vrf_state
                    
                    	Vrf State
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_configurationverify
                    
                    	CFG verify
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: configurationvrf_set
                    
                    	CFG vrf set
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: configurationvrf_error
                    
                    	CFG vrf error
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: configuration_mcast_vrf_set
                    
                    	Is mcast set
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: configuration_mcast_vrf_error
                    
                    	Is mcast error
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_im_state_registered
                    
                    	Im state registered
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_subscriber
                    
                    	Subscriber interface
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: subscriber_mode
                    
                    	Subscriber mode
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_identity_present
                    
                    	Subscriber ID or Address available from AAA
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: subscriber_id
                    
                    	ID string of subscriber
                    	**type**\: str
                    
                    	**length:** 0..257
                    
                    	**config**\: False
                    
                    .. attribute:: parent_ifhandle
                    
                    	Parent If Handle
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: time_since_last_query_in_seconds
                    
                    	Time elapsed since last query
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: time_since_last_report_in_seconds
                    
                    	Time elapsed since last report
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: router_uptime_in_seconds
                    
                    	Uptime since router enabled event
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: mte_tuple_count
                    
                    	MTE Tuple count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Igmp.Standby.DefaultContext.InterfaceStateOffs.InterfaceStateOff, self).__init__()

                        self.yang_name = "interface-state-off"
                        self.yang_parent_name = "interface-state-offs"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['interface_name']
                        self._child_classes = OrderedDict([("address", ("address", Igmp.Standby.DefaultContext.InterfaceStateOffs.InterfaceStateOff.Address)), ("querier-address", ("querier_address", Igmp.Standby.DefaultContext.InterfaceStateOffs.InterfaceStateOff.QuerierAddress)), ("subscriber-address", ("subscriber_address", Igmp.Standby.DefaultContext.InterfaceStateOffs.InterfaceStateOff.SubscriberAddress))])
                        self._leafs = OrderedDict([
                            ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                            ('interface_name_xr', (YLeaf(YType.str, 'interface-name-xr'), ['str'])),
                            ('state', (YLeaf(YType.uint32, 'state'), ['int'])),
                            ('prefix_length', (YLeaf(YType.uint32, 'prefix-length'), ['int'])),
                            ('is_interface_up', (YLeaf(YType.boolean, 'is-interface-up'), ['bool'])),
                            ('is_ip_enabled', (YLeaf(YType.boolean, 'is-ip-enabled'), ['bool'])),
                            ('is_router_enabled', (YLeaf(YType.boolean, 'is-router-enabled'), ['bool'])),
                            ('igmp_version', (YLeaf(YType.uint8, 'igmp-version'), ['int'])),
                            ('host_version', (YLeaf(YType.uint8, 'host-version'), ['int'])),
                            ('query_interval', (YLeaf(YType.uint16, 'query-interval'), ['int'])),
                            ('query_timeout', (YLeaf(YType.uint16, 'query-timeout'), ['int'])),
                            ('query_maximum_response_time', (YLeaf(YType.uint16, 'query-maximum-response-time'), ['int'])),
                            ('last_member_query_interval', (YLeaf(YType.uint16, 'last-member-query-interval'), ['int'])),
                            ('group_joins', (YLeaf(YType.uint32, 'group-joins'), ['int'])),
                            ('group_leaves', (YLeaf(YType.uint32, 'group-leaves'), ['int'])),
                            ('is_querier', (YLeaf(YType.boolean, 'is-querier'), ['bool'])),
                            ('total_active_groups', (YLeaf(YType.uint32, 'total-active-groups'), ['int'])),
                            ('robustness', (YLeaf(YType.uint32, 'robustness'), ['int'])),
                            ('proxy_interface', (YLeaf(YType.str, 'proxy-interface'), ['str'])),
                            ('querier_uptime', (YLeaf(YType.uint16, 'querier-uptime'), ['int'])),
                            ('las_ll_registration_count', (YLeaf(YType.uint32, 'las-ll-registration-count'), ['int'])),
                            ('las_get_address_count', (YLeaf(YType.uint32, 'las-get-address-count'), ['int'])),
                            ('las_update_count', (YLeaf(YType.uint32, 'las-update-count'), ['int'])),
                            ('las_ll_remove_update_count', (YLeaf(YType.uint32, 'las-ll-remove-update-count'), ['int'])),
                            ('las_ll_add_update_count', (YLeaf(YType.uint32, 'las-ll-add-update-count'), ['int'])),
                            ('las_null_update_count', (YLeaf(YType.uint32, 'las-null-update-count'), ['int'])),
                            ('las_unregistration_count', (YLeaf(YType.uint32, 'las-unregistration-count'), ['int'])),
                            ('is_las_request', (YLeaf(YType.boolean, 'is-las-request'), ['bool'])),
                            ('is_las_registered', (YLeaf(YType.boolean, 'is-las-registered'), ['bool'])),
                            ('vrf_id', (YLeaf(YType.uint32, 'vrf-id'), ['int'])),
                            ('mte_vrf_id', (YLeaf(YType.uint32, 'mte-vrf-id'), ['int'])),
                            ('location', (YLeaf(YType.uint32, 'location'), ['int'])),
                            ('mtu', (YLeaf(YType.uint32, 'mtu'), ['int'])),
                            ('vrf_state', (YLeaf(YType.uint32, 'vrf-state'), ['int'])),
                            ('is_configurationverify', (YLeaf(YType.boolean, 'is-configurationverify'), ['bool'])),
                            ('configurationvrf_set', (YLeaf(YType.boolean, 'configurationvrf-set'), ['bool'])),
                            ('configurationvrf_error', (YLeaf(YType.boolean, 'configurationvrf-error'), ['bool'])),
                            ('configuration_mcast_vrf_set', (YLeaf(YType.boolean, 'configuration-mcast-vrf-set'), ['bool'])),
                            ('configuration_mcast_vrf_error', (YLeaf(YType.boolean, 'configuration-mcast-vrf-error'), ['bool'])),
                            ('is_im_state_registered', (YLeaf(YType.boolean, 'is-im-state-registered'), ['bool'])),
                            ('is_subscriber', (YLeaf(YType.boolean, 'is-subscriber'), ['bool'])),
                            ('subscriber_mode', (YLeaf(YType.uint32, 'subscriber-mode'), ['int'])),
                            ('is_identity_present', (YLeaf(YType.boolean, 'is-identity-present'), ['bool'])),
                            ('subscriber_id', (YLeaf(YType.str, 'subscriber-id'), ['str'])),
                            ('parent_ifhandle', (YLeaf(YType.str, 'parent-ifhandle'), ['str'])),
                            ('time_since_last_query_in_seconds', (YLeaf(YType.uint32, 'time-since-last-query-in-seconds'), ['int'])),
                            ('time_since_last_report_in_seconds', (YLeaf(YType.uint32, 'time-since-last-report-in-seconds'), ['int'])),
                            ('router_uptime_in_seconds', (YLeaf(YType.uint32, 'router-uptime-in-seconds'), ['int'])),
                            ('mte_tuple_count', (YLeaf(YType.uint32, 'mte-tuple-count'), ['int'])),
                        ])
                        self.interface_name = None
                        self.interface_name_xr = None
                        self.state = None
                        self.prefix_length = None
                        self.is_interface_up = None
                        self.is_ip_enabled = None
                        self.is_router_enabled = None
                        self.igmp_version = None
                        self.host_version = None
                        self.query_interval = None
                        self.query_timeout = None
                        self.query_maximum_response_time = None
                        self.last_member_query_interval = None
                        self.group_joins = None
                        self.group_leaves = None
                        self.is_querier = None
                        self.total_active_groups = None
                        self.robustness = None
                        self.proxy_interface = None
                        self.querier_uptime = None
                        self.las_ll_registration_count = None
                        self.las_get_address_count = None
                        self.las_update_count = None
                        self.las_ll_remove_update_count = None
                        self.las_ll_add_update_count = None
                        self.las_null_update_count = None
                        self.las_unregistration_count = None
                        self.is_las_request = None
                        self.is_las_registered = None
                        self.vrf_id = None
                        self.mte_vrf_id = None
                        self.location = None
                        self.mtu = None
                        self.vrf_state = None
                        self.is_configurationverify = None
                        self.configurationvrf_set = None
                        self.configurationvrf_error = None
                        self.configuration_mcast_vrf_set = None
                        self.configuration_mcast_vrf_error = None
                        self.is_im_state_registered = None
                        self.is_subscriber = None
                        self.subscriber_mode = None
                        self.is_identity_present = None
                        self.subscriber_id = None
                        self.parent_ifhandle = None
                        self.time_since_last_query_in_seconds = None
                        self.time_since_last_report_in_seconds = None
                        self.router_uptime_in_seconds = None
                        self.mte_tuple_count = None

                        self.address = Igmp.Standby.DefaultContext.InterfaceStateOffs.InterfaceStateOff.Address()
                        self.address.parent = self
                        self._children_name_map["address"] = "address"

                        self.querier_address = Igmp.Standby.DefaultContext.InterfaceStateOffs.InterfaceStateOff.QuerierAddress()
                        self.querier_address.parent = self
                        self._children_name_map["querier_address"] = "querier-address"

                        self.subscriber_address = Igmp.Standby.DefaultContext.InterfaceStateOffs.InterfaceStateOff.SubscriberAddress()
                        self.subscriber_address.parent = self
                        self._children_name_map["subscriber_address"] = "subscriber-address"
                        self._segment_path = lambda: "interface-state-off" + "[interface-name='" + str(self.interface_name) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/standby/default-context/interface-state-offs/%s" % self._segment_path()
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Igmp.Standby.DefaultContext.InterfaceStateOffs.InterfaceStateOff, ['interface_name', 'interface_name_xr', 'state', 'prefix_length', 'is_interface_up', 'is_ip_enabled', 'is_router_enabled', 'igmp_version', 'host_version', 'query_interval', 'query_timeout', 'query_maximum_response_time', 'last_member_query_interval', 'group_joins', 'group_leaves', 'is_querier', 'total_active_groups', 'robustness', 'proxy_interface', 'querier_uptime', 'las_ll_registration_count', 'las_get_address_count', 'las_update_count', 'las_ll_remove_update_count', 'las_ll_add_update_count', 'las_null_update_count', 'las_unregistration_count', 'is_las_request', 'is_las_registered', 'vrf_id', 'mte_vrf_id', 'location', 'mtu', 'vrf_state', 'is_configurationverify', 'configurationvrf_set', 'configurationvrf_error', 'configuration_mcast_vrf_set', 'configuration_mcast_vrf_error', 'is_im_state_registered', 'is_subscriber', 'subscriber_mode', 'is_identity_present', 'subscriber_id', 'parent_ifhandle', 'time_since_last_query_in_seconds', 'time_since_last_report_in_seconds', 'router_uptime_in_seconds', 'mte_tuple_count'], name, value)


                    class Address(_Entity_):
                        """
                        IP address
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Standby.DefaultContext.InterfaceStateOffs.InterfaceStateOff.Address, self).__init__()

                            self.yang_name = "address"
                            self.yang_parent_name = "interface-state-off"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "address"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Standby.DefaultContext.InterfaceStateOffs.InterfaceStateOff.Address, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Standby.DefaultContext.InterfaceStateOffs.InterfaceStateOff.Address']['meta_info']


                    class QuerierAddress(_Entity_):
                        """
                        Address of the Querier
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Standby.DefaultContext.InterfaceStateOffs.InterfaceStateOff.QuerierAddress, self).__init__()

                            self.yang_name = "querier-address"
                            self.yang_parent_name = "interface-state-off"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "querier-address"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Standby.DefaultContext.InterfaceStateOffs.InterfaceStateOff.QuerierAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Standby.DefaultContext.InterfaceStateOffs.InterfaceStateOff.QuerierAddress']['meta_info']


                    class SubscriberAddress(_Entity_):
                        """
                        Address of subscriber
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Standby.DefaultContext.InterfaceStateOffs.InterfaceStateOff.SubscriberAddress, self).__init__()

                            self.yang_name = "subscriber-address"
                            self.yang_parent_name = "interface-state-off"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "subscriber-address"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Standby.DefaultContext.InterfaceStateOffs.InterfaceStateOff.SubscriberAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Standby.DefaultContext.InterfaceStateOffs.InterfaceStateOff.SubscriberAddress']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Igmp.Standby.DefaultContext.InterfaceStateOffs.InterfaceStateOff']['meta_info']

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Igmp.Standby.DefaultContext.InterfaceStateOffs']['meta_info']

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                return meta._meta_table['Igmp.Standby.DefaultContext']['meta_info']

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
            return meta._meta_table['Igmp.Standby']['meta_info']


    class Active(_Entity_):
        """
        Active Process
        
        .. attribute:: vrfs
        
        	VRF Table
        	**type**\:  :py:class:`Vrfs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs>`
        
        	**config**\: False
        
        .. attribute:: process
        
        	Process
        	**type**\:  :py:class:`Process <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Process>`
        
        	**config**\: False
        
        .. attribute:: default_context
        
        	Default Context
        	**type**\:  :py:class:`DefaultContext <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext>`
        
        	**config**\: False
        
        

        """

        _prefix = 'ipv4-igmp-oper'
        _revision = '2018-01-31'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(Igmp.Active, self).__init__()

            self.yang_name = "active"
            self.yang_parent_name = "igmp"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([("vrfs", ("vrfs", Igmp.Active.Vrfs)), ("process", ("process", Igmp.Active.Process)), ("default-context", ("default_context", Igmp.Active.DefaultContext))])
            self._leafs = OrderedDict()

            self.vrfs = Igmp.Active.Vrfs()
            self.vrfs.parent = self
            self._children_name_map["vrfs"] = "vrfs"

            self.process = Igmp.Active.Process()
            self.process.parent = self
            self._children_name_map["process"] = "process"

            self.default_context = Igmp.Active.DefaultContext()
            self.default_context.parent = self
            self._children_name_map["default_context"] = "default-context"
            self._segment_path = lambda: "active"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(Igmp.Active, [], name, value)


        class Vrfs(_Entity_):
            """
            VRF Table
            
            .. attribute:: vrf
            
            	VRF table Names
            	**type**\: list of  		 :py:class:`Vrf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf>`
            
            	**config**\: False
            
            

            """

            _prefix = 'ipv4-igmp-oper'
            _revision = '2018-01-31'

            def __init__(self):
                if sys.version_info > (3,):
                    super().__init__()
                else:
                    super(Igmp.Active.Vrfs, self).__init__()

                self.yang_name = "vrfs"
                self.yang_parent_name = "active"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("vrf", ("vrf", Igmp.Active.Vrfs.Vrf))])
                self._leafs = OrderedDict()

                self.vrf = YList(self)
                self._segment_path = lambda: "vrfs"
                self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/active/%s" % self._segment_path()
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(Igmp.Active.Vrfs, [], name, value)


            class Vrf(_Entity_):
                """
                VRF table Names
                
                .. attribute:: vrf_name  (key)
                
                	VRF name
                	**type**\: str
                
                	**length:** 1..32
                
                	**config**\: False
                
                .. attribute:: summary
                
                	IGMP Summary Information
                	**type**\:  :py:class:`Summary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.Summary>`
                
                	**config**\: False
                
                .. attribute:: interface_state_ons
                
                	IGMP Interface state on
                	**type**\:  :py:class:`InterfaceStateOns <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.InterfaceStateOns>`
                
                	**config**\: False
                
                .. attribute:: detail_groups
                
                	IGMP Detail Group Database
                	**type**\:  :py:class:`DetailGroups <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.DetailGroups>`
                
                	**config**\: False
                
                .. attribute:: non_active_groups
                
                	IGMP Non\-Active Groups Information
                	**type**\:  :py:class:`NonActiveGroups <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.NonActiveGroups>`
                
                	**config**\: False
                
                .. attribute:: ssm_maps
                
                	SSM Map Table
                	**type**\:  :py:class:`SsmMaps <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.SsmMaps>`
                
                	**config**\: False
                
                .. attribute:: explicit_groups
                
                	IGMP Explicit Group Database
                	**type**\:  :py:class:`ExplicitGroups <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.ExplicitGroups>`
                
                	**config**\: False
                
                .. attribute:: interface_table
                
                	IGMP Interface specific Table
                	**type**\:  :py:class:`InterfaceTable <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.InterfaceTable>`
                
                	**config**\: False
                
                .. attribute:: interface_unicast_qos_adjusts
                
                	IGMP Interface Unicast\-Qos\-Adjust
                	**type**\:  :py:class:`InterfaceUnicastQosAdjusts <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.InterfaceUnicastQosAdjusts>`
                
                	**config**\: False
                
                .. attribute:: ranges
                
                	Range table
                	**type**\:  :py:class:`Ranges <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.Ranges>`
                
                	**config**\: False
                
                .. attribute:: ifrs_interfaces
                
                	IGMP Interface specific
                	**type**\:  :py:class:`IfrsInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.IfrsInterfaces>`
                
                	**config**\: False
                
                .. attribute:: traffic_counters
                
                	IGMP Message Traffic Counters
                	**type**\:  :py:class:`TrafficCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.TrafficCounters>`
                
                	**config**\: False
                
                .. attribute:: groups
                
                	IGMP Group Database Table
                	**type**\:  :py:class:`Groups <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.Groups>`
                
                	**config**\: False
                
                .. attribute:: group_summary
                
                	IGMP Groups Summary
                	**type**\:  :py:class:`GroupSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.GroupSummary>`
                
                	**config**\: False
                
                .. attribute:: ifrs_interface_summary
                
                	IGMP IFRS Interface summary
                	**type**\:  :py:class:`IfrsInterfaceSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.IfrsInterfaceSummary>`
                
                	**config**\: False
                
                .. attribute:: global_interface_table
                
                	IGMP Global Interface 
                	**type**\:  :py:class:`GlobalInterfaceTable <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.GlobalInterfaceTable>`
                
                	**config**\: False
                
                .. attribute:: ssm_map_details
                
                	SSM Map Detail
                	**type**\:  :py:class:`SsmMapDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.SsmMapDetails>`
                
                	**config**\: False
                
                .. attribute:: interface_state_offs
                
                	IGMP Interface state off
                	**type**\:  :py:class:`InterfaceStateOffs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.InterfaceStateOffs>`
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Igmp.Active.Vrfs.Vrf, self).__init__()

                    self.yang_name = "vrf"
                    self.yang_parent_name = "vrfs"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = ['vrf_name']
                    self._child_classes = OrderedDict([("summary", ("summary", Igmp.Active.Vrfs.Vrf.Summary)), ("interface-state-ons", ("interface_state_ons", Igmp.Active.Vrfs.Vrf.InterfaceStateOns)), ("detail-groups", ("detail_groups", Igmp.Active.Vrfs.Vrf.DetailGroups)), ("non-active-groups", ("non_active_groups", Igmp.Active.Vrfs.Vrf.NonActiveGroups)), ("ssm-maps", ("ssm_maps", Igmp.Active.Vrfs.Vrf.SsmMaps)), ("explicit-groups", ("explicit_groups", Igmp.Active.Vrfs.Vrf.ExplicitGroups)), ("interface-table", ("interface_table", Igmp.Active.Vrfs.Vrf.InterfaceTable)), ("interface-unicast-qos-adjusts", ("interface_unicast_qos_adjusts", Igmp.Active.Vrfs.Vrf.InterfaceUnicastQosAdjusts)), ("ranges", ("ranges", Igmp.Active.Vrfs.Vrf.Ranges)), ("ifrs-interfaces", ("ifrs_interfaces", Igmp.Active.Vrfs.Vrf.IfrsInterfaces)), ("traffic-counters", ("traffic_counters", Igmp.Active.Vrfs.Vrf.TrafficCounters)), ("groups", ("groups", Igmp.Active.Vrfs.Vrf.Groups)), ("group-summary", ("group_summary", Igmp.Active.Vrfs.Vrf.GroupSummary)), ("ifrs-interface-summary", ("ifrs_interface_summary", Igmp.Active.Vrfs.Vrf.IfrsInterfaceSummary)), ("global-interface-table", ("global_interface_table", Igmp.Active.Vrfs.Vrf.GlobalInterfaceTable)), ("ssm-map-details", ("ssm_map_details", Igmp.Active.Vrfs.Vrf.SsmMapDetails)), ("interface-state-offs", ("interface_state_offs", Igmp.Active.Vrfs.Vrf.InterfaceStateOffs))])
                    self._leafs = OrderedDict([
                        ('vrf_name', (YLeaf(YType.str, 'vrf-name'), ['str'])),
                    ])
                    self.vrf_name = None

                    self.summary = Igmp.Active.Vrfs.Vrf.Summary()
                    self.summary.parent = self
                    self._children_name_map["summary"] = "summary"

                    self.interface_state_ons = Igmp.Active.Vrfs.Vrf.InterfaceStateOns()
                    self.interface_state_ons.parent = self
                    self._children_name_map["interface_state_ons"] = "interface-state-ons"

                    self.detail_groups = Igmp.Active.Vrfs.Vrf.DetailGroups()
                    self.detail_groups.parent = self
                    self._children_name_map["detail_groups"] = "detail-groups"

                    self.non_active_groups = Igmp.Active.Vrfs.Vrf.NonActiveGroups()
                    self.non_active_groups.parent = self
                    self._children_name_map["non_active_groups"] = "non-active-groups"

                    self.ssm_maps = Igmp.Active.Vrfs.Vrf.SsmMaps()
                    self.ssm_maps.parent = self
                    self._children_name_map["ssm_maps"] = "ssm-maps"

                    self.explicit_groups = Igmp.Active.Vrfs.Vrf.ExplicitGroups()
                    self.explicit_groups.parent = self
                    self._children_name_map["explicit_groups"] = "explicit-groups"

                    self.interface_table = Igmp.Active.Vrfs.Vrf.InterfaceTable()
                    self.interface_table.parent = self
                    self._children_name_map["interface_table"] = "interface-table"

                    self.interface_unicast_qos_adjusts = Igmp.Active.Vrfs.Vrf.InterfaceUnicastQosAdjusts()
                    self.interface_unicast_qos_adjusts.parent = self
                    self._children_name_map["interface_unicast_qos_adjusts"] = "interface-unicast-qos-adjusts"

                    self.ranges = Igmp.Active.Vrfs.Vrf.Ranges()
                    self.ranges.parent = self
                    self._children_name_map["ranges"] = "ranges"

                    self.ifrs_interfaces = Igmp.Active.Vrfs.Vrf.IfrsInterfaces()
                    self.ifrs_interfaces.parent = self
                    self._children_name_map["ifrs_interfaces"] = "ifrs-interfaces"

                    self.traffic_counters = Igmp.Active.Vrfs.Vrf.TrafficCounters()
                    self.traffic_counters.parent = self
                    self._children_name_map["traffic_counters"] = "traffic-counters"

                    self.groups = Igmp.Active.Vrfs.Vrf.Groups()
                    self.groups.parent = self
                    self._children_name_map["groups"] = "groups"

                    self.group_summary = Igmp.Active.Vrfs.Vrf.GroupSummary()
                    self.group_summary.parent = self
                    self._children_name_map["group_summary"] = "group-summary"

                    self.ifrs_interface_summary = Igmp.Active.Vrfs.Vrf.IfrsInterfaceSummary()
                    self.ifrs_interface_summary.parent = self
                    self._children_name_map["ifrs_interface_summary"] = "ifrs-interface-summary"

                    self.global_interface_table = Igmp.Active.Vrfs.Vrf.GlobalInterfaceTable()
                    self.global_interface_table.parent = self
                    self._children_name_map["global_interface_table"] = "global-interface-table"

                    self.ssm_map_details = Igmp.Active.Vrfs.Vrf.SsmMapDetails()
                    self.ssm_map_details.parent = self
                    self._children_name_map["ssm_map_details"] = "ssm-map-details"

                    self.interface_state_offs = Igmp.Active.Vrfs.Vrf.InterfaceStateOffs()
                    self.interface_state_offs.parent = self
                    self._children_name_map["interface_state_offs"] = "interface-state-offs"
                    self._segment_path = lambda: "vrf" + "[vrf-name='" + str(self.vrf_name) + "']"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/active/vrfs/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Igmp.Active.Vrfs.Vrf, ['vrf_name'], name, value)


                class Summary(_Entity_):
                    """
                    IGMP Summary Information
                    
                    .. attribute:: robustness
                    
                    	Robustness variable
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: group_limit
                    
                    	Maximum groups accepted
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: group_count
                    
                    	Current groups accepted
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_disabled
                    
                    	Is maximum enforcement disabled
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: supported_interfaces
                    
                    	No. of supported interfaces
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: unsupported_interfaces
                    
                    	No. of unsupported interfaces
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: enabled_interface_count
                    
                    	No. of enabled interfaces
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: disabled_interface_count
                    
                    	No. of disabled interfaces
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: tunnel_mte_config_count
                    
                    	No. of static group commands
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: node_low_memory
                    
                    	Is node in low memory condition
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: interface
                    
                    	Maximum and current groups accepted for each interface
                    	**type**\: list of  		 :py:class:`Interface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.Summary.Interface>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Igmp.Active.Vrfs.Vrf.Summary, self).__init__()

                        self.yang_name = "summary"
                        self.yang_parent_name = "vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("interface", ("interface", Igmp.Active.Vrfs.Vrf.Summary.Interface))])
                        self._leafs = OrderedDict([
                            ('robustness', (YLeaf(YType.uint32, 'robustness'), ['int'])),
                            ('group_limit', (YLeaf(YType.uint32, 'group-limit'), ['int'])),
                            ('group_count', (YLeaf(YType.uint32, 'group-count'), ['int'])),
                            ('is_disabled', (YLeaf(YType.boolean, 'is-disabled'), ['bool'])),
                            ('supported_interfaces', (YLeaf(YType.uint32, 'supported-interfaces'), ['int'])),
                            ('unsupported_interfaces', (YLeaf(YType.uint32, 'unsupported-interfaces'), ['int'])),
                            ('enabled_interface_count', (YLeaf(YType.uint32, 'enabled-interface-count'), ['int'])),
                            ('disabled_interface_count', (YLeaf(YType.uint32, 'disabled-interface-count'), ['int'])),
                            ('tunnel_mte_config_count', (YLeaf(YType.uint32, 'tunnel-mte-config-count'), ['int'])),
                            ('node_low_memory', (YLeaf(YType.boolean, 'node-low-memory'), ['bool'])),
                        ])
                        self.robustness = None
                        self.group_limit = None
                        self.group_count = None
                        self.is_disabled = None
                        self.supported_interfaces = None
                        self.unsupported_interfaces = None
                        self.enabled_interface_count = None
                        self.disabled_interface_count = None
                        self.tunnel_mte_config_count = None
                        self.node_low_memory = None

                        self.interface = YList(self)
                        self._segment_path = lambda: "summary"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Igmp.Active.Vrfs.Vrf.Summary, ['robustness', 'group_limit', 'group_count', 'is_disabled', 'supported_interfaces', 'unsupported_interfaces', 'enabled_interface_count', 'disabled_interface_count', 'tunnel_mte_config_count', 'node_low_memory'], name, value)


                    class Interface(_Entity_):
                        """
                        Maximum and current groups accepted for each
                        interface
                        
                        .. attribute:: interface_name
                        
                        	Interface
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: group_limit
                        
                        	Maximum groups accepted per interface
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: group_count
                        
                        	Current groups accepted per interface
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: parent_ifhandle
                        
                        	Parent if handle
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: on_off
                        
                        	Enabled/Disabled
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: time_since_last_query_in_seconds
                        
                        	Time elapsed since last query
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: time_since_last_report_in_seconds
                        
                        	Time elapsed since last report
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: router_uptime_in_seconds
                        
                        	Time elapsed since router enabled event
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Active.Vrfs.Vrf.Summary.Interface, self).__init__()

                            self.yang_name = "interface"
                            self.yang_parent_name = "summary"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                ('group_limit', (YLeaf(YType.uint32, 'group-limit'), ['int'])),
                                ('group_count', (YLeaf(YType.uint32, 'group-count'), ['int'])),
                                ('parent_ifhandle', (YLeaf(YType.str, 'parent-ifhandle'), ['str'])),
                                ('on_off', (YLeaf(YType.boolean, 'on-off'), ['bool'])),
                                ('time_since_last_query_in_seconds', (YLeaf(YType.uint32, 'time-since-last-query-in-seconds'), ['int'])),
                                ('time_since_last_report_in_seconds', (YLeaf(YType.uint32, 'time-since-last-report-in-seconds'), ['int'])),
                                ('router_uptime_in_seconds', (YLeaf(YType.uint32, 'router-uptime-in-seconds'), ['int'])),
                            ])
                            self.interface_name = None
                            self.group_limit = None
                            self.group_count = None
                            self.parent_ifhandle = None
                            self.on_off = None
                            self.time_since_last_query_in_seconds = None
                            self.time_since_last_report_in_seconds = None
                            self.router_uptime_in_seconds = None
                            self._segment_path = lambda: "interface"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Active.Vrfs.Vrf.Summary.Interface, ['interface_name', 'group_limit', 'group_count', 'parent_ifhandle', 'on_off', 'time_since_last_query_in_seconds', 'time_since_last_report_in_seconds', 'router_uptime_in_seconds'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Active.Vrfs.Vrf.Summary.Interface']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Igmp.Active.Vrfs.Vrf.Summary']['meta_info']


                class InterfaceStateOns(_Entity_):
                    """
                    IGMP Interface state on
                    
                    .. attribute:: interface_state_on
                    
                    	IGMP Interface
                    	**type**\: list of  		 :py:class:`InterfaceStateOn <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Igmp.Active.Vrfs.Vrf.InterfaceStateOns, self).__init__()

                        self.yang_name = "interface-state-ons"
                        self.yang_parent_name = "vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("interface-state-on", ("interface_state_on", Igmp.Active.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn))])
                        self._leafs = OrderedDict()

                        self.interface_state_on = YList(self)
                        self._segment_path = lambda: "interface-state-ons"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Igmp.Active.Vrfs.Vrf.InterfaceStateOns, [], name, value)


                    class InterfaceStateOn(_Entity_):
                        """
                        IGMP Interface
                        
                        .. attribute:: interface_name  (key)
                        
                        	Interface Name
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: address
                        
                        	IP address
                        	**type**\:  :py:class:`Address <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.Address>`
                        
                        	**config**\: False
                        
                        .. attribute:: querier_address
                        
                        	Address of the Querier
                        	**type**\:  :py:class:`QuerierAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.QuerierAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: subscriber_address
                        
                        	Address of subscriber
                        	**type**\:  :py:class:`SubscriberAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.SubscriberAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: interface_name_xr
                        
                        	Interface
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: state
                        
                        	Interface state
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: prefix_length
                        
                        	Prefix length
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_interface_up
                        
                        	Is interface up
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_ip_enabled
                        
                        	Is IP enabled
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_router_enabled
                        
                        	Is Router functionality enabled
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: igmp_version
                        
                        	IGMP Router version
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        	**config**\: False
                        
                        .. attribute:: host_version
                        
                        	IGMP Host version
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        	**config**\: False
                        
                        .. attribute:: query_interval
                        
                        	Query Interval value in seconds
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        	**units**\: second
                        
                        .. attribute:: query_timeout
                        
                        	Query Timeout value
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: query_maximum_response_time
                        
                        	Max Response Timeout value
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: last_member_query_interval
                        
                        	Last Member Query Interval
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: group_joins
                        
                        	No. of group joins
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: group_leaves
                        
                        	No. of group leaves
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_querier
                        
                        	Are we querier
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: total_active_groups
                        
                        	Actual number of groups on interface
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: robustness
                        
                        	Robustness Variable value
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: proxy_interface
                        
                        	Proxy interface index
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: querier_uptime
                        
                        	Time since the last querier took over
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: las_ll_registration_count
                        
                        	LAS reg count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_get_address_count
                        
                        	LAS get addr count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_update_count
                        
                        	LAS Update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_ll_remove_update_count
                        
                        	LAS LL remove update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_ll_add_update_count
                        
                        	LAS LL add update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_null_update_count
                        
                        	LAS Null update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_unregistration_count
                        
                        	LAS unreg count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_las_request
                        
                        	LAS req
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_las_registered
                        
                        	LAS registered
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: vrf_id
                        
                        	VRF id
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: mte_vrf_id
                        
                        	MTE VRF id
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: location
                        
                        	Location
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: mtu
                        
                        	MTU
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: vrf_state
                        
                        	Vrf State
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_configurationverify
                        
                        	CFG verify
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configurationvrf_set
                        
                        	CFG vrf set
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configurationvrf_error
                        
                        	CFG vrf error
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configuration_mcast_vrf_set
                        
                        	Is mcast set
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configuration_mcast_vrf_error
                        
                        	Is mcast error
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_im_state_registered
                        
                        	Im state registered
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_subscriber
                        
                        	Subscriber interface
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: subscriber_mode
                        
                        	Subscriber mode
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_identity_present
                        
                        	Subscriber ID or Address available from AAA
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: subscriber_id
                        
                        	ID string of subscriber
                        	**type**\: str
                        
                        	**length:** 0..257
                        
                        	**config**\: False
                        
                        .. attribute:: parent_ifhandle
                        
                        	Parent If Handle
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: time_since_last_query_in_seconds
                        
                        	Time elapsed since last query
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: time_since_last_report_in_seconds
                        
                        	Time elapsed since last report
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: router_uptime_in_seconds
                        
                        	Uptime since router enabled event
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: mte_tuple_count
                        
                        	MTE Tuple count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Active.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn, self).__init__()

                            self.yang_name = "interface-state-on"
                            self.yang_parent_name = "interface-state-ons"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['interface_name']
                            self._child_classes = OrderedDict([("address", ("address", Igmp.Active.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.Address)), ("querier-address", ("querier_address", Igmp.Active.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.QuerierAddress)), ("subscriber-address", ("subscriber_address", Igmp.Active.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.SubscriberAddress))])
                            self._leafs = OrderedDict([
                                ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                ('interface_name_xr', (YLeaf(YType.str, 'interface-name-xr'), ['str'])),
                                ('state', (YLeaf(YType.uint32, 'state'), ['int'])),
                                ('prefix_length', (YLeaf(YType.uint32, 'prefix-length'), ['int'])),
                                ('is_interface_up', (YLeaf(YType.boolean, 'is-interface-up'), ['bool'])),
                                ('is_ip_enabled', (YLeaf(YType.boolean, 'is-ip-enabled'), ['bool'])),
                                ('is_router_enabled', (YLeaf(YType.boolean, 'is-router-enabled'), ['bool'])),
                                ('igmp_version', (YLeaf(YType.uint8, 'igmp-version'), ['int'])),
                                ('host_version', (YLeaf(YType.uint8, 'host-version'), ['int'])),
                                ('query_interval', (YLeaf(YType.uint16, 'query-interval'), ['int'])),
                                ('query_timeout', (YLeaf(YType.uint16, 'query-timeout'), ['int'])),
                                ('query_maximum_response_time', (YLeaf(YType.uint16, 'query-maximum-response-time'), ['int'])),
                                ('last_member_query_interval', (YLeaf(YType.uint16, 'last-member-query-interval'), ['int'])),
                                ('group_joins', (YLeaf(YType.uint32, 'group-joins'), ['int'])),
                                ('group_leaves', (YLeaf(YType.uint32, 'group-leaves'), ['int'])),
                                ('is_querier', (YLeaf(YType.boolean, 'is-querier'), ['bool'])),
                                ('total_active_groups', (YLeaf(YType.uint32, 'total-active-groups'), ['int'])),
                                ('robustness', (YLeaf(YType.uint32, 'robustness'), ['int'])),
                                ('proxy_interface', (YLeaf(YType.str, 'proxy-interface'), ['str'])),
                                ('querier_uptime', (YLeaf(YType.uint16, 'querier-uptime'), ['int'])),
                                ('las_ll_registration_count', (YLeaf(YType.uint32, 'las-ll-registration-count'), ['int'])),
                                ('las_get_address_count', (YLeaf(YType.uint32, 'las-get-address-count'), ['int'])),
                                ('las_update_count', (YLeaf(YType.uint32, 'las-update-count'), ['int'])),
                                ('las_ll_remove_update_count', (YLeaf(YType.uint32, 'las-ll-remove-update-count'), ['int'])),
                                ('las_ll_add_update_count', (YLeaf(YType.uint32, 'las-ll-add-update-count'), ['int'])),
                                ('las_null_update_count', (YLeaf(YType.uint32, 'las-null-update-count'), ['int'])),
                                ('las_unregistration_count', (YLeaf(YType.uint32, 'las-unregistration-count'), ['int'])),
                                ('is_las_request', (YLeaf(YType.boolean, 'is-las-request'), ['bool'])),
                                ('is_las_registered', (YLeaf(YType.boolean, 'is-las-registered'), ['bool'])),
                                ('vrf_id', (YLeaf(YType.uint32, 'vrf-id'), ['int'])),
                                ('mte_vrf_id', (YLeaf(YType.uint32, 'mte-vrf-id'), ['int'])),
                                ('location', (YLeaf(YType.uint32, 'location'), ['int'])),
                                ('mtu', (YLeaf(YType.uint32, 'mtu'), ['int'])),
                                ('vrf_state', (YLeaf(YType.uint32, 'vrf-state'), ['int'])),
                                ('is_configurationverify', (YLeaf(YType.boolean, 'is-configurationverify'), ['bool'])),
                                ('configurationvrf_set', (YLeaf(YType.boolean, 'configurationvrf-set'), ['bool'])),
                                ('configurationvrf_error', (YLeaf(YType.boolean, 'configurationvrf-error'), ['bool'])),
                                ('configuration_mcast_vrf_set', (YLeaf(YType.boolean, 'configuration-mcast-vrf-set'), ['bool'])),
                                ('configuration_mcast_vrf_error', (YLeaf(YType.boolean, 'configuration-mcast-vrf-error'), ['bool'])),
                                ('is_im_state_registered', (YLeaf(YType.boolean, 'is-im-state-registered'), ['bool'])),
                                ('is_subscriber', (YLeaf(YType.boolean, 'is-subscriber'), ['bool'])),
                                ('subscriber_mode', (YLeaf(YType.uint32, 'subscriber-mode'), ['int'])),
                                ('is_identity_present', (YLeaf(YType.boolean, 'is-identity-present'), ['bool'])),
                                ('subscriber_id', (YLeaf(YType.str, 'subscriber-id'), ['str'])),
                                ('parent_ifhandle', (YLeaf(YType.str, 'parent-ifhandle'), ['str'])),
                                ('time_since_last_query_in_seconds', (YLeaf(YType.uint32, 'time-since-last-query-in-seconds'), ['int'])),
                                ('time_since_last_report_in_seconds', (YLeaf(YType.uint32, 'time-since-last-report-in-seconds'), ['int'])),
                                ('router_uptime_in_seconds', (YLeaf(YType.uint32, 'router-uptime-in-seconds'), ['int'])),
                                ('mte_tuple_count', (YLeaf(YType.uint32, 'mte-tuple-count'), ['int'])),
                            ])
                            self.interface_name = None
                            self.interface_name_xr = None
                            self.state = None
                            self.prefix_length = None
                            self.is_interface_up = None
                            self.is_ip_enabled = None
                            self.is_router_enabled = None
                            self.igmp_version = None
                            self.host_version = None
                            self.query_interval = None
                            self.query_timeout = None
                            self.query_maximum_response_time = None
                            self.last_member_query_interval = None
                            self.group_joins = None
                            self.group_leaves = None
                            self.is_querier = None
                            self.total_active_groups = None
                            self.robustness = None
                            self.proxy_interface = None
                            self.querier_uptime = None
                            self.las_ll_registration_count = None
                            self.las_get_address_count = None
                            self.las_update_count = None
                            self.las_ll_remove_update_count = None
                            self.las_ll_add_update_count = None
                            self.las_null_update_count = None
                            self.las_unregistration_count = None
                            self.is_las_request = None
                            self.is_las_registered = None
                            self.vrf_id = None
                            self.mte_vrf_id = None
                            self.location = None
                            self.mtu = None
                            self.vrf_state = None
                            self.is_configurationverify = None
                            self.configurationvrf_set = None
                            self.configurationvrf_error = None
                            self.configuration_mcast_vrf_set = None
                            self.configuration_mcast_vrf_error = None
                            self.is_im_state_registered = None
                            self.is_subscriber = None
                            self.subscriber_mode = None
                            self.is_identity_present = None
                            self.subscriber_id = None
                            self.parent_ifhandle = None
                            self.time_since_last_query_in_seconds = None
                            self.time_since_last_report_in_seconds = None
                            self.router_uptime_in_seconds = None
                            self.mte_tuple_count = None

                            self.address = Igmp.Active.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.Address()
                            self.address.parent = self
                            self._children_name_map["address"] = "address"

                            self.querier_address = Igmp.Active.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.QuerierAddress()
                            self.querier_address.parent = self
                            self._children_name_map["querier_address"] = "querier-address"

                            self.subscriber_address = Igmp.Active.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.SubscriberAddress()
                            self.subscriber_address.parent = self
                            self._children_name_map["subscriber_address"] = "subscriber-address"
                            self._segment_path = lambda: "interface-state-on" + "[interface-name='" + str(self.interface_name) + "']"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Active.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn, ['interface_name', 'interface_name_xr', 'state', 'prefix_length', 'is_interface_up', 'is_ip_enabled', 'is_router_enabled', 'igmp_version', 'host_version', 'query_interval', 'query_timeout', 'query_maximum_response_time', 'last_member_query_interval', 'group_joins', 'group_leaves', 'is_querier', 'total_active_groups', 'robustness', 'proxy_interface', 'querier_uptime', 'las_ll_registration_count', 'las_get_address_count', 'las_update_count', 'las_ll_remove_update_count', 'las_ll_add_update_count', 'las_null_update_count', 'las_unregistration_count', 'is_las_request', 'is_las_registered', 'vrf_id', 'mte_vrf_id', 'location', 'mtu', 'vrf_state', 'is_configurationverify', 'configurationvrf_set', 'configurationvrf_error', 'configuration_mcast_vrf_set', 'configuration_mcast_vrf_error', 'is_im_state_registered', 'is_subscriber', 'subscriber_mode', 'is_identity_present', 'subscriber_id', 'parent_ifhandle', 'time_since_last_query_in_seconds', 'time_since_last_report_in_seconds', 'router_uptime_in_seconds', 'mte_tuple_count'], name, value)


                        class Address(_Entity_):
                            """
                            IP address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Active.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.Address, self).__init__()

                                self.yang_name = "address"
                                self.yang_parent_name = "interface-state-on"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Active.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.Address, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Active.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.Address']['meta_info']


                        class QuerierAddress(_Entity_):
                            """
                            Address of the Querier
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Active.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.QuerierAddress, self).__init__()

                                self.yang_name = "querier-address"
                                self.yang_parent_name = "interface-state-on"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "querier-address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Active.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.QuerierAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Active.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.QuerierAddress']['meta_info']


                        class SubscriberAddress(_Entity_):
                            """
                            Address of subscriber
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Active.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.SubscriberAddress, self).__init__()

                                self.yang_name = "subscriber-address"
                                self.yang_parent_name = "interface-state-on"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "subscriber-address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Active.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.SubscriberAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Active.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn.SubscriberAddress']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Active.Vrfs.Vrf.InterfaceStateOns.InterfaceStateOn']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Igmp.Active.Vrfs.Vrf.InterfaceStateOns']['meta_info']


                class DetailGroups(_Entity_):
                    """
                    IGMP Detail Group Database
                    
                    .. attribute:: detail_group
                    
                    	IGMP Detail Group Entry Information
                    	**type**\: list of  		 :py:class:`DetailGroup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.DetailGroups.DetailGroup>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Igmp.Active.Vrfs.Vrf.DetailGroups, self).__init__()

                        self.yang_name = "detail-groups"
                        self.yang_parent_name = "vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("detail-group", ("detail_group", Igmp.Active.Vrfs.Vrf.DetailGroups.DetailGroup))])
                        self._leafs = OrderedDict()

                        self.detail_group = YList(self)
                        self._segment_path = lambda: "detail-groups"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Igmp.Active.Vrfs.Vrf.DetailGroups, [], name, value)


                    class DetailGroup(_Entity_):
                        """
                        IGMP Detail Group Entry Information
                        
                        .. attribute:: group_address
                        
                        	Group Address
                        	**type**\: union of the below types:
                        
                        		**type**\: str
                        
                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        		**type**\: str
                        
                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: interface_name
                        
                        	Interface Name
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: source_address
                        
                        	Source/Host Address
                        	**type**\: union of the below types:
                        
                        		**type**\: str
                        
                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        		**type**\: str
                        
                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: group_info
                        
                        	Basic Group information
                        	**type**\:  :py:class:`GroupInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo>`
                        
                        	**config**\: False
                        
                        .. attribute:: is_router_exclude_mode
                        
                        	Group router filter mode
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_host_exclude_mode
                        
                        	Group host filter mode
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: source
                        
                        	List of sources
                        	**type**\: list of  		 :py:class:`Source <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.DetailGroups.DetailGroup.Source>`
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Active.Vrfs.Vrf.DetailGroups.DetailGroup, self).__init__()

                            self.yang_name = "detail-group"
                            self.yang_parent_name = "detail-groups"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("group-info", ("group_info", Igmp.Active.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo)), ("source", ("source", Igmp.Active.Vrfs.Vrf.DetailGroups.DetailGroup.Source))])
                            self._leafs = OrderedDict([
                                ('group_address', (YLeaf(YType.str, 'group-address'), ['str','str'])),
                                ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                ('source_address', (YLeaf(YType.str, 'source-address'), ['str','str'])),
                                ('is_router_exclude_mode', (YLeaf(YType.boolean, 'is-router-exclude-mode'), ['bool'])),
                                ('is_host_exclude_mode', (YLeaf(YType.boolean, 'is-host-exclude-mode'), ['bool'])),
                            ])
                            self.group_address = None
                            self.interface_name = None
                            self.source_address = None
                            self.is_router_exclude_mode = None
                            self.is_host_exclude_mode = None

                            self.group_info = Igmp.Active.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo()
                            self.group_info.parent = self
                            self._children_name_map["group_info"] = "group-info"

                            self.source = YList(self)
                            self._segment_path = lambda: "detail-group"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Active.Vrfs.Vrf.DetailGroups.DetailGroup, ['group_address', 'interface_name', 'source_address', 'is_router_exclude_mode', 'is_host_exclude_mode'], name, value)


                        class GroupInfo(_Entity_):
                            """
                            Basic Group information
                            
                            .. attribute:: group_address_xr
                            
                            	Group Address
                            	**type**\:  :py:class:`GroupAddressXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.GroupAddressXr>`
                            
                            	**config**\: False
                            
                            .. attribute:: last_reporter
                            
                            	Last reporter address
                            	**type**\:  :py:class:`LastReporter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.LastReporter>`
                            
                            	**config**\: False
                            
                            .. attribute:: source_address
                            
                            	Source Address
                            	**type**\:  :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.SourceAddress>`
                            
                            	**config**\: False
                            
                            .. attribute:: interface_name_xr
                            
                            	Interface
                            	**type**\: str
                            
                            	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                            
                            	**config**\: False
                            
                            .. attribute:: uptime
                            
                            	Uptime in seconds
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            	**config**\: False
                            
                            	**units**\: second
                            
                            .. attribute:: expiration_time
                            
                            	Expiration time in seconds
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            	**config**\: False
                            
                            	**units**\: second
                            
                            .. attribute:: explicit_tracking_enabled
                            
                            	Is explicit tracking enabled
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: is_self_join
                            
                            	If local system is member of this group on this interface
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: row_status
                            
                            	interface on or off for the group
                            	**type**\: str
                            
                            	**length:** 0..16
                            
                            	**config**\: False
                            
                            .. attribute:: is_low_memory
                            
                            	Node is running low on memory
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: router_filter_mode
                            
                            	Filter mode
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            	**config**\: False
                            
                            .. attribute:: older_host_version1_timer
                            
                            	IGMP Hostversion1timer
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: older_host_version2_timer
                            
                            	IGMP Hostversion2timer
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: is_added
                            
                            	Joined
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: is_suppressed
                            
                            	Suppressed
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Active.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo, self).__init__()

                                self.yang_name = "group-info"
                                self.yang_parent_name = "detail-group"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("group-address-xr", ("group_address_xr", Igmp.Active.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.GroupAddressXr)), ("last-reporter", ("last_reporter", Igmp.Active.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.LastReporter)), ("source-address", ("source_address", Igmp.Active.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.SourceAddress))])
                                self._leafs = OrderedDict([
                                    ('interface_name_xr', (YLeaf(YType.str, 'interface-name-xr'), ['str'])),
                                    ('uptime', (YLeaf(YType.uint64, 'uptime'), ['int'])),
                                    ('expiration_time', (YLeaf(YType.int32, 'expiration-time'), ['int'])),
                                    ('explicit_tracking_enabled', (YLeaf(YType.boolean, 'explicit-tracking-enabled'), ['bool'])),
                                    ('is_self_join', (YLeaf(YType.boolean, 'is-self-join'), ['bool'])),
                                    ('row_status', (YLeaf(YType.str, 'row-status'), ['str'])),
                                    ('is_low_memory', (YLeaf(YType.boolean, 'is-low-memory'), ['bool'])),
                                    ('router_filter_mode', (YLeaf(YType.uint8, 'router-filter-mode'), ['int'])),
                                    ('older_host_version1_timer', (YLeaf(YType.uint32, 'older-host-version1-timer'), ['int'])),
                                    ('older_host_version2_timer', (YLeaf(YType.uint32, 'older-host-version2-timer'), ['int'])),
                                    ('is_added', (YLeaf(YType.boolean, 'is-added'), ['bool'])),
                                    ('is_suppressed', (YLeaf(YType.boolean, 'is-suppressed'), ['bool'])),
                                ])
                                self.interface_name_xr = None
                                self.uptime = None
                                self.expiration_time = None
                                self.explicit_tracking_enabled = None
                                self.is_self_join = None
                                self.row_status = None
                                self.is_low_memory = None
                                self.router_filter_mode = None
                                self.older_host_version1_timer = None
                                self.older_host_version2_timer = None
                                self.is_added = None
                                self.is_suppressed = None

                                self.group_address_xr = Igmp.Active.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.GroupAddressXr()
                                self.group_address_xr.parent = self
                                self._children_name_map["group_address_xr"] = "group-address-xr"

                                self.last_reporter = Igmp.Active.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.LastReporter()
                                self.last_reporter.parent = self
                                self._children_name_map["last_reporter"] = "last-reporter"

                                self.source_address = Igmp.Active.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.SourceAddress()
                                self.source_address.parent = self
                                self._children_name_map["source_address"] = "source-address"
                                self._segment_path = lambda: "group-info"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Active.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo, ['interface_name_xr', 'uptime', 'expiration_time', 'explicit_tracking_enabled', 'is_self_join', 'row_status', 'is_low_memory', 'router_filter_mode', 'older_host_version1_timer', 'older_host_version2_timer', 'is_added', 'is_suppressed'], name, value)


                            class GroupAddressXr(_Entity_):
                                """
                                Group Address
                                
                                .. attribute:: af_name
                                
                                	AFName
                                	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                                
                                	**config**\: False
                                
                                .. attribute:: ipv4_address
                                
                                	IPv4 Addr
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                .. attribute:: ipv6_address
                                
                                	IPV6 Addr
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                

                                """

                                _prefix = 'ipv4-igmp-oper'
                                _revision = '2018-01-31'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Igmp.Active.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.GroupAddressXr, self).__init__()

                                    self.yang_name = "group-address-xr"
                                    self.yang_parent_name = "group-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                        ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                        ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                    ])
                                    self.af_name = None
                                    self.ipv4_address = None
                                    self.ipv6_address = None
                                    self._segment_path = lambda: "group-address-xr"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Igmp.Active.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.GroupAddressXr, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                    return meta._meta_table['Igmp.Active.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.GroupAddressXr']['meta_info']


                            class LastReporter(_Entity_):
                                """
                                Last reporter address
                                
                                .. attribute:: af_name
                                
                                	AFName
                                	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                                
                                	**config**\: False
                                
                                .. attribute:: ipv4_address
                                
                                	IPv4 Addr
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                .. attribute:: ipv6_address
                                
                                	IPV6 Addr
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                

                                """

                                _prefix = 'ipv4-igmp-oper'
                                _revision = '2018-01-31'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Igmp.Active.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.LastReporter, self).__init__()

                                    self.yang_name = "last-reporter"
                                    self.yang_parent_name = "group-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                        ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                        ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                    ])
                                    self.af_name = None
                                    self.ipv4_address = None
                                    self.ipv6_address = None
                                    self._segment_path = lambda: "last-reporter"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Igmp.Active.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.LastReporter, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                    return meta._meta_table['Igmp.Active.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.LastReporter']['meta_info']


                            class SourceAddress(_Entity_):
                                """
                                Source Address
                                
                                .. attribute:: af_name
                                
                                	AFName
                                	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                                
                                	**config**\: False
                                
                                .. attribute:: ipv4_address
                                
                                	IPv4 Addr
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                .. attribute:: ipv6_address
                                
                                	IPV6 Addr
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                

                                """

                                _prefix = 'ipv4-igmp-oper'
                                _revision = '2018-01-31'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Igmp.Active.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.SourceAddress, self).__init__()

                                    self.yang_name = "source-address"
                                    self.yang_parent_name = "group-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                        ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                        ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                    ])
                                    self.af_name = None
                                    self.ipv4_address = None
                                    self.ipv6_address = None
                                    self._segment_path = lambda: "source-address"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Igmp.Active.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.SourceAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                    return meta._meta_table['Igmp.Active.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo.SourceAddress']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Active.Vrfs.Vrf.DetailGroups.DetailGroup.GroupInfo']['meta_info']


                        class Source(_Entity_):
                            """
                            List of sources
                            
                            .. attribute:: source_address
                            
                            	Source Address
                            	**type**\:  :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.DetailGroups.DetailGroup.Source.SourceAddress>`
                            
                            	**config**\: False
                            
                            .. attribute:: uptime
                            
                            	Uptime in seconds
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            	**config**\: False
                            
                            	**units**\: second
                            
                            .. attribute:: expiration_time
                            
                            	Expiration time in seconds
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            	**config**\: False
                            
                            	**units**\: second
                            
                            .. attribute:: is_local
                            
                            	Is this a local source
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: is_remote
                            
                            	Is this a remote source
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: is_forward
                            
                            	Should we forward on this entry
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: is_we_report
                            
                            	Should we report the source
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: flags
                            
                            	Source flags
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            	**config**\: False
                            
                            .. attribute:: is_added
                            
                            	Joined
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Active.Vrfs.Vrf.DetailGroups.DetailGroup.Source, self).__init__()

                                self.yang_name = "source"
                                self.yang_parent_name = "detail-group"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("source-address", ("source_address", Igmp.Active.Vrfs.Vrf.DetailGroups.DetailGroup.Source.SourceAddress))])
                                self._leafs = OrderedDict([
                                    ('uptime', (YLeaf(YType.uint64, 'uptime'), ['int'])),
                                    ('expiration_time', (YLeaf(YType.int32, 'expiration-time'), ['int'])),
                                    ('is_local', (YLeaf(YType.boolean, 'is-local'), ['bool'])),
                                    ('is_remote', (YLeaf(YType.boolean, 'is-remote'), ['bool'])),
                                    ('is_forward', (YLeaf(YType.boolean, 'is-forward'), ['bool'])),
                                    ('is_we_report', (YLeaf(YType.boolean, 'is-we-report'), ['bool'])),
                                    ('flags', (YLeaf(YType.int32, 'flags'), ['int'])),
                                    ('is_added', (YLeaf(YType.boolean, 'is-added'), ['bool'])),
                                ])
                                self.uptime = None
                                self.expiration_time = None
                                self.is_local = None
                                self.is_remote = None
                                self.is_forward = None
                                self.is_we_report = None
                                self.flags = None
                                self.is_added = None

                                self.source_address = Igmp.Active.Vrfs.Vrf.DetailGroups.DetailGroup.Source.SourceAddress()
                                self.source_address.parent = self
                                self._children_name_map["source_address"] = "source-address"
                                self._segment_path = lambda: "source"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Active.Vrfs.Vrf.DetailGroups.DetailGroup.Source, ['uptime', 'expiration_time', 'is_local', 'is_remote', 'is_forward', 'is_we_report', 'flags', 'is_added'], name, value)


                            class SourceAddress(_Entity_):
                                """
                                Source Address
                                
                                .. attribute:: af_name
                                
                                	AFName
                                	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                                
                                	**config**\: False
                                
                                .. attribute:: ipv4_address
                                
                                	IPv4 Addr
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                .. attribute:: ipv6_address
                                
                                	IPV6 Addr
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                

                                """

                                _prefix = 'ipv4-igmp-oper'
                                _revision = '2018-01-31'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Igmp.Active.Vrfs.Vrf.DetailGroups.DetailGroup.Source.SourceAddress, self).__init__()

                                    self.yang_name = "source-address"
                                    self.yang_parent_name = "source"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                        ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                        ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                    ])
                                    self.af_name = None
                                    self.ipv4_address = None
                                    self.ipv6_address = None
                                    self._segment_path = lambda: "source-address"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Igmp.Active.Vrfs.Vrf.DetailGroups.DetailGroup.Source.SourceAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                    return meta._meta_table['Igmp.Active.Vrfs.Vrf.DetailGroups.DetailGroup.Source.SourceAddress']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Active.Vrfs.Vrf.DetailGroups.DetailGroup.Source']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Active.Vrfs.Vrf.DetailGroups.DetailGroup']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Igmp.Active.Vrfs.Vrf.DetailGroups']['meta_info']


                class NonActiveGroups(_Entity_):
                    """
                    IGMP Non\-Active Groups Information
                    
                    .. attribute:: non_active_groups
                    
                    	List of non\-active groups
                    	**type**\: list of  		 :py:class:`NonActiveGroups_ <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.NonActiveGroups.NonActiveGroups_>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Igmp.Active.Vrfs.Vrf.NonActiveGroups, self).__init__()

                        self.yang_name = "non-active-groups"
                        self.yang_parent_name = "vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("non-active-groups", ("non_active_groups", Igmp.Active.Vrfs.Vrf.NonActiveGroups.NonActiveGroups_))])
                        self._leafs = OrderedDict()

                        self.non_active_groups = YList(self)
                        self._segment_path = lambda: "non-active-groups"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Igmp.Active.Vrfs.Vrf.NonActiveGroups, [], name, value)


                    class NonActiveGroups_(_Entity_):
                        """
                        List of non\-active groups
                        
                        .. attribute:: group_address
                        
                        	Group Address
                        	**type**\:  :py:class:`GroupAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.NonActiveGroups.NonActiveGroups_.GroupAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\:  :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.NonActiveGroups.NonActiveGroups_.SourceAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: interface
                        
                        	Interface Name
                        	**type**\: str
                        
                        	**length:** 0..65
                        
                        	**config**\: False
                        
                        .. attribute:: reason_for_non_activity
                        
                        	Reason for group join not being processed
                        	**type**\: str
                        
                        	**length:** 0..257
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Active.Vrfs.Vrf.NonActiveGroups.NonActiveGroups_, self).__init__()

                            self.yang_name = "non-active-groups"
                            self.yang_parent_name = "non-active-groups"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("group-address", ("group_address", Igmp.Active.Vrfs.Vrf.NonActiveGroups.NonActiveGroups_.GroupAddress)), ("source-address", ("source_address", Igmp.Active.Vrfs.Vrf.NonActiveGroups.NonActiveGroups_.SourceAddress))])
                            self._leafs = OrderedDict([
                                ('interface', (YLeaf(YType.str, 'interface'), ['str'])),
                                ('reason_for_non_activity', (YLeaf(YType.str, 'reason-for-non-activity'), ['str'])),
                            ])
                            self.interface = None
                            self.reason_for_non_activity = None

                            self.group_address = Igmp.Active.Vrfs.Vrf.NonActiveGroups.NonActiveGroups_.GroupAddress()
                            self.group_address.parent = self
                            self._children_name_map["group_address"] = "group-address"

                            self.source_address = Igmp.Active.Vrfs.Vrf.NonActiveGroups.NonActiveGroups_.SourceAddress()
                            self.source_address.parent = self
                            self._children_name_map["source_address"] = "source-address"
                            self._segment_path = lambda: "non-active-groups"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Active.Vrfs.Vrf.NonActiveGroups.NonActiveGroups_, ['interface', 'reason_for_non_activity'], name, value)


                        class GroupAddress(_Entity_):
                            """
                            Group Address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Active.Vrfs.Vrf.NonActiveGroups.NonActiveGroups_.GroupAddress, self).__init__()

                                self.yang_name = "group-address"
                                self.yang_parent_name = "non-active-groups"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "group-address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Active.Vrfs.Vrf.NonActiveGroups.NonActiveGroups_.GroupAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Active.Vrfs.Vrf.NonActiveGroups.NonActiveGroups_.GroupAddress']['meta_info']


                        class SourceAddress(_Entity_):
                            """
                            Source Address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Active.Vrfs.Vrf.NonActiveGroups.NonActiveGroups_.SourceAddress, self).__init__()

                                self.yang_name = "source-address"
                                self.yang_parent_name = "non-active-groups"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "source-address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Active.Vrfs.Vrf.NonActiveGroups.NonActiveGroups_.SourceAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Active.Vrfs.Vrf.NonActiveGroups.NonActiveGroups_.SourceAddress']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Active.Vrfs.Vrf.NonActiveGroups.NonActiveGroups_']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Igmp.Active.Vrfs.Vrf.NonActiveGroups']['meta_info']


                class SsmMaps(_Entity_):
                    """
                    SSM Map Table
                    
                    .. attribute:: ssm_map
                    
                    	SSM Map information
                    	**type**\: list of  		 :py:class:`SsmMap <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.SsmMaps.SsmMap>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Igmp.Active.Vrfs.Vrf.SsmMaps, self).__init__()

                        self.yang_name = "ssm-maps"
                        self.yang_parent_name = "vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("ssm-map", ("ssm_map", Igmp.Active.Vrfs.Vrf.SsmMaps.SsmMap))])
                        self._leafs = OrderedDict()

                        self.ssm_map = YList(self)
                        self._segment_path = lambda: "ssm-maps"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Igmp.Active.Vrfs.Vrf.SsmMaps, [], name, value)


                    class SsmMap(_Entity_):
                        """
                        SSM Map information
                        
                        .. attribute:: ssm_map_type
                        
                        	SSM Map Type
                        	**type**\:  :py:class:`IgmpssmMap <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpssmMap>`
                        
                        	**config**\: False
                        
                        .. attribute:: group_address
                        
                        	Group address
                        	**type**\: union of the below types:
                        
                        		**type**\: str
                        
                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        		**type**\: str
                        
                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: group_address_xr
                        
                        	Group Address
                        	**type**\:  :py:class:`GroupAddressXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.SsmMaps.SsmMap.GroupAddressXr>`
                        
                        	**config**\: False
                        
                        .. attribute:: map_type
                        
                        	Map Type of group
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: source_counts
                        
                        	Count of Sources
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Active.Vrfs.Vrf.SsmMaps.SsmMap, self).__init__()

                            self.yang_name = "ssm-map"
                            self.yang_parent_name = "ssm-maps"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("group-address-xr", ("group_address_xr", Igmp.Active.Vrfs.Vrf.SsmMaps.SsmMap.GroupAddressXr))])
                            self._leafs = OrderedDict([
                                ('ssm_map_type', (YLeaf(YType.enumeration, 'ssm-map-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpssmMap', '')])),
                                ('group_address', (YLeaf(YType.str, 'group-address'), ['str','str'])),
                                ('map_type', (YLeaf(YType.uint32, 'map-type'), ['int'])),
                                ('source_counts', (YLeaf(YType.uint32, 'source-counts'), ['int'])),
                            ])
                            self.ssm_map_type = None
                            self.group_address = None
                            self.map_type = None
                            self.source_counts = None

                            self.group_address_xr = Igmp.Active.Vrfs.Vrf.SsmMaps.SsmMap.GroupAddressXr()
                            self.group_address_xr.parent = self
                            self._children_name_map["group_address_xr"] = "group-address-xr"
                            self._segment_path = lambda: "ssm-map"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Active.Vrfs.Vrf.SsmMaps.SsmMap, ['ssm_map_type', 'group_address', 'map_type', 'source_counts'], name, value)


                        class GroupAddressXr(_Entity_):
                            """
                            Group Address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Active.Vrfs.Vrf.SsmMaps.SsmMap.GroupAddressXr, self).__init__()

                                self.yang_name = "group-address-xr"
                                self.yang_parent_name = "ssm-map"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "group-address-xr"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Active.Vrfs.Vrf.SsmMaps.SsmMap.GroupAddressXr, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Active.Vrfs.Vrf.SsmMaps.SsmMap.GroupAddressXr']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Active.Vrfs.Vrf.SsmMaps.SsmMap']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Igmp.Active.Vrfs.Vrf.SsmMaps']['meta_info']


                class ExplicitGroups(_Entity_):
                    """
                    IGMP Explicit Group Database
                    
                    .. attribute:: explicit_group
                    
                    	IGMP Explicit Group Entry Information
                    	**type**\: list of  		 :py:class:`ExplicitGroup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Igmp.Active.Vrfs.Vrf.ExplicitGroups, self).__init__()

                        self.yang_name = "explicit-groups"
                        self.yang_parent_name = "vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("explicit-group", ("explicit_group", Igmp.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup))])
                        self._leafs = OrderedDict()

                        self.explicit_group = YList(self)
                        self._segment_path = lambda: "explicit-groups"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Igmp.Active.Vrfs.Vrf.ExplicitGroups, [], name, value)


                    class ExplicitGroup(_Entity_):
                        """
                        IGMP Explicit Group Entry Information
                        
                        .. attribute:: group_address
                        
                        	Group Address
                        	**type**\: union of the below types:
                        
                        		**type**\: str
                        
                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        		**type**\: str
                        
                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: interface_name
                        
                        	Interface Name
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: source_address
                        
                        	Source/Host Address
                        	**type**\: union of the below types:
                        
                        		**type**\: str
                        
                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        		**type**\: str
                        
                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: group_info
                        
                        	Basic Group information
                        	**type**\:  :py:class:`GroupInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo>`
                        
                        	**config**\: False
                        
                        .. attribute:: include_hosts
                        
                        	No. of hosts who are included
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: exclude_hosts
                        
                        	No. of hosts who are excluded
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: host
                        
                        	List of hosts
                        	**type**\: list of  		 :py:class:`Host <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.Host>`
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup, self).__init__()

                            self.yang_name = "explicit-group"
                            self.yang_parent_name = "explicit-groups"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("group-info", ("group_info", Igmp.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo)), ("host", ("host", Igmp.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.Host))])
                            self._leafs = OrderedDict([
                                ('group_address', (YLeaf(YType.str, 'group-address'), ['str','str'])),
                                ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                ('source_address', (YLeaf(YType.str, 'source-address'), ['str','str'])),
                                ('include_hosts', (YLeaf(YType.uint32, 'include-hosts'), ['int'])),
                                ('exclude_hosts', (YLeaf(YType.uint32, 'exclude-hosts'), ['int'])),
                            ])
                            self.group_address = None
                            self.interface_name = None
                            self.source_address = None
                            self.include_hosts = None
                            self.exclude_hosts = None

                            self.group_info = Igmp.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo()
                            self.group_info.parent = self
                            self._children_name_map["group_info"] = "group-info"

                            self.host = YList(self)
                            self._segment_path = lambda: "explicit-group"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup, ['group_address', 'interface_name', 'source_address', 'include_hosts', 'exclude_hosts'], name, value)


                        class GroupInfo(_Entity_):
                            """
                            Basic Group information
                            
                            .. attribute:: group_address_xr
                            
                            	Group Address
                            	**type**\:  :py:class:`GroupAddressXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.GroupAddressXr>`
                            
                            	**config**\: False
                            
                            .. attribute:: last_reporter
                            
                            	Last reporter address
                            	**type**\:  :py:class:`LastReporter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.LastReporter>`
                            
                            	**config**\: False
                            
                            .. attribute:: source_address
                            
                            	Source Address
                            	**type**\:  :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.SourceAddress>`
                            
                            	**config**\: False
                            
                            .. attribute:: interface_name_xr
                            
                            	Interface
                            	**type**\: str
                            
                            	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                            
                            	**config**\: False
                            
                            .. attribute:: uptime
                            
                            	Uptime in seconds
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            	**config**\: False
                            
                            	**units**\: second
                            
                            .. attribute:: expiration_time
                            
                            	Expiration time in seconds
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            	**config**\: False
                            
                            	**units**\: second
                            
                            .. attribute:: explicit_tracking_enabled
                            
                            	Is explicit tracking enabled
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: is_self_join
                            
                            	If local system is member of this group on this interface
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: row_status
                            
                            	interface on or off for the group
                            	**type**\: str
                            
                            	**length:** 0..16
                            
                            	**config**\: False
                            
                            .. attribute:: is_low_memory
                            
                            	Node is running low on memory
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: router_filter_mode
                            
                            	Filter mode
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            	**config**\: False
                            
                            .. attribute:: older_host_version1_timer
                            
                            	IGMP Hostversion1timer
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: older_host_version2_timer
                            
                            	IGMP Hostversion2timer
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: is_added
                            
                            	Joined
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: is_suppressed
                            
                            	Suppressed
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo, self).__init__()

                                self.yang_name = "group-info"
                                self.yang_parent_name = "explicit-group"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("group-address-xr", ("group_address_xr", Igmp.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.GroupAddressXr)), ("last-reporter", ("last_reporter", Igmp.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.LastReporter)), ("source-address", ("source_address", Igmp.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.SourceAddress))])
                                self._leafs = OrderedDict([
                                    ('interface_name_xr', (YLeaf(YType.str, 'interface-name-xr'), ['str'])),
                                    ('uptime', (YLeaf(YType.uint64, 'uptime'), ['int'])),
                                    ('expiration_time', (YLeaf(YType.int32, 'expiration-time'), ['int'])),
                                    ('explicit_tracking_enabled', (YLeaf(YType.boolean, 'explicit-tracking-enabled'), ['bool'])),
                                    ('is_self_join', (YLeaf(YType.boolean, 'is-self-join'), ['bool'])),
                                    ('row_status', (YLeaf(YType.str, 'row-status'), ['str'])),
                                    ('is_low_memory', (YLeaf(YType.boolean, 'is-low-memory'), ['bool'])),
                                    ('router_filter_mode', (YLeaf(YType.uint8, 'router-filter-mode'), ['int'])),
                                    ('older_host_version1_timer', (YLeaf(YType.uint32, 'older-host-version1-timer'), ['int'])),
                                    ('older_host_version2_timer', (YLeaf(YType.uint32, 'older-host-version2-timer'), ['int'])),
                                    ('is_added', (YLeaf(YType.boolean, 'is-added'), ['bool'])),
                                    ('is_suppressed', (YLeaf(YType.boolean, 'is-suppressed'), ['bool'])),
                                ])
                                self.interface_name_xr = None
                                self.uptime = None
                                self.expiration_time = None
                                self.explicit_tracking_enabled = None
                                self.is_self_join = None
                                self.row_status = None
                                self.is_low_memory = None
                                self.router_filter_mode = None
                                self.older_host_version1_timer = None
                                self.older_host_version2_timer = None
                                self.is_added = None
                                self.is_suppressed = None

                                self.group_address_xr = Igmp.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.GroupAddressXr()
                                self.group_address_xr.parent = self
                                self._children_name_map["group_address_xr"] = "group-address-xr"

                                self.last_reporter = Igmp.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.LastReporter()
                                self.last_reporter.parent = self
                                self._children_name_map["last_reporter"] = "last-reporter"

                                self.source_address = Igmp.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.SourceAddress()
                                self.source_address.parent = self
                                self._children_name_map["source_address"] = "source-address"
                                self._segment_path = lambda: "group-info"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo, ['interface_name_xr', 'uptime', 'expiration_time', 'explicit_tracking_enabled', 'is_self_join', 'row_status', 'is_low_memory', 'router_filter_mode', 'older_host_version1_timer', 'older_host_version2_timer', 'is_added', 'is_suppressed'], name, value)


                            class GroupAddressXr(_Entity_):
                                """
                                Group Address
                                
                                .. attribute:: af_name
                                
                                	AFName
                                	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                                
                                	**config**\: False
                                
                                .. attribute:: ipv4_address
                                
                                	IPv4 Addr
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                .. attribute:: ipv6_address
                                
                                	IPV6 Addr
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                

                                """

                                _prefix = 'ipv4-igmp-oper'
                                _revision = '2018-01-31'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Igmp.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.GroupAddressXr, self).__init__()

                                    self.yang_name = "group-address-xr"
                                    self.yang_parent_name = "group-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                        ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                        ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                    ])
                                    self.af_name = None
                                    self.ipv4_address = None
                                    self.ipv6_address = None
                                    self._segment_path = lambda: "group-address-xr"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Igmp.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.GroupAddressXr, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                    return meta._meta_table['Igmp.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.GroupAddressXr']['meta_info']


                            class LastReporter(_Entity_):
                                """
                                Last reporter address
                                
                                .. attribute:: af_name
                                
                                	AFName
                                	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                                
                                	**config**\: False
                                
                                .. attribute:: ipv4_address
                                
                                	IPv4 Addr
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                .. attribute:: ipv6_address
                                
                                	IPV6 Addr
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                

                                """

                                _prefix = 'ipv4-igmp-oper'
                                _revision = '2018-01-31'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Igmp.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.LastReporter, self).__init__()

                                    self.yang_name = "last-reporter"
                                    self.yang_parent_name = "group-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                        ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                        ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                    ])
                                    self.af_name = None
                                    self.ipv4_address = None
                                    self.ipv6_address = None
                                    self._segment_path = lambda: "last-reporter"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Igmp.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.LastReporter, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                    return meta._meta_table['Igmp.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.LastReporter']['meta_info']


                            class SourceAddress(_Entity_):
                                """
                                Source Address
                                
                                .. attribute:: af_name
                                
                                	AFName
                                	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                                
                                	**config**\: False
                                
                                .. attribute:: ipv4_address
                                
                                	IPv4 Addr
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                .. attribute:: ipv6_address
                                
                                	IPV6 Addr
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                

                                """

                                _prefix = 'ipv4-igmp-oper'
                                _revision = '2018-01-31'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Igmp.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.SourceAddress, self).__init__()

                                    self.yang_name = "source-address"
                                    self.yang_parent_name = "group-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                        ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                        ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                    ])
                                    self.af_name = None
                                    self.ipv4_address = None
                                    self.ipv6_address = None
                                    self._segment_path = lambda: "source-address"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Igmp.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.SourceAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                    return meta._meta_table['Igmp.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo.SourceAddress']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.GroupInfo']['meta_info']


                        class Host(_Entity_):
                            """
                            List of hosts
                            
                            .. attribute:: address
                            
                            	Host Address
                            	**type**\:  :py:class:`Address <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.Host.Address>`
                            
                            	**config**\: False
                            
                            .. attribute:: uptime
                            
                            	Uptime in seconds
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            	**units**\: second
                            
                            .. attribute:: is_exclude
                            
                            	Exclude flag set
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: expiration_time
                            
                            	Expiration time in seconds
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            	**units**\: second
                            
                            .. attribute:: source_count
                            
                            	No. of sources in entry
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: source_address
                            
                            	First 3 source addresses
                            	**type**\: list of  		 :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.Host.SourceAddress>`
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.Host, self).__init__()

                                self.yang_name = "host"
                                self.yang_parent_name = "explicit-group"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("address", ("address", Igmp.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.Host.Address)), ("source-address", ("source_address", Igmp.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.Host.SourceAddress))])
                                self._leafs = OrderedDict([
                                    ('uptime', (YLeaf(YType.uint32, 'uptime'), ['int'])),
                                    ('is_exclude', (YLeaf(YType.boolean, 'is-exclude'), ['bool'])),
                                    ('expiration_time', (YLeaf(YType.uint32, 'expiration-time'), ['int'])),
                                    ('source_count', (YLeaf(YType.uint32, 'source-count'), ['int'])),
                                ])
                                self.uptime = None
                                self.is_exclude = None
                                self.expiration_time = None
                                self.source_count = None

                                self.address = Igmp.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.Host.Address()
                                self.address.parent = self
                                self._children_name_map["address"] = "address"

                                self.source_address = YList(self)
                                self._segment_path = lambda: "host"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.Host, ['uptime', 'is_exclude', 'expiration_time', 'source_count'], name, value)


                            class Address(_Entity_):
                                """
                                Host Address
                                
                                .. attribute:: af_name
                                
                                	AFName
                                	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                                
                                	**config**\: False
                                
                                .. attribute:: ipv4_address
                                
                                	IPv4 Addr
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                .. attribute:: ipv6_address
                                
                                	IPV6 Addr
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                

                                """

                                _prefix = 'ipv4-igmp-oper'
                                _revision = '2018-01-31'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Igmp.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.Host.Address, self).__init__()

                                    self.yang_name = "address"
                                    self.yang_parent_name = "host"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                        ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                        ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                    ])
                                    self.af_name = None
                                    self.ipv4_address = None
                                    self.ipv6_address = None
                                    self._segment_path = lambda: "address"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Igmp.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.Host.Address, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                    return meta._meta_table['Igmp.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.Host.Address']['meta_info']


                            class SourceAddress(_Entity_):
                                """
                                First 3 source addresses
                                
                                .. attribute:: af_name
                                
                                	AFName
                                	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                                
                                	**config**\: False
                                
                                .. attribute:: ipv4_address
                                
                                	IPv4 Addr
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                .. attribute:: ipv6_address
                                
                                	IPV6 Addr
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                

                                """

                                _prefix = 'ipv4-igmp-oper'
                                _revision = '2018-01-31'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Igmp.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.Host.SourceAddress, self).__init__()

                                    self.yang_name = "source-address"
                                    self.yang_parent_name = "host"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                        ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                        ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                    ])
                                    self.af_name = None
                                    self.ipv4_address = None
                                    self.ipv6_address = None
                                    self._segment_path = lambda: "source-address"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Igmp.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.Host.SourceAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                    return meta._meta_table['Igmp.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.Host.SourceAddress']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup.Host']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Active.Vrfs.Vrf.ExplicitGroups.ExplicitGroup']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Igmp.Active.Vrfs.Vrf.ExplicitGroups']['meta_info']


                class InterfaceTable(_Entity_):
                    """
                    IGMP Interface specific Table
                    
                    .. attribute:: interface
                    
                    	IGMP Interface
                    	**type**\: list of  		 :py:class:`Interface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.InterfaceTable.Interface>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Igmp.Active.Vrfs.Vrf.InterfaceTable, self).__init__()

                        self.yang_name = "interface-table"
                        self.yang_parent_name = "vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("interface", ("interface", Igmp.Active.Vrfs.Vrf.InterfaceTable.Interface))])
                        self._leafs = OrderedDict()

                        self.interface = YList(self)
                        self._segment_path = lambda: "interface-table"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Igmp.Active.Vrfs.Vrf.InterfaceTable, [], name, value)


                    class Interface(_Entity_):
                        """
                        IGMP Interface
                        
                        .. attribute:: interface_name  (key)
                        
                        	Interface Name
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: address
                        
                        	IP address
                        	**type**\:  :py:class:`Address <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.InterfaceTable.Interface.Address>`
                        
                        	**config**\: False
                        
                        .. attribute:: querier_address
                        
                        	Address of the Querier
                        	**type**\:  :py:class:`QuerierAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.InterfaceTable.Interface.QuerierAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: subscriber_address
                        
                        	Address of subscriber
                        	**type**\:  :py:class:`SubscriberAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.InterfaceTable.Interface.SubscriberAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: interface_name_xr
                        
                        	Interface
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: state
                        
                        	Interface state
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: prefix_length
                        
                        	Prefix length
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_interface_up
                        
                        	Is interface up
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_ip_enabled
                        
                        	Is IP enabled
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_router_enabled
                        
                        	Is Router functionality enabled
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: igmp_version
                        
                        	IGMP Router version
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        	**config**\: False
                        
                        .. attribute:: host_version
                        
                        	IGMP Host version
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        	**config**\: False
                        
                        .. attribute:: query_interval
                        
                        	Query Interval value in seconds
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        	**units**\: second
                        
                        .. attribute:: query_timeout
                        
                        	Query Timeout value
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: query_maximum_response_time
                        
                        	Max Response Timeout value
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: last_member_query_interval
                        
                        	Last Member Query Interval
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: group_joins
                        
                        	No. of group joins
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: group_leaves
                        
                        	No. of group leaves
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_querier
                        
                        	Are we querier
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: total_active_groups
                        
                        	Actual number of groups on interface
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: robustness
                        
                        	Robustness Variable value
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: proxy_interface
                        
                        	Proxy interface index
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: querier_uptime
                        
                        	Time since the last querier took over
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: las_ll_registration_count
                        
                        	LAS reg count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_get_address_count
                        
                        	LAS get addr count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_update_count
                        
                        	LAS Update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_ll_remove_update_count
                        
                        	LAS LL remove update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_ll_add_update_count
                        
                        	LAS LL add update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_null_update_count
                        
                        	LAS Null update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_unregistration_count
                        
                        	LAS unreg count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_las_request
                        
                        	LAS req
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_las_registered
                        
                        	LAS registered
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: vrf_id
                        
                        	VRF id
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: mte_vrf_id
                        
                        	MTE VRF id
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: location
                        
                        	Location
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: mtu
                        
                        	MTU
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: vrf_state
                        
                        	Vrf State
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_configurationverify
                        
                        	CFG verify
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configurationvrf_set
                        
                        	CFG vrf set
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configurationvrf_error
                        
                        	CFG vrf error
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configuration_mcast_vrf_set
                        
                        	Is mcast set
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configuration_mcast_vrf_error
                        
                        	Is mcast error
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_im_state_registered
                        
                        	Im state registered
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_subscriber
                        
                        	Subscriber interface
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: subscriber_mode
                        
                        	Subscriber mode
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_identity_present
                        
                        	Subscriber ID or Address available from AAA
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: subscriber_id
                        
                        	ID string of subscriber
                        	**type**\: str
                        
                        	**length:** 0..257
                        
                        	**config**\: False
                        
                        .. attribute:: parent_ifhandle
                        
                        	Parent If Handle
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: time_since_last_query_in_seconds
                        
                        	Time elapsed since last query
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: time_since_last_report_in_seconds
                        
                        	Time elapsed since last report
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: router_uptime_in_seconds
                        
                        	Uptime since router enabled event
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: mte_tuple_count
                        
                        	MTE Tuple count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Active.Vrfs.Vrf.InterfaceTable.Interface, self).__init__()

                            self.yang_name = "interface"
                            self.yang_parent_name = "interface-table"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['interface_name']
                            self._child_classes = OrderedDict([("address", ("address", Igmp.Active.Vrfs.Vrf.InterfaceTable.Interface.Address)), ("querier-address", ("querier_address", Igmp.Active.Vrfs.Vrf.InterfaceTable.Interface.QuerierAddress)), ("subscriber-address", ("subscriber_address", Igmp.Active.Vrfs.Vrf.InterfaceTable.Interface.SubscriberAddress))])
                            self._leafs = OrderedDict([
                                ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                ('interface_name_xr', (YLeaf(YType.str, 'interface-name-xr'), ['str'])),
                                ('state', (YLeaf(YType.uint32, 'state'), ['int'])),
                                ('prefix_length', (YLeaf(YType.uint32, 'prefix-length'), ['int'])),
                                ('is_interface_up', (YLeaf(YType.boolean, 'is-interface-up'), ['bool'])),
                                ('is_ip_enabled', (YLeaf(YType.boolean, 'is-ip-enabled'), ['bool'])),
                                ('is_router_enabled', (YLeaf(YType.boolean, 'is-router-enabled'), ['bool'])),
                                ('igmp_version', (YLeaf(YType.uint8, 'igmp-version'), ['int'])),
                                ('host_version', (YLeaf(YType.uint8, 'host-version'), ['int'])),
                                ('query_interval', (YLeaf(YType.uint16, 'query-interval'), ['int'])),
                                ('query_timeout', (YLeaf(YType.uint16, 'query-timeout'), ['int'])),
                                ('query_maximum_response_time', (YLeaf(YType.uint16, 'query-maximum-response-time'), ['int'])),
                                ('last_member_query_interval', (YLeaf(YType.uint16, 'last-member-query-interval'), ['int'])),
                                ('group_joins', (YLeaf(YType.uint32, 'group-joins'), ['int'])),
                                ('group_leaves', (YLeaf(YType.uint32, 'group-leaves'), ['int'])),
                                ('is_querier', (YLeaf(YType.boolean, 'is-querier'), ['bool'])),
                                ('total_active_groups', (YLeaf(YType.uint32, 'total-active-groups'), ['int'])),
                                ('robustness', (YLeaf(YType.uint32, 'robustness'), ['int'])),
                                ('proxy_interface', (YLeaf(YType.str, 'proxy-interface'), ['str'])),
                                ('querier_uptime', (YLeaf(YType.uint16, 'querier-uptime'), ['int'])),
                                ('las_ll_registration_count', (YLeaf(YType.uint32, 'las-ll-registration-count'), ['int'])),
                                ('las_get_address_count', (YLeaf(YType.uint32, 'las-get-address-count'), ['int'])),
                                ('las_update_count', (YLeaf(YType.uint32, 'las-update-count'), ['int'])),
                                ('las_ll_remove_update_count', (YLeaf(YType.uint32, 'las-ll-remove-update-count'), ['int'])),
                                ('las_ll_add_update_count', (YLeaf(YType.uint32, 'las-ll-add-update-count'), ['int'])),
                                ('las_null_update_count', (YLeaf(YType.uint32, 'las-null-update-count'), ['int'])),
                                ('las_unregistration_count', (YLeaf(YType.uint32, 'las-unregistration-count'), ['int'])),
                                ('is_las_request', (YLeaf(YType.boolean, 'is-las-request'), ['bool'])),
                                ('is_las_registered', (YLeaf(YType.boolean, 'is-las-registered'), ['bool'])),
                                ('vrf_id', (YLeaf(YType.uint32, 'vrf-id'), ['int'])),
                                ('mte_vrf_id', (YLeaf(YType.uint32, 'mte-vrf-id'), ['int'])),
                                ('location', (YLeaf(YType.uint32, 'location'), ['int'])),
                                ('mtu', (YLeaf(YType.uint32, 'mtu'), ['int'])),
                                ('vrf_state', (YLeaf(YType.uint32, 'vrf-state'), ['int'])),
                                ('is_configurationverify', (YLeaf(YType.boolean, 'is-configurationverify'), ['bool'])),
                                ('configurationvrf_set', (YLeaf(YType.boolean, 'configurationvrf-set'), ['bool'])),
                                ('configurationvrf_error', (YLeaf(YType.boolean, 'configurationvrf-error'), ['bool'])),
                                ('configuration_mcast_vrf_set', (YLeaf(YType.boolean, 'configuration-mcast-vrf-set'), ['bool'])),
                                ('configuration_mcast_vrf_error', (YLeaf(YType.boolean, 'configuration-mcast-vrf-error'), ['bool'])),
                                ('is_im_state_registered', (YLeaf(YType.boolean, 'is-im-state-registered'), ['bool'])),
                                ('is_subscriber', (YLeaf(YType.boolean, 'is-subscriber'), ['bool'])),
                                ('subscriber_mode', (YLeaf(YType.uint32, 'subscriber-mode'), ['int'])),
                                ('is_identity_present', (YLeaf(YType.boolean, 'is-identity-present'), ['bool'])),
                                ('subscriber_id', (YLeaf(YType.str, 'subscriber-id'), ['str'])),
                                ('parent_ifhandle', (YLeaf(YType.str, 'parent-ifhandle'), ['str'])),
                                ('time_since_last_query_in_seconds', (YLeaf(YType.uint32, 'time-since-last-query-in-seconds'), ['int'])),
                                ('time_since_last_report_in_seconds', (YLeaf(YType.uint32, 'time-since-last-report-in-seconds'), ['int'])),
                                ('router_uptime_in_seconds', (YLeaf(YType.uint32, 'router-uptime-in-seconds'), ['int'])),
                                ('mte_tuple_count', (YLeaf(YType.uint32, 'mte-tuple-count'), ['int'])),
                            ])
                            self.interface_name = None
                            self.interface_name_xr = None
                            self.state = None
                            self.prefix_length = None
                            self.is_interface_up = None
                            self.is_ip_enabled = None
                            self.is_router_enabled = None
                            self.igmp_version = None
                            self.host_version = None
                            self.query_interval = None
                            self.query_timeout = None
                            self.query_maximum_response_time = None
                            self.last_member_query_interval = None
                            self.group_joins = None
                            self.group_leaves = None
                            self.is_querier = None
                            self.total_active_groups = None
                            self.robustness = None
                            self.proxy_interface = None
                            self.querier_uptime = None
                            self.las_ll_registration_count = None
                            self.las_get_address_count = None
                            self.las_update_count = None
                            self.las_ll_remove_update_count = None
                            self.las_ll_add_update_count = None
                            self.las_null_update_count = None
                            self.las_unregistration_count = None
                            self.is_las_request = None
                            self.is_las_registered = None
                            self.vrf_id = None
                            self.mte_vrf_id = None
                            self.location = None
                            self.mtu = None
                            self.vrf_state = None
                            self.is_configurationverify = None
                            self.configurationvrf_set = None
                            self.configurationvrf_error = None
                            self.configuration_mcast_vrf_set = None
                            self.configuration_mcast_vrf_error = None
                            self.is_im_state_registered = None
                            self.is_subscriber = None
                            self.subscriber_mode = None
                            self.is_identity_present = None
                            self.subscriber_id = None
                            self.parent_ifhandle = None
                            self.time_since_last_query_in_seconds = None
                            self.time_since_last_report_in_seconds = None
                            self.router_uptime_in_seconds = None
                            self.mte_tuple_count = None

                            self.address = Igmp.Active.Vrfs.Vrf.InterfaceTable.Interface.Address()
                            self.address.parent = self
                            self._children_name_map["address"] = "address"

                            self.querier_address = Igmp.Active.Vrfs.Vrf.InterfaceTable.Interface.QuerierAddress()
                            self.querier_address.parent = self
                            self._children_name_map["querier_address"] = "querier-address"

                            self.subscriber_address = Igmp.Active.Vrfs.Vrf.InterfaceTable.Interface.SubscriberAddress()
                            self.subscriber_address.parent = self
                            self._children_name_map["subscriber_address"] = "subscriber-address"
                            self._segment_path = lambda: "interface" + "[interface-name='" + str(self.interface_name) + "']"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Active.Vrfs.Vrf.InterfaceTable.Interface, ['interface_name', 'interface_name_xr', 'state', 'prefix_length', 'is_interface_up', 'is_ip_enabled', 'is_router_enabled', 'igmp_version', 'host_version', 'query_interval', 'query_timeout', 'query_maximum_response_time', 'last_member_query_interval', 'group_joins', 'group_leaves', 'is_querier', 'total_active_groups', 'robustness', 'proxy_interface', 'querier_uptime', 'las_ll_registration_count', 'las_get_address_count', 'las_update_count', 'las_ll_remove_update_count', 'las_ll_add_update_count', 'las_null_update_count', 'las_unregistration_count', 'is_las_request', 'is_las_registered', 'vrf_id', 'mte_vrf_id', 'location', 'mtu', 'vrf_state', 'is_configurationverify', 'configurationvrf_set', 'configurationvrf_error', 'configuration_mcast_vrf_set', 'configuration_mcast_vrf_error', 'is_im_state_registered', 'is_subscriber', 'subscriber_mode', 'is_identity_present', 'subscriber_id', 'parent_ifhandle', 'time_since_last_query_in_seconds', 'time_since_last_report_in_seconds', 'router_uptime_in_seconds', 'mte_tuple_count'], name, value)


                        class Address(_Entity_):
                            """
                            IP address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Active.Vrfs.Vrf.InterfaceTable.Interface.Address, self).__init__()

                                self.yang_name = "address"
                                self.yang_parent_name = "interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Active.Vrfs.Vrf.InterfaceTable.Interface.Address, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Active.Vrfs.Vrf.InterfaceTable.Interface.Address']['meta_info']


                        class QuerierAddress(_Entity_):
                            """
                            Address of the Querier
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Active.Vrfs.Vrf.InterfaceTable.Interface.QuerierAddress, self).__init__()

                                self.yang_name = "querier-address"
                                self.yang_parent_name = "interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "querier-address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Active.Vrfs.Vrf.InterfaceTable.Interface.QuerierAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Active.Vrfs.Vrf.InterfaceTable.Interface.QuerierAddress']['meta_info']


                        class SubscriberAddress(_Entity_):
                            """
                            Address of subscriber
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Active.Vrfs.Vrf.InterfaceTable.Interface.SubscriberAddress, self).__init__()

                                self.yang_name = "subscriber-address"
                                self.yang_parent_name = "interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "subscriber-address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Active.Vrfs.Vrf.InterfaceTable.Interface.SubscriberAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Active.Vrfs.Vrf.InterfaceTable.Interface.SubscriberAddress']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Active.Vrfs.Vrf.InterfaceTable.Interface']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Igmp.Active.Vrfs.Vrf.InterfaceTable']['meta_info']


                class InterfaceUnicastQosAdjusts(_Entity_):
                    """
                    IGMP Interface Unicast\-Qos\-Adjust
                    
                    .. attribute:: interface_unicast_qos_adjust
                    
                    	IGMP Interface
                    	**type**\: list of  		 :py:class:`InterfaceUnicastQosAdjust <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Igmp.Active.Vrfs.Vrf.InterfaceUnicastQosAdjusts, self).__init__()

                        self.yang_name = "interface-unicast-qos-adjusts"
                        self.yang_parent_name = "vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("interface-unicast-qos-adjust", ("interface_unicast_qos_adjust", Igmp.Active.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust))])
                        self._leafs = OrderedDict()

                        self.interface_unicast_qos_adjust = YList(self)
                        self._segment_path = lambda: "interface-unicast-qos-adjusts"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Igmp.Active.Vrfs.Vrf.InterfaceUnicastQosAdjusts, [], name, value)


                    class InterfaceUnicastQosAdjust(_Entity_):
                        """
                        IGMP Interface
                        
                        .. attribute:: interface_name  (key)
                        
                        	Interface Name
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: is_virtual_access
                        
                        	Is VirtualAccess Interface
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: rate
                        
                        	Overall rate in Kbps
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        	**units**\: kbit/s
                        
                        .. attribute:: rate_increments
                        
                        	Count of rate increments
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: rate_decrements
                        
                        	Count of rate decrements
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: update
                        
                        	List of updates
                        	**type**\: list of  		 :py:class:`Update <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update>`
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Active.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust, self).__init__()

                            self.yang_name = "interface-unicast-qos-adjust"
                            self.yang_parent_name = "interface-unicast-qos-adjusts"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['interface_name']
                            self._child_classes = OrderedDict([("update", ("update", Igmp.Active.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update))])
                            self._leafs = OrderedDict([
                                ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                ('is_virtual_access', (YLeaf(YType.boolean, 'is-virtual-access'), ['bool'])),
                                ('rate', (YLeaf(YType.uint32, 'rate'), ['int'])),
                                ('rate_increments', (YLeaf(YType.uint32, 'rate-increments'), ['int'])),
                                ('rate_decrements', (YLeaf(YType.uint32, 'rate-decrements'), ['int'])),
                            ])
                            self.interface_name = None
                            self.is_virtual_access = None
                            self.rate = None
                            self.rate_increments = None
                            self.rate_decrements = None

                            self.update = YList(self)
                            self._segment_path = lambda: "interface-unicast-qos-adjust" + "[interface-name='" + str(self.interface_name) + "']"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Active.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust, ['interface_name', 'is_virtual_access', 'rate', 'rate_increments', 'rate_decrements'], name, value)


                        class Update(_Entity_):
                            """
                            List of updates
                            
                            .. attribute:: source_address
                            
                            	Source address
                            	**type**\:  :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.SourceAddress>`
                            
                            	**config**\: False
                            
                            .. attribute:: group_address
                            
                            	Group address
                            	**type**\:  :py:class:`GroupAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.GroupAddress>`
                            
                            	**config**\: False
                            
                            .. attribute:: is_add
                            
                            	Is this a rate increment
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: weight
                            
                            	Weight from policy
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: received_time
                            
                            	Time this update is received
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Active.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update, self).__init__()

                                self.yang_name = "update"
                                self.yang_parent_name = "interface-unicast-qos-adjust"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("source-address", ("source_address", Igmp.Active.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.SourceAddress)), ("group-address", ("group_address", Igmp.Active.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.GroupAddress))])
                                self._leafs = OrderedDict([
                                    ('is_add', (YLeaf(YType.boolean, 'is-add'), ['bool'])),
                                    ('weight', (YLeaf(YType.uint32, 'weight'), ['int'])),
                                    ('received_time', (YLeaf(YType.uint64, 'received-time'), ['int'])),
                                ])
                                self.is_add = None
                                self.weight = None
                                self.received_time = None

                                self.source_address = Igmp.Active.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.SourceAddress()
                                self.source_address.parent = self
                                self._children_name_map["source_address"] = "source-address"

                                self.group_address = Igmp.Active.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.GroupAddress()
                                self.group_address.parent = self
                                self._children_name_map["group_address"] = "group-address"
                                self._segment_path = lambda: "update"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Active.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update, ['is_add', 'weight', 'received_time'], name, value)


                            class SourceAddress(_Entity_):
                                """
                                Source address
                                
                                .. attribute:: af_name
                                
                                	AFName
                                	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                                
                                	**config**\: False
                                
                                .. attribute:: ipv4_address
                                
                                	IPv4 Addr
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                .. attribute:: ipv6_address
                                
                                	IPV6 Addr
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                

                                """

                                _prefix = 'ipv4-igmp-oper'
                                _revision = '2018-01-31'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Igmp.Active.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.SourceAddress, self).__init__()

                                    self.yang_name = "source-address"
                                    self.yang_parent_name = "update"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                        ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                        ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                    ])
                                    self.af_name = None
                                    self.ipv4_address = None
                                    self.ipv6_address = None
                                    self._segment_path = lambda: "source-address"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Igmp.Active.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.SourceAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                    return meta._meta_table['Igmp.Active.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.SourceAddress']['meta_info']


                            class GroupAddress(_Entity_):
                                """
                                Group address
                                
                                .. attribute:: af_name
                                
                                	AFName
                                	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                                
                                	**config**\: False
                                
                                .. attribute:: ipv4_address
                                
                                	IPv4 Addr
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                .. attribute:: ipv6_address
                                
                                	IPV6 Addr
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                

                                """

                                _prefix = 'ipv4-igmp-oper'
                                _revision = '2018-01-31'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Igmp.Active.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.GroupAddress, self).__init__()

                                    self.yang_name = "group-address"
                                    self.yang_parent_name = "update"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                        ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                        ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                    ])
                                    self.af_name = None
                                    self.ipv4_address = None
                                    self.ipv6_address = None
                                    self._segment_path = lambda: "group-address"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Igmp.Active.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.GroupAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                    return meta._meta_table['Igmp.Active.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.GroupAddress']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Active.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Active.Vrfs.Vrf.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Igmp.Active.Vrfs.Vrf.InterfaceUnicastQosAdjusts']['meta_info']


                class Ranges(_Entity_):
                    """
                    Range table
                    
                    .. attribute:: range
                    
                    	Range information
                    	**type**\: list of  		 :py:class:`Range <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.Ranges.Range>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Igmp.Active.Vrfs.Vrf.Ranges, self).__init__()

                        self.yang_name = "ranges"
                        self.yang_parent_name = "vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("range", ("range", Igmp.Active.Vrfs.Vrf.Ranges.Range))])
                        self._leafs = OrderedDict()

                        self.range = YList(self)
                        self._segment_path = lambda: "ranges"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Igmp.Active.Vrfs.Vrf.Ranges, [], name, value)


                    class Range(_Entity_):
                        """
                        Range information
                        
                        .. attribute:: group_address
                        
                        	Group address
                        	**type**\: union of the below types:
                        
                        		**type**\: str
                        
                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        		**type**\: str
                        
                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: group_mask
                        
                        	Group Mask
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: group_address_xr
                        
                        	Group address
                        	**type**\:  :py:class:`GroupAddressXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.Ranges.Range.GroupAddressXr>`
                        
                        	**config**\: False
                        
                        .. attribute:: prefix_length
                        
                        	Prefix length
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: protocol
                        
                        	Protocol
                        	**type**\:  :py:class:`IgmpEdmProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpEdmProtocol>`
                        
                        	**config**\: False
                        
                        .. attribute:: is_stale
                        
                        	Is the entry stale
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Active.Vrfs.Vrf.Ranges.Range, self).__init__()

                            self.yang_name = "range"
                            self.yang_parent_name = "ranges"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("group-address-xr", ("group_address_xr", Igmp.Active.Vrfs.Vrf.Ranges.Range.GroupAddressXr))])
                            self._leafs = OrderedDict([
                                ('group_address', (YLeaf(YType.str, 'group-address'), ['str','str'])),
                                ('group_mask', (YLeaf(YType.uint32, 'group-mask'), ['int'])),
                                ('prefix_length', (YLeaf(YType.uint32, 'prefix-length'), ['int'])),
                                ('protocol', (YLeaf(YType.enumeration, 'protocol'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpEdmProtocol', '')])),
                                ('is_stale', (YLeaf(YType.boolean, 'is-stale'), ['bool'])),
                            ])
                            self.group_address = None
                            self.group_mask = None
                            self.prefix_length = None
                            self.protocol = None
                            self.is_stale = None

                            self.group_address_xr = Igmp.Active.Vrfs.Vrf.Ranges.Range.GroupAddressXr()
                            self.group_address_xr.parent = self
                            self._children_name_map["group_address_xr"] = "group-address-xr"
                            self._segment_path = lambda: "range"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Active.Vrfs.Vrf.Ranges.Range, ['group_address', 'group_mask', 'prefix_length', 'protocol', 'is_stale'], name, value)


                        class GroupAddressXr(_Entity_):
                            """
                            Group address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Active.Vrfs.Vrf.Ranges.Range.GroupAddressXr, self).__init__()

                                self.yang_name = "group-address-xr"
                                self.yang_parent_name = "range"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "group-address-xr"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Active.Vrfs.Vrf.Ranges.Range.GroupAddressXr, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Active.Vrfs.Vrf.Ranges.Range.GroupAddressXr']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Active.Vrfs.Vrf.Ranges.Range']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Igmp.Active.Vrfs.Vrf.Ranges']['meta_info']


                class IfrsInterfaces(_Entity_):
                    """
                    IGMP Interface specific
                    
                    .. attribute:: ifrs_interface
                    
                    	IGMP IFRS Interface
                    	**type**\: list of  		 :py:class:`IfrsInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.IfrsInterfaces.IfrsInterface>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Igmp.Active.Vrfs.Vrf.IfrsInterfaces, self).__init__()

                        self.yang_name = "ifrs-interfaces"
                        self.yang_parent_name = "vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("ifrs-interface", ("ifrs_interface", Igmp.Active.Vrfs.Vrf.IfrsInterfaces.IfrsInterface))])
                        self._leafs = OrderedDict()

                        self.ifrs_interface = YList(self)
                        self._segment_path = lambda: "ifrs-interfaces"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Igmp.Active.Vrfs.Vrf.IfrsInterfaces, [], name, value)


                    class IfrsInterface(_Entity_):
                        """
                        IGMP IFRS Interface
                        
                        .. attribute:: interface_name  (key)
                        
                        	IFRS Interface Name
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: igmp_interface_entry
                        
                        	IGMP interface entry
                        	**type**\:  :py:class:`IgmpInterfaceEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry>`
                        
                        	**config**\: False
                        
                        .. attribute:: join_group_count
                        
                        	Join group count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Active.Vrfs.Vrf.IfrsInterfaces.IfrsInterface, self).__init__()

                            self.yang_name = "ifrs-interface"
                            self.yang_parent_name = "ifrs-interfaces"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['interface_name']
                            self._child_classes = OrderedDict([("igmp-interface-entry", ("igmp_interface_entry", Igmp.Active.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry))])
                            self._leafs = OrderedDict([
                                ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                ('join_group_count', (YLeaf(YType.uint32, 'join-group-count'), ['int'])),
                            ])
                            self.interface_name = None
                            self.join_group_count = None

                            self.igmp_interface_entry = Igmp.Active.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry()
                            self.igmp_interface_entry.parent = self
                            self._children_name_map["igmp_interface_entry"] = "igmp-interface-entry"
                            self._segment_path = lambda: "ifrs-interface" + "[interface-name='" + str(self.interface_name) + "']"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Active.Vrfs.Vrf.IfrsInterfaces.IfrsInterface, ['interface_name', 'join_group_count'], name, value)


                        class IgmpInterfaceEntry(_Entity_):
                            """
                            IGMP interface entry
                            
                            .. attribute:: address
                            
                            	IP address
                            	**type**\:  :py:class:`Address <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.Address>`
                            
                            	**config**\: False
                            
                            .. attribute:: querier_address
                            
                            	Address of the Querier
                            	**type**\:  :py:class:`QuerierAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.QuerierAddress>`
                            
                            	**config**\: False
                            
                            .. attribute:: subscriber_address
                            
                            	Address of subscriber
                            	**type**\:  :py:class:`SubscriberAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.SubscriberAddress>`
                            
                            	**config**\: False
                            
                            .. attribute:: interface_name_xr
                            
                            	Interface
                            	**type**\: str
                            
                            	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                            
                            	**config**\: False
                            
                            .. attribute:: state
                            
                            	Interface state
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: prefix_length
                            
                            	Prefix length
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: is_interface_up
                            
                            	Is interface up
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: is_ip_enabled
                            
                            	Is IP enabled
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: is_router_enabled
                            
                            	Is Router functionality enabled
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: igmp_version
                            
                            	IGMP Router version
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            	**config**\: False
                            
                            .. attribute:: host_version
                            
                            	IGMP Host version
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            	**config**\: False
                            
                            .. attribute:: query_interval
                            
                            	Query Interval value in seconds
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            	**config**\: False
                            
                            	**units**\: second
                            
                            .. attribute:: query_timeout
                            
                            	Query Timeout value
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            	**config**\: False
                            
                            .. attribute:: query_maximum_response_time
                            
                            	Max Response Timeout value
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            	**config**\: False
                            
                            .. attribute:: last_member_query_interval
                            
                            	Last Member Query Interval
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            	**config**\: False
                            
                            .. attribute:: group_joins
                            
                            	No. of group joins
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: group_leaves
                            
                            	No. of group leaves
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: is_querier
                            
                            	Are we querier
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: total_active_groups
                            
                            	Actual number of groups on interface
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: robustness
                            
                            	Robustness Variable value
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: proxy_interface
                            
                            	Proxy interface index
                            	**type**\: str
                            
                            	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                            
                            	**config**\: False
                            
                            .. attribute:: querier_uptime
                            
                            	Time since the last querier took over
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            	**config**\: False
                            
                            .. attribute:: las_ll_registration_count
                            
                            	LAS reg count
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: las_get_address_count
                            
                            	LAS get addr count
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: las_update_count
                            
                            	LAS Update count
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: las_ll_remove_update_count
                            
                            	LAS LL remove update count
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: las_ll_add_update_count
                            
                            	LAS LL add update count
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: las_null_update_count
                            
                            	LAS Null update count
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: las_unregistration_count
                            
                            	LAS unreg count
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: is_las_request
                            
                            	LAS req
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: is_las_registered
                            
                            	LAS registered
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: vrf_id
                            
                            	VRF id
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: mte_vrf_id
                            
                            	MTE VRF id
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: location
                            
                            	Location
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: mtu
                            
                            	MTU
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: vrf_state
                            
                            	Vrf State
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: is_configurationverify
                            
                            	CFG verify
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: configurationvrf_set
                            
                            	CFG vrf set
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: configurationvrf_error
                            
                            	CFG vrf error
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: configuration_mcast_vrf_set
                            
                            	Is mcast set
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: configuration_mcast_vrf_error
                            
                            	Is mcast error
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: is_im_state_registered
                            
                            	Im state registered
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: is_subscriber
                            
                            	Subscriber interface
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: subscriber_mode
                            
                            	Subscriber mode
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: is_identity_present
                            
                            	Subscriber ID or Address available from AAA
                            	**type**\: bool
                            
                            	**config**\: False
                            
                            .. attribute:: subscriber_id
                            
                            	ID string of subscriber
                            	**type**\: str
                            
                            	**length:** 0..257
                            
                            	**config**\: False
                            
                            .. attribute:: parent_ifhandle
                            
                            	Parent If Handle
                            	**type**\: str
                            
                            	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                            
                            	**config**\: False
                            
                            .. attribute:: time_since_last_query_in_seconds
                            
                            	Time elapsed since last query
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: time_since_last_report_in_seconds
                            
                            	Time elapsed since last report
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: router_uptime_in_seconds
                            
                            	Uptime since router enabled event
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: mte_tuple_count
                            
                            	MTE Tuple count
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Active.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry, self).__init__()

                                self.yang_name = "igmp-interface-entry"
                                self.yang_parent_name = "ifrs-interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("address", ("address", Igmp.Active.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.Address)), ("querier-address", ("querier_address", Igmp.Active.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.QuerierAddress)), ("subscriber-address", ("subscriber_address", Igmp.Active.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.SubscriberAddress))])
                                self._leafs = OrderedDict([
                                    ('interface_name_xr', (YLeaf(YType.str, 'interface-name-xr'), ['str'])),
                                    ('state', (YLeaf(YType.uint32, 'state'), ['int'])),
                                    ('prefix_length', (YLeaf(YType.uint32, 'prefix-length'), ['int'])),
                                    ('is_interface_up', (YLeaf(YType.boolean, 'is-interface-up'), ['bool'])),
                                    ('is_ip_enabled', (YLeaf(YType.boolean, 'is-ip-enabled'), ['bool'])),
                                    ('is_router_enabled', (YLeaf(YType.boolean, 'is-router-enabled'), ['bool'])),
                                    ('igmp_version', (YLeaf(YType.uint8, 'igmp-version'), ['int'])),
                                    ('host_version', (YLeaf(YType.uint8, 'host-version'), ['int'])),
                                    ('query_interval', (YLeaf(YType.uint16, 'query-interval'), ['int'])),
                                    ('query_timeout', (YLeaf(YType.uint16, 'query-timeout'), ['int'])),
                                    ('query_maximum_response_time', (YLeaf(YType.uint16, 'query-maximum-response-time'), ['int'])),
                                    ('last_member_query_interval', (YLeaf(YType.uint16, 'last-member-query-interval'), ['int'])),
                                    ('group_joins', (YLeaf(YType.uint32, 'group-joins'), ['int'])),
                                    ('group_leaves', (YLeaf(YType.uint32, 'group-leaves'), ['int'])),
                                    ('is_querier', (YLeaf(YType.boolean, 'is-querier'), ['bool'])),
                                    ('total_active_groups', (YLeaf(YType.uint32, 'total-active-groups'), ['int'])),
                                    ('robustness', (YLeaf(YType.uint32, 'robustness'), ['int'])),
                                    ('proxy_interface', (YLeaf(YType.str, 'proxy-interface'), ['str'])),
                                    ('querier_uptime', (YLeaf(YType.uint16, 'querier-uptime'), ['int'])),
                                    ('las_ll_registration_count', (YLeaf(YType.uint32, 'las-ll-registration-count'), ['int'])),
                                    ('las_get_address_count', (YLeaf(YType.uint32, 'las-get-address-count'), ['int'])),
                                    ('las_update_count', (YLeaf(YType.uint32, 'las-update-count'), ['int'])),
                                    ('las_ll_remove_update_count', (YLeaf(YType.uint32, 'las-ll-remove-update-count'), ['int'])),
                                    ('las_ll_add_update_count', (YLeaf(YType.uint32, 'las-ll-add-update-count'), ['int'])),
                                    ('las_null_update_count', (YLeaf(YType.uint32, 'las-null-update-count'), ['int'])),
                                    ('las_unregistration_count', (YLeaf(YType.uint32, 'las-unregistration-count'), ['int'])),
                                    ('is_las_request', (YLeaf(YType.boolean, 'is-las-request'), ['bool'])),
                                    ('is_las_registered', (YLeaf(YType.boolean, 'is-las-registered'), ['bool'])),
                                    ('vrf_id', (YLeaf(YType.uint32, 'vrf-id'), ['int'])),
                                    ('mte_vrf_id', (YLeaf(YType.uint32, 'mte-vrf-id'), ['int'])),
                                    ('location', (YLeaf(YType.uint32, 'location'), ['int'])),
                                    ('mtu', (YLeaf(YType.uint32, 'mtu'), ['int'])),
                                    ('vrf_state', (YLeaf(YType.uint32, 'vrf-state'), ['int'])),
                                    ('is_configurationverify', (YLeaf(YType.boolean, 'is-configurationverify'), ['bool'])),
                                    ('configurationvrf_set', (YLeaf(YType.boolean, 'configurationvrf-set'), ['bool'])),
                                    ('configurationvrf_error', (YLeaf(YType.boolean, 'configurationvrf-error'), ['bool'])),
                                    ('configuration_mcast_vrf_set', (YLeaf(YType.boolean, 'configuration-mcast-vrf-set'), ['bool'])),
                                    ('configuration_mcast_vrf_error', (YLeaf(YType.boolean, 'configuration-mcast-vrf-error'), ['bool'])),
                                    ('is_im_state_registered', (YLeaf(YType.boolean, 'is-im-state-registered'), ['bool'])),
                                    ('is_subscriber', (YLeaf(YType.boolean, 'is-subscriber'), ['bool'])),
                                    ('subscriber_mode', (YLeaf(YType.uint32, 'subscriber-mode'), ['int'])),
                                    ('is_identity_present', (YLeaf(YType.boolean, 'is-identity-present'), ['bool'])),
                                    ('subscriber_id', (YLeaf(YType.str, 'subscriber-id'), ['str'])),
                                    ('parent_ifhandle', (YLeaf(YType.str, 'parent-ifhandle'), ['str'])),
                                    ('time_since_last_query_in_seconds', (YLeaf(YType.uint32, 'time-since-last-query-in-seconds'), ['int'])),
                                    ('time_since_last_report_in_seconds', (YLeaf(YType.uint32, 'time-since-last-report-in-seconds'), ['int'])),
                                    ('router_uptime_in_seconds', (YLeaf(YType.uint32, 'router-uptime-in-seconds'), ['int'])),
                                    ('mte_tuple_count', (YLeaf(YType.uint32, 'mte-tuple-count'), ['int'])),
                                ])
                                self.interface_name_xr = None
                                self.state = None
                                self.prefix_length = None
                                self.is_interface_up = None
                                self.is_ip_enabled = None
                                self.is_router_enabled = None
                                self.igmp_version = None
                                self.host_version = None
                                self.query_interval = None
                                self.query_timeout = None
                                self.query_maximum_response_time = None
                                self.last_member_query_interval = None
                                self.group_joins = None
                                self.group_leaves = None
                                self.is_querier = None
                                self.total_active_groups = None
                                self.robustness = None
                                self.proxy_interface = None
                                self.querier_uptime = None
                                self.las_ll_registration_count = None
                                self.las_get_address_count = None
                                self.las_update_count = None
                                self.las_ll_remove_update_count = None
                                self.las_ll_add_update_count = None
                                self.las_null_update_count = None
                                self.las_unregistration_count = None
                                self.is_las_request = None
                                self.is_las_registered = None
                                self.vrf_id = None
                                self.mte_vrf_id = None
                                self.location = None
                                self.mtu = None
                                self.vrf_state = None
                                self.is_configurationverify = None
                                self.configurationvrf_set = None
                                self.configurationvrf_error = None
                                self.configuration_mcast_vrf_set = None
                                self.configuration_mcast_vrf_error = None
                                self.is_im_state_registered = None
                                self.is_subscriber = None
                                self.subscriber_mode = None
                                self.is_identity_present = None
                                self.subscriber_id = None
                                self.parent_ifhandle = None
                                self.time_since_last_query_in_seconds = None
                                self.time_since_last_report_in_seconds = None
                                self.router_uptime_in_seconds = None
                                self.mte_tuple_count = None

                                self.address = Igmp.Active.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.Address()
                                self.address.parent = self
                                self._children_name_map["address"] = "address"

                                self.querier_address = Igmp.Active.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.QuerierAddress()
                                self.querier_address.parent = self
                                self._children_name_map["querier_address"] = "querier-address"

                                self.subscriber_address = Igmp.Active.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.SubscriberAddress()
                                self.subscriber_address.parent = self
                                self._children_name_map["subscriber_address"] = "subscriber-address"
                                self._segment_path = lambda: "igmp-interface-entry"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Active.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry, ['interface_name_xr', 'state', 'prefix_length', 'is_interface_up', 'is_ip_enabled', 'is_router_enabled', 'igmp_version', 'host_version', 'query_interval', 'query_timeout', 'query_maximum_response_time', 'last_member_query_interval', 'group_joins', 'group_leaves', 'is_querier', 'total_active_groups', 'robustness', 'proxy_interface', 'querier_uptime', 'las_ll_registration_count', 'las_get_address_count', 'las_update_count', 'las_ll_remove_update_count', 'las_ll_add_update_count', 'las_null_update_count', 'las_unregistration_count', 'is_las_request', 'is_las_registered', 'vrf_id', 'mte_vrf_id', 'location', 'mtu', 'vrf_state', 'is_configurationverify', 'configurationvrf_set', 'configurationvrf_error', 'configuration_mcast_vrf_set', 'configuration_mcast_vrf_error', 'is_im_state_registered', 'is_subscriber', 'subscriber_mode', 'is_identity_present', 'subscriber_id', 'parent_ifhandle', 'time_since_last_query_in_seconds', 'time_since_last_report_in_seconds', 'router_uptime_in_seconds', 'mte_tuple_count'], name, value)


                            class Address(_Entity_):
                                """
                                IP address
                                
                                .. attribute:: af_name
                                
                                	AFName
                                	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                                
                                	**config**\: False
                                
                                .. attribute:: ipv4_address
                                
                                	IPv4 Addr
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                .. attribute:: ipv6_address
                                
                                	IPV6 Addr
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                

                                """

                                _prefix = 'ipv4-igmp-oper'
                                _revision = '2018-01-31'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Igmp.Active.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.Address, self).__init__()

                                    self.yang_name = "address"
                                    self.yang_parent_name = "igmp-interface-entry"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                        ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                        ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                    ])
                                    self.af_name = None
                                    self.ipv4_address = None
                                    self.ipv6_address = None
                                    self._segment_path = lambda: "address"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Igmp.Active.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.Address, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                    return meta._meta_table['Igmp.Active.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.Address']['meta_info']


                            class QuerierAddress(_Entity_):
                                """
                                Address of the Querier
                                
                                .. attribute:: af_name
                                
                                	AFName
                                	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                                
                                	**config**\: False
                                
                                .. attribute:: ipv4_address
                                
                                	IPv4 Addr
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                .. attribute:: ipv6_address
                                
                                	IPV6 Addr
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                

                                """

                                _prefix = 'ipv4-igmp-oper'
                                _revision = '2018-01-31'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Igmp.Active.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.QuerierAddress, self).__init__()

                                    self.yang_name = "querier-address"
                                    self.yang_parent_name = "igmp-interface-entry"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                        ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                        ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                    ])
                                    self.af_name = None
                                    self.ipv4_address = None
                                    self.ipv6_address = None
                                    self._segment_path = lambda: "querier-address"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Igmp.Active.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.QuerierAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                    return meta._meta_table['Igmp.Active.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.QuerierAddress']['meta_info']


                            class SubscriberAddress(_Entity_):
                                """
                                Address of subscriber
                                
                                .. attribute:: af_name
                                
                                	AFName
                                	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                                
                                	**config**\: False
                                
                                .. attribute:: ipv4_address
                                
                                	IPv4 Addr
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                .. attribute:: ipv6_address
                                
                                	IPV6 Addr
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                

                                """

                                _prefix = 'ipv4-igmp-oper'
                                _revision = '2018-01-31'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Igmp.Active.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.SubscriberAddress, self).__init__()

                                    self.yang_name = "subscriber-address"
                                    self.yang_parent_name = "igmp-interface-entry"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                        ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                        ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                    ])
                                    self.af_name = None
                                    self.ipv4_address = None
                                    self.ipv6_address = None
                                    self._segment_path = lambda: "subscriber-address"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Igmp.Active.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.SubscriberAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                    return meta._meta_table['Igmp.Active.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.SubscriberAddress']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Active.Vrfs.Vrf.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Active.Vrfs.Vrf.IfrsInterfaces.IfrsInterface']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Igmp.Active.Vrfs.Vrf.IfrsInterfaces']['meta_info']


                class TrafficCounters(_Entity_):
                    """
                    IGMP Message Traffic Counters
                    
                    .. attribute:: elapsed_time
                    
                    	Running time for counters
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: packets_in
                    
                    	Packets in
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: packets_out
                    
                    	Packets out
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: format_errors
                    
                    	Malformed packets in
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: packet_manager_input_errors
                    
                    	Incoming Packet Manager packets dropped
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: packet_manager_output_errors
                    
                    	Outgoing Packet Manager packets dropped
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: checksum_errors
                    
                    	Checksum errors
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: receive_socket_errors
                    
                    	Socket errors on reception
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: socket_errors
                    
                    	Socket errors on send
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: bad_scope_errors
                    
                    	BadScope errors
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: auxillary_data_length_errors
                    
                    	AuxDataLen errors
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: invalid_source_address_errors
                    
                    	Invalid Source Address errors
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: no_socket_connection
                    
                    	Packets dropped since no socket connection
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: miscellaneous_errors
                    
                    	Packets dropped for other reasons
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: input_queries
                    
                    	Query packets in
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: input_reports
                    
                    	Reports in
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: input_leaves
                    
                    	Leaves in
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: input_mtrace
                    
                    	Mtrace packets in
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: input_dvmrp
                    
                    	DVMRP packets in
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: input_pim
                    
                    	PIM packets in
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: output_queries
                    
                    	Query packets out
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: output_reports
                    
                    	Reports out
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: output_leaves
                    
                    	Leaves out
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: output_mtrace
                    
                    	Mtrace packets out
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: output_dvmrp
                    
                    	DVMRP packets out
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: output_pim
                    
                    	PIM packets out
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: get_packet_failure
                    
                    	Packet get failed
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: output_no_parent_interface_handle
                    
                    	Failures setting 2nd ifhandle
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: input_no_idb
                    
                    	Packets received without idb
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: input_no_vrf_in_idb
                    
                    	Packets received on idb without VRF
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: input_disabled_idb
                    
                    	Packet received on disabled idb
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: input_martian_address
                    
                    	Packets received with Martian Address
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: input_no_assigned_vrf_id
                    
                    	Packets received with no assigned vrf id
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: input_no_vrf_mtrace
                    
                    	mtrace packets with no vrf associated
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: input_no_platform_support_mtrace
                    
                    	mtrace packets without platform support
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Igmp.Active.Vrfs.Vrf.TrafficCounters, self).__init__()

                        self.yang_name = "traffic-counters"
                        self.yang_parent_name = "vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('elapsed_time', (YLeaf(YType.uint32, 'elapsed-time'), ['int'])),
                            ('packets_in', (YLeaf(YType.uint32, 'packets-in'), ['int'])),
                            ('packets_out', (YLeaf(YType.uint32, 'packets-out'), ['int'])),
                            ('format_errors', (YLeaf(YType.uint32, 'format-errors'), ['int'])),
                            ('packet_manager_input_errors', (YLeaf(YType.uint32, 'packet-manager-input-errors'), ['int'])),
                            ('packet_manager_output_errors', (YLeaf(YType.uint32, 'packet-manager-output-errors'), ['int'])),
                            ('checksum_errors', (YLeaf(YType.uint32, 'checksum-errors'), ['int'])),
                            ('receive_socket_errors', (YLeaf(YType.uint32, 'receive-socket-errors'), ['int'])),
                            ('socket_errors', (YLeaf(YType.uint32, 'socket-errors'), ['int'])),
                            ('bad_scope_errors', (YLeaf(YType.uint32, 'bad-scope-errors'), ['int'])),
                            ('auxillary_data_length_errors', (YLeaf(YType.uint32, 'auxillary-data-length-errors'), ['int'])),
                            ('invalid_source_address_errors', (YLeaf(YType.uint32, 'invalid-source-address-errors'), ['int'])),
                            ('no_socket_connection', (YLeaf(YType.uint32, 'no-socket-connection'), ['int'])),
                            ('miscellaneous_errors', (YLeaf(YType.uint32, 'miscellaneous-errors'), ['int'])),
                            ('input_queries', (YLeaf(YType.uint32, 'input-queries'), ['int'])),
                            ('input_reports', (YLeaf(YType.uint32, 'input-reports'), ['int'])),
                            ('input_leaves', (YLeaf(YType.uint32, 'input-leaves'), ['int'])),
                            ('input_mtrace', (YLeaf(YType.uint32, 'input-mtrace'), ['int'])),
                            ('input_dvmrp', (YLeaf(YType.uint32, 'input-dvmrp'), ['int'])),
                            ('input_pim', (YLeaf(YType.uint32, 'input-pim'), ['int'])),
                            ('output_queries', (YLeaf(YType.uint32, 'output-queries'), ['int'])),
                            ('output_reports', (YLeaf(YType.uint32, 'output-reports'), ['int'])),
                            ('output_leaves', (YLeaf(YType.uint32, 'output-leaves'), ['int'])),
                            ('output_mtrace', (YLeaf(YType.uint32, 'output-mtrace'), ['int'])),
                            ('output_dvmrp', (YLeaf(YType.uint32, 'output-dvmrp'), ['int'])),
                            ('output_pim', (YLeaf(YType.uint32, 'output-pim'), ['int'])),
                            ('get_packet_failure', (YLeaf(YType.uint32, 'get-packet-failure'), ['int'])),
                            ('output_no_parent_interface_handle', (YLeaf(YType.uint32, 'output-no-parent-interface-handle'), ['int'])),
                            ('input_no_idb', (YLeaf(YType.uint32, 'input-no-idb'), ['int'])),
                            ('input_no_vrf_in_idb', (YLeaf(YType.uint32, 'input-no-vrf-in-idb'), ['int'])),
                            ('input_disabled_idb', (YLeaf(YType.uint32, 'input-disabled-idb'), ['int'])),
                            ('input_martian_address', (YLeaf(YType.uint32, 'input-martian-address'), ['int'])),
                            ('input_no_assigned_vrf_id', (YLeaf(YType.uint32, 'input-no-assigned-vrf-id'), ['int'])),
                            ('input_no_vrf_mtrace', (YLeaf(YType.uint32, 'input-no-vrf-mtrace'), ['int'])),
                            ('input_no_platform_support_mtrace', (YLeaf(YType.uint32, 'input-no-platform-support-mtrace'), ['int'])),
                        ])
                        self.elapsed_time = None
                        self.packets_in = None
                        self.packets_out = None
                        self.format_errors = None
                        self.packet_manager_input_errors = None
                        self.packet_manager_output_errors = None
                        self.checksum_errors = None
                        self.receive_socket_errors = None
                        self.socket_errors = None
                        self.bad_scope_errors = None
                        self.auxillary_data_length_errors = None
                        self.invalid_source_address_errors = None
                        self.no_socket_connection = None
                        self.miscellaneous_errors = None
                        self.input_queries = None
                        self.input_reports = None
                        self.input_leaves = None
                        self.input_mtrace = None
                        self.input_dvmrp = None
                        self.input_pim = None
                        self.output_queries = None
                        self.output_reports = None
                        self.output_leaves = None
                        self.output_mtrace = None
                        self.output_dvmrp = None
                        self.output_pim = None
                        self.get_packet_failure = None
                        self.output_no_parent_interface_handle = None
                        self.input_no_idb = None
                        self.input_no_vrf_in_idb = None
                        self.input_disabled_idb = None
                        self.input_martian_address = None
                        self.input_no_assigned_vrf_id = None
                        self.input_no_vrf_mtrace = None
                        self.input_no_platform_support_mtrace = None
                        self._segment_path = lambda: "traffic-counters"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Igmp.Active.Vrfs.Vrf.TrafficCounters, ['elapsed_time', 'packets_in', 'packets_out', 'format_errors', 'packet_manager_input_errors', 'packet_manager_output_errors', 'checksum_errors', 'receive_socket_errors', 'socket_errors', 'bad_scope_errors', 'auxillary_data_length_errors', 'invalid_source_address_errors', 'no_socket_connection', 'miscellaneous_errors', 'input_queries', 'input_reports', 'input_leaves', 'input_mtrace', 'input_dvmrp', 'input_pim', 'output_queries', 'output_reports', 'output_leaves', 'output_mtrace', 'output_dvmrp', 'output_pim', 'get_packet_failure', 'output_no_parent_interface_handle', 'input_no_idb', 'input_no_vrf_in_idb', 'input_disabled_idb', 'input_martian_address', 'input_no_assigned_vrf_id', 'input_no_vrf_mtrace', 'input_no_platform_support_mtrace'], name, value)

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Igmp.Active.Vrfs.Vrf.TrafficCounters']['meta_info']


                class Groups(_Entity_):
                    """
                    IGMP Group Database Table
                    
                    .. attribute:: group
                    
                    	IGMP Group Entry Information
                    	**type**\: list of  		 :py:class:`Group <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.Groups.Group>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Igmp.Active.Vrfs.Vrf.Groups, self).__init__()

                        self.yang_name = "groups"
                        self.yang_parent_name = "vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("group", ("group", Igmp.Active.Vrfs.Vrf.Groups.Group))])
                        self._leafs = OrderedDict()

                        self.group = YList(self)
                        self._segment_path = lambda: "groups"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Igmp.Active.Vrfs.Vrf.Groups, [], name, value)


                    class Group(_Entity_):
                        """
                        IGMP Group Entry Information
                        
                        .. attribute:: group_address
                        
                        	Group Address
                        	**type**\: union of the below types:
                        
                        		**type**\: str
                        
                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        		**type**\: str
                        
                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: interface_name
                        
                        	Interface Name
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: group_address_xr
                        
                        	Group Address
                        	**type**\:  :py:class:`GroupAddressXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.Groups.Group.GroupAddressXr>`
                        
                        	**config**\: False
                        
                        .. attribute:: last_reporter
                        
                        	Last reporter address
                        	**type**\:  :py:class:`LastReporter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.Groups.Group.LastReporter>`
                        
                        	**config**\: False
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\:  :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.Groups.Group.SourceAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: interface_name_xr
                        
                        	Interface
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: uptime
                        
                        	Uptime in seconds
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        	**config**\: False
                        
                        	**units**\: second
                        
                        .. attribute:: expiration_time
                        
                        	Expiration time in seconds
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        	**config**\: False
                        
                        	**units**\: second
                        
                        .. attribute:: explicit_tracking_enabled
                        
                        	Is explicit tracking enabled
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_self_join
                        
                        	If local system is member of this group on this interface
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: row_status
                        
                        	interface on or off for the group
                        	**type**\: str
                        
                        	**length:** 0..16
                        
                        	**config**\: False
                        
                        .. attribute:: is_low_memory
                        
                        	Node is running low on memory
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: router_filter_mode
                        
                        	Filter mode
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        	**config**\: False
                        
                        .. attribute:: older_host_version1_timer
                        
                        	IGMP Hostversion1timer
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: older_host_version2_timer
                        
                        	IGMP Hostversion2timer
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_added
                        
                        	Joined
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_suppressed
                        
                        	Suppressed
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Active.Vrfs.Vrf.Groups.Group, self).__init__()

                            self.yang_name = "group"
                            self.yang_parent_name = "groups"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("group-address-xr", ("group_address_xr", Igmp.Active.Vrfs.Vrf.Groups.Group.GroupAddressXr)), ("last-reporter", ("last_reporter", Igmp.Active.Vrfs.Vrf.Groups.Group.LastReporter)), ("source-address", ("source_address", Igmp.Active.Vrfs.Vrf.Groups.Group.SourceAddress))])
                            self._leafs = OrderedDict([
                                ('group_address', (YLeaf(YType.str, 'group-address'), ['str','str'])),
                                ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                ('interface_name_xr', (YLeaf(YType.str, 'interface-name-xr'), ['str'])),
                                ('uptime', (YLeaf(YType.uint64, 'uptime'), ['int'])),
                                ('expiration_time', (YLeaf(YType.int32, 'expiration-time'), ['int'])),
                                ('explicit_tracking_enabled', (YLeaf(YType.boolean, 'explicit-tracking-enabled'), ['bool'])),
                                ('is_self_join', (YLeaf(YType.boolean, 'is-self-join'), ['bool'])),
                                ('row_status', (YLeaf(YType.str, 'row-status'), ['str'])),
                                ('is_low_memory', (YLeaf(YType.boolean, 'is-low-memory'), ['bool'])),
                                ('router_filter_mode', (YLeaf(YType.uint8, 'router-filter-mode'), ['int'])),
                                ('older_host_version1_timer', (YLeaf(YType.uint32, 'older-host-version1-timer'), ['int'])),
                                ('older_host_version2_timer', (YLeaf(YType.uint32, 'older-host-version2-timer'), ['int'])),
                                ('is_added', (YLeaf(YType.boolean, 'is-added'), ['bool'])),
                                ('is_suppressed', (YLeaf(YType.boolean, 'is-suppressed'), ['bool'])),
                            ])
                            self.group_address = None
                            self.interface_name = None
                            self.interface_name_xr = None
                            self.uptime = None
                            self.expiration_time = None
                            self.explicit_tracking_enabled = None
                            self.is_self_join = None
                            self.row_status = None
                            self.is_low_memory = None
                            self.router_filter_mode = None
                            self.older_host_version1_timer = None
                            self.older_host_version2_timer = None
                            self.is_added = None
                            self.is_suppressed = None

                            self.group_address_xr = Igmp.Active.Vrfs.Vrf.Groups.Group.GroupAddressXr()
                            self.group_address_xr.parent = self
                            self._children_name_map["group_address_xr"] = "group-address-xr"

                            self.last_reporter = Igmp.Active.Vrfs.Vrf.Groups.Group.LastReporter()
                            self.last_reporter.parent = self
                            self._children_name_map["last_reporter"] = "last-reporter"

                            self.source_address = Igmp.Active.Vrfs.Vrf.Groups.Group.SourceAddress()
                            self.source_address.parent = self
                            self._children_name_map["source_address"] = "source-address"
                            self._segment_path = lambda: "group"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Active.Vrfs.Vrf.Groups.Group, ['group_address', 'interface_name', 'interface_name_xr', 'uptime', 'expiration_time', 'explicit_tracking_enabled', 'is_self_join', 'row_status', 'is_low_memory', 'router_filter_mode', 'older_host_version1_timer', 'older_host_version2_timer', 'is_added', 'is_suppressed'], name, value)


                        class GroupAddressXr(_Entity_):
                            """
                            Group Address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Active.Vrfs.Vrf.Groups.Group.GroupAddressXr, self).__init__()

                                self.yang_name = "group-address-xr"
                                self.yang_parent_name = "group"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "group-address-xr"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Active.Vrfs.Vrf.Groups.Group.GroupAddressXr, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Active.Vrfs.Vrf.Groups.Group.GroupAddressXr']['meta_info']


                        class LastReporter(_Entity_):
                            """
                            Last reporter address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Active.Vrfs.Vrf.Groups.Group.LastReporter, self).__init__()

                                self.yang_name = "last-reporter"
                                self.yang_parent_name = "group"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "last-reporter"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Active.Vrfs.Vrf.Groups.Group.LastReporter, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Active.Vrfs.Vrf.Groups.Group.LastReporter']['meta_info']


                        class SourceAddress(_Entity_):
                            """
                            Source Address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Active.Vrfs.Vrf.Groups.Group.SourceAddress, self).__init__()

                                self.yang_name = "source-address"
                                self.yang_parent_name = "group"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "source-address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Active.Vrfs.Vrf.Groups.Group.SourceAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Active.Vrfs.Vrf.Groups.Group.SourceAddress']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Active.Vrfs.Vrf.Groups.Group']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Igmp.Active.Vrfs.Vrf.Groups']['meta_info']


                class GroupSummary(_Entity_):
                    """
                    IGMP Groups Summary
                    
                    .. attribute:: groutes
                    
                    	No. of (\*,G) routes
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: sg_routes
                    
                    	No. of (S,G) routes
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: group_count
                    
                    	Current groups accepted
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_low_memory
                    
                    	Node is running low on memory
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Igmp.Active.Vrfs.Vrf.GroupSummary, self).__init__()

                        self.yang_name = "group-summary"
                        self.yang_parent_name = "vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('groutes', (YLeaf(YType.uint32, 'groutes'), ['int'])),
                            ('sg_routes', (YLeaf(YType.uint32, 'sg-routes'), ['int'])),
                            ('group_count', (YLeaf(YType.uint32, 'group-count'), ['int'])),
                            ('is_low_memory', (YLeaf(YType.boolean, 'is-low-memory'), ['bool'])),
                        ])
                        self.groutes = None
                        self.sg_routes = None
                        self.group_count = None
                        self.is_low_memory = None
                        self._segment_path = lambda: "group-summary"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Igmp.Active.Vrfs.Vrf.GroupSummary, ['groutes', 'sg_routes', 'group_count', 'is_low_memory'], name, value)

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Igmp.Active.Vrfs.Vrf.GroupSummary']['meta_info']


                class IfrsInterfaceSummary(_Entity_):
                    """
                    IGMP IFRS Interface summary
                    
                    .. attribute:: interface_count
                    
                    	Interface Count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: configuration_count
                    
                    	Configuration count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Igmp.Active.Vrfs.Vrf.IfrsInterfaceSummary, self).__init__()

                        self.yang_name = "ifrs-interface-summary"
                        self.yang_parent_name = "vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('interface_count', (YLeaf(YType.uint32, 'interface-count'), ['int'])),
                            ('configuration_count', (YLeaf(YType.uint32, 'configuration-count'), ['int'])),
                        ])
                        self.interface_count = None
                        self.configuration_count = None
                        self._segment_path = lambda: "ifrs-interface-summary"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Igmp.Active.Vrfs.Vrf.IfrsInterfaceSummary, ['interface_count', 'configuration_count'], name, value)

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Igmp.Active.Vrfs.Vrf.IfrsInterfaceSummary']['meta_info']


                class GlobalInterfaceTable(_Entity_):
                    """
                    IGMP Global Interface 
                    
                    .. attribute:: interface
                    
                    	IGMP Interface
                    	**type**\: list of  		 :py:class:`Interface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.GlobalInterfaceTable.Interface>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Igmp.Active.Vrfs.Vrf.GlobalInterfaceTable, self).__init__()

                        self.yang_name = "global-interface-table"
                        self.yang_parent_name = "vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("interface", ("interface", Igmp.Active.Vrfs.Vrf.GlobalInterfaceTable.Interface))])
                        self._leafs = OrderedDict()

                        self.interface = YList(self)
                        self._segment_path = lambda: "global-interface-table"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Igmp.Active.Vrfs.Vrf.GlobalInterfaceTable, [], name, value)


                    class Interface(_Entity_):
                        """
                        IGMP Interface
                        
                        .. attribute:: interface_name  (key)
                        
                        	Interface Name
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: address
                        
                        	IP address
                        	**type**\:  :py:class:`Address <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.GlobalInterfaceTable.Interface.Address>`
                        
                        	**config**\: False
                        
                        .. attribute:: querier_address
                        
                        	Address of the Querier
                        	**type**\:  :py:class:`QuerierAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.GlobalInterfaceTable.Interface.QuerierAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: subscriber_address
                        
                        	Address of subscriber
                        	**type**\:  :py:class:`SubscriberAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.GlobalInterfaceTable.Interface.SubscriberAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: interface_name_xr
                        
                        	Interface
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: state
                        
                        	Interface state
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: prefix_length
                        
                        	Prefix length
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_interface_up
                        
                        	Is interface up
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_ip_enabled
                        
                        	Is IP enabled
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_router_enabled
                        
                        	Is Router functionality enabled
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: igmp_version
                        
                        	IGMP Router version
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        	**config**\: False
                        
                        .. attribute:: host_version
                        
                        	IGMP Host version
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        	**config**\: False
                        
                        .. attribute:: query_interval
                        
                        	Query Interval value in seconds
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        	**units**\: second
                        
                        .. attribute:: query_timeout
                        
                        	Query Timeout value
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: query_maximum_response_time
                        
                        	Max Response Timeout value
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: last_member_query_interval
                        
                        	Last Member Query Interval
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: group_joins
                        
                        	No. of group joins
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: group_leaves
                        
                        	No. of group leaves
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_querier
                        
                        	Are we querier
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: total_active_groups
                        
                        	Actual number of groups on interface
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: robustness
                        
                        	Robustness Variable value
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: proxy_interface
                        
                        	Proxy interface index
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: querier_uptime
                        
                        	Time since the last querier took over
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: las_ll_registration_count
                        
                        	LAS reg count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_get_address_count
                        
                        	LAS get addr count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_update_count
                        
                        	LAS Update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_ll_remove_update_count
                        
                        	LAS LL remove update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_ll_add_update_count
                        
                        	LAS LL add update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_null_update_count
                        
                        	LAS Null update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_unregistration_count
                        
                        	LAS unreg count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_las_request
                        
                        	LAS req
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_las_registered
                        
                        	LAS registered
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: vrf_id
                        
                        	VRF id
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: mte_vrf_id
                        
                        	MTE VRF id
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: location
                        
                        	Location
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: mtu
                        
                        	MTU
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: vrf_state
                        
                        	Vrf State
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_configurationverify
                        
                        	CFG verify
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configurationvrf_set
                        
                        	CFG vrf set
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configurationvrf_error
                        
                        	CFG vrf error
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configuration_mcast_vrf_set
                        
                        	Is mcast set
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configuration_mcast_vrf_error
                        
                        	Is mcast error
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_im_state_registered
                        
                        	Im state registered
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_subscriber
                        
                        	Subscriber interface
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: subscriber_mode
                        
                        	Subscriber mode
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_identity_present
                        
                        	Subscriber ID or Address available from AAA
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: subscriber_id
                        
                        	ID string of subscriber
                        	**type**\: str
                        
                        	**length:** 0..257
                        
                        	**config**\: False
                        
                        .. attribute:: parent_ifhandle
                        
                        	Parent If Handle
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: time_since_last_query_in_seconds
                        
                        	Time elapsed since last query
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: time_since_last_report_in_seconds
                        
                        	Time elapsed since last report
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: router_uptime_in_seconds
                        
                        	Uptime since router enabled event
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: mte_tuple_count
                        
                        	MTE Tuple count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Active.Vrfs.Vrf.GlobalInterfaceTable.Interface, self).__init__()

                            self.yang_name = "interface"
                            self.yang_parent_name = "global-interface-table"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['interface_name']
                            self._child_classes = OrderedDict([("address", ("address", Igmp.Active.Vrfs.Vrf.GlobalInterfaceTable.Interface.Address)), ("querier-address", ("querier_address", Igmp.Active.Vrfs.Vrf.GlobalInterfaceTable.Interface.QuerierAddress)), ("subscriber-address", ("subscriber_address", Igmp.Active.Vrfs.Vrf.GlobalInterfaceTable.Interface.SubscriberAddress))])
                            self._leafs = OrderedDict([
                                ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                ('interface_name_xr', (YLeaf(YType.str, 'interface-name-xr'), ['str'])),
                                ('state', (YLeaf(YType.uint32, 'state'), ['int'])),
                                ('prefix_length', (YLeaf(YType.uint32, 'prefix-length'), ['int'])),
                                ('is_interface_up', (YLeaf(YType.boolean, 'is-interface-up'), ['bool'])),
                                ('is_ip_enabled', (YLeaf(YType.boolean, 'is-ip-enabled'), ['bool'])),
                                ('is_router_enabled', (YLeaf(YType.boolean, 'is-router-enabled'), ['bool'])),
                                ('igmp_version', (YLeaf(YType.uint8, 'igmp-version'), ['int'])),
                                ('host_version', (YLeaf(YType.uint8, 'host-version'), ['int'])),
                                ('query_interval', (YLeaf(YType.uint16, 'query-interval'), ['int'])),
                                ('query_timeout', (YLeaf(YType.uint16, 'query-timeout'), ['int'])),
                                ('query_maximum_response_time', (YLeaf(YType.uint16, 'query-maximum-response-time'), ['int'])),
                                ('last_member_query_interval', (YLeaf(YType.uint16, 'last-member-query-interval'), ['int'])),
                                ('group_joins', (YLeaf(YType.uint32, 'group-joins'), ['int'])),
                                ('group_leaves', (YLeaf(YType.uint32, 'group-leaves'), ['int'])),
                                ('is_querier', (YLeaf(YType.boolean, 'is-querier'), ['bool'])),
                                ('total_active_groups', (YLeaf(YType.uint32, 'total-active-groups'), ['int'])),
                                ('robustness', (YLeaf(YType.uint32, 'robustness'), ['int'])),
                                ('proxy_interface', (YLeaf(YType.str, 'proxy-interface'), ['str'])),
                                ('querier_uptime', (YLeaf(YType.uint16, 'querier-uptime'), ['int'])),
                                ('las_ll_registration_count', (YLeaf(YType.uint32, 'las-ll-registration-count'), ['int'])),
                                ('las_get_address_count', (YLeaf(YType.uint32, 'las-get-address-count'), ['int'])),
                                ('las_update_count', (YLeaf(YType.uint32, 'las-update-count'), ['int'])),
                                ('las_ll_remove_update_count', (YLeaf(YType.uint32, 'las-ll-remove-update-count'), ['int'])),
                                ('las_ll_add_update_count', (YLeaf(YType.uint32, 'las-ll-add-update-count'), ['int'])),
                                ('las_null_update_count', (YLeaf(YType.uint32, 'las-null-update-count'), ['int'])),
                                ('las_unregistration_count', (YLeaf(YType.uint32, 'las-unregistration-count'), ['int'])),
                                ('is_las_request', (YLeaf(YType.boolean, 'is-las-request'), ['bool'])),
                                ('is_las_registered', (YLeaf(YType.boolean, 'is-las-registered'), ['bool'])),
                                ('vrf_id', (YLeaf(YType.uint32, 'vrf-id'), ['int'])),
                                ('mte_vrf_id', (YLeaf(YType.uint32, 'mte-vrf-id'), ['int'])),
                                ('location', (YLeaf(YType.uint32, 'location'), ['int'])),
                                ('mtu', (YLeaf(YType.uint32, 'mtu'), ['int'])),
                                ('vrf_state', (YLeaf(YType.uint32, 'vrf-state'), ['int'])),
                                ('is_configurationverify', (YLeaf(YType.boolean, 'is-configurationverify'), ['bool'])),
                                ('configurationvrf_set', (YLeaf(YType.boolean, 'configurationvrf-set'), ['bool'])),
                                ('configurationvrf_error', (YLeaf(YType.boolean, 'configurationvrf-error'), ['bool'])),
                                ('configuration_mcast_vrf_set', (YLeaf(YType.boolean, 'configuration-mcast-vrf-set'), ['bool'])),
                                ('configuration_mcast_vrf_error', (YLeaf(YType.boolean, 'configuration-mcast-vrf-error'), ['bool'])),
                                ('is_im_state_registered', (YLeaf(YType.boolean, 'is-im-state-registered'), ['bool'])),
                                ('is_subscriber', (YLeaf(YType.boolean, 'is-subscriber'), ['bool'])),
                                ('subscriber_mode', (YLeaf(YType.uint32, 'subscriber-mode'), ['int'])),
                                ('is_identity_present', (YLeaf(YType.boolean, 'is-identity-present'), ['bool'])),
                                ('subscriber_id', (YLeaf(YType.str, 'subscriber-id'), ['str'])),
                                ('parent_ifhandle', (YLeaf(YType.str, 'parent-ifhandle'), ['str'])),
                                ('time_since_last_query_in_seconds', (YLeaf(YType.uint32, 'time-since-last-query-in-seconds'), ['int'])),
                                ('time_since_last_report_in_seconds', (YLeaf(YType.uint32, 'time-since-last-report-in-seconds'), ['int'])),
                                ('router_uptime_in_seconds', (YLeaf(YType.uint32, 'router-uptime-in-seconds'), ['int'])),
                                ('mte_tuple_count', (YLeaf(YType.uint32, 'mte-tuple-count'), ['int'])),
                            ])
                            self.interface_name = None
                            self.interface_name_xr = None
                            self.state = None
                            self.prefix_length = None
                            self.is_interface_up = None
                            self.is_ip_enabled = None
                            self.is_router_enabled = None
                            self.igmp_version = None
                            self.host_version = None
                            self.query_interval = None
                            self.query_timeout = None
                            self.query_maximum_response_time = None
                            self.last_member_query_interval = None
                            self.group_joins = None
                            self.group_leaves = None
                            self.is_querier = None
                            self.total_active_groups = None
                            self.robustness = None
                            self.proxy_interface = None
                            self.querier_uptime = None
                            self.las_ll_registration_count = None
                            self.las_get_address_count = None
                            self.las_update_count = None
                            self.las_ll_remove_update_count = None
                            self.las_ll_add_update_count = None
                            self.las_null_update_count = None
                            self.las_unregistration_count = None
                            self.is_las_request = None
                            self.is_las_registered = None
                            self.vrf_id = None
                            self.mte_vrf_id = None
                            self.location = None
                            self.mtu = None
                            self.vrf_state = None
                            self.is_configurationverify = None
                            self.configurationvrf_set = None
                            self.configurationvrf_error = None
                            self.configuration_mcast_vrf_set = None
                            self.configuration_mcast_vrf_error = None
                            self.is_im_state_registered = None
                            self.is_subscriber = None
                            self.subscriber_mode = None
                            self.is_identity_present = None
                            self.subscriber_id = None
                            self.parent_ifhandle = None
                            self.time_since_last_query_in_seconds = None
                            self.time_since_last_report_in_seconds = None
                            self.router_uptime_in_seconds = None
                            self.mte_tuple_count = None

                            self.address = Igmp.Active.Vrfs.Vrf.GlobalInterfaceTable.Interface.Address()
                            self.address.parent = self
                            self._children_name_map["address"] = "address"

                            self.querier_address = Igmp.Active.Vrfs.Vrf.GlobalInterfaceTable.Interface.QuerierAddress()
                            self.querier_address.parent = self
                            self._children_name_map["querier_address"] = "querier-address"

                            self.subscriber_address = Igmp.Active.Vrfs.Vrf.GlobalInterfaceTable.Interface.SubscriberAddress()
                            self.subscriber_address.parent = self
                            self._children_name_map["subscriber_address"] = "subscriber-address"
                            self._segment_path = lambda: "interface" + "[interface-name='" + str(self.interface_name) + "']"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Active.Vrfs.Vrf.GlobalInterfaceTable.Interface, ['interface_name', 'interface_name_xr', 'state', 'prefix_length', 'is_interface_up', 'is_ip_enabled', 'is_router_enabled', 'igmp_version', 'host_version', 'query_interval', 'query_timeout', 'query_maximum_response_time', 'last_member_query_interval', 'group_joins', 'group_leaves', 'is_querier', 'total_active_groups', 'robustness', 'proxy_interface', 'querier_uptime', 'las_ll_registration_count', 'las_get_address_count', 'las_update_count', 'las_ll_remove_update_count', 'las_ll_add_update_count', 'las_null_update_count', 'las_unregistration_count', 'is_las_request', 'is_las_registered', 'vrf_id', 'mte_vrf_id', 'location', 'mtu', 'vrf_state', 'is_configurationverify', 'configurationvrf_set', 'configurationvrf_error', 'configuration_mcast_vrf_set', 'configuration_mcast_vrf_error', 'is_im_state_registered', 'is_subscriber', 'subscriber_mode', 'is_identity_present', 'subscriber_id', 'parent_ifhandle', 'time_since_last_query_in_seconds', 'time_since_last_report_in_seconds', 'router_uptime_in_seconds', 'mte_tuple_count'], name, value)


                        class Address(_Entity_):
                            """
                            IP address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Active.Vrfs.Vrf.GlobalInterfaceTable.Interface.Address, self).__init__()

                                self.yang_name = "address"
                                self.yang_parent_name = "interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Active.Vrfs.Vrf.GlobalInterfaceTable.Interface.Address, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Active.Vrfs.Vrf.GlobalInterfaceTable.Interface.Address']['meta_info']


                        class QuerierAddress(_Entity_):
                            """
                            Address of the Querier
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Active.Vrfs.Vrf.GlobalInterfaceTable.Interface.QuerierAddress, self).__init__()

                                self.yang_name = "querier-address"
                                self.yang_parent_name = "interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "querier-address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Active.Vrfs.Vrf.GlobalInterfaceTable.Interface.QuerierAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Active.Vrfs.Vrf.GlobalInterfaceTable.Interface.QuerierAddress']['meta_info']


                        class SubscriberAddress(_Entity_):
                            """
                            Address of subscriber
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Active.Vrfs.Vrf.GlobalInterfaceTable.Interface.SubscriberAddress, self).__init__()

                                self.yang_name = "subscriber-address"
                                self.yang_parent_name = "interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "subscriber-address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Active.Vrfs.Vrf.GlobalInterfaceTable.Interface.SubscriberAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Active.Vrfs.Vrf.GlobalInterfaceTable.Interface.SubscriberAddress']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Active.Vrfs.Vrf.GlobalInterfaceTable.Interface']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Igmp.Active.Vrfs.Vrf.GlobalInterfaceTable']['meta_info']


                class SsmMapDetails(_Entity_):
                    """
                    SSM Map Detail
                    
                    .. attribute:: ssm_map_detail
                    
                    	SSM Map Detail Table information
                    	**type**\: list of  		 :py:class:`SsmMapDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.SsmMapDetails.SsmMapDetail>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Igmp.Active.Vrfs.Vrf.SsmMapDetails, self).__init__()

                        self.yang_name = "ssm-map-details"
                        self.yang_parent_name = "vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("ssm-map-detail", ("ssm_map_detail", Igmp.Active.Vrfs.Vrf.SsmMapDetails.SsmMapDetail))])
                        self._leafs = OrderedDict()

                        self.ssm_map_detail = YList(self)
                        self._segment_path = lambda: "ssm-map-details"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Igmp.Active.Vrfs.Vrf.SsmMapDetails, [], name, value)


                    class SsmMapDetail(_Entity_):
                        """
                        SSM Map Detail Table information
                        
                        .. attribute:: ssm_map_type
                        
                        	SSM Map Type
                        	**type**\:  :py:class:`IgmpssmMap <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpssmMap>`
                        
                        	**config**\: False
                        
                        .. attribute:: group_address
                        
                        	Group address
                        	**type**\: union of the below types:
                        
                        		**type**\: str
                        
                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        		**type**\: str
                        
                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: map_info
                        
                        	Basic Map Info
                        	**type**\:  :py:class:`MapInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.SsmMapDetails.SsmMapDetail.MapInfo>`
                        
                        	**config**\: False
                        
                        .. attribute:: expiration_time
                        
                        	Expiration Time in Seconds
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        	**units**\: second
                        
                        .. attribute:: response_pending
                        
                        	Response Pending
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: query_interval
                        
                        	Query interval
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: elapsed_time
                        
                        	Elapsed time
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        	**config**\: False
                        
                        .. attribute:: sources
                        
                        	List of sources
                        	**type**\: list of  		 :py:class:`Sources <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.SsmMapDetails.SsmMapDetail.Sources>`
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Active.Vrfs.Vrf.SsmMapDetails.SsmMapDetail, self).__init__()

                            self.yang_name = "ssm-map-detail"
                            self.yang_parent_name = "ssm-map-details"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("map-info", ("map_info", Igmp.Active.Vrfs.Vrf.SsmMapDetails.SsmMapDetail.MapInfo)), ("sources", ("sources", Igmp.Active.Vrfs.Vrf.SsmMapDetails.SsmMapDetail.Sources))])
                            self._leafs = OrderedDict([
                                ('ssm_map_type', (YLeaf(YType.enumeration, 'ssm-map-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpssmMap', '')])),
                                ('group_address', (YLeaf(YType.str, 'group-address'), ['str','str'])),
                                ('expiration_time', (YLeaf(YType.uint32, 'expiration-time'), ['int'])),
                                ('response_pending', (YLeaf(YType.boolean, 'response-pending'), ['bool'])),
                                ('query_interval', (YLeaf(YType.uint32, 'query-interval'), ['int'])),
                                ('elapsed_time', (YLeaf(YType.uint64, 'elapsed-time'), ['int'])),
                            ])
                            self.ssm_map_type = None
                            self.group_address = None
                            self.expiration_time = None
                            self.response_pending = None
                            self.query_interval = None
                            self.elapsed_time = None

                            self.map_info = Igmp.Active.Vrfs.Vrf.SsmMapDetails.SsmMapDetail.MapInfo()
                            self.map_info.parent = self
                            self._children_name_map["map_info"] = "map-info"

                            self.sources = YList(self)
                            self._segment_path = lambda: "ssm-map-detail"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Active.Vrfs.Vrf.SsmMapDetails.SsmMapDetail, ['ssm_map_type', 'group_address', 'expiration_time', 'response_pending', 'query_interval', 'elapsed_time'], name, value)


                        class MapInfo(_Entity_):
                            """
                            Basic Map Info
                            
                            .. attribute:: group_address_xr
                            
                            	Group Address
                            	**type**\:  :py:class:`GroupAddressXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.SsmMapDetails.SsmMapDetail.MapInfo.GroupAddressXr>`
                            
                            	**config**\: False
                            
                            .. attribute:: map_type
                            
                            	Map Type of group
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            .. attribute:: source_counts
                            
                            	Count of Sources
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Active.Vrfs.Vrf.SsmMapDetails.SsmMapDetail.MapInfo, self).__init__()

                                self.yang_name = "map-info"
                                self.yang_parent_name = "ssm-map-detail"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("group-address-xr", ("group_address_xr", Igmp.Active.Vrfs.Vrf.SsmMapDetails.SsmMapDetail.MapInfo.GroupAddressXr))])
                                self._leafs = OrderedDict([
                                    ('map_type', (YLeaf(YType.uint32, 'map-type'), ['int'])),
                                    ('source_counts', (YLeaf(YType.uint32, 'source-counts'), ['int'])),
                                ])
                                self.map_type = None
                                self.source_counts = None

                                self.group_address_xr = Igmp.Active.Vrfs.Vrf.SsmMapDetails.SsmMapDetail.MapInfo.GroupAddressXr()
                                self.group_address_xr.parent = self
                                self._children_name_map["group_address_xr"] = "group-address-xr"
                                self._segment_path = lambda: "map-info"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Active.Vrfs.Vrf.SsmMapDetails.SsmMapDetail.MapInfo, ['map_type', 'source_counts'], name, value)


                            class GroupAddressXr(_Entity_):
                                """
                                Group Address
                                
                                .. attribute:: af_name
                                
                                	AFName
                                	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                                
                                	**config**\: False
                                
                                .. attribute:: ipv4_address
                                
                                	IPv4 Addr
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                .. attribute:: ipv6_address
                                
                                	IPV6 Addr
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**config**\: False
                                
                                

                                """

                                _prefix = 'ipv4-igmp-oper'
                                _revision = '2018-01-31'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Igmp.Active.Vrfs.Vrf.SsmMapDetails.SsmMapDetail.MapInfo.GroupAddressXr, self).__init__()

                                    self.yang_name = "group-address-xr"
                                    self.yang_parent_name = "map-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                        ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                        ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                    ])
                                    self.af_name = None
                                    self.ipv4_address = None
                                    self.ipv6_address = None
                                    self._segment_path = lambda: "group-address-xr"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Igmp.Active.Vrfs.Vrf.SsmMapDetails.SsmMapDetail.MapInfo.GroupAddressXr, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                    return meta._meta_table['Igmp.Active.Vrfs.Vrf.SsmMapDetails.SsmMapDetail.MapInfo.GroupAddressXr']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Active.Vrfs.Vrf.SsmMapDetails.SsmMapDetail.MapInfo']['meta_info']


                        class Sources(_Entity_):
                            """
                            List of sources
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Active.Vrfs.Vrf.SsmMapDetails.SsmMapDetail.Sources, self).__init__()

                                self.yang_name = "sources"
                                self.yang_parent_name = "ssm-map-detail"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "sources"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Active.Vrfs.Vrf.SsmMapDetails.SsmMapDetail.Sources, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Active.Vrfs.Vrf.SsmMapDetails.SsmMapDetail.Sources']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Active.Vrfs.Vrf.SsmMapDetails.SsmMapDetail']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Igmp.Active.Vrfs.Vrf.SsmMapDetails']['meta_info']


                class InterfaceStateOffs(_Entity_):
                    """
                    IGMP Interface state off
                    
                    .. attribute:: interface_state_off
                    
                    	IGMP Interface
                    	**type**\: list of  		 :py:class:`InterfaceStateOff <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Igmp.Active.Vrfs.Vrf.InterfaceStateOffs, self).__init__()

                        self.yang_name = "interface-state-offs"
                        self.yang_parent_name = "vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("interface-state-off", ("interface_state_off", Igmp.Active.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff))])
                        self._leafs = OrderedDict()

                        self.interface_state_off = YList(self)
                        self._segment_path = lambda: "interface-state-offs"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Igmp.Active.Vrfs.Vrf.InterfaceStateOffs, [], name, value)


                    class InterfaceStateOff(_Entity_):
                        """
                        IGMP Interface
                        
                        .. attribute:: interface_name  (key)
                        
                        	Interface Name
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: address
                        
                        	IP address
                        	**type**\:  :py:class:`Address <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.Address>`
                        
                        	**config**\: False
                        
                        .. attribute:: querier_address
                        
                        	Address of the Querier
                        	**type**\:  :py:class:`QuerierAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.QuerierAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: subscriber_address
                        
                        	Address of subscriber
                        	**type**\:  :py:class:`SubscriberAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.SubscriberAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: interface_name_xr
                        
                        	Interface
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: state
                        
                        	Interface state
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: prefix_length
                        
                        	Prefix length
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_interface_up
                        
                        	Is interface up
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_ip_enabled
                        
                        	Is IP enabled
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_router_enabled
                        
                        	Is Router functionality enabled
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: igmp_version
                        
                        	IGMP Router version
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        	**config**\: False
                        
                        .. attribute:: host_version
                        
                        	IGMP Host version
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        	**config**\: False
                        
                        .. attribute:: query_interval
                        
                        	Query Interval value in seconds
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        	**units**\: second
                        
                        .. attribute:: query_timeout
                        
                        	Query Timeout value
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: query_maximum_response_time
                        
                        	Max Response Timeout value
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: last_member_query_interval
                        
                        	Last Member Query Interval
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: group_joins
                        
                        	No. of group joins
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: group_leaves
                        
                        	No. of group leaves
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_querier
                        
                        	Are we querier
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: total_active_groups
                        
                        	Actual number of groups on interface
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: robustness
                        
                        	Robustness Variable value
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: proxy_interface
                        
                        	Proxy interface index
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: querier_uptime
                        
                        	Time since the last querier took over
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: las_ll_registration_count
                        
                        	LAS reg count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_get_address_count
                        
                        	LAS get addr count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_update_count
                        
                        	LAS Update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_ll_remove_update_count
                        
                        	LAS LL remove update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_ll_add_update_count
                        
                        	LAS LL add update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_null_update_count
                        
                        	LAS Null update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_unregistration_count
                        
                        	LAS unreg count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_las_request
                        
                        	LAS req
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_las_registered
                        
                        	LAS registered
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: vrf_id
                        
                        	VRF id
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: mte_vrf_id
                        
                        	MTE VRF id
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: location
                        
                        	Location
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: mtu
                        
                        	MTU
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: vrf_state
                        
                        	Vrf State
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_configurationverify
                        
                        	CFG verify
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configurationvrf_set
                        
                        	CFG vrf set
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configurationvrf_error
                        
                        	CFG vrf error
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configuration_mcast_vrf_set
                        
                        	Is mcast set
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configuration_mcast_vrf_error
                        
                        	Is mcast error
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_im_state_registered
                        
                        	Im state registered
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_subscriber
                        
                        	Subscriber interface
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: subscriber_mode
                        
                        	Subscriber mode
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_identity_present
                        
                        	Subscriber ID or Address available from AAA
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: subscriber_id
                        
                        	ID string of subscriber
                        	**type**\: str
                        
                        	**length:** 0..257
                        
                        	**config**\: False
                        
                        .. attribute:: parent_ifhandle
                        
                        	Parent If Handle
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: time_since_last_query_in_seconds
                        
                        	Time elapsed since last query
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: time_since_last_report_in_seconds
                        
                        	Time elapsed since last report
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: router_uptime_in_seconds
                        
                        	Uptime since router enabled event
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: mte_tuple_count
                        
                        	MTE Tuple count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Active.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff, self).__init__()

                            self.yang_name = "interface-state-off"
                            self.yang_parent_name = "interface-state-offs"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['interface_name']
                            self._child_classes = OrderedDict([("address", ("address", Igmp.Active.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.Address)), ("querier-address", ("querier_address", Igmp.Active.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.QuerierAddress)), ("subscriber-address", ("subscriber_address", Igmp.Active.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.SubscriberAddress))])
                            self._leafs = OrderedDict([
                                ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                ('interface_name_xr', (YLeaf(YType.str, 'interface-name-xr'), ['str'])),
                                ('state', (YLeaf(YType.uint32, 'state'), ['int'])),
                                ('prefix_length', (YLeaf(YType.uint32, 'prefix-length'), ['int'])),
                                ('is_interface_up', (YLeaf(YType.boolean, 'is-interface-up'), ['bool'])),
                                ('is_ip_enabled', (YLeaf(YType.boolean, 'is-ip-enabled'), ['bool'])),
                                ('is_router_enabled', (YLeaf(YType.boolean, 'is-router-enabled'), ['bool'])),
                                ('igmp_version', (YLeaf(YType.uint8, 'igmp-version'), ['int'])),
                                ('host_version', (YLeaf(YType.uint8, 'host-version'), ['int'])),
                                ('query_interval', (YLeaf(YType.uint16, 'query-interval'), ['int'])),
                                ('query_timeout', (YLeaf(YType.uint16, 'query-timeout'), ['int'])),
                                ('query_maximum_response_time', (YLeaf(YType.uint16, 'query-maximum-response-time'), ['int'])),
                                ('last_member_query_interval', (YLeaf(YType.uint16, 'last-member-query-interval'), ['int'])),
                                ('group_joins', (YLeaf(YType.uint32, 'group-joins'), ['int'])),
                                ('group_leaves', (YLeaf(YType.uint32, 'group-leaves'), ['int'])),
                                ('is_querier', (YLeaf(YType.boolean, 'is-querier'), ['bool'])),
                                ('total_active_groups', (YLeaf(YType.uint32, 'total-active-groups'), ['int'])),
                                ('robustness', (YLeaf(YType.uint32, 'robustness'), ['int'])),
                                ('proxy_interface', (YLeaf(YType.str, 'proxy-interface'), ['str'])),
                                ('querier_uptime', (YLeaf(YType.uint16, 'querier-uptime'), ['int'])),
                                ('las_ll_registration_count', (YLeaf(YType.uint32, 'las-ll-registration-count'), ['int'])),
                                ('las_get_address_count', (YLeaf(YType.uint32, 'las-get-address-count'), ['int'])),
                                ('las_update_count', (YLeaf(YType.uint32, 'las-update-count'), ['int'])),
                                ('las_ll_remove_update_count', (YLeaf(YType.uint32, 'las-ll-remove-update-count'), ['int'])),
                                ('las_ll_add_update_count', (YLeaf(YType.uint32, 'las-ll-add-update-count'), ['int'])),
                                ('las_null_update_count', (YLeaf(YType.uint32, 'las-null-update-count'), ['int'])),
                                ('las_unregistration_count', (YLeaf(YType.uint32, 'las-unregistration-count'), ['int'])),
                                ('is_las_request', (YLeaf(YType.boolean, 'is-las-request'), ['bool'])),
                                ('is_las_registered', (YLeaf(YType.boolean, 'is-las-registered'), ['bool'])),
                                ('vrf_id', (YLeaf(YType.uint32, 'vrf-id'), ['int'])),
                                ('mte_vrf_id', (YLeaf(YType.uint32, 'mte-vrf-id'), ['int'])),
                                ('location', (YLeaf(YType.uint32, 'location'), ['int'])),
                                ('mtu', (YLeaf(YType.uint32, 'mtu'), ['int'])),
                                ('vrf_state', (YLeaf(YType.uint32, 'vrf-state'), ['int'])),
                                ('is_configurationverify', (YLeaf(YType.boolean, 'is-configurationverify'), ['bool'])),
                                ('configurationvrf_set', (YLeaf(YType.boolean, 'configurationvrf-set'), ['bool'])),
                                ('configurationvrf_error', (YLeaf(YType.boolean, 'configurationvrf-error'), ['bool'])),
                                ('configuration_mcast_vrf_set', (YLeaf(YType.boolean, 'configuration-mcast-vrf-set'), ['bool'])),
                                ('configuration_mcast_vrf_error', (YLeaf(YType.boolean, 'configuration-mcast-vrf-error'), ['bool'])),
                                ('is_im_state_registered', (YLeaf(YType.boolean, 'is-im-state-registered'), ['bool'])),
                                ('is_subscriber', (YLeaf(YType.boolean, 'is-subscriber'), ['bool'])),
                                ('subscriber_mode', (YLeaf(YType.uint32, 'subscriber-mode'), ['int'])),
                                ('is_identity_present', (YLeaf(YType.boolean, 'is-identity-present'), ['bool'])),
                                ('subscriber_id', (YLeaf(YType.str, 'subscriber-id'), ['str'])),
                                ('parent_ifhandle', (YLeaf(YType.str, 'parent-ifhandle'), ['str'])),
                                ('time_since_last_query_in_seconds', (YLeaf(YType.uint32, 'time-since-last-query-in-seconds'), ['int'])),
                                ('time_since_last_report_in_seconds', (YLeaf(YType.uint32, 'time-since-last-report-in-seconds'), ['int'])),
                                ('router_uptime_in_seconds', (YLeaf(YType.uint32, 'router-uptime-in-seconds'), ['int'])),
                                ('mte_tuple_count', (YLeaf(YType.uint32, 'mte-tuple-count'), ['int'])),
                            ])
                            self.interface_name = None
                            self.interface_name_xr = None
                            self.state = None
                            self.prefix_length = None
                            self.is_interface_up = None
                            self.is_ip_enabled = None
                            self.is_router_enabled = None
                            self.igmp_version = None
                            self.host_version = None
                            self.query_interval = None
                            self.query_timeout = None
                            self.query_maximum_response_time = None
                            self.last_member_query_interval = None
                            self.group_joins = None
                            self.group_leaves = None
                            self.is_querier = None
                            self.total_active_groups = None
                            self.robustness = None
                            self.proxy_interface = None
                            self.querier_uptime = None
                            self.las_ll_registration_count = None
                            self.las_get_address_count = None
                            self.las_update_count = None
                            self.las_ll_remove_update_count = None
                            self.las_ll_add_update_count = None
                            self.las_null_update_count = None
                            self.las_unregistration_count = None
                            self.is_las_request = None
                            self.is_las_registered = None
                            self.vrf_id = None
                            self.mte_vrf_id = None
                            self.location = None
                            self.mtu = None
                            self.vrf_state = None
                            self.is_configurationverify = None
                            self.configurationvrf_set = None
                            self.configurationvrf_error = None
                            self.configuration_mcast_vrf_set = None
                            self.configuration_mcast_vrf_error = None
                            self.is_im_state_registered = None
                            self.is_subscriber = None
                            self.subscriber_mode = None
                            self.is_identity_present = None
                            self.subscriber_id = None
                            self.parent_ifhandle = None
                            self.time_since_last_query_in_seconds = None
                            self.time_since_last_report_in_seconds = None
                            self.router_uptime_in_seconds = None
                            self.mte_tuple_count = None

                            self.address = Igmp.Active.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.Address()
                            self.address.parent = self
                            self._children_name_map["address"] = "address"

                            self.querier_address = Igmp.Active.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.QuerierAddress()
                            self.querier_address.parent = self
                            self._children_name_map["querier_address"] = "querier-address"

                            self.subscriber_address = Igmp.Active.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.SubscriberAddress()
                            self.subscriber_address.parent = self
                            self._children_name_map["subscriber_address"] = "subscriber-address"
                            self._segment_path = lambda: "interface-state-off" + "[interface-name='" + str(self.interface_name) + "']"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Active.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff, ['interface_name', 'interface_name_xr', 'state', 'prefix_length', 'is_interface_up', 'is_ip_enabled', 'is_router_enabled', 'igmp_version', 'host_version', 'query_interval', 'query_timeout', 'query_maximum_response_time', 'last_member_query_interval', 'group_joins', 'group_leaves', 'is_querier', 'total_active_groups', 'robustness', 'proxy_interface', 'querier_uptime', 'las_ll_registration_count', 'las_get_address_count', 'las_update_count', 'las_ll_remove_update_count', 'las_ll_add_update_count', 'las_null_update_count', 'las_unregistration_count', 'is_las_request', 'is_las_registered', 'vrf_id', 'mte_vrf_id', 'location', 'mtu', 'vrf_state', 'is_configurationverify', 'configurationvrf_set', 'configurationvrf_error', 'configuration_mcast_vrf_set', 'configuration_mcast_vrf_error', 'is_im_state_registered', 'is_subscriber', 'subscriber_mode', 'is_identity_present', 'subscriber_id', 'parent_ifhandle', 'time_since_last_query_in_seconds', 'time_since_last_report_in_seconds', 'router_uptime_in_seconds', 'mte_tuple_count'], name, value)


                        class Address(_Entity_):
                            """
                            IP address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Active.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.Address, self).__init__()

                                self.yang_name = "address"
                                self.yang_parent_name = "interface-state-off"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Active.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.Address, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Active.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.Address']['meta_info']


                        class QuerierAddress(_Entity_):
                            """
                            Address of the Querier
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Active.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.QuerierAddress, self).__init__()

                                self.yang_name = "querier-address"
                                self.yang_parent_name = "interface-state-off"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "querier-address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Active.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.QuerierAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Active.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.QuerierAddress']['meta_info']


                        class SubscriberAddress(_Entity_):
                            """
                            Address of subscriber
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Active.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.SubscriberAddress, self).__init__()

                                self.yang_name = "subscriber-address"
                                self.yang_parent_name = "interface-state-off"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "subscriber-address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Active.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.SubscriberAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Active.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff.SubscriberAddress']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Active.Vrfs.Vrf.InterfaceStateOffs.InterfaceStateOff']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Igmp.Active.Vrfs.Vrf.InterfaceStateOffs']['meta_info']

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Igmp.Active.Vrfs.Vrf']['meta_info']

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                return meta._meta_table['Igmp.Active.Vrfs']['meta_info']


        class Process(_Entity_):
            """
            Process
            
            .. attribute:: amt_summary
            
            	MRIB RouteDB Expiry Information
            	**type**\:  :py:class:`AmtSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Process.AmtSummary>`
            
            	**config**\: False
            
            .. attribute:: nsr
            
            	NSR Information
            	**type**\:  :py:class:`Nsr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Process.Nsr>`
            
            	**config**\: False
            
            .. attribute:: amt_gateways
            
            	Table containing AMT Gateway DataBase information
            	**type**\:  :py:class:`AmtGateways <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Process.AmtGateways>`
            
            	**config**\: False
            
            .. attribute:: unicast_qos_adjust_stats
            
            	IGMP Unicast\-Qos\-Adjust Statistics
            	**type**\:  :py:class:`UnicastQosAdjustStats <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Process.UnicastQosAdjustStats>`
            
            	**config**\: False
            
            .. attribute:: bvi_statistics
            
            	IGMP BVI Stats
            	**type**\:  :py:class:`BviStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Process.BviStatistics>`
            
            	**config**\: False
            
            .. attribute:: nsf
            
            	NSF Information
            	**type**\:  :py:class:`Nsf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Process.Nsf>`
            
            	**config**\: False
            
            

            """

            _prefix = 'ipv4-igmp-oper'
            _revision = '2018-01-31'

            def __init__(self):
                if sys.version_info > (3,):
                    super().__init__()
                else:
                    super(Igmp.Active.Process, self).__init__()

                self.yang_name = "process"
                self.yang_parent_name = "active"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("amt-summary", ("amt_summary", Igmp.Active.Process.AmtSummary)), ("nsr", ("nsr", Igmp.Active.Process.Nsr)), ("amt-gateways", ("amt_gateways", Igmp.Active.Process.AmtGateways)), ("unicast-qos-adjust-stats", ("unicast_qos_adjust_stats", Igmp.Active.Process.UnicastQosAdjustStats)), ("bvi-statistics", ("bvi_statistics", Igmp.Active.Process.BviStatistics)), ("nsf", ("nsf", Igmp.Active.Process.Nsf))])
                self._leafs = OrderedDict()

                self.amt_summary = Igmp.Active.Process.AmtSummary()
                self.amt_summary.parent = self
                self._children_name_map["amt_summary"] = "amt-summary"

                self.nsr = Igmp.Active.Process.Nsr()
                self.nsr.parent = self
                self._children_name_map["nsr"] = "nsr"

                self.amt_gateways = Igmp.Active.Process.AmtGateways()
                self.amt_gateways.parent = self
                self._children_name_map["amt_gateways"] = "amt-gateways"

                self.unicast_qos_adjust_stats = Igmp.Active.Process.UnicastQosAdjustStats()
                self.unicast_qos_adjust_stats.parent = self
                self._children_name_map["unicast_qos_adjust_stats"] = "unicast-qos-adjust-stats"

                self.bvi_statistics = Igmp.Active.Process.BviStatistics()
                self.bvi_statistics.parent = self
                self._children_name_map["bvi_statistics"] = "bvi-statistics"

                self.nsf = Igmp.Active.Process.Nsf()
                self.nsf.parent = self
                self._children_name_map["nsf"] = "nsf"
                self._segment_path = lambda: "process"
                self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/active/%s" % self._segment_path()
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(Igmp.Active.Process, [], name, value)


            class AmtSummary(_Entity_):
                """
                MRIB RouteDB Expiry Information
                
                .. attribute:: anycast_prefix
                
                	Robustness variable
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                	**config**\: False
                
                .. attribute:: prefix_length
                
                	Advertize AMT prefix length
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: relay_address
                
                	Advertaisment for AMT Relay address
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                	**config**\: False
                
                .. attribute:: mtu
                
                	AMT Tunnel MTU
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: tos
                
                	Type Of Service value in AMT header
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: ttl
                
                	Time To Live value in AMT header
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: query_interval
                
                	AMT Query interval
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: gateway_count
                
                	Number of AMT Gateway
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: max_gateway
                
                	Maximum Gateway allowed
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: tunnel_count
                
                	AMT Tunnel Count
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: tunnel_configured_maximum
                
                	AMT Tunnel configured Maximum
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: is_acl_configured
                
                	ACL configured under AMT
                	**type**\: bool
                
                	**config**\: False
                
                .. attribute:: is_gateway_simulation
                
                	AMT Gateway Simulation
                	**type**\: bool
                
                	**config**\: False
                
                .. attribute:: is_ou_of_resource
                
                	AMT Out Of Resource
                	**type**\: bool
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Igmp.Active.Process.AmtSummary, self).__init__()

                    self.yang_name = "amt-summary"
                    self.yang_parent_name = "process"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('anycast_prefix', (YLeaf(YType.str, 'anycast-prefix'), ['str'])),
                        ('prefix_length', (YLeaf(YType.uint32, 'prefix-length'), ['int'])),
                        ('relay_address', (YLeaf(YType.str, 'relay-address'), ['str'])),
                        ('mtu', (YLeaf(YType.uint32, 'mtu'), ['int'])),
                        ('tos', (YLeaf(YType.uint32, 'tos'), ['int'])),
                        ('ttl', (YLeaf(YType.uint32, 'ttl'), ['int'])),
                        ('query_interval', (YLeaf(YType.uint32, 'query-interval'), ['int'])),
                        ('gateway_count', (YLeaf(YType.uint32, 'gateway-count'), ['int'])),
                        ('max_gateway', (YLeaf(YType.uint32, 'max-gateway'), ['int'])),
                        ('tunnel_count', (YLeaf(YType.uint32, 'tunnel-count'), ['int'])),
                        ('tunnel_configured_maximum', (YLeaf(YType.uint32, 'tunnel-configured-maximum'), ['int'])),
                        ('is_acl_configured', (YLeaf(YType.boolean, 'is-acl-configured'), ['bool'])),
                        ('is_gateway_simulation', (YLeaf(YType.boolean, 'is-gateway-simulation'), ['bool'])),
                        ('is_ou_of_resource', (YLeaf(YType.boolean, 'is-ou-of-resource'), ['bool'])),
                    ])
                    self.anycast_prefix = None
                    self.prefix_length = None
                    self.relay_address = None
                    self.mtu = None
                    self.tos = None
                    self.ttl = None
                    self.query_interval = None
                    self.gateway_count = None
                    self.max_gateway = None
                    self.tunnel_count = None
                    self.tunnel_configured_maximum = None
                    self.is_acl_configured = None
                    self.is_gateway_simulation = None
                    self.is_ou_of_resource = None
                    self._segment_path = lambda: "amt-summary"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/active/process/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Igmp.Active.Process.AmtSummary, ['anycast_prefix', 'prefix_length', 'relay_address', 'mtu', 'tos', 'ttl', 'query_interval', 'gateway_count', 'max_gateway', 'tunnel_count', 'tunnel_configured_maximum', 'is_acl_configured', 'is_gateway_simulation', 'is_ou_of_resource'], name, value)

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Igmp.Active.Process.AmtSummary']['meta_info']


            class Nsr(_Entity_):
                """
                NSR Information
                
                .. attribute:: state
                
                	NSR state
                	**type**\: int
                
                	**range:** 0..255
                
                	**config**\: False
                
                .. attribute:: partner_proc_connected
                
                	Partner process connected
                	**type**\: bool
                
                	**config**\: False
                
                .. attribute:: collab_conv_done
                
                	Collaborators convergence done
                	**type**\: bool
                
                	**config**\: False
                
                .. attribute:: rmf_notification_done
                
                	RMF Notification done
                	**type**\: bool
                
                	**config**\: False
                
                .. attribute:: last_proc
                
                	Time when process came up
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                	**config**\: False
                
                .. attribute:: last_proc_connection_up
                
                	Time when process connection went up
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                	**config**\: False
                
                .. attribute:: last_proc_connection_dn
                
                	Time when process connection went down
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                	**config**\: False
                
                .. attribute:: last_rmf_ready
                
                	Time when RMF Rdy notif was sent
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                	**config**\: False
                
                .. attribute:: last_rmf_not_ready
                
                	Time when RMF Not\-Rdy notif was sent
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                	**config**\: False
                
                .. attribute:: count_proc_connection_up
                
                	No. of times process connection went up
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: count_proc_connection_dn
                
                	No. of times process connection went down
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: count_rmf_ready
                
                	No. of times RMF Ready notif was sent
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: count_rmf_not_ready
                
                	No. of times RMF Not Ready notif was sent
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Igmp.Active.Process.Nsr, self).__init__()

                    self.yang_name = "nsr"
                    self.yang_parent_name = "process"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('state', (YLeaf(YType.uint8, 'state'), ['int'])),
                        ('partner_proc_connected', (YLeaf(YType.boolean, 'partner-proc-connected'), ['bool'])),
                        ('collab_conv_done', (YLeaf(YType.boolean, 'collab-conv-done'), ['bool'])),
                        ('rmf_notification_done', (YLeaf(YType.boolean, 'rmf-notification-done'), ['bool'])),
                        ('last_proc', (YLeaf(YType.uint64, 'last-proc'), ['int'])),
                        ('last_proc_connection_up', (YLeaf(YType.uint64, 'last-proc-connection-up'), ['int'])),
                        ('last_proc_connection_dn', (YLeaf(YType.uint64, 'last-proc-connection-dn'), ['int'])),
                        ('last_rmf_ready', (YLeaf(YType.uint64, 'last-rmf-ready'), ['int'])),
                        ('last_rmf_not_ready', (YLeaf(YType.uint64, 'last-rmf-not-ready'), ['int'])),
                        ('count_proc_connection_up', (YLeaf(YType.uint32, 'count-proc-connection-up'), ['int'])),
                        ('count_proc_connection_dn', (YLeaf(YType.uint32, 'count-proc-connection-dn'), ['int'])),
                        ('count_rmf_ready', (YLeaf(YType.uint32, 'count-rmf-ready'), ['int'])),
                        ('count_rmf_not_ready', (YLeaf(YType.uint32, 'count-rmf-not-ready'), ['int'])),
                    ])
                    self.state = None
                    self.partner_proc_connected = None
                    self.collab_conv_done = None
                    self.rmf_notification_done = None
                    self.last_proc = None
                    self.last_proc_connection_up = None
                    self.last_proc_connection_dn = None
                    self.last_rmf_ready = None
                    self.last_rmf_not_ready = None
                    self.count_proc_connection_up = None
                    self.count_proc_connection_dn = None
                    self.count_rmf_ready = None
                    self.count_rmf_not_ready = None
                    self._segment_path = lambda: "nsr"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/active/process/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Igmp.Active.Process.Nsr, ['state', 'partner_proc_connected', 'collab_conv_done', 'rmf_notification_done', 'last_proc', 'last_proc_connection_up', 'last_proc_connection_dn', 'last_rmf_ready', 'last_rmf_not_ready', 'count_proc_connection_up', 'count_proc_connection_dn', 'count_rmf_ready', 'count_rmf_not_ready'], name, value)

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Igmp.Active.Process.Nsr']['meta_info']


            class AmtGateways(_Entity_):
                """
                Table containing AMT Gateway DataBase
                information
                
                .. attribute:: amt_gateway
                
                	AMT Gateway DataBase information
                	**type**\: list of  		 :py:class:`AmtGateway <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.Process.AmtGateways.AmtGateway>`
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Igmp.Active.Process.AmtGateways, self).__init__()

                    self.yang_name = "amt-gateways"
                    self.yang_parent_name = "process"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("amt-gateway", ("amt_gateway", Igmp.Active.Process.AmtGateways.AmtGateway))])
                    self._leafs = OrderedDict()

                    self.amt_gateway = YList(self)
                    self._segment_path = lambda: "amt-gateways"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/active/process/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Igmp.Active.Process.AmtGateways, [], name, value)


                class AmtGateway(_Entity_):
                    """
                    AMT Gateway DataBase information
                    
                    .. attribute:: gateway_address
                    
                    	Gateway Address
                    	**type**\: union of the below types:
                    
                    		**type**\: str
                    
                    			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    		**type**\: str
                    
                    			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    	**config**\: False
                    
                    .. attribute:: port
                    
                    	Port
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: amtgw
                    
                    	GW
                    	**type**\: str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    	**config**\: False
                    
                    .. attribute:: amt_port
                    
                    	Port
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: key_len
                    
                    	Len
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: amtnh
                    
                    	AMT NH
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: amt_nonce
                    
                    	Nonce
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: idb
                    
                    	IDB
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**config**\: False
                    
                    .. attribute:: mem_upd_in
                    
                    	UpdIn
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: mem_upd_out
                    
                    	UpdOut
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Igmp.Active.Process.AmtGateways.AmtGateway, self).__init__()

                        self.yang_name = "amt-gateway"
                        self.yang_parent_name = "amt-gateways"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('gateway_address', (YLeaf(YType.str, 'gateway-address'), ['str','str'])),
                            ('port', (YLeaf(YType.uint32, 'port'), ['int'])),
                            ('amtgw', (YLeaf(YType.str, 'amtgw'), ['str'])),
                            ('amt_port', (YLeaf(YType.uint32, 'amt-port'), ['int'])),
                            ('key_len', (YLeaf(YType.uint32, 'key-len'), ['int'])),
                            ('amtnh', (YLeaf(YType.uint32, 'amtnh'), ['int'])),
                            ('amt_nonce', (YLeaf(YType.uint32, 'amt-nonce'), ['int'])),
                            ('idb', (YLeaf(YType.uint64, 'idb'), ['int'])),
                            ('mem_upd_in', (YLeaf(YType.uint32, 'mem-upd-in'), ['int'])),
                            ('mem_upd_out', (YLeaf(YType.uint32, 'mem-upd-out'), ['int'])),
                        ])
                        self.gateway_address = None
                        self.port = None
                        self.amtgw = None
                        self.amt_port = None
                        self.key_len = None
                        self.amtnh = None
                        self.amt_nonce = None
                        self.idb = None
                        self.mem_upd_in = None
                        self.mem_upd_out = None
                        self._segment_path = lambda: "amt-gateway"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/active/process/amt-gateways/%s" % self._segment_path()
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Igmp.Active.Process.AmtGateways.AmtGateway, ['gateway_address', 'port', 'amtgw', 'amt_port', 'key_len', 'amtnh', 'amt_nonce', 'idb', 'mem_upd_in', 'mem_upd_out'], name, value)

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Igmp.Active.Process.AmtGateways.AmtGateway']['meta_info']

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Igmp.Active.Process.AmtGateways']['meta_info']


            class UnicastQosAdjustStats(_Entity_):
                """
                IGMP Unicast\-Qos\-Adjust Statistics
                
                .. attribute:: queues
                
                	I2Q Queue count
                	**type**\: int
                
                	**range:** 0..65535
                
                	**config**\: False
                
                .. attribute:: batches
                
                	I2Q Rate Batch count
                	**type**\: int
                
                	**range:** 0..65535
                
                	**config**\: False
                
                .. attribute:: add_to_batches
                
                	Add to batch count
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: delete_to_batches
                
                	Delete to batch count
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: send_success
                
                	Send Success count
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: send_errors
                
                	Number of Send errors in batch
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: send_comm_errors
                
                	Send Error due to comms count
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: send_partial_errors
                
                	Send Error due to partial issue count
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: received_resync_requests
                
                	Number of Resync request received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: sent_resync_bulks
                
                	Number of bulks sent for last resync received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: is_resync_received
                
                	Is Resync request received
                	**type**\: bool
                
                	**config**\: False
                
                .. attribute:: is_resync_required
                
                	Is Resync required
                	**type**\: bool
                
                	**config**\: False
                
                .. attribute:: is_resync_start_sent
                
                	Is Resync Start message sent
                	**type**\: bool
                
                	**config**\: False
                
                .. attribute:: is_qos_s_sweeped
                
                	Is QOS Sweeped once 
                	**type**\: bool
                
                	**config**\: False
                
                .. attribute:: last_sweep_time
                
                	Time elapsed since Last mark and sweep in seconds
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                	**config**\: False
                
                	**units**\: second
                
                .. attribute:: last_download_time
                
                	Time elapsed since Last download to QOS in seconds
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                	**config**\: False
                
                	**units**\: second
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Igmp.Active.Process.UnicastQosAdjustStats, self).__init__()

                    self.yang_name = "unicast-qos-adjust-stats"
                    self.yang_parent_name = "process"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('queues', (YLeaf(YType.uint16, 'queues'), ['int'])),
                        ('batches', (YLeaf(YType.uint16, 'batches'), ['int'])),
                        ('add_to_batches', (YLeaf(YType.uint32, 'add-to-batches'), ['int'])),
                        ('delete_to_batches', (YLeaf(YType.uint32, 'delete-to-batches'), ['int'])),
                        ('send_success', (YLeaf(YType.uint32, 'send-success'), ['int'])),
                        ('send_errors', (YLeaf(YType.uint32, 'send-errors'), ['int'])),
                        ('send_comm_errors', (YLeaf(YType.uint32, 'send-comm-errors'), ['int'])),
                        ('send_partial_errors', (YLeaf(YType.uint32, 'send-partial-errors'), ['int'])),
                        ('received_resync_requests', (YLeaf(YType.uint32, 'received-resync-requests'), ['int'])),
                        ('sent_resync_bulks', (YLeaf(YType.uint32, 'sent-resync-bulks'), ['int'])),
                        ('is_resync_received', (YLeaf(YType.boolean, 'is-resync-received'), ['bool'])),
                        ('is_resync_required', (YLeaf(YType.boolean, 'is-resync-required'), ['bool'])),
                        ('is_resync_start_sent', (YLeaf(YType.boolean, 'is-resync-start-sent'), ['bool'])),
                        ('is_qos_s_sweeped', (YLeaf(YType.boolean, 'is-qos-s-sweeped'), ['bool'])),
                        ('last_sweep_time', (YLeaf(YType.uint64, 'last-sweep-time'), ['int'])),
                        ('last_download_time', (YLeaf(YType.uint64, 'last-download-time'), ['int'])),
                    ])
                    self.queues = None
                    self.batches = None
                    self.add_to_batches = None
                    self.delete_to_batches = None
                    self.send_success = None
                    self.send_errors = None
                    self.send_comm_errors = None
                    self.send_partial_errors = None
                    self.received_resync_requests = None
                    self.sent_resync_bulks = None
                    self.is_resync_received = None
                    self.is_resync_required = None
                    self.is_resync_start_sent = None
                    self.is_qos_s_sweeped = None
                    self.last_sweep_time = None
                    self.last_download_time = None
                    self._segment_path = lambda: "unicast-qos-adjust-stats"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/active/process/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Igmp.Active.Process.UnicastQosAdjustStats, ['queues', 'batches', 'add_to_batches', 'delete_to_batches', 'send_success', 'send_errors', 'send_comm_errors', 'send_partial_errors', 'received_resync_requests', 'sent_resync_bulks', 'is_resync_received', 'is_resync_required', 'is_resync_start_sent', 'is_qos_s_sweeped', 'last_sweep_time', 'last_download_time'], name, value)

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Igmp.Active.Process.UnicastQosAdjustStats']['meta_info']


            class BviStatistics(_Entity_):
                """
                IGMP BVI Stats
                
                .. attribute:: receive_buffers
                
                	Number of AIPC buffers received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: release_buffers
                
                	Number of AIPC buffers released
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: send_blocks
                
                	Number of AIPC buffers send blocked
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: release_fail_buffers
                
                	Number of AIPC buffers release failed
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: null_buffer_handles
                
                	Number of AIPC NULL buffer handles
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: rx_ipc_open_notif
                
                	Number of AIPC open notifications received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: rx_ipc_close_notif
                
                	Number of AIPC close notifications received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: rx_ipc_error_notif
                
                	Number of AIPC error notifications received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: rx_ipc_lwm_notif
                
                	Number of AIPC LWM notifications received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: rx_ipc_input_wait_notif
                
                	Number of AIPC input waiting notifications received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: rx_ipc_send_status_notif
                
                	Number of AIPC send status notifications received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: rx_ipc_publish_notif
                
                	Number of AIPC publish notifications received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: rx_ipc_q_full_notif
                
                	Number of AIPC queue full notifications received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: rx_ipc_output_notif
                
                	Number of AIPC output notifications received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: rx_ipc_connect_notif
                
                	Number of AIPC connect notifications received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: rx_igmp_packet_success
                
                	Number of IGMP protocol messages received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: rx_add_mrouter_msg
                
                	Number of IGMP Mrouter Add messages received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: rx_delete_mrouter_msg
                
                	Number of IGMP Mrouter Delete messages received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: rx_sweep_mrouter_msg
                
                	Number of IGMP Mrouter Sweep messages received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: tx_add_mrouter_msg
                
                	Number of IGMP Mrouter Add messages transmitted
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: tx_delete_mrouter_msg
                
                	Number of IGMP Mrouter Delete messages transmitted
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: tx_sweep_mrouter_msg
                
                	Number of IGMP Mrouter Sweep messages received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: rx_unknown_mrouter_msg
                
                	Number of IGMP Mrouter Unknown messages received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: tx_unknown_mrouter_msg
                
                	Number of IGMP Mrouter Unknown messages transmitted
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: tx_buffer_errors
                
                	Number of AIPC transmission errors
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: tx_buffers
                
                	Number of AIPC buffers transmited
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: tx_protocol_buffers
                
                	Number of IGMP protocol buffers transmitted
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: tx_mrouter_buffers
                
                	Number of IGMP Mrouter buffers transmitted
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: tx_unknown_buffers
                
                	Number of IGMP Unknown buffers transmited
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: wtx_msg_recvd
                
                	Number of WTX messages received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: wtx_msg_sent
                
                	Number of WTX messages sent
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: wtx_msg_proto_sent
                
                	Number of WTX messages sent to Protocol
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: wtx_msg_drop_dc
                
                	Number of WTX messages dropped due to disconnect
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: wtx_msg_drop_nomem
                
                	Number of WTX messages dropped to memory
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: wtx_msg_freed
                
                	Number of WTX messages freed
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Igmp.Active.Process.BviStatistics, self).__init__()

                    self.yang_name = "bvi-statistics"
                    self.yang_parent_name = "process"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('receive_buffers', (YLeaf(YType.uint32, 'receive-buffers'), ['int'])),
                        ('release_buffers', (YLeaf(YType.uint32, 'release-buffers'), ['int'])),
                        ('send_blocks', (YLeaf(YType.uint32, 'send-blocks'), ['int'])),
                        ('release_fail_buffers', (YLeaf(YType.uint32, 'release-fail-buffers'), ['int'])),
                        ('null_buffer_handles', (YLeaf(YType.uint32, 'null-buffer-handles'), ['int'])),
                        ('rx_ipc_open_notif', (YLeaf(YType.uint32, 'rx-ipc-open-notif'), ['int'])),
                        ('rx_ipc_close_notif', (YLeaf(YType.uint32, 'rx-ipc-close-notif'), ['int'])),
                        ('rx_ipc_error_notif', (YLeaf(YType.uint32, 'rx-ipc-error-notif'), ['int'])),
                        ('rx_ipc_lwm_notif', (YLeaf(YType.uint32, 'rx-ipc-lwm-notif'), ['int'])),
                        ('rx_ipc_input_wait_notif', (YLeaf(YType.uint32, 'rx-ipc-input-wait-notif'), ['int'])),
                        ('rx_ipc_send_status_notif', (YLeaf(YType.uint32, 'rx-ipc-send-status-notif'), ['int'])),
                        ('rx_ipc_publish_notif', (YLeaf(YType.uint32, 'rx-ipc-publish-notif'), ['int'])),
                        ('rx_ipc_q_full_notif', (YLeaf(YType.uint32, 'rx-ipc-q-full-notif'), ['int'])),
                        ('rx_ipc_output_notif', (YLeaf(YType.uint32, 'rx-ipc-output-notif'), ['int'])),
                        ('rx_ipc_connect_notif', (YLeaf(YType.uint32, 'rx-ipc-connect-notif'), ['int'])),
                        ('rx_igmp_packet_success', (YLeaf(YType.uint32, 'rx-igmp-packet-success'), ['int'])),
                        ('rx_add_mrouter_msg', (YLeaf(YType.uint32, 'rx-add-mrouter-msg'), ['int'])),
                        ('rx_delete_mrouter_msg', (YLeaf(YType.uint32, 'rx-delete-mrouter-msg'), ['int'])),
                        ('rx_sweep_mrouter_msg', (YLeaf(YType.uint32, 'rx-sweep-mrouter-msg'), ['int'])),
                        ('tx_add_mrouter_msg', (YLeaf(YType.uint32, 'tx-add-mrouter-msg'), ['int'])),
                        ('tx_delete_mrouter_msg', (YLeaf(YType.uint32, 'tx-delete-mrouter-msg'), ['int'])),
                        ('tx_sweep_mrouter_msg', (YLeaf(YType.uint32, 'tx-sweep-mrouter-msg'), ['int'])),
                        ('rx_unknown_mrouter_msg', (YLeaf(YType.uint32, 'rx-unknown-mrouter-msg'), ['int'])),
                        ('tx_unknown_mrouter_msg', (YLeaf(YType.uint32, 'tx-unknown-mrouter-msg'), ['int'])),
                        ('tx_buffer_errors', (YLeaf(YType.uint32, 'tx-buffer-errors'), ['int'])),
                        ('tx_buffers', (YLeaf(YType.uint32, 'tx-buffers'), ['int'])),
                        ('tx_protocol_buffers', (YLeaf(YType.uint32, 'tx-protocol-buffers'), ['int'])),
                        ('tx_mrouter_buffers', (YLeaf(YType.uint32, 'tx-mrouter-buffers'), ['int'])),
                        ('tx_unknown_buffers', (YLeaf(YType.uint32, 'tx-unknown-buffers'), ['int'])),
                        ('wtx_msg_recvd', (YLeaf(YType.uint32, 'wtx-msg-recvd'), ['int'])),
                        ('wtx_msg_sent', (YLeaf(YType.uint32, 'wtx-msg-sent'), ['int'])),
                        ('wtx_msg_proto_sent', (YLeaf(YType.uint32, 'wtx-msg-proto-sent'), ['int'])),
                        ('wtx_msg_drop_dc', (YLeaf(YType.uint32, 'wtx-msg-drop-dc'), ['int'])),
                        ('wtx_msg_drop_nomem', (YLeaf(YType.uint32, 'wtx-msg-drop-nomem'), ['int'])),
                        ('wtx_msg_freed', (YLeaf(YType.uint32, 'wtx-msg-freed'), ['int'])),
                    ])
                    self.receive_buffers = None
                    self.release_buffers = None
                    self.send_blocks = None
                    self.release_fail_buffers = None
                    self.null_buffer_handles = None
                    self.rx_ipc_open_notif = None
                    self.rx_ipc_close_notif = None
                    self.rx_ipc_error_notif = None
                    self.rx_ipc_lwm_notif = None
                    self.rx_ipc_input_wait_notif = None
                    self.rx_ipc_send_status_notif = None
                    self.rx_ipc_publish_notif = None
                    self.rx_ipc_q_full_notif = None
                    self.rx_ipc_output_notif = None
                    self.rx_ipc_connect_notif = None
                    self.rx_igmp_packet_success = None
                    self.rx_add_mrouter_msg = None
                    self.rx_delete_mrouter_msg = None
                    self.rx_sweep_mrouter_msg = None
                    self.tx_add_mrouter_msg = None
                    self.tx_delete_mrouter_msg = None
                    self.tx_sweep_mrouter_msg = None
                    self.rx_unknown_mrouter_msg = None
                    self.tx_unknown_mrouter_msg = None
                    self.tx_buffer_errors = None
                    self.tx_buffers = None
                    self.tx_protocol_buffers = None
                    self.tx_mrouter_buffers = None
                    self.tx_unknown_buffers = None
                    self.wtx_msg_recvd = None
                    self.wtx_msg_sent = None
                    self.wtx_msg_proto_sent = None
                    self.wtx_msg_drop_dc = None
                    self.wtx_msg_drop_nomem = None
                    self.wtx_msg_freed = None
                    self._segment_path = lambda: "bvi-statistics"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/active/process/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Igmp.Active.Process.BviStatistics, ['receive_buffers', 'release_buffers', 'send_blocks', 'release_fail_buffers', 'null_buffer_handles', 'rx_ipc_open_notif', 'rx_ipc_close_notif', 'rx_ipc_error_notif', 'rx_ipc_lwm_notif', 'rx_ipc_input_wait_notif', 'rx_ipc_send_status_notif', 'rx_ipc_publish_notif', 'rx_ipc_q_full_notif', 'rx_ipc_output_notif', 'rx_ipc_connect_notif', 'rx_igmp_packet_success', 'rx_add_mrouter_msg', 'rx_delete_mrouter_msg', 'rx_sweep_mrouter_msg', 'tx_add_mrouter_msg', 'tx_delete_mrouter_msg', 'tx_sweep_mrouter_msg', 'rx_unknown_mrouter_msg', 'tx_unknown_mrouter_msg', 'tx_buffer_errors', 'tx_buffers', 'tx_protocol_buffers', 'tx_mrouter_buffers', 'tx_unknown_buffers', 'wtx_msg_recvd', 'wtx_msg_sent', 'wtx_msg_proto_sent', 'wtx_msg_drop_dc', 'wtx_msg_drop_nomem', 'wtx_msg_freed'], name, value)

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Igmp.Active.Process.BviStatistics']['meta_info']


            class Nsf(_Entity_):
                """
                NSF Information
                
                .. attribute:: is_multicast_nsf_active
                
                	Is Multicast NSF active
                	**type**\: bool
                
                	**config**\: False
                
                .. attribute:: multicast_nsf_timeout
                
                	Multicast NSF timeout in secs
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                	**units**\: second
                
                .. attribute:: multicast_nsf_time_left
                
                	Multicast NSF time remaining in secs
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                	**units**\: second
                
                .. attribute:: respawn_count
                
                	Respawn Count
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: last_nsf_on
                
                	Last NSF time ON
                	**type**\: int
                
                	**range:** \-9223372036854775808..9223372036854775807
                
                	**config**\: False
                
                .. attribute:: last_nsf_off
                
                	Last NSF time off
                	**type**\: int
                
                	**range:** \-9223372036854775808..9223372036854775807
                
                	**config**\: False
                
                .. attribute:: last_nsf_on_min
                
                	Last NSF time ON in Seconds
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                	**config**\: False
                
                	**units**\: second
                
                .. attribute:: last_nsf_off_min
                
                	Last NSF time OFF in Seconds
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                	**config**\: False
                
                	**units**\: second
                
                .. attribute:: last_icd_notif_recv
                
                	Last ICD Notif Recv
                	**type**\: int
                
                	**range:** \-9223372036854775808..9223372036854775807
                
                	**config**\: False
                
                .. attribute:: last_icd_notif_recv_min
                
                	Last ICD Notif Recv in Seconds
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                	**config**\: False
                
                	**units**\: second
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Igmp.Active.Process.Nsf, self).__init__()

                    self.yang_name = "nsf"
                    self.yang_parent_name = "process"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('is_multicast_nsf_active', (YLeaf(YType.boolean, 'is-multicast-nsf-active'), ['bool'])),
                        ('multicast_nsf_timeout', (YLeaf(YType.uint32, 'multicast-nsf-timeout'), ['int'])),
                        ('multicast_nsf_time_left', (YLeaf(YType.uint32, 'multicast-nsf-time-left'), ['int'])),
                        ('respawn_count', (YLeaf(YType.uint32, 'respawn-count'), ['int'])),
                        ('last_nsf_on', (YLeaf(YType.int64, 'last-nsf-on'), ['int'])),
                        ('last_nsf_off', (YLeaf(YType.int64, 'last-nsf-off'), ['int'])),
                        ('last_nsf_on_min', (YLeaf(YType.int32, 'last-nsf-on-min'), ['int'])),
                        ('last_nsf_off_min', (YLeaf(YType.int32, 'last-nsf-off-min'), ['int'])),
                        ('last_icd_notif_recv', (YLeaf(YType.int64, 'last-icd-notif-recv'), ['int'])),
                        ('last_icd_notif_recv_min', (YLeaf(YType.int32, 'last-icd-notif-recv-min'), ['int'])),
                    ])
                    self.is_multicast_nsf_active = None
                    self.multicast_nsf_timeout = None
                    self.multicast_nsf_time_left = None
                    self.respawn_count = None
                    self.last_nsf_on = None
                    self.last_nsf_off = None
                    self.last_nsf_on_min = None
                    self.last_nsf_off_min = None
                    self.last_icd_notif_recv = None
                    self.last_icd_notif_recv_min = None
                    self._segment_path = lambda: "nsf"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/active/process/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Igmp.Active.Process.Nsf, ['is_multicast_nsf_active', 'multicast_nsf_timeout', 'multicast_nsf_time_left', 'respawn_count', 'last_nsf_on', 'last_nsf_off', 'last_nsf_on_min', 'last_nsf_off_min', 'last_icd_notif_recv', 'last_icd_notif_recv_min'], name, value)

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Igmp.Active.Process.Nsf']['meta_info']

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                return meta._meta_table['Igmp.Active.Process']['meta_info']


        class DefaultContext(_Entity_):
            """
            Default Context
            
            .. attribute:: summary
            
            	IGMP Summary Information
            	**type**\:  :py:class:`Summary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.Summary>`
            
            	**config**\: False
            
            .. attribute:: interface_state_ons
            
            	IGMP Interface state on
            	**type**\:  :py:class:`InterfaceStateOns <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.InterfaceStateOns>`
            
            	**config**\: False
            
            .. attribute:: detail_groups
            
            	IGMP Detail Group Database
            	**type**\:  :py:class:`DetailGroups <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.DetailGroups>`
            
            	**config**\: False
            
            .. attribute:: non_active_groups
            
            	IGMP Non\-Active Groups Information
            	**type**\:  :py:class:`NonActiveGroups <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.NonActiveGroups>`
            
            	**config**\: False
            
            .. attribute:: ssm_maps
            
            	SSM Map Table
            	**type**\:  :py:class:`SsmMaps <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.SsmMaps>`
            
            	**config**\: False
            
            .. attribute:: explicit_groups
            
            	IGMP Explicit Group Database
            	**type**\:  :py:class:`ExplicitGroups <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.ExplicitGroups>`
            
            	**config**\: False
            
            .. attribute:: interface_table
            
            	IGMP Interface specific Table
            	**type**\:  :py:class:`InterfaceTable <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.InterfaceTable>`
            
            	**config**\: False
            
            .. attribute:: interface_unicast_qos_adjusts
            
            	IGMP Interface Unicast\-Qos\-Adjust
            	**type**\:  :py:class:`InterfaceUnicastQosAdjusts <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.InterfaceUnicastQosAdjusts>`
            
            	**config**\: False
            
            .. attribute:: ranges
            
            	Range table
            	**type**\:  :py:class:`Ranges <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.Ranges>`
            
            	**config**\: False
            
            .. attribute:: ifrs_interfaces
            
            	IGMP Interface specific
            	**type**\:  :py:class:`IfrsInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.IfrsInterfaces>`
            
            	**config**\: False
            
            .. attribute:: traffic_counters
            
            	IGMP Message Traffic Counters
            	**type**\:  :py:class:`TrafficCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.TrafficCounters>`
            
            	**config**\: False
            
            .. attribute:: groups
            
            	IGMP Group Database Table
            	**type**\:  :py:class:`Groups <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.Groups>`
            
            	**config**\: False
            
            .. attribute:: group_summary
            
            	IGMP Groups Summary
            	**type**\:  :py:class:`GroupSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.GroupSummary>`
            
            	**config**\: False
            
            .. attribute:: ifrs_interface_summary
            
            	IGMP IFRS Interface summary
            	**type**\:  :py:class:`IfrsInterfaceSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.IfrsInterfaceSummary>`
            
            	**config**\: False
            
            .. attribute:: global_interface_table
            
            	IGMP Global Interface 
            	**type**\:  :py:class:`GlobalInterfaceTable <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.GlobalInterfaceTable>`
            
            	**config**\: False
            
            .. attribute:: ssm_map_details
            
            	SSM Map Detail
            	**type**\:  :py:class:`SsmMapDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.SsmMapDetails>`
            
            	**config**\: False
            
            .. attribute:: interface_state_offs
            
            	IGMP Interface state off
            	**type**\:  :py:class:`InterfaceStateOffs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.InterfaceStateOffs>`
            
            	**config**\: False
            
            

            """

            _prefix = 'ipv4-igmp-oper'
            _revision = '2018-01-31'

            def __init__(self):
                if sys.version_info > (3,):
                    super().__init__()
                else:
                    super(Igmp.Active.DefaultContext, self).__init__()

                self.yang_name = "default-context"
                self.yang_parent_name = "active"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("summary", ("summary", Igmp.Active.DefaultContext.Summary)), ("interface-state-ons", ("interface_state_ons", Igmp.Active.DefaultContext.InterfaceStateOns)), ("detail-groups", ("detail_groups", Igmp.Active.DefaultContext.DetailGroups)), ("non-active-groups", ("non_active_groups", Igmp.Active.DefaultContext.NonActiveGroups)), ("ssm-maps", ("ssm_maps", Igmp.Active.DefaultContext.SsmMaps)), ("explicit-groups", ("explicit_groups", Igmp.Active.DefaultContext.ExplicitGroups)), ("interface-table", ("interface_table", Igmp.Active.DefaultContext.InterfaceTable)), ("interface-unicast-qos-adjusts", ("interface_unicast_qos_adjusts", Igmp.Active.DefaultContext.InterfaceUnicastQosAdjusts)), ("ranges", ("ranges", Igmp.Active.DefaultContext.Ranges)), ("ifrs-interfaces", ("ifrs_interfaces", Igmp.Active.DefaultContext.IfrsInterfaces)), ("traffic-counters", ("traffic_counters", Igmp.Active.DefaultContext.TrafficCounters)), ("groups", ("groups", Igmp.Active.DefaultContext.Groups)), ("group-summary", ("group_summary", Igmp.Active.DefaultContext.GroupSummary)), ("ifrs-interface-summary", ("ifrs_interface_summary", Igmp.Active.DefaultContext.IfrsInterfaceSummary)), ("global-interface-table", ("global_interface_table", Igmp.Active.DefaultContext.GlobalInterfaceTable)), ("ssm-map-details", ("ssm_map_details", Igmp.Active.DefaultContext.SsmMapDetails)), ("interface-state-offs", ("interface_state_offs", Igmp.Active.DefaultContext.InterfaceStateOffs))])
                self._leafs = OrderedDict()

                self.summary = Igmp.Active.DefaultContext.Summary()
                self.summary.parent = self
                self._children_name_map["summary"] = "summary"

                self.interface_state_ons = Igmp.Active.DefaultContext.InterfaceStateOns()
                self.interface_state_ons.parent = self
                self._children_name_map["interface_state_ons"] = "interface-state-ons"

                self.detail_groups = Igmp.Active.DefaultContext.DetailGroups()
                self.detail_groups.parent = self
                self._children_name_map["detail_groups"] = "detail-groups"

                self.non_active_groups = Igmp.Active.DefaultContext.NonActiveGroups()
                self.non_active_groups.parent = self
                self._children_name_map["non_active_groups"] = "non-active-groups"

                self.ssm_maps = Igmp.Active.DefaultContext.SsmMaps()
                self.ssm_maps.parent = self
                self._children_name_map["ssm_maps"] = "ssm-maps"

                self.explicit_groups = Igmp.Active.DefaultContext.ExplicitGroups()
                self.explicit_groups.parent = self
                self._children_name_map["explicit_groups"] = "explicit-groups"

                self.interface_table = Igmp.Active.DefaultContext.InterfaceTable()
                self.interface_table.parent = self
                self._children_name_map["interface_table"] = "interface-table"

                self.interface_unicast_qos_adjusts = Igmp.Active.DefaultContext.InterfaceUnicastQosAdjusts()
                self.interface_unicast_qos_adjusts.parent = self
                self._children_name_map["interface_unicast_qos_adjusts"] = "interface-unicast-qos-adjusts"

                self.ranges = Igmp.Active.DefaultContext.Ranges()
                self.ranges.parent = self
                self._children_name_map["ranges"] = "ranges"

                self.ifrs_interfaces = Igmp.Active.DefaultContext.IfrsInterfaces()
                self.ifrs_interfaces.parent = self
                self._children_name_map["ifrs_interfaces"] = "ifrs-interfaces"

                self.traffic_counters = Igmp.Active.DefaultContext.TrafficCounters()
                self.traffic_counters.parent = self
                self._children_name_map["traffic_counters"] = "traffic-counters"

                self.groups = Igmp.Active.DefaultContext.Groups()
                self.groups.parent = self
                self._children_name_map["groups"] = "groups"

                self.group_summary = Igmp.Active.DefaultContext.GroupSummary()
                self.group_summary.parent = self
                self._children_name_map["group_summary"] = "group-summary"

                self.ifrs_interface_summary = Igmp.Active.DefaultContext.IfrsInterfaceSummary()
                self.ifrs_interface_summary.parent = self
                self._children_name_map["ifrs_interface_summary"] = "ifrs-interface-summary"

                self.global_interface_table = Igmp.Active.DefaultContext.GlobalInterfaceTable()
                self.global_interface_table.parent = self
                self._children_name_map["global_interface_table"] = "global-interface-table"

                self.ssm_map_details = Igmp.Active.DefaultContext.SsmMapDetails()
                self.ssm_map_details.parent = self
                self._children_name_map["ssm_map_details"] = "ssm-map-details"

                self.interface_state_offs = Igmp.Active.DefaultContext.InterfaceStateOffs()
                self.interface_state_offs.parent = self
                self._children_name_map["interface_state_offs"] = "interface-state-offs"
                self._segment_path = lambda: "default-context"
                self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/active/%s" % self._segment_path()
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(Igmp.Active.DefaultContext, [], name, value)


            class Summary(_Entity_):
                """
                IGMP Summary Information
                
                .. attribute:: robustness
                
                	Robustness variable
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: group_limit
                
                	Maximum groups accepted
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: group_count
                
                	Current groups accepted
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: is_disabled
                
                	Is maximum enforcement disabled
                	**type**\: bool
                
                	**config**\: False
                
                .. attribute:: supported_interfaces
                
                	No. of supported interfaces
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: unsupported_interfaces
                
                	No. of unsupported interfaces
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: enabled_interface_count
                
                	No. of enabled interfaces
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: disabled_interface_count
                
                	No. of disabled interfaces
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: tunnel_mte_config_count
                
                	No. of static group commands
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: node_low_memory
                
                	Is node in low memory condition
                	**type**\: bool
                
                	**config**\: False
                
                .. attribute:: interface
                
                	Maximum and current groups accepted for each interface
                	**type**\: list of  		 :py:class:`Interface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.Summary.Interface>`
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Igmp.Active.DefaultContext.Summary, self).__init__()

                    self.yang_name = "summary"
                    self.yang_parent_name = "default-context"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("interface", ("interface", Igmp.Active.DefaultContext.Summary.Interface))])
                    self._leafs = OrderedDict([
                        ('robustness', (YLeaf(YType.uint32, 'robustness'), ['int'])),
                        ('group_limit', (YLeaf(YType.uint32, 'group-limit'), ['int'])),
                        ('group_count', (YLeaf(YType.uint32, 'group-count'), ['int'])),
                        ('is_disabled', (YLeaf(YType.boolean, 'is-disabled'), ['bool'])),
                        ('supported_interfaces', (YLeaf(YType.uint32, 'supported-interfaces'), ['int'])),
                        ('unsupported_interfaces', (YLeaf(YType.uint32, 'unsupported-interfaces'), ['int'])),
                        ('enabled_interface_count', (YLeaf(YType.uint32, 'enabled-interface-count'), ['int'])),
                        ('disabled_interface_count', (YLeaf(YType.uint32, 'disabled-interface-count'), ['int'])),
                        ('tunnel_mte_config_count', (YLeaf(YType.uint32, 'tunnel-mte-config-count'), ['int'])),
                        ('node_low_memory', (YLeaf(YType.boolean, 'node-low-memory'), ['bool'])),
                    ])
                    self.robustness = None
                    self.group_limit = None
                    self.group_count = None
                    self.is_disabled = None
                    self.supported_interfaces = None
                    self.unsupported_interfaces = None
                    self.enabled_interface_count = None
                    self.disabled_interface_count = None
                    self.tunnel_mte_config_count = None
                    self.node_low_memory = None

                    self.interface = YList(self)
                    self._segment_path = lambda: "summary"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/active/default-context/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Igmp.Active.DefaultContext.Summary, ['robustness', 'group_limit', 'group_count', 'is_disabled', 'supported_interfaces', 'unsupported_interfaces', 'enabled_interface_count', 'disabled_interface_count', 'tunnel_mte_config_count', 'node_low_memory'], name, value)


                class Interface(_Entity_):
                    """
                    Maximum and current groups accepted for each
                    interface
                    
                    .. attribute:: interface_name
                    
                    	Interface
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: group_limit
                    
                    	Maximum groups accepted per interface
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: group_count
                    
                    	Current groups accepted per interface
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: parent_ifhandle
                    
                    	Parent if handle
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: on_off
                    
                    	Enabled/Disabled
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: time_since_last_query_in_seconds
                    
                    	Time elapsed since last query
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: time_since_last_report_in_seconds
                    
                    	Time elapsed since last report
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: router_uptime_in_seconds
                    
                    	Time elapsed since router enabled event
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Igmp.Active.DefaultContext.Summary.Interface, self).__init__()

                        self.yang_name = "interface"
                        self.yang_parent_name = "summary"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                            ('group_limit', (YLeaf(YType.uint32, 'group-limit'), ['int'])),
                            ('group_count', (YLeaf(YType.uint32, 'group-count'), ['int'])),
                            ('parent_ifhandle', (YLeaf(YType.str, 'parent-ifhandle'), ['str'])),
                            ('on_off', (YLeaf(YType.boolean, 'on-off'), ['bool'])),
                            ('time_since_last_query_in_seconds', (YLeaf(YType.uint32, 'time-since-last-query-in-seconds'), ['int'])),
                            ('time_since_last_report_in_seconds', (YLeaf(YType.uint32, 'time-since-last-report-in-seconds'), ['int'])),
                            ('router_uptime_in_seconds', (YLeaf(YType.uint32, 'router-uptime-in-seconds'), ['int'])),
                        ])
                        self.interface_name = None
                        self.group_limit = None
                        self.group_count = None
                        self.parent_ifhandle = None
                        self.on_off = None
                        self.time_since_last_query_in_seconds = None
                        self.time_since_last_report_in_seconds = None
                        self.router_uptime_in_seconds = None
                        self._segment_path = lambda: "interface"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/active/default-context/summary/%s" % self._segment_path()
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Igmp.Active.DefaultContext.Summary.Interface, ['interface_name', 'group_limit', 'group_count', 'parent_ifhandle', 'on_off', 'time_since_last_query_in_seconds', 'time_since_last_report_in_seconds', 'router_uptime_in_seconds'], name, value)

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Igmp.Active.DefaultContext.Summary.Interface']['meta_info']

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Igmp.Active.DefaultContext.Summary']['meta_info']


            class InterfaceStateOns(_Entity_):
                """
                IGMP Interface state on
                
                .. attribute:: interface_state_on
                
                	IGMP Interface
                	**type**\: list of  		 :py:class:`InterfaceStateOn <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.InterfaceStateOns.InterfaceStateOn>`
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Igmp.Active.DefaultContext.InterfaceStateOns, self).__init__()

                    self.yang_name = "interface-state-ons"
                    self.yang_parent_name = "default-context"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("interface-state-on", ("interface_state_on", Igmp.Active.DefaultContext.InterfaceStateOns.InterfaceStateOn))])
                    self._leafs = OrderedDict()

                    self.interface_state_on = YList(self)
                    self._segment_path = lambda: "interface-state-ons"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/active/default-context/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Igmp.Active.DefaultContext.InterfaceStateOns, [], name, value)


                class InterfaceStateOn(_Entity_):
                    """
                    IGMP Interface
                    
                    .. attribute:: interface_name  (key)
                    
                    	Interface Name
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: address
                    
                    	IP address
                    	**type**\:  :py:class:`Address <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.InterfaceStateOns.InterfaceStateOn.Address>`
                    
                    	**config**\: False
                    
                    .. attribute:: querier_address
                    
                    	Address of the Querier
                    	**type**\:  :py:class:`QuerierAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.InterfaceStateOns.InterfaceStateOn.QuerierAddress>`
                    
                    	**config**\: False
                    
                    .. attribute:: subscriber_address
                    
                    	Address of subscriber
                    	**type**\:  :py:class:`SubscriberAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.InterfaceStateOns.InterfaceStateOn.SubscriberAddress>`
                    
                    	**config**\: False
                    
                    .. attribute:: interface_name_xr
                    
                    	Interface
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: state
                    
                    	Interface state
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: prefix_length
                    
                    	Prefix length
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_interface_up
                    
                    	Is interface up
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_ip_enabled
                    
                    	Is IP enabled
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_router_enabled
                    
                    	Is Router functionality enabled
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: igmp_version
                    
                    	IGMP Router version
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    	**config**\: False
                    
                    .. attribute:: host_version
                    
                    	IGMP Host version
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    	**config**\: False
                    
                    .. attribute:: query_interval
                    
                    	Query Interval value in seconds
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    	**units**\: second
                    
                    .. attribute:: query_timeout
                    
                    	Query Timeout value
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    .. attribute:: query_maximum_response_time
                    
                    	Max Response Timeout value
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    .. attribute:: last_member_query_interval
                    
                    	Last Member Query Interval
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    .. attribute:: group_joins
                    
                    	No. of group joins
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: group_leaves
                    
                    	No. of group leaves
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_querier
                    
                    	Are we querier
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: total_active_groups
                    
                    	Actual number of groups on interface
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: robustness
                    
                    	Robustness Variable value
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: proxy_interface
                    
                    	Proxy interface index
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: querier_uptime
                    
                    	Time since the last querier took over
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    .. attribute:: las_ll_registration_count
                    
                    	LAS reg count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_get_address_count
                    
                    	LAS get addr count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_update_count
                    
                    	LAS Update count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_ll_remove_update_count
                    
                    	LAS LL remove update count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_ll_add_update_count
                    
                    	LAS LL add update count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_null_update_count
                    
                    	LAS Null update count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_unregistration_count
                    
                    	LAS unreg count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_las_request
                    
                    	LAS req
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_las_registered
                    
                    	LAS registered
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: vrf_id
                    
                    	VRF id
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: mte_vrf_id
                    
                    	MTE VRF id
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: location
                    
                    	Location
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: mtu
                    
                    	MTU
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: vrf_state
                    
                    	Vrf State
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_configurationverify
                    
                    	CFG verify
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: configurationvrf_set
                    
                    	CFG vrf set
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: configurationvrf_error
                    
                    	CFG vrf error
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: configuration_mcast_vrf_set
                    
                    	Is mcast set
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: configuration_mcast_vrf_error
                    
                    	Is mcast error
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_im_state_registered
                    
                    	Im state registered
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_subscriber
                    
                    	Subscriber interface
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: subscriber_mode
                    
                    	Subscriber mode
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_identity_present
                    
                    	Subscriber ID or Address available from AAA
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: subscriber_id
                    
                    	ID string of subscriber
                    	**type**\: str
                    
                    	**length:** 0..257
                    
                    	**config**\: False
                    
                    .. attribute:: parent_ifhandle
                    
                    	Parent If Handle
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: time_since_last_query_in_seconds
                    
                    	Time elapsed since last query
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: time_since_last_report_in_seconds
                    
                    	Time elapsed since last report
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: router_uptime_in_seconds
                    
                    	Uptime since router enabled event
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: mte_tuple_count
                    
                    	MTE Tuple count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Igmp.Active.DefaultContext.InterfaceStateOns.InterfaceStateOn, self).__init__()

                        self.yang_name = "interface-state-on"
                        self.yang_parent_name = "interface-state-ons"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['interface_name']
                        self._child_classes = OrderedDict([("address", ("address", Igmp.Active.DefaultContext.InterfaceStateOns.InterfaceStateOn.Address)), ("querier-address", ("querier_address", Igmp.Active.DefaultContext.InterfaceStateOns.InterfaceStateOn.QuerierAddress)), ("subscriber-address", ("subscriber_address", Igmp.Active.DefaultContext.InterfaceStateOns.InterfaceStateOn.SubscriberAddress))])
                        self._leafs = OrderedDict([
                            ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                            ('interface_name_xr', (YLeaf(YType.str, 'interface-name-xr'), ['str'])),
                            ('state', (YLeaf(YType.uint32, 'state'), ['int'])),
                            ('prefix_length', (YLeaf(YType.uint32, 'prefix-length'), ['int'])),
                            ('is_interface_up', (YLeaf(YType.boolean, 'is-interface-up'), ['bool'])),
                            ('is_ip_enabled', (YLeaf(YType.boolean, 'is-ip-enabled'), ['bool'])),
                            ('is_router_enabled', (YLeaf(YType.boolean, 'is-router-enabled'), ['bool'])),
                            ('igmp_version', (YLeaf(YType.uint8, 'igmp-version'), ['int'])),
                            ('host_version', (YLeaf(YType.uint8, 'host-version'), ['int'])),
                            ('query_interval', (YLeaf(YType.uint16, 'query-interval'), ['int'])),
                            ('query_timeout', (YLeaf(YType.uint16, 'query-timeout'), ['int'])),
                            ('query_maximum_response_time', (YLeaf(YType.uint16, 'query-maximum-response-time'), ['int'])),
                            ('last_member_query_interval', (YLeaf(YType.uint16, 'last-member-query-interval'), ['int'])),
                            ('group_joins', (YLeaf(YType.uint32, 'group-joins'), ['int'])),
                            ('group_leaves', (YLeaf(YType.uint32, 'group-leaves'), ['int'])),
                            ('is_querier', (YLeaf(YType.boolean, 'is-querier'), ['bool'])),
                            ('total_active_groups', (YLeaf(YType.uint32, 'total-active-groups'), ['int'])),
                            ('robustness', (YLeaf(YType.uint32, 'robustness'), ['int'])),
                            ('proxy_interface', (YLeaf(YType.str, 'proxy-interface'), ['str'])),
                            ('querier_uptime', (YLeaf(YType.uint16, 'querier-uptime'), ['int'])),
                            ('las_ll_registration_count', (YLeaf(YType.uint32, 'las-ll-registration-count'), ['int'])),
                            ('las_get_address_count', (YLeaf(YType.uint32, 'las-get-address-count'), ['int'])),
                            ('las_update_count', (YLeaf(YType.uint32, 'las-update-count'), ['int'])),
                            ('las_ll_remove_update_count', (YLeaf(YType.uint32, 'las-ll-remove-update-count'), ['int'])),
                            ('las_ll_add_update_count', (YLeaf(YType.uint32, 'las-ll-add-update-count'), ['int'])),
                            ('las_null_update_count', (YLeaf(YType.uint32, 'las-null-update-count'), ['int'])),
                            ('las_unregistration_count', (YLeaf(YType.uint32, 'las-unregistration-count'), ['int'])),
                            ('is_las_request', (YLeaf(YType.boolean, 'is-las-request'), ['bool'])),
                            ('is_las_registered', (YLeaf(YType.boolean, 'is-las-registered'), ['bool'])),
                            ('vrf_id', (YLeaf(YType.uint32, 'vrf-id'), ['int'])),
                            ('mte_vrf_id', (YLeaf(YType.uint32, 'mte-vrf-id'), ['int'])),
                            ('location', (YLeaf(YType.uint32, 'location'), ['int'])),
                            ('mtu', (YLeaf(YType.uint32, 'mtu'), ['int'])),
                            ('vrf_state', (YLeaf(YType.uint32, 'vrf-state'), ['int'])),
                            ('is_configurationverify', (YLeaf(YType.boolean, 'is-configurationverify'), ['bool'])),
                            ('configurationvrf_set', (YLeaf(YType.boolean, 'configurationvrf-set'), ['bool'])),
                            ('configurationvrf_error', (YLeaf(YType.boolean, 'configurationvrf-error'), ['bool'])),
                            ('configuration_mcast_vrf_set', (YLeaf(YType.boolean, 'configuration-mcast-vrf-set'), ['bool'])),
                            ('configuration_mcast_vrf_error', (YLeaf(YType.boolean, 'configuration-mcast-vrf-error'), ['bool'])),
                            ('is_im_state_registered', (YLeaf(YType.boolean, 'is-im-state-registered'), ['bool'])),
                            ('is_subscriber', (YLeaf(YType.boolean, 'is-subscriber'), ['bool'])),
                            ('subscriber_mode', (YLeaf(YType.uint32, 'subscriber-mode'), ['int'])),
                            ('is_identity_present', (YLeaf(YType.boolean, 'is-identity-present'), ['bool'])),
                            ('subscriber_id', (YLeaf(YType.str, 'subscriber-id'), ['str'])),
                            ('parent_ifhandle', (YLeaf(YType.str, 'parent-ifhandle'), ['str'])),
                            ('time_since_last_query_in_seconds', (YLeaf(YType.uint32, 'time-since-last-query-in-seconds'), ['int'])),
                            ('time_since_last_report_in_seconds', (YLeaf(YType.uint32, 'time-since-last-report-in-seconds'), ['int'])),
                            ('router_uptime_in_seconds', (YLeaf(YType.uint32, 'router-uptime-in-seconds'), ['int'])),
                            ('mte_tuple_count', (YLeaf(YType.uint32, 'mte-tuple-count'), ['int'])),
                        ])
                        self.interface_name = None
                        self.interface_name_xr = None
                        self.state = None
                        self.prefix_length = None
                        self.is_interface_up = None
                        self.is_ip_enabled = None
                        self.is_router_enabled = None
                        self.igmp_version = None
                        self.host_version = None
                        self.query_interval = None
                        self.query_timeout = None
                        self.query_maximum_response_time = None
                        self.last_member_query_interval = None
                        self.group_joins = None
                        self.group_leaves = None
                        self.is_querier = None
                        self.total_active_groups = None
                        self.robustness = None
                        self.proxy_interface = None
                        self.querier_uptime = None
                        self.las_ll_registration_count = None
                        self.las_get_address_count = None
                        self.las_update_count = None
                        self.las_ll_remove_update_count = None
                        self.las_ll_add_update_count = None
                        self.las_null_update_count = None
                        self.las_unregistration_count = None
                        self.is_las_request = None
                        self.is_las_registered = None
                        self.vrf_id = None
                        self.mte_vrf_id = None
                        self.location = None
                        self.mtu = None
                        self.vrf_state = None
                        self.is_configurationverify = None
                        self.configurationvrf_set = None
                        self.configurationvrf_error = None
                        self.configuration_mcast_vrf_set = None
                        self.configuration_mcast_vrf_error = None
                        self.is_im_state_registered = None
                        self.is_subscriber = None
                        self.subscriber_mode = None
                        self.is_identity_present = None
                        self.subscriber_id = None
                        self.parent_ifhandle = None
                        self.time_since_last_query_in_seconds = None
                        self.time_since_last_report_in_seconds = None
                        self.router_uptime_in_seconds = None
                        self.mte_tuple_count = None

                        self.address = Igmp.Active.DefaultContext.InterfaceStateOns.InterfaceStateOn.Address()
                        self.address.parent = self
                        self._children_name_map["address"] = "address"

                        self.querier_address = Igmp.Active.DefaultContext.InterfaceStateOns.InterfaceStateOn.QuerierAddress()
                        self.querier_address.parent = self
                        self._children_name_map["querier_address"] = "querier-address"

                        self.subscriber_address = Igmp.Active.DefaultContext.InterfaceStateOns.InterfaceStateOn.SubscriberAddress()
                        self.subscriber_address.parent = self
                        self._children_name_map["subscriber_address"] = "subscriber-address"
                        self._segment_path = lambda: "interface-state-on" + "[interface-name='" + str(self.interface_name) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/active/default-context/interface-state-ons/%s" % self._segment_path()
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Igmp.Active.DefaultContext.InterfaceStateOns.InterfaceStateOn, ['interface_name', 'interface_name_xr', 'state', 'prefix_length', 'is_interface_up', 'is_ip_enabled', 'is_router_enabled', 'igmp_version', 'host_version', 'query_interval', 'query_timeout', 'query_maximum_response_time', 'last_member_query_interval', 'group_joins', 'group_leaves', 'is_querier', 'total_active_groups', 'robustness', 'proxy_interface', 'querier_uptime', 'las_ll_registration_count', 'las_get_address_count', 'las_update_count', 'las_ll_remove_update_count', 'las_ll_add_update_count', 'las_null_update_count', 'las_unregistration_count', 'is_las_request', 'is_las_registered', 'vrf_id', 'mte_vrf_id', 'location', 'mtu', 'vrf_state', 'is_configurationverify', 'configurationvrf_set', 'configurationvrf_error', 'configuration_mcast_vrf_set', 'configuration_mcast_vrf_error', 'is_im_state_registered', 'is_subscriber', 'subscriber_mode', 'is_identity_present', 'subscriber_id', 'parent_ifhandle', 'time_since_last_query_in_seconds', 'time_since_last_report_in_seconds', 'router_uptime_in_seconds', 'mte_tuple_count'], name, value)


                    class Address(_Entity_):
                        """
                        IP address
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Active.DefaultContext.InterfaceStateOns.InterfaceStateOn.Address, self).__init__()

                            self.yang_name = "address"
                            self.yang_parent_name = "interface-state-on"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "address"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Active.DefaultContext.InterfaceStateOns.InterfaceStateOn.Address, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Active.DefaultContext.InterfaceStateOns.InterfaceStateOn.Address']['meta_info']


                    class QuerierAddress(_Entity_):
                        """
                        Address of the Querier
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Active.DefaultContext.InterfaceStateOns.InterfaceStateOn.QuerierAddress, self).__init__()

                            self.yang_name = "querier-address"
                            self.yang_parent_name = "interface-state-on"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "querier-address"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Active.DefaultContext.InterfaceStateOns.InterfaceStateOn.QuerierAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Active.DefaultContext.InterfaceStateOns.InterfaceStateOn.QuerierAddress']['meta_info']


                    class SubscriberAddress(_Entity_):
                        """
                        Address of subscriber
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Active.DefaultContext.InterfaceStateOns.InterfaceStateOn.SubscriberAddress, self).__init__()

                            self.yang_name = "subscriber-address"
                            self.yang_parent_name = "interface-state-on"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "subscriber-address"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Active.DefaultContext.InterfaceStateOns.InterfaceStateOn.SubscriberAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Active.DefaultContext.InterfaceStateOns.InterfaceStateOn.SubscriberAddress']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Igmp.Active.DefaultContext.InterfaceStateOns.InterfaceStateOn']['meta_info']

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Igmp.Active.DefaultContext.InterfaceStateOns']['meta_info']


            class DetailGroups(_Entity_):
                """
                IGMP Detail Group Database
                
                .. attribute:: detail_group
                
                	IGMP Detail Group Entry Information
                	**type**\: list of  		 :py:class:`DetailGroup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.DetailGroups.DetailGroup>`
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Igmp.Active.DefaultContext.DetailGroups, self).__init__()

                    self.yang_name = "detail-groups"
                    self.yang_parent_name = "default-context"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("detail-group", ("detail_group", Igmp.Active.DefaultContext.DetailGroups.DetailGroup))])
                    self._leafs = OrderedDict()

                    self.detail_group = YList(self)
                    self._segment_path = lambda: "detail-groups"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/active/default-context/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Igmp.Active.DefaultContext.DetailGroups, [], name, value)


                class DetailGroup(_Entity_):
                    """
                    IGMP Detail Group Entry Information
                    
                    .. attribute:: group_address
                    
                    	Group Address
                    	**type**\: union of the below types:
                    
                    		**type**\: str
                    
                    			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    		**type**\: str
                    
                    			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    	**config**\: False
                    
                    .. attribute:: interface_name
                    
                    	Interface Name
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: source_address
                    
                    	Source/Host Address
                    	**type**\: union of the below types:
                    
                    		**type**\: str
                    
                    			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    		**type**\: str
                    
                    			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    	**config**\: False
                    
                    .. attribute:: group_info
                    
                    	Basic Group information
                    	**type**\:  :py:class:`GroupInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.DetailGroups.DetailGroup.GroupInfo>`
                    
                    	**config**\: False
                    
                    .. attribute:: is_router_exclude_mode
                    
                    	Group router filter mode
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_host_exclude_mode
                    
                    	Group host filter mode
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: source
                    
                    	List of sources
                    	**type**\: list of  		 :py:class:`Source <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.DetailGroups.DetailGroup.Source>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Igmp.Active.DefaultContext.DetailGroups.DetailGroup, self).__init__()

                        self.yang_name = "detail-group"
                        self.yang_parent_name = "detail-groups"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("group-info", ("group_info", Igmp.Active.DefaultContext.DetailGroups.DetailGroup.GroupInfo)), ("source", ("source", Igmp.Active.DefaultContext.DetailGroups.DetailGroup.Source))])
                        self._leafs = OrderedDict([
                            ('group_address', (YLeaf(YType.str, 'group-address'), ['str','str'])),
                            ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                            ('source_address', (YLeaf(YType.str, 'source-address'), ['str','str'])),
                            ('is_router_exclude_mode', (YLeaf(YType.boolean, 'is-router-exclude-mode'), ['bool'])),
                            ('is_host_exclude_mode', (YLeaf(YType.boolean, 'is-host-exclude-mode'), ['bool'])),
                        ])
                        self.group_address = None
                        self.interface_name = None
                        self.source_address = None
                        self.is_router_exclude_mode = None
                        self.is_host_exclude_mode = None

                        self.group_info = Igmp.Active.DefaultContext.DetailGroups.DetailGroup.GroupInfo()
                        self.group_info.parent = self
                        self._children_name_map["group_info"] = "group-info"

                        self.source = YList(self)
                        self._segment_path = lambda: "detail-group"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/active/default-context/detail-groups/%s" % self._segment_path()
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Igmp.Active.DefaultContext.DetailGroups.DetailGroup, ['group_address', 'interface_name', 'source_address', 'is_router_exclude_mode', 'is_host_exclude_mode'], name, value)


                    class GroupInfo(_Entity_):
                        """
                        Basic Group information
                        
                        .. attribute:: group_address_xr
                        
                        	Group Address
                        	**type**\:  :py:class:`GroupAddressXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.DetailGroups.DetailGroup.GroupInfo.GroupAddressXr>`
                        
                        	**config**\: False
                        
                        .. attribute:: last_reporter
                        
                        	Last reporter address
                        	**type**\:  :py:class:`LastReporter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.DetailGroups.DetailGroup.GroupInfo.LastReporter>`
                        
                        	**config**\: False
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\:  :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.DetailGroups.DetailGroup.GroupInfo.SourceAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: interface_name_xr
                        
                        	Interface
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: uptime
                        
                        	Uptime in seconds
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        	**config**\: False
                        
                        	**units**\: second
                        
                        .. attribute:: expiration_time
                        
                        	Expiration time in seconds
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        	**config**\: False
                        
                        	**units**\: second
                        
                        .. attribute:: explicit_tracking_enabled
                        
                        	Is explicit tracking enabled
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_self_join
                        
                        	If local system is member of this group on this interface
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: row_status
                        
                        	interface on or off for the group
                        	**type**\: str
                        
                        	**length:** 0..16
                        
                        	**config**\: False
                        
                        .. attribute:: is_low_memory
                        
                        	Node is running low on memory
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: router_filter_mode
                        
                        	Filter mode
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        	**config**\: False
                        
                        .. attribute:: older_host_version1_timer
                        
                        	IGMP Hostversion1timer
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: older_host_version2_timer
                        
                        	IGMP Hostversion2timer
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_added
                        
                        	Joined
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_suppressed
                        
                        	Suppressed
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Active.DefaultContext.DetailGroups.DetailGroup.GroupInfo, self).__init__()

                            self.yang_name = "group-info"
                            self.yang_parent_name = "detail-group"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("group-address-xr", ("group_address_xr", Igmp.Active.DefaultContext.DetailGroups.DetailGroup.GroupInfo.GroupAddressXr)), ("last-reporter", ("last_reporter", Igmp.Active.DefaultContext.DetailGroups.DetailGroup.GroupInfo.LastReporter)), ("source-address", ("source_address", Igmp.Active.DefaultContext.DetailGroups.DetailGroup.GroupInfo.SourceAddress))])
                            self._leafs = OrderedDict([
                                ('interface_name_xr', (YLeaf(YType.str, 'interface-name-xr'), ['str'])),
                                ('uptime', (YLeaf(YType.uint64, 'uptime'), ['int'])),
                                ('expiration_time', (YLeaf(YType.int32, 'expiration-time'), ['int'])),
                                ('explicit_tracking_enabled', (YLeaf(YType.boolean, 'explicit-tracking-enabled'), ['bool'])),
                                ('is_self_join', (YLeaf(YType.boolean, 'is-self-join'), ['bool'])),
                                ('row_status', (YLeaf(YType.str, 'row-status'), ['str'])),
                                ('is_low_memory', (YLeaf(YType.boolean, 'is-low-memory'), ['bool'])),
                                ('router_filter_mode', (YLeaf(YType.uint8, 'router-filter-mode'), ['int'])),
                                ('older_host_version1_timer', (YLeaf(YType.uint32, 'older-host-version1-timer'), ['int'])),
                                ('older_host_version2_timer', (YLeaf(YType.uint32, 'older-host-version2-timer'), ['int'])),
                                ('is_added', (YLeaf(YType.boolean, 'is-added'), ['bool'])),
                                ('is_suppressed', (YLeaf(YType.boolean, 'is-suppressed'), ['bool'])),
                            ])
                            self.interface_name_xr = None
                            self.uptime = None
                            self.expiration_time = None
                            self.explicit_tracking_enabled = None
                            self.is_self_join = None
                            self.row_status = None
                            self.is_low_memory = None
                            self.router_filter_mode = None
                            self.older_host_version1_timer = None
                            self.older_host_version2_timer = None
                            self.is_added = None
                            self.is_suppressed = None

                            self.group_address_xr = Igmp.Active.DefaultContext.DetailGroups.DetailGroup.GroupInfo.GroupAddressXr()
                            self.group_address_xr.parent = self
                            self._children_name_map["group_address_xr"] = "group-address-xr"

                            self.last_reporter = Igmp.Active.DefaultContext.DetailGroups.DetailGroup.GroupInfo.LastReporter()
                            self.last_reporter.parent = self
                            self._children_name_map["last_reporter"] = "last-reporter"

                            self.source_address = Igmp.Active.DefaultContext.DetailGroups.DetailGroup.GroupInfo.SourceAddress()
                            self.source_address.parent = self
                            self._children_name_map["source_address"] = "source-address"
                            self._segment_path = lambda: "group-info"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/active/default-context/detail-groups/detail-group/%s" % self._segment_path()
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Active.DefaultContext.DetailGroups.DetailGroup.GroupInfo, ['interface_name_xr', 'uptime', 'expiration_time', 'explicit_tracking_enabled', 'is_self_join', 'row_status', 'is_low_memory', 'router_filter_mode', 'older_host_version1_timer', 'older_host_version2_timer', 'is_added', 'is_suppressed'], name, value)


                        class GroupAddressXr(_Entity_):
                            """
                            Group Address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Active.DefaultContext.DetailGroups.DetailGroup.GroupInfo.GroupAddressXr, self).__init__()

                                self.yang_name = "group-address-xr"
                                self.yang_parent_name = "group-info"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "group-address-xr"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/active/default-context/detail-groups/detail-group/group-info/%s" % self._segment_path()
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Active.DefaultContext.DetailGroups.DetailGroup.GroupInfo.GroupAddressXr, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Active.DefaultContext.DetailGroups.DetailGroup.GroupInfo.GroupAddressXr']['meta_info']


                        class LastReporter(_Entity_):
                            """
                            Last reporter address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Active.DefaultContext.DetailGroups.DetailGroup.GroupInfo.LastReporter, self).__init__()

                                self.yang_name = "last-reporter"
                                self.yang_parent_name = "group-info"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "last-reporter"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/active/default-context/detail-groups/detail-group/group-info/%s" % self._segment_path()
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Active.DefaultContext.DetailGroups.DetailGroup.GroupInfo.LastReporter, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Active.DefaultContext.DetailGroups.DetailGroup.GroupInfo.LastReporter']['meta_info']


                        class SourceAddress(_Entity_):
                            """
                            Source Address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Active.DefaultContext.DetailGroups.DetailGroup.GroupInfo.SourceAddress, self).__init__()

                                self.yang_name = "source-address"
                                self.yang_parent_name = "group-info"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "source-address"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/active/default-context/detail-groups/detail-group/group-info/%s" % self._segment_path()
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Active.DefaultContext.DetailGroups.DetailGroup.GroupInfo.SourceAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Active.DefaultContext.DetailGroups.DetailGroup.GroupInfo.SourceAddress']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Active.DefaultContext.DetailGroups.DetailGroup.GroupInfo']['meta_info']


                    class Source(_Entity_):
                        """
                        List of sources
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\:  :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.DetailGroups.DetailGroup.Source.SourceAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: uptime
                        
                        	Uptime in seconds
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        	**config**\: False
                        
                        	**units**\: second
                        
                        .. attribute:: expiration_time
                        
                        	Expiration time in seconds
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        	**config**\: False
                        
                        	**units**\: second
                        
                        .. attribute:: is_local
                        
                        	Is this a local source
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_remote
                        
                        	Is this a remote source
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_forward
                        
                        	Should we forward on this entry
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_we_report
                        
                        	Should we report the source
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: flags
                        
                        	Source flags
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        	**config**\: False
                        
                        .. attribute:: is_added
                        
                        	Joined
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Active.DefaultContext.DetailGroups.DetailGroup.Source, self).__init__()

                            self.yang_name = "source"
                            self.yang_parent_name = "detail-group"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("source-address", ("source_address", Igmp.Active.DefaultContext.DetailGroups.DetailGroup.Source.SourceAddress))])
                            self._leafs = OrderedDict([
                                ('uptime', (YLeaf(YType.uint64, 'uptime'), ['int'])),
                                ('expiration_time', (YLeaf(YType.int32, 'expiration-time'), ['int'])),
                                ('is_local', (YLeaf(YType.boolean, 'is-local'), ['bool'])),
                                ('is_remote', (YLeaf(YType.boolean, 'is-remote'), ['bool'])),
                                ('is_forward', (YLeaf(YType.boolean, 'is-forward'), ['bool'])),
                                ('is_we_report', (YLeaf(YType.boolean, 'is-we-report'), ['bool'])),
                                ('flags', (YLeaf(YType.int32, 'flags'), ['int'])),
                                ('is_added', (YLeaf(YType.boolean, 'is-added'), ['bool'])),
                            ])
                            self.uptime = None
                            self.expiration_time = None
                            self.is_local = None
                            self.is_remote = None
                            self.is_forward = None
                            self.is_we_report = None
                            self.flags = None
                            self.is_added = None

                            self.source_address = Igmp.Active.DefaultContext.DetailGroups.DetailGroup.Source.SourceAddress()
                            self.source_address.parent = self
                            self._children_name_map["source_address"] = "source-address"
                            self._segment_path = lambda: "source"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/active/default-context/detail-groups/detail-group/%s" % self._segment_path()
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Active.DefaultContext.DetailGroups.DetailGroup.Source, ['uptime', 'expiration_time', 'is_local', 'is_remote', 'is_forward', 'is_we_report', 'flags', 'is_added'], name, value)


                        class SourceAddress(_Entity_):
                            """
                            Source Address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Active.DefaultContext.DetailGroups.DetailGroup.Source.SourceAddress, self).__init__()

                                self.yang_name = "source-address"
                                self.yang_parent_name = "source"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "source-address"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/active/default-context/detail-groups/detail-group/source/%s" % self._segment_path()
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Active.DefaultContext.DetailGroups.DetailGroup.Source.SourceAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Active.DefaultContext.DetailGroups.DetailGroup.Source.SourceAddress']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Active.DefaultContext.DetailGroups.DetailGroup.Source']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Igmp.Active.DefaultContext.DetailGroups.DetailGroup']['meta_info']

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Igmp.Active.DefaultContext.DetailGroups']['meta_info']


            class NonActiveGroups(_Entity_):
                """
                IGMP Non\-Active Groups Information
                
                .. attribute:: non_active_groups
                
                	List of non\-active groups
                	**type**\: list of  		 :py:class:`NonActiveGroups_ <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.NonActiveGroups.NonActiveGroups_>`
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Igmp.Active.DefaultContext.NonActiveGroups, self).__init__()

                    self.yang_name = "non-active-groups"
                    self.yang_parent_name = "default-context"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("non-active-groups", ("non_active_groups", Igmp.Active.DefaultContext.NonActiveGroups.NonActiveGroups_))])
                    self._leafs = OrderedDict()

                    self.non_active_groups = YList(self)
                    self._segment_path = lambda: "non-active-groups"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/active/default-context/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Igmp.Active.DefaultContext.NonActiveGroups, [], name, value)


                class NonActiveGroups_(_Entity_):
                    """
                    List of non\-active groups
                    
                    .. attribute:: group_address
                    
                    	Group Address
                    	**type**\:  :py:class:`GroupAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.NonActiveGroups.NonActiveGroups_.GroupAddress>`
                    
                    	**config**\: False
                    
                    .. attribute:: source_address
                    
                    	Source Address
                    	**type**\:  :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.NonActiveGroups.NonActiveGroups_.SourceAddress>`
                    
                    	**config**\: False
                    
                    .. attribute:: interface
                    
                    	Interface Name
                    	**type**\: str
                    
                    	**length:** 0..65
                    
                    	**config**\: False
                    
                    .. attribute:: reason_for_non_activity
                    
                    	Reason for group join not being processed
                    	**type**\: str
                    
                    	**length:** 0..257
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Igmp.Active.DefaultContext.NonActiveGroups.NonActiveGroups_, self).__init__()

                        self.yang_name = "non-active-groups"
                        self.yang_parent_name = "non-active-groups"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("group-address", ("group_address", Igmp.Active.DefaultContext.NonActiveGroups.NonActiveGroups_.GroupAddress)), ("source-address", ("source_address", Igmp.Active.DefaultContext.NonActiveGroups.NonActiveGroups_.SourceAddress))])
                        self._leafs = OrderedDict([
                            ('interface', (YLeaf(YType.str, 'interface'), ['str'])),
                            ('reason_for_non_activity', (YLeaf(YType.str, 'reason-for-non-activity'), ['str'])),
                        ])
                        self.interface = None
                        self.reason_for_non_activity = None

                        self.group_address = Igmp.Active.DefaultContext.NonActiveGroups.NonActiveGroups_.GroupAddress()
                        self.group_address.parent = self
                        self._children_name_map["group_address"] = "group-address"

                        self.source_address = Igmp.Active.DefaultContext.NonActiveGroups.NonActiveGroups_.SourceAddress()
                        self.source_address.parent = self
                        self._children_name_map["source_address"] = "source-address"
                        self._segment_path = lambda: "non-active-groups"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/active/default-context/non-active-groups/%s" % self._segment_path()
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Igmp.Active.DefaultContext.NonActiveGroups.NonActiveGroups_, ['interface', 'reason_for_non_activity'], name, value)


                    class GroupAddress(_Entity_):
                        """
                        Group Address
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Active.DefaultContext.NonActiveGroups.NonActiveGroups_.GroupAddress, self).__init__()

                            self.yang_name = "group-address"
                            self.yang_parent_name = "non-active-groups"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "group-address"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/active/default-context/non-active-groups/non-active-groups/%s" % self._segment_path()
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Active.DefaultContext.NonActiveGroups.NonActiveGroups_.GroupAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Active.DefaultContext.NonActiveGroups.NonActiveGroups_.GroupAddress']['meta_info']


                    class SourceAddress(_Entity_):
                        """
                        Source Address
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Active.DefaultContext.NonActiveGroups.NonActiveGroups_.SourceAddress, self).__init__()

                            self.yang_name = "source-address"
                            self.yang_parent_name = "non-active-groups"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "source-address"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/active/default-context/non-active-groups/non-active-groups/%s" % self._segment_path()
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Active.DefaultContext.NonActiveGroups.NonActiveGroups_.SourceAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Active.DefaultContext.NonActiveGroups.NonActiveGroups_.SourceAddress']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Igmp.Active.DefaultContext.NonActiveGroups.NonActiveGroups_']['meta_info']

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Igmp.Active.DefaultContext.NonActiveGroups']['meta_info']


            class SsmMaps(_Entity_):
                """
                SSM Map Table
                
                .. attribute:: ssm_map
                
                	SSM Map information
                	**type**\: list of  		 :py:class:`SsmMap <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.SsmMaps.SsmMap>`
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Igmp.Active.DefaultContext.SsmMaps, self).__init__()

                    self.yang_name = "ssm-maps"
                    self.yang_parent_name = "default-context"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("ssm-map", ("ssm_map", Igmp.Active.DefaultContext.SsmMaps.SsmMap))])
                    self._leafs = OrderedDict()

                    self.ssm_map = YList(self)
                    self._segment_path = lambda: "ssm-maps"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/active/default-context/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Igmp.Active.DefaultContext.SsmMaps, [], name, value)


                class SsmMap(_Entity_):
                    """
                    SSM Map information
                    
                    .. attribute:: ssm_map_type
                    
                    	SSM Map Type
                    	**type**\:  :py:class:`IgmpssmMap <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpssmMap>`
                    
                    	**config**\: False
                    
                    .. attribute:: group_address
                    
                    	Group address
                    	**type**\: union of the below types:
                    
                    		**type**\: str
                    
                    			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    		**type**\: str
                    
                    			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    	**config**\: False
                    
                    .. attribute:: group_address_xr
                    
                    	Group Address
                    	**type**\:  :py:class:`GroupAddressXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.SsmMaps.SsmMap.GroupAddressXr>`
                    
                    	**config**\: False
                    
                    .. attribute:: map_type
                    
                    	Map Type of group
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: source_counts
                    
                    	Count of Sources
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Igmp.Active.DefaultContext.SsmMaps.SsmMap, self).__init__()

                        self.yang_name = "ssm-map"
                        self.yang_parent_name = "ssm-maps"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("group-address-xr", ("group_address_xr", Igmp.Active.DefaultContext.SsmMaps.SsmMap.GroupAddressXr))])
                        self._leafs = OrderedDict([
                            ('ssm_map_type', (YLeaf(YType.enumeration, 'ssm-map-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpssmMap', '')])),
                            ('group_address', (YLeaf(YType.str, 'group-address'), ['str','str'])),
                            ('map_type', (YLeaf(YType.uint32, 'map-type'), ['int'])),
                            ('source_counts', (YLeaf(YType.uint32, 'source-counts'), ['int'])),
                        ])
                        self.ssm_map_type = None
                        self.group_address = None
                        self.map_type = None
                        self.source_counts = None

                        self.group_address_xr = Igmp.Active.DefaultContext.SsmMaps.SsmMap.GroupAddressXr()
                        self.group_address_xr.parent = self
                        self._children_name_map["group_address_xr"] = "group-address-xr"
                        self._segment_path = lambda: "ssm-map"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/active/default-context/ssm-maps/%s" % self._segment_path()
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Igmp.Active.DefaultContext.SsmMaps.SsmMap, ['ssm_map_type', 'group_address', 'map_type', 'source_counts'], name, value)


                    class GroupAddressXr(_Entity_):
                        """
                        Group Address
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Active.DefaultContext.SsmMaps.SsmMap.GroupAddressXr, self).__init__()

                            self.yang_name = "group-address-xr"
                            self.yang_parent_name = "ssm-map"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "group-address-xr"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/active/default-context/ssm-maps/ssm-map/%s" % self._segment_path()
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Active.DefaultContext.SsmMaps.SsmMap.GroupAddressXr, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Active.DefaultContext.SsmMaps.SsmMap.GroupAddressXr']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Igmp.Active.DefaultContext.SsmMaps.SsmMap']['meta_info']

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Igmp.Active.DefaultContext.SsmMaps']['meta_info']


            class ExplicitGroups(_Entity_):
                """
                IGMP Explicit Group Database
                
                .. attribute:: explicit_group
                
                	IGMP Explicit Group Entry Information
                	**type**\: list of  		 :py:class:`ExplicitGroup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.ExplicitGroups.ExplicitGroup>`
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Igmp.Active.DefaultContext.ExplicitGroups, self).__init__()

                    self.yang_name = "explicit-groups"
                    self.yang_parent_name = "default-context"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("explicit-group", ("explicit_group", Igmp.Active.DefaultContext.ExplicitGroups.ExplicitGroup))])
                    self._leafs = OrderedDict()

                    self.explicit_group = YList(self)
                    self._segment_path = lambda: "explicit-groups"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/active/default-context/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Igmp.Active.DefaultContext.ExplicitGroups, [], name, value)


                class ExplicitGroup(_Entity_):
                    """
                    IGMP Explicit Group Entry Information
                    
                    .. attribute:: group_address
                    
                    	Group Address
                    	**type**\: union of the below types:
                    
                    		**type**\: str
                    
                    			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    		**type**\: str
                    
                    			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    	**config**\: False
                    
                    .. attribute:: interface_name
                    
                    	Interface Name
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: source_address
                    
                    	Source/Host Address
                    	**type**\: union of the below types:
                    
                    		**type**\: str
                    
                    			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    		**type**\: str
                    
                    			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    	**config**\: False
                    
                    .. attribute:: group_info
                    
                    	Basic Group information
                    	**type**\:  :py:class:`GroupInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo>`
                    
                    	**config**\: False
                    
                    .. attribute:: include_hosts
                    
                    	No. of hosts who are included
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: exclude_hosts
                    
                    	No. of hosts who are excluded
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: host
                    
                    	List of hosts
                    	**type**\: list of  		 :py:class:`Host <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.ExplicitGroups.ExplicitGroup.Host>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Igmp.Active.DefaultContext.ExplicitGroups.ExplicitGroup, self).__init__()

                        self.yang_name = "explicit-group"
                        self.yang_parent_name = "explicit-groups"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("group-info", ("group_info", Igmp.Active.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo)), ("host", ("host", Igmp.Active.DefaultContext.ExplicitGroups.ExplicitGroup.Host))])
                        self._leafs = OrderedDict([
                            ('group_address', (YLeaf(YType.str, 'group-address'), ['str','str'])),
                            ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                            ('source_address', (YLeaf(YType.str, 'source-address'), ['str','str'])),
                            ('include_hosts', (YLeaf(YType.uint32, 'include-hosts'), ['int'])),
                            ('exclude_hosts', (YLeaf(YType.uint32, 'exclude-hosts'), ['int'])),
                        ])
                        self.group_address = None
                        self.interface_name = None
                        self.source_address = None
                        self.include_hosts = None
                        self.exclude_hosts = None

                        self.group_info = Igmp.Active.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo()
                        self.group_info.parent = self
                        self._children_name_map["group_info"] = "group-info"

                        self.host = YList(self)
                        self._segment_path = lambda: "explicit-group"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/active/default-context/explicit-groups/%s" % self._segment_path()
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Igmp.Active.DefaultContext.ExplicitGroups.ExplicitGroup, ['group_address', 'interface_name', 'source_address', 'include_hosts', 'exclude_hosts'], name, value)


                    class GroupInfo(_Entity_):
                        """
                        Basic Group information
                        
                        .. attribute:: group_address_xr
                        
                        	Group Address
                        	**type**\:  :py:class:`GroupAddressXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.GroupAddressXr>`
                        
                        	**config**\: False
                        
                        .. attribute:: last_reporter
                        
                        	Last reporter address
                        	**type**\:  :py:class:`LastReporter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.LastReporter>`
                        
                        	**config**\: False
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\:  :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.SourceAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: interface_name_xr
                        
                        	Interface
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: uptime
                        
                        	Uptime in seconds
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        	**config**\: False
                        
                        	**units**\: second
                        
                        .. attribute:: expiration_time
                        
                        	Expiration time in seconds
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        	**config**\: False
                        
                        	**units**\: second
                        
                        .. attribute:: explicit_tracking_enabled
                        
                        	Is explicit tracking enabled
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_self_join
                        
                        	If local system is member of this group on this interface
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: row_status
                        
                        	interface on or off for the group
                        	**type**\: str
                        
                        	**length:** 0..16
                        
                        	**config**\: False
                        
                        .. attribute:: is_low_memory
                        
                        	Node is running low on memory
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: router_filter_mode
                        
                        	Filter mode
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        	**config**\: False
                        
                        .. attribute:: older_host_version1_timer
                        
                        	IGMP Hostversion1timer
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: older_host_version2_timer
                        
                        	IGMP Hostversion2timer
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_added
                        
                        	Joined
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_suppressed
                        
                        	Suppressed
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Active.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo, self).__init__()

                            self.yang_name = "group-info"
                            self.yang_parent_name = "explicit-group"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("group-address-xr", ("group_address_xr", Igmp.Active.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.GroupAddressXr)), ("last-reporter", ("last_reporter", Igmp.Active.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.LastReporter)), ("source-address", ("source_address", Igmp.Active.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.SourceAddress))])
                            self._leafs = OrderedDict([
                                ('interface_name_xr', (YLeaf(YType.str, 'interface-name-xr'), ['str'])),
                                ('uptime', (YLeaf(YType.uint64, 'uptime'), ['int'])),
                                ('expiration_time', (YLeaf(YType.int32, 'expiration-time'), ['int'])),
                                ('explicit_tracking_enabled', (YLeaf(YType.boolean, 'explicit-tracking-enabled'), ['bool'])),
                                ('is_self_join', (YLeaf(YType.boolean, 'is-self-join'), ['bool'])),
                                ('row_status', (YLeaf(YType.str, 'row-status'), ['str'])),
                                ('is_low_memory', (YLeaf(YType.boolean, 'is-low-memory'), ['bool'])),
                                ('router_filter_mode', (YLeaf(YType.uint8, 'router-filter-mode'), ['int'])),
                                ('older_host_version1_timer', (YLeaf(YType.uint32, 'older-host-version1-timer'), ['int'])),
                                ('older_host_version2_timer', (YLeaf(YType.uint32, 'older-host-version2-timer'), ['int'])),
                                ('is_added', (YLeaf(YType.boolean, 'is-added'), ['bool'])),
                                ('is_suppressed', (YLeaf(YType.boolean, 'is-suppressed'), ['bool'])),
                            ])
                            self.interface_name_xr = None
                            self.uptime = None
                            self.expiration_time = None
                            self.explicit_tracking_enabled = None
                            self.is_self_join = None
                            self.row_status = None
                            self.is_low_memory = None
                            self.router_filter_mode = None
                            self.older_host_version1_timer = None
                            self.older_host_version2_timer = None
                            self.is_added = None
                            self.is_suppressed = None

                            self.group_address_xr = Igmp.Active.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.GroupAddressXr()
                            self.group_address_xr.parent = self
                            self._children_name_map["group_address_xr"] = "group-address-xr"

                            self.last_reporter = Igmp.Active.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.LastReporter()
                            self.last_reporter.parent = self
                            self._children_name_map["last_reporter"] = "last-reporter"

                            self.source_address = Igmp.Active.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.SourceAddress()
                            self.source_address.parent = self
                            self._children_name_map["source_address"] = "source-address"
                            self._segment_path = lambda: "group-info"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/active/default-context/explicit-groups/explicit-group/%s" % self._segment_path()
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Active.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo, ['interface_name_xr', 'uptime', 'expiration_time', 'explicit_tracking_enabled', 'is_self_join', 'row_status', 'is_low_memory', 'router_filter_mode', 'older_host_version1_timer', 'older_host_version2_timer', 'is_added', 'is_suppressed'], name, value)


                        class GroupAddressXr(_Entity_):
                            """
                            Group Address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Active.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.GroupAddressXr, self).__init__()

                                self.yang_name = "group-address-xr"
                                self.yang_parent_name = "group-info"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "group-address-xr"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/active/default-context/explicit-groups/explicit-group/group-info/%s" % self._segment_path()
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Active.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.GroupAddressXr, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Active.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.GroupAddressXr']['meta_info']


                        class LastReporter(_Entity_):
                            """
                            Last reporter address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Active.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.LastReporter, self).__init__()

                                self.yang_name = "last-reporter"
                                self.yang_parent_name = "group-info"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "last-reporter"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/active/default-context/explicit-groups/explicit-group/group-info/%s" % self._segment_path()
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Active.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.LastReporter, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Active.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.LastReporter']['meta_info']


                        class SourceAddress(_Entity_):
                            """
                            Source Address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Active.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.SourceAddress, self).__init__()

                                self.yang_name = "source-address"
                                self.yang_parent_name = "group-info"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "source-address"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/active/default-context/explicit-groups/explicit-group/group-info/%s" % self._segment_path()
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Active.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.SourceAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Active.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo.SourceAddress']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Active.DefaultContext.ExplicitGroups.ExplicitGroup.GroupInfo']['meta_info']


                    class Host(_Entity_):
                        """
                        List of hosts
                        
                        .. attribute:: address
                        
                        	Host Address
                        	**type**\:  :py:class:`Address <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.ExplicitGroups.ExplicitGroup.Host.Address>`
                        
                        	**config**\: False
                        
                        .. attribute:: uptime
                        
                        	Uptime in seconds
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        	**units**\: second
                        
                        .. attribute:: is_exclude
                        
                        	Exclude flag set
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: expiration_time
                        
                        	Expiration time in seconds
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        	**units**\: second
                        
                        .. attribute:: source_count
                        
                        	No. of sources in entry
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: source_address
                        
                        	First 3 source addresses
                        	**type**\: list of  		 :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.ExplicitGroups.ExplicitGroup.Host.SourceAddress>`
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Active.DefaultContext.ExplicitGroups.ExplicitGroup.Host, self).__init__()

                            self.yang_name = "host"
                            self.yang_parent_name = "explicit-group"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("address", ("address", Igmp.Active.DefaultContext.ExplicitGroups.ExplicitGroup.Host.Address)), ("source-address", ("source_address", Igmp.Active.DefaultContext.ExplicitGroups.ExplicitGroup.Host.SourceAddress))])
                            self._leafs = OrderedDict([
                                ('uptime', (YLeaf(YType.uint32, 'uptime'), ['int'])),
                                ('is_exclude', (YLeaf(YType.boolean, 'is-exclude'), ['bool'])),
                                ('expiration_time', (YLeaf(YType.uint32, 'expiration-time'), ['int'])),
                                ('source_count', (YLeaf(YType.uint32, 'source-count'), ['int'])),
                            ])
                            self.uptime = None
                            self.is_exclude = None
                            self.expiration_time = None
                            self.source_count = None

                            self.address = Igmp.Active.DefaultContext.ExplicitGroups.ExplicitGroup.Host.Address()
                            self.address.parent = self
                            self._children_name_map["address"] = "address"

                            self.source_address = YList(self)
                            self._segment_path = lambda: "host"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/active/default-context/explicit-groups/explicit-group/%s" % self._segment_path()
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Active.DefaultContext.ExplicitGroups.ExplicitGroup.Host, ['uptime', 'is_exclude', 'expiration_time', 'source_count'], name, value)


                        class Address(_Entity_):
                            """
                            Host Address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Active.DefaultContext.ExplicitGroups.ExplicitGroup.Host.Address, self).__init__()

                                self.yang_name = "address"
                                self.yang_parent_name = "host"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "address"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/active/default-context/explicit-groups/explicit-group/host/%s" % self._segment_path()
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Active.DefaultContext.ExplicitGroups.ExplicitGroup.Host.Address, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Active.DefaultContext.ExplicitGroups.ExplicitGroup.Host.Address']['meta_info']


                        class SourceAddress(_Entity_):
                            """
                            First 3 source addresses
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Active.DefaultContext.ExplicitGroups.ExplicitGroup.Host.SourceAddress, self).__init__()

                                self.yang_name = "source-address"
                                self.yang_parent_name = "host"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "source-address"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/active/default-context/explicit-groups/explicit-group/host/%s" % self._segment_path()
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Active.DefaultContext.ExplicitGroups.ExplicitGroup.Host.SourceAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Active.DefaultContext.ExplicitGroups.ExplicitGroup.Host.SourceAddress']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Active.DefaultContext.ExplicitGroups.ExplicitGroup.Host']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Igmp.Active.DefaultContext.ExplicitGroups.ExplicitGroup']['meta_info']

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Igmp.Active.DefaultContext.ExplicitGroups']['meta_info']


            class InterfaceTable(_Entity_):
                """
                IGMP Interface specific Table
                
                .. attribute:: interface
                
                	IGMP Interface
                	**type**\: list of  		 :py:class:`Interface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.InterfaceTable.Interface>`
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Igmp.Active.DefaultContext.InterfaceTable, self).__init__()

                    self.yang_name = "interface-table"
                    self.yang_parent_name = "default-context"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("interface", ("interface", Igmp.Active.DefaultContext.InterfaceTable.Interface))])
                    self._leafs = OrderedDict()

                    self.interface = YList(self)
                    self._segment_path = lambda: "interface-table"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/active/default-context/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Igmp.Active.DefaultContext.InterfaceTable, [], name, value)


                class Interface(_Entity_):
                    """
                    IGMP Interface
                    
                    .. attribute:: interface_name  (key)
                    
                    	Interface Name
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: address
                    
                    	IP address
                    	**type**\:  :py:class:`Address <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.InterfaceTable.Interface.Address>`
                    
                    	**config**\: False
                    
                    .. attribute:: querier_address
                    
                    	Address of the Querier
                    	**type**\:  :py:class:`QuerierAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.InterfaceTable.Interface.QuerierAddress>`
                    
                    	**config**\: False
                    
                    .. attribute:: subscriber_address
                    
                    	Address of subscriber
                    	**type**\:  :py:class:`SubscriberAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.InterfaceTable.Interface.SubscriberAddress>`
                    
                    	**config**\: False
                    
                    .. attribute:: interface_name_xr
                    
                    	Interface
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: state
                    
                    	Interface state
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: prefix_length
                    
                    	Prefix length
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_interface_up
                    
                    	Is interface up
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_ip_enabled
                    
                    	Is IP enabled
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_router_enabled
                    
                    	Is Router functionality enabled
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: igmp_version
                    
                    	IGMP Router version
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    	**config**\: False
                    
                    .. attribute:: host_version
                    
                    	IGMP Host version
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    	**config**\: False
                    
                    .. attribute:: query_interval
                    
                    	Query Interval value in seconds
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    	**units**\: second
                    
                    .. attribute:: query_timeout
                    
                    	Query Timeout value
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    .. attribute:: query_maximum_response_time
                    
                    	Max Response Timeout value
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    .. attribute:: last_member_query_interval
                    
                    	Last Member Query Interval
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    .. attribute:: group_joins
                    
                    	No. of group joins
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: group_leaves
                    
                    	No. of group leaves
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_querier
                    
                    	Are we querier
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: total_active_groups
                    
                    	Actual number of groups on interface
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: robustness
                    
                    	Robustness Variable value
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: proxy_interface
                    
                    	Proxy interface index
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: querier_uptime
                    
                    	Time since the last querier took over
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    .. attribute:: las_ll_registration_count
                    
                    	LAS reg count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_get_address_count
                    
                    	LAS get addr count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_update_count
                    
                    	LAS Update count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_ll_remove_update_count
                    
                    	LAS LL remove update count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_ll_add_update_count
                    
                    	LAS LL add update count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_null_update_count
                    
                    	LAS Null update count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_unregistration_count
                    
                    	LAS unreg count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_las_request
                    
                    	LAS req
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_las_registered
                    
                    	LAS registered
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: vrf_id
                    
                    	VRF id
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: mte_vrf_id
                    
                    	MTE VRF id
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: location
                    
                    	Location
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: mtu
                    
                    	MTU
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: vrf_state
                    
                    	Vrf State
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_configurationverify
                    
                    	CFG verify
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: configurationvrf_set
                    
                    	CFG vrf set
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: configurationvrf_error
                    
                    	CFG vrf error
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: configuration_mcast_vrf_set
                    
                    	Is mcast set
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: configuration_mcast_vrf_error
                    
                    	Is mcast error
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_im_state_registered
                    
                    	Im state registered
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_subscriber
                    
                    	Subscriber interface
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: subscriber_mode
                    
                    	Subscriber mode
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_identity_present
                    
                    	Subscriber ID or Address available from AAA
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: subscriber_id
                    
                    	ID string of subscriber
                    	**type**\: str
                    
                    	**length:** 0..257
                    
                    	**config**\: False
                    
                    .. attribute:: parent_ifhandle
                    
                    	Parent If Handle
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: time_since_last_query_in_seconds
                    
                    	Time elapsed since last query
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: time_since_last_report_in_seconds
                    
                    	Time elapsed since last report
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: router_uptime_in_seconds
                    
                    	Uptime since router enabled event
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: mte_tuple_count
                    
                    	MTE Tuple count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Igmp.Active.DefaultContext.InterfaceTable.Interface, self).__init__()

                        self.yang_name = "interface"
                        self.yang_parent_name = "interface-table"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['interface_name']
                        self._child_classes = OrderedDict([("address", ("address", Igmp.Active.DefaultContext.InterfaceTable.Interface.Address)), ("querier-address", ("querier_address", Igmp.Active.DefaultContext.InterfaceTable.Interface.QuerierAddress)), ("subscriber-address", ("subscriber_address", Igmp.Active.DefaultContext.InterfaceTable.Interface.SubscriberAddress))])
                        self._leafs = OrderedDict([
                            ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                            ('interface_name_xr', (YLeaf(YType.str, 'interface-name-xr'), ['str'])),
                            ('state', (YLeaf(YType.uint32, 'state'), ['int'])),
                            ('prefix_length', (YLeaf(YType.uint32, 'prefix-length'), ['int'])),
                            ('is_interface_up', (YLeaf(YType.boolean, 'is-interface-up'), ['bool'])),
                            ('is_ip_enabled', (YLeaf(YType.boolean, 'is-ip-enabled'), ['bool'])),
                            ('is_router_enabled', (YLeaf(YType.boolean, 'is-router-enabled'), ['bool'])),
                            ('igmp_version', (YLeaf(YType.uint8, 'igmp-version'), ['int'])),
                            ('host_version', (YLeaf(YType.uint8, 'host-version'), ['int'])),
                            ('query_interval', (YLeaf(YType.uint16, 'query-interval'), ['int'])),
                            ('query_timeout', (YLeaf(YType.uint16, 'query-timeout'), ['int'])),
                            ('query_maximum_response_time', (YLeaf(YType.uint16, 'query-maximum-response-time'), ['int'])),
                            ('last_member_query_interval', (YLeaf(YType.uint16, 'last-member-query-interval'), ['int'])),
                            ('group_joins', (YLeaf(YType.uint32, 'group-joins'), ['int'])),
                            ('group_leaves', (YLeaf(YType.uint32, 'group-leaves'), ['int'])),
                            ('is_querier', (YLeaf(YType.boolean, 'is-querier'), ['bool'])),
                            ('total_active_groups', (YLeaf(YType.uint32, 'total-active-groups'), ['int'])),
                            ('robustness', (YLeaf(YType.uint32, 'robustness'), ['int'])),
                            ('proxy_interface', (YLeaf(YType.str, 'proxy-interface'), ['str'])),
                            ('querier_uptime', (YLeaf(YType.uint16, 'querier-uptime'), ['int'])),
                            ('las_ll_registration_count', (YLeaf(YType.uint32, 'las-ll-registration-count'), ['int'])),
                            ('las_get_address_count', (YLeaf(YType.uint32, 'las-get-address-count'), ['int'])),
                            ('las_update_count', (YLeaf(YType.uint32, 'las-update-count'), ['int'])),
                            ('las_ll_remove_update_count', (YLeaf(YType.uint32, 'las-ll-remove-update-count'), ['int'])),
                            ('las_ll_add_update_count', (YLeaf(YType.uint32, 'las-ll-add-update-count'), ['int'])),
                            ('las_null_update_count', (YLeaf(YType.uint32, 'las-null-update-count'), ['int'])),
                            ('las_unregistration_count', (YLeaf(YType.uint32, 'las-unregistration-count'), ['int'])),
                            ('is_las_request', (YLeaf(YType.boolean, 'is-las-request'), ['bool'])),
                            ('is_las_registered', (YLeaf(YType.boolean, 'is-las-registered'), ['bool'])),
                            ('vrf_id', (YLeaf(YType.uint32, 'vrf-id'), ['int'])),
                            ('mte_vrf_id', (YLeaf(YType.uint32, 'mte-vrf-id'), ['int'])),
                            ('location', (YLeaf(YType.uint32, 'location'), ['int'])),
                            ('mtu', (YLeaf(YType.uint32, 'mtu'), ['int'])),
                            ('vrf_state', (YLeaf(YType.uint32, 'vrf-state'), ['int'])),
                            ('is_configurationverify', (YLeaf(YType.boolean, 'is-configurationverify'), ['bool'])),
                            ('configurationvrf_set', (YLeaf(YType.boolean, 'configurationvrf-set'), ['bool'])),
                            ('configurationvrf_error', (YLeaf(YType.boolean, 'configurationvrf-error'), ['bool'])),
                            ('configuration_mcast_vrf_set', (YLeaf(YType.boolean, 'configuration-mcast-vrf-set'), ['bool'])),
                            ('configuration_mcast_vrf_error', (YLeaf(YType.boolean, 'configuration-mcast-vrf-error'), ['bool'])),
                            ('is_im_state_registered', (YLeaf(YType.boolean, 'is-im-state-registered'), ['bool'])),
                            ('is_subscriber', (YLeaf(YType.boolean, 'is-subscriber'), ['bool'])),
                            ('subscriber_mode', (YLeaf(YType.uint32, 'subscriber-mode'), ['int'])),
                            ('is_identity_present', (YLeaf(YType.boolean, 'is-identity-present'), ['bool'])),
                            ('subscriber_id', (YLeaf(YType.str, 'subscriber-id'), ['str'])),
                            ('parent_ifhandle', (YLeaf(YType.str, 'parent-ifhandle'), ['str'])),
                            ('time_since_last_query_in_seconds', (YLeaf(YType.uint32, 'time-since-last-query-in-seconds'), ['int'])),
                            ('time_since_last_report_in_seconds', (YLeaf(YType.uint32, 'time-since-last-report-in-seconds'), ['int'])),
                            ('router_uptime_in_seconds', (YLeaf(YType.uint32, 'router-uptime-in-seconds'), ['int'])),
                            ('mte_tuple_count', (YLeaf(YType.uint32, 'mte-tuple-count'), ['int'])),
                        ])
                        self.interface_name = None
                        self.interface_name_xr = None
                        self.state = None
                        self.prefix_length = None
                        self.is_interface_up = None
                        self.is_ip_enabled = None
                        self.is_router_enabled = None
                        self.igmp_version = None
                        self.host_version = None
                        self.query_interval = None
                        self.query_timeout = None
                        self.query_maximum_response_time = None
                        self.last_member_query_interval = None
                        self.group_joins = None
                        self.group_leaves = None
                        self.is_querier = None
                        self.total_active_groups = None
                        self.robustness = None
                        self.proxy_interface = None
                        self.querier_uptime = None
                        self.las_ll_registration_count = None
                        self.las_get_address_count = None
                        self.las_update_count = None
                        self.las_ll_remove_update_count = None
                        self.las_ll_add_update_count = None
                        self.las_null_update_count = None
                        self.las_unregistration_count = None
                        self.is_las_request = None
                        self.is_las_registered = None
                        self.vrf_id = None
                        self.mte_vrf_id = None
                        self.location = None
                        self.mtu = None
                        self.vrf_state = None
                        self.is_configurationverify = None
                        self.configurationvrf_set = None
                        self.configurationvrf_error = None
                        self.configuration_mcast_vrf_set = None
                        self.configuration_mcast_vrf_error = None
                        self.is_im_state_registered = None
                        self.is_subscriber = None
                        self.subscriber_mode = None
                        self.is_identity_present = None
                        self.subscriber_id = None
                        self.parent_ifhandle = None
                        self.time_since_last_query_in_seconds = None
                        self.time_since_last_report_in_seconds = None
                        self.router_uptime_in_seconds = None
                        self.mte_tuple_count = None

                        self.address = Igmp.Active.DefaultContext.InterfaceTable.Interface.Address()
                        self.address.parent = self
                        self._children_name_map["address"] = "address"

                        self.querier_address = Igmp.Active.DefaultContext.InterfaceTable.Interface.QuerierAddress()
                        self.querier_address.parent = self
                        self._children_name_map["querier_address"] = "querier-address"

                        self.subscriber_address = Igmp.Active.DefaultContext.InterfaceTable.Interface.SubscriberAddress()
                        self.subscriber_address.parent = self
                        self._children_name_map["subscriber_address"] = "subscriber-address"
                        self._segment_path = lambda: "interface" + "[interface-name='" + str(self.interface_name) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/active/default-context/interface-table/%s" % self._segment_path()
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Igmp.Active.DefaultContext.InterfaceTable.Interface, ['interface_name', 'interface_name_xr', 'state', 'prefix_length', 'is_interface_up', 'is_ip_enabled', 'is_router_enabled', 'igmp_version', 'host_version', 'query_interval', 'query_timeout', 'query_maximum_response_time', 'last_member_query_interval', 'group_joins', 'group_leaves', 'is_querier', 'total_active_groups', 'robustness', 'proxy_interface', 'querier_uptime', 'las_ll_registration_count', 'las_get_address_count', 'las_update_count', 'las_ll_remove_update_count', 'las_ll_add_update_count', 'las_null_update_count', 'las_unregistration_count', 'is_las_request', 'is_las_registered', 'vrf_id', 'mte_vrf_id', 'location', 'mtu', 'vrf_state', 'is_configurationverify', 'configurationvrf_set', 'configurationvrf_error', 'configuration_mcast_vrf_set', 'configuration_mcast_vrf_error', 'is_im_state_registered', 'is_subscriber', 'subscriber_mode', 'is_identity_present', 'subscriber_id', 'parent_ifhandle', 'time_since_last_query_in_seconds', 'time_since_last_report_in_seconds', 'router_uptime_in_seconds', 'mte_tuple_count'], name, value)


                    class Address(_Entity_):
                        """
                        IP address
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Active.DefaultContext.InterfaceTable.Interface.Address, self).__init__()

                            self.yang_name = "address"
                            self.yang_parent_name = "interface"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "address"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Active.DefaultContext.InterfaceTable.Interface.Address, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Active.DefaultContext.InterfaceTable.Interface.Address']['meta_info']


                    class QuerierAddress(_Entity_):
                        """
                        Address of the Querier
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Active.DefaultContext.InterfaceTable.Interface.QuerierAddress, self).__init__()

                            self.yang_name = "querier-address"
                            self.yang_parent_name = "interface"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "querier-address"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Active.DefaultContext.InterfaceTable.Interface.QuerierAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Active.DefaultContext.InterfaceTable.Interface.QuerierAddress']['meta_info']


                    class SubscriberAddress(_Entity_):
                        """
                        Address of subscriber
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Active.DefaultContext.InterfaceTable.Interface.SubscriberAddress, self).__init__()

                            self.yang_name = "subscriber-address"
                            self.yang_parent_name = "interface"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "subscriber-address"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Active.DefaultContext.InterfaceTable.Interface.SubscriberAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Active.DefaultContext.InterfaceTable.Interface.SubscriberAddress']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Igmp.Active.DefaultContext.InterfaceTable.Interface']['meta_info']

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Igmp.Active.DefaultContext.InterfaceTable']['meta_info']


            class InterfaceUnicastQosAdjusts(_Entity_):
                """
                IGMP Interface Unicast\-Qos\-Adjust
                
                .. attribute:: interface_unicast_qos_adjust
                
                	IGMP Interface
                	**type**\: list of  		 :py:class:`InterfaceUnicastQosAdjust <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust>`
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Igmp.Active.DefaultContext.InterfaceUnicastQosAdjusts, self).__init__()

                    self.yang_name = "interface-unicast-qos-adjusts"
                    self.yang_parent_name = "default-context"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("interface-unicast-qos-adjust", ("interface_unicast_qos_adjust", Igmp.Active.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust))])
                    self._leafs = OrderedDict()

                    self.interface_unicast_qos_adjust = YList(self)
                    self._segment_path = lambda: "interface-unicast-qos-adjusts"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/active/default-context/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Igmp.Active.DefaultContext.InterfaceUnicastQosAdjusts, [], name, value)


                class InterfaceUnicastQosAdjust(_Entity_):
                    """
                    IGMP Interface
                    
                    .. attribute:: interface_name  (key)
                    
                    	Interface Name
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: is_virtual_access
                    
                    	Is VirtualAccess Interface
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: rate
                    
                    	Overall rate in Kbps
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    	**units**\: kbit/s
                    
                    .. attribute:: rate_increments
                    
                    	Count of rate increments
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: rate_decrements
                    
                    	Count of rate decrements
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: update
                    
                    	List of updates
                    	**type**\: list of  		 :py:class:`Update <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Igmp.Active.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust, self).__init__()

                        self.yang_name = "interface-unicast-qos-adjust"
                        self.yang_parent_name = "interface-unicast-qos-adjusts"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['interface_name']
                        self._child_classes = OrderedDict([("update", ("update", Igmp.Active.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update))])
                        self._leafs = OrderedDict([
                            ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                            ('is_virtual_access', (YLeaf(YType.boolean, 'is-virtual-access'), ['bool'])),
                            ('rate', (YLeaf(YType.uint32, 'rate'), ['int'])),
                            ('rate_increments', (YLeaf(YType.uint32, 'rate-increments'), ['int'])),
                            ('rate_decrements', (YLeaf(YType.uint32, 'rate-decrements'), ['int'])),
                        ])
                        self.interface_name = None
                        self.is_virtual_access = None
                        self.rate = None
                        self.rate_increments = None
                        self.rate_decrements = None

                        self.update = YList(self)
                        self._segment_path = lambda: "interface-unicast-qos-adjust" + "[interface-name='" + str(self.interface_name) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/active/default-context/interface-unicast-qos-adjusts/%s" % self._segment_path()
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Igmp.Active.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust, ['interface_name', 'is_virtual_access', 'rate', 'rate_increments', 'rate_decrements'], name, value)


                    class Update(_Entity_):
                        """
                        List of updates
                        
                        .. attribute:: source_address
                        
                        	Source address
                        	**type**\:  :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.SourceAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: group_address
                        
                        	Group address
                        	**type**\:  :py:class:`GroupAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.GroupAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: is_add
                        
                        	Is this a rate increment
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: weight
                        
                        	Weight from policy
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: received_time
                        
                        	Time this update is received
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Active.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update, self).__init__()

                            self.yang_name = "update"
                            self.yang_parent_name = "interface-unicast-qos-adjust"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("source-address", ("source_address", Igmp.Active.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.SourceAddress)), ("group-address", ("group_address", Igmp.Active.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.GroupAddress))])
                            self._leafs = OrderedDict([
                                ('is_add', (YLeaf(YType.boolean, 'is-add'), ['bool'])),
                                ('weight', (YLeaf(YType.uint32, 'weight'), ['int'])),
                                ('received_time', (YLeaf(YType.uint64, 'received-time'), ['int'])),
                            ])
                            self.is_add = None
                            self.weight = None
                            self.received_time = None

                            self.source_address = Igmp.Active.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.SourceAddress()
                            self.source_address.parent = self
                            self._children_name_map["source_address"] = "source-address"

                            self.group_address = Igmp.Active.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.GroupAddress()
                            self.group_address.parent = self
                            self._children_name_map["group_address"] = "group-address"
                            self._segment_path = lambda: "update"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Active.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update, ['is_add', 'weight', 'received_time'], name, value)


                        class SourceAddress(_Entity_):
                            """
                            Source address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Active.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.SourceAddress, self).__init__()

                                self.yang_name = "source-address"
                                self.yang_parent_name = "update"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "source-address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Active.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.SourceAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Active.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.SourceAddress']['meta_info']


                        class GroupAddress(_Entity_):
                            """
                            Group address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Active.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.GroupAddress, self).__init__()

                                self.yang_name = "group-address"
                                self.yang_parent_name = "update"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "group-address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Active.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.GroupAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Active.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update.GroupAddress']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Active.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust.Update']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Igmp.Active.DefaultContext.InterfaceUnicastQosAdjusts.InterfaceUnicastQosAdjust']['meta_info']

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Igmp.Active.DefaultContext.InterfaceUnicastQosAdjusts']['meta_info']


            class Ranges(_Entity_):
                """
                Range table
                
                .. attribute:: range
                
                	Range information
                	**type**\: list of  		 :py:class:`Range <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.Ranges.Range>`
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Igmp.Active.DefaultContext.Ranges, self).__init__()

                    self.yang_name = "ranges"
                    self.yang_parent_name = "default-context"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("range", ("range", Igmp.Active.DefaultContext.Ranges.Range))])
                    self._leafs = OrderedDict()

                    self.range = YList(self)
                    self._segment_path = lambda: "ranges"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/active/default-context/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Igmp.Active.DefaultContext.Ranges, [], name, value)


                class Range(_Entity_):
                    """
                    Range information
                    
                    .. attribute:: group_address
                    
                    	Group address
                    	**type**\: union of the below types:
                    
                    		**type**\: str
                    
                    			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    		**type**\: str
                    
                    			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    	**config**\: False
                    
                    .. attribute:: group_mask
                    
                    	Group Mask
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: group_address_xr
                    
                    	Group address
                    	**type**\:  :py:class:`GroupAddressXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.Ranges.Range.GroupAddressXr>`
                    
                    	**config**\: False
                    
                    .. attribute:: prefix_length
                    
                    	Prefix length
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: protocol
                    
                    	Protocol
                    	**type**\:  :py:class:`IgmpEdmProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpEdmProtocol>`
                    
                    	**config**\: False
                    
                    .. attribute:: is_stale
                    
                    	Is the entry stale
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Igmp.Active.DefaultContext.Ranges.Range, self).__init__()

                        self.yang_name = "range"
                        self.yang_parent_name = "ranges"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("group-address-xr", ("group_address_xr", Igmp.Active.DefaultContext.Ranges.Range.GroupAddressXr))])
                        self._leafs = OrderedDict([
                            ('group_address', (YLeaf(YType.str, 'group-address'), ['str','str'])),
                            ('group_mask', (YLeaf(YType.uint32, 'group-mask'), ['int'])),
                            ('prefix_length', (YLeaf(YType.uint32, 'prefix-length'), ['int'])),
                            ('protocol', (YLeaf(YType.enumeration, 'protocol'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpEdmProtocol', '')])),
                            ('is_stale', (YLeaf(YType.boolean, 'is-stale'), ['bool'])),
                        ])
                        self.group_address = None
                        self.group_mask = None
                        self.prefix_length = None
                        self.protocol = None
                        self.is_stale = None

                        self.group_address_xr = Igmp.Active.DefaultContext.Ranges.Range.GroupAddressXr()
                        self.group_address_xr.parent = self
                        self._children_name_map["group_address_xr"] = "group-address-xr"
                        self._segment_path = lambda: "range"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/active/default-context/ranges/%s" % self._segment_path()
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Igmp.Active.DefaultContext.Ranges.Range, ['group_address', 'group_mask', 'prefix_length', 'protocol', 'is_stale'], name, value)


                    class GroupAddressXr(_Entity_):
                        """
                        Group address
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Active.DefaultContext.Ranges.Range.GroupAddressXr, self).__init__()

                            self.yang_name = "group-address-xr"
                            self.yang_parent_name = "range"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "group-address-xr"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/active/default-context/ranges/range/%s" % self._segment_path()
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Active.DefaultContext.Ranges.Range.GroupAddressXr, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Active.DefaultContext.Ranges.Range.GroupAddressXr']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Igmp.Active.DefaultContext.Ranges.Range']['meta_info']

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Igmp.Active.DefaultContext.Ranges']['meta_info']


            class IfrsInterfaces(_Entity_):
                """
                IGMP Interface specific
                
                .. attribute:: ifrs_interface
                
                	IGMP IFRS Interface
                	**type**\: list of  		 :py:class:`IfrsInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.IfrsInterfaces.IfrsInterface>`
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Igmp.Active.DefaultContext.IfrsInterfaces, self).__init__()

                    self.yang_name = "ifrs-interfaces"
                    self.yang_parent_name = "default-context"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("ifrs-interface", ("ifrs_interface", Igmp.Active.DefaultContext.IfrsInterfaces.IfrsInterface))])
                    self._leafs = OrderedDict()

                    self.ifrs_interface = YList(self)
                    self._segment_path = lambda: "ifrs-interfaces"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/active/default-context/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Igmp.Active.DefaultContext.IfrsInterfaces, [], name, value)


                class IfrsInterface(_Entity_):
                    """
                    IGMP IFRS Interface
                    
                    .. attribute:: interface_name  (key)
                    
                    	IFRS Interface Name
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: igmp_interface_entry
                    
                    	IGMP interface entry
                    	**type**\:  :py:class:`IgmpInterfaceEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry>`
                    
                    	**config**\: False
                    
                    .. attribute:: join_group_count
                    
                    	Join group count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Igmp.Active.DefaultContext.IfrsInterfaces.IfrsInterface, self).__init__()

                        self.yang_name = "ifrs-interface"
                        self.yang_parent_name = "ifrs-interfaces"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['interface_name']
                        self._child_classes = OrderedDict([("igmp-interface-entry", ("igmp_interface_entry", Igmp.Active.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry))])
                        self._leafs = OrderedDict([
                            ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                            ('join_group_count', (YLeaf(YType.uint32, 'join-group-count'), ['int'])),
                        ])
                        self.interface_name = None
                        self.join_group_count = None

                        self.igmp_interface_entry = Igmp.Active.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry()
                        self.igmp_interface_entry.parent = self
                        self._children_name_map["igmp_interface_entry"] = "igmp-interface-entry"
                        self._segment_path = lambda: "ifrs-interface" + "[interface-name='" + str(self.interface_name) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/active/default-context/ifrs-interfaces/%s" % self._segment_path()
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Igmp.Active.DefaultContext.IfrsInterfaces.IfrsInterface, ['interface_name', 'join_group_count'], name, value)


                    class IgmpInterfaceEntry(_Entity_):
                        """
                        IGMP interface entry
                        
                        .. attribute:: address
                        
                        	IP address
                        	**type**\:  :py:class:`Address <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.Address>`
                        
                        	**config**\: False
                        
                        .. attribute:: querier_address
                        
                        	Address of the Querier
                        	**type**\:  :py:class:`QuerierAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.QuerierAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: subscriber_address
                        
                        	Address of subscriber
                        	**type**\:  :py:class:`SubscriberAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.SubscriberAddress>`
                        
                        	**config**\: False
                        
                        .. attribute:: interface_name_xr
                        
                        	Interface
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: state
                        
                        	Interface state
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: prefix_length
                        
                        	Prefix length
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_interface_up
                        
                        	Is interface up
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_ip_enabled
                        
                        	Is IP enabled
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_router_enabled
                        
                        	Is Router functionality enabled
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: igmp_version
                        
                        	IGMP Router version
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        	**config**\: False
                        
                        .. attribute:: host_version
                        
                        	IGMP Host version
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        	**config**\: False
                        
                        .. attribute:: query_interval
                        
                        	Query Interval value in seconds
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        	**units**\: second
                        
                        .. attribute:: query_timeout
                        
                        	Query Timeout value
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: query_maximum_response_time
                        
                        	Max Response Timeout value
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: last_member_query_interval
                        
                        	Last Member Query Interval
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: group_joins
                        
                        	No. of group joins
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: group_leaves
                        
                        	No. of group leaves
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_querier
                        
                        	Are we querier
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: total_active_groups
                        
                        	Actual number of groups on interface
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: robustness
                        
                        	Robustness Variable value
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: proxy_interface
                        
                        	Proxy interface index
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: querier_uptime
                        
                        	Time since the last querier took over
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**config**\: False
                        
                        .. attribute:: las_ll_registration_count
                        
                        	LAS reg count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_get_address_count
                        
                        	LAS get addr count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_update_count
                        
                        	LAS Update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_ll_remove_update_count
                        
                        	LAS LL remove update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_ll_add_update_count
                        
                        	LAS LL add update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_null_update_count
                        
                        	LAS Null update count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: las_unregistration_count
                        
                        	LAS unreg count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_las_request
                        
                        	LAS req
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_las_registered
                        
                        	LAS registered
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: vrf_id
                        
                        	VRF id
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: mte_vrf_id
                        
                        	MTE VRF id
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: location
                        
                        	Location
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: mtu
                        
                        	MTU
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: vrf_state
                        
                        	Vrf State
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_configurationverify
                        
                        	CFG verify
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configurationvrf_set
                        
                        	CFG vrf set
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configurationvrf_error
                        
                        	CFG vrf error
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configuration_mcast_vrf_set
                        
                        	Is mcast set
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: configuration_mcast_vrf_error
                        
                        	Is mcast error
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_im_state_registered
                        
                        	Im state registered
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: is_subscriber
                        
                        	Subscriber interface
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: subscriber_mode
                        
                        	Subscriber mode
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: is_identity_present
                        
                        	Subscriber ID or Address available from AAA
                        	**type**\: bool
                        
                        	**config**\: False
                        
                        .. attribute:: subscriber_id
                        
                        	ID string of subscriber
                        	**type**\: str
                        
                        	**length:** 0..257
                        
                        	**config**\: False
                        
                        .. attribute:: parent_ifhandle
                        
                        	Parent If Handle
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                        
                        	**config**\: False
                        
                        .. attribute:: time_since_last_query_in_seconds
                        
                        	Time elapsed since last query
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: time_since_last_report_in_seconds
                        
                        	Time elapsed since last report
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: router_uptime_in_seconds
                        
                        	Uptime since router enabled event
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: mte_tuple_count
                        
                        	MTE Tuple count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Active.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry, self).__init__()

                            self.yang_name = "igmp-interface-entry"
                            self.yang_parent_name = "ifrs-interface"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("address", ("address", Igmp.Active.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.Address)), ("querier-address", ("querier_address", Igmp.Active.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.QuerierAddress)), ("subscriber-address", ("subscriber_address", Igmp.Active.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.SubscriberAddress))])
                            self._leafs = OrderedDict([
                                ('interface_name_xr', (YLeaf(YType.str, 'interface-name-xr'), ['str'])),
                                ('state', (YLeaf(YType.uint32, 'state'), ['int'])),
                                ('prefix_length', (YLeaf(YType.uint32, 'prefix-length'), ['int'])),
                                ('is_interface_up', (YLeaf(YType.boolean, 'is-interface-up'), ['bool'])),
                                ('is_ip_enabled', (YLeaf(YType.boolean, 'is-ip-enabled'), ['bool'])),
                                ('is_router_enabled', (YLeaf(YType.boolean, 'is-router-enabled'), ['bool'])),
                                ('igmp_version', (YLeaf(YType.uint8, 'igmp-version'), ['int'])),
                                ('host_version', (YLeaf(YType.uint8, 'host-version'), ['int'])),
                                ('query_interval', (YLeaf(YType.uint16, 'query-interval'), ['int'])),
                                ('query_timeout', (YLeaf(YType.uint16, 'query-timeout'), ['int'])),
                                ('query_maximum_response_time', (YLeaf(YType.uint16, 'query-maximum-response-time'), ['int'])),
                                ('last_member_query_interval', (YLeaf(YType.uint16, 'last-member-query-interval'), ['int'])),
                                ('group_joins', (YLeaf(YType.uint32, 'group-joins'), ['int'])),
                                ('group_leaves', (YLeaf(YType.uint32, 'group-leaves'), ['int'])),
                                ('is_querier', (YLeaf(YType.boolean, 'is-querier'), ['bool'])),
                                ('total_active_groups', (YLeaf(YType.uint32, 'total-active-groups'), ['int'])),
                                ('robustness', (YLeaf(YType.uint32, 'robustness'), ['int'])),
                                ('proxy_interface', (YLeaf(YType.str, 'proxy-interface'), ['str'])),
                                ('querier_uptime', (YLeaf(YType.uint16, 'querier-uptime'), ['int'])),
                                ('las_ll_registration_count', (YLeaf(YType.uint32, 'las-ll-registration-count'), ['int'])),
                                ('las_get_address_count', (YLeaf(YType.uint32, 'las-get-address-count'), ['int'])),
                                ('las_update_count', (YLeaf(YType.uint32, 'las-update-count'), ['int'])),
                                ('las_ll_remove_update_count', (YLeaf(YType.uint32, 'las-ll-remove-update-count'), ['int'])),
                                ('las_ll_add_update_count', (YLeaf(YType.uint32, 'las-ll-add-update-count'), ['int'])),
                                ('las_null_update_count', (YLeaf(YType.uint32, 'las-null-update-count'), ['int'])),
                                ('las_unregistration_count', (YLeaf(YType.uint32, 'las-unregistration-count'), ['int'])),
                                ('is_las_request', (YLeaf(YType.boolean, 'is-las-request'), ['bool'])),
                                ('is_las_registered', (YLeaf(YType.boolean, 'is-las-registered'), ['bool'])),
                                ('vrf_id', (YLeaf(YType.uint32, 'vrf-id'), ['int'])),
                                ('mte_vrf_id', (YLeaf(YType.uint32, 'mte-vrf-id'), ['int'])),
                                ('location', (YLeaf(YType.uint32, 'location'), ['int'])),
                                ('mtu', (YLeaf(YType.uint32, 'mtu'), ['int'])),
                                ('vrf_state', (YLeaf(YType.uint32, 'vrf-state'), ['int'])),
                                ('is_configurationverify', (YLeaf(YType.boolean, 'is-configurationverify'), ['bool'])),
                                ('configurationvrf_set', (YLeaf(YType.boolean, 'configurationvrf-set'), ['bool'])),
                                ('configurationvrf_error', (YLeaf(YType.boolean, 'configurationvrf-error'), ['bool'])),
                                ('configuration_mcast_vrf_set', (YLeaf(YType.boolean, 'configuration-mcast-vrf-set'), ['bool'])),
                                ('configuration_mcast_vrf_error', (YLeaf(YType.boolean, 'configuration-mcast-vrf-error'), ['bool'])),
                                ('is_im_state_registered', (YLeaf(YType.boolean, 'is-im-state-registered'), ['bool'])),
                                ('is_subscriber', (YLeaf(YType.boolean, 'is-subscriber'), ['bool'])),
                                ('subscriber_mode', (YLeaf(YType.uint32, 'subscriber-mode'), ['int'])),
                                ('is_identity_present', (YLeaf(YType.boolean, 'is-identity-present'), ['bool'])),
                                ('subscriber_id', (YLeaf(YType.str, 'subscriber-id'), ['str'])),
                                ('parent_ifhandle', (YLeaf(YType.str, 'parent-ifhandle'), ['str'])),
                                ('time_since_last_query_in_seconds', (YLeaf(YType.uint32, 'time-since-last-query-in-seconds'), ['int'])),
                                ('time_since_last_report_in_seconds', (YLeaf(YType.uint32, 'time-since-last-report-in-seconds'), ['int'])),
                                ('router_uptime_in_seconds', (YLeaf(YType.uint32, 'router-uptime-in-seconds'), ['int'])),
                                ('mte_tuple_count', (YLeaf(YType.uint32, 'mte-tuple-count'), ['int'])),
                            ])
                            self.interface_name_xr = None
                            self.state = None
                            self.prefix_length = None
                            self.is_interface_up = None
                            self.is_ip_enabled = None
                            self.is_router_enabled = None
                            self.igmp_version = None
                            self.host_version = None
                            self.query_interval = None
                            self.query_timeout = None
                            self.query_maximum_response_time = None
                            self.last_member_query_interval = None
                            self.group_joins = None
                            self.group_leaves = None
                            self.is_querier = None
                            self.total_active_groups = None
                            self.robustness = None
                            self.proxy_interface = None
                            self.querier_uptime = None
                            self.las_ll_registration_count = None
                            self.las_get_address_count = None
                            self.las_update_count = None
                            self.las_ll_remove_update_count = None
                            self.las_ll_add_update_count = None
                            self.las_null_update_count = None
                            self.las_unregistration_count = None
                            self.is_las_request = None
                            self.is_las_registered = None
                            self.vrf_id = None
                            self.mte_vrf_id = None
                            self.location = None
                            self.mtu = None
                            self.vrf_state = None
                            self.is_configurationverify = None
                            self.configurationvrf_set = None
                            self.configurationvrf_error = None
                            self.configuration_mcast_vrf_set = None
                            self.configuration_mcast_vrf_error = None
                            self.is_im_state_registered = None
                            self.is_subscriber = None
                            self.subscriber_mode = None
                            self.is_identity_present = None
                            self.subscriber_id = None
                            self.parent_ifhandle = None
                            self.time_since_last_query_in_seconds = None
                            self.time_since_last_report_in_seconds = None
                            self.router_uptime_in_seconds = None
                            self.mte_tuple_count = None

                            self.address = Igmp.Active.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.Address()
                            self.address.parent = self
                            self._children_name_map["address"] = "address"

                            self.querier_address = Igmp.Active.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.QuerierAddress()
                            self.querier_address.parent = self
                            self._children_name_map["querier_address"] = "querier-address"

                            self.subscriber_address = Igmp.Active.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.SubscriberAddress()
                            self.subscriber_address.parent = self
                            self._children_name_map["subscriber_address"] = "subscriber-address"
                            self._segment_path = lambda: "igmp-interface-entry"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Active.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry, ['interface_name_xr', 'state', 'prefix_length', 'is_interface_up', 'is_ip_enabled', 'is_router_enabled', 'igmp_version', 'host_version', 'query_interval', 'query_timeout', 'query_maximum_response_time', 'last_member_query_interval', 'group_joins', 'group_leaves', 'is_querier', 'total_active_groups', 'robustness', 'proxy_interface', 'querier_uptime', 'las_ll_registration_count', 'las_get_address_count', 'las_update_count', 'las_ll_remove_update_count', 'las_ll_add_update_count', 'las_null_update_count', 'las_unregistration_count', 'is_las_request', 'is_las_registered', 'vrf_id', 'mte_vrf_id', 'location', 'mtu', 'vrf_state', 'is_configurationverify', 'configurationvrf_set', 'configurationvrf_error', 'configuration_mcast_vrf_set', 'configuration_mcast_vrf_error', 'is_im_state_registered', 'is_subscriber', 'subscriber_mode', 'is_identity_present', 'subscriber_id', 'parent_ifhandle', 'time_since_last_query_in_seconds', 'time_since_last_report_in_seconds', 'router_uptime_in_seconds', 'mte_tuple_count'], name, value)


                        class Address(_Entity_):
                            """
                            IP address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Active.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.Address, self).__init__()

                                self.yang_name = "address"
                                self.yang_parent_name = "igmp-interface-entry"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Active.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.Address, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Active.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.Address']['meta_info']


                        class QuerierAddress(_Entity_):
                            """
                            Address of the Querier
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Active.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.QuerierAddress, self).__init__()

                                self.yang_name = "querier-address"
                                self.yang_parent_name = "igmp-interface-entry"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "querier-address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Active.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.QuerierAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Active.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.QuerierAddress']['meta_info']


                        class SubscriberAddress(_Entity_):
                            """
                            Address of subscriber
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Active.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.SubscriberAddress, self).__init__()

                                self.yang_name = "subscriber-address"
                                self.yang_parent_name = "igmp-interface-entry"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "subscriber-address"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Active.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.SubscriberAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Active.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry.SubscriberAddress']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Active.DefaultContext.IfrsInterfaces.IfrsInterface.IgmpInterfaceEntry']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Igmp.Active.DefaultContext.IfrsInterfaces.IfrsInterface']['meta_info']

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Igmp.Active.DefaultContext.IfrsInterfaces']['meta_info']


            class TrafficCounters(_Entity_):
                """
                IGMP Message Traffic Counters
                
                .. attribute:: elapsed_time
                
                	Running time for counters
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: packets_in
                
                	Packets in
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: packets_out
                
                	Packets out
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: format_errors
                
                	Malformed packets in
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: packet_manager_input_errors
                
                	Incoming Packet Manager packets dropped
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: packet_manager_output_errors
                
                	Outgoing Packet Manager packets dropped
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: checksum_errors
                
                	Checksum errors
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: receive_socket_errors
                
                	Socket errors on reception
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: socket_errors
                
                	Socket errors on send
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: bad_scope_errors
                
                	BadScope errors
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: auxillary_data_length_errors
                
                	AuxDataLen errors
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: invalid_source_address_errors
                
                	Invalid Source Address errors
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: no_socket_connection
                
                	Packets dropped since no socket connection
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: miscellaneous_errors
                
                	Packets dropped for other reasons
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: input_queries
                
                	Query packets in
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: input_reports
                
                	Reports in
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: input_leaves
                
                	Leaves in
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: input_mtrace
                
                	Mtrace packets in
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: input_dvmrp
                
                	DVMRP packets in
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: input_pim
                
                	PIM packets in
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: output_queries
                
                	Query packets out
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: output_reports
                
                	Reports out
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: output_leaves
                
                	Leaves out
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: output_mtrace
                
                	Mtrace packets out
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: output_dvmrp
                
                	DVMRP packets out
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: output_pim
                
                	PIM packets out
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: get_packet_failure
                
                	Packet get failed
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: output_no_parent_interface_handle
                
                	Failures setting 2nd ifhandle
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: input_no_idb
                
                	Packets received without idb
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: input_no_vrf_in_idb
                
                	Packets received on idb without VRF
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: input_disabled_idb
                
                	Packet received on disabled idb
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: input_martian_address
                
                	Packets received with Martian Address
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: input_no_assigned_vrf_id
                
                	Packets received with no assigned vrf id
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: input_no_vrf_mtrace
                
                	mtrace packets with no vrf associated
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: input_no_platform_support_mtrace
                
                	mtrace packets without platform support
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Igmp.Active.DefaultContext.TrafficCounters, self).__init__()

                    self.yang_name = "traffic-counters"
                    self.yang_parent_name = "default-context"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('elapsed_time', (YLeaf(YType.uint32, 'elapsed-time'), ['int'])),
                        ('packets_in', (YLeaf(YType.uint32, 'packets-in'), ['int'])),
                        ('packets_out', (YLeaf(YType.uint32, 'packets-out'), ['int'])),
                        ('format_errors', (YLeaf(YType.uint32, 'format-errors'), ['int'])),
                        ('packet_manager_input_errors', (YLeaf(YType.uint32, 'packet-manager-input-errors'), ['int'])),
                        ('packet_manager_output_errors', (YLeaf(YType.uint32, 'packet-manager-output-errors'), ['int'])),
                        ('checksum_errors', (YLeaf(YType.uint32, 'checksum-errors'), ['int'])),
                        ('receive_socket_errors', (YLeaf(YType.uint32, 'receive-socket-errors'), ['int'])),
                        ('socket_errors', (YLeaf(YType.uint32, 'socket-errors'), ['int'])),
                        ('bad_scope_errors', (YLeaf(YType.uint32, 'bad-scope-errors'), ['int'])),
                        ('auxillary_data_length_errors', (YLeaf(YType.uint32, 'auxillary-data-length-errors'), ['int'])),
                        ('invalid_source_address_errors', (YLeaf(YType.uint32, 'invalid-source-address-errors'), ['int'])),
                        ('no_socket_connection', (YLeaf(YType.uint32, 'no-socket-connection'), ['int'])),
                        ('miscellaneous_errors', (YLeaf(YType.uint32, 'miscellaneous-errors'), ['int'])),
                        ('input_queries', (YLeaf(YType.uint32, 'input-queries'), ['int'])),
                        ('input_reports', (YLeaf(YType.uint32, 'input-reports'), ['int'])),
                        ('input_leaves', (YLeaf(YType.uint32, 'input-leaves'), ['int'])),
                        ('input_mtrace', (YLeaf(YType.uint32, 'input-mtrace'), ['int'])),
                        ('input_dvmrp', (YLeaf(YType.uint32, 'input-dvmrp'), ['int'])),
                        ('input_pim', (YLeaf(YType.uint32, 'input-pim'), ['int'])),
                        ('output_queries', (YLeaf(YType.uint32, 'output-queries'), ['int'])),
                        ('output_reports', (YLeaf(YType.uint32, 'output-reports'), ['int'])),
                        ('output_leaves', (YLeaf(YType.uint32, 'output-leaves'), ['int'])),
                        ('output_mtrace', (YLeaf(YType.uint32, 'output-mtrace'), ['int'])),
                        ('output_dvmrp', (YLeaf(YType.uint32, 'output-dvmrp'), ['int'])),
                        ('output_pim', (YLeaf(YType.uint32, 'output-pim'), ['int'])),
                        ('get_packet_failure', (YLeaf(YType.uint32, 'get-packet-failure'), ['int'])),
                        ('output_no_parent_interface_handle', (YLeaf(YType.uint32, 'output-no-parent-interface-handle'), ['int'])),
                        ('input_no_idb', (YLeaf(YType.uint32, 'input-no-idb'), ['int'])),
                        ('input_no_vrf_in_idb', (YLeaf(YType.uint32, 'input-no-vrf-in-idb'), ['int'])),
                        ('input_disabled_idb', (YLeaf(YType.uint32, 'input-disabled-idb'), ['int'])),
                        ('input_martian_address', (YLeaf(YType.uint32, 'input-martian-address'), ['int'])),
                        ('input_no_assigned_vrf_id', (YLeaf(YType.uint32, 'input-no-assigned-vrf-id'), ['int'])),
                        ('input_no_vrf_mtrace', (YLeaf(YType.uint32, 'input-no-vrf-mtrace'), ['int'])),
                        ('input_no_platform_support_mtrace', (YLeaf(YType.uint32, 'input-no-platform-support-mtrace'), ['int'])),
                    ])
                    self.elapsed_time = None
                    self.packets_in = None
                    self.packets_out = None
                    self.format_errors = None
                    self.packet_manager_input_errors = None
                    self.packet_manager_output_errors = None
                    self.checksum_errors = None
                    self.receive_socket_errors = None
                    self.socket_errors = None
                    self.bad_scope_errors = None
                    self.auxillary_data_length_errors = None
                    self.invalid_source_address_errors = None
                    self.no_socket_connection = None
                    self.miscellaneous_errors = None
                    self.input_queries = None
                    self.input_reports = None
                    self.input_leaves = None
                    self.input_mtrace = None
                    self.input_dvmrp = None
                    self.input_pim = None
                    self.output_queries = None
                    self.output_reports = None
                    self.output_leaves = None
                    self.output_mtrace = None
                    self.output_dvmrp = None
                    self.output_pim = None
                    self.get_packet_failure = None
                    self.output_no_parent_interface_handle = None
                    self.input_no_idb = None
                    self.input_no_vrf_in_idb = None
                    self.input_disabled_idb = None
                    self.input_martian_address = None
                    self.input_no_assigned_vrf_id = None
                    self.input_no_vrf_mtrace = None
                    self.input_no_platform_support_mtrace = None
                    self._segment_path = lambda: "traffic-counters"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/active/default-context/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Igmp.Active.DefaultContext.TrafficCounters, ['elapsed_time', 'packets_in', 'packets_out', 'format_errors', 'packet_manager_input_errors', 'packet_manager_output_errors', 'checksum_errors', 'receive_socket_errors', 'socket_errors', 'bad_scope_errors', 'auxillary_data_length_errors', 'invalid_source_address_errors', 'no_socket_connection', 'miscellaneous_errors', 'input_queries', 'input_reports', 'input_leaves', 'input_mtrace', 'input_dvmrp', 'input_pim', 'output_queries', 'output_reports', 'output_leaves', 'output_mtrace', 'output_dvmrp', 'output_pim', 'get_packet_failure', 'output_no_parent_interface_handle', 'input_no_idb', 'input_no_vrf_in_idb', 'input_disabled_idb', 'input_martian_address', 'input_no_assigned_vrf_id', 'input_no_vrf_mtrace', 'input_no_platform_support_mtrace'], name, value)

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Igmp.Active.DefaultContext.TrafficCounters']['meta_info']


            class Groups(_Entity_):
                """
                IGMP Group Database Table
                
                .. attribute:: group
                
                	IGMP Group Entry Information
                	**type**\: list of  		 :py:class:`Group <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.Groups.Group>`
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Igmp.Active.DefaultContext.Groups, self).__init__()

                    self.yang_name = "groups"
                    self.yang_parent_name = "default-context"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("group", ("group", Igmp.Active.DefaultContext.Groups.Group))])
                    self._leafs = OrderedDict()

                    self.group = YList(self)
                    self._segment_path = lambda: "groups"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/active/default-context/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Igmp.Active.DefaultContext.Groups, [], name, value)


                class Group(_Entity_):
                    """
                    IGMP Group Entry Information
                    
                    .. attribute:: group_address
                    
                    	Group Address
                    	**type**\: union of the below types:
                    
                    		**type**\: str
                    
                    			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    		**type**\: str
                    
                    			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    	**config**\: False
                    
                    .. attribute:: interface_name
                    
                    	Interface Name
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: group_address_xr
                    
                    	Group Address
                    	**type**\:  :py:class:`GroupAddressXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.Groups.Group.GroupAddressXr>`
                    
                    	**config**\: False
                    
                    .. attribute:: last_reporter
                    
                    	Last reporter address
                    	**type**\:  :py:class:`LastReporter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.Groups.Group.LastReporter>`
                    
                    	**config**\: False
                    
                    .. attribute:: source_address
                    
                    	Source Address
                    	**type**\:  :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.Groups.Group.SourceAddress>`
                    
                    	**config**\: False
                    
                    .. attribute:: interface_name_xr
                    
                    	Interface
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: uptime
                    
                    	Uptime in seconds
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**config**\: False
                    
                    	**units**\: second
                    
                    .. attribute:: expiration_time
                    
                    	Expiration time in seconds
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    	**config**\: False
                    
                    	**units**\: second
                    
                    .. attribute:: explicit_tracking_enabled
                    
                    	Is explicit tracking enabled
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_self_join
                    
                    	If local system is member of this group on this interface
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: row_status
                    
                    	interface on or off for the group
                    	**type**\: str
                    
                    	**length:** 0..16
                    
                    	**config**\: False
                    
                    .. attribute:: is_low_memory
                    
                    	Node is running low on memory
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: router_filter_mode
                    
                    	Filter mode
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    	**config**\: False
                    
                    .. attribute:: older_host_version1_timer
                    
                    	IGMP Hostversion1timer
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: older_host_version2_timer
                    
                    	IGMP Hostversion2timer
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_added
                    
                    	Joined
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_suppressed
                    
                    	Suppressed
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Igmp.Active.DefaultContext.Groups.Group, self).__init__()

                        self.yang_name = "group"
                        self.yang_parent_name = "groups"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("group-address-xr", ("group_address_xr", Igmp.Active.DefaultContext.Groups.Group.GroupAddressXr)), ("last-reporter", ("last_reporter", Igmp.Active.DefaultContext.Groups.Group.LastReporter)), ("source-address", ("source_address", Igmp.Active.DefaultContext.Groups.Group.SourceAddress))])
                        self._leafs = OrderedDict([
                            ('group_address', (YLeaf(YType.str, 'group-address'), ['str','str'])),
                            ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                            ('interface_name_xr', (YLeaf(YType.str, 'interface-name-xr'), ['str'])),
                            ('uptime', (YLeaf(YType.uint64, 'uptime'), ['int'])),
                            ('expiration_time', (YLeaf(YType.int32, 'expiration-time'), ['int'])),
                            ('explicit_tracking_enabled', (YLeaf(YType.boolean, 'explicit-tracking-enabled'), ['bool'])),
                            ('is_self_join', (YLeaf(YType.boolean, 'is-self-join'), ['bool'])),
                            ('row_status', (YLeaf(YType.str, 'row-status'), ['str'])),
                            ('is_low_memory', (YLeaf(YType.boolean, 'is-low-memory'), ['bool'])),
                            ('router_filter_mode', (YLeaf(YType.uint8, 'router-filter-mode'), ['int'])),
                            ('older_host_version1_timer', (YLeaf(YType.uint32, 'older-host-version1-timer'), ['int'])),
                            ('older_host_version2_timer', (YLeaf(YType.uint32, 'older-host-version2-timer'), ['int'])),
                            ('is_added', (YLeaf(YType.boolean, 'is-added'), ['bool'])),
                            ('is_suppressed', (YLeaf(YType.boolean, 'is-suppressed'), ['bool'])),
                        ])
                        self.group_address = None
                        self.interface_name = None
                        self.interface_name_xr = None
                        self.uptime = None
                        self.expiration_time = None
                        self.explicit_tracking_enabled = None
                        self.is_self_join = None
                        self.row_status = None
                        self.is_low_memory = None
                        self.router_filter_mode = None
                        self.older_host_version1_timer = None
                        self.older_host_version2_timer = None
                        self.is_added = None
                        self.is_suppressed = None

                        self.group_address_xr = Igmp.Active.DefaultContext.Groups.Group.GroupAddressXr()
                        self.group_address_xr.parent = self
                        self._children_name_map["group_address_xr"] = "group-address-xr"

                        self.last_reporter = Igmp.Active.DefaultContext.Groups.Group.LastReporter()
                        self.last_reporter.parent = self
                        self._children_name_map["last_reporter"] = "last-reporter"

                        self.source_address = Igmp.Active.DefaultContext.Groups.Group.SourceAddress()
                        self.source_address.parent = self
                        self._children_name_map["source_address"] = "source-address"
                        self._segment_path = lambda: "group"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/active/default-context/groups/%s" % self._segment_path()
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Igmp.Active.DefaultContext.Groups.Group, ['group_address', 'interface_name', 'interface_name_xr', 'uptime', 'expiration_time', 'explicit_tracking_enabled', 'is_self_join', 'row_status', 'is_low_memory', 'router_filter_mode', 'older_host_version1_timer', 'older_host_version2_timer', 'is_added', 'is_suppressed'], name, value)


                    class GroupAddressXr(_Entity_):
                        """
                        Group Address
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Active.DefaultContext.Groups.Group.GroupAddressXr, self).__init__()

                            self.yang_name = "group-address-xr"
                            self.yang_parent_name = "group"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "group-address-xr"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/active/default-context/groups/group/%s" % self._segment_path()
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Active.DefaultContext.Groups.Group.GroupAddressXr, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Active.DefaultContext.Groups.Group.GroupAddressXr']['meta_info']


                    class LastReporter(_Entity_):
                        """
                        Last reporter address
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Active.DefaultContext.Groups.Group.LastReporter, self).__init__()

                            self.yang_name = "last-reporter"
                            self.yang_parent_name = "group"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "last-reporter"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/active/default-context/groups/group/%s" % self._segment_path()
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Active.DefaultContext.Groups.Group.LastReporter, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Active.DefaultContext.Groups.Group.LastReporter']['meta_info']


                    class SourceAddress(_Entity_):
                        """
                        Source Address
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Active.DefaultContext.Groups.Group.SourceAddress, self).__init__()

                            self.yang_name = "source-address"
                            self.yang_parent_name = "group"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "source-address"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/active/default-context/groups/group/%s" % self._segment_path()
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Active.DefaultContext.Groups.Group.SourceAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Active.DefaultContext.Groups.Group.SourceAddress']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Igmp.Active.DefaultContext.Groups.Group']['meta_info']

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Igmp.Active.DefaultContext.Groups']['meta_info']


            class GroupSummary(_Entity_):
                """
                IGMP Groups Summary
                
                .. attribute:: groutes
                
                	No. of (\*,G) routes
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: sg_routes
                
                	No. of (S,G) routes
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: group_count
                
                	Current groups accepted
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: is_low_memory
                
                	Node is running low on memory
                	**type**\: bool
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Igmp.Active.DefaultContext.GroupSummary, self).__init__()

                    self.yang_name = "group-summary"
                    self.yang_parent_name = "default-context"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('groutes', (YLeaf(YType.uint32, 'groutes'), ['int'])),
                        ('sg_routes', (YLeaf(YType.uint32, 'sg-routes'), ['int'])),
                        ('group_count', (YLeaf(YType.uint32, 'group-count'), ['int'])),
                        ('is_low_memory', (YLeaf(YType.boolean, 'is-low-memory'), ['bool'])),
                    ])
                    self.groutes = None
                    self.sg_routes = None
                    self.group_count = None
                    self.is_low_memory = None
                    self._segment_path = lambda: "group-summary"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/active/default-context/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Igmp.Active.DefaultContext.GroupSummary, ['groutes', 'sg_routes', 'group_count', 'is_low_memory'], name, value)

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Igmp.Active.DefaultContext.GroupSummary']['meta_info']


            class IfrsInterfaceSummary(_Entity_):
                """
                IGMP IFRS Interface summary
                
                .. attribute:: interface_count
                
                	Interface Count
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                .. attribute:: configuration_count
                
                	Configuration count
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Igmp.Active.DefaultContext.IfrsInterfaceSummary, self).__init__()

                    self.yang_name = "ifrs-interface-summary"
                    self.yang_parent_name = "default-context"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('interface_count', (YLeaf(YType.uint32, 'interface-count'), ['int'])),
                        ('configuration_count', (YLeaf(YType.uint32, 'configuration-count'), ['int'])),
                    ])
                    self.interface_count = None
                    self.configuration_count = None
                    self._segment_path = lambda: "ifrs-interface-summary"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/active/default-context/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Igmp.Active.DefaultContext.IfrsInterfaceSummary, ['interface_count', 'configuration_count'], name, value)

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Igmp.Active.DefaultContext.IfrsInterfaceSummary']['meta_info']


            class GlobalInterfaceTable(_Entity_):
                """
                IGMP Global Interface 
                
                .. attribute:: interface
                
                	IGMP Interface
                	**type**\: list of  		 :py:class:`Interface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.GlobalInterfaceTable.Interface>`
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Igmp.Active.DefaultContext.GlobalInterfaceTable, self).__init__()

                    self.yang_name = "global-interface-table"
                    self.yang_parent_name = "default-context"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("interface", ("interface", Igmp.Active.DefaultContext.GlobalInterfaceTable.Interface))])
                    self._leafs = OrderedDict()

                    self.interface = YList(self)
                    self._segment_path = lambda: "global-interface-table"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/active/default-context/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Igmp.Active.DefaultContext.GlobalInterfaceTable, [], name, value)


                class Interface(_Entity_):
                    """
                    IGMP Interface
                    
                    .. attribute:: interface_name  (key)
                    
                    	Interface Name
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: address
                    
                    	IP address
                    	**type**\:  :py:class:`Address <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.GlobalInterfaceTable.Interface.Address>`
                    
                    	**config**\: False
                    
                    .. attribute:: querier_address
                    
                    	Address of the Querier
                    	**type**\:  :py:class:`QuerierAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.GlobalInterfaceTable.Interface.QuerierAddress>`
                    
                    	**config**\: False
                    
                    .. attribute:: subscriber_address
                    
                    	Address of subscriber
                    	**type**\:  :py:class:`SubscriberAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.GlobalInterfaceTable.Interface.SubscriberAddress>`
                    
                    	**config**\: False
                    
                    .. attribute:: interface_name_xr
                    
                    	Interface
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: state
                    
                    	Interface state
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: prefix_length
                    
                    	Prefix length
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_interface_up
                    
                    	Is interface up
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_ip_enabled
                    
                    	Is IP enabled
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_router_enabled
                    
                    	Is Router functionality enabled
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: igmp_version
                    
                    	IGMP Router version
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    	**config**\: False
                    
                    .. attribute:: host_version
                    
                    	IGMP Host version
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    	**config**\: False
                    
                    .. attribute:: query_interval
                    
                    	Query Interval value in seconds
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    	**units**\: second
                    
                    .. attribute:: query_timeout
                    
                    	Query Timeout value
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    .. attribute:: query_maximum_response_time
                    
                    	Max Response Timeout value
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    .. attribute:: last_member_query_interval
                    
                    	Last Member Query Interval
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    .. attribute:: group_joins
                    
                    	No. of group joins
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: group_leaves
                    
                    	No. of group leaves
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_querier
                    
                    	Are we querier
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: total_active_groups
                    
                    	Actual number of groups on interface
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: robustness
                    
                    	Robustness Variable value
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: proxy_interface
                    
                    	Proxy interface index
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: querier_uptime
                    
                    	Time since the last querier took over
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    .. attribute:: las_ll_registration_count
                    
                    	LAS reg count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_get_address_count
                    
                    	LAS get addr count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_update_count
                    
                    	LAS Update count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_ll_remove_update_count
                    
                    	LAS LL remove update count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_ll_add_update_count
                    
                    	LAS LL add update count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_null_update_count
                    
                    	LAS Null update count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_unregistration_count
                    
                    	LAS unreg count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_las_request
                    
                    	LAS req
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_las_registered
                    
                    	LAS registered
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: vrf_id
                    
                    	VRF id
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: mte_vrf_id
                    
                    	MTE VRF id
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: location
                    
                    	Location
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: mtu
                    
                    	MTU
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: vrf_state
                    
                    	Vrf State
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_configurationverify
                    
                    	CFG verify
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: configurationvrf_set
                    
                    	CFG vrf set
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: configurationvrf_error
                    
                    	CFG vrf error
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: configuration_mcast_vrf_set
                    
                    	Is mcast set
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: configuration_mcast_vrf_error
                    
                    	Is mcast error
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_im_state_registered
                    
                    	Im state registered
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_subscriber
                    
                    	Subscriber interface
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: subscriber_mode
                    
                    	Subscriber mode
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_identity_present
                    
                    	Subscriber ID or Address available from AAA
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: subscriber_id
                    
                    	ID string of subscriber
                    	**type**\: str
                    
                    	**length:** 0..257
                    
                    	**config**\: False
                    
                    .. attribute:: parent_ifhandle
                    
                    	Parent If Handle
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: time_since_last_query_in_seconds
                    
                    	Time elapsed since last query
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: time_since_last_report_in_seconds
                    
                    	Time elapsed since last report
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: router_uptime_in_seconds
                    
                    	Uptime since router enabled event
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: mte_tuple_count
                    
                    	MTE Tuple count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Igmp.Active.DefaultContext.GlobalInterfaceTable.Interface, self).__init__()

                        self.yang_name = "interface"
                        self.yang_parent_name = "global-interface-table"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['interface_name']
                        self._child_classes = OrderedDict([("address", ("address", Igmp.Active.DefaultContext.GlobalInterfaceTable.Interface.Address)), ("querier-address", ("querier_address", Igmp.Active.DefaultContext.GlobalInterfaceTable.Interface.QuerierAddress)), ("subscriber-address", ("subscriber_address", Igmp.Active.DefaultContext.GlobalInterfaceTable.Interface.SubscriberAddress))])
                        self._leafs = OrderedDict([
                            ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                            ('interface_name_xr', (YLeaf(YType.str, 'interface-name-xr'), ['str'])),
                            ('state', (YLeaf(YType.uint32, 'state'), ['int'])),
                            ('prefix_length', (YLeaf(YType.uint32, 'prefix-length'), ['int'])),
                            ('is_interface_up', (YLeaf(YType.boolean, 'is-interface-up'), ['bool'])),
                            ('is_ip_enabled', (YLeaf(YType.boolean, 'is-ip-enabled'), ['bool'])),
                            ('is_router_enabled', (YLeaf(YType.boolean, 'is-router-enabled'), ['bool'])),
                            ('igmp_version', (YLeaf(YType.uint8, 'igmp-version'), ['int'])),
                            ('host_version', (YLeaf(YType.uint8, 'host-version'), ['int'])),
                            ('query_interval', (YLeaf(YType.uint16, 'query-interval'), ['int'])),
                            ('query_timeout', (YLeaf(YType.uint16, 'query-timeout'), ['int'])),
                            ('query_maximum_response_time', (YLeaf(YType.uint16, 'query-maximum-response-time'), ['int'])),
                            ('last_member_query_interval', (YLeaf(YType.uint16, 'last-member-query-interval'), ['int'])),
                            ('group_joins', (YLeaf(YType.uint32, 'group-joins'), ['int'])),
                            ('group_leaves', (YLeaf(YType.uint32, 'group-leaves'), ['int'])),
                            ('is_querier', (YLeaf(YType.boolean, 'is-querier'), ['bool'])),
                            ('total_active_groups', (YLeaf(YType.uint32, 'total-active-groups'), ['int'])),
                            ('robustness', (YLeaf(YType.uint32, 'robustness'), ['int'])),
                            ('proxy_interface', (YLeaf(YType.str, 'proxy-interface'), ['str'])),
                            ('querier_uptime', (YLeaf(YType.uint16, 'querier-uptime'), ['int'])),
                            ('las_ll_registration_count', (YLeaf(YType.uint32, 'las-ll-registration-count'), ['int'])),
                            ('las_get_address_count', (YLeaf(YType.uint32, 'las-get-address-count'), ['int'])),
                            ('las_update_count', (YLeaf(YType.uint32, 'las-update-count'), ['int'])),
                            ('las_ll_remove_update_count', (YLeaf(YType.uint32, 'las-ll-remove-update-count'), ['int'])),
                            ('las_ll_add_update_count', (YLeaf(YType.uint32, 'las-ll-add-update-count'), ['int'])),
                            ('las_null_update_count', (YLeaf(YType.uint32, 'las-null-update-count'), ['int'])),
                            ('las_unregistration_count', (YLeaf(YType.uint32, 'las-unregistration-count'), ['int'])),
                            ('is_las_request', (YLeaf(YType.boolean, 'is-las-request'), ['bool'])),
                            ('is_las_registered', (YLeaf(YType.boolean, 'is-las-registered'), ['bool'])),
                            ('vrf_id', (YLeaf(YType.uint32, 'vrf-id'), ['int'])),
                            ('mte_vrf_id', (YLeaf(YType.uint32, 'mte-vrf-id'), ['int'])),
                            ('location', (YLeaf(YType.uint32, 'location'), ['int'])),
                            ('mtu', (YLeaf(YType.uint32, 'mtu'), ['int'])),
                            ('vrf_state', (YLeaf(YType.uint32, 'vrf-state'), ['int'])),
                            ('is_configurationverify', (YLeaf(YType.boolean, 'is-configurationverify'), ['bool'])),
                            ('configurationvrf_set', (YLeaf(YType.boolean, 'configurationvrf-set'), ['bool'])),
                            ('configurationvrf_error', (YLeaf(YType.boolean, 'configurationvrf-error'), ['bool'])),
                            ('configuration_mcast_vrf_set', (YLeaf(YType.boolean, 'configuration-mcast-vrf-set'), ['bool'])),
                            ('configuration_mcast_vrf_error', (YLeaf(YType.boolean, 'configuration-mcast-vrf-error'), ['bool'])),
                            ('is_im_state_registered', (YLeaf(YType.boolean, 'is-im-state-registered'), ['bool'])),
                            ('is_subscriber', (YLeaf(YType.boolean, 'is-subscriber'), ['bool'])),
                            ('subscriber_mode', (YLeaf(YType.uint32, 'subscriber-mode'), ['int'])),
                            ('is_identity_present', (YLeaf(YType.boolean, 'is-identity-present'), ['bool'])),
                            ('subscriber_id', (YLeaf(YType.str, 'subscriber-id'), ['str'])),
                            ('parent_ifhandle', (YLeaf(YType.str, 'parent-ifhandle'), ['str'])),
                            ('time_since_last_query_in_seconds', (YLeaf(YType.uint32, 'time-since-last-query-in-seconds'), ['int'])),
                            ('time_since_last_report_in_seconds', (YLeaf(YType.uint32, 'time-since-last-report-in-seconds'), ['int'])),
                            ('router_uptime_in_seconds', (YLeaf(YType.uint32, 'router-uptime-in-seconds'), ['int'])),
                            ('mte_tuple_count', (YLeaf(YType.uint32, 'mte-tuple-count'), ['int'])),
                        ])
                        self.interface_name = None
                        self.interface_name_xr = None
                        self.state = None
                        self.prefix_length = None
                        self.is_interface_up = None
                        self.is_ip_enabled = None
                        self.is_router_enabled = None
                        self.igmp_version = None
                        self.host_version = None
                        self.query_interval = None
                        self.query_timeout = None
                        self.query_maximum_response_time = None
                        self.last_member_query_interval = None
                        self.group_joins = None
                        self.group_leaves = None
                        self.is_querier = None
                        self.total_active_groups = None
                        self.robustness = None
                        self.proxy_interface = None
                        self.querier_uptime = None
                        self.las_ll_registration_count = None
                        self.las_get_address_count = None
                        self.las_update_count = None
                        self.las_ll_remove_update_count = None
                        self.las_ll_add_update_count = None
                        self.las_null_update_count = None
                        self.las_unregistration_count = None
                        self.is_las_request = None
                        self.is_las_registered = None
                        self.vrf_id = None
                        self.mte_vrf_id = None
                        self.location = None
                        self.mtu = None
                        self.vrf_state = None
                        self.is_configurationverify = None
                        self.configurationvrf_set = None
                        self.configurationvrf_error = None
                        self.configuration_mcast_vrf_set = None
                        self.configuration_mcast_vrf_error = None
                        self.is_im_state_registered = None
                        self.is_subscriber = None
                        self.subscriber_mode = None
                        self.is_identity_present = None
                        self.subscriber_id = None
                        self.parent_ifhandle = None
                        self.time_since_last_query_in_seconds = None
                        self.time_since_last_report_in_seconds = None
                        self.router_uptime_in_seconds = None
                        self.mte_tuple_count = None

                        self.address = Igmp.Active.DefaultContext.GlobalInterfaceTable.Interface.Address()
                        self.address.parent = self
                        self._children_name_map["address"] = "address"

                        self.querier_address = Igmp.Active.DefaultContext.GlobalInterfaceTable.Interface.QuerierAddress()
                        self.querier_address.parent = self
                        self._children_name_map["querier_address"] = "querier-address"

                        self.subscriber_address = Igmp.Active.DefaultContext.GlobalInterfaceTable.Interface.SubscriberAddress()
                        self.subscriber_address.parent = self
                        self._children_name_map["subscriber_address"] = "subscriber-address"
                        self._segment_path = lambda: "interface" + "[interface-name='" + str(self.interface_name) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/active/default-context/global-interface-table/%s" % self._segment_path()
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Igmp.Active.DefaultContext.GlobalInterfaceTable.Interface, ['interface_name', 'interface_name_xr', 'state', 'prefix_length', 'is_interface_up', 'is_ip_enabled', 'is_router_enabled', 'igmp_version', 'host_version', 'query_interval', 'query_timeout', 'query_maximum_response_time', 'last_member_query_interval', 'group_joins', 'group_leaves', 'is_querier', 'total_active_groups', 'robustness', 'proxy_interface', 'querier_uptime', 'las_ll_registration_count', 'las_get_address_count', 'las_update_count', 'las_ll_remove_update_count', 'las_ll_add_update_count', 'las_null_update_count', 'las_unregistration_count', 'is_las_request', 'is_las_registered', 'vrf_id', 'mte_vrf_id', 'location', 'mtu', 'vrf_state', 'is_configurationverify', 'configurationvrf_set', 'configurationvrf_error', 'configuration_mcast_vrf_set', 'configuration_mcast_vrf_error', 'is_im_state_registered', 'is_subscriber', 'subscriber_mode', 'is_identity_present', 'subscriber_id', 'parent_ifhandle', 'time_since_last_query_in_seconds', 'time_since_last_report_in_seconds', 'router_uptime_in_seconds', 'mte_tuple_count'], name, value)


                    class Address(_Entity_):
                        """
                        IP address
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Active.DefaultContext.GlobalInterfaceTable.Interface.Address, self).__init__()

                            self.yang_name = "address"
                            self.yang_parent_name = "interface"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "address"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Active.DefaultContext.GlobalInterfaceTable.Interface.Address, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Active.DefaultContext.GlobalInterfaceTable.Interface.Address']['meta_info']


                    class QuerierAddress(_Entity_):
                        """
                        Address of the Querier
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Active.DefaultContext.GlobalInterfaceTable.Interface.QuerierAddress, self).__init__()

                            self.yang_name = "querier-address"
                            self.yang_parent_name = "interface"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "querier-address"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Active.DefaultContext.GlobalInterfaceTable.Interface.QuerierAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Active.DefaultContext.GlobalInterfaceTable.Interface.QuerierAddress']['meta_info']


                    class SubscriberAddress(_Entity_):
                        """
                        Address of subscriber
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Active.DefaultContext.GlobalInterfaceTable.Interface.SubscriberAddress, self).__init__()

                            self.yang_name = "subscriber-address"
                            self.yang_parent_name = "interface"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "subscriber-address"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Active.DefaultContext.GlobalInterfaceTable.Interface.SubscriberAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Active.DefaultContext.GlobalInterfaceTable.Interface.SubscriberAddress']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Igmp.Active.DefaultContext.GlobalInterfaceTable.Interface']['meta_info']

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Igmp.Active.DefaultContext.GlobalInterfaceTable']['meta_info']


            class SsmMapDetails(_Entity_):
                """
                SSM Map Detail
                
                .. attribute:: ssm_map_detail
                
                	SSM Map Detail Table information
                	**type**\: list of  		 :py:class:`SsmMapDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.SsmMapDetails.SsmMapDetail>`
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Igmp.Active.DefaultContext.SsmMapDetails, self).__init__()

                    self.yang_name = "ssm-map-details"
                    self.yang_parent_name = "default-context"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("ssm-map-detail", ("ssm_map_detail", Igmp.Active.DefaultContext.SsmMapDetails.SsmMapDetail))])
                    self._leafs = OrderedDict()

                    self.ssm_map_detail = YList(self)
                    self._segment_path = lambda: "ssm-map-details"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/active/default-context/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Igmp.Active.DefaultContext.SsmMapDetails, [], name, value)


                class SsmMapDetail(_Entity_):
                    """
                    SSM Map Detail Table information
                    
                    .. attribute:: ssm_map_type
                    
                    	SSM Map Type
                    	**type**\:  :py:class:`IgmpssmMap <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpssmMap>`
                    
                    	**config**\: False
                    
                    .. attribute:: group_address
                    
                    	Group address
                    	**type**\: union of the below types:
                    
                    		**type**\: str
                    
                    			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    		**type**\: str
                    
                    			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    	**config**\: False
                    
                    .. attribute:: map_info
                    
                    	Basic Map Info
                    	**type**\:  :py:class:`MapInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.SsmMapDetails.SsmMapDetail.MapInfo>`
                    
                    	**config**\: False
                    
                    .. attribute:: expiration_time
                    
                    	Expiration Time in Seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    	**units**\: second
                    
                    .. attribute:: response_pending
                    
                    	Response Pending
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: query_interval
                    
                    	Query interval
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: elapsed_time
                    
                    	Elapsed time
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**config**\: False
                    
                    .. attribute:: sources
                    
                    	List of sources
                    	**type**\: list of  		 :py:class:`Sources <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.SsmMapDetails.SsmMapDetail.Sources>`
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Igmp.Active.DefaultContext.SsmMapDetails.SsmMapDetail, self).__init__()

                        self.yang_name = "ssm-map-detail"
                        self.yang_parent_name = "ssm-map-details"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("map-info", ("map_info", Igmp.Active.DefaultContext.SsmMapDetails.SsmMapDetail.MapInfo)), ("sources", ("sources", Igmp.Active.DefaultContext.SsmMapDetails.SsmMapDetail.Sources))])
                        self._leafs = OrderedDict([
                            ('ssm_map_type', (YLeaf(YType.enumeration, 'ssm-map-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpssmMap', '')])),
                            ('group_address', (YLeaf(YType.str, 'group-address'), ['str','str'])),
                            ('expiration_time', (YLeaf(YType.uint32, 'expiration-time'), ['int'])),
                            ('response_pending', (YLeaf(YType.boolean, 'response-pending'), ['bool'])),
                            ('query_interval', (YLeaf(YType.uint32, 'query-interval'), ['int'])),
                            ('elapsed_time', (YLeaf(YType.uint64, 'elapsed-time'), ['int'])),
                        ])
                        self.ssm_map_type = None
                        self.group_address = None
                        self.expiration_time = None
                        self.response_pending = None
                        self.query_interval = None
                        self.elapsed_time = None

                        self.map_info = Igmp.Active.DefaultContext.SsmMapDetails.SsmMapDetail.MapInfo()
                        self.map_info.parent = self
                        self._children_name_map["map_info"] = "map-info"

                        self.sources = YList(self)
                        self._segment_path = lambda: "ssm-map-detail"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/active/default-context/ssm-map-details/%s" % self._segment_path()
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Igmp.Active.DefaultContext.SsmMapDetails.SsmMapDetail, ['ssm_map_type', 'group_address', 'expiration_time', 'response_pending', 'query_interval', 'elapsed_time'], name, value)


                    class MapInfo(_Entity_):
                        """
                        Basic Map Info
                        
                        .. attribute:: group_address_xr
                        
                        	Group Address
                        	**type**\:  :py:class:`GroupAddressXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.SsmMapDetails.SsmMapDetail.MapInfo.GroupAddressXr>`
                        
                        	**config**\: False
                        
                        .. attribute:: map_type
                        
                        	Map Type of group
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        .. attribute:: source_counts
                        
                        	Count of Sources
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Active.DefaultContext.SsmMapDetails.SsmMapDetail.MapInfo, self).__init__()

                            self.yang_name = "map-info"
                            self.yang_parent_name = "ssm-map-detail"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("group-address-xr", ("group_address_xr", Igmp.Active.DefaultContext.SsmMapDetails.SsmMapDetail.MapInfo.GroupAddressXr))])
                            self._leafs = OrderedDict([
                                ('map_type', (YLeaf(YType.uint32, 'map-type'), ['int'])),
                                ('source_counts', (YLeaf(YType.uint32, 'source-counts'), ['int'])),
                            ])
                            self.map_type = None
                            self.source_counts = None

                            self.group_address_xr = Igmp.Active.DefaultContext.SsmMapDetails.SsmMapDetail.MapInfo.GroupAddressXr()
                            self.group_address_xr.parent = self
                            self._children_name_map["group_address_xr"] = "group-address-xr"
                            self._segment_path = lambda: "map-info"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/active/default-context/ssm-map-details/ssm-map-detail/%s" % self._segment_path()
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Active.DefaultContext.SsmMapDetails.SsmMapDetail.MapInfo, ['map_type', 'source_counts'], name, value)


                        class GroupAddressXr(_Entity_):
                            """
                            Group Address
                            
                            .. attribute:: af_name
                            
                            	AFName
                            	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                            
                            	**config**\: False
                            
                            .. attribute:: ipv4_address
                            
                            	IPv4 Addr
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            .. attribute:: ipv6_address
                            
                            	IPV6 Addr
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**config**\: False
                            
                            

                            """

                            _prefix = 'ipv4-igmp-oper'
                            _revision = '2018-01-31'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Igmp.Active.DefaultContext.SsmMapDetails.SsmMapDetail.MapInfo.GroupAddressXr, self).__init__()

                                self.yang_name = "group-address-xr"
                                self.yang_parent_name = "map-info"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                    ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                    ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                                ])
                                self.af_name = None
                                self.ipv4_address = None
                                self.ipv6_address = None
                                self._segment_path = lambda: "group-address-xr"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/active/default-context/ssm-map-details/ssm-map-detail/map-info/%s" % self._segment_path()
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Igmp.Active.DefaultContext.SsmMapDetails.SsmMapDetail.MapInfo.GroupAddressXr, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                                return meta._meta_table['Igmp.Active.DefaultContext.SsmMapDetails.SsmMapDetail.MapInfo.GroupAddressXr']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Active.DefaultContext.SsmMapDetails.SsmMapDetail.MapInfo']['meta_info']


                    class Sources(_Entity_):
                        """
                        List of sources
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Active.DefaultContext.SsmMapDetails.SsmMapDetail.Sources, self).__init__()

                            self.yang_name = "sources"
                            self.yang_parent_name = "ssm-map-detail"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "sources"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/active/default-context/ssm-map-details/ssm-map-detail/%s" % self._segment_path()
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Active.DefaultContext.SsmMapDetails.SsmMapDetail.Sources, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Active.DefaultContext.SsmMapDetails.SsmMapDetail.Sources']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Igmp.Active.DefaultContext.SsmMapDetails.SsmMapDetail']['meta_info']

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Igmp.Active.DefaultContext.SsmMapDetails']['meta_info']


            class InterfaceStateOffs(_Entity_):
                """
                IGMP Interface state off
                
                .. attribute:: interface_state_off
                
                	IGMP Interface
                	**type**\: list of  		 :py:class:`InterfaceStateOff <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.InterfaceStateOffs.InterfaceStateOff>`
                
                	**config**\: False
                
                

                """

                _prefix = 'ipv4-igmp-oper'
                _revision = '2018-01-31'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Igmp.Active.DefaultContext.InterfaceStateOffs, self).__init__()

                    self.yang_name = "interface-state-offs"
                    self.yang_parent_name = "default-context"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("interface-state-off", ("interface_state_off", Igmp.Active.DefaultContext.InterfaceStateOffs.InterfaceStateOff))])
                    self._leafs = OrderedDict()

                    self.interface_state_off = YList(self)
                    self._segment_path = lambda: "interface-state-offs"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/active/default-context/%s" % self._segment_path()
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Igmp.Active.DefaultContext.InterfaceStateOffs, [], name, value)


                class InterfaceStateOff(_Entity_):
                    """
                    IGMP Interface
                    
                    .. attribute:: interface_name  (key)
                    
                    	Interface Name
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: address
                    
                    	IP address
                    	**type**\:  :py:class:`Address <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.InterfaceStateOffs.InterfaceStateOff.Address>`
                    
                    	**config**\: False
                    
                    .. attribute:: querier_address
                    
                    	Address of the Querier
                    	**type**\:  :py:class:`QuerierAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.InterfaceStateOffs.InterfaceStateOff.QuerierAddress>`
                    
                    	**config**\: False
                    
                    .. attribute:: subscriber_address
                    
                    	Address of subscriber
                    	**type**\:  :py:class:`SubscriberAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.Igmp.Active.DefaultContext.InterfaceStateOffs.InterfaceStateOff.SubscriberAddress>`
                    
                    	**config**\: False
                    
                    .. attribute:: interface_name_xr
                    
                    	Interface
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: state
                    
                    	Interface state
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: prefix_length
                    
                    	Prefix length
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_interface_up
                    
                    	Is interface up
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_ip_enabled
                    
                    	Is IP enabled
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_router_enabled
                    
                    	Is Router functionality enabled
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: igmp_version
                    
                    	IGMP Router version
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    	**config**\: False
                    
                    .. attribute:: host_version
                    
                    	IGMP Host version
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    	**config**\: False
                    
                    .. attribute:: query_interval
                    
                    	Query Interval value in seconds
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    	**units**\: second
                    
                    .. attribute:: query_timeout
                    
                    	Query Timeout value
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    .. attribute:: query_maximum_response_time
                    
                    	Max Response Timeout value
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    .. attribute:: last_member_query_interval
                    
                    	Last Member Query Interval
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    .. attribute:: group_joins
                    
                    	No. of group joins
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: group_leaves
                    
                    	No. of group leaves
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_querier
                    
                    	Are we querier
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: total_active_groups
                    
                    	Actual number of groups on interface
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: robustness
                    
                    	Robustness Variable value
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: proxy_interface
                    
                    	Proxy interface index
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: querier_uptime
                    
                    	Time since the last querier took over
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**config**\: False
                    
                    .. attribute:: las_ll_registration_count
                    
                    	LAS reg count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_get_address_count
                    
                    	LAS get addr count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_update_count
                    
                    	LAS Update count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_ll_remove_update_count
                    
                    	LAS LL remove update count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_ll_add_update_count
                    
                    	LAS LL add update count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_null_update_count
                    
                    	LAS Null update count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: las_unregistration_count
                    
                    	LAS unreg count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_las_request
                    
                    	LAS req
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_las_registered
                    
                    	LAS registered
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: vrf_id
                    
                    	VRF id
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: mte_vrf_id
                    
                    	MTE VRF id
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: location
                    
                    	Location
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: mtu
                    
                    	MTU
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: vrf_state
                    
                    	Vrf State
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_configurationverify
                    
                    	CFG verify
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: configurationvrf_set
                    
                    	CFG vrf set
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: configurationvrf_error
                    
                    	CFG vrf error
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: configuration_mcast_vrf_set
                    
                    	Is mcast set
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: configuration_mcast_vrf_error
                    
                    	Is mcast error
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_im_state_registered
                    
                    	Im state registered
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: is_subscriber
                    
                    	Subscriber interface
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: subscriber_mode
                    
                    	Subscriber mode
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: is_identity_present
                    
                    	Subscriber ID or Address available from AAA
                    	**type**\: bool
                    
                    	**config**\: False
                    
                    .. attribute:: subscriber_id
                    
                    	ID string of subscriber
                    	**type**\: str
                    
                    	**length:** 0..257
                    
                    	**config**\: False
                    
                    .. attribute:: parent_ifhandle
                    
                    	Parent If Handle
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                    
                    	**config**\: False
                    
                    .. attribute:: time_since_last_query_in_seconds
                    
                    	Time elapsed since last query
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: time_since_last_report_in_seconds
                    
                    	Time elapsed since last report
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: router_uptime_in_seconds
                    
                    	Uptime since router enabled event
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    .. attribute:: mte_tuple_count
                    
                    	MTE Tuple count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**config**\: False
                    
                    

                    """

                    _prefix = 'ipv4-igmp-oper'
                    _revision = '2018-01-31'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Igmp.Active.DefaultContext.InterfaceStateOffs.InterfaceStateOff, self).__init__()

                        self.yang_name = "interface-state-off"
                        self.yang_parent_name = "interface-state-offs"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['interface_name']
                        self._child_classes = OrderedDict([("address", ("address", Igmp.Active.DefaultContext.InterfaceStateOffs.InterfaceStateOff.Address)), ("querier-address", ("querier_address", Igmp.Active.DefaultContext.InterfaceStateOffs.InterfaceStateOff.QuerierAddress)), ("subscriber-address", ("subscriber_address", Igmp.Active.DefaultContext.InterfaceStateOffs.InterfaceStateOff.SubscriberAddress))])
                        self._leafs = OrderedDict([
                            ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                            ('interface_name_xr', (YLeaf(YType.str, 'interface-name-xr'), ['str'])),
                            ('state', (YLeaf(YType.uint32, 'state'), ['int'])),
                            ('prefix_length', (YLeaf(YType.uint32, 'prefix-length'), ['int'])),
                            ('is_interface_up', (YLeaf(YType.boolean, 'is-interface-up'), ['bool'])),
                            ('is_ip_enabled', (YLeaf(YType.boolean, 'is-ip-enabled'), ['bool'])),
                            ('is_router_enabled', (YLeaf(YType.boolean, 'is-router-enabled'), ['bool'])),
                            ('igmp_version', (YLeaf(YType.uint8, 'igmp-version'), ['int'])),
                            ('host_version', (YLeaf(YType.uint8, 'host-version'), ['int'])),
                            ('query_interval', (YLeaf(YType.uint16, 'query-interval'), ['int'])),
                            ('query_timeout', (YLeaf(YType.uint16, 'query-timeout'), ['int'])),
                            ('query_maximum_response_time', (YLeaf(YType.uint16, 'query-maximum-response-time'), ['int'])),
                            ('last_member_query_interval', (YLeaf(YType.uint16, 'last-member-query-interval'), ['int'])),
                            ('group_joins', (YLeaf(YType.uint32, 'group-joins'), ['int'])),
                            ('group_leaves', (YLeaf(YType.uint32, 'group-leaves'), ['int'])),
                            ('is_querier', (YLeaf(YType.boolean, 'is-querier'), ['bool'])),
                            ('total_active_groups', (YLeaf(YType.uint32, 'total-active-groups'), ['int'])),
                            ('robustness', (YLeaf(YType.uint32, 'robustness'), ['int'])),
                            ('proxy_interface', (YLeaf(YType.str, 'proxy-interface'), ['str'])),
                            ('querier_uptime', (YLeaf(YType.uint16, 'querier-uptime'), ['int'])),
                            ('las_ll_registration_count', (YLeaf(YType.uint32, 'las-ll-registration-count'), ['int'])),
                            ('las_get_address_count', (YLeaf(YType.uint32, 'las-get-address-count'), ['int'])),
                            ('las_update_count', (YLeaf(YType.uint32, 'las-update-count'), ['int'])),
                            ('las_ll_remove_update_count', (YLeaf(YType.uint32, 'las-ll-remove-update-count'), ['int'])),
                            ('las_ll_add_update_count', (YLeaf(YType.uint32, 'las-ll-add-update-count'), ['int'])),
                            ('las_null_update_count', (YLeaf(YType.uint32, 'las-null-update-count'), ['int'])),
                            ('las_unregistration_count', (YLeaf(YType.uint32, 'las-unregistration-count'), ['int'])),
                            ('is_las_request', (YLeaf(YType.boolean, 'is-las-request'), ['bool'])),
                            ('is_las_registered', (YLeaf(YType.boolean, 'is-las-registered'), ['bool'])),
                            ('vrf_id', (YLeaf(YType.uint32, 'vrf-id'), ['int'])),
                            ('mte_vrf_id', (YLeaf(YType.uint32, 'mte-vrf-id'), ['int'])),
                            ('location', (YLeaf(YType.uint32, 'location'), ['int'])),
                            ('mtu', (YLeaf(YType.uint32, 'mtu'), ['int'])),
                            ('vrf_state', (YLeaf(YType.uint32, 'vrf-state'), ['int'])),
                            ('is_configurationverify', (YLeaf(YType.boolean, 'is-configurationverify'), ['bool'])),
                            ('configurationvrf_set', (YLeaf(YType.boolean, 'configurationvrf-set'), ['bool'])),
                            ('configurationvrf_error', (YLeaf(YType.boolean, 'configurationvrf-error'), ['bool'])),
                            ('configuration_mcast_vrf_set', (YLeaf(YType.boolean, 'configuration-mcast-vrf-set'), ['bool'])),
                            ('configuration_mcast_vrf_error', (YLeaf(YType.boolean, 'configuration-mcast-vrf-error'), ['bool'])),
                            ('is_im_state_registered', (YLeaf(YType.boolean, 'is-im-state-registered'), ['bool'])),
                            ('is_subscriber', (YLeaf(YType.boolean, 'is-subscriber'), ['bool'])),
                            ('subscriber_mode', (YLeaf(YType.uint32, 'subscriber-mode'), ['int'])),
                            ('is_identity_present', (YLeaf(YType.boolean, 'is-identity-present'), ['bool'])),
                            ('subscriber_id', (YLeaf(YType.str, 'subscriber-id'), ['str'])),
                            ('parent_ifhandle', (YLeaf(YType.str, 'parent-ifhandle'), ['str'])),
                            ('time_since_last_query_in_seconds', (YLeaf(YType.uint32, 'time-since-last-query-in-seconds'), ['int'])),
                            ('time_since_last_report_in_seconds', (YLeaf(YType.uint32, 'time-since-last-report-in-seconds'), ['int'])),
                            ('router_uptime_in_seconds', (YLeaf(YType.uint32, 'router-uptime-in-seconds'), ['int'])),
                            ('mte_tuple_count', (YLeaf(YType.uint32, 'mte-tuple-count'), ['int'])),
                        ])
                        self.interface_name = None
                        self.interface_name_xr = None
                        self.state = None
                        self.prefix_length = None
                        self.is_interface_up = None
                        self.is_ip_enabled = None
                        self.is_router_enabled = None
                        self.igmp_version = None
                        self.host_version = None
                        self.query_interval = None
                        self.query_timeout = None
                        self.query_maximum_response_time = None
                        self.last_member_query_interval = None
                        self.group_joins = None
                        self.group_leaves = None
                        self.is_querier = None
                        self.total_active_groups = None
                        self.robustness = None
                        self.proxy_interface = None
                        self.querier_uptime = None
                        self.las_ll_registration_count = None
                        self.las_get_address_count = None
                        self.las_update_count = None
                        self.las_ll_remove_update_count = None
                        self.las_ll_add_update_count = None
                        self.las_null_update_count = None
                        self.las_unregistration_count = None
                        self.is_las_request = None
                        self.is_las_registered = None
                        self.vrf_id = None
                        self.mte_vrf_id = None
                        self.location = None
                        self.mtu = None
                        self.vrf_state = None
                        self.is_configurationverify = None
                        self.configurationvrf_set = None
                        self.configurationvrf_error = None
                        self.configuration_mcast_vrf_set = None
                        self.configuration_mcast_vrf_error = None
                        self.is_im_state_registered = None
                        self.is_subscriber = None
                        self.subscriber_mode = None
                        self.is_identity_present = None
                        self.subscriber_id = None
                        self.parent_ifhandle = None
                        self.time_since_last_query_in_seconds = None
                        self.time_since_last_report_in_seconds = None
                        self.router_uptime_in_seconds = None
                        self.mte_tuple_count = None

                        self.address = Igmp.Active.DefaultContext.InterfaceStateOffs.InterfaceStateOff.Address()
                        self.address.parent = self
                        self._children_name_map["address"] = "address"

                        self.querier_address = Igmp.Active.DefaultContext.InterfaceStateOffs.InterfaceStateOff.QuerierAddress()
                        self.querier_address.parent = self
                        self._children_name_map["querier_address"] = "querier-address"

                        self.subscriber_address = Igmp.Active.DefaultContext.InterfaceStateOffs.InterfaceStateOff.SubscriberAddress()
                        self.subscriber_address.parent = self
                        self._children_name_map["subscriber_address"] = "subscriber-address"
                        self._segment_path = lambda: "interface-state-off" + "[interface-name='" + str(self.interface_name) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-igmp-oper:igmp/active/default-context/interface-state-offs/%s" % self._segment_path()
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Igmp.Active.DefaultContext.InterfaceStateOffs.InterfaceStateOff, ['interface_name', 'interface_name_xr', 'state', 'prefix_length', 'is_interface_up', 'is_ip_enabled', 'is_router_enabled', 'igmp_version', 'host_version', 'query_interval', 'query_timeout', 'query_maximum_response_time', 'last_member_query_interval', 'group_joins', 'group_leaves', 'is_querier', 'total_active_groups', 'robustness', 'proxy_interface', 'querier_uptime', 'las_ll_registration_count', 'las_get_address_count', 'las_update_count', 'las_ll_remove_update_count', 'las_ll_add_update_count', 'las_null_update_count', 'las_unregistration_count', 'is_las_request', 'is_las_registered', 'vrf_id', 'mte_vrf_id', 'location', 'mtu', 'vrf_state', 'is_configurationverify', 'configurationvrf_set', 'configurationvrf_error', 'configuration_mcast_vrf_set', 'configuration_mcast_vrf_error', 'is_im_state_registered', 'is_subscriber', 'subscriber_mode', 'is_identity_present', 'subscriber_id', 'parent_ifhandle', 'time_since_last_query_in_seconds', 'time_since_last_report_in_seconds', 'router_uptime_in_seconds', 'mte_tuple_count'], name, value)


                    class Address(_Entity_):
                        """
                        IP address
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Active.DefaultContext.InterfaceStateOffs.InterfaceStateOff.Address, self).__init__()

                            self.yang_name = "address"
                            self.yang_parent_name = "interface-state-off"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "address"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Active.DefaultContext.InterfaceStateOffs.InterfaceStateOff.Address, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Active.DefaultContext.InterfaceStateOffs.InterfaceStateOff.Address']['meta_info']


                    class QuerierAddress(_Entity_):
                        """
                        Address of the Querier
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Active.DefaultContext.InterfaceStateOffs.InterfaceStateOff.QuerierAddress, self).__init__()

                            self.yang_name = "querier-address"
                            self.yang_parent_name = "interface-state-off"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "querier-address"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Active.DefaultContext.InterfaceStateOffs.InterfaceStateOff.QuerierAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Active.DefaultContext.InterfaceStateOffs.InterfaceStateOff.QuerierAddress']['meta_info']


                    class SubscriberAddress(_Entity_):
                        """
                        Address of subscriber
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IgmpAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper.IgmpAfi>`
                        
                        	**config**\: False
                        
                        .. attribute:: ipv4_address
                        
                        	IPv4 Addr
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        .. attribute:: ipv6_address
                        
                        	IPV6 Addr
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**config**\: False
                        
                        

                        """

                        _prefix = 'ipv4-igmp-oper'
                        _revision = '2018-01-31'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Igmp.Active.DefaultContext.InterfaceStateOffs.InterfaceStateOff.SubscriberAddress, self).__init__()

                            self.yang_name = "subscriber-address"
                            self.yang_parent_name = "interface-state-off"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_igmp_oper', 'IgmpAfi', '')])),
                                ('ipv4_address', (YLeaf(YType.str, 'ipv4-address'), ['str'])),
                                ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                            ])
                            self.af_name = None
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self._segment_path = lambda: "subscriber-address"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Igmp.Active.DefaultContext.InterfaceStateOffs.InterfaceStateOff.SubscriberAddress, ['af_name', 'ipv4_address', 'ipv6_address'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                            return meta._meta_table['Igmp.Active.DefaultContext.InterfaceStateOffs.InterfaceStateOff.SubscriberAddress']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                        return meta._meta_table['Igmp.Active.DefaultContext.InterfaceStateOffs.InterfaceStateOff']['meta_info']

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                    return meta._meta_table['Igmp.Active.DefaultContext.InterfaceStateOffs']['meta_info']

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
                return meta._meta_table['Igmp.Active.DefaultContext']['meta_info']

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
            return meta._meta_table['Igmp.Active']['meta_info']

    def clone_ptr(self):
        self._top_entity = Igmp()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_igmp_oper as meta
        return meta._meta_table['Igmp']['meta_info']


