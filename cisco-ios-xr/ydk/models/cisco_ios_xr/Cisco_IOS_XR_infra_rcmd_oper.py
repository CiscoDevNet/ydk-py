""" Cisco_IOS_XR_infra_rcmd_oper 

This module contains a collection of YANG definitions
for Cisco IOS\-XR infra\-rcmd package operational data.

This module contains definitions
for the following management objects\:
  rcmd\: Show command for Route Convergence Monitoring &
    Diagnostics

Copyright (c) 2013\-2017 by Cisco Systems, Inc.
All rights reserved.

"""
from ydk.types import Entity, EntityPath, Identity, Enum, YType, YLeaf, YLeafList, YList, LeafDataList, Bits, Empty, Decimal64
from ydk.filters import YFilter
from ydk.errors import YPYError, YPYModelError
from ydk.errors.error_handler import handle_type_error as _handle_type_error


class RcmdBagEnableDisable(Enum):
    """
    RcmdBagEnableDisable

    status enum

    .. data:: disable = 0

    	Disabled

    .. data:: enable = 1

    	Enabled

    """

    disable = Enum.YLeaf(0, "disable")

    enable = Enum.YLeaf(1, "enable")


class RcmdBagEnblDsbl(Enum):
    """
    RcmdBagEnblDsbl

    status enum

    .. data:: dsbl = 0

    	Disabled

    .. data:: enbl = 1

    	Enabled

    """

    dsbl = Enum.YLeaf(0, "dsbl")

    enbl = Enum.YLeaf(1, "enbl")


class RcmdBoolYesNo(Enum):
    """
    RcmdBoolYesNo

    Boolean enum

    .. data:: no = 0

    	No

    .. data:: yes = 1

    	Yes

    """

    no = Enum.YLeaf(0, "no")

    yes = Enum.YLeaf(1, "yes")


class RcmdChange(Enum):
    """
    RcmdChange

    Type of change

    .. data:: none = 0

    	Invalid

    .. data:: add = 1

    	Added

    .. data:: delete = 2

    	Deleted

    .. data:: modify = 3

    	Modified

    .. data:: no_change = 4

    	No Change

    """

    none = Enum.YLeaf(0, "none")

    add = Enum.YLeaf(1, "add")

    delete = Enum.YLeaf(2, "delete")

    modify = Enum.YLeaf(3, "modify")

    no_change = Enum.YLeaf(4, "no-change")


class RcmdIsisLvl(Enum):
    """
    RcmdIsisLvl

    Type of an ISIS Level

    .. data:: l1 = 0

    	Level 1

    .. data:: l2 = 1

    	Level 2

    """

    l1 = Enum.YLeaf(0, "l1")

    l2 = Enum.YLeaf(1, "l2")


class RcmdIsisSpf(Enum):
    """
    RcmdIsisSpf

    Type of an ISIS SPF run

    .. data:: full = 0

    	Full

    .. data:: incremental = 1

    	Incremental

    .. data:: next_hop = 2

    	Next hop calculation

    .. data:: partial_route = 3

    	Partial route calculation

    """

    full = Enum.YLeaf(0, "full")

    incremental = Enum.YLeaf(1, "incremental")

    next_hop = Enum.YLeaf(2, "next-hop")

    partial_route = Enum.YLeaf(3, "partial-route")


class RcmdLdpEvent(Enum):
    """
    RcmdLdpEvent

    Type of LDP Event

    .. data:: neighbor = 1

    	Neighbor Event

    .. data:: adjacency = 2

    	Adjacency Event

    """

    neighbor = Enum.YLeaf(1, "neighbor")

    adjacency = Enum.YLeaf(2, "adjacency")


class RcmdLinecardSpeed(Enum):
    """
    RcmdLinecardSpeed

    Comparative speed of programming on linecard

    .. data:: other = 0

    	Other linecard

    .. data:: fastest = 1

    	Fastest linecard

    .. data:: slowest = 2

    	Slowest linecard

    """

    other = Enum.YLeaf(0, "other")

    fastest = Enum.YLeaf(1, "fastest")

    slowest = Enum.YLeaf(2, "slowest")


class RcmdLsChange(Enum):
    """
    RcmdLsChange

    Type of change

    .. data:: new = 0

    	Added

    .. data:: delete = 1

    	Deleted

    .. data:: modify = 2

    	Modified

    .. data:: noop = 3

    	No operation

    """

    new = Enum.YLeaf(0, "new")

    delete = Enum.YLeaf(1, "delete")

    modify = Enum.YLeaf(2, "modify")

    noop = Enum.YLeaf(3, "noop")


class RcmdLsa(Enum):
    """
    RcmdLsa

    Type of LSA

    .. data:: unknown = 0

    	Invalid LSA

    .. data:: router = 1

    	Router LSA

    .. data:: network = 2

    	Network LSA

    .. data:: summary = 3

    	Summary LSA

    .. data:: asbr = 4

    	ASBR LSA

    .. data:: external = 5

    	External LSA

    .. data:: multicast = 6

    	Multicast LSA

    .. data:: nssa = 7

    	NSSA LSA

    """

    unknown = Enum.YLeaf(0, "unknown")

    router = Enum.YLeaf(1, "router")

    network = Enum.YLeaf(2, "network")

    summary = Enum.YLeaf(3, "summary")

    asbr = Enum.YLeaf(4, "asbr")

    external = Enum.YLeaf(5, "external")

    multicast = Enum.YLeaf(6, "multicast")

    nssa = Enum.YLeaf(7, "nssa")


class RcmdPriorityLevel(Enum):
    """
    RcmdPriorityLevel

    Level of priority

    .. data:: critical = 0

    	Critical

    .. data:: high = 1

    	High

    .. data:: medium = 2

    	Medium

    .. data:: low = 3

    	Low

    """

    critical = Enum.YLeaf(0, "critical")

    high = Enum.YLeaf(1, "high")

    medium = Enum.YLeaf(2, "medium")

    low = Enum.YLeaf(3, "low")


class RcmdProtocolId(Enum):
    """
    RcmdProtocolId

    Protocol Info

    .. data:: ospf = 0

    	OSPF protocol

    .. data:: isis = 1

    	ISIS Prrotocol

    .. data:: na = 2

    	Max NA

    """

    ospf = Enum.YLeaf(0, "ospf")

    isis = Enum.YLeaf(1, "isis")

    na = Enum.YLeaf(2, "na")


class RcmdShowCompId(Enum):
    """
    RcmdShowCompId

    Component Info

    .. data:: ospf = 0

    	OSPF component

    .. data:: isis = 1

    	ISIS component

    .. data:: un_known = 2

    	Max NA

    """

    ospf = Enum.YLeaf(0, "ospf")

    isis = Enum.YLeaf(1, "isis")

    un_known = Enum.YLeaf(2, "un-known")


class RcmdShowInstState(Enum):
    """
    RcmdShowInstState

    instance state

    .. data:: unknown = 0

    	Unknown state

    .. data:: active = 1

    	Active state

    .. data:: in_active = 2

    	InActive state

    .. data:: na = 3

    	Max state

    """

    unknown = Enum.YLeaf(0, "unknown")

    active = Enum.YLeaf(1, "active")

    in_active = Enum.YLeaf(2, "in-active")

    na = Enum.YLeaf(3, "na")


class RcmdShowIntfEvent(Enum):
    """
    RcmdShowIntfEvent

    Rcmd show intf event

    .. data:: create = 1

    	Create

    .. data:: delete = 2

    	Delete

    .. data:: link_up = 3

    	LinkUp

    .. data:: link_down = 4

    	LinkDown

    .. data:: primary_address = 5

    	PrimaryAddress

    .. data:: secondary_address = 6

    	SecondaryAddress

    .. data:: ipv6_link_local_address = 7

    	Ipv6LinkLocalAddress

    .. data:: ipv6_global_address = 8

    	Ipv6GlobalAddress

    .. data:: mtu = 9

    	MTU

    .. data:: band_width = 10

    	BandWidth

    .. data:: ldp_sync = 11

    	LDPSync

    .. data:: forward_reference = 12

    	ForwardReference

    .. data:: ldp_no_sync = 13

    	LDPNoSync

    """

    create = Enum.YLeaf(1, "create")

    delete = Enum.YLeaf(2, "delete")

    link_up = Enum.YLeaf(3, "link-up")

    link_down = Enum.YLeaf(4, "link-down")

    primary_address = Enum.YLeaf(5, "primary-address")

    secondary_address = Enum.YLeaf(6, "secondary-address")

    ipv6_link_local_address = Enum.YLeaf(7, "ipv6-link-local-address")

    ipv6_global_address = Enum.YLeaf(8, "ipv6-global-address")

    mtu = Enum.YLeaf(9, "mtu")

    band_width = Enum.YLeaf(10, "band-width")

    ldp_sync = Enum.YLeaf(11, "ldp-sync")

    forward_reference = Enum.YLeaf(12, "forward-reference")

    ldp_no_sync = Enum.YLeaf(13, "ldp-no-sync")


class RcmdShowIpfrrLfa(Enum):
    """
    RcmdShowIpfrrLfa

    IP Frr LFA Types

    .. data:: none = 0

    	No IP Frr LFA Type 

    .. data:: local = 1

    	IP Frr Local LFA

    .. data:: remote = 2

    	IP Frr Remote LFA

    """

    none = Enum.YLeaf(0, "none")

    local = Enum.YLeaf(1, "local")

    remote = Enum.YLeaf(2, "remote")


class RcmdShowLdpConvState(Enum):
    """
    RcmdShowLdpConvState

    LDP Convergence States

    .. data:: not_full = 0

    	Not Fully Covered

    .. data:: fully_covered = 1

    	Fully Covered

    .. data:: coverage_above_threshold = 2

    	Backup Coverage Above Threshold

    .. data:: coverage_below_threshold = 3

    	Backup Coverage Below Threshold

    .. data:: coverage_flapping = 4

    	Backup Coverage is Flappping

    """

    not_full = Enum.YLeaf(0, "not-full")

    fully_covered = Enum.YLeaf(1, "fully-covered")

    coverage_above_threshold = Enum.YLeaf(2, "coverage-above-threshold")

    coverage_below_threshold = Enum.YLeaf(3, "coverage-below-threshold")

    coverage_flapping = Enum.YLeaf(4, "coverage-flapping")


class RcmdShowLdpNeighbourStatus(Enum):
    """
    RcmdShowLdpNeighbourStatus

    LDP Adjacency Session Status

    .. data:: down = 0

    	Down State

    .. data:: up = 1

    	Up State

    """

    down = Enum.YLeaf(0, "down")

    up = Enum.YLeaf(1, "up")


class RcmdShowLdpSessionState(Enum):
    """
    RcmdShowLdpSessionState

    LDP Session State

    .. data:: gr_down = 0

    	GR Down State

    .. data:: gr_converging = 1

    	GR Converging State

    .. data:: establishing = 2

    	Establishing State

    .. data:: converging = 3

    	Converging State

    .. data:: converged = 4

    	Converged State

    .. data:: retrying = 5

    	Retrying State

    .. data:: total = 6

    	Cumulative Coverage for all the States

    """

    gr_down = Enum.YLeaf(0, "gr-down")

    gr_converging = Enum.YLeaf(1, "gr-converging")

    establishing = Enum.YLeaf(2, "establishing")

    converging = Enum.YLeaf(3, "converging")

    converged = Enum.YLeaf(4, "converged")

    retrying = Enum.YLeaf(5, "retrying")

    total = Enum.YLeaf(6, "total")


class RcmdShowMem(Enum):
    """
    RcmdShowMem

    RCMD Memory Manager type

    .. data:: standard = 0

    	Standard type

    .. data:: chunk = 1

    	Chunk type

    .. data:: edm = 2

    	EDM type

    .. data:: string = 3

    	String type

    .. data:: static = 4

    	Static type

    .. data:: unknown = 5

    	Unknown type

    """

    standard = Enum.YLeaf(0, "standard")

    chunk = Enum.YLeaf(1, "chunk")

    edm = Enum.YLeaf(2, "edm")

    string = Enum.YLeaf(3, "string")

    static = Enum.YLeaf(4, "static")

    unknown = Enum.YLeaf(5, "unknown")


class RcmdShowNode(Enum):
    """
    RcmdShowNode

    Type of Node

    .. data:: unknown = 0

    	Unknown Type

    .. data:: lc = 1

    	LC Type

    .. data:: rp = 2

    	RP Type

    """

    unknown = Enum.YLeaf(0, "unknown")

    lc = Enum.YLeaf(1, "lc")

    rp = Enum.YLeaf(2, "rp")


class RcmdShowPrcsState(Enum):
    """
    RcmdShowPrcsState

    Post Processing Info

    .. data:: success = 0

    	Success

    .. data:: cpu = 1

    	Cpu overload

    .. data:: memory = 2

    	Memory overload

    """

    success = Enum.YLeaf(0, "success")

    cpu = Enum.YLeaf(1, "cpu")

    memory = Enum.YLeaf(2, "memory")


class RcmdShowRoute(Enum):
    """
    RcmdShowRoute

    Route Types

    .. data:: ospf = 0

    	OSPF route init

    .. data:: intra = 1

    	OSPF Intra route

    .. data:: inter = 2

    	OSPF Inter route

    .. data:: ext_1 = 3

    	OSPF External Type-1 Route

    .. data:: ext_2 = 4

    	OSPF External Type-2 Route

    .. data:: nssa_1 = 5

    	OSPF NSSA Type-1 Route

    .. data:: nssa_2 = 6

    	OSPF NSSA Type-2 Route

    .. data:: isis = 7

    	ISIS route init

    .. data:: l1_summary = 8

    	ISIS L1 Summary

    .. data:: l1 = 9

    	ISIS L1

    .. data:: l2_summary = 10

    	ISIS L2 Summary

    .. data:: l2 = 11

    	ISIS L2

    .. data:: inter_area_summary = 12

    	ISIS Inter Area Summary

    .. data:: inter_area = 13

    	ISIS Inter Area

    .. data:: default_attached = 14

    	ISIS Default Route Attached

    """

    ospf = Enum.YLeaf(0, "ospf")

    intra = Enum.YLeaf(1, "intra")

    inter = Enum.YLeaf(2, "inter")

    ext_1 = Enum.YLeaf(3, "ext-1")

    ext_2 = Enum.YLeaf(4, "ext-2")

    nssa_1 = Enum.YLeaf(5, "nssa-1")

    nssa_2 = Enum.YLeaf(6, "nssa-2")

    isis = Enum.YLeaf(7, "isis")

    l1_summary = Enum.YLeaf(8, "l1-summary")

    l1 = Enum.YLeaf(9, "l1")

    l2_summary = Enum.YLeaf(10, "l2-summary")

    l2 = Enum.YLeaf(11, "l2")

    inter_area_summary = Enum.YLeaf(12, "inter-area-summary")

    inter_area = Enum.YLeaf(13, "inter-area")

    default_attached = Enum.YLeaf(14, "default-attached")


class RcmdShowRoutePathChange(Enum):
    """
    RcmdShowRoutePathChange

    Type of route change

    .. data:: primary = 0

    	Primary path is changed

    .. data:: backup = 1

    	Backup path is changed

    """

    primary = Enum.YLeaf(0, "primary")

    backup = Enum.YLeaf(1, "backup")


class RcmdSpfState(Enum):
    """
    RcmdSpfState

    Type of an ISIS Level

    .. data:: complete = 0

    	Complete

    .. data:: in_complete = 1

    	InComplete

    .. data:: collecting = 2

    	Collecting data

    .. data:: no_route_change = 3

    	No Route Change

    """

    complete = Enum.YLeaf(0, "complete")

    in_complete = Enum.YLeaf(1, "in-complete")

    collecting = Enum.YLeaf(2, "collecting")

    no_route_change = Enum.YLeaf(3, "no-route-change")



class Rcmd(Entity):
    """
    Show command for Route Convergence Monitoring &
    Diagnostics
    
    .. attribute:: intf
    
    	Interface data
    	**type**\:   :py:class:`Intf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Intf>`
    
    .. attribute:: isis
    
    	Operational data for ISIS
    	**type**\:   :py:class:`Isis <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis>`
    
    .. attribute:: ldp
    
    	LDP data
    	**type**\:   :py:class:`Ldp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ldp>`
    
    .. attribute:: memory
    
    	Memory Info
    	**type**\:   :py:class:`Memory <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Memory>`
    
    .. attribute:: node
    
    	Node Info
    	**type**\:   :py:class:`Node <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Node>`
    
    .. attribute:: ospf
    
    	Operational data for OSPF
    	**type**\:   :py:class:`Ospf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf>`
    
    .. attribute:: process
    
    	Process information
    	**type**\:   :py:class:`Process <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Process>`
    
    .. attribute:: server
    
    	Server Info
    	**type**\:   :py:class:`Server <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Server>`
    
    

    """

    _prefix = 'infra-rcmd-oper'
    _revision = '2015-11-09'

    def __init__(self):
        super(Rcmd, self).__init__()
        self._top_entity = None

        self.yang_name = "rcmd"
        self.yang_parent_name = "Cisco-IOS-XR-infra-rcmd-oper"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self._child_container_classes = {"intf" : ("intf", Rcmd.Intf), "isis" : ("isis", Rcmd.Isis), "ldp" : ("ldp", Rcmd.Ldp), "memory" : ("memory", Rcmd.Memory), "node" : ("node", Rcmd.Node), "ospf" : ("ospf", Rcmd.Ospf), "process" : ("process", Rcmd.Process), "server" : ("server", Rcmd.Server)}
        self._child_list_classes = {}

        self.intf = Rcmd.Intf()
        self.intf.parent = self
        self._children_name_map["intf"] = "intf"
        self._children_yang_names.add("intf")

        self.isis = Rcmd.Isis()
        self.isis.parent = self
        self._children_name_map["isis"] = "isis"
        self._children_yang_names.add("isis")

        self.ldp = Rcmd.Ldp()
        self.ldp.parent = self
        self._children_name_map["ldp"] = "ldp"
        self._children_yang_names.add("ldp")

        self.memory = Rcmd.Memory()
        self.memory.parent = self
        self._children_name_map["memory"] = "memory"
        self._children_yang_names.add("memory")

        self.node = Rcmd.Node()
        self.node.parent = self
        self._children_name_map["node"] = "node"
        self._children_yang_names.add("node")

        self.ospf = Rcmd.Ospf()
        self.ospf.parent = self
        self._children_name_map["ospf"] = "ospf"
        self._children_yang_names.add("ospf")

        self.process = Rcmd.Process()
        self.process.parent = self
        self._children_name_map["process"] = "process"
        self._children_yang_names.add("process")

        self.server = Rcmd.Server()
        self.server.parent = self
        self._children_name_map["server"] = "server"
        self._children_yang_names.add("server")
        self._segment_path = lambda: "Cisco-IOS-XR-infra-rcmd-oper:rcmd"


    class Intf(Entity):
        """
        Interface data
        
        .. attribute:: events
        
        	Events
        	**type**\:   :py:class:`Events <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Intf.Events>`
        
        

        """

        _prefix = 'infra-rcmd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Rcmd.Intf, self).__init__()

            self.yang_name = "intf"
            self.yang_parent_name = "rcmd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self._child_container_classes = {"events" : ("events", Rcmd.Intf.Events)}
            self._child_list_classes = {}

            self.events = Rcmd.Intf.Events()
            self.events.parent = self
            self._children_name_map["events"] = "events"
            self._children_yang_names.add("events")
            self._segment_path = lambda: "intf"
            self._absolute_path = lambda: "Cisco-IOS-XR-infra-rcmd-oper:rcmd/%s" % self._segment_path()


        class Events(Entity):
            """
            Events
            
            .. attribute:: event
            
            	Events
            	**type**\: list of    :py:class:`Event <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Intf.Events.Event>`
            
            

            """

            _prefix = 'infra-rcmd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Rcmd.Intf.Events, self).__init__()

                self.yang_name = "events"
                self.yang_parent_name = "intf"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self._child_container_classes = {}
                self._child_list_classes = {"event" : ("event", Rcmd.Intf.Events.Event)}

                self.event = YList(self)
                self._segment_path = lambda: "events"
                self._absolute_path = lambda: "Cisco-IOS-XR-infra-rcmd-oper:rcmd/intf/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Rcmd.Intf.Events, [], name, value)


            class Event(Entity):
                """
                Events
                
                .. attribute:: event_no  <key>
                
                	Specific Event No
                	**type**\:  int
                
                	**range:** 1..4294967295
                
                .. attribute:: component
                
                	Component info
                	**type**\:   :py:class:`RcmdShowCompId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowCompId>`
                
                .. attribute:: event_time
                
                	Event Time
                	**type**\:  str
                
                .. attribute:: event_type
                
                	Event Info
                	**type**\:   :py:class:`RcmdShowIntfEvent <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowIntfEvent>`
                
                .. attribute:: interface_name
                
                	Interface Name
                	**type**\:  str
                
                .. attribute:: primary_address
                
                	Primary Address
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: sequence_no
                
                	Sequence No
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'infra-rcmd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Rcmd.Intf.Events.Event, self).__init__()

                    self.yang_name = "event"
                    self.yang_parent_name = "events"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self._child_container_classes = {}
                    self._child_list_classes = {}

                    self.event_no = YLeaf(YType.uint32, "event-no")

                    self.component = YLeaf(YType.enumeration, "component")

                    self.event_time = YLeaf(YType.str, "event-time")

                    self.event_type = YLeaf(YType.enumeration, "event-type")

                    self.interface_name = YLeaf(YType.str, "interface-name")

                    self.primary_address = YLeaf(YType.str, "primary-address")

                    self.sequence_no = YLeaf(YType.uint32, "sequence-no")
                    self._segment_path = lambda: "event" + "[event-no='" + self.event_no.get() + "']"
                    self._absolute_path = lambda: "Cisco-IOS-XR-infra-rcmd-oper:rcmd/intf/events/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rcmd.Intf.Events.Event, ['event_no', 'component', 'event_time', 'event_type', 'interface_name', 'primary_address', 'sequence_no'], name, value)


    class Isis(Entity):
        """
        Operational data for ISIS
        
        .. attribute:: instances
        
        	Operational data
        	**type**\:   :py:class:`Instances <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances>`
        
        

        """

        _prefix = 'infra-rcmd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Rcmd.Isis, self).__init__()

            self.yang_name = "isis"
            self.yang_parent_name = "rcmd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self._child_container_classes = {"instances" : ("instances", Rcmd.Isis.Instances)}
            self._child_list_classes = {}

            self.instances = Rcmd.Isis.Instances()
            self.instances.parent = self
            self._children_name_map["instances"] = "instances"
            self._children_yang_names.add("instances")
            self._segment_path = lambda: "isis"
            self._absolute_path = lambda: "Cisco-IOS-XR-infra-rcmd-oper:rcmd/%s" % self._segment_path()


        class Instances(Entity):
            """
            Operational data
            
            .. attribute:: instance
            
            	Operational data for a particular instance
            	**type**\: list of    :py:class:`Instance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance>`
            
            

            """

            _prefix = 'infra-rcmd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Rcmd.Isis.Instances, self).__init__()

                self.yang_name = "instances"
                self.yang_parent_name = "isis"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self._child_container_classes = {}
                self._child_list_classes = {"instance" : ("instance", Rcmd.Isis.Instances.Instance)}

                self.instance = YList(self)
                self._segment_path = lambda: "instances"
                self._absolute_path = lambda: "Cisco-IOS-XR-infra-rcmd-oper:rcmd/isis/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Rcmd.Isis.Instances, [], name, value)


            class Instance(Entity):
                """
                Operational data for a particular instance
                
                .. attribute:: instance_name  <key>
                
                	Operational data for a particular instance
                	**type**\:  str
                
                	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                
                .. attribute:: ipfrr_event_offlines
                
                	ISIS IP\-FRR Event offline data
                	**type**\:   :py:class:`IpfrrEventOfflines <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.IpfrrEventOfflines>`
                
                .. attribute:: ipfrr_event_summaries
                
                	ISIS IP\-FRR events summary data
                	**type**\:   :py:class:`IpfrrEventSummaries <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.IpfrrEventSummaries>`
                
                .. attribute:: lsp_regenerateds
                
                	Regenerated LSP data
                	**type**\:   :py:class:`LspRegenerateds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.LspRegenerateds>`
                
                .. attribute:: prefix_event_offlines
                
                	ISIS Prefix events offline data
                	**type**\:   :py:class:`PrefixEventOfflines <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.PrefixEventOfflines>`
                
                .. attribute:: prefix_event_statistics
                
                	ISIS Prefix events statistics data
                	**type**\:   :py:class:`PrefixEventStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.PrefixEventStatistics>`
                
                .. attribute:: prefix_event_summaries
                
                	ISIS Prefix events summary data
                	**type**\:   :py:class:`PrefixEventSummaries <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.PrefixEventSummaries>`
                
                .. attribute:: spf_run_offlines
                
                	ISIS SPF run offline data
                	**type**\:   :py:class:`SpfRunOfflines <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunOfflines>`
                
                .. attribute:: spf_run_summaries
                
                	ISIS SPF run summary data
                	**type**\:   :py:class:`SpfRunSummaries <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunSummaries>`
                
                

                """

                _prefix = 'infra-rcmd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Rcmd.Isis.Instances.Instance, self).__init__()

                    self.yang_name = "instance"
                    self.yang_parent_name = "instances"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self._child_container_classes = {"ipfrr-event-offlines" : ("ipfrr_event_offlines", Rcmd.Isis.Instances.Instance.IpfrrEventOfflines), "ipfrr-event-summaries" : ("ipfrr_event_summaries", Rcmd.Isis.Instances.Instance.IpfrrEventSummaries), "lsp-regenerateds" : ("lsp_regenerateds", Rcmd.Isis.Instances.Instance.LspRegenerateds), "prefix-event-offlines" : ("prefix_event_offlines", Rcmd.Isis.Instances.Instance.PrefixEventOfflines), "prefix-event-statistics" : ("prefix_event_statistics", Rcmd.Isis.Instances.Instance.PrefixEventStatistics), "prefix-event-summaries" : ("prefix_event_summaries", Rcmd.Isis.Instances.Instance.PrefixEventSummaries), "spf-run-offlines" : ("spf_run_offlines", Rcmd.Isis.Instances.Instance.SpfRunOfflines), "spf-run-summaries" : ("spf_run_summaries", Rcmd.Isis.Instances.Instance.SpfRunSummaries)}
                    self._child_list_classes = {}

                    self.instance_name = YLeaf(YType.str, "instance-name")

                    self.ipfrr_event_offlines = Rcmd.Isis.Instances.Instance.IpfrrEventOfflines()
                    self.ipfrr_event_offlines.parent = self
                    self._children_name_map["ipfrr_event_offlines"] = "ipfrr-event-offlines"
                    self._children_yang_names.add("ipfrr-event-offlines")

                    self.ipfrr_event_summaries = Rcmd.Isis.Instances.Instance.IpfrrEventSummaries()
                    self.ipfrr_event_summaries.parent = self
                    self._children_name_map["ipfrr_event_summaries"] = "ipfrr-event-summaries"
                    self._children_yang_names.add("ipfrr-event-summaries")

                    self.lsp_regenerateds = Rcmd.Isis.Instances.Instance.LspRegenerateds()
                    self.lsp_regenerateds.parent = self
                    self._children_name_map["lsp_regenerateds"] = "lsp-regenerateds"
                    self._children_yang_names.add("lsp-regenerateds")

                    self.prefix_event_offlines = Rcmd.Isis.Instances.Instance.PrefixEventOfflines()
                    self.prefix_event_offlines.parent = self
                    self._children_name_map["prefix_event_offlines"] = "prefix-event-offlines"
                    self._children_yang_names.add("prefix-event-offlines")

                    self.prefix_event_statistics = Rcmd.Isis.Instances.Instance.PrefixEventStatistics()
                    self.prefix_event_statistics.parent = self
                    self._children_name_map["prefix_event_statistics"] = "prefix-event-statistics"
                    self._children_yang_names.add("prefix-event-statistics")

                    self.prefix_event_summaries = Rcmd.Isis.Instances.Instance.PrefixEventSummaries()
                    self.prefix_event_summaries.parent = self
                    self._children_name_map["prefix_event_summaries"] = "prefix-event-summaries"
                    self._children_yang_names.add("prefix-event-summaries")

                    self.spf_run_offlines = Rcmd.Isis.Instances.Instance.SpfRunOfflines()
                    self.spf_run_offlines.parent = self
                    self._children_name_map["spf_run_offlines"] = "spf-run-offlines"
                    self._children_yang_names.add("spf-run-offlines")

                    self.spf_run_summaries = Rcmd.Isis.Instances.Instance.SpfRunSummaries()
                    self.spf_run_summaries.parent = self
                    self._children_name_map["spf_run_summaries"] = "spf-run-summaries"
                    self._children_yang_names.add("spf-run-summaries")
                    self._segment_path = lambda: "instance" + "[instance-name='" + self.instance_name.get() + "']"
                    self._absolute_path = lambda: "Cisco-IOS-XR-infra-rcmd-oper:rcmd/isis/instances/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rcmd.Isis.Instances.Instance, ['instance_name'], name, value)


                class IpfrrEventOfflines(Entity):
                    """
                    ISIS IP\-FRR Event offline data
                    
                    .. attribute:: ipfrr_event_offline
                    
                    	Offline operational data for particular ISIS IP\-FRR Event
                    	**type**\: list of    :py:class:`IpfrrEventOffline <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.IpfrrEventOfflines.IpfrrEventOffline>`
                    
                    

                    """

                    _prefix = 'infra-rcmd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Rcmd.Isis.Instances.Instance.IpfrrEventOfflines, self).__init__()

                        self.yang_name = "ipfrr-event-offlines"
                        self.yang_parent_name = "instance"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self._child_container_classes = {}
                        self._child_list_classes = {"ipfrr-event-offline" : ("ipfrr_event_offline", Rcmd.Isis.Instances.Instance.IpfrrEventOfflines.IpfrrEventOffline)}

                        self.ipfrr_event_offline = YList(self)
                        self._segment_path = lambda: "ipfrr-event-offlines"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rcmd.Isis.Instances.Instance.IpfrrEventOfflines, [], name, value)


                    class IpfrrEventOffline(Entity):
                        """
                        Offline operational data for particular ISIS
                        IP\-FRR Event
                        
                        .. attribute:: event_id  <key>
                        
                        	Specific IP\-FRR Event
                        	**type**\:  int
                        
                        	**range:** 1..4294967295
                        
                        .. attribute:: completed_spf_run
                        
                        	IP\-Frr Completed reference SPF Run Number
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: coverage
                        
                        	Coverage in percentage for all priorities
                        	**type**\:  str
                        
                        	**units**\: percentage
                        
                        .. attribute:: duration
                        
                        	Duration for the calculation (in milliseconds)
                        	**type**\:  str
                        
                        	**units**\: millisecond
                        
                        .. attribute:: event_id_xr
                        
                        	IP\-Frr Event ID
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: fully_protected_routes
                        
                        	Cumulative Number of Fully Protected Routes
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: ipfrr_statistic
                        
                        	IP\-Frr Statistics categorized by priority
                        	**type**\: list of    :py:class:`IpfrrStatistic <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.IpfrrEventOfflines.IpfrrEventOffline.IpfrrStatistic>`
                        
                        .. attribute:: partially_protected_routes
                        
                        	Cumulative Number of Partially Protected Routes
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: remote_node
                        
                        	Remote Node Information
                        	**type**\: list of    :py:class:`RemoteNode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.IpfrrEventOfflines.IpfrrEventOffline.RemoteNode>`
                        
                        .. attribute:: start_time_offset
                        
                        	Start Time offset from trigger time (in milliseconds)
                        	**type**\:  str
                        
                        	**units**\: millisecond
                        
                        .. attribute:: total_routes
                        
                        	Cumulative Number of Routes for all priorities
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: trigger_spf_run
                        
                        	IP\-Frr Triggered reference SPF Run Number
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: trigger_time
                        
                        	Trigger time  (eg\: Apr 24 13\:16\:04.961)
                        	**type**\:  str
                        
                        .. attribute:: wait_time
                        
                        	Waiting Time (in milliseconds)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: millisecond
                        
                        

                        """

                        _prefix = 'infra-rcmd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Rcmd.Isis.Instances.Instance.IpfrrEventOfflines.IpfrrEventOffline, self).__init__()

                            self.yang_name = "ipfrr-event-offline"
                            self.yang_parent_name = "ipfrr-event-offlines"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self._child_container_classes = {}
                            self._child_list_classes = {"ipfrr-statistic" : ("ipfrr_statistic", Rcmd.Isis.Instances.Instance.IpfrrEventOfflines.IpfrrEventOffline.IpfrrStatistic), "remote-node" : ("remote_node", Rcmd.Isis.Instances.Instance.IpfrrEventOfflines.IpfrrEventOffline.RemoteNode)}

                            self.event_id = YLeaf(YType.uint32, "event-id")

                            self.completed_spf_run = YLeaf(YType.uint32, "completed-spf-run")

                            self.coverage = YLeaf(YType.str, "coverage")

                            self.duration = YLeaf(YType.str, "duration")

                            self.event_id_xr = YLeaf(YType.uint32, "event-id-xr")

                            self.fully_protected_routes = YLeaf(YType.uint32, "fully-protected-routes")

                            self.partially_protected_routes = YLeaf(YType.uint32, "partially-protected-routes")

                            self.start_time_offset = YLeaf(YType.str, "start-time-offset")

                            self.total_routes = YLeaf(YType.uint32, "total-routes")

                            self.trigger_spf_run = YLeaf(YType.uint32, "trigger-spf-run")

                            self.trigger_time = YLeaf(YType.str, "trigger-time")

                            self.wait_time = YLeaf(YType.uint32, "wait-time")

                            self.ipfrr_statistic = YList(self)
                            self.remote_node = YList(self)
                            self._segment_path = lambda: "ipfrr-event-offline" + "[event-id='" + self.event_id.get() + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rcmd.Isis.Instances.Instance.IpfrrEventOfflines.IpfrrEventOffline, ['event_id', 'completed_spf_run', 'coverage', 'duration', 'event_id_xr', 'fully_protected_routes', 'partially_protected_routes', 'start_time_offset', 'total_routes', 'trigger_spf_run', 'trigger_time', 'wait_time'], name, value)


                        class IpfrrStatistic(Entity):
                            """
                            IP\-Frr Statistics categorized by priority
                            
                            .. attribute:: below_threshold
                            
                            	Covearge is below Configured Threshold
                            	**type**\:  bool
                            
                            .. attribute:: coverage
                            
                            	Coverage in percentage
                            	**type**\:  str
                            
                            	**units**\: percentage
                            
                            .. attribute:: fully_protected_routes
                            
                            	Fully Protected Routes
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: local_lfa_coverage
                            
                            	Local LFA Coverage in percentage
                            	**type**\:  str
                            
                            	**units**\: percentage
                            
                            .. attribute:: partially_protected_routes
                            
                            	Partially Protected Routes
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: priority
                            
                            	Priority
                            	**type**\:   :py:class:`RcmdPriorityLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdPriorityLevel>`
                            
                            .. attribute:: remote_lfa_coverage
                            
                            	Remote LFA Coverage in percentage
                            	**type**\:  str
                            
                            	**units**\: percentage
                            
                            .. attribute:: total_routes
                            
                            	Total Number of Routes
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Rcmd.Isis.Instances.Instance.IpfrrEventOfflines.IpfrrEventOffline.IpfrrStatistic, self).__init__()

                                self.yang_name = "ipfrr-statistic"
                                self.yang_parent_name = "ipfrr-event-offline"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {}

                                self.below_threshold = YLeaf(YType.boolean, "below-threshold")

                                self.coverage = YLeaf(YType.str, "coverage")

                                self.fully_protected_routes = YLeaf(YType.uint32, "fully-protected-routes")

                                self.local_lfa_coverage = YLeaf(YType.str, "local-lfa-coverage")

                                self.partially_protected_routes = YLeaf(YType.uint32, "partially-protected-routes")

                                self.priority = YLeaf(YType.enumeration, "priority")

                                self.remote_lfa_coverage = YLeaf(YType.str, "remote-lfa-coverage")

                                self.total_routes = YLeaf(YType.uint32, "total-routes")
                                self._segment_path = lambda: "ipfrr-statistic"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rcmd.Isis.Instances.Instance.IpfrrEventOfflines.IpfrrEventOffline.IpfrrStatistic, ['below_threshold', 'coverage', 'fully_protected_routes', 'local_lfa_coverage', 'partially_protected_routes', 'priority', 'remote_lfa_coverage', 'total_routes'], name, value)


                        class RemoteNode(Entity):
                            """
                            Remote Node Information
                            
                            .. attribute:: in_use_time
                            
                            	Inuse time of the Remote Node (eg\: Apr 24 13\:16 \:04.961)
                            	**type**\:  str
                            
                            .. attribute:: interface_name
                            
                            	Interface Name
                            	**type**\:  str
                            
                            .. attribute:: neighbour_address
                            
                            	Nexthop Address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: path_count
                            
                            	Number of paths protected by this Remote Node
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: primary_path
                            
                            	Protected Primary Paths
                            	**type**\: list of    :py:class:`PrimaryPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.IpfrrEventOfflines.IpfrrEventOffline.RemoteNode.PrimaryPath>`
                            
                            .. attribute:: remote_node_id
                            
                            	Remote\-LFA Node ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Rcmd.Isis.Instances.Instance.IpfrrEventOfflines.IpfrrEventOffline.RemoteNode, self).__init__()

                                self.yang_name = "remote-node"
                                self.yang_parent_name = "ipfrr-event-offline"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {"primary-path" : ("primary_path", Rcmd.Isis.Instances.Instance.IpfrrEventOfflines.IpfrrEventOffline.RemoteNode.PrimaryPath)}

                                self.in_use_time = YLeaf(YType.str, "in-use-time")

                                self.interface_name = YLeaf(YType.str, "interface-name")

                                self.neighbour_address = YLeaf(YType.str, "neighbour-address")

                                self.path_count = YLeaf(YType.uint32, "path-count")

                                self.remote_node_id = YLeaf(YType.str, "remote-node-id")

                                self.primary_path = YList(self)
                                self._segment_path = lambda: "remote-node"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rcmd.Isis.Instances.Instance.IpfrrEventOfflines.IpfrrEventOffline.RemoteNode, ['in_use_time', 'interface_name', 'neighbour_address', 'path_count', 'remote_node_id'], name, value)


                            class PrimaryPath(Entity):
                                """
                                Protected Primary Paths
                                
                                .. attribute:: interface_name
                                
                                	Interface Name
                                	**type**\:  str
                                
                                .. attribute:: neighbour_address
                                
                                	Nexthop Address
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Rcmd.Isis.Instances.Instance.IpfrrEventOfflines.IpfrrEventOffline.RemoteNode.PrimaryPath, self).__init__()

                                    self.yang_name = "primary-path"
                                    self.yang_parent_name = "remote-node"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {}
                                    self._child_list_classes = {}

                                    self.interface_name = YLeaf(YType.str, "interface-name")

                                    self.neighbour_address = YLeaf(YType.str, "neighbour-address")
                                    self._segment_path = lambda: "primary-path"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Rcmd.Isis.Instances.Instance.IpfrrEventOfflines.IpfrrEventOffline.RemoteNode.PrimaryPath, ['interface_name', 'neighbour_address'], name, value)


                class IpfrrEventSummaries(Entity):
                    """
                    ISIS IP\-FRR events summary data
                    
                    .. attribute:: ipfrr_event_summary
                    
                    	IP\-FRR Event data
                    	**type**\: list of    :py:class:`IpfrrEventSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.IpfrrEventSummaries.IpfrrEventSummary>`
                    
                    

                    """

                    _prefix = 'infra-rcmd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Rcmd.Isis.Instances.Instance.IpfrrEventSummaries, self).__init__()

                        self.yang_name = "ipfrr-event-summaries"
                        self.yang_parent_name = "instance"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self._child_container_classes = {}
                        self._child_list_classes = {"ipfrr-event-summary" : ("ipfrr_event_summary", Rcmd.Isis.Instances.Instance.IpfrrEventSummaries.IpfrrEventSummary)}

                        self.ipfrr_event_summary = YList(self)
                        self._segment_path = lambda: "ipfrr-event-summaries"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rcmd.Isis.Instances.Instance.IpfrrEventSummaries, [], name, value)


                    class IpfrrEventSummary(Entity):
                        """
                        IP\-FRR Event data
                        
                        .. attribute:: event_id  <key>
                        
                        	Specific IP\-FRR Event
                        	**type**\:  int
                        
                        	**range:** 1..4294967295
                        
                        .. attribute:: completed_spf_run
                        
                        	IP\-Frr Completed reference SPF Run Number
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: coverage
                        
                        	Coverage in percentage for all priorities
                        	**type**\:  str
                        
                        	**units**\: percentage
                        
                        .. attribute:: duration
                        
                        	Duration for the calculation (in milliseconds)
                        	**type**\:  str
                        
                        	**units**\: millisecond
                        
                        .. attribute:: event_id_xr
                        
                        	IP\-Frr Event ID
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: fully_protected_routes
                        
                        	Cumulative Number of Fully Protected Routes
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: ipfrr_statistic
                        
                        	IP\-Frr Statistics categorized by priority
                        	**type**\: list of    :py:class:`IpfrrStatistic <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.IpfrrEventSummaries.IpfrrEventSummary.IpfrrStatistic>`
                        
                        .. attribute:: partially_protected_routes
                        
                        	Cumulative Number of Partially Protected Routes
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: remote_node
                        
                        	Remote Node Information
                        	**type**\: list of    :py:class:`RemoteNode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.IpfrrEventSummaries.IpfrrEventSummary.RemoteNode>`
                        
                        .. attribute:: start_time_offset
                        
                        	Start Time offset from trigger time (in milliseconds)
                        	**type**\:  str
                        
                        	**units**\: millisecond
                        
                        .. attribute:: total_routes
                        
                        	Cumulative Number of Routes for all priorities
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: trigger_spf_run
                        
                        	IP\-Frr Triggered reference SPF Run Number
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: trigger_time
                        
                        	Trigger time  (eg\: Apr 24 13\:16\:04.961)
                        	**type**\:  str
                        
                        .. attribute:: wait_time
                        
                        	Waiting Time (in milliseconds)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: millisecond
                        
                        

                        """

                        _prefix = 'infra-rcmd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Rcmd.Isis.Instances.Instance.IpfrrEventSummaries.IpfrrEventSummary, self).__init__()

                            self.yang_name = "ipfrr-event-summary"
                            self.yang_parent_name = "ipfrr-event-summaries"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self._child_container_classes = {}
                            self._child_list_classes = {"ipfrr-statistic" : ("ipfrr_statistic", Rcmd.Isis.Instances.Instance.IpfrrEventSummaries.IpfrrEventSummary.IpfrrStatistic), "remote-node" : ("remote_node", Rcmd.Isis.Instances.Instance.IpfrrEventSummaries.IpfrrEventSummary.RemoteNode)}

                            self.event_id = YLeaf(YType.uint32, "event-id")

                            self.completed_spf_run = YLeaf(YType.uint32, "completed-spf-run")

                            self.coverage = YLeaf(YType.str, "coverage")

                            self.duration = YLeaf(YType.str, "duration")

                            self.event_id_xr = YLeaf(YType.uint32, "event-id-xr")

                            self.fully_protected_routes = YLeaf(YType.uint32, "fully-protected-routes")

                            self.partially_protected_routes = YLeaf(YType.uint32, "partially-protected-routes")

                            self.start_time_offset = YLeaf(YType.str, "start-time-offset")

                            self.total_routes = YLeaf(YType.uint32, "total-routes")

                            self.trigger_spf_run = YLeaf(YType.uint32, "trigger-spf-run")

                            self.trigger_time = YLeaf(YType.str, "trigger-time")

                            self.wait_time = YLeaf(YType.uint32, "wait-time")

                            self.ipfrr_statistic = YList(self)
                            self.remote_node = YList(self)
                            self._segment_path = lambda: "ipfrr-event-summary" + "[event-id='" + self.event_id.get() + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rcmd.Isis.Instances.Instance.IpfrrEventSummaries.IpfrrEventSummary, ['event_id', 'completed_spf_run', 'coverage', 'duration', 'event_id_xr', 'fully_protected_routes', 'partially_protected_routes', 'start_time_offset', 'total_routes', 'trigger_spf_run', 'trigger_time', 'wait_time'], name, value)


                        class IpfrrStatistic(Entity):
                            """
                            IP\-Frr Statistics categorized by priority
                            
                            .. attribute:: below_threshold
                            
                            	Covearge is below Configured Threshold
                            	**type**\:  bool
                            
                            .. attribute:: coverage
                            
                            	Coverage in percentage
                            	**type**\:  str
                            
                            	**units**\: percentage
                            
                            .. attribute:: fully_protected_routes
                            
                            	Fully Protected Routes
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: local_lfa_coverage
                            
                            	Local LFA Coverage in percentage
                            	**type**\:  str
                            
                            	**units**\: percentage
                            
                            .. attribute:: partially_protected_routes
                            
                            	Partially Protected Routes
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: priority
                            
                            	Priority
                            	**type**\:   :py:class:`RcmdPriorityLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdPriorityLevel>`
                            
                            .. attribute:: remote_lfa_coverage
                            
                            	Remote LFA Coverage in percentage
                            	**type**\:  str
                            
                            	**units**\: percentage
                            
                            .. attribute:: total_routes
                            
                            	Total Number of Routes
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Rcmd.Isis.Instances.Instance.IpfrrEventSummaries.IpfrrEventSummary.IpfrrStatistic, self).__init__()

                                self.yang_name = "ipfrr-statistic"
                                self.yang_parent_name = "ipfrr-event-summary"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {}

                                self.below_threshold = YLeaf(YType.boolean, "below-threshold")

                                self.coverage = YLeaf(YType.str, "coverage")

                                self.fully_protected_routes = YLeaf(YType.uint32, "fully-protected-routes")

                                self.local_lfa_coverage = YLeaf(YType.str, "local-lfa-coverage")

                                self.partially_protected_routes = YLeaf(YType.uint32, "partially-protected-routes")

                                self.priority = YLeaf(YType.enumeration, "priority")

                                self.remote_lfa_coverage = YLeaf(YType.str, "remote-lfa-coverage")

                                self.total_routes = YLeaf(YType.uint32, "total-routes")
                                self._segment_path = lambda: "ipfrr-statistic"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rcmd.Isis.Instances.Instance.IpfrrEventSummaries.IpfrrEventSummary.IpfrrStatistic, ['below_threshold', 'coverage', 'fully_protected_routes', 'local_lfa_coverage', 'partially_protected_routes', 'priority', 'remote_lfa_coverage', 'total_routes'], name, value)


                        class RemoteNode(Entity):
                            """
                            Remote Node Information
                            
                            .. attribute:: in_use_time
                            
                            	Inuse time of the Remote Node (eg\: Apr 24 13\:16 \:04.961)
                            	**type**\:  str
                            
                            .. attribute:: interface_name
                            
                            	Interface Name
                            	**type**\:  str
                            
                            .. attribute:: neighbour_address
                            
                            	Nexthop Address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: path_count
                            
                            	Number of paths protected by this Remote Node
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: primary_path
                            
                            	Protected Primary Paths
                            	**type**\: list of    :py:class:`PrimaryPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.IpfrrEventSummaries.IpfrrEventSummary.RemoteNode.PrimaryPath>`
                            
                            .. attribute:: remote_node_id
                            
                            	Remote\-LFA Node ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Rcmd.Isis.Instances.Instance.IpfrrEventSummaries.IpfrrEventSummary.RemoteNode, self).__init__()

                                self.yang_name = "remote-node"
                                self.yang_parent_name = "ipfrr-event-summary"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {"primary-path" : ("primary_path", Rcmd.Isis.Instances.Instance.IpfrrEventSummaries.IpfrrEventSummary.RemoteNode.PrimaryPath)}

                                self.in_use_time = YLeaf(YType.str, "in-use-time")

                                self.interface_name = YLeaf(YType.str, "interface-name")

                                self.neighbour_address = YLeaf(YType.str, "neighbour-address")

                                self.path_count = YLeaf(YType.uint32, "path-count")

                                self.remote_node_id = YLeaf(YType.str, "remote-node-id")

                                self.primary_path = YList(self)
                                self._segment_path = lambda: "remote-node"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rcmd.Isis.Instances.Instance.IpfrrEventSummaries.IpfrrEventSummary.RemoteNode, ['in_use_time', 'interface_name', 'neighbour_address', 'path_count', 'remote_node_id'], name, value)


                            class PrimaryPath(Entity):
                                """
                                Protected Primary Paths
                                
                                .. attribute:: interface_name
                                
                                	Interface Name
                                	**type**\:  str
                                
                                .. attribute:: neighbour_address
                                
                                	Nexthop Address
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Rcmd.Isis.Instances.Instance.IpfrrEventSummaries.IpfrrEventSummary.RemoteNode.PrimaryPath, self).__init__()

                                    self.yang_name = "primary-path"
                                    self.yang_parent_name = "remote-node"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {}
                                    self._child_list_classes = {}

                                    self.interface_name = YLeaf(YType.str, "interface-name")

                                    self.neighbour_address = YLeaf(YType.str, "neighbour-address")
                                    self._segment_path = lambda: "primary-path"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Rcmd.Isis.Instances.Instance.IpfrrEventSummaries.IpfrrEventSummary.RemoteNode.PrimaryPath, ['interface_name', 'neighbour_address'], name, value)


                class LspRegenerateds(Entity):
                    """
                    Regenerated LSP data
                    
                    .. attribute:: lsp_regenerated
                    
                    	Regenerated LSP data
                    	**type**\: list of    :py:class:`LspRegenerated <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.LspRegenerateds.LspRegenerated>`
                    
                    

                    """

                    _prefix = 'infra-rcmd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Rcmd.Isis.Instances.Instance.LspRegenerateds, self).__init__()

                        self.yang_name = "lsp-regenerateds"
                        self.yang_parent_name = "instance"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self._child_container_classes = {}
                        self._child_list_classes = {"lsp-regenerated" : ("lsp_regenerated", Rcmd.Isis.Instances.Instance.LspRegenerateds.LspRegenerated)}

                        self.lsp_regenerated = YList(self)
                        self._segment_path = lambda: "lsp-regenerateds"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rcmd.Isis.Instances.Instance.LspRegenerateds, [], name, value)


                    class LspRegenerated(Entity):
                        """
                        Regenerated LSP data
                        
                        .. attribute:: serial_number  <key>
                        
                        	Data for a particular regenerated LSP
                        	**type**\:  int
                        
                        	**range:** 1..4294967295
                        
                        .. attribute:: isis_level
                        
                        	ISIS Level
                        	**type**\:   :py:class:`RcmdIsisLvl <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdIsisLvl>`
                        
                        .. attribute:: lsp_id
                        
                        	LSP ID
                        	**type**\:  str
                        
                        .. attribute:: reason
                        
                        	Trigger reasons for LSP regeneration. Example\: pr^ \- periodic, cr^ \- clear (Check the documentation for the entire list)
                        	**type**\:  str
                        
                        .. attribute:: reception_time
                        
                        	Reception Time on router (in hh\:mm\:ss.msec)
                        	**type**\:  str
                        
                        .. attribute:: sequence_number
                        
                        	Sequence Number
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: serial_number_xr
                        
                        	Serial Number of the session event
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: spf_run_number
                        
                        	SPF Run Number
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'infra-rcmd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Rcmd.Isis.Instances.Instance.LspRegenerateds.LspRegenerated, self).__init__()

                            self.yang_name = "lsp-regenerated"
                            self.yang_parent_name = "lsp-regenerateds"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self._child_container_classes = {}
                            self._child_list_classes = {}

                            self.serial_number = YLeaf(YType.uint32, "serial-number")

                            self.isis_level = YLeaf(YType.enumeration, "isis-level")

                            self.lsp_id = YLeaf(YType.str, "lsp-id")

                            self.reason = YLeaf(YType.str, "reason")

                            self.reception_time = YLeaf(YType.str, "reception-time")

                            self.sequence_number = YLeaf(YType.uint32, "sequence-number")

                            self.serial_number_xr = YLeaf(YType.uint32, "serial-number-xr")

                            self.spf_run_number = YLeaf(YType.uint32, "spf-run-number")
                            self._segment_path = lambda: "lsp-regenerated" + "[serial-number='" + self.serial_number.get() + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rcmd.Isis.Instances.Instance.LspRegenerateds.LspRegenerated, ['serial_number', 'isis_level', 'lsp_id', 'reason', 'reception_time', 'sequence_number', 'serial_number_xr', 'spf_run_number'], name, value)


                class PrefixEventOfflines(Entity):
                    """
                    ISIS Prefix events offline data
                    
                    .. attribute:: prefix_event_offline
                    
                    	Offline operational data for particular ISIS Prefix Event
                    	**type**\: list of    :py:class:`PrefixEventOffline <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.PrefixEventOfflines.PrefixEventOffline>`
                    
                    

                    """

                    _prefix = 'infra-rcmd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Rcmd.Isis.Instances.Instance.PrefixEventOfflines, self).__init__()

                        self.yang_name = "prefix-event-offlines"
                        self.yang_parent_name = "instance"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self._child_container_classes = {}
                        self._child_list_classes = {"prefix-event-offline" : ("prefix_event_offline", Rcmd.Isis.Instances.Instance.PrefixEventOfflines.PrefixEventOffline)}

                        self.prefix_event_offline = YList(self)
                        self._segment_path = lambda: "prefix-event-offlines"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rcmd.Isis.Instances.Instance.PrefixEventOfflines, [], name, value)


                    class PrefixEventOffline(Entity):
                        """
                        Offline operational data for particular ISIS
                        Prefix Event
                        
                        .. attribute:: event_id  <key>
                        
                        	Specific Event ID
                        	**type**\:  int
                        
                        	**range:** 1..4294967295
                        
                        .. attribute:: change_type
                        
                        	Event Add/Delete
                        	**type**\:   :py:class:`RcmdChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdChange>`
                        
                        .. attribute:: cost
                        
                        	Protocol route cost
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: ip_convergence_time
                        
                        	Convergence time for IP route programming
                        	**type**\:   :py:class:`IpConvergenceTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.IpConvergenceTime>`
                        
                        .. attribute:: ipfrr_event_id
                        
                        	Referenced IP\-FRR Event ID (0 \- Not Applicable)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: lsa_processed
                        
                        	List of LSAs processed
                        	**type**\: list of    :py:class:`LsaProcessed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.LsaProcessed>`
                        
                        .. attribute:: mpls_convergence_time
                        
                        	Convergence time for MPLS label programming
                        	**type**\:   :py:class:`MplsConvergenceTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.MplsConvergenceTime>`
                        
                        .. attribute:: path
                        
                        	Path information
                        	**type**\: list of    :py:class:`Path <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.Path>`
                        
                        .. attribute:: prefix
                        
                        	Prefix
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: prefix_lenth
                        
                        	Prefix length
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: priority
                        
                        	Event processed priority
                        	**type**\:   :py:class:`RcmdPriorityLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdPriorityLevel>`
                        
                        .. attribute:: route_path_change_type
                        
                        	Route Path Change Type
                        	**type**\:   :py:class:`RcmdShowRoutePathChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowRoutePathChange>`
                        
                        .. attribute:: route_type
                        
                        	Route Type intra/inter/l1/l2
                        	**type**\:   :py:class:`RcmdShowRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowRoute>`
                        
                        .. attribute:: spf_run_no
                        
                        	Referenced SPF Run No (0 \- Not Applicable)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: threshold_exceeded
                        
                        	Threshold exceeded
                        	**type**\:  bool
                        
                        .. attribute:: time_line
                        
                        	Timeline information
                        	**type**\: list of    :py:class:`TimeLine <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.TimeLine>`
                        
                        .. attribute:: trigger_lsa
                        
                        	LSA that triggered this event
                        	**type**\: list of    :py:class:`TriggerLsa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.TriggerLsa>`
                        
                        .. attribute:: trigger_time
                        
                        	Event trigger time
                        	**type**\:  str
                        
                        

                        """

                        _prefix = 'infra-rcmd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Rcmd.Isis.Instances.Instance.PrefixEventOfflines.PrefixEventOffline, self).__init__()

                            self.yang_name = "prefix-event-offline"
                            self.yang_parent_name = "prefix-event-offlines"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self._child_container_classes = {"ip-convergence-time" : ("ip_convergence_time", Rcmd.Isis.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.IpConvergenceTime), "mpls-convergence-time" : ("mpls_convergence_time", Rcmd.Isis.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.MplsConvergenceTime)}
                            self._child_list_classes = {"lsa-processed" : ("lsa_processed", Rcmd.Isis.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.LsaProcessed), "path" : ("path", Rcmd.Isis.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.Path), "time-line" : ("time_line", Rcmd.Isis.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.TimeLine), "trigger-lsa" : ("trigger_lsa", Rcmd.Isis.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.TriggerLsa)}

                            self.event_id = YLeaf(YType.uint32, "event-id")

                            self.change_type = YLeaf(YType.enumeration, "change-type")

                            self.cost = YLeaf(YType.uint32, "cost")

                            self.ipfrr_event_id = YLeaf(YType.uint32, "ipfrr-event-id")

                            self.prefix = YLeaf(YType.str, "prefix")

                            self.prefix_lenth = YLeaf(YType.uint32, "prefix-lenth")

                            self.priority = YLeaf(YType.enumeration, "priority")

                            self.route_path_change_type = YLeaf(YType.enumeration, "route-path-change-type")

                            self.route_type = YLeaf(YType.enumeration, "route-type")

                            self.spf_run_no = YLeaf(YType.uint32, "spf-run-no")

                            self.threshold_exceeded = YLeaf(YType.boolean, "threshold-exceeded")

                            self.trigger_time = YLeaf(YType.str, "trigger-time")

                            self.ip_convergence_time = Rcmd.Isis.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.IpConvergenceTime()
                            self.ip_convergence_time.parent = self
                            self._children_name_map["ip_convergence_time"] = "ip-convergence-time"
                            self._children_yang_names.add("ip-convergence-time")

                            self.mpls_convergence_time = Rcmd.Isis.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.MplsConvergenceTime()
                            self.mpls_convergence_time.parent = self
                            self._children_name_map["mpls_convergence_time"] = "mpls-convergence-time"
                            self._children_yang_names.add("mpls-convergence-time")

                            self.lsa_processed = YList(self)
                            self.path = YList(self)
                            self.time_line = YList(self)
                            self.trigger_lsa = YList(self)
                            self._segment_path = lambda: "prefix-event-offline" + "[event-id='" + self.event_id.get() + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rcmd.Isis.Instances.Instance.PrefixEventOfflines.PrefixEventOffline, ['event_id', 'change_type', 'cost', 'ipfrr_event_id', 'prefix', 'prefix_lenth', 'priority', 'route_path_change_type', 'route_type', 'spf_run_no', 'threshold_exceeded', 'trigger_time'], name, value)


                        class IpConvergenceTime(Entity):
                            """
                            Convergence time for IP route programming
                            
                            .. attribute:: fastest_node_name
                            
                            	Linecard node name which took the minimum time
                            	**type**\:  str
                            
                            .. attribute:: maximum_time
                            
                            	Maximum time(in seconds.milliseconds)
                            	**type**\:  str
                            
                            	**units**\: millisecond
                            
                            .. attribute:: minimum_time
                            
                            	Minimum time(in seconds.milliseconds)
                            	**type**\:  str
                            
                            	**units**\: millisecond
                            
                            .. attribute:: slowest_node_name
                            
                            	Linecard node name which took the maximum time
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Rcmd.Isis.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.IpConvergenceTime, self).__init__()

                                self.yang_name = "ip-convergence-time"
                                self.yang_parent_name = "prefix-event-offline"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {}

                                self.fastest_node_name = YLeaf(YType.str, "fastest-node-name")

                                self.maximum_time = YLeaf(YType.str, "maximum-time")

                                self.minimum_time = YLeaf(YType.str, "minimum-time")

                                self.slowest_node_name = YLeaf(YType.str, "slowest-node-name")
                                self._segment_path = lambda: "ip-convergence-time"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rcmd.Isis.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.IpConvergenceTime, ['fastest_node_name', 'maximum_time', 'minimum_time', 'slowest_node_name'], name, value)


                        class LsaProcessed(Entity):
                            """
                            List of LSAs processed
                            
                            .. attribute:: change_type
                            
                            	Add, Delete, Modify
                            	**type**\:   :py:class:`RcmdLsChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsChange>`
                            
                            .. attribute:: lsa_id
                            
                            	LSA ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: lsa_type
                            
                            	LSA type
                            	**type**\:   :py:class:`RcmdLsa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsa>`
                            
                            .. attribute:: origin_router_id
                            
                            	Originating Router ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: reception_time
                            
                            	Reception Time on router (in hh\:mm\:ss.msec)
                            	**type**\:  str
                            
                            .. attribute:: sequence_number
                            
                            	Sequence Number
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Rcmd.Isis.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.LsaProcessed, self).__init__()

                                self.yang_name = "lsa-processed"
                                self.yang_parent_name = "prefix-event-offline"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {}

                                self.change_type = YLeaf(YType.enumeration, "change-type")

                                self.lsa_id = YLeaf(YType.str, "lsa-id")

                                self.lsa_type = YLeaf(YType.enumeration, "lsa-type")

                                self.origin_router_id = YLeaf(YType.str, "origin-router-id")

                                self.reception_time = YLeaf(YType.str, "reception-time")

                                self.sequence_number = YLeaf(YType.str, "sequence-number")
                                self._segment_path = lambda: "lsa-processed"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rcmd.Isis.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.LsaProcessed, ['change_type', 'lsa_id', 'lsa_type', 'origin_router_id', 'reception_time', 'sequence_number'], name, value)


                        class MplsConvergenceTime(Entity):
                            """
                            Convergence time for MPLS label programming
                            
                            .. attribute:: fastest_node_name
                            
                            	Linecard node name which took the minimum time
                            	**type**\:  str
                            
                            .. attribute:: maximum_time
                            
                            	Maximum time(in seconds.milliseconds)
                            	**type**\:  str
                            
                            	**units**\: millisecond
                            
                            .. attribute:: minimum_time
                            
                            	Minimum time(in seconds.milliseconds)
                            	**type**\:  str
                            
                            	**units**\: millisecond
                            
                            .. attribute:: slowest_node_name
                            
                            	Linecard node name which took the maximum time
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Rcmd.Isis.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.MplsConvergenceTime, self).__init__()

                                self.yang_name = "mpls-convergence-time"
                                self.yang_parent_name = "prefix-event-offline"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {}

                                self.fastest_node_name = YLeaf(YType.str, "fastest-node-name")

                                self.maximum_time = YLeaf(YType.str, "maximum-time")

                                self.minimum_time = YLeaf(YType.str, "minimum-time")

                                self.slowest_node_name = YLeaf(YType.str, "slowest-node-name")
                                self._segment_path = lambda: "mpls-convergence-time"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rcmd.Isis.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.MplsConvergenceTime, ['fastest_node_name', 'maximum_time', 'minimum_time', 'slowest_node_name'], name, value)


                        class Path(Entity):
                            """
                            Path information
                            
                            .. attribute:: change_type
                            
                            	Event Add/Delete
                            	**type**\:   :py:class:`RcmdChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdChange>`
                            
                            .. attribute:: interface_name
                            
                            	Interface Name
                            	**type**\:  str
                            
                            .. attribute:: lfa_path
                            
                            	Backup Path Informatoin
                            	**type**\: list of    :py:class:`LfaPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.Path.LfaPath>`
                            
                            .. attribute:: neighbour_address
                            
                            	Nexthop Address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: path_metric
                            
                            	Path Metric
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Rcmd.Isis.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.Path, self).__init__()

                                self.yang_name = "path"
                                self.yang_parent_name = "prefix-event-offline"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {"lfa-path" : ("lfa_path", Rcmd.Isis.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.Path.LfaPath)}

                                self.change_type = YLeaf(YType.enumeration, "change-type")

                                self.interface_name = YLeaf(YType.str, "interface-name")

                                self.neighbour_address = YLeaf(YType.str, "neighbour-address")

                                self.path_metric = YLeaf(YType.uint32, "path-metric")

                                self.lfa_path = YList(self)
                                self._segment_path = lambda: "path"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rcmd.Isis.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.Path, ['change_type', 'interface_name', 'neighbour_address', 'path_metric'], name, value)


                            class LfaPath(Entity):
                                """
                                Backup Path Informatoin
                                
                                .. attribute:: change_type
                                
                                	Event Add/Delete
                                	**type**\:   :py:class:`RcmdChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdChange>`
                                
                                .. attribute:: interface_name
                                
                                	Interface Name
                                	**type**\:  str
                                
                                .. attribute:: lfa_type
                                
                                	Type of LFA
                                	**type**\:   :py:class:`RcmdShowIpfrrLfa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowIpfrrLfa>`
                                
                                .. attribute:: neighbour_address
                                
                                	Nexthop Address
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: path_metric
                                
                                	Path Metric
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: remote_node_id
                                
                                	Remote Node ID, in case of Remote LFA
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Rcmd.Isis.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.Path.LfaPath, self).__init__()

                                    self.yang_name = "lfa-path"
                                    self.yang_parent_name = "path"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {}
                                    self._child_list_classes = {}

                                    self.change_type = YLeaf(YType.enumeration, "change-type")

                                    self.interface_name = YLeaf(YType.str, "interface-name")

                                    self.lfa_type = YLeaf(YType.enumeration, "lfa-type")

                                    self.neighbour_address = YLeaf(YType.str, "neighbour-address")

                                    self.path_metric = YLeaf(YType.uint32, "path-metric")

                                    self.remote_node_id = YLeaf(YType.str, "remote-node-id")
                                    self._segment_path = lambda: "lfa-path"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Rcmd.Isis.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.Path.LfaPath, ['change_type', 'interface_name', 'lfa_type', 'neighbour_address', 'path_metric', 'remote_node_id'], name, value)


                        class TimeLine(Entity):
                            """
                            Timeline information
                            
                            .. attribute:: lc_ip
                            
                            	List of Linecards' completion point for IP routes
                            	**type**\: list of    :py:class:`LcIp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.TimeLine.LcIp>`
                            
                            .. attribute:: lc_mpls
                            
                            	List of Linecards' completion point for MPLS labels
                            	**type**\: list of    :py:class:`LcMpls <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.TimeLine.LcMpls>`
                            
                            .. attribute:: ldp_enter
                            
                            	Entry point of LDP
                            	**type**\:  str
                            
                            .. attribute:: ldp_exit
                            
                            	Exit point of LDP to LSD
                            	**type**\:  str
                            
                            .. attribute:: lsd_enter
                            
                            	Entry point of LSD
                            	**type**\:  str
                            
                            .. attribute:: lsd_exit
                            
                            	Exit point of LSD to FIBs
                            	**type**\:  str
                            
                            .. attribute:: ri_bv4_enter
                            
                            	Entry point of IPv4 RIB
                            	**type**\:  str
                            
                            .. attribute:: ri_bv4_exit
                            
                            	Exit point from IPv4 RIB to FIBs
                            	**type**\:  str
                            
                            .. attribute:: ri_bv4_redistribute
                            
                            	Route Redistribute point from IPv4 RIB to LDP
                            	**type**\:  str
                            
                            .. attribute:: route_origin
                            
                            	Route origin (routing protocol)
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Rcmd.Isis.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.TimeLine, self).__init__()

                                self.yang_name = "time-line"
                                self.yang_parent_name = "prefix-event-offline"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {"lc-ip" : ("lc_ip", Rcmd.Isis.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.TimeLine.LcIp), "lc-mpls" : ("lc_mpls", Rcmd.Isis.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.TimeLine.LcMpls)}

                                self.ldp_enter = YLeaf(YType.str, "ldp-enter")

                                self.ldp_exit = YLeaf(YType.str, "ldp-exit")

                                self.lsd_enter = YLeaf(YType.str, "lsd-enter")

                                self.lsd_exit = YLeaf(YType.str, "lsd-exit")

                                self.ri_bv4_enter = YLeaf(YType.str, "ri-bv4-enter")

                                self.ri_bv4_exit = YLeaf(YType.str, "ri-bv4-exit")

                                self.ri_bv4_redistribute = YLeaf(YType.str, "ri-bv4-redistribute")

                                self.route_origin = YLeaf(YType.str, "route-origin")

                                self.lc_ip = YList(self)
                                self.lc_mpls = YList(self)
                                self._segment_path = lambda: "time-line"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rcmd.Isis.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.TimeLine, ['ldp_enter', 'ldp_exit', 'lsd_enter', 'lsd_exit', 'ri_bv4_enter', 'ri_bv4_exit', 'ri_bv4_redistribute', 'route_origin'], name, value)


                            class LcIp(Entity):
                                """
                                List of Linecards' completion point for IP
                                routes
                                
                                .. attribute:: fib_complete
                                
                                	Completion point of FIB
                                	**type**\:  str
                                
                                .. attribute:: node_name
                                
                                	Linecard node name
                                	**type**\:  str
                                
                                .. attribute:: speed
                                
                                	Relative convergence speed
                                	**type**\:   :py:class:`RcmdLinecardSpeed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLinecardSpeed>`
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Rcmd.Isis.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.TimeLine.LcIp, self).__init__()

                                    self.yang_name = "lc-ip"
                                    self.yang_parent_name = "time-line"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {}
                                    self._child_list_classes = {}

                                    self.fib_complete = YLeaf(YType.str, "fib-complete")

                                    self.node_name = YLeaf(YType.str, "node-name")

                                    self.speed = YLeaf(YType.enumeration, "speed")
                                    self._segment_path = lambda: "lc-ip"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Rcmd.Isis.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.TimeLine.LcIp, ['fib_complete', 'node_name', 'speed'], name, value)


                            class LcMpls(Entity):
                                """
                                List of Linecards' completion point for MPLS
                                labels
                                
                                .. attribute:: fib_complete
                                
                                	Completion point of FIB
                                	**type**\:  str
                                
                                .. attribute:: node_name
                                
                                	Linecard node name
                                	**type**\:  str
                                
                                .. attribute:: speed
                                
                                	Relative convergence speed
                                	**type**\:   :py:class:`RcmdLinecardSpeed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLinecardSpeed>`
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Rcmd.Isis.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.TimeLine.LcMpls, self).__init__()

                                    self.yang_name = "lc-mpls"
                                    self.yang_parent_name = "time-line"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {}
                                    self._child_list_classes = {}

                                    self.fib_complete = YLeaf(YType.str, "fib-complete")

                                    self.node_name = YLeaf(YType.str, "node-name")

                                    self.speed = YLeaf(YType.enumeration, "speed")
                                    self._segment_path = lambda: "lc-mpls"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Rcmd.Isis.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.TimeLine.LcMpls, ['fib_complete', 'node_name', 'speed'], name, value)


                        class TriggerLsa(Entity):
                            """
                            LSA that triggered this event
                            
                            .. attribute:: change_type
                            
                            	Add, Delete, Modify
                            	**type**\:   :py:class:`RcmdLsChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsChange>`
                            
                            .. attribute:: lsa_id
                            
                            	LSA ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: lsa_type
                            
                            	LSA type
                            	**type**\:   :py:class:`RcmdLsa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsa>`
                            
                            .. attribute:: origin_router_id
                            
                            	Originating Router ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: reception_time
                            
                            	Reception Time on router (in hh\:mm\:ss.msec)
                            	**type**\:  str
                            
                            .. attribute:: sequence_number
                            
                            	Sequence Number
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Rcmd.Isis.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.TriggerLsa, self).__init__()

                                self.yang_name = "trigger-lsa"
                                self.yang_parent_name = "prefix-event-offline"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {}

                                self.change_type = YLeaf(YType.enumeration, "change-type")

                                self.lsa_id = YLeaf(YType.str, "lsa-id")

                                self.lsa_type = YLeaf(YType.enumeration, "lsa-type")

                                self.origin_router_id = YLeaf(YType.str, "origin-router-id")

                                self.reception_time = YLeaf(YType.str, "reception-time")

                                self.sequence_number = YLeaf(YType.str, "sequence-number")
                                self._segment_path = lambda: "trigger-lsa"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rcmd.Isis.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.TriggerLsa, ['change_type', 'lsa_id', 'lsa_type', 'origin_router_id', 'reception_time', 'sequence_number'], name, value)


                class PrefixEventStatistics(Entity):
                    """
                    ISIS Prefix events statistics data
                    
                    .. attribute:: prefix_event_statistic
                    
                    	Monitoring Statistics
                    	**type**\: list of    :py:class:`PrefixEventStatistic <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.PrefixEventStatistics.PrefixEventStatistic>`
                    
                    

                    """

                    _prefix = 'infra-rcmd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Rcmd.Isis.Instances.Instance.PrefixEventStatistics, self).__init__()

                        self.yang_name = "prefix-event-statistics"
                        self.yang_parent_name = "instance"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self._child_container_classes = {}
                        self._child_list_classes = {"prefix-event-statistic" : ("prefix_event_statistic", Rcmd.Isis.Instances.Instance.PrefixEventStatistics.PrefixEventStatistic)}

                        self.prefix_event_statistic = YList(self)
                        self._segment_path = lambda: "prefix-event-statistics"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rcmd.Isis.Instances.Instance.PrefixEventStatistics, [], name, value)


                    class PrefixEventStatistic(Entity):
                        """
                        Monitoring Statistics
                        
                        .. attribute:: prefix_info  <key>
                        
                        	Events with Prefix
                        	**type**\: one of the below types:
                        
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                        
                        
                        ----
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                        
                        
                        ----
                        .. attribute:: add_count
                        
                        	No. of times route gets Added
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: critical_priority
                        
                        	No. of times processed under Critical Priority
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: delete_count
                        
                        	No. of times route gets Deleted
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: high_priority
                        
                        	No. of times processed under High Priority
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: last_change_type
                        
                        	Last event Add/Delete
                        	**type**\:   :py:class:`RcmdChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdChange>`
                        
                        .. attribute:: last_cost
                        
                        	Last Known Cost
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: last_event_time
                        
                        	Last event trigger time
                        	**type**\:  str
                        
                        .. attribute:: last_priority
                        
                        	Last event processed priority
                        	**type**\:   :py:class:`RcmdPriorityLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdPriorityLevel>`
                        
                        .. attribute:: last_route_type
                        
                        	Last event Route Type
                        	**type**\:   :py:class:`RcmdShowRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowRoute>`
                        
                        .. attribute:: low_priority
                        
                        	No. of times processed under Low Priority
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: medium_priority
                        
                        	No. of times processed under Medium Priority
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: modify_count
                        
                        	No. of times route gets Deleted
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: prefix
                        
                        	Prefix
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: prefix_lenth
                        
                        	Prefix length
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: threshold_exceed_count
                        
                        	No. of times threshold got exceeded
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'infra-rcmd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Rcmd.Isis.Instances.Instance.PrefixEventStatistics.PrefixEventStatistic, self).__init__()

                            self.yang_name = "prefix-event-statistic"
                            self.yang_parent_name = "prefix-event-statistics"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self._child_container_classes = {}
                            self._child_list_classes = {}

                            self.prefix_info = YLeaf(YType.str, "prefix-info")

                            self.add_count = YLeaf(YType.uint32, "add-count")

                            self.critical_priority = YLeaf(YType.uint32, "critical-priority")

                            self.delete_count = YLeaf(YType.uint32, "delete-count")

                            self.high_priority = YLeaf(YType.uint32, "high-priority")

                            self.last_change_type = YLeaf(YType.enumeration, "last-change-type")

                            self.last_cost = YLeaf(YType.uint32, "last-cost")

                            self.last_event_time = YLeaf(YType.str, "last-event-time")

                            self.last_priority = YLeaf(YType.enumeration, "last-priority")

                            self.last_route_type = YLeaf(YType.enumeration, "last-route-type")

                            self.low_priority = YLeaf(YType.uint32, "low-priority")

                            self.medium_priority = YLeaf(YType.uint32, "medium-priority")

                            self.modify_count = YLeaf(YType.uint32, "modify-count")

                            self.prefix = YLeaf(YType.str, "prefix")

                            self.prefix_lenth = YLeaf(YType.uint32, "prefix-lenth")

                            self.threshold_exceed_count = YLeaf(YType.uint32, "threshold-exceed-count")
                            self._segment_path = lambda: "prefix-event-statistic" + "[prefix-info='" + self.prefix_info.get() + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rcmd.Isis.Instances.Instance.PrefixEventStatistics.PrefixEventStatistic, ['prefix_info', 'add_count', 'critical_priority', 'delete_count', 'high_priority', 'last_change_type', 'last_cost', 'last_event_time', 'last_priority', 'last_route_type', 'low_priority', 'medium_priority', 'modify_count', 'prefix', 'prefix_lenth', 'threshold_exceed_count'], name, value)


                class PrefixEventSummaries(Entity):
                    """
                    ISIS Prefix events summary data
                    
                    .. attribute:: prefix_event_summary
                    
                    	Prefix Event data
                    	**type**\: list of    :py:class:`PrefixEventSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.PrefixEventSummaries.PrefixEventSummary>`
                    
                    

                    """

                    _prefix = 'infra-rcmd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Rcmd.Isis.Instances.Instance.PrefixEventSummaries, self).__init__()

                        self.yang_name = "prefix-event-summaries"
                        self.yang_parent_name = "instance"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self._child_container_classes = {}
                        self._child_list_classes = {"prefix-event-summary" : ("prefix_event_summary", Rcmd.Isis.Instances.Instance.PrefixEventSummaries.PrefixEventSummary)}

                        self.prefix_event_summary = YList(self)
                        self._segment_path = lambda: "prefix-event-summaries"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rcmd.Isis.Instances.Instance.PrefixEventSummaries, [], name, value)


                    class PrefixEventSummary(Entity):
                        """
                        Prefix Event data
                        
                        .. attribute:: event_id  <key>
                        
                        	Specific Event ID
                        	**type**\:  int
                        
                        	**range:** 1..4294967295
                        
                        .. attribute:: change_type
                        
                        	Event Add/Delete
                        	**type**\:   :py:class:`RcmdChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdChange>`
                        
                        .. attribute:: cost
                        
                        	Protocol route cost
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: ip_convergence_time
                        
                        	Convergence time for IP route programming
                        	**type**\:   :py:class:`IpConvergenceTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.IpConvergenceTime>`
                        
                        .. attribute:: ipfrr_event_id
                        
                        	Referenced IP\-FRR Event ID (0 \- Not Applicable)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: lsa_processed
                        
                        	List of LSAs processed
                        	**type**\: list of    :py:class:`LsaProcessed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.LsaProcessed>`
                        
                        .. attribute:: mpls_convergence_time
                        
                        	Convergence time for MPLS label programming
                        	**type**\:   :py:class:`MplsConvergenceTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.MplsConvergenceTime>`
                        
                        .. attribute:: path
                        
                        	Path information
                        	**type**\: list of    :py:class:`Path <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.Path>`
                        
                        .. attribute:: prefix
                        
                        	Prefix
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: prefix_lenth
                        
                        	Prefix length
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: priority
                        
                        	Event processed priority
                        	**type**\:   :py:class:`RcmdPriorityLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdPriorityLevel>`
                        
                        .. attribute:: route_path_change_type
                        
                        	Route Path Change Type
                        	**type**\:   :py:class:`RcmdShowRoutePathChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowRoutePathChange>`
                        
                        .. attribute:: route_type
                        
                        	Route Type intra/inter/l1/l2
                        	**type**\:   :py:class:`RcmdShowRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowRoute>`
                        
                        .. attribute:: spf_run_no
                        
                        	Referenced SPF Run No (0 \- Not Applicable)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: threshold_exceeded
                        
                        	Threshold exceeded
                        	**type**\:  bool
                        
                        .. attribute:: time_line
                        
                        	Timeline information
                        	**type**\: list of    :py:class:`TimeLine <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.TimeLine>`
                        
                        .. attribute:: trigger_lsa
                        
                        	LSA that triggered this event
                        	**type**\: list of    :py:class:`TriggerLsa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.TriggerLsa>`
                        
                        .. attribute:: trigger_time
                        
                        	Event trigger time
                        	**type**\:  str
                        
                        

                        """

                        _prefix = 'infra-rcmd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Rcmd.Isis.Instances.Instance.PrefixEventSummaries.PrefixEventSummary, self).__init__()

                            self.yang_name = "prefix-event-summary"
                            self.yang_parent_name = "prefix-event-summaries"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self._child_container_classes = {"ip-convergence-time" : ("ip_convergence_time", Rcmd.Isis.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.IpConvergenceTime), "mpls-convergence-time" : ("mpls_convergence_time", Rcmd.Isis.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.MplsConvergenceTime)}
                            self._child_list_classes = {"lsa-processed" : ("lsa_processed", Rcmd.Isis.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.LsaProcessed), "path" : ("path", Rcmd.Isis.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.Path), "time-line" : ("time_line", Rcmd.Isis.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.TimeLine), "trigger-lsa" : ("trigger_lsa", Rcmd.Isis.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.TriggerLsa)}

                            self.event_id = YLeaf(YType.uint32, "event-id")

                            self.change_type = YLeaf(YType.enumeration, "change-type")

                            self.cost = YLeaf(YType.uint32, "cost")

                            self.ipfrr_event_id = YLeaf(YType.uint32, "ipfrr-event-id")

                            self.prefix = YLeaf(YType.str, "prefix")

                            self.prefix_lenth = YLeaf(YType.uint32, "prefix-lenth")

                            self.priority = YLeaf(YType.enumeration, "priority")

                            self.route_path_change_type = YLeaf(YType.enumeration, "route-path-change-type")

                            self.route_type = YLeaf(YType.enumeration, "route-type")

                            self.spf_run_no = YLeaf(YType.uint32, "spf-run-no")

                            self.threshold_exceeded = YLeaf(YType.boolean, "threshold-exceeded")

                            self.trigger_time = YLeaf(YType.str, "trigger-time")

                            self.ip_convergence_time = Rcmd.Isis.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.IpConvergenceTime()
                            self.ip_convergence_time.parent = self
                            self._children_name_map["ip_convergence_time"] = "ip-convergence-time"
                            self._children_yang_names.add("ip-convergence-time")

                            self.mpls_convergence_time = Rcmd.Isis.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.MplsConvergenceTime()
                            self.mpls_convergence_time.parent = self
                            self._children_name_map["mpls_convergence_time"] = "mpls-convergence-time"
                            self._children_yang_names.add("mpls-convergence-time")

                            self.lsa_processed = YList(self)
                            self.path = YList(self)
                            self.time_line = YList(self)
                            self.trigger_lsa = YList(self)
                            self._segment_path = lambda: "prefix-event-summary" + "[event-id='" + self.event_id.get() + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rcmd.Isis.Instances.Instance.PrefixEventSummaries.PrefixEventSummary, ['event_id', 'change_type', 'cost', 'ipfrr_event_id', 'prefix', 'prefix_lenth', 'priority', 'route_path_change_type', 'route_type', 'spf_run_no', 'threshold_exceeded', 'trigger_time'], name, value)


                        class IpConvergenceTime(Entity):
                            """
                            Convergence time for IP route programming
                            
                            .. attribute:: fastest_node_name
                            
                            	Linecard node name which took the minimum time
                            	**type**\:  str
                            
                            .. attribute:: maximum_time
                            
                            	Maximum time(in seconds.milliseconds)
                            	**type**\:  str
                            
                            	**units**\: millisecond
                            
                            .. attribute:: minimum_time
                            
                            	Minimum time(in seconds.milliseconds)
                            	**type**\:  str
                            
                            	**units**\: millisecond
                            
                            .. attribute:: slowest_node_name
                            
                            	Linecard node name which took the maximum time
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Rcmd.Isis.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.IpConvergenceTime, self).__init__()

                                self.yang_name = "ip-convergence-time"
                                self.yang_parent_name = "prefix-event-summary"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {}

                                self.fastest_node_name = YLeaf(YType.str, "fastest-node-name")

                                self.maximum_time = YLeaf(YType.str, "maximum-time")

                                self.minimum_time = YLeaf(YType.str, "minimum-time")

                                self.slowest_node_name = YLeaf(YType.str, "slowest-node-name")
                                self._segment_path = lambda: "ip-convergence-time"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rcmd.Isis.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.IpConvergenceTime, ['fastest_node_name', 'maximum_time', 'minimum_time', 'slowest_node_name'], name, value)


                        class LsaProcessed(Entity):
                            """
                            List of LSAs processed
                            
                            .. attribute:: change_type
                            
                            	Add, Delete, Modify
                            	**type**\:   :py:class:`RcmdLsChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsChange>`
                            
                            .. attribute:: lsa_id
                            
                            	LSA ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: lsa_type
                            
                            	LSA type
                            	**type**\:   :py:class:`RcmdLsa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsa>`
                            
                            .. attribute:: origin_router_id
                            
                            	Originating Router ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: reception_time
                            
                            	Reception Time on router (in hh\:mm\:ss.msec)
                            	**type**\:  str
                            
                            .. attribute:: sequence_number
                            
                            	Sequence Number
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Rcmd.Isis.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.LsaProcessed, self).__init__()

                                self.yang_name = "lsa-processed"
                                self.yang_parent_name = "prefix-event-summary"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {}

                                self.change_type = YLeaf(YType.enumeration, "change-type")

                                self.lsa_id = YLeaf(YType.str, "lsa-id")

                                self.lsa_type = YLeaf(YType.enumeration, "lsa-type")

                                self.origin_router_id = YLeaf(YType.str, "origin-router-id")

                                self.reception_time = YLeaf(YType.str, "reception-time")

                                self.sequence_number = YLeaf(YType.str, "sequence-number")
                                self._segment_path = lambda: "lsa-processed"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rcmd.Isis.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.LsaProcessed, ['change_type', 'lsa_id', 'lsa_type', 'origin_router_id', 'reception_time', 'sequence_number'], name, value)


                        class MplsConvergenceTime(Entity):
                            """
                            Convergence time for MPLS label programming
                            
                            .. attribute:: fastest_node_name
                            
                            	Linecard node name which took the minimum time
                            	**type**\:  str
                            
                            .. attribute:: maximum_time
                            
                            	Maximum time(in seconds.milliseconds)
                            	**type**\:  str
                            
                            	**units**\: millisecond
                            
                            .. attribute:: minimum_time
                            
                            	Minimum time(in seconds.milliseconds)
                            	**type**\:  str
                            
                            	**units**\: millisecond
                            
                            .. attribute:: slowest_node_name
                            
                            	Linecard node name which took the maximum time
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Rcmd.Isis.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.MplsConvergenceTime, self).__init__()

                                self.yang_name = "mpls-convergence-time"
                                self.yang_parent_name = "prefix-event-summary"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {}

                                self.fastest_node_name = YLeaf(YType.str, "fastest-node-name")

                                self.maximum_time = YLeaf(YType.str, "maximum-time")

                                self.minimum_time = YLeaf(YType.str, "minimum-time")

                                self.slowest_node_name = YLeaf(YType.str, "slowest-node-name")
                                self._segment_path = lambda: "mpls-convergence-time"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rcmd.Isis.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.MplsConvergenceTime, ['fastest_node_name', 'maximum_time', 'minimum_time', 'slowest_node_name'], name, value)


                        class Path(Entity):
                            """
                            Path information
                            
                            .. attribute:: change_type
                            
                            	Event Add/Delete
                            	**type**\:   :py:class:`RcmdChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdChange>`
                            
                            .. attribute:: interface_name
                            
                            	Interface Name
                            	**type**\:  str
                            
                            .. attribute:: lfa_path
                            
                            	Backup Path Informatoin
                            	**type**\: list of    :py:class:`LfaPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.Path.LfaPath>`
                            
                            .. attribute:: neighbour_address
                            
                            	Nexthop Address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: path_metric
                            
                            	Path Metric
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Rcmd.Isis.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.Path, self).__init__()

                                self.yang_name = "path"
                                self.yang_parent_name = "prefix-event-summary"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {"lfa-path" : ("lfa_path", Rcmd.Isis.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.Path.LfaPath)}

                                self.change_type = YLeaf(YType.enumeration, "change-type")

                                self.interface_name = YLeaf(YType.str, "interface-name")

                                self.neighbour_address = YLeaf(YType.str, "neighbour-address")

                                self.path_metric = YLeaf(YType.uint32, "path-metric")

                                self.lfa_path = YList(self)
                                self._segment_path = lambda: "path"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rcmd.Isis.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.Path, ['change_type', 'interface_name', 'neighbour_address', 'path_metric'], name, value)


                            class LfaPath(Entity):
                                """
                                Backup Path Informatoin
                                
                                .. attribute:: change_type
                                
                                	Event Add/Delete
                                	**type**\:   :py:class:`RcmdChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdChange>`
                                
                                .. attribute:: interface_name
                                
                                	Interface Name
                                	**type**\:  str
                                
                                .. attribute:: lfa_type
                                
                                	Type of LFA
                                	**type**\:   :py:class:`RcmdShowIpfrrLfa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowIpfrrLfa>`
                                
                                .. attribute:: neighbour_address
                                
                                	Nexthop Address
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: path_metric
                                
                                	Path Metric
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: remote_node_id
                                
                                	Remote Node ID, in case of Remote LFA
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Rcmd.Isis.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.Path.LfaPath, self).__init__()

                                    self.yang_name = "lfa-path"
                                    self.yang_parent_name = "path"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {}
                                    self._child_list_classes = {}

                                    self.change_type = YLeaf(YType.enumeration, "change-type")

                                    self.interface_name = YLeaf(YType.str, "interface-name")

                                    self.lfa_type = YLeaf(YType.enumeration, "lfa-type")

                                    self.neighbour_address = YLeaf(YType.str, "neighbour-address")

                                    self.path_metric = YLeaf(YType.uint32, "path-metric")

                                    self.remote_node_id = YLeaf(YType.str, "remote-node-id")
                                    self._segment_path = lambda: "lfa-path"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Rcmd.Isis.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.Path.LfaPath, ['change_type', 'interface_name', 'lfa_type', 'neighbour_address', 'path_metric', 'remote_node_id'], name, value)


                        class TimeLine(Entity):
                            """
                            Timeline information
                            
                            .. attribute:: lc_ip
                            
                            	List of Linecards' completion point for IP routes
                            	**type**\: list of    :py:class:`LcIp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.TimeLine.LcIp>`
                            
                            .. attribute:: lc_mpls
                            
                            	List of Linecards' completion point for MPLS labels
                            	**type**\: list of    :py:class:`LcMpls <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.TimeLine.LcMpls>`
                            
                            .. attribute:: ldp_enter
                            
                            	Entry point of LDP
                            	**type**\:  str
                            
                            .. attribute:: ldp_exit
                            
                            	Exit point of LDP to LSD
                            	**type**\:  str
                            
                            .. attribute:: lsd_enter
                            
                            	Entry point of LSD
                            	**type**\:  str
                            
                            .. attribute:: lsd_exit
                            
                            	Exit point of LSD to FIBs
                            	**type**\:  str
                            
                            .. attribute:: ri_bv4_enter
                            
                            	Entry point of IPv4 RIB
                            	**type**\:  str
                            
                            .. attribute:: ri_bv4_exit
                            
                            	Exit point from IPv4 RIB to FIBs
                            	**type**\:  str
                            
                            .. attribute:: ri_bv4_redistribute
                            
                            	Route Redistribute point from IPv4 RIB to LDP
                            	**type**\:  str
                            
                            .. attribute:: route_origin
                            
                            	Route origin (routing protocol)
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Rcmd.Isis.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.TimeLine, self).__init__()

                                self.yang_name = "time-line"
                                self.yang_parent_name = "prefix-event-summary"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {"lc-ip" : ("lc_ip", Rcmd.Isis.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.TimeLine.LcIp), "lc-mpls" : ("lc_mpls", Rcmd.Isis.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.TimeLine.LcMpls)}

                                self.ldp_enter = YLeaf(YType.str, "ldp-enter")

                                self.ldp_exit = YLeaf(YType.str, "ldp-exit")

                                self.lsd_enter = YLeaf(YType.str, "lsd-enter")

                                self.lsd_exit = YLeaf(YType.str, "lsd-exit")

                                self.ri_bv4_enter = YLeaf(YType.str, "ri-bv4-enter")

                                self.ri_bv4_exit = YLeaf(YType.str, "ri-bv4-exit")

                                self.ri_bv4_redistribute = YLeaf(YType.str, "ri-bv4-redistribute")

                                self.route_origin = YLeaf(YType.str, "route-origin")

                                self.lc_ip = YList(self)
                                self.lc_mpls = YList(self)
                                self._segment_path = lambda: "time-line"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rcmd.Isis.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.TimeLine, ['ldp_enter', 'ldp_exit', 'lsd_enter', 'lsd_exit', 'ri_bv4_enter', 'ri_bv4_exit', 'ri_bv4_redistribute', 'route_origin'], name, value)


                            class LcIp(Entity):
                                """
                                List of Linecards' completion point for IP
                                routes
                                
                                .. attribute:: fib_complete
                                
                                	Completion point of FIB
                                	**type**\:  str
                                
                                .. attribute:: node_name
                                
                                	Linecard node name
                                	**type**\:  str
                                
                                .. attribute:: speed
                                
                                	Relative convergence speed
                                	**type**\:   :py:class:`RcmdLinecardSpeed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLinecardSpeed>`
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Rcmd.Isis.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.TimeLine.LcIp, self).__init__()

                                    self.yang_name = "lc-ip"
                                    self.yang_parent_name = "time-line"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {}
                                    self._child_list_classes = {}

                                    self.fib_complete = YLeaf(YType.str, "fib-complete")

                                    self.node_name = YLeaf(YType.str, "node-name")

                                    self.speed = YLeaf(YType.enumeration, "speed")
                                    self._segment_path = lambda: "lc-ip"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Rcmd.Isis.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.TimeLine.LcIp, ['fib_complete', 'node_name', 'speed'], name, value)


                            class LcMpls(Entity):
                                """
                                List of Linecards' completion point for MPLS
                                labels
                                
                                .. attribute:: fib_complete
                                
                                	Completion point of FIB
                                	**type**\:  str
                                
                                .. attribute:: node_name
                                
                                	Linecard node name
                                	**type**\:  str
                                
                                .. attribute:: speed
                                
                                	Relative convergence speed
                                	**type**\:   :py:class:`RcmdLinecardSpeed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLinecardSpeed>`
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Rcmd.Isis.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.TimeLine.LcMpls, self).__init__()

                                    self.yang_name = "lc-mpls"
                                    self.yang_parent_name = "time-line"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {}
                                    self._child_list_classes = {}

                                    self.fib_complete = YLeaf(YType.str, "fib-complete")

                                    self.node_name = YLeaf(YType.str, "node-name")

                                    self.speed = YLeaf(YType.enumeration, "speed")
                                    self._segment_path = lambda: "lc-mpls"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Rcmd.Isis.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.TimeLine.LcMpls, ['fib_complete', 'node_name', 'speed'], name, value)


                        class TriggerLsa(Entity):
                            """
                            LSA that triggered this event
                            
                            .. attribute:: change_type
                            
                            	Add, Delete, Modify
                            	**type**\:   :py:class:`RcmdLsChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsChange>`
                            
                            .. attribute:: lsa_id
                            
                            	LSA ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: lsa_type
                            
                            	LSA type
                            	**type**\:   :py:class:`RcmdLsa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsa>`
                            
                            .. attribute:: origin_router_id
                            
                            	Originating Router ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: reception_time
                            
                            	Reception Time on router (in hh\:mm\:ss.msec)
                            	**type**\:  str
                            
                            .. attribute:: sequence_number
                            
                            	Sequence Number
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Rcmd.Isis.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.TriggerLsa, self).__init__()

                                self.yang_name = "trigger-lsa"
                                self.yang_parent_name = "prefix-event-summary"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {}

                                self.change_type = YLeaf(YType.enumeration, "change-type")

                                self.lsa_id = YLeaf(YType.str, "lsa-id")

                                self.lsa_type = YLeaf(YType.enumeration, "lsa-type")

                                self.origin_router_id = YLeaf(YType.str, "origin-router-id")

                                self.reception_time = YLeaf(YType.str, "reception-time")

                                self.sequence_number = YLeaf(YType.str, "sequence-number")
                                self._segment_path = lambda: "trigger-lsa"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rcmd.Isis.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.TriggerLsa, ['change_type', 'lsa_id', 'lsa_type', 'origin_router_id', 'reception_time', 'sequence_number'], name, value)


                class SpfRunOfflines(Entity):
                    """
                    ISIS SPF run offline data
                    
                    .. attribute:: spf_run_offline
                    
                    	Offline operational data for particular ISIS SPF run
                    	**type**\: list of    :py:class:`SpfRunOffline <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline>`
                    
                    

                    """

                    _prefix = 'infra-rcmd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Rcmd.Isis.Instances.Instance.SpfRunOfflines, self).__init__()

                        self.yang_name = "spf-run-offlines"
                        self.yang_parent_name = "instance"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self._child_container_classes = {}
                        self._child_list_classes = {"spf-run-offline" : ("spf_run_offline", Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline)}

                        self.spf_run_offline = YList(self)
                        self._segment_path = lambda: "spf-run-offlines"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rcmd.Isis.Instances.Instance.SpfRunOfflines, [], name, value)


                    class SpfRunOffline(Entity):
                        """
                        Offline operational data for particular ISIS
                        SPF run
                        
                        .. attribute:: spf_run_number  <key>
                        
                        	Specific SPF run
                        	**type**\:  int
                        
                        	**range:** 1..4294967295
                        
                        .. attribute:: lsp_processed
                        
                        	List of LSP changes processed
                        	**type**\: list of    :py:class:`LspProcessed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.LspProcessed>`
                        
                        .. attribute:: lsp_regenerated
                        
                        	List of LSP regenerated
                        	**type**\: list of    :py:class:`LspRegenerated <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.LspRegenerated>`
                        
                        .. attribute:: node_statistics
                        
                        	SPF Node statistics
                        	**type**\:   :py:class:`NodeStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.NodeStatistics>`
                        
                        .. attribute:: priority
                        
                        	Convergence information on per\-priority basis
                        	**type**\: list of    :py:class:`Priority <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority>`
                        
                        .. attribute:: reason
                        
                        	Trigger reasons for SPF run. Example\: pr^ \- periodic, cr^ \- clear (Check the documentation for the entire list)
                        	**type**\:  str
                        
                        .. attribute:: spf_summary
                        
                        	SPF summary information
                        	**type**\:   :py:class:`SpfSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary>`
                        
                        .. attribute:: start_time
                        
                        	Start time (offset from event trigger time in ss .msec)
                        	**type**\:  str
                        
                        .. attribute:: trigger_lsp
                        
                        	Trigger LSP
                        	**type**\: list of    :py:class:`TriggerLsp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.TriggerLsp>`
                        
                        .. attribute:: wait_time
                        
                        	Wait time applied at SPF schedule (in msec)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'infra-rcmd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline, self).__init__()

                            self.yang_name = "spf-run-offline"
                            self.yang_parent_name = "spf-run-offlines"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self._child_container_classes = {"node-statistics" : ("node_statistics", Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.NodeStatistics), "spf-summary" : ("spf_summary", Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary)}
                            self._child_list_classes = {"lsp-processed" : ("lsp_processed", Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.LspProcessed), "lsp-regenerated" : ("lsp_regenerated", Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.LspRegenerated), "priority" : ("priority", Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority), "trigger-lsp" : ("trigger_lsp", Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.TriggerLsp)}

                            self.spf_run_number = YLeaf(YType.uint32, "spf-run-number")

                            self.reason = YLeaf(YType.str, "reason")

                            self.start_time = YLeaf(YType.str, "start-time")

                            self.wait_time = YLeaf(YType.uint32, "wait-time")

                            self.node_statistics = Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.NodeStatistics()
                            self.node_statistics.parent = self
                            self._children_name_map["node_statistics"] = "node-statistics"
                            self._children_yang_names.add("node-statistics")

                            self.spf_summary = Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary()
                            self.spf_summary.parent = self
                            self._children_name_map["spf_summary"] = "spf-summary"
                            self._children_yang_names.add("spf-summary")

                            self.lsp_processed = YList(self)
                            self.lsp_regenerated = YList(self)
                            self.priority = YList(self)
                            self.trigger_lsp = YList(self)
                            self._segment_path = lambda: "spf-run-offline" + "[spf-run-number='" + self.spf_run_number.get() + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline, ['spf_run_number', 'reason', 'start_time', 'wait_time'], name, value)


                        class LspProcessed(Entity):
                            """
                            List of LSP changes processed
                            
                            .. attribute:: change_type
                            
                            	Add, Delete, Modify
                            	**type**\:   :py:class:`RcmdLsChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsChange>`
                            
                            .. attribute:: lsp_id
                            
                            	LSP ID
                            	**type**\:  str
                            
                            .. attribute:: reception_time
                            
                            	Reception Time on router (in hh\:mm\:ss.msec)
                            	**type**\:  str
                            
                            .. attribute:: sequence_number
                            
                            	Sequence Number
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.LspProcessed, self).__init__()

                                self.yang_name = "lsp-processed"
                                self.yang_parent_name = "spf-run-offline"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {}

                                self.change_type = YLeaf(YType.enumeration, "change-type")

                                self.lsp_id = YLeaf(YType.str, "lsp-id")

                                self.reception_time = YLeaf(YType.str, "reception-time")

                                self.sequence_number = YLeaf(YType.uint32, "sequence-number")
                                self._segment_path = lambda: "lsp-processed"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.LspProcessed, ['change_type', 'lsp_id', 'reception_time', 'sequence_number'], name, value)


                        class LspRegenerated(Entity):
                            """
                            List of LSP regenerated
                            
                            .. attribute:: isis_level
                            
                            	ISIS Level
                            	**type**\:   :py:class:`RcmdIsisLvl <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdIsisLvl>`
                            
                            .. attribute:: lsp_id
                            
                            	LSP ID
                            	**type**\:  str
                            
                            .. attribute:: reason
                            
                            	Trigger reasons for LSP regeneration. Example\: pr^ \- periodic, cr^ \- clear (Check the documentation for the entire list)
                            	**type**\:  str
                            
                            .. attribute:: reception_time
                            
                            	Reception Time on router (in hh\:mm\:ss.msec)
                            	**type**\:  str
                            
                            .. attribute:: sequence_number
                            
                            	Sequence Number
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: serial_number_xr
                            
                            	Serial Number of the session event
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: spf_run_number
                            
                            	SPF Run Number
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.LspRegenerated, self).__init__()

                                self.yang_name = "lsp-regenerated"
                                self.yang_parent_name = "spf-run-offline"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {}

                                self.isis_level = YLeaf(YType.enumeration, "isis-level")

                                self.lsp_id = YLeaf(YType.str, "lsp-id")

                                self.reason = YLeaf(YType.str, "reason")

                                self.reception_time = YLeaf(YType.str, "reception-time")

                                self.sequence_number = YLeaf(YType.uint32, "sequence-number")

                                self.serial_number_xr = YLeaf(YType.uint32, "serial-number-xr")

                                self.spf_run_number = YLeaf(YType.uint32, "spf-run-number")
                                self._segment_path = lambda: "lsp-regenerated"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.LspRegenerated, ['isis_level', 'lsp_id', 'reason', 'reception_time', 'sequence_number', 'serial_number_xr', 'spf_run_number'], name, value)


                        class NodeStatistics(Entity):
                            """
                            SPF Node statistics
                            
                            .. attribute:: adds
                            
                            	Added
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: deletes
                            
                            	Deleted
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: modifies
                            
                            	Modified
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: reachables
                            
                            	Reachable
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: touches
                            
                            	Touched
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: unreachables
                            
                            	Unreachable
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.NodeStatistics, self).__init__()

                                self.yang_name = "node-statistics"
                                self.yang_parent_name = "spf-run-offline"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {}

                                self.adds = YLeaf(YType.uint32, "adds")

                                self.deletes = YLeaf(YType.uint32, "deletes")

                                self.modifies = YLeaf(YType.uint32, "modifies")

                                self.reachables = YLeaf(YType.uint32, "reachables")

                                self.touches = YLeaf(YType.uint32, "touches")

                                self.unreachables = YLeaf(YType.uint32, "unreachables")
                                self._segment_path = lambda: "node-statistics"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.NodeStatistics, ['adds', 'deletes', 'modifies', 'reachables', 'touches', 'unreachables'], name, value)


                        class Priority(Entity):
                            """
                            Convergence information on per\-priority basis
                            
                            .. attribute:: convergence_timeline
                            
                            	Convergence timeline details
                            	**type**\: list of    :py:class:`ConvergenceTimeline <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline>`
                            
                            .. attribute:: leaf_networks_added
                            
                            	List of Leaf Networks Added
                            	**type**\: list of    :py:class:`LeafNetworksAdded <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.LeafNetworksAdded>`
                            
                            .. attribute:: leaf_networks_deleted
                            
                            	List of Leaf Networks Deleted
                            	**type**\: list of    :py:class:`LeafNetworksDeleted <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.LeafNetworksDeleted>`
                            
                            .. attribute:: priority_summary
                            
                            	Summary of the priority
                            	**type**\:   :py:class:`PrioritySummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.PrioritySummary>`
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority, self).__init__()

                                self.yang_name = "priority"
                                self.yang_parent_name = "spf-run-offline"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {"priority-summary" : ("priority_summary", Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.PrioritySummary)}
                                self._child_list_classes = {"convergence-timeline" : ("convergence_timeline", Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline), "leaf-networks-added" : ("leaf_networks_added", Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.LeafNetworksAdded), "leaf-networks-deleted" : ("leaf_networks_deleted", Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.LeafNetworksDeleted)}

                                self.priority_summary = Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.PrioritySummary()
                                self.priority_summary.parent = self
                                self._children_name_map["priority_summary"] = "priority-summary"
                                self._children_yang_names.add("priority-summary")

                                self.convergence_timeline = YList(self)
                                self.leaf_networks_added = YList(self)
                                self.leaf_networks_deleted = YList(self)
                                self._segment_path = lambda: "priority"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority, [], name, value)


                            class ConvergenceTimeline(Entity):
                                """
                                Convergence timeline details
                                
                                .. attribute:: lc_ip
                                
                                	List of Linecards' completion point for IP routes
                                	**type**\: list of    :py:class:`LcIp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.LcIp>`
                                
                                .. attribute:: lc_mpls
                                
                                	List of Linecards' completion point for MPLS labels
                                	**type**\: list of    :py:class:`LcMpls <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.LcMpls>`
                                
                                .. attribute:: ldp_enter
                                
                                	Entry point of LDP
                                	**type**\:   :py:class:`LdpEnter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.LdpEnter>`
                                
                                .. attribute:: ldp_exit
                                
                                	Exit point of LDP to LSD
                                	**type**\:   :py:class:`LdpExit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.LdpExit>`
                                
                                .. attribute:: lsd_enter
                                
                                	Entry point of LSD
                                	**type**\:   :py:class:`LsdEnter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.LsdEnter>`
                                
                                .. attribute:: lsd_exit
                                
                                	Exit point of LSD to FIBs
                                	**type**\:   :py:class:`LsdExit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.LsdExit>`
                                
                                .. attribute:: ri_bv4_enter
                                
                                	Entry point of IPv4 RIB
                                	**type**\:   :py:class:`RiBv4Enter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.RiBv4Enter>`
                                
                                .. attribute:: ri_bv4_exit
                                
                                	Exit point from IPv4 RIB to FIBs
                                	**type**\:   :py:class:`RiBv4Exit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.RiBv4Exit>`
                                
                                .. attribute:: ri_bv4_redistribute
                                
                                	Route Redistribute point from IPv4 RIB to LDP
                                	**type**\:   :py:class:`RiBv4Redistribute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.RiBv4Redistribute>`
                                
                                .. attribute:: route_origin
                                
                                	Route origin (routing protocol)
                                	**type**\:   :py:class:`RouteOrigin <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.RouteOrigin>`
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline, self).__init__()

                                    self.yang_name = "convergence-timeline"
                                    self.yang_parent_name = "priority"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {"ldp-enter" : ("ldp_enter", Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.LdpEnter), "ldp-exit" : ("ldp_exit", Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.LdpExit), "lsd-enter" : ("lsd_enter", Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.LsdEnter), "lsd-exit" : ("lsd_exit", Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.LsdExit), "ri-bv4-enter" : ("ri_bv4_enter", Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.RiBv4Enter), "ri-bv4-exit" : ("ri_bv4_exit", Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.RiBv4Exit), "ri-bv4-redistribute" : ("ri_bv4_redistribute", Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.RiBv4Redistribute), "route-origin" : ("route_origin", Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.RouteOrigin)}
                                    self._child_list_classes = {"lc-ip" : ("lc_ip", Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.LcIp), "lc-mpls" : ("lc_mpls", Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.LcMpls)}

                                    self.ldp_enter = Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.LdpEnter()
                                    self.ldp_enter.parent = self
                                    self._children_name_map["ldp_enter"] = "ldp-enter"
                                    self._children_yang_names.add("ldp-enter")

                                    self.ldp_exit = Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.LdpExit()
                                    self.ldp_exit.parent = self
                                    self._children_name_map["ldp_exit"] = "ldp-exit"
                                    self._children_yang_names.add("ldp-exit")

                                    self.lsd_enter = Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.LsdEnter()
                                    self.lsd_enter.parent = self
                                    self._children_name_map["lsd_enter"] = "lsd-enter"
                                    self._children_yang_names.add("lsd-enter")

                                    self.lsd_exit = Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.LsdExit()
                                    self.lsd_exit.parent = self
                                    self._children_name_map["lsd_exit"] = "lsd-exit"
                                    self._children_yang_names.add("lsd-exit")

                                    self.ri_bv4_enter = Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.RiBv4Enter()
                                    self.ri_bv4_enter.parent = self
                                    self._children_name_map["ri_bv4_enter"] = "ri-bv4-enter"
                                    self._children_yang_names.add("ri-bv4-enter")

                                    self.ri_bv4_exit = Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.RiBv4Exit()
                                    self.ri_bv4_exit.parent = self
                                    self._children_name_map["ri_bv4_exit"] = "ri-bv4-exit"
                                    self._children_yang_names.add("ri-bv4-exit")

                                    self.ri_bv4_redistribute = Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.RiBv4Redistribute()
                                    self.ri_bv4_redistribute.parent = self
                                    self._children_name_map["ri_bv4_redistribute"] = "ri-bv4-redistribute"
                                    self._children_yang_names.add("ri-bv4-redistribute")

                                    self.route_origin = Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.RouteOrigin()
                                    self.route_origin.parent = self
                                    self._children_name_map["route_origin"] = "route-origin"
                                    self._children_yang_names.add("route-origin")

                                    self.lc_ip = YList(self)
                                    self.lc_mpls = YList(self)
                                    self._segment_path = lambda: "convergence-timeline"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline, [], name, value)


                                class LcIp(Entity):
                                    """
                                    List of Linecards' completion point for IP
                                    routes
                                    
                                    .. attribute:: fib_complete
                                    
                                    	Completion point of FIB
                                    	**type**\:   :py:class:`FibComplete <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.LcIp.FibComplete>`
                                    
                                    .. attribute:: node_name
                                    
                                    	Linecard node name
                                    	**type**\:  str
                                    
                                    .. attribute:: speed
                                    
                                    	Relative convergence speed
                                    	**type**\:   :py:class:`RcmdLinecardSpeed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLinecardSpeed>`
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.LcIp, self).__init__()

                                        self.yang_name = "lc-ip"
                                        self.yang_parent_name = "convergence-timeline"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {"fib-complete" : ("fib_complete", Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.LcIp.FibComplete)}
                                        self._child_list_classes = {}

                                        self.node_name = YLeaf(YType.str, "node-name")

                                        self.speed = YLeaf(YType.enumeration, "speed")

                                        self.fib_complete = Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.LcIp.FibComplete()
                                        self.fib_complete.parent = self
                                        self._children_name_map["fib_complete"] = "fib-complete"
                                        self._children_yang_names.add("fib-complete")
                                        self._segment_path = lambda: "lc-ip"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.LcIp, ['node_name', 'speed'], name, value)


                                    class FibComplete(Entity):
                                        """
                                        Completion point of FIB
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.LcIp.FibComplete, self).__init__()

                                            self.yang_name = "fib-complete"
                                            self.yang_parent_name = "lc-ip"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.duration = YLeaf(YType.str, "duration")

                                            self.end_time = YLeaf(YType.str, "end-time")

                                            self.start_time = YLeaf(YType.str, "start-time")
                                            self._segment_path = lambda: "fib-complete"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.LcIp.FibComplete, ['duration', 'end_time', 'start_time'], name, value)


                                class LcMpls(Entity):
                                    """
                                    List of Linecards' completion point for MPLS
                                    labels
                                    
                                    .. attribute:: fib_complete
                                    
                                    	Completion point of FIB
                                    	**type**\:   :py:class:`FibComplete <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.LcMpls.FibComplete>`
                                    
                                    .. attribute:: node_name
                                    
                                    	Linecard node name
                                    	**type**\:  str
                                    
                                    .. attribute:: speed
                                    
                                    	Relative convergence speed
                                    	**type**\:   :py:class:`RcmdLinecardSpeed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLinecardSpeed>`
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.LcMpls, self).__init__()

                                        self.yang_name = "lc-mpls"
                                        self.yang_parent_name = "convergence-timeline"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {"fib-complete" : ("fib_complete", Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.LcMpls.FibComplete)}
                                        self._child_list_classes = {}

                                        self.node_name = YLeaf(YType.str, "node-name")

                                        self.speed = YLeaf(YType.enumeration, "speed")

                                        self.fib_complete = Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.LcMpls.FibComplete()
                                        self.fib_complete.parent = self
                                        self._children_name_map["fib_complete"] = "fib-complete"
                                        self._children_yang_names.add("fib-complete")
                                        self._segment_path = lambda: "lc-mpls"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.LcMpls, ['node_name', 'speed'], name, value)


                                    class FibComplete(Entity):
                                        """
                                        Completion point of FIB
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.LcMpls.FibComplete, self).__init__()

                                            self.yang_name = "fib-complete"
                                            self.yang_parent_name = "lc-mpls"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.duration = YLeaf(YType.str, "duration")

                                            self.end_time = YLeaf(YType.str, "end-time")

                                            self.start_time = YLeaf(YType.str, "start-time")
                                            self._segment_path = lambda: "fib-complete"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.LcMpls.FibComplete, ['duration', 'end_time', 'start_time'], name, value)


                                class LdpEnter(Entity):
                                    """
                                    Entry point of LDP
                                    
                                    .. attribute:: duration
                                    
                                    	Duration of processing (in ss.msec)
                                    	**type**\:  str
                                    
                                    .. attribute:: end_time
                                    
                                    	Last route process time relative to event trigger time (in ss.msec)
                                    	**type**\:  str
                                    
                                    .. attribute:: start_time
                                    
                                    	First route process time relative to event trigger time (in ss.msec)
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.LdpEnter, self).__init__()

                                        self.yang_name = "ldp-enter"
                                        self.yang_parent_name = "convergence-timeline"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.duration = YLeaf(YType.str, "duration")

                                        self.end_time = YLeaf(YType.str, "end-time")

                                        self.start_time = YLeaf(YType.str, "start-time")
                                        self._segment_path = lambda: "ldp-enter"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.LdpEnter, ['duration', 'end_time', 'start_time'], name, value)


                                class LdpExit(Entity):
                                    """
                                    Exit point of LDP to LSD
                                    
                                    .. attribute:: duration
                                    
                                    	Duration of processing (in ss.msec)
                                    	**type**\:  str
                                    
                                    .. attribute:: end_time
                                    
                                    	Last route process time relative to event trigger time (in ss.msec)
                                    	**type**\:  str
                                    
                                    .. attribute:: start_time
                                    
                                    	First route process time relative to event trigger time (in ss.msec)
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.LdpExit, self).__init__()

                                        self.yang_name = "ldp-exit"
                                        self.yang_parent_name = "convergence-timeline"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.duration = YLeaf(YType.str, "duration")

                                        self.end_time = YLeaf(YType.str, "end-time")

                                        self.start_time = YLeaf(YType.str, "start-time")
                                        self._segment_path = lambda: "ldp-exit"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.LdpExit, ['duration', 'end_time', 'start_time'], name, value)


                                class LsdEnter(Entity):
                                    """
                                    Entry point of LSD
                                    
                                    .. attribute:: duration
                                    
                                    	Duration of processing (in ss.msec)
                                    	**type**\:  str
                                    
                                    .. attribute:: end_time
                                    
                                    	Last route process time relative to event trigger time (in ss.msec)
                                    	**type**\:  str
                                    
                                    .. attribute:: start_time
                                    
                                    	First route process time relative to event trigger time (in ss.msec)
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.LsdEnter, self).__init__()

                                        self.yang_name = "lsd-enter"
                                        self.yang_parent_name = "convergence-timeline"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.duration = YLeaf(YType.str, "duration")

                                        self.end_time = YLeaf(YType.str, "end-time")

                                        self.start_time = YLeaf(YType.str, "start-time")
                                        self._segment_path = lambda: "lsd-enter"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.LsdEnter, ['duration', 'end_time', 'start_time'], name, value)


                                class LsdExit(Entity):
                                    """
                                    Exit point of LSD to FIBs
                                    
                                    .. attribute:: duration
                                    
                                    	Duration of processing (in ss.msec)
                                    	**type**\:  str
                                    
                                    .. attribute:: end_time
                                    
                                    	Last route process time relative to event trigger time (in ss.msec)
                                    	**type**\:  str
                                    
                                    .. attribute:: start_time
                                    
                                    	First route process time relative to event trigger time (in ss.msec)
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.LsdExit, self).__init__()

                                        self.yang_name = "lsd-exit"
                                        self.yang_parent_name = "convergence-timeline"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.duration = YLeaf(YType.str, "duration")

                                        self.end_time = YLeaf(YType.str, "end-time")

                                        self.start_time = YLeaf(YType.str, "start-time")
                                        self._segment_path = lambda: "lsd-exit"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.LsdExit, ['duration', 'end_time', 'start_time'], name, value)


                                class RiBv4Enter(Entity):
                                    """
                                    Entry point of IPv4 RIB
                                    
                                    .. attribute:: duration
                                    
                                    	Duration of processing (in ss.msec)
                                    	**type**\:  str
                                    
                                    .. attribute:: end_time
                                    
                                    	Last route process time relative to event trigger time (in ss.msec)
                                    	**type**\:  str
                                    
                                    .. attribute:: start_time
                                    
                                    	First route process time relative to event trigger time (in ss.msec)
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.RiBv4Enter, self).__init__()

                                        self.yang_name = "ri-bv4-enter"
                                        self.yang_parent_name = "convergence-timeline"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.duration = YLeaf(YType.str, "duration")

                                        self.end_time = YLeaf(YType.str, "end-time")

                                        self.start_time = YLeaf(YType.str, "start-time")
                                        self._segment_path = lambda: "ri-bv4-enter"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.RiBv4Enter, ['duration', 'end_time', 'start_time'], name, value)


                                class RiBv4Exit(Entity):
                                    """
                                    Exit point from IPv4 RIB to FIBs
                                    
                                    .. attribute:: duration
                                    
                                    	Duration of processing (in ss.msec)
                                    	**type**\:  str
                                    
                                    .. attribute:: end_time
                                    
                                    	Last route process time relative to event trigger time (in ss.msec)
                                    	**type**\:  str
                                    
                                    .. attribute:: start_time
                                    
                                    	First route process time relative to event trigger time (in ss.msec)
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.RiBv4Exit, self).__init__()

                                        self.yang_name = "ri-bv4-exit"
                                        self.yang_parent_name = "convergence-timeline"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.duration = YLeaf(YType.str, "duration")

                                        self.end_time = YLeaf(YType.str, "end-time")

                                        self.start_time = YLeaf(YType.str, "start-time")
                                        self._segment_path = lambda: "ri-bv4-exit"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.RiBv4Exit, ['duration', 'end_time', 'start_time'], name, value)


                                class RiBv4Redistribute(Entity):
                                    """
                                    Route Redistribute point from IPv4 RIB to LDP
                                    
                                    .. attribute:: duration
                                    
                                    	Duration of processing (in ss.msec)
                                    	**type**\:  str
                                    
                                    .. attribute:: end_time
                                    
                                    	Last route process time relative to event trigger time (in ss.msec)
                                    	**type**\:  str
                                    
                                    .. attribute:: start_time
                                    
                                    	First route process time relative to event trigger time (in ss.msec)
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.RiBv4Redistribute, self).__init__()

                                        self.yang_name = "ri-bv4-redistribute"
                                        self.yang_parent_name = "convergence-timeline"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.duration = YLeaf(YType.str, "duration")

                                        self.end_time = YLeaf(YType.str, "end-time")

                                        self.start_time = YLeaf(YType.str, "start-time")
                                        self._segment_path = lambda: "ri-bv4-redistribute"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.RiBv4Redistribute, ['duration', 'end_time', 'start_time'], name, value)


                                class RouteOrigin(Entity):
                                    """
                                    Route origin (routing protocol)
                                    
                                    .. attribute:: duration
                                    
                                    	Duration of processing (in ss.msec)
                                    	**type**\:  str
                                    
                                    .. attribute:: end_time
                                    
                                    	Last route process time relative to event trigger time (in ss.msec)
                                    	**type**\:  str
                                    
                                    .. attribute:: start_time
                                    
                                    	First route process time relative to event trigger time (in ss.msec)
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.RouteOrigin, self).__init__()

                                        self.yang_name = "route-origin"
                                        self.yang_parent_name = "convergence-timeline"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.duration = YLeaf(YType.str, "duration")

                                        self.end_time = YLeaf(YType.str, "end-time")

                                        self.start_time = YLeaf(YType.str, "start-time")
                                        self._segment_path = lambda: "route-origin"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.RouteOrigin, ['duration', 'end_time', 'start_time'], name, value)


                            class LeafNetworksAdded(Entity):
                                """
                                List of Leaf Networks Added
                                
                                .. attribute:: address
                                
                                	IP address
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: net_mask
                                
                                	Mask
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.LeafNetworksAdded, self).__init__()

                                    self.yang_name = "leaf-networks-added"
                                    self.yang_parent_name = "priority"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {}
                                    self._child_list_classes = {}

                                    self.address = YLeaf(YType.str, "address")

                                    self.net_mask = YLeaf(YType.uint8, "net-mask")
                                    self._segment_path = lambda: "leaf-networks-added"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.LeafNetworksAdded, ['address', 'net_mask'], name, value)


                            class LeafNetworksDeleted(Entity):
                                """
                                List of Leaf Networks Deleted
                                
                                .. attribute:: address
                                
                                	IP address
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: net_mask
                                
                                	Mask
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.LeafNetworksDeleted, self).__init__()

                                    self.yang_name = "leaf-networks-deleted"
                                    self.yang_parent_name = "priority"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {}
                                    self._child_list_classes = {}

                                    self.address = YLeaf(YType.str, "address")

                                    self.net_mask = YLeaf(YType.uint8, "net-mask")
                                    self._segment_path = lambda: "leaf-networks-deleted"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.LeafNetworksDeleted, ['address', 'net_mask'], name, value)


                            class PrioritySummary(Entity):
                                """
                                Summary of the priority
                                
                                .. attribute:: frr_statistic
                                
                                	Fast Re\-Route Statistics
                                	**type**\: list of    :py:class:`FrrStatistic <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.PrioritySummary.FrrStatistic>`
                                
                                .. attribute:: ip_convergence_time
                                
                                	Convergence time for IP route programming
                                	**type**\:   :py:class:`IpConvergenceTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.PrioritySummary.IpConvergenceTime>`
                                
                                .. attribute:: level
                                
                                	Critical, High, Medium or Low
                                	**type**\:   :py:class:`RcmdPriorityLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdPriorityLevel>`
                                
                                .. attribute:: mpls_convergence_time
                                
                                	Convergence time for MPLS label programming
                                	**type**\:   :py:class:`MplsConvergenceTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.PrioritySummary.MplsConvergenceTime>`
                                
                                .. attribute:: route_statistics
                                
                                	Route statistics
                                	**type**\:   :py:class:`RouteStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.PrioritySummary.RouteStatistics>`
                                
                                .. attribute:: threshold_exceeded
                                
                                	Threshold exceeded
                                	**type**\:  bool
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.PrioritySummary, self).__init__()

                                    self.yang_name = "priority-summary"
                                    self.yang_parent_name = "priority"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {"ip-convergence-time" : ("ip_convergence_time", Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.PrioritySummary.IpConvergenceTime), "mpls-convergence-time" : ("mpls_convergence_time", Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.PrioritySummary.MplsConvergenceTime), "route-statistics" : ("route_statistics", Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.PrioritySummary.RouteStatistics)}
                                    self._child_list_classes = {"frr-statistic" : ("frr_statistic", Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.PrioritySummary.FrrStatistic)}

                                    self.level = YLeaf(YType.enumeration, "level")

                                    self.threshold_exceeded = YLeaf(YType.boolean, "threshold-exceeded")

                                    self.ip_convergence_time = Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.PrioritySummary.IpConvergenceTime()
                                    self.ip_convergence_time.parent = self
                                    self._children_name_map["ip_convergence_time"] = "ip-convergence-time"
                                    self._children_yang_names.add("ip-convergence-time")

                                    self.mpls_convergence_time = Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.PrioritySummary.MplsConvergenceTime()
                                    self.mpls_convergence_time.parent = self
                                    self._children_name_map["mpls_convergence_time"] = "mpls-convergence-time"
                                    self._children_yang_names.add("mpls-convergence-time")

                                    self.route_statistics = Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.PrioritySummary.RouteStatistics()
                                    self.route_statistics.parent = self
                                    self._children_name_map["route_statistics"] = "route-statistics"
                                    self._children_yang_names.add("route-statistics")

                                    self.frr_statistic = YList(self)
                                    self._segment_path = lambda: "priority-summary"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.PrioritySummary, ['level', 'threshold_exceeded'], name, value)


                                class FrrStatistic(Entity):
                                    """
                                    Fast Re\-Route Statistics
                                    
                                    .. attribute:: coverage
                                    
                                    	Coverage in percentage
                                    	**type**\:  str
                                    
                                    	**units**\: percentage
                                    
                                    .. attribute:: fully_protected_routes
                                    
                                    	Fully Protected Routes
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: partially_protected_routes
                                    
                                    	Partially Protected Routes
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: total_routes
                                    
                                    	Total Number of Routes
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.PrioritySummary.FrrStatistic, self).__init__()

                                        self.yang_name = "frr-statistic"
                                        self.yang_parent_name = "priority-summary"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.coverage = YLeaf(YType.str, "coverage")

                                        self.fully_protected_routes = YLeaf(YType.uint32, "fully-protected-routes")

                                        self.partially_protected_routes = YLeaf(YType.uint32, "partially-protected-routes")

                                        self.total_routes = YLeaf(YType.uint32, "total-routes")
                                        self._segment_path = lambda: "frr-statistic"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.PrioritySummary.FrrStatistic, ['coverage', 'fully_protected_routes', 'partially_protected_routes', 'total_routes'], name, value)


                                class IpConvergenceTime(Entity):
                                    """
                                    Convergence time for IP route programming
                                    
                                    .. attribute:: fastest_node_name
                                    
                                    	Linecard node name which took the minimum time
                                    	**type**\:  str
                                    
                                    .. attribute:: maximum_time
                                    
                                    	Maximum time(in seconds.milliseconds)
                                    	**type**\:  str
                                    
                                    	**units**\: millisecond
                                    
                                    .. attribute:: minimum_time
                                    
                                    	Minimum time(in seconds.milliseconds)
                                    	**type**\:  str
                                    
                                    	**units**\: millisecond
                                    
                                    .. attribute:: slowest_node_name
                                    
                                    	Linecard node name which took the maximum time
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.PrioritySummary.IpConvergenceTime, self).__init__()

                                        self.yang_name = "ip-convergence-time"
                                        self.yang_parent_name = "priority-summary"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.fastest_node_name = YLeaf(YType.str, "fastest-node-name")

                                        self.maximum_time = YLeaf(YType.str, "maximum-time")

                                        self.minimum_time = YLeaf(YType.str, "minimum-time")

                                        self.slowest_node_name = YLeaf(YType.str, "slowest-node-name")
                                        self._segment_path = lambda: "ip-convergence-time"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.PrioritySummary.IpConvergenceTime, ['fastest_node_name', 'maximum_time', 'minimum_time', 'slowest_node_name'], name, value)


                                class MplsConvergenceTime(Entity):
                                    """
                                    Convergence time for MPLS label programming
                                    
                                    .. attribute:: fastest_node_name
                                    
                                    	Linecard node name which took the minimum time
                                    	**type**\:  str
                                    
                                    .. attribute:: maximum_time
                                    
                                    	Maximum time(in seconds.milliseconds)
                                    	**type**\:  str
                                    
                                    	**units**\: millisecond
                                    
                                    .. attribute:: minimum_time
                                    
                                    	Minimum time(in seconds.milliseconds)
                                    	**type**\:  str
                                    
                                    	**units**\: millisecond
                                    
                                    .. attribute:: slowest_node_name
                                    
                                    	Linecard node name which took the maximum time
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.PrioritySummary.MplsConvergenceTime, self).__init__()

                                        self.yang_name = "mpls-convergence-time"
                                        self.yang_parent_name = "priority-summary"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.fastest_node_name = YLeaf(YType.str, "fastest-node-name")

                                        self.maximum_time = YLeaf(YType.str, "maximum-time")

                                        self.minimum_time = YLeaf(YType.str, "minimum-time")

                                        self.slowest_node_name = YLeaf(YType.str, "slowest-node-name")
                                        self._segment_path = lambda: "mpls-convergence-time"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.PrioritySummary.MplsConvergenceTime, ['fastest_node_name', 'maximum_time', 'minimum_time', 'slowest_node_name'], name, value)


                                class RouteStatistics(Entity):
                                    """
                                    Route statistics
                                    
                                    .. attribute:: adds
                                    
                                    	Added
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: deletes
                                    
                                    	Deleted
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: modifies
                                    
                                    	Modified
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: reachables
                                    
                                    	Reachable
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: touches
                                    
                                    	Touched
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: unreachables
                                    
                                    	Unreachable
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.PrioritySummary.RouteStatistics, self).__init__()

                                        self.yang_name = "route-statistics"
                                        self.yang_parent_name = "priority-summary"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.adds = YLeaf(YType.uint32, "adds")

                                        self.deletes = YLeaf(YType.uint32, "deletes")

                                        self.modifies = YLeaf(YType.uint32, "modifies")

                                        self.reachables = YLeaf(YType.uint32, "reachables")

                                        self.touches = YLeaf(YType.uint32, "touches")

                                        self.unreachables = YLeaf(YType.uint32, "unreachables")
                                        self._segment_path = lambda: "route-statistics"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.PrioritySummary.RouteStatistics, ['adds', 'deletes', 'modifies', 'reachables', 'touches', 'unreachables'], name, value)


                        class SpfSummary(Entity):
                            """
                            SPF summary information
                            
                            .. attribute:: duration
                            
                            	Duration of SPF calculation (in ss.msec)
                            	**type**\:  str
                            
                            .. attribute:: is_data_complete
                            
                            	Whether the event has all information
                            	**type**\:  bool
                            
                            .. attribute:: isis_level
                            
                            	ISIS Level
                            	**type**\:   :py:class:`RcmdIsisLvl <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdIsisLvl>`
                            
                            .. attribute:: priority_summary
                            
                            	Convergence information summary on per\-priority basis
                            	**type**\: list of    :py:class:`PrioritySummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary>`
                            
                            .. attribute:: state
                            
                            	SPF state
                            	**type**\:   :py:class:`RcmdSpfState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdSpfState>`
                            
                            .. attribute:: threshold_exceeded
                            
                            	Threshold exceeded
                            	**type**\:  bool
                            
                            .. attribute:: topology
                            
                            	Topology index (multi\-topology)
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: total_lsp_changes
                            
                            	Total number of LSP changes processed
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: trigger_time
                            
                            	Trigger time (in hh\:mm\:ss.msec)
                            	**type**\:  str
                            
                            .. attribute:: type
                            
                            	Type of SPF
                            	**type**\:   :py:class:`RcmdIsisSpf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdIsisSpf>`
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary, self).__init__()

                                self.yang_name = "spf-summary"
                                self.yang_parent_name = "spf-run-offline"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {"priority-summary" : ("priority_summary", Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary)}

                                self.duration = YLeaf(YType.str, "duration")

                                self.is_data_complete = YLeaf(YType.boolean, "is-data-complete")

                                self.isis_level = YLeaf(YType.enumeration, "isis-level")

                                self.state = YLeaf(YType.enumeration, "state")

                                self.threshold_exceeded = YLeaf(YType.boolean, "threshold-exceeded")

                                self.topology = YLeaf(YType.uint32, "topology")

                                self.total_lsp_changes = YLeaf(YType.uint16, "total-lsp-changes")

                                self.trigger_time = YLeaf(YType.str, "trigger-time")

                                self.type = YLeaf(YType.enumeration, "type")

                                self.priority_summary = YList(self)
                                self._segment_path = lambda: "spf-summary"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary, ['duration', 'is_data_complete', 'isis_level', 'state', 'threshold_exceeded', 'topology', 'total_lsp_changes', 'trigger_time', 'type'], name, value)


                            class PrioritySummary(Entity):
                                """
                                Convergence information summary on per\-priority
                                basis
                                
                                .. attribute:: frr_statistic
                                
                                	Fast Re\-Route Statistics
                                	**type**\: list of    :py:class:`FrrStatistic <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary.FrrStatistic>`
                                
                                .. attribute:: ip_convergence_time
                                
                                	Convergence time for IP route programming
                                	**type**\:   :py:class:`IpConvergenceTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary.IpConvergenceTime>`
                                
                                .. attribute:: level
                                
                                	Critical, High, Medium or Low
                                	**type**\:   :py:class:`RcmdPriorityLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdPriorityLevel>`
                                
                                .. attribute:: mpls_convergence_time
                                
                                	Convergence time for MPLS label programming
                                	**type**\:   :py:class:`MplsConvergenceTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary.MplsConvergenceTime>`
                                
                                .. attribute:: route_statistics
                                
                                	Route statistics
                                	**type**\:   :py:class:`RouteStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary.RouteStatistics>`
                                
                                .. attribute:: threshold_exceeded
                                
                                	Threshold exceeded
                                	**type**\:  bool
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary, self).__init__()

                                    self.yang_name = "priority-summary"
                                    self.yang_parent_name = "spf-summary"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {"ip-convergence-time" : ("ip_convergence_time", Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary.IpConvergenceTime), "mpls-convergence-time" : ("mpls_convergence_time", Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary.MplsConvergenceTime), "route-statistics" : ("route_statistics", Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary.RouteStatistics)}
                                    self._child_list_classes = {"frr-statistic" : ("frr_statistic", Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary.FrrStatistic)}

                                    self.level = YLeaf(YType.enumeration, "level")

                                    self.threshold_exceeded = YLeaf(YType.boolean, "threshold-exceeded")

                                    self.ip_convergence_time = Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary.IpConvergenceTime()
                                    self.ip_convergence_time.parent = self
                                    self._children_name_map["ip_convergence_time"] = "ip-convergence-time"
                                    self._children_yang_names.add("ip-convergence-time")

                                    self.mpls_convergence_time = Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary.MplsConvergenceTime()
                                    self.mpls_convergence_time.parent = self
                                    self._children_name_map["mpls_convergence_time"] = "mpls-convergence-time"
                                    self._children_yang_names.add("mpls-convergence-time")

                                    self.route_statistics = Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary.RouteStatistics()
                                    self.route_statistics.parent = self
                                    self._children_name_map["route_statistics"] = "route-statistics"
                                    self._children_yang_names.add("route-statistics")

                                    self.frr_statistic = YList(self)
                                    self._segment_path = lambda: "priority-summary"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary, ['level', 'threshold_exceeded'], name, value)


                                class FrrStatistic(Entity):
                                    """
                                    Fast Re\-Route Statistics
                                    
                                    .. attribute:: coverage
                                    
                                    	Coverage in percentage
                                    	**type**\:  str
                                    
                                    	**units**\: percentage
                                    
                                    .. attribute:: fully_protected_routes
                                    
                                    	Fully Protected Routes
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: partially_protected_routes
                                    
                                    	Partially Protected Routes
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: total_routes
                                    
                                    	Total Number of Routes
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary.FrrStatistic, self).__init__()

                                        self.yang_name = "frr-statistic"
                                        self.yang_parent_name = "priority-summary"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.coverage = YLeaf(YType.str, "coverage")

                                        self.fully_protected_routes = YLeaf(YType.uint32, "fully-protected-routes")

                                        self.partially_protected_routes = YLeaf(YType.uint32, "partially-protected-routes")

                                        self.total_routes = YLeaf(YType.uint32, "total-routes")
                                        self._segment_path = lambda: "frr-statistic"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary.FrrStatistic, ['coverage', 'fully_protected_routes', 'partially_protected_routes', 'total_routes'], name, value)


                                class IpConvergenceTime(Entity):
                                    """
                                    Convergence time for IP route programming
                                    
                                    .. attribute:: fastest_node_name
                                    
                                    	Linecard node name which took the minimum time
                                    	**type**\:  str
                                    
                                    .. attribute:: maximum_time
                                    
                                    	Maximum time(in seconds.milliseconds)
                                    	**type**\:  str
                                    
                                    	**units**\: millisecond
                                    
                                    .. attribute:: minimum_time
                                    
                                    	Minimum time(in seconds.milliseconds)
                                    	**type**\:  str
                                    
                                    	**units**\: millisecond
                                    
                                    .. attribute:: slowest_node_name
                                    
                                    	Linecard node name which took the maximum time
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary.IpConvergenceTime, self).__init__()

                                        self.yang_name = "ip-convergence-time"
                                        self.yang_parent_name = "priority-summary"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.fastest_node_name = YLeaf(YType.str, "fastest-node-name")

                                        self.maximum_time = YLeaf(YType.str, "maximum-time")

                                        self.minimum_time = YLeaf(YType.str, "minimum-time")

                                        self.slowest_node_name = YLeaf(YType.str, "slowest-node-name")
                                        self._segment_path = lambda: "ip-convergence-time"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary.IpConvergenceTime, ['fastest_node_name', 'maximum_time', 'minimum_time', 'slowest_node_name'], name, value)


                                class MplsConvergenceTime(Entity):
                                    """
                                    Convergence time for MPLS label programming
                                    
                                    .. attribute:: fastest_node_name
                                    
                                    	Linecard node name which took the minimum time
                                    	**type**\:  str
                                    
                                    .. attribute:: maximum_time
                                    
                                    	Maximum time(in seconds.milliseconds)
                                    	**type**\:  str
                                    
                                    	**units**\: millisecond
                                    
                                    .. attribute:: minimum_time
                                    
                                    	Minimum time(in seconds.milliseconds)
                                    	**type**\:  str
                                    
                                    	**units**\: millisecond
                                    
                                    .. attribute:: slowest_node_name
                                    
                                    	Linecard node name which took the maximum time
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary.MplsConvergenceTime, self).__init__()

                                        self.yang_name = "mpls-convergence-time"
                                        self.yang_parent_name = "priority-summary"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.fastest_node_name = YLeaf(YType.str, "fastest-node-name")

                                        self.maximum_time = YLeaf(YType.str, "maximum-time")

                                        self.minimum_time = YLeaf(YType.str, "minimum-time")

                                        self.slowest_node_name = YLeaf(YType.str, "slowest-node-name")
                                        self._segment_path = lambda: "mpls-convergence-time"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary.MplsConvergenceTime, ['fastest_node_name', 'maximum_time', 'minimum_time', 'slowest_node_name'], name, value)


                                class RouteStatistics(Entity):
                                    """
                                    Route statistics
                                    
                                    .. attribute:: adds
                                    
                                    	Added
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: deletes
                                    
                                    	Deleted
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: modifies
                                    
                                    	Modified
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: reachables
                                    
                                    	Reachable
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: touches
                                    
                                    	Touched
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: unreachables
                                    
                                    	Unreachable
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary.RouteStatistics, self).__init__()

                                        self.yang_name = "route-statistics"
                                        self.yang_parent_name = "priority-summary"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.adds = YLeaf(YType.uint32, "adds")

                                        self.deletes = YLeaf(YType.uint32, "deletes")

                                        self.modifies = YLeaf(YType.uint32, "modifies")

                                        self.reachables = YLeaf(YType.uint32, "reachables")

                                        self.touches = YLeaf(YType.uint32, "touches")

                                        self.unreachables = YLeaf(YType.uint32, "unreachables")
                                        self._segment_path = lambda: "route-statistics"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary.RouteStatistics, ['adds', 'deletes', 'modifies', 'reachables', 'touches', 'unreachables'], name, value)


                        class TriggerLsp(Entity):
                            """
                            Trigger LSP
                            
                            .. attribute:: change_type
                            
                            	Add, Delete, Modify
                            	**type**\:   :py:class:`RcmdLsChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsChange>`
                            
                            .. attribute:: lsp_id
                            
                            	LSP ID
                            	**type**\:  str
                            
                            .. attribute:: reception_time
                            
                            	Reception Time on router (in hh\:mm\:ss.msec)
                            	**type**\:  str
                            
                            .. attribute:: sequence_number
                            
                            	Sequence Number
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.TriggerLsp, self).__init__()

                                self.yang_name = "trigger-lsp"
                                self.yang_parent_name = "spf-run-offline"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {}

                                self.change_type = YLeaf(YType.enumeration, "change-type")

                                self.lsp_id = YLeaf(YType.str, "lsp-id")

                                self.reception_time = YLeaf(YType.str, "reception-time")

                                self.sequence_number = YLeaf(YType.uint32, "sequence-number")
                                self._segment_path = lambda: "trigger-lsp"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.TriggerLsp, ['change_type', 'lsp_id', 'reception_time', 'sequence_number'], name, value)


                class SpfRunSummaries(Entity):
                    """
                    ISIS SPF run summary data
                    
                    .. attribute:: spf_run_summary
                    
                    	SPF Event data
                    	**type**\: list of    :py:class:`SpfRunSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary>`
                    
                    

                    """

                    _prefix = 'infra-rcmd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Rcmd.Isis.Instances.Instance.SpfRunSummaries, self).__init__()

                        self.yang_name = "spf-run-summaries"
                        self.yang_parent_name = "instance"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self._child_container_classes = {}
                        self._child_list_classes = {"spf-run-summary" : ("spf_run_summary", Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary)}

                        self.spf_run_summary = YList(self)
                        self._segment_path = lambda: "spf-run-summaries"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rcmd.Isis.Instances.Instance.SpfRunSummaries, [], name, value)


                    class SpfRunSummary(Entity):
                        """
                        SPF Event data
                        
                        .. attribute:: spf_run_number  <key>
                        
                        	Specific SPF run
                        	**type**\:  int
                        
                        	**range:** 1..4294967295
                        
                        .. attribute:: lsp_processed
                        
                        	List of LSP changes processed
                        	**type**\: list of    :py:class:`LspProcessed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.LspProcessed>`
                        
                        .. attribute:: lsp_regenerated
                        
                        	List of LSP regenerated
                        	**type**\: list of    :py:class:`LspRegenerated <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.LspRegenerated>`
                        
                        .. attribute:: node_statistics
                        
                        	SPF Node statistics
                        	**type**\:   :py:class:`NodeStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.NodeStatistics>`
                        
                        .. attribute:: priority
                        
                        	Convergence information on per\-priority basis
                        	**type**\: list of    :py:class:`Priority <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority>`
                        
                        .. attribute:: reason
                        
                        	Trigger reasons for SPF run. Example\: pr^ \- periodic, cr^ \- clear (Check the documentation for the entire list)
                        	**type**\:  str
                        
                        .. attribute:: spf_summary
                        
                        	SPF summary information
                        	**type**\:   :py:class:`SpfSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary>`
                        
                        .. attribute:: start_time
                        
                        	Start time (offset from event trigger time in ss .msec)
                        	**type**\:  str
                        
                        .. attribute:: trigger_lsp
                        
                        	Trigger LSP
                        	**type**\: list of    :py:class:`TriggerLsp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.TriggerLsp>`
                        
                        .. attribute:: wait_time
                        
                        	Wait time applied at SPF schedule (in msec)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'infra-rcmd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary, self).__init__()

                            self.yang_name = "spf-run-summary"
                            self.yang_parent_name = "spf-run-summaries"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self._child_container_classes = {"node-statistics" : ("node_statistics", Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.NodeStatistics), "spf-summary" : ("spf_summary", Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary)}
                            self._child_list_classes = {"lsp-processed" : ("lsp_processed", Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.LspProcessed), "lsp-regenerated" : ("lsp_regenerated", Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.LspRegenerated), "priority" : ("priority", Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority), "trigger-lsp" : ("trigger_lsp", Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.TriggerLsp)}

                            self.spf_run_number = YLeaf(YType.uint32, "spf-run-number")

                            self.reason = YLeaf(YType.str, "reason")

                            self.start_time = YLeaf(YType.str, "start-time")

                            self.wait_time = YLeaf(YType.uint32, "wait-time")

                            self.node_statistics = Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.NodeStatistics()
                            self.node_statistics.parent = self
                            self._children_name_map["node_statistics"] = "node-statistics"
                            self._children_yang_names.add("node-statistics")

                            self.spf_summary = Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary()
                            self.spf_summary.parent = self
                            self._children_name_map["spf_summary"] = "spf-summary"
                            self._children_yang_names.add("spf-summary")

                            self.lsp_processed = YList(self)
                            self.lsp_regenerated = YList(self)
                            self.priority = YList(self)
                            self.trigger_lsp = YList(self)
                            self._segment_path = lambda: "spf-run-summary" + "[spf-run-number='" + self.spf_run_number.get() + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary, ['spf_run_number', 'reason', 'start_time', 'wait_time'], name, value)


                        class LspProcessed(Entity):
                            """
                            List of LSP changes processed
                            
                            .. attribute:: change_type
                            
                            	Add, Delete, Modify
                            	**type**\:   :py:class:`RcmdLsChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsChange>`
                            
                            .. attribute:: lsp_id
                            
                            	LSP ID
                            	**type**\:  str
                            
                            .. attribute:: reception_time
                            
                            	Reception Time on router (in hh\:mm\:ss.msec)
                            	**type**\:  str
                            
                            .. attribute:: sequence_number
                            
                            	Sequence Number
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.LspProcessed, self).__init__()

                                self.yang_name = "lsp-processed"
                                self.yang_parent_name = "spf-run-summary"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {}

                                self.change_type = YLeaf(YType.enumeration, "change-type")

                                self.lsp_id = YLeaf(YType.str, "lsp-id")

                                self.reception_time = YLeaf(YType.str, "reception-time")

                                self.sequence_number = YLeaf(YType.uint32, "sequence-number")
                                self._segment_path = lambda: "lsp-processed"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.LspProcessed, ['change_type', 'lsp_id', 'reception_time', 'sequence_number'], name, value)


                        class LspRegenerated(Entity):
                            """
                            List of LSP regenerated
                            
                            .. attribute:: isis_level
                            
                            	ISIS Level
                            	**type**\:   :py:class:`RcmdIsisLvl <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdIsisLvl>`
                            
                            .. attribute:: lsp_id
                            
                            	LSP ID
                            	**type**\:  str
                            
                            .. attribute:: reason
                            
                            	Trigger reasons for LSP regeneration. Example\: pr^ \- periodic, cr^ \- clear (Check the documentation for the entire list)
                            	**type**\:  str
                            
                            .. attribute:: reception_time
                            
                            	Reception Time on router (in hh\:mm\:ss.msec)
                            	**type**\:  str
                            
                            .. attribute:: sequence_number
                            
                            	Sequence Number
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: serial_number_xr
                            
                            	Serial Number of the session event
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: spf_run_number
                            
                            	SPF Run Number
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.LspRegenerated, self).__init__()

                                self.yang_name = "lsp-regenerated"
                                self.yang_parent_name = "spf-run-summary"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {}

                                self.isis_level = YLeaf(YType.enumeration, "isis-level")

                                self.lsp_id = YLeaf(YType.str, "lsp-id")

                                self.reason = YLeaf(YType.str, "reason")

                                self.reception_time = YLeaf(YType.str, "reception-time")

                                self.sequence_number = YLeaf(YType.uint32, "sequence-number")

                                self.serial_number_xr = YLeaf(YType.uint32, "serial-number-xr")

                                self.spf_run_number = YLeaf(YType.uint32, "spf-run-number")
                                self._segment_path = lambda: "lsp-regenerated"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.LspRegenerated, ['isis_level', 'lsp_id', 'reason', 'reception_time', 'sequence_number', 'serial_number_xr', 'spf_run_number'], name, value)


                        class NodeStatistics(Entity):
                            """
                            SPF Node statistics
                            
                            .. attribute:: adds
                            
                            	Added
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: deletes
                            
                            	Deleted
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: modifies
                            
                            	Modified
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: reachables
                            
                            	Reachable
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: touches
                            
                            	Touched
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: unreachables
                            
                            	Unreachable
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.NodeStatistics, self).__init__()

                                self.yang_name = "node-statistics"
                                self.yang_parent_name = "spf-run-summary"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {}

                                self.adds = YLeaf(YType.uint32, "adds")

                                self.deletes = YLeaf(YType.uint32, "deletes")

                                self.modifies = YLeaf(YType.uint32, "modifies")

                                self.reachables = YLeaf(YType.uint32, "reachables")

                                self.touches = YLeaf(YType.uint32, "touches")

                                self.unreachables = YLeaf(YType.uint32, "unreachables")
                                self._segment_path = lambda: "node-statistics"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.NodeStatistics, ['adds', 'deletes', 'modifies', 'reachables', 'touches', 'unreachables'], name, value)


                        class Priority(Entity):
                            """
                            Convergence information on per\-priority basis
                            
                            .. attribute:: convergence_timeline
                            
                            	Convergence timeline details
                            	**type**\: list of    :py:class:`ConvergenceTimeline <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline>`
                            
                            .. attribute:: leaf_networks_added
                            
                            	List of Leaf Networks Added
                            	**type**\: list of    :py:class:`LeafNetworksAdded <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.LeafNetworksAdded>`
                            
                            .. attribute:: leaf_networks_deleted
                            
                            	List of Leaf Networks Deleted
                            	**type**\: list of    :py:class:`LeafNetworksDeleted <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.LeafNetworksDeleted>`
                            
                            .. attribute:: priority_summary
                            
                            	Summary of the priority
                            	**type**\:   :py:class:`PrioritySummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.PrioritySummary>`
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority, self).__init__()

                                self.yang_name = "priority"
                                self.yang_parent_name = "spf-run-summary"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {"priority-summary" : ("priority_summary", Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.PrioritySummary)}
                                self._child_list_classes = {"convergence-timeline" : ("convergence_timeline", Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline), "leaf-networks-added" : ("leaf_networks_added", Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.LeafNetworksAdded), "leaf-networks-deleted" : ("leaf_networks_deleted", Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.LeafNetworksDeleted)}

                                self.priority_summary = Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.PrioritySummary()
                                self.priority_summary.parent = self
                                self._children_name_map["priority_summary"] = "priority-summary"
                                self._children_yang_names.add("priority-summary")

                                self.convergence_timeline = YList(self)
                                self.leaf_networks_added = YList(self)
                                self.leaf_networks_deleted = YList(self)
                                self._segment_path = lambda: "priority"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority, [], name, value)


                            class ConvergenceTimeline(Entity):
                                """
                                Convergence timeline details
                                
                                .. attribute:: lc_ip
                                
                                	List of Linecards' completion point for IP routes
                                	**type**\: list of    :py:class:`LcIp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.LcIp>`
                                
                                .. attribute:: lc_mpls
                                
                                	List of Linecards' completion point for MPLS labels
                                	**type**\: list of    :py:class:`LcMpls <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.LcMpls>`
                                
                                .. attribute:: ldp_enter
                                
                                	Entry point of LDP
                                	**type**\:   :py:class:`LdpEnter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.LdpEnter>`
                                
                                .. attribute:: ldp_exit
                                
                                	Exit point of LDP to LSD
                                	**type**\:   :py:class:`LdpExit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.LdpExit>`
                                
                                .. attribute:: lsd_enter
                                
                                	Entry point of LSD
                                	**type**\:   :py:class:`LsdEnter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.LsdEnter>`
                                
                                .. attribute:: lsd_exit
                                
                                	Exit point of LSD to FIBs
                                	**type**\:   :py:class:`LsdExit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.LsdExit>`
                                
                                .. attribute:: ri_bv4_enter
                                
                                	Entry point of IPv4 RIB
                                	**type**\:   :py:class:`RiBv4Enter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.RiBv4Enter>`
                                
                                .. attribute:: ri_bv4_exit
                                
                                	Exit point from IPv4 RIB to FIBs
                                	**type**\:   :py:class:`RiBv4Exit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.RiBv4Exit>`
                                
                                .. attribute:: ri_bv4_redistribute
                                
                                	Route Redistribute point from IPv4 RIB to LDP
                                	**type**\:   :py:class:`RiBv4Redistribute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.RiBv4Redistribute>`
                                
                                .. attribute:: route_origin
                                
                                	Route origin (routing protocol)
                                	**type**\:   :py:class:`RouteOrigin <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.RouteOrigin>`
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline, self).__init__()

                                    self.yang_name = "convergence-timeline"
                                    self.yang_parent_name = "priority"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {"ldp-enter" : ("ldp_enter", Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.LdpEnter), "ldp-exit" : ("ldp_exit", Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.LdpExit), "lsd-enter" : ("lsd_enter", Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.LsdEnter), "lsd-exit" : ("lsd_exit", Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.LsdExit), "ri-bv4-enter" : ("ri_bv4_enter", Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.RiBv4Enter), "ri-bv4-exit" : ("ri_bv4_exit", Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.RiBv4Exit), "ri-bv4-redistribute" : ("ri_bv4_redistribute", Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.RiBv4Redistribute), "route-origin" : ("route_origin", Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.RouteOrigin)}
                                    self._child_list_classes = {"lc-ip" : ("lc_ip", Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.LcIp), "lc-mpls" : ("lc_mpls", Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.LcMpls)}

                                    self.ldp_enter = Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.LdpEnter()
                                    self.ldp_enter.parent = self
                                    self._children_name_map["ldp_enter"] = "ldp-enter"
                                    self._children_yang_names.add("ldp-enter")

                                    self.ldp_exit = Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.LdpExit()
                                    self.ldp_exit.parent = self
                                    self._children_name_map["ldp_exit"] = "ldp-exit"
                                    self._children_yang_names.add("ldp-exit")

                                    self.lsd_enter = Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.LsdEnter()
                                    self.lsd_enter.parent = self
                                    self._children_name_map["lsd_enter"] = "lsd-enter"
                                    self._children_yang_names.add("lsd-enter")

                                    self.lsd_exit = Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.LsdExit()
                                    self.lsd_exit.parent = self
                                    self._children_name_map["lsd_exit"] = "lsd-exit"
                                    self._children_yang_names.add("lsd-exit")

                                    self.ri_bv4_enter = Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.RiBv4Enter()
                                    self.ri_bv4_enter.parent = self
                                    self._children_name_map["ri_bv4_enter"] = "ri-bv4-enter"
                                    self._children_yang_names.add("ri-bv4-enter")

                                    self.ri_bv4_exit = Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.RiBv4Exit()
                                    self.ri_bv4_exit.parent = self
                                    self._children_name_map["ri_bv4_exit"] = "ri-bv4-exit"
                                    self._children_yang_names.add("ri-bv4-exit")

                                    self.ri_bv4_redistribute = Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.RiBv4Redistribute()
                                    self.ri_bv4_redistribute.parent = self
                                    self._children_name_map["ri_bv4_redistribute"] = "ri-bv4-redistribute"
                                    self._children_yang_names.add("ri-bv4-redistribute")

                                    self.route_origin = Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.RouteOrigin()
                                    self.route_origin.parent = self
                                    self._children_name_map["route_origin"] = "route-origin"
                                    self._children_yang_names.add("route-origin")

                                    self.lc_ip = YList(self)
                                    self.lc_mpls = YList(self)
                                    self._segment_path = lambda: "convergence-timeline"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline, [], name, value)


                                class LcIp(Entity):
                                    """
                                    List of Linecards' completion point for IP
                                    routes
                                    
                                    .. attribute:: fib_complete
                                    
                                    	Completion point of FIB
                                    	**type**\:   :py:class:`FibComplete <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.LcIp.FibComplete>`
                                    
                                    .. attribute:: node_name
                                    
                                    	Linecard node name
                                    	**type**\:  str
                                    
                                    .. attribute:: speed
                                    
                                    	Relative convergence speed
                                    	**type**\:   :py:class:`RcmdLinecardSpeed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLinecardSpeed>`
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.LcIp, self).__init__()

                                        self.yang_name = "lc-ip"
                                        self.yang_parent_name = "convergence-timeline"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {"fib-complete" : ("fib_complete", Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.LcIp.FibComplete)}
                                        self._child_list_classes = {}

                                        self.node_name = YLeaf(YType.str, "node-name")

                                        self.speed = YLeaf(YType.enumeration, "speed")

                                        self.fib_complete = Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.LcIp.FibComplete()
                                        self.fib_complete.parent = self
                                        self._children_name_map["fib_complete"] = "fib-complete"
                                        self._children_yang_names.add("fib-complete")
                                        self._segment_path = lambda: "lc-ip"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.LcIp, ['node_name', 'speed'], name, value)


                                    class FibComplete(Entity):
                                        """
                                        Completion point of FIB
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.LcIp.FibComplete, self).__init__()

                                            self.yang_name = "fib-complete"
                                            self.yang_parent_name = "lc-ip"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.duration = YLeaf(YType.str, "duration")

                                            self.end_time = YLeaf(YType.str, "end-time")

                                            self.start_time = YLeaf(YType.str, "start-time")
                                            self._segment_path = lambda: "fib-complete"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.LcIp.FibComplete, ['duration', 'end_time', 'start_time'], name, value)


                                class LcMpls(Entity):
                                    """
                                    List of Linecards' completion point for MPLS
                                    labels
                                    
                                    .. attribute:: fib_complete
                                    
                                    	Completion point of FIB
                                    	**type**\:   :py:class:`FibComplete <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.LcMpls.FibComplete>`
                                    
                                    .. attribute:: node_name
                                    
                                    	Linecard node name
                                    	**type**\:  str
                                    
                                    .. attribute:: speed
                                    
                                    	Relative convergence speed
                                    	**type**\:   :py:class:`RcmdLinecardSpeed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLinecardSpeed>`
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.LcMpls, self).__init__()

                                        self.yang_name = "lc-mpls"
                                        self.yang_parent_name = "convergence-timeline"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {"fib-complete" : ("fib_complete", Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.LcMpls.FibComplete)}
                                        self._child_list_classes = {}

                                        self.node_name = YLeaf(YType.str, "node-name")

                                        self.speed = YLeaf(YType.enumeration, "speed")

                                        self.fib_complete = Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.LcMpls.FibComplete()
                                        self.fib_complete.parent = self
                                        self._children_name_map["fib_complete"] = "fib-complete"
                                        self._children_yang_names.add("fib-complete")
                                        self._segment_path = lambda: "lc-mpls"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.LcMpls, ['node_name', 'speed'], name, value)


                                    class FibComplete(Entity):
                                        """
                                        Completion point of FIB
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.LcMpls.FibComplete, self).__init__()

                                            self.yang_name = "fib-complete"
                                            self.yang_parent_name = "lc-mpls"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.duration = YLeaf(YType.str, "duration")

                                            self.end_time = YLeaf(YType.str, "end-time")

                                            self.start_time = YLeaf(YType.str, "start-time")
                                            self._segment_path = lambda: "fib-complete"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.LcMpls.FibComplete, ['duration', 'end_time', 'start_time'], name, value)


                                class LdpEnter(Entity):
                                    """
                                    Entry point of LDP
                                    
                                    .. attribute:: duration
                                    
                                    	Duration of processing (in ss.msec)
                                    	**type**\:  str
                                    
                                    .. attribute:: end_time
                                    
                                    	Last route process time relative to event trigger time (in ss.msec)
                                    	**type**\:  str
                                    
                                    .. attribute:: start_time
                                    
                                    	First route process time relative to event trigger time (in ss.msec)
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.LdpEnter, self).__init__()

                                        self.yang_name = "ldp-enter"
                                        self.yang_parent_name = "convergence-timeline"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.duration = YLeaf(YType.str, "duration")

                                        self.end_time = YLeaf(YType.str, "end-time")

                                        self.start_time = YLeaf(YType.str, "start-time")
                                        self._segment_path = lambda: "ldp-enter"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.LdpEnter, ['duration', 'end_time', 'start_time'], name, value)


                                class LdpExit(Entity):
                                    """
                                    Exit point of LDP to LSD
                                    
                                    .. attribute:: duration
                                    
                                    	Duration of processing (in ss.msec)
                                    	**type**\:  str
                                    
                                    .. attribute:: end_time
                                    
                                    	Last route process time relative to event trigger time (in ss.msec)
                                    	**type**\:  str
                                    
                                    .. attribute:: start_time
                                    
                                    	First route process time relative to event trigger time (in ss.msec)
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.LdpExit, self).__init__()

                                        self.yang_name = "ldp-exit"
                                        self.yang_parent_name = "convergence-timeline"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.duration = YLeaf(YType.str, "duration")

                                        self.end_time = YLeaf(YType.str, "end-time")

                                        self.start_time = YLeaf(YType.str, "start-time")
                                        self._segment_path = lambda: "ldp-exit"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.LdpExit, ['duration', 'end_time', 'start_time'], name, value)


                                class LsdEnter(Entity):
                                    """
                                    Entry point of LSD
                                    
                                    .. attribute:: duration
                                    
                                    	Duration of processing (in ss.msec)
                                    	**type**\:  str
                                    
                                    .. attribute:: end_time
                                    
                                    	Last route process time relative to event trigger time (in ss.msec)
                                    	**type**\:  str
                                    
                                    .. attribute:: start_time
                                    
                                    	First route process time relative to event trigger time (in ss.msec)
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.LsdEnter, self).__init__()

                                        self.yang_name = "lsd-enter"
                                        self.yang_parent_name = "convergence-timeline"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.duration = YLeaf(YType.str, "duration")

                                        self.end_time = YLeaf(YType.str, "end-time")

                                        self.start_time = YLeaf(YType.str, "start-time")
                                        self._segment_path = lambda: "lsd-enter"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.LsdEnter, ['duration', 'end_time', 'start_time'], name, value)


                                class LsdExit(Entity):
                                    """
                                    Exit point of LSD to FIBs
                                    
                                    .. attribute:: duration
                                    
                                    	Duration of processing (in ss.msec)
                                    	**type**\:  str
                                    
                                    .. attribute:: end_time
                                    
                                    	Last route process time relative to event trigger time (in ss.msec)
                                    	**type**\:  str
                                    
                                    .. attribute:: start_time
                                    
                                    	First route process time relative to event trigger time (in ss.msec)
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.LsdExit, self).__init__()

                                        self.yang_name = "lsd-exit"
                                        self.yang_parent_name = "convergence-timeline"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.duration = YLeaf(YType.str, "duration")

                                        self.end_time = YLeaf(YType.str, "end-time")

                                        self.start_time = YLeaf(YType.str, "start-time")
                                        self._segment_path = lambda: "lsd-exit"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.LsdExit, ['duration', 'end_time', 'start_time'], name, value)


                                class RiBv4Enter(Entity):
                                    """
                                    Entry point of IPv4 RIB
                                    
                                    .. attribute:: duration
                                    
                                    	Duration of processing (in ss.msec)
                                    	**type**\:  str
                                    
                                    .. attribute:: end_time
                                    
                                    	Last route process time relative to event trigger time (in ss.msec)
                                    	**type**\:  str
                                    
                                    .. attribute:: start_time
                                    
                                    	First route process time relative to event trigger time (in ss.msec)
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.RiBv4Enter, self).__init__()

                                        self.yang_name = "ri-bv4-enter"
                                        self.yang_parent_name = "convergence-timeline"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.duration = YLeaf(YType.str, "duration")

                                        self.end_time = YLeaf(YType.str, "end-time")

                                        self.start_time = YLeaf(YType.str, "start-time")
                                        self._segment_path = lambda: "ri-bv4-enter"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.RiBv4Enter, ['duration', 'end_time', 'start_time'], name, value)


                                class RiBv4Exit(Entity):
                                    """
                                    Exit point from IPv4 RIB to FIBs
                                    
                                    .. attribute:: duration
                                    
                                    	Duration of processing (in ss.msec)
                                    	**type**\:  str
                                    
                                    .. attribute:: end_time
                                    
                                    	Last route process time relative to event trigger time (in ss.msec)
                                    	**type**\:  str
                                    
                                    .. attribute:: start_time
                                    
                                    	First route process time relative to event trigger time (in ss.msec)
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.RiBv4Exit, self).__init__()

                                        self.yang_name = "ri-bv4-exit"
                                        self.yang_parent_name = "convergence-timeline"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.duration = YLeaf(YType.str, "duration")

                                        self.end_time = YLeaf(YType.str, "end-time")

                                        self.start_time = YLeaf(YType.str, "start-time")
                                        self._segment_path = lambda: "ri-bv4-exit"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.RiBv4Exit, ['duration', 'end_time', 'start_time'], name, value)


                                class RiBv4Redistribute(Entity):
                                    """
                                    Route Redistribute point from IPv4 RIB to LDP
                                    
                                    .. attribute:: duration
                                    
                                    	Duration of processing (in ss.msec)
                                    	**type**\:  str
                                    
                                    .. attribute:: end_time
                                    
                                    	Last route process time relative to event trigger time (in ss.msec)
                                    	**type**\:  str
                                    
                                    .. attribute:: start_time
                                    
                                    	First route process time relative to event trigger time (in ss.msec)
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.RiBv4Redistribute, self).__init__()

                                        self.yang_name = "ri-bv4-redistribute"
                                        self.yang_parent_name = "convergence-timeline"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.duration = YLeaf(YType.str, "duration")

                                        self.end_time = YLeaf(YType.str, "end-time")

                                        self.start_time = YLeaf(YType.str, "start-time")
                                        self._segment_path = lambda: "ri-bv4-redistribute"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.RiBv4Redistribute, ['duration', 'end_time', 'start_time'], name, value)


                                class RouteOrigin(Entity):
                                    """
                                    Route origin (routing protocol)
                                    
                                    .. attribute:: duration
                                    
                                    	Duration of processing (in ss.msec)
                                    	**type**\:  str
                                    
                                    .. attribute:: end_time
                                    
                                    	Last route process time relative to event trigger time (in ss.msec)
                                    	**type**\:  str
                                    
                                    .. attribute:: start_time
                                    
                                    	First route process time relative to event trigger time (in ss.msec)
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.RouteOrigin, self).__init__()

                                        self.yang_name = "route-origin"
                                        self.yang_parent_name = "convergence-timeline"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.duration = YLeaf(YType.str, "duration")

                                        self.end_time = YLeaf(YType.str, "end-time")

                                        self.start_time = YLeaf(YType.str, "start-time")
                                        self._segment_path = lambda: "route-origin"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.RouteOrigin, ['duration', 'end_time', 'start_time'], name, value)


                            class LeafNetworksAdded(Entity):
                                """
                                List of Leaf Networks Added
                                
                                .. attribute:: address
                                
                                	IP address
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: net_mask
                                
                                	Mask
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.LeafNetworksAdded, self).__init__()

                                    self.yang_name = "leaf-networks-added"
                                    self.yang_parent_name = "priority"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {}
                                    self._child_list_classes = {}

                                    self.address = YLeaf(YType.str, "address")

                                    self.net_mask = YLeaf(YType.uint8, "net-mask")
                                    self._segment_path = lambda: "leaf-networks-added"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.LeafNetworksAdded, ['address', 'net_mask'], name, value)


                            class LeafNetworksDeleted(Entity):
                                """
                                List of Leaf Networks Deleted
                                
                                .. attribute:: address
                                
                                	IP address
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: net_mask
                                
                                	Mask
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.LeafNetworksDeleted, self).__init__()

                                    self.yang_name = "leaf-networks-deleted"
                                    self.yang_parent_name = "priority"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {}
                                    self._child_list_classes = {}

                                    self.address = YLeaf(YType.str, "address")

                                    self.net_mask = YLeaf(YType.uint8, "net-mask")
                                    self._segment_path = lambda: "leaf-networks-deleted"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.LeafNetworksDeleted, ['address', 'net_mask'], name, value)


                            class PrioritySummary(Entity):
                                """
                                Summary of the priority
                                
                                .. attribute:: frr_statistic
                                
                                	Fast Re\-Route Statistics
                                	**type**\: list of    :py:class:`FrrStatistic <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.PrioritySummary.FrrStatistic>`
                                
                                .. attribute:: ip_convergence_time
                                
                                	Convergence time for IP route programming
                                	**type**\:   :py:class:`IpConvergenceTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.PrioritySummary.IpConvergenceTime>`
                                
                                .. attribute:: level
                                
                                	Critical, High, Medium or Low
                                	**type**\:   :py:class:`RcmdPriorityLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdPriorityLevel>`
                                
                                .. attribute:: mpls_convergence_time
                                
                                	Convergence time for MPLS label programming
                                	**type**\:   :py:class:`MplsConvergenceTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.PrioritySummary.MplsConvergenceTime>`
                                
                                .. attribute:: route_statistics
                                
                                	Route statistics
                                	**type**\:   :py:class:`RouteStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.PrioritySummary.RouteStatistics>`
                                
                                .. attribute:: threshold_exceeded
                                
                                	Threshold exceeded
                                	**type**\:  bool
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.PrioritySummary, self).__init__()

                                    self.yang_name = "priority-summary"
                                    self.yang_parent_name = "priority"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {"ip-convergence-time" : ("ip_convergence_time", Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.PrioritySummary.IpConvergenceTime), "mpls-convergence-time" : ("mpls_convergence_time", Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.PrioritySummary.MplsConvergenceTime), "route-statistics" : ("route_statistics", Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.PrioritySummary.RouteStatistics)}
                                    self._child_list_classes = {"frr-statistic" : ("frr_statistic", Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.PrioritySummary.FrrStatistic)}

                                    self.level = YLeaf(YType.enumeration, "level")

                                    self.threshold_exceeded = YLeaf(YType.boolean, "threshold-exceeded")

                                    self.ip_convergence_time = Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.PrioritySummary.IpConvergenceTime()
                                    self.ip_convergence_time.parent = self
                                    self._children_name_map["ip_convergence_time"] = "ip-convergence-time"
                                    self._children_yang_names.add("ip-convergence-time")

                                    self.mpls_convergence_time = Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.PrioritySummary.MplsConvergenceTime()
                                    self.mpls_convergence_time.parent = self
                                    self._children_name_map["mpls_convergence_time"] = "mpls-convergence-time"
                                    self._children_yang_names.add("mpls-convergence-time")

                                    self.route_statistics = Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.PrioritySummary.RouteStatistics()
                                    self.route_statistics.parent = self
                                    self._children_name_map["route_statistics"] = "route-statistics"
                                    self._children_yang_names.add("route-statistics")

                                    self.frr_statistic = YList(self)
                                    self._segment_path = lambda: "priority-summary"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.PrioritySummary, ['level', 'threshold_exceeded'], name, value)


                                class FrrStatistic(Entity):
                                    """
                                    Fast Re\-Route Statistics
                                    
                                    .. attribute:: coverage
                                    
                                    	Coverage in percentage
                                    	**type**\:  str
                                    
                                    	**units**\: percentage
                                    
                                    .. attribute:: fully_protected_routes
                                    
                                    	Fully Protected Routes
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: partially_protected_routes
                                    
                                    	Partially Protected Routes
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: total_routes
                                    
                                    	Total Number of Routes
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.PrioritySummary.FrrStatistic, self).__init__()

                                        self.yang_name = "frr-statistic"
                                        self.yang_parent_name = "priority-summary"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.coverage = YLeaf(YType.str, "coverage")

                                        self.fully_protected_routes = YLeaf(YType.uint32, "fully-protected-routes")

                                        self.partially_protected_routes = YLeaf(YType.uint32, "partially-protected-routes")

                                        self.total_routes = YLeaf(YType.uint32, "total-routes")
                                        self._segment_path = lambda: "frr-statistic"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.PrioritySummary.FrrStatistic, ['coverage', 'fully_protected_routes', 'partially_protected_routes', 'total_routes'], name, value)


                                class IpConvergenceTime(Entity):
                                    """
                                    Convergence time for IP route programming
                                    
                                    .. attribute:: fastest_node_name
                                    
                                    	Linecard node name which took the minimum time
                                    	**type**\:  str
                                    
                                    .. attribute:: maximum_time
                                    
                                    	Maximum time(in seconds.milliseconds)
                                    	**type**\:  str
                                    
                                    	**units**\: millisecond
                                    
                                    .. attribute:: minimum_time
                                    
                                    	Minimum time(in seconds.milliseconds)
                                    	**type**\:  str
                                    
                                    	**units**\: millisecond
                                    
                                    .. attribute:: slowest_node_name
                                    
                                    	Linecard node name which took the maximum time
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.PrioritySummary.IpConvergenceTime, self).__init__()

                                        self.yang_name = "ip-convergence-time"
                                        self.yang_parent_name = "priority-summary"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.fastest_node_name = YLeaf(YType.str, "fastest-node-name")

                                        self.maximum_time = YLeaf(YType.str, "maximum-time")

                                        self.minimum_time = YLeaf(YType.str, "minimum-time")

                                        self.slowest_node_name = YLeaf(YType.str, "slowest-node-name")
                                        self._segment_path = lambda: "ip-convergence-time"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.PrioritySummary.IpConvergenceTime, ['fastest_node_name', 'maximum_time', 'minimum_time', 'slowest_node_name'], name, value)


                                class MplsConvergenceTime(Entity):
                                    """
                                    Convergence time for MPLS label programming
                                    
                                    .. attribute:: fastest_node_name
                                    
                                    	Linecard node name which took the minimum time
                                    	**type**\:  str
                                    
                                    .. attribute:: maximum_time
                                    
                                    	Maximum time(in seconds.milliseconds)
                                    	**type**\:  str
                                    
                                    	**units**\: millisecond
                                    
                                    .. attribute:: minimum_time
                                    
                                    	Minimum time(in seconds.milliseconds)
                                    	**type**\:  str
                                    
                                    	**units**\: millisecond
                                    
                                    .. attribute:: slowest_node_name
                                    
                                    	Linecard node name which took the maximum time
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.PrioritySummary.MplsConvergenceTime, self).__init__()

                                        self.yang_name = "mpls-convergence-time"
                                        self.yang_parent_name = "priority-summary"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.fastest_node_name = YLeaf(YType.str, "fastest-node-name")

                                        self.maximum_time = YLeaf(YType.str, "maximum-time")

                                        self.minimum_time = YLeaf(YType.str, "minimum-time")

                                        self.slowest_node_name = YLeaf(YType.str, "slowest-node-name")
                                        self._segment_path = lambda: "mpls-convergence-time"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.PrioritySummary.MplsConvergenceTime, ['fastest_node_name', 'maximum_time', 'minimum_time', 'slowest_node_name'], name, value)


                                class RouteStatistics(Entity):
                                    """
                                    Route statistics
                                    
                                    .. attribute:: adds
                                    
                                    	Added
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: deletes
                                    
                                    	Deleted
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: modifies
                                    
                                    	Modified
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: reachables
                                    
                                    	Reachable
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: touches
                                    
                                    	Touched
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: unreachables
                                    
                                    	Unreachable
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.PrioritySummary.RouteStatistics, self).__init__()

                                        self.yang_name = "route-statistics"
                                        self.yang_parent_name = "priority-summary"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.adds = YLeaf(YType.uint32, "adds")

                                        self.deletes = YLeaf(YType.uint32, "deletes")

                                        self.modifies = YLeaf(YType.uint32, "modifies")

                                        self.reachables = YLeaf(YType.uint32, "reachables")

                                        self.touches = YLeaf(YType.uint32, "touches")

                                        self.unreachables = YLeaf(YType.uint32, "unreachables")
                                        self._segment_path = lambda: "route-statistics"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.PrioritySummary.RouteStatistics, ['adds', 'deletes', 'modifies', 'reachables', 'touches', 'unreachables'], name, value)


                        class SpfSummary(Entity):
                            """
                            SPF summary information
                            
                            .. attribute:: duration
                            
                            	Duration of SPF calculation (in ss.msec)
                            	**type**\:  str
                            
                            .. attribute:: is_data_complete
                            
                            	Whether the event has all information
                            	**type**\:  bool
                            
                            .. attribute:: isis_level
                            
                            	ISIS Level
                            	**type**\:   :py:class:`RcmdIsisLvl <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdIsisLvl>`
                            
                            .. attribute:: priority_summary
                            
                            	Convergence information summary on per\-priority basis
                            	**type**\: list of    :py:class:`PrioritySummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary>`
                            
                            .. attribute:: state
                            
                            	SPF state
                            	**type**\:   :py:class:`RcmdSpfState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdSpfState>`
                            
                            .. attribute:: threshold_exceeded
                            
                            	Threshold exceeded
                            	**type**\:  bool
                            
                            .. attribute:: topology
                            
                            	Topology index (multi\-topology)
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: total_lsp_changes
                            
                            	Total number of LSP changes processed
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: trigger_time
                            
                            	Trigger time (in hh\:mm\:ss.msec)
                            	**type**\:  str
                            
                            .. attribute:: type
                            
                            	Type of SPF
                            	**type**\:   :py:class:`RcmdIsisSpf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdIsisSpf>`
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary, self).__init__()

                                self.yang_name = "spf-summary"
                                self.yang_parent_name = "spf-run-summary"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {"priority-summary" : ("priority_summary", Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary)}

                                self.duration = YLeaf(YType.str, "duration")

                                self.is_data_complete = YLeaf(YType.boolean, "is-data-complete")

                                self.isis_level = YLeaf(YType.enumeration, "isis-level")

                                self.state = YLeaf(YType.enumeration, "state")

                                self.threshold_exceeded = YLeaf(YType.boolean, "threshold-exceeded")

                                self.topology = YLeaf(YType.uint32, "topology")

                                self.total_lsp_changes = YLeaf(YType.uint16, "total-lsp-changes")

                                self.trigger_time = YLeaf(YType.str, "trigger-time")

                                self.type = YLeaf(YType.enumeration, "type")

                                self.priority_summary = YList(self)
                                self._segment_path = lambda: "spf-summary"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary, ['duration', 'is_data_complete', 'isis_level', 'state', 'threshold_exceeded', 'topology', 'total_lsp_changes', 'trigger_time', 'type'], name, value)


                            class PrioritySummary(Entity):
                                """
                                Convergence information summary on per\-priority
                                basis
                                
                                .. attribute:: frr_statistic
                                
                                	Fast Re\-Route Statistics
                                	**type**\: list of    :py:class:`FrrStatistic <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary.FrrStatistic>`
                                
                                .. attribute:: ip_convergence_time
                                
                                	Convergence time for IP route programming
                                	**type**\:   :py:class:`IpConvergenceTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary.IpConvergenceTime>`
                                
                                .. attribute:: level
                                
                                	Critical, High, Medium or Low
                                	**type**\:   :py:class:`RcmdPriorityLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdPriorityLevel>`
                                
                                .. attribute:: mpls_convergence_time
                                
                                	Convergence time for MPLS label programming
                                	**type**\:   :py:class:`MplsConvergenceTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary.MplsConvergenceTime>`
                                
                                .. attribute:: route_statistics
                                
                                	Route statistics
                                	**type**\:   :py:class:`RouteStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary.RouteStatistics>`
                                
                                .. attribute:: threshold_exceeded
                                
                                	Threshold exceeded
                                	**type**\:  bool
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary, self).__init__()

                                    self.yang_name = "priority-summary"
                                    self.yang_parent_name = "spf-summary"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {"ip-convergence-time" : ("ip_convergence_time", Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary.IpConvergenceTime), "mpls-convergence-time" : ("mpls_convergence_time", Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary.MplsConvergenceTime), "route-statistics" : ("route_statistics", Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary.RouteStatistics)}
                                    self._child_list_classes = {"frr-statistic" : ("frr_statistic", Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary.FrrStatistic)}

                                    self.level = YLeaf(YType.enumeration, "level")

                                    self.threshold_exceeded = YLeaf(YType.boolean, "threshold-exceeded")

                                    self.ip_convergence_time = Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary.IpConvergenceTime()
                                    self.ip_convergence_time.parent = self
                                    self._children_name_map["ip_convergence_time"] = "ip-convergence-time"
                                    self._children_yang_names.add("ip-convergence-time")

                                    self.mpls_convergence_time = Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary.MplsConvergenceTime()
                                    self.mpls_convergence_time.parent = self
                                    self._children_name_map["mpls_convergence_time"] = "mpls-convergence-time"
                                    self._children_yang_names.add("mpls-convergence-time")

                                    self.route_statistics = Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary.RouteStatistics()
                                    self.route_statistics.parent = self
                                    self._children_name_map["route_statistics"] = "route-statistics"
                                    self._children_yang_names.add("route-statistics")

                                    self.frr_statistic = YList(self)
                                    self._segment_path = lambda: "priority-summary"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary, ['level', 'threshold_exceeded'], name, value)


                                class FrrStatistic(Entity):
                                    """
                                    Fast Re\-Route Statistics
                                    
                                    .. attribute:: coverage
                                    
                                    	Coverage in percentage
                                    	**type**\:  str
                                    
                                    	**units**\: percentage
                                    
                                    .. attribute:: fully_protected_routes
                                    
                                    	Fully Protected Routes
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: partially_protected_routes
                                    
                                    	Partially Protected Routes
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: total_routes
                                    
                                    	Total Number of Routes
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary.FrrStatistic, self).__init__()

                                        self.yang_name = "frr-statistic"
                                        self.yang_parent_name = "priority-summary"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.coverage = YLeaf(YType.str, "coverage")

                                        self.fully_protected_routes = YLeaf(YType.uint32, "fully-protected-routes")

                                        self.partially_protected_routes = YLeaf(YType.uint32, "partially-protected-routes")

                                        self.total_routes = YLeaf(YType.uint32, "total-routes")
                                        self._segment_path = lambda: "frr-statistic"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary.FrrStatistic, ['coverage', 'fully_protected_routes', 'partially_protected_routes', 'total_routes'], name, value)


                                class IpConvergenceTime(Entity):
                                    """
                                    Convergence time for IP route programming
                                    
                                    .. attribute:: fastest_node_name
                                    
                                    	Linecard node name which took the minimum time
                                    	**type**\:  str
                                    
                                    .. attribute:: maximum_time
                                    
                                    	Maximum time(in seconds.milliseconds)
                                    	**type**\:  str
                                    
                                    	**units**\: millisecond
                                    
                                    .. attribute:: minimum_time
                                    
                                    	Minimum time(in seconds.milliseconds)
                                    	**type**\:  str
                                    
                                    	**units**\: millisecond
                                    
                                    .. attribute:: slowest_node_name
                                    
                                    	Linecard node name which took the maximum time
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary.IpConvergenceTime, self).__init__()

                                        self.yang_name = "ip-convergence-time"
                                        self.yang_parent_name = "priority-summary"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.fastest_node_name = YLeaf(YType.str, "fastest-node-name")

                                        self.maximum_time = YLeaf(YType.str, "maximum-time")

                                        self.minimum_time = YLeaf(YType.str, "minimum-time")

                                        self.slowest_node_name = YLeaf(YType.str, "slowest-node-name")
                                        self._segment_path = lambda: "ip-convergence-time"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary.IpConvergenceTime, ['fastest_node_name', 'maximum_time', 'minimum_time', 'slowest_node_name'], name, value)


                                class MplsConvergenceTime(Entity):
                                    """
                                    Convergence time for MPLS label programming
                                    
                                    .. attribute:: fastest_node_name
                                    
                                    	Linecard node name which took the minimum time
                                    	**type**\:  str
                                    
                                    .. attribute:: maximum_time
                                    
                                    	Maximum time(in seconds.milliseconds)
                                    	**type**\:  str
                                    
                                    	**units**\: millisecond
                                    
                                    .. attribute:: minimum_time
                                    
                                    	Minimum time(in seconds.milliseconds)
                                    	**type**\:  str
                                    
                                    	**units**\: millisecond
                                    
                                    .. attribute:: slowest_node_name
                                    
                                    	Linecard node name which took the maximum time
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary.MplsConvergenceTime, self).__init__()

                                        self.yang_name = "mpls-convergence-time"
                                        self.yang_parent_name = "priority-summary"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.fastest_node_name = YLeaf(YType.str, "fastest-node-name")

                                        self.maximum_time = YLeaf(YType.str, "maximum-time")

                                        self.minimum_time = YLeaf(YType.str, "minimum-time")

                                        self.slowest_node_name = YLeaf(YType.str, "slowest-node-name")
                                        self._segment_path = lambda: "mpls-convergence-time"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary.MplsConvergenceTime, ['fastest_node_name', 'maximum_time', 'minimum_time', 'slowest_node_name'], name, value)


                                class RouteStatistics(Entity):
                                    """
                                    Route statistics
                                    
                                    .. attribute:: adds
                                    
                                    	Added
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: deletes
                                    
                                    	Deleted
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: modifies
                                    
                                    	Modified
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: reachables
                                    
                                    	Reachable
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: touches
                                    
                                    	Touched
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: unreachables
                                    
                                    	Unreachable
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary.RouteStatistics, self).__init__()

                                        self.yang_name = "route-statistics"
                                        self.yang_parent_name = "priority-summary"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.adds = YLeaf(YType.uint32, "adds")

                                        self.deletes = YLeaf(YType.uint32, "deletes")

                                        self.modifies = YLeaf(YType.uint32, "modifies")

                                        self.reachables = YLeaf(YType.uint32, "reachables")

                                        self.touches = YLeaf(YType.uint32, "touches")

                                        self.unreachables = YLeaf(YType.uint32, "unreachables")
                                        self._segment_path = lambda: "route-statistics"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary.RouteStatistics, ['adds', 'deletes', 'modifies', 'reachables', 'touches', 'unreachables'], name, value)


                        class TriggerLsp(Entity):
                            """
                            Trigger LSP
                            
                            .. attribute:: change_type
                            
                            	Add, Delete, Modify
                            	**type**\:   :py:class:`RcmdLsChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsChange>`
                            
                            .. attribute:: lsp_id
                            
                            	LSP ID
                            	**type**\:  str
                            
                            .. attribute:: reception_time
                            
                            	Reception Time on router (in hh\:mm\:ss.msec)
                            	**type**\:  str
                            
                            .. attribute:: sequence_number
                            
                            	Sequence Number
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.TriggerLsp, self).__init__()

                                self.yang_name = "trigger-lsp"
                                self.yang_parent_name = "spf-run-summary"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {}

                                self.change_type = YLeaf(YType.enumeration, "change-type")

                                self.lsp_id = YLeaf(YType.str, "lsp-id")

                                self.reception_time = YLeaf(YType.str, "reception-time")

                                self.sequence_number = YLeaf(YType.uint32, "sequence-number")
                                self._segment_path = lambda: "trigger-lsp"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.TriggerLsp, ['change_type', 'lsp_id', 'reception_time', 'sequence_number'], name, value)


    class Ldp(Entity):
        """
        LDP data
        
        .. attribute:: remote_lfa_s
        
        	Remote LFA Coverage Events
        	**type**\:   :py:class:`RemoteLfaS <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ldp.RemoteLfaS>`
        
        .. attribute:: remote_lfa_summaries
        
        	Remote LFA Coverage Events
        	**type**\:   :py:class:`RemoteLfaSummaries <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ldp.RemoteLfaSummaries>`
        
        .. attribute:: sessions
        
        	Session Events
        	**type**\:   :py:class:`Sessions <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ldp.Sessions>`
        
        

        """

        _prefix = 'infra-rcmd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Rcmd.Ldp, self).__init__()

            self.yang_name = "ldp"
            self.yang_parent_name = "rcmd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self._child_container_classes = {"remote-lfa-s" : ("remote_lfa_s", Rcmd.Ldp.RemoteLfaS), "remote-lfa-summaries" : ("remote_lfa_summaries", Rcmd.Ldp.RemoteLfaSummaries), "sessions" : ("sessions", Rcmd.Ldp.Sessions)}
            self._child_list_classes = {}

            self.remote_lfa_s = Rcmd.Ldp.RemoteLfaS()
            self.remote_lfa_s.parent = self
            self._children_name_map["remote_lfa_s"] = "remote-lfa-s"
            self._children_yang_names.add("remote-lfa-s")

            self.remote_lfa_summaries = Rcmd.Ldp.RemoteLfaSummaries()
            self.remote_lfa_summaries.parent = self
            self._children_name_map["remote_lfa_summaries"] = "remote-lfa-summaries"
            self._children_yang_names.add("remote-lfa-summaries")

            self.sessions = Rcmd.Ldp.Sessions()
            self.sessions.parent = self
            self._children_name_map["sessions"] = "sessions"
            self._children_yang_names.add("sessions")
            self._segment_path = lambda: "ldp"
            self._absolute_path = lambda: "Cisco-IOS-XR-infra-rcmd-oper:rcmd/%s" % self._segment_path()


        class RemoteLfaS(Entity):
            """
            Remote LFA Coverage Events
            
            .. attribute:: remote_lfa
            
            	RemoteLFA
            	**type**\: list of    :py:class:`RemoteLfa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ldp.RemoteLfaS.RemoteLfa>`
            
            

            """

            _prefix = 'infra-rcmd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Rcmd.Ldp.RemoteLfaS, self).__init__()

                self.yang_name = "remote-lfa-s"
                self.yang_parent_name = "ldp"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self._child_container_classes = {}
                self._child_list_classes = {"remote-lfa" : ("remote_lfa", Rcmd.Ldp.RemoteLfaS.RemoteLfa)}

                self.remote_lfa = YList(self)
                self._segment_path = lambda: "remote-lfa-s"
                self._absolute_path = lambda: "Cisco-IOS-XR-infra-rcmd-oper:rcmd/ldp/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Rcmd.Ldp.RemoteLfaS, [], name, value)


            class RemoteLfa(Entity):
                """
                RemoteLFA
                
                .. attribute:: event_id  <key>
                
                	Specific Event ID
                	**type**\:  int
                
                	**range:** 1..4294967295
                
                .. attribute:: below_threshold
                
                	Coverage Below Threshold
                	**type**\:  bool
                
                .. attribute:: end_of_calculation_time
                
                	End of IGP LFA Calculation Time (eg\: Apr 24 13 \:16\:04.961)
                	**type**\:  str
                
                .. attribute:: event_id_xr
                
                	LDP\-rLFA Event ID
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: igp_protocol
                
                	IGP Protocol
                	**type**\:   :py:class:`RcmdProtocolId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdProtocolId>`
                
                .. attribute:: ipfrr_event_id
                
                	IGP IP\-FRR Event ID (ref\: rcmd\_show\_ipfrr\_event\_info(EventID))
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: logs
                
                	Logs Information
                	**type**\: list of    :py:class:`Logs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ldp.RemoteLfaS.RemoteLfa.Logs>`
                
                .. attribute:: process_name
                
                	Process Name
                	**type**\:  str
                
                .. attribute:: remote_node
                
                	Remote Node Information
                	**type**\: list of    :py:class:`RemoteNode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ldp.RemoteLfaS.RemoteLfa.RemoteNode>`
                
                .. attribute:: session_statistic
                
                	RLFA Statistics categorized by session state
                	**type**\: list of    :py:class:`SessionStatistic <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ldp.RemoteLfaS.RemoteLfa.SessionStatistic>`
                
                

                """

                _prefix = 'infra-rcmd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Rcmd.Ldp.RemoteLfaS.RemoteLfa, self).__init__()

                    self.yang_name = "remote-lfa"
                    self.yang_parent_name = "remote-lfa-s"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self._child_container_classes = {}
                    self._child_list_classes = {"logs" : ("logs", Rcmd.Ldp.RemoteLfaS.RemoteLfa.Logs), "remote-node" : ("remote_node", Rcmd.Ldp.RemoteLfaS.RemoteLfa.RemoteNode), "session-statistic" : ("session_statistic", Rcmd.Ldp.RemoteLfaS.RemoteLfa.SessionStatistic)}

                    self.event_id = YLeaf(YType.uint32, "event-id")

                    self.below_threshold = YLeaf(YType.boolean, "below-threshold")

                    self.end_of_calculation_time = YLeaf(YType.str, "end-of-calculation-time")

                    self.event_id_xr = YLeaf(YType.uint32, "event-id-xr")

                    self.igp_protocol = YLeaf(YType.enumeration, "igp-protocol")

                    self.ipfrr_event_id = YLeaf(YType.uint32, "ipfrr-event-id")

                    self.process_name = YLeaf(YType.str, "process-name")

                    self.logs = YList(self)
                    self.remote_node = YList(self)
                    self.session_statistic = YList(self)
                    self._segment_path = lambda: "remote-lfa" + "[event-id='" + self.event_id.get() + "']"
                    self._absolute_path = lambda: "Cisco-IOS-XR-infra-rcmd-oper:rcmd/ldp/remote-lfa-s/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rcmd.Ldp.RemoteLfaS.RemoteLfa, ['event_id', 'below_threshold', 'end_of_calculation_time', 'event_id_xr', 'igp_protocol', 'ipfrr_event_id', 'process_name'], name, value)


                class Logs(Entity):
                    """
                    Logs Information
                    
                    .. attribute:: label_coverage_state
                    
                    	Label Coverage State
                    	**type**\:   :py:class:`RcmdShowLdpConvState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowLdpConvState>`
                    
                    .. attribute:: log_time
                    
                    	Event Time (eg\: Apr 24 13\:16\:04.961)
                    	**type**\:  str
                    
                    .. attribute:: remote_label_count
                    
                    	Remote Label Count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: route_count
                    
                    	Total Route Count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'infra-rcmd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Rcmd.Ldp.RemoteLfaS.RemoteLfa.Logs, self).__init__()

                        self.yang_name = "logs"
                        self.yang_parent_name = "remote-lfa"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self._child_container_classes = {}
                        self._child_list_classes = {}

                        self.label_coverage_state = YLeaf(YType.enumeration, "label-coverage-state")

                        self.log_time = YLeaf(YType.str, "log-time")

                        self.remote_label_count = YLeaf(YType.uint32, "remote-label-count")

                        self.route_count = YLeaf(YType.uint32, "route-count")
                        self._segment_path = lambda: "logs"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rcmd.Ldp.RemoteLfaS.RemoteLfa.Logs, ['label_coverage_state', 'log_time', 'remote_label_count', 'route_count'], name, value)


                class RemoteNode(Entity):
                    """
                    Remote Node Information
                    
                    .. attribute:: in_use_time
                    
                    	Inuse time of the Session
                    	**type**\:  str
                    
                    .. attribute:: lsr_id
                    
                    	Label Space Router ID
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: path_count
                    
                    	Total Path Count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: protected_path_count
                    
                    	Protected Path Count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: protected_route_count
                    
                    	Protected Route Count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: remote_label_count
                    
                    	Remote Label Count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: remote_node_id
                    
                    	Remote Node ID
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: route_count
                    
                    	Total Route Count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: session_state
                    
                    	Session State
                    	**type**\:   :py:class:`RcmdShowLdpSessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowLdpSessionState>`
                    
                    .. attribute:: transport_address
                    
                    	Transport Address
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    

                    """

                    _prefix = 'infra-rcmd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Rcmd.Ldp.RemoteLfaS.RemoteLfa.RemoteNode, self).__init__()

                        self.yang_name = "remote-node"
                        self.yang_parent_name = "remote-lfa"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self._child_container_classes = {}
                        self._child_list_classes = {}

                        self.in_use_time = YLeaf(YType.str, "in-use-time")

                        self.lsr_id = YLeaf(YType.str, "lsr-id")

                        self.path_count = YLeaf(YType.uint32, "path-count")

                        self.protected_path_count = YLeaf(YType.uint32, "protected-path-count")

                        self.protected_route_count = YLeaf(YType.uint32, "protected-route-count")

                        self.remote_label_count = YLeaf(YType.uint32, "remote-label-count")

                        self.remote_node_id = YLeaf(YType.str, "remote-node-id")

                        self.route_count = YLeaf(YType.uint32, "route-count")

                        self.session_state = YLeaf(YType.enumeration, "session-state")

                        self.transport_address = YLeaf(YType.str, "transport-address")
                        self._segment_path = lambda: "remote-node"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rcmd.Ldp.RemoteLfaS.RemoteLfa.RemoteNode, ['in_use_time', 'lsr_id', 'path_count', 'protected_path_count', 'protected_route_count', 'remote_label_count', 'remote_node_id', 'route_count', 'session_state', 'transport_address'], name, value)


                class SessionStatistic(Entity):
                    """
                    RLFA Statistics categorized by session state
                    
                    .. attribute:: path_count
                    
                    	Total Path Count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: protected_path_count
                    
                    	Protected Path Count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: protected_route_count
                    
                    	Protected Route Count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: remote_label_count
                    
                    	Remote Label Count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: route_count
                    
                    	Total Route Count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: session_count
                    
                    	LDP Session Count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: session_state
                    
                    	Session State
                    	**type**\:   :py:class:`RcmdShowLdpSessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowLdpSessionState>`
                    
                    

                    """

                    _prefix = 'infra-rcmd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Rcmd.Ldp.RemoteLfaS.RemoteLfa.SessionStatistic, self).__init__()

                        self.yang_name = "session-statistic"
                        self.yang_parent_name = "remote-lfa"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self._child_container_classes = {}
                        self._child_list_classes = {}

                        self.path_count = YLeaf(YType.uint32, "path-count")

                        self.protected_path_count = YLeaf(YType.uint32, "protected-path-count")

                        self.protected_route_count = YLeaf(YType.uint32, "protected-route-count")

                        self.remote_label_count = YLeaf(YType.uint32, "remote-label-count")

                        self.route_count = YLeaf(YType.uint32, "route-count")

                        self.session_count = YLeaf(YType.uint32, "session-count")

                        self.session_state = YLeaf(YType.enumeration, "session-state")
                        self._segment_path = lambda: "session-statistic"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rcmd.Ldp.RemoteLfaS.RemoteLfa.SessionStatistic, ['path_count', 'protected_path_count', 'protected_route_count', 'remote_label_count', 'route_count', 'session_count', 'session_state'], name, value)


        class RemoteLfaSummaries(Entity):
            """
            Remote LFA Coverage Events
            
            .. attribute:: remote_lfa_summary
            
            	Summary operational data for Remote LFA
            	**type**\: list of    :py:class:`RemoteLfaSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ldp.RemoteLfaSummaries.RemoteLfaSummary>`
            
            

            """

            _prefix = 'infra-rcmd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Rcmd.Ldp.RemoteLfaSummaries, self).__init__()

                self.yang_name = "remote-lfa-summaries"
                self.yang_parent_name = "ldp"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self._child_container_classes = {}
                self._child_list_classes = {"remote-lfa-summary" : ("remote_lfa_summary", Rcmd.Ldp.RemoteLfaSummaries.RemoteLfaSummary)}

                self.remote_lfa_summary = YList(self)
                self._segment_path = lambda: "remote-lfa-summaries"
                self._absolute_path = lambda: "Cisco-IOS-XR-infra-rcmd-oper:rcmd/ldp/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Rcmd.Ldp.RemoteLfaSummaries, [], name, value)


            class RemoteLfaSummary(Entity):
                """
                Summary operational data for Remote LFA
                
                .. attribute:: event_id  <key>
                
                	Specific Event ID
                	**type**\:  int
                
                	**range:** 1..4294967295
                
                .. attribute:: below_threshold
                
                	Coverage Below Threshold
                	**type**\:  bool
                
                .. attribute:: end_of_calculation_time
                
                	End of IGP LFA Calculation Time (eg\: Apr 24 13 \:16\:04.961)
                	**type**\:  str
                
                .. attribute:: event_id_xr
                
                	LDP\-rLFA Event ID
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: igp_protocol
                
                	IGP Protocol
                	**type**\:   :py:class:`RcmdProtocolId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdProtocolId>`
                
                .. attribute:: ipfrr_event_id
                
                	IGP IP\-FRR Event ID (ref\: rcmd\_show\_ipfrr\_event\_info(EventID))
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: logs
                
                	Logs Information
                	**type**\: list of    :py:class:`Logs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ldp.RemoteLfaSummaries.RemoteLfaSummary.Logs>`
                
                .. attribute:: process_name
                
                	Process Name
                	**type**\:  str
                
                .. attribute:: remote_node
                
                	Remote Node Information
                	**type**\: list of    :py:class:`RemoteNode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ldp.RemoteLfaSummaries.RemoteLfaSummary.RemoteNode>`
                
                .. attribute:: session_statistic
                
                	RLFA Statistics categorized by session state
                	**type**\: list of    :py:class:`SessionStatistic <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ldp.RemoteLfaSummaries.RemoteLfaSummary.SessionStatistic>`
                
                

                """

                _prefix = 'infra-rcmd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Rcmd.Ldp.RemoteLfaSummaries.RemoteLfaSummary, self).__init__()

                    self.yang_name = "remote-lfa-summary"
                    self.yang_parent_name = "remote-lfa-summaries"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self._child_container_classes = {}
                    self._child_list_classes = {"logs" : ("logs", Rcmd.Ldp.RemoteLfaSummaries.RemoteLfaSummary.Logs), "remote-node" : ("remote_node", Rcmd.Ldp.RemoteLfaSummaries.RemoteLfaSummary.RemoteNode), "session-statistic" : ("session_statistic", Rcmd.Ldp.RemoteLfaSummaries.RemoteLfaSummary.SessionStatistic)}

                    self.event_id = YLeaf(YType.uint32, "event-id")

                    self.below_threshold = YLeaf(YType.boolean, "below-threshold")

                    self.end_of_calculation_time = YLeaf(YType.str, "end-of-calculation-time")

                    self.event_id_xr = YLeaf(YType.uint32, "event-id-xr")

                    self.igp_protocol = YLeaf(YType.enumeration, "igp-protocol")

                    self.ipfrr_event_id = YLeaf(YType.uint32, "ipfrr-event-id")

                    self.process_name = YLeaf(YType.str, "process-name")

                    self.logs = YList(self)
                    self.remote_node = YList(self)
                    self.session_statistic = YList(self)
                    self._segment_path = lambda: "remote-lfa-summary" + "[event-id='" + self.event_id.get() + "']"
                    self._absolute_path = lambda: "Cisco-IOS-XR-infra-rcmd-oper:rcmd/ldp/remote-lfa-summaries/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rcmd.Ldp.RemoteLfaSummaries.RemoteLfaSummary, ['event_id', 'below_threshold', 'end_of_calculation_time', 'event_id_xr', 'igp_protocol', 'ipfrr_event_id', 'process_name'], name, value)


                class Logs(Entity):
                    """
                    Logs Information
                    
                    .. attribute:: label_coverage_state
                    
                    	Label Coverage State
                    	**type**\:   :py:class:`RcmdShowLdpConvState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowLdpConvState>`
                    
                    .. attribute:: log_time
                    
                    	Event Time (eg\: Apr 24 13\:16\:04.961)
                    	**type**\:  str
                    
                    .. attribute:: remote_label_count
                    
                    	Remote Label Count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: route_count
                    
                    	Total Route Count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'infra-rcmd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Rcmd.Ldp.RemoteLfaSummaries.RemoteLfaSummary.Logs, self).__init__()

                        self.yang_name = "logs"
                        self.yang_parent_name = "remote-lfa-summary"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self._child_container_classes = {}
                        self._child_list_classes = {}

                        self.label_coverage_state = YLeaf(YType.enumeration, "label-coverage-state")

                        self.log_time = YLeaf(YType.str, "log-time")

                        self.remote_label_count = YLeaf(YType.uint32, "remote-label-count")

                        self.route_count = YLeaf(YType.uint32, "route-count")
                        self._segment_path = lambda: "logs"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rcmd.Ldp.RemoteLfaSummaries.RemoteLfaSummary.Logs, ['label_coverage_state', 'log_time', 'remote_label_count', 'route_count'], name, value)


                class RemoteNode(Entity):
                    """
                    Remote Node Information
                    
                    .. attribute:: in_use_time
                    
                    	Inuse time of the Session
                    	**type**\:  str
                    
                    .. attribute:: lsr_id
                    
                    	Label Space Router ID
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: path_count
                    
                    	Total Path Count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: protected_path_count
                    
                    	Protected Path Count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: protected_route_count
                    
                    	Protected Route Count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: remote_label_count
                    
                    	Remote Label Count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: remote_node_id
                    
                    	Remote Node ID
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: route_count
                    
                    	Total Route Count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: session_state
                    
                    	Session State
                    	**type**\:   :py:class:`RcmdShowLdpSessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowLdpSessionState>`
                    
                    .. attribute:: transport_address
                    
                    	Transport Address
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    

                    """

                    _prefix = 'infra-rcmd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Rcmd.Ldp.RemoteLfaSummaries.RemoteLfaSummary.RemoteNode, self).__init__()

                        self.yang_name = "remote-node"
                        self.yang_parent_name = "remote-lfa-summary"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self._child_container_classes = {}
                        self._child_list_classes = {}

                        self.in_use_time = YLeaf(YType.str, "in-use-time")

                        self.lsr_id = YLeaf(YType.str, "lsr-id")

                        self.path_count = YLeaf(YType.uint32, "path-count")

                        self.protected_path_count = YLeaf(YType.uint32, "protected-path-count")

                        self.protected_route_count = YLeaf(YType.uint32, "protected-route-count")

                        self.remote_label_count = YLeaf(YType.uint32, "remote-label-count")

                        self.remote_node_id = YLeaf(YType.str, "remote-node-id")

                        self.route_count = YLeaf(YType.uint32, "route-count")

                        self.session_state = YLeaf(YType.enumeration, "session-state")

                        self.transport_address = YLeaf(YType.str, "transport-address")
                        self._segment_path = lambda: "remote-node"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rcmd.Ldp.RemoteLfaSummaries.RemoteLfaSummary.RemoteNode, ['in_use_time', 'lsr_id', 'path_count', 'protected_path_count', 'protected_route_count', 'remote_label_count', 'remote_node_id', 'route_count', 'session_state', 'transport_address'], name, value)


                class SessionStatistic(Entity):
                    """
                    RLFA Statistics categorized by session state
                    
                    .. attribute:: path_count
                    
                    	Total Path Count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: protected_path_count
                    
                    	Protected Path Count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: protected_route_count
                    
                    	Protected Route Count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: remote_label_count
                    
                    	Remote Label Count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: route_count
                    
                    	Total Route Count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: session_count
                    
                    	LDP Session Count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: session_state
                    
                    	Session State
                    	**type**\:   :py:class:`RcmdShowLdpSessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowLdpSessionState>`
                    
                    

                    """

                    _prefix = 'infra-rcmd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Rcmd.Ldp.RemoteLfaSummaries.RemoteLfaSummary.SessionStatistic, self).__init__()

                        self.yang_name = "session-statistic"
                        self.yang_parent_name = "remote-lfa-summary"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self._child_container_classes = {}
                        self._child_list_classes = {}

                        self.path_count = YLeaf(YType.uint32, "path-count")

                        self.protected_path_count = YLeaf(YType.uint32, "protected-path-count")

                        self.protected_route_count = YLeaf(YType.uint32, "protected-route-count")

                        self.remote_label_count = YLeaf(YType.uint32, "remote-label-count")

                        self.route_count = YLeaf(YType.uint32, "route-count")

                        self.session_count = YLeaf(YType.uint32, "session-count")

                        self.session_state = YLeaf(YType.enumeration, "session-state")
                        self._segment_path = lambda: "session-statistic"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rcmd.Ldp.RemoteLfaSummaries.RemoteLfaSummary.SessionStatistic, ['path_count', 'protected_path_count', 'protected_route_count', 'remote_label_count', 'route_count', 'session_count', 'session_state'], name, value)


        class Sessions(Entity):
            """
            Session Events
            
            .. attribute:: session
            
            	Session
            	**type**\: list of    :py:class:`Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ldp.Sessions.Session>`
            
            

            """

            _prefix = 'infra-rcmd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Rcmd.Ldp.Sessions, self).__init__()

                self.yang_name = "sessions"
                self.yang_parent_name = "ldp"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self._child_container_classes = {}
                self._child_list_classes = {"session" : ("session", Rcmd.Ldp.Sessions.Session)}

                self.session = YList(self)
                self._segment_path = lambda: "sessions"
                self._absolute_path = lambda: "Cisco-IOS-XR-infra-rcmd-oper:rcmd/ldp/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Rcmd.Ldp.Sessions, [], name, value)


            class Session(Entity):
                """
                Session
                
                .. attribute:: event_id  <key>
                
                	Specific Event ID
                	**type**\:  int
                
                	**range:** 1..4294967295
                
                .. attribute:: address
                
                	transport address or adjacency address
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: event_id_xr
                
                	Event ID
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: event_time
                
                	Event Time
                	**type**\:  str
                
                .. attribute:: event_type
                
                	Type of event
                	**type**\:   :py:class:`RcmdLdpEvent <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLdpEvent>`
                
                .. attribute:: interface_name
                
                	Interface Name
                	**type**\:  str
                
                .. attribute:: lsr_id
                
                	Label Space Router ID
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: state
                
                	Adjacency Session Status
                	**type**\:   :py:class:`RcmdShowLdpNeighbourStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowLdpNeighbourStatus>`
                
                

                """

                _prefix = 'infra-rcmd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Rcmd.Ldp.Sessions.Session, self).__init__()

                    self.yang_name = "session"
                    self.yang_parent_name = "sessions"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self._child_container_classes = {}
                    self._child_list_classes = {}

                    self.event_id = YLeaf(YType.uint32, "event-id")

                    self.address = YLeaf(YType.str, "address")

                    self.event_id_xr = YLeaf(YType.uint32, "event-id-xr")

                    self.event_time = YLeaf(YType.str, "event-time")

                    self.event_type = YLeaf(YType.enumeration, "event-type")

                    self.interface_name = YLeaf(YType.str, "interface-name")

                    self.lsr_id = YLeaf(YType.str, "lsr-id")

                    self.state = YLeaf(YType.enumeration, "state")
                    self._segment_path = lambda: "session" + "[event-id='" + self.event_id.get() + "']"
                    self._absolute_path = lambda: "Cisco-IOS-XR-infra-rcmd-oper:rcmd/ldp/sessions/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rcmd.Ldp.Sessions.Session, ['event_id', 'address', 'event_id_xr', 'event_time', 'event_type', 'interface_name', 'lsr_id', 'state'], name, value)


    class Memory(Entity):
        """
        Memory Info
        
        .. attribute:: edm_memory_info
        
        	Memory Info
        	**type**\: list of    :py:class:`EdmMemoryInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Memory.EdmMemoryInfo>`
        
        .. attribute:: memory_info
        
        	Memory Info
        	**type**\: list of    :py:class:`MemoryInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Memory.MemoryInfo>`
        
        .. attribute:: string_memory_info
        
        	Memory Info
        	**type**\: list of    :py:class:`StringMemoryInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Memory.StringMemoryInfo>`
        
        

        """

        _prefix = 'infra-rcmd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Rcmd.Memory, self).__init__()

            self.yang_name = "memory"
            self.yang_parent_name = "rcmd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self._child_container_classes = {}
            self._child_list_classes = {"edm-memory-info" : ("edm_memory_info", Rcmd.Memory.EdmMemoryInfo), "memory-info" : ("memory_info", Rcmd.Memory.MemoryInfo), "string-memory-info" : ("string_memory_info", Rcmd.Memory.StringMemoryInfo)}

            self.edm_memory_info = YList(self)
            self.memory_info = YList(self)
            self.string_memory_info = YList(self)
            self._segment_path = lambda: "memory"
            self._absolute_path = lambda: "Cisco-IOS-XR-infra-rcmd-oper:rcmd/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Rcmd.Memory, [], name, value)


        class EdmMemoryInfo(Entity):
            """
            Memory Info
            
            .. attribute:: failure
            
            	Cache\-hit failure
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: size
            
            	Size of the block
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: success
            
            	Cache\-hit success
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: total
            
            	Total request
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'infra-rcmd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Rcmd.Memory.EdmMemoryInfo, self).__init__()

                self.yang_name = "edm-memory-info"
                self.yang_parent_name = "memory"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self._child_container_classes = {}
                self._child_list_classes = {}

                self.failure = YLeaf(YType.uint32, "failure")

                self.size = YLeaf(YType.uint32, "size")

                self.success = YLeaf(YType.uint32, "success")

                self.total = YLeaf(YType.uint32, "total")
                self._segment_path = lambda: "edm-memory-info"
                self._absolute_path = lambda: "Cisco-IOS-XR-infra-rcmd-oper:rcmd/memory/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Rcmd.Memory.EdmMemoryInfo, ['failure', 'size', 'success', 'total'], name, value)


        class MemoryInfo(Entity):
            """
            Memory Info
            
            .. attribute:: alloc_count
            
            	Allocated count
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: alloc_fails
            
            	Allocation Fails
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: current_count
            
            	Current Count
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: freed_count
            
            	Freed Count
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: memory_type
            
            	Memory Type
            	**type**\:   :py:class:`RcmdShowMem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowMem>`
            
            .. attribute:: size
            
            	Size of the datastructure
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: structure_name
            
            	Structure Name
            	**type**\:  str
            
            

            """

            _prefix = 'infra-rcmd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Rcmd.Memory.MemoryInfo, self).__init__()

                self.yang_name = "memory-info"
                self.yang_parent_name = "memory"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self._child_container_classes = {}
                self._child_list_classes = {}

                self.alloc_count = YLeaf(YType.uint32, "alloc-count")

                self.alloc_fails = YLeaf(YType.uint32, "alloc-fails")

                self.current_count = YLeaf(YType.uint32, "current-count")

                self.freed_count = YLeaf(YType.uint32, "freed-count")

                self.memory_type = YLeaf(YType.enumeration, "memory-type")

                self.size = YLeaf(YType.uint32, "size")

                self.structure_name = YLeaf(YType.str, "structure-name")
                self._segment_path = lambda: "memory-info"
                self._absolute_path = lambda: "Cisco-IOS-XR-infra-rcmd-oper:rcmd/memory/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Rcmd.Memory.MemoryInfo, ['alloc_count', 'alloc_fails', 'current_count', 'freed_count', 'memory_type', 'size', 'structure_name'], name, value)


        class StringMemoryInfo(Entity):
            """
            Memory Info
            
            .. attribute:: failure
            
            	Cache\-hit failure
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: size
            
            	Size of the block
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: success
            
            	Cache\-hit success
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: total
            
            	Total request
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'infra-rcmd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Rcmd.Memory.StringMemoryInfo, self).__init__()

                self.yang_name = "string-memory-info"
                self.yang_parent_name = "memory"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self._child_container_classes = {}
                self._child_list_classes = {}

                self.failure = YLeaf(YType.uint32, "failure")

                self.size = YLeaf(YType.uint32, "size")

                self.success = YLeaf(YType.uint32, "success")

                self.total = YLeaf(YType.uint32, "total")
                self._segment_path = lambda: "string-memory-info"
                self._absolute_path = lambda: "Cisco-IOS-XR-infra-rcmd-oper:rcmd/memory/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Rcmd.Memory.StringMemoryInfo, ['failure', 'size', 'success', 'total'], name, value)


    class Node(Entity):
        """
        Node Info
        
        .. attribute:: node_information
        
        	Node Info
        	**type**\: list of    :py:class:`NodeInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Node.NodeInformation>`
        
        

        """

        _prefix = 'infra-rcmd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Rcmd.Node, self).__init__()

            self.yang_name = "node"
            self.yang_parent_name = "rcmd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self._child_container_classes = {}
            self._child_list_classes = {"node-information" : ("node_information", Rcmd.Node.NodeInformation)}

            self.node_information = YList(self)
            self._segment_path = lambda: "node"
            self._absolute_path = lambda: "Cisco-IOS-XR-infra-rcmd-oper:rcmd/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Rcmd.Node, [], name, value)


        class NodeInformation(Entity):
            """
            Node Info
            
            .. attribute:: card_state
            
            	Card State
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: diag_mode
            
            	Diag Mode
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: fwd_referenced
            
            	Forward Referenced
            	**type**\:   :py:class:`RcmdBoolYesNo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdBoolYesNo>`
            
            .. attribute:: last_update_time
            
            	Last Updated Time
            	**type**\:  str
            
            .. attribute:: node_id
            
            	Node Id
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: node_name
            
            	Node Name
            	**type**\:  str
            
            .. attribute:: node_state
            
            	Node State
            	**type**\:   :py:class:`RcmdBoolYesNo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdBoolYesNo>`
            
            .. attribute:: node_type
            
            	Node Type
            	**type**\:   :py:class:`RcmdShowNode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowNode>`
            
            .. attribute:: rack_id
            
            	Rack Id
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: redundancy_state
            
            	Redundancy State
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: software_state
            
            	Software State
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: status
            
            	Status
            	**type**\:   :py:class:`RcmdBagEnblDsbl <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdBagEnblDsbl>`
            
            

            """

            _prefix = 'infra-rcmd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Rcmd.Node.NodeInformation, self).__init__()

                self.yang_name = "node-information"
                self.yang_parent_name = "node"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self._child_container_classes = {}
                self._child_list_classes = {}

                self.card_state = YLeaf(YType.uint32, "card-state")

                self.diag_mode = YLeaf(YType.uint32, "diag-mode")

                self.fwd_referenced = YLeaf(YType.enumeration, "fwd-referenced")

                self.last_update_time = YLeaf(YType.str, "last-update-time")

                self.node_id = YLeaf(YType.uint32, "node-id")

                self.node_name = YLeaf(YType.str, "node-name")

                self.node_state = YLeaf(YType.enumeration, "node-state")

                self.node_type = YLeaf(YType.enumeration, "node-type")

                self.rack_id = YLeaf(YType.uint32, "rack-id")

                self.redundancy_state = YLeaf(YType.uint32, "redundancy-state")

                self.software_state = YLeaf(YType.uint32, "software-state")

                self.status = YLeaf(YType.enumeration, "status")
                self._segment_path = lambda: "node-information"
                self._absolute_path = lambda: "Cisco-IOS-XR-infra-rcmd-oper:rcmd/node/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Rcmd.Node.NodeInformation, ['card_state', 'diag_mode', 'fwd_referenced', 'last_update_time', 'node_id', 'node_name', 'node_state', 'node_type', 'rack_id', 'redundancy_state', 'software_state', 'status'], name, value)


    class Ospf(Entity):
        """
        Operational data for OSPF
        
        .. attribute:: instances
        
        	Operational data
        	**type**\:   :py:class:`Instances <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances>`
        
        

        """

        _prefix = 'infra-rcmd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Rcmd.Ospf, self).__init__()

            self.yang_name = "ospf"
            self.yang_parent_name = "rcmd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self._child_container_classes = {"instances" : ("instances", Rcmd.Ospf.Instances)}
            self._child_list_classes = {}

            self.instances = Rcmd.Ospf.Instances()
            self.instances.parent = self
            self._children_name_map["instances"] = "instances"
            self._children_yang_names.add("instances")
            self._segment_path = lambda: "ospf"
            self._absolute_path = lambda: "Cisco-IOS-XR-infra-rcmd-oper:rcmd/%s" % self._segment_path()


        class Instances(Entity):
            """
            Operational data
            
            .. attribute:: instance
            
            	Operational data for a particular instance
            	**type**\: list of    :py:class:`Instance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance>`
            
            

            """

            _prefix = 'infra-rcmd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Rcmd.Ospf.Instances, self).__init__()

                self.yang_name = "instances"
                self.yang_parent_name = "ospf"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self._child_container_classes = {}
                self._child_list_classes = {"instance" : ("instance", Rcmd.Ospf.Instances.Instance)}

                self.instance = YList(self)
                self._segment_path = lambda: "instances"
                self._absolute_path = lambda: "Cisco-IOS-XR-infra-rcmd-oper:rcmd/ospf/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Rcmd.Ospf.Instances, [], name, value)


            class Instance(Entity):
                """
                Operational data for a particular instance
                
                .. attribute:: instance_name  <key>
                
                	Operational data for a particular instance
                	**type**\:  str
                
                	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                
                .. attribute:: ipfrr_event_offlines
                
                	OSPF IP\-FRR Event offline data
                	**type**\:   :py:class:`IpfrrEventOfflines <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.IpfrrEventOfflines>`
                
                .. attribute:: ipfrr_event_summaries
                
                	OSPF IP\-FRR events summary data
                	**type**\:   :py:class:`IpfrrEventSummaries <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.IpfrrEventSummaries>`
                
                .. attribute:: prefix_event_offlines
                
                	OSPF Prefix events offline data
                	**type**\:   :py:class:`PrefixEventOfflines <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.PrefixEventOfflines>`
                
                .. attribute:: prefix_event_statistics
                
                	OSPF Prefix events summary data
                	**type**\:   :py:class:`PrefixEventStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.PrefixEventStatistics>`
                
                .. attribute:: prefix_event_summaries
                
                	OSPF Prefix events summary data
                	**type**\:   :py:class:`PrefixEventSummaries <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.PrefixEventSummaries>`
                
                .. attribute:: spf_run_offlines
                
                	OSPF SPF run offline data
                	**type**\:   :py:class:`SpfRunOfflines <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines>`
                
                .. attribute:: spf_run_summaries
                
                	OSPF SPF run summary data
                	**type**\:   :py:class:`SpfRunSummaries <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries>`
                
                .. attribute:: summary_external_event_offlines
                
                	OSPF Summary\-External Prefix events offline data
                	**type**\:   :py:class:`SummaryExternalEventOfflines <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines>`
                
                .. attribute:: summary_external_event_statistics
                
                	Summary\-External prefix monitoring statistics
                	**type**\:   :py:class:`SummaryExternalEventStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SummaryExternalEventStatistics>`
                
                .. attribute:: summary_external_event_summaries
                
                	OSPF Summary\-External Prefix events summary data
                	**type**\:   :py:class:`SummaryExternalEventSummaries <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries>`
                
                

                """

                _prefix = 'infra-rcmd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Rcmd.Ospf.Instances.Instance, self).__init__()

                    self.yang_name = "instance"
                    self.yang_parent_name = "instances"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self._child_container_classes = {"ipfrr-event-offlines" : ("ipfrr_event_offlines", Rcmd.Ospf.Instances.Instance.IpfrrEventOfflines), "ipfrr-event-summaries" : ("ipfrr_event_summaries", Rcmd.Ospf.Instances.Instance.IpfrrEventSummaries), "prefix-event-offlines" : ("prefix_event_offlines", Rcmd.Ospf.Instances.Instance.PrefixEventOfflines), "prefix-event-statistics" : ("prefix_event_statistics", Rcmd.Ospf.Instances.Instance.PrefixEventStatistics), "prefix-event-summaries" : ("prefix_event_summaries", Rcmd.Ospf.Instances.Instance.PrefixEventSummaries), "spf-run-offlines" : ("spf_run_offlines", Rcmd.Ospf.Instances.Instance.SpfRunOfflines), "spf-run-summaries" : ("spf_run_summaries", Rcmd.Ospf.Instances.Instance.SpfRunSummaries), "summary-external-event-offlines" : ("summary_external_event_offlines", Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines), "summary-external-event-statistics" : ("summary_external_event_statistics", Rcmd.Ospf.Instances.Instance.SummaryExternalEventStatistics), "summary-external-event-summaries" : ("summary_external_event_summaries", Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries)}
                    self._child_list_classes = {}

                    self.instance_name = YLeaf(YType.str, "instance-name")

                    self.ipfrr_event_offlines = Rcmd.Ospf.Instances.Instance.IpfrrEventOfflines()
                    self.ipfrr_event_offlines.parent = self
                    self._children_name_map["ipfrr_event_offlines"] = "ipfrr-event-offlines"
                    self._children_yang_names.add("ipfrr-event-offlines")

                    self.ipfrr_event_summaries = Rcmd.Ospf.Instances.Instance.IpfrrEventSummaries()
                    self.ipfrr_event_summaries.parent = self
                    self._children_name_map["ipfrr_event_summaries"] = "ipfrr-event-summaries"
                    self._children_yang_names.add("ipfrr-event-summaries")

                    self.prefix_event_offlines = Rcmd.Ospf.Instances.Instance.PrefixEventOfflines()
                    self.prefix_event_offlines.parent = self
                    self._children_name_map["prefix_event_offlines"] = "prefix-event-offlines"
                    self._children_yang_names.add("prefix-event-offlines")

                    self.prefix_event_statistics = Rcmd.Ospf.Instances.Instance.PrefixEventStatistics()
                    self.prefix_event_statistics.parent = self
                    self._children_name_map["prefix_event_statistics"] = "prefix-event-statistics"
                    self._children_yang_names.add("prefix-event-statistics")

                    self.prefix_event_summaries = Rcmd.Ospf.Instances.Instance.PrefixEventSummaries()
                    self.prefix_event_summaries.parent = self
                    self._children_name_map["prefix_event_summaries"] = "prefix-event-summaries"
                    self._children_yang_names.add("prefix-event-summaries")

                    self.spf_run_offlines = Rcmd.Ospf.Instances.Instance.SpfRunOfflines()
                    self.spf_run_offlines.parent = self
                    self._children_name_map["spf_run_offlines"] = "spf-run-offlines"
                    self._children_yang_names.add("spf-run-offlines")

                    self.spf_run_summaries = Rcmd.Ospf.Instances.Instance.SpfRunSummaries()
                    self.spf_run_summaries.parent = self
                    self._children_name_map["spf_run_summaries"] = "spf-run-summaries"
                    self._children_yang_names.add("spf-run-summaries")

                    self.summary_external_event_offlines = Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines()
                    self.summary_external_event_offlines.parent = self
                    self._children_name_map["summary_external_event_offlines"] = "summary-external-event-offlines"
                    self._children_yang_names.add("summary-external-event-offlines")

                    self.summary_external_event_statistics = Rcmd.Ospf.Instances.Instance.SummaryExternalEventStatistics()
                    self.summary_external_event_statistics.parent = self
                    self._children_name_map["summary_external_event_statistics"] = "summary-external-event-statistics"
                    self._children_yang_names.add("summary-external-event-statistics")

                    self.summary_external_event_summaries = Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries()
                    self.summary_external_event_summaries.parent = self
                    self._children_name_map["summary_external_event_summaries"] = "summary-external-event-summaries"
                    self._children_yang_names.add("summary-external-event-summaries")
                    self._segment_path = lambda: "instance" + "[instance-name='" + self.instance_name.get() + "']"
                    self._absolute_path = lambda: "Cisco-IOS-XR-infra-rcmd-oper:rcmd/ospf/instances/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rcmd.Ospf.Instances.Instance, ['instance_name'], name, value)


                class IpfrrEventOfflines(Entity):
                    """
                    OSPF IP\-FRR Event offline data
                    
                    .. attribute:: ipfrr_event_offline
                    
                    	Offline operational data for particular OSPF IP\-FRR Event
                    	**type**\: list of    :py:class:`IpfrrEventOffline <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.IpfrrEventOfflines.IpfrrEventOffline>`
                    
                    

                    """

                    _prefix = 'infra-rcmd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Rcmd.Ospf.Instances.Instance.IpfrrEventOfflines, self).__init__()

                        self.yang_name = "ipfrr-event-offlines"
                        self.yang_parent_name = "instance"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self._child_container_classes = {}
                        self._child_list_classes = {"ipfrr-event-offline" : ("ipfrr_event_offline", Rcmd.Ospf.Instances.Instance.IpfrrEventOfflines.IpfrrEventOffline)}

                        self.ipfrr_event_offline = YList(self)
                        self._segment_path = lambda: "ipfrr-event-offlines"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rcmd.Ospf.Instances.Instance.IpfrrEventOfflines, [], name, value)


                    class IpfrrEventOffline(Entity):
                        """
                        Offline operational data for particular OSPF
                        IP\-FRR Event
                        
                        .. attribute:: event_id  <key>
                        
                        	Specific IP\-FRR Event
                        	**type**\:  int
                        
                        	**range:** 1..4294967295
                        
                        .. attribute:: completed_spf_run
                        
                        	IP\-Frr Completed reference SPF Run Number
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: coverage
                        
                        	Coverage in percentage for all priorities
                        	**type**\:  str
                        
                        	**units**\: percentage
                        
                        .. attribute:: duration
                        
                        	Duration for the calculation (in milliseconds)
                        	**type**\:  str
                        
                        	**units**\: millisecond
                        
                        .. attribute:: event_id_xr
                        
                        	IP\-Frr Event ID
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: fully_protected_routes
                        
                        	Cumulative Number of Fully Protected Routes
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: ipfrr_statistic
                        
                        	IP\-Frr Statistics categorized by priority
                        	**type**\: list of    :py:class:`IpfrrStatistic <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.IpfrrEventOfflines.IpfrrEventOffline.IpfrrStatistic>`
                        
                        .. attribute:: partially_protected_routes
                        
                        	Cumulative Number of Partially Protected Routes
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: remote_node
                        
                        	Remote Node Information
                        	**type**\: list of    :py:class:`RemoteNode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.IpfrrEventOfflines.IpfrrEventOffline.RemoteNode>`
                        
                        .. attribute:: start_time_offset
                        
                        	Start Time offset from trigger time (in milliseconds)
                        	**type**\:  str
                        
                        	**units**\: millisecond
                        
                        .. attribute:: total_routes
                        
                        	Cumulative Number of Routes for all priorities
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: trigger_spf_run
                        
                        	IP\-Frr Triggered reference SPF Run Number
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: trigger_time
                        
                        	Trigger time  (eg\: Apr 24 13\:16\:04.961)
                        	**type**\:  str
                        
                        .. attribute:: wait_time
                        
                        	Waiting Time (in milliseconds)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: millisecond
                        
                        

                        """

                        _prefix = 'infra-rcmd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Rcmd.Ospf.Instances.Instance.IpfrrEventOfflines.IpfrrEventOffline, self).__init__()

                            self.yang_name = "ipfrr-event-offline"
                            self.yang_parent_name = "ipfrr-event-offlines"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self._child_container_classes = {}
                            self._child_list_classes = {"ipfrr-statistic" : ("ipfrr_statistic", Rcmd.Ospf.Instances.Instance.IpfrrEventOfflines.IpfrrEventOffline.IpfrrStatistic), "remote-node" : ("remote_node", Rcmd.Ospf.Instances.Instance.IpfrrEventOfflines.IpfrrEventOffline.RemoteNode)}

                            self.event_id = YLeaf(YType.uint32, "event-id")

                            self.completed_spf_run = YLeaf(YType.uint32, "completed-spf-run")

                            self.coverage = YLeaf(YType.str, "coverage")

                            self.duration = YLeaf(YType.str, "duration")

                            self.event_id_xr = YLeaf(YType.uint32, "event-id-xr")

                            self.fully_protected_routes = YLeaf(YType.uint32, "fully-protected-routes")

                            self.partially_protected_routes = YLeaf(YType.uint32, "partially-protected-routes")

                            self.start_time_offset = YLeaf(YType.str, "start-time-offset")

                            self.total_routes = YLeaf(YType.uint32, "total-routes")

                            self.trigger_spf_run = YLeaf(YType.uint32, "trigger-spf-run")

                            self.trigger_time = YLeaf(YType.str, "trigger-time")

                            self.wait_time = YLeaf(YType.uint32, "wait-time")

                            self.ipfrr_statistic = YList(self)
                            self.remote_node = YList(self)
                            self._segment_path = lambda: "ipfrr-event-offline" + "[event-id='" + self.event_id.get() + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rcmd.Ospf.Instances.Instance.IpfrrEventOfflines.IpfrrEventOffline, ['event_id', 'completed_spf_run', 'coverage', 'duration', 'event_id_xr', 'fully_protected_routes', 'partially_protected_routes', 'start_time_offset', 'total_routes', 'trigger_spf_run', 'trigger_time', 'wait_time'], name, value)


                        class IpfrrStatistic(Entity):
                            """
                            IP\-Frr Statistics categorized by priority
                            
                            .. attribute:: below_threshold
                            
                            	Covearge is below Configured Threshold
                            	**type**\:  bool
                            
                            .. attribute:: coverage
                            
                            	Coverage in percentage
                            	**type**\:  str
                            
                            	**units**\: percentage
                            
                            .. attribute:: fully_protected_routes
                            
                            	Fully Protected Routes
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: local_lfa_coverage
                            
                            	Local LFA Coverage in percentage
                            	**type**\:  str
                            
                            	**units**\: percentage
                            
                            .. attribute:: partially_protected_routes
                            
                            	Partially Protected Routes
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: priority
                            
                            	Priority
                            	**type**\:   :py:class:`RcmdPriorityLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdPriorityLevel>`
                            
                            .. attribute:: remote_lfa_coverage
                            
                            	Remote LFA Coverage in percentage
                            	**type**\:  str
                            
                            	**units**\: percentage
                            
                            .. attribute:: total_routes
                            
                            	Total Number of Routes
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Rcmd.Ospf.Instances.Instance.IpfrrEventOfflines.IpfrrEventOffline.IpfrrStatistic, self).__init__()

                                self.yang_name = "ipfrr-statistic"
                                self.yang_parent_name = "ipfrr-event-offline"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {}

                                self.below_threshold = YLeaf(YType.boolean, "below-threshold")

                                self.coverage = YLeaf(YType.str, "coverage")

                                self.fully_protected_routes = YLeaf(YType.uint32, "fully-protected-routes")

                                self.local_lfa_coverage = YLeaf(YType.str, "local-lfa-coverage")

                                self.partially_protected_routes = YLeaf(YType.uint32, "partially-protected-routes")

                                self.priority = YLeaf(YType.enumeration, "priority")

                                self.remote_lfa_coverage = YLeaf(YType.str, "remote-lfa-coverage")

                                self.total_routes = YLeaf(YType.uint32, "total-routes")
                                self._segment_path = lambda: "ipfrr-statistic"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rcmd.Ospf.Instances.Instance.IpfrrEventOfflines.IpfrrEventOffline.IpfrrStatistic, ['below_threshold', 'coverage', 'fully_protected_routes', 'local_lfa_coverage', 'partially_protected_routes', 'priority', 'remote_lfa_coverage', 'total_routes'], name, value)


                        class RemoteNode(Entity):
                            """
                            Remote Node Information
                            
                            .. attribute:: in_use_time
                            
                            	Inuse time of the Remote Node (eg\: Apr 24 13\:16 \:04.961)
                            	**type**\:  str
                            
                            .. attribute:: interface_name
                            
                            	Interface Name
                            	**type**\:  str
                            
                            .. attribute:: neighbour_address
                            
                            	Nexthop Address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: path_count
                            
                            	Number of paths protected by this Remote Node
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: primary_path
                            
                            	Protected Primary Paths
                            	**type**\: list of    :py:class:`PrimaryPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.IpfrrEventOfflines.IpfrrEventOffline.RemoteNode.PrimaryPath>`
                            
                            .. attribute:: remote_node_id
                            
                            	Remote\-LFA Node ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Rcmd.Ospf.Instances.Instance.IpfrrEventOfflines.IpfrrEventOffline.RemoteNode, self).__init__()

                                self.yang_name = "remote-node"
                                self.yang_parent_name = "ipfrr-event-offline"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {"primary-path" : ("primary_path", Rcmd.Ospf.Instances.Instance.IpfrrEventOfflines.IpfrrEventOffline.RemoteNode.PrimaryPath)}

                                self.in_use_time = YLeaf(YType.str, "in-use-time")

                                self.interface_name = YLeaf(YType.str, "interface-name")

                                self.neighbour_address = YLeaf(YType.str, "neighbour-address")

                                self.path_count = YLeaf(YType.uint32, "path-count")

                                self.remote_node_id = YLeaf(YType.str, "remote-node-id")

                                self.primary_path = YList(self)
                                self._segment_path = lambda: "remote-node"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rcmd.Ospf.Instances.Instance.IpfrrEventOfflines.IpfrrEventOffline.RemoteNode, ['in_use_time', 'interface_name', 'neighbour_address', 'path_count', 'remote_node_id'], name, value)


                            class PrimaryPath(Entity):
                                """
                                Protected Primary Paths
                                
                                .. attribute:: interface_name
                                
                                	Interface Name
                                	**type**\:  str
                                
                                .. attribute:: neighbour_address
                                
                                	Nexthop Address
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Rcmd.Ospf.Instances.Instance.IpfrrEventOfflines.IpfrrEventOffline.RemoteNode.PrimaryPath, self).__init__()

                                    self.yang_name = "primary-path"
                                    self.yang_parent_name = "remote-node"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {}
                                    self._child_list_classes = {}

                                    self.interface_name = YLeaf(YType.str, "interface-name")

                                    self.neighbour_address = YLeaf(YType.str, "neighbour-address")
                                    self._segment_path = lambda: "primary-path"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Rcmd.Ospf.Instances.Instance.IpfrrEventOfflines.IpfrrEventOffline.RemoteNode.PrimaryPath, ['interface_name', 'neighbour_address'], name, value)


                class IpfrrEventSummaries(Entity):
                    """
                    OSPF IP\-FRR events summary data
                    
                    .. attribute:: ipfrr_event_summary
                    
                    	IP\-FRR Event data
                    	**type**\: list of    :py:class:`IpfrrEventSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.IpfrrEventSummaries.IpfrrEventSummary>`
                    
                    

                    """

                    _prefix = 'infra-rcmd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Rcmd.Ospf.Instances.Instance.IpfrrEventSummaries, self).__init__()

                        self.yang_name = "ipfrr-event-summaries"
                        self.yang_parent_name = "instance"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self._child_container_classes = {}
                        self._child_list_classes = {"ipfrr-event-summary" : ("ipfrr_event_summary", Rcmd.Ospf.Instances.Instance.IpfrrEventSummaries.IpfrrEventSummary)}

                        self.ipfrr_event_summary = YList(self)
                        self._segment_path = lambda: "ipfrr-event-summaries"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rcmd.Ospf.Instances.Instance.IpfrrEventSummaries, [], name, value)


                    class IpfrrEventSummary(Entity):
                        """
                        IP\-FRR Event data
                        
                        .. attribute:: event_id  <key>
                        
                        	Specific IP\-FRR Event
                        	**type**\:  int
                        
                        	**range:** 1..4294967295
                        
                        .. attribute:: completed_spf_run
                        
                        	IP\-Frr Completed reference SPF Run Number
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: coverage
                        
                        	Coverage in percentage for all priorities
                        	**type**\:  str
                        
                        	**units**\: percentage
                        
                        .. attribute:: duration
                        
                        	Duration for the calculation (in milliseconds)
                        	**type**\:  str
                        
                        	**units**\: millisecond
                        
                        .. attribute:: event_id_xr
                        
                        	IP\-Frr Event ID
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: fully_protected_routes
                        
                        	Cumulative Number of Fully Protected Routes
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: ipfrr_statistic
                        
                        	IP\-Frr Statistics categorized by priority
                        	**type**\: list of    :py:class:`IpfrrStatistic <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.IpfrrEventSummaries.IpfrrEventSummary.IpfrrStatistic>`
                        
                        .. attribute:: partially_protected_routes
                        
                        	Cumulative Number of Partially Protected Routes
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: remote_node
                        
                        	Remote Node Information
                        	**type**\: list of    :py:class:`RemoteNode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.IpfrrEventSummaries.IpfrrEventSummary.RemoteNode>`
                        
                        .. attribute:: start_time_offset
                        
                        	Start Time offset from trigger time (in milliseconds)
                        	**type**\:  str
                        
                        	**units**\: millisecond
                        
                        .. attribute:: total_routes
                        
                        	Cumulative Number of Routes for all priorities
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: trigger_spf_run
                        
                        	IP\-Frr Triggered reference SPF Run Number
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: trigger_time
                        
                        	Trigger time  (eg\: Apr 24 13\:16\:04.961)
                        	**type**\:  str
                        
                        .. attribute:: wait_time
                        
                        	Waiting Time (in milliseconds)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: millisecond
                        
                        

                        """

                        _prefix = 'infra-rcmd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Rcmd.Ospf.Instances.Instance.IpfrrEventSummaries.IpfrrEventSummary, self).__init__()

                            self.yang_name = "ipfrr-event-summary"
                            self.yang_parent_name = "ipfrr-event-summaries"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self._child_container_classes = {}
                            self._child_list_classes = {"ipfrr-statistic" : ("ipfrr_statistic", Rcmd.Ospf.Instances.Instance.IpfrrEventSummaries.IpfrrEventSummary.IpfrrStatistic), "remote-node" : ("remote_node", Rcmd.Ospf.Instances.Instance.IpfrrEventSummaries.IpfrrEventSummary.RemoteNode)}

                            self.event_id = YLeaf(YType.uint32, "event-id")

                            self.completed_spf_run = YLeaf(YType.uint32, "completed-spf-run")

                            self.coverage = YLeaf(YType.str, "coverage")

                            self.duration = YLeaf(YType.str, "duration")

                            self.event_id_xr = YLeaf(YType.uint32, "event-id-xr")

                            self.fully_protected_routes = YLeaf(YType.uint32, "fully-protected-routes")

                            self.partially_protected_routes = YLeaf(YType.uint32, "partially-protected-routes")

                            self.start_time_offset = YLeaf(YType.str, "start-time-offset")

                            self.total_routes = YLeaf(YType.uint32, "total-routes")

                            self.trigger_spf_run = YLeaf(YType.uint32, "trigger-spf-run")

                            self.trigger_time = YLeaf(YType.str, "trigger-time")

                            self.wait_time = YLeaf(YType.uint32, "wait-time")

                            self.ipfrr_statistic = YList(self)
                            self.remote_node = YList(self)
                            self._segment_path = lambda: "ipfrr-event-summary" + "[event-id='" + self.event_id.get() + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rcmd.Ospf.Instances.Instance.IpfrrEventSummaries.IpfrrEventSummary, ['event_id', 'completed_spf_run', 'coverage', 'duration', 'event_id_xr', 'fully_protected_routes', 'partially_protected_routes', 'start_time_offset', 'total_routes', 'trigger_spf_run', 'trigger_time', 'wait_time'], name, value)


                        class IpfrrStatistic(Entity):
                            """
                            IP\-Frr Statistics categorized by priority
                            
                            .. attribute:: below_threshold
                            
                            	Covearge is below Configured Threshold
                            	**type**\:  bool
                            
                            .. attribute:: coverage
                            
                            	Coverage in percentage
                            	**type**\:  str
                            
                            	**units**\: percentage
                            
                            .. attribute:: fully_protected_routes
                            
                            	Fully Protected Routes
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: local_lfa_coverage
                            
                            	Local LFA Coverage in percentage
                            	**type**\:  str
                            
                            	**units**\: percentage
                            
                            .. attribute:: partially_protected_routes
                            
                            	Partially Protected Routes
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: priority
                            
                            	Priority
                            	**type**\:   :py:class:`RcmdPriorityLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdPriorityLevel>`
                            
                            .. attribute:: remote_lfa_coverage
                            
                            	Remote LFA Coverage in percentage
                            	**type**\:  str
                            
                            	**units**\: percentage
                            
                            .. attribute:: total_routes
                            
                            	Total Number of Routes
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Rcmd.Ospf.Instances.Instance.IpfrrEventSummaries.IpfrrEventSummary.IpfrrStatistic, self).__init__()

                                self.yang_name = "ipfrr-statistic"
                                self.yang_parent_name = "ipfrr-event-summary"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {}

                                self.below_threshold = YLeaf(YType.boolean, "below-threshold")

                                self.coverage = YLeaf(YType.str, "coverage")

                                self.fully_protected_routes = YLeaf(YType.uint32, "fully-protected-routes")

                                self.local_lfa_coverage = YLeaf(YType.str, "local-lfa-coverage")

                                self.partially_protected_routes = YLeaf(YType.uint32, "partially-protected-routes")

                                self.priority = YLeaf(YType.enumeration, "priority")

                                self.remote_lfa_coverage = YLeaf(YType.str, "remote-lfa-coverage")

                                self.total_routes = YLeaf(YType.uint32, "total-routes")
                                self._segment_path = lambda: "ipfrr-statistic"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rcmd.Ospf.Instances.Instance.IpfrrEventSummaries.IpfrrEventSummary.IpfrrStatistic, ['below_threshold', 'coverage', 'fully_protected_routes', 'local_lfa_coverage', 'partially_protected_routes', 'priority', 'remote_lfa_coverage', 'total_routes'], name, value)


                        class RemoteNode(Entity):
                            """
                            Remote Node Information
                            
                            .. attribute:: in_use_time
                            
                            	Inuse time of the Remote Node (eg\: Apr 24 13\:16 \:04.961)
                            	**type**\:  str
                            
                            .. attribute:: interface_name
                            
                            	Interface Name
                            	**type**\:  str
                            
                            .. attribute:: neighbour_address
                            
                            	Nexthop Address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: path_count
                            
                            	Number of paths protected by this Remote Node
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: primary_path
                            
                            	Protected Primary Paths
                            	**type**\: list of    :py:class:`PrimaryPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.IpfrrEventSummaries.IpfrrEventSummary.RemoteNode.PrimaryPath>`
                            
                            .. attribute:: remote_node_id
                            
                            	Remote\-LFA Node ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Rcmd.Ospf.Instances.Instance.IpfrrEventSummaries.IpfrrEventSummary.RemoteNode, self).__init__()

                                self.yang_name = "remote-node"
                                self.yang_parent_name = "ipfrr-event-summary"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {"primary-path" : ("primary_path", Rcmd.Ospf.Instances.Instance.IpfrrEventSummaries.IpfrrEventSummary.RemoteNode.PrimaryPath)}

                                self.in_use_time = YLeaf(YType.str, "in-use-time")

                                self.interface_name = YLeaf(YType.str, "interface-name")

                                self.neighbour_address = YLeaf(YType.str, "neighbour-address")

                                self.path_count = YLeaf(YType.uint32, "path-count")

                                self.remote_node_id = YLeaf(YType.str, "remote-node-id")

                                self.primary_path = YList(self)
                                self._segment_path = lambda: "remote-node"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rcmd.Ospf.Instances.Instance.IpfrrEventSummaries.IpfrrEventSummary.RemoteNode, ['in_use_time', 'interface_name', 'neighbour_address', 'path_count', 'remote_node_id'], name, value)


                            class PrimaryPath(Entity):
                                """
                                Protected Primary Paths
                                
                                .. attribute:: interface_name
                                
                                	Interface Name
                                	**type**\:  str
                                
                                .. attribute:: neighbour_address
                                
                                	Nexthop Address
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Rcmd.Ospf.Instances.Instance.IpfrrEventSummaries.IpfrrEventSummary.RemoteNode.PrimaryPath, self).__init__()

                                    self.yang_name = "primary-path"
                                    self.yang_parent_name = "remote-node"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {}
                                    self._child_list_classes = {}

                                    self.interface_name = YLeaf(YType.str, "interface-name")

                                    self.neighbour_address = YLeaf(YType.str, "neighbour-address")
                                    self._segment_path = lambda: "primary-path"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Rcmd.Ospf.Instances.Instance.IpfrrEventSummaries.IpfrrEventSummary.RemoteNode.PrimaryPath, ['interface_name', 'neighbour_address'], name, value)


                class PrefixEventOfflines(Entity):
                    """
                    OSPF Prefix events offline data
                    
                    .. attribute:: prefix_event_offline
                    
                    	Offline operational data for particular OSPF Prefix Event
                    	**type**\: list of    :py:class:`PrefixEventOffline <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.PrefixEventOfflines.PrefixEventOffline>`
                    
                    

                    """

                    _prefix = 'infra-rcmd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Rcmd.Ospf.Instances.Instance.PrefixEventOfflines, self).__init__()

                        self.yang_name = "prefix-event-offlines"
                        self.yang_parent_name = "instance"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self._child_container_classes = {}
                        self._child_list_classes = {"prefix-event-offline" : ("prefix_event_offline", Rcmd.Ospf.Instances.Instance.PrefixEventOfflines.PrefixEventOffline)}

                        self.prefix_event_offline = YList(self)
                        self._segment_path = lambda: "prefix-event-offlines"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rcmd.Ospf.Instances.Instance.PrefixEventOfflines, [], name, value)


                    class PrefixEventOffline(Entity):
                        """
                        Offline operational data for particular OSPF
                        Prefix Event
                        
                        .. attribute:: event_id  <key>
                        
                        	Specific Event ID
                        	**type**\:  int
                        
                        	**range:** 1..4294967295
                        
                        .. attribute:: change_type
                        
                        	Event Add/Delete
                        	**type**\:   :py:class:`RcmdChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdChange>`
                        
                        .. attribute:: cost
                        
                        	Protocol route cost
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: ip_convergence_time
                        
                        	Convergence time for IP route programming
                        	**type**\:   :py:class:`IpConvergenceTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.IpConvergenceTime>`
                        
                        .. attribute:: ipfrr_event_id
                        
                        	Referenced IP\-FRR Event ID (0 \- Not Applicable)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: lsa_processed
                        
                        	List of LSAs processed
                        	**type**\: list of    :py:class:`LsaProcessed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.LsaProcessed>`
                        
                        .. attribute:: mpls_convergence_time
                        
                        	Convergence time for MPLS label programming
                        	**type**\:   :py:class:`MplsConvergenceTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.MplsConvergenceTime>`
                        
                        .. attribute:: path
                        
                        	Path information
                        	**type**\: list of    :py:class:`Path <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.Path>`
                        
                        .. attribute:: prefix
                        
                        	Prefix
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: prefix_lenth
                        
                        	Prefix length
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: priority
                        
                        	Event processed priority
                        	**type**\:   :py:class:`RcmdPriorityLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdPriorityLevel>`
                        
                        .. attribute:: route_path_change_type
                        
                        	Route Path Change Type
                        	**type**\:   :py:class:`RcmdShowRoutePathChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowRoutePathChange>`
                        
                        .. attribute:: route_type
                        
                        	Route Type intra/inter/l1/l2
                        	**type**\:   :py:class:`RcmdShowRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowRoute>`
                        
                        .. attribute:: spf_run_no
                        
                        	Referenced SPF Run No (0 \- Not Applicable)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: threshold_exceeded
                        
                        	Threshold exceeded
                        	**type**\:  bool
                        
                        .. attribute:: time_line
                        
                        	Timeline information
                        	**type**\: list of    :py:class:`TimeLine <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.TimeLine>`
                        
                        .. attribute:: trigger_lsa
                        
                        	LSA that triggered this event
                        	**type**\: list of    :py:class:`TriggerLsa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.TriggerLsa>`
                        
                        .. attribute:: trigger_time
                        
                        	Event trigger time
                        	**type**\:  str
                        
                        

                        """

                        _prefix = 'infra-rcmd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Rcmd.Ospf.Instances.Instance.PrefixEventOfflines.PrefixEventOffline, self).__init__()

                            self.yang_name = "prefix-event-offline"
                            self.yang_parent_name = "prefix-event-offlines"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self._child_container_classes = {"ip-convergence-time" : ("ip_convergence_time", Rcmd.Ospf.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.IpConvergenceTime), "mpls-convergence-time" : ("mpls_convergence_time", Rcmd.Ospf.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.MplsConvergenceTime)}
                            self._child_list_classes = {"lsa-processed" : ("lsa_processed", Rcmd.Ospf.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.LsaProcessed), "path" : ("path", Rcmd.Ospf.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.Path), "time-line" : ("time_line", Rcmd.Ospf.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.TimeLine), "trigger-lsa" : ("trigger_lsa", Rcmd.Ospf.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.TriggerLsa)}

                            self.event_id = YLeaf(YType.uint32, "event-id")

                            self.change_type = YLeaf(YType.enumeration, "change-type")

                            self.cost = YLeaf(YType.uint32, "cost")

                            self.ipfrr_event_id = YLeaf(YType.uint32, "ipfrr-event-id")

                            self.prefix = YLeaf(YType.str, "prefix")

                            self.prefix_lenth = YLeaf(YType.uint32, "prefix-lenth")

                            self.priority = YLeaf(YType.enumeration, "priority")

                            self.route_path_change_type = YLeaf(YType.enumeration, "route-path-change-type")

                            self.route_type = YLeaf(YType.enumeration, "route-type")

                            self.spf_run_no = YLeaf(YType.uint32, "spf-run-no")

                            self.threshold_exceeded = YLeaf(YType.boolean, "threshold-exceeded")

                            self.trigger_time = YLeaf(YType.str, "trigger-time")

                            self.ip_convergence_time = Rcmd.Ospf.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.IpConvergenceTime()
                            self.ip_convergence_time.parent = self
                            self._children_name_map["ip_convergence_time"] = "ip-convergence-time"
                            self._children_yang_names.add("ip-convergence-time")

                            self.mpls_convergence_time = Rcmd.Ospf.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.MplsConvergenceTime()
                            self.mpls_convergence_time.parent = self
                            self._children_name_map["mpls_convergence_time"] = "mpls-convergence-time"
                            self._children_yang_names.add("mpls-convergence-time")

                            self.lsa_processed = YList(self)
                            self.path = YList(self)
                            self.time_line = YList(self)
                            self.trigger_lsa = YList(self)
                            self._segment_path = lambda: "prefix-event-offline" + "[event-id='" + self.event_id.get() + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rcmd.Ospf.Instances.Instance.PrefixEventOfflines.PrefixEventOffline, ['event_id', 'change_type', 'cost', 'ipfrr_event_id', 'prefix', 'prefix_lenth', 'priority', 'route_path_change_type', 'route_type', 'spf_run_no', 'threshold_exceeded', 'trigger_time'], name, value)


                        class IpConvergenceTime(Entity):
                            """
                            Convergence time for IP route programming
                            
                            .. attribute:: fastest_node_name
                            
                            	Linecard node name which took the minimum time
                            	**type**\:  str
                            
                            .. attribute:: maximum_time
                            
                            	Maximum time(in seconds.milliseconds)
                            	**type**\:  str
                            
                            	**units**\: millisecond
                            
                            .. attribute:: minimum_time
                            
                            	Minimum time(in seconds.milliseconds)
                            	**type**\:  str
                            
                            	**units**\: millisecond
                            
                            .. attribute:: slowest_node_name
                            
                            	Linecard node name which took the maximum time
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Rcmd.Ospf.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.IpConvergenceTime, self).__init__()

                                self.yang_name = "ip-convergence-time"
                                self.yang_parent_name = "prefix-event-offline"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {}

                                self.fastest_node_name = YLeaf(YType.str, "fastest-node-name")

                                self.maximum_time = YLeaf(YType.str, "maximum-time")

                                self.minimum_time = YLeaf(YType.str, "minimum-time")

                                self.slowest_node_name = YLeaf(YType.str, "slowest-node-name")
                                self._segment_path = lambda: "ip-convergence-time"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rcmd.Ospf.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.IpConvergenceTime, ['fastest_node_name', 'maximum_time', 'minimum_time', 'slowest_node_name'], name, value)


                        class LsaProcessed(Entity):
                            """
                            List of LSAs processed
                            
                            .. attribute:: change_type
                            
                            	Add, Delete, Modify
                            	**type**\:   :py:class:`RcmdLsChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsChange>`
                            
                            .. attribute:: lsa_id
                            
                            	LSA ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: lsa_type
                            
                            	LSA type
                            	**type**\:   :py:class:`RcmdLsa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsa>`
                            
                            .. attribute:: origin_router_id
                            
                            	Originating Router ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: reception_time
                            
                            	Reception Time on router (in hh\:mm\:ss.msec)
                            	**type**\:  str
                            
                            .. attribute:: sequence_number
                            
                            	Sequence Number
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Rcmd.Ospf.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.LsaProcessed, self).__init__()

                                self.yang_name = "lsa-processed"
                                self.yang_parent_name = "prefix-event-offline"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {}

                                self.change_type = YLeaf(YType.enumeration, "change-type")

                                self.lsa_id = YLeaf(YType.str, "lsa-id")

                                self.lsa_type = YLeaf(YType.enumeration, "lsa-type")

                                self.origin_router_id = YLeaf(YType.str, "origin-router-id")

                                self.reception_time = YLeaf(YType.str, "reception-time")

                                self.sequence_number = YLeaf(YType.str, "sequence-number")
                                self._segment_path = lambda: "lsa-processed"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rcmd.Ospf.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.LsaProcessed, ['change_type', 'lsa_id', 'lsa_type', 'origin_router_id', 'reception_time', 'sequence_number'], name, value)


                        class MplsConvergenceTime(Entity):
                            """
                            Convergence time for MPLS label programming
                            
                            .. attribute:: fastest_node_name
                            
                            	Linecard node name which took the minimum time
                            	**type**\:  str
                            
                            .. attribute:: maximum_time
                            
                            	Maximum time(in seconds.milliseconds)
                            	**type**\:  str
                            
                            	**units**\: millisecond
                            
                            .. attribute:: minimum_time
                            
                            	Minimum time(in seconds.milliseconds)
                            	**type**\:  str
                            
                            	**units**\: millisecond
                            
                            .. attribute:: slowest_node_name
                            
                            	Linecard node name which took the maximum time
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Rcmd.Ospf.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.MplsConvergenceTime, self).__init__()

                                self.yang_name = "mpls-convergence-time"
                                self.yang_parent_name = "prefix-event-offline"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {}

                                self.fastest_node_name = YLeaf(YType.str, "fastest-node-name")

                                self.maximum_time = YLeaf(YType.str, "maximum-time")

                                self.minimum_time = YLeaf(YType.str, "minimum-time")

                                self.slowest_node_name = YLeaf(YType.str, "slowest-node-name")
                                self._segment_path = lambda: "mpls-convergence-time"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rcmd.Ospf.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.MplsConvergenceTime, ['fastest_node_name', 'maximum_time', 'minimum_time', 'slowest_node_name'], name, value)


                        class Path(Entity):
                            """
                            Path information
                            
                            .. attribute:: change_type
                            
                            	Event Add/Delete
                            	**type**\:   :py:class:`RcmdChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdChange>`
                            
                            .. attribute:: interface_name
                            
                            	Interface Name
                            	**type**\:  str
                            
                            .. attribute:: lfa_path
                            
                            	Backup Path Informatoin
                            	**type**\: list of    :py:class:`LfaPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.Path.LfaPath>`
                            
                            .. attribute:: neighbour_address
                            
                            	Nexthop Address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: path_metric
                            
                            	Path Metric
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Rcmd.Ospf.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.Path, self).__init__()

                                self.yang_name = "path"
                                self.yang_parent_name = "prefix-event-offline"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {"lfa-path" : ("lfa_path", Rcmd.Ospf.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.Path.LfaPath)}

                                self.change_type = YLeaf(YType.enumeration, "change-type")

                                self.interface_name = YLeaf(YType.str, "interface-name")

                                self.neighbour_address = YLeaf(YType.str, "neighbour-address")

                                self.path_metric = YLeaf(YType.uint32, "path-metric")

                                self.lfa_path = YList(self)
                                self._segment_path = lambda: "path"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rcmd.Ospf.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.Path, ['change_type', 'interface_name', 'neighbour_address', 'path_metric'], name, value)


                            class LfaPath(Entity):
                                """
                                Backup Path Informatoin
                                
                                .. attribute:: change_type
                                
                                	Event Add/Delete
                                	**type**\:   :py:class:`RcmdChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdChange>`
                                
                                .. attribute:: interface_name
                                
                                	Interface Name
                                	**type**\:  str
                                
                                .. attribute:: lfa_type
                                
                                	Type of LFA
                                	**type**\:   :py:class:`RcmdShowIpfrrLfa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowIpfrrLfa>`
                                
                                .. attribute:: neighbour_address
                                
                                	Nexthop Address
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: path_metric
                                
                                	Path Metric
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: remote_node_id
                                
                                	Remote Node ID, in case of Remote LFA
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Rcmd.Ospf.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.Path.LfaPath, self).__init__()

                                    self.yang_name = "lfa-path"
                                    self.yang_parent_name = "path"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {}
                                    self._child_list_classes = {}

                                    self.change_type = YLeaf(YType.enumeration, "change-type")

                                    self.interface_name = YLeaf(YType.str, "interface-name")

                                    self.lfa_type = YLeaf(YType.enumeration, "lfa-type")

                                    self.neighbour_address = YLeaf(YType.str, "neighbour-address")

                                    self.path_metric = YLeaf(YType.uint32, "path-metric")

                                    self.remote_node_id = YLeaf(YType.str, "remote-node-id")
                                    self._segment_path = lambda: "lfa-path"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Rcmd.Ospf.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.Path.LfaPath, ['change_type', 'interface_name', 'lfa_type', 'neighbour_address', 'path_metric', 'remote_node_id'], name, value)


                        class TimeLine(Entity):
                            """
                            Timeline information
                            
                            .. attribute:: lc_ip
                            
                            	List of Linecards' completion point for IP routes
                            	**type**\: list of    :py:class:`LcIp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.TimeLine.LcIp>`
                            
                            .. attribute:: lc_mpls
                            
                            	List of Linecards' completion point for MPLS labels
                            	**type**\: list of    :py:class:`LcMpls <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.TimeLine.LcMpls>`
                            
                            .. attribute:: ldp_enter
                            
                            	Entry point of LDP
                            	**type**\:  str
                            
                            .. attribute:: ldp_exit
                            
                            	Exit point of LDP to LSD
                            	**type**\:  str
                            
                            .. attribute:: lsd_enter
                            
                            	Entry point of LSD
                            	**type**\:  str
                            
                            .. attribute:: lsd_exit
                            
                            	Exit point of LSD to FIBs
                            	**type**\:  str
                            
                            .. attribute:: ri_bv4_enter
                            
                            	Entry point of IPv4 RIB
                            	**type**\:  str
                            
                            .. attribute:: ri_bv4_exit
                            
                            	Exit point from IPv4 RIB to FIBs
                            	**type**\:  str
                            
                            .. attribute:: ri_bv4_redistribute
                            
                            	Route Redistribute point from IPv4 RIB to LDP
                            	**type**\:  str
                            
                            .. attribute:: route_origin
                            
                            	Route origin (routing protocol)
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Rcmd.Ospf.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.TimeLine, self).__init__()

                                self.yang_name = "time-line"
                                self.yang_parent_name = "prefix-event-offline"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {"lc-ip" : ("lc_ip", Rcmd.Ospf.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.TimeLine.LcIp), "lc-mpls" : ("lc_mpls", Rcmd.Ospf.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.TimeLine.LcMpls)}

                                self.ldp_enter = YLeaf(YType.str, "ldp-enter")

                                self.ldp_exit = YLeaf(YType.str, "ldp-exit")

                                self.lsd_enter = YLeaf(YType.str, "lsd-enter")

                                self.lsd_exit = YLeaf(YType.str, "lsd-exit")

                                self.ri_bv4_enter = YLeaf(YType.str, "ri-bv4-enter")

                                self.ri_bv4_exit = YLeaf(YType.str, "ri-bv4-exit")

                                self.ri_bv4_redistribute = YLeaf(YType.str, "ri-bv4-redistribute")

                                self.route_origin = YLeaf(YType.str, "route-origin")

                                self.lc_ip = YList(self)
                                self.lc_mpls = YList(self)
                                self._segment_path = lambda: "time-line"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rcmd.Ospf.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.TimeLine, ['ldp_enter', 'ldp_exit', 'lsd_enter', 'lsd_exit', 'ri_bv4_enter', 'ri_bv4_exit', 'ri_bv4_redistribute', 'route_origin'], name, value)


                            class LcIp(Entity):
                                """
                                List of Linecards' completion point for IP
                                routes
                                
                                .. attribute:: fib_complete
                                
                                	Completion point of FIB
                                	**type**\:  str
                                
                                .. attribute:: node_name
                                
                                	Linecard node name
                                	**type**\:  str
                                
                                .. attribute:: speed
                                
                                	Relative convergence speed
                                	**type**\:   :py:class:`RcmdLinecardSpeed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLinecardSpeed>`
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Rcmd.Ospf.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.TimeLine.LcIp, self).__init__()

                                    self.yang_name = "lc-ip"
                                    self.yang_parent_name = "time-line"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {}
                                    self._child_list_classes = {}

                                    self.fib_complete = YLeaf(YType.str, "fib-complete")

                                    self.node_name = YLeaf(YType.str, "node-name")

                                    self.speed = YLeaf(YType.enumeration, "speed")
                                    self._segment_path = lambda: "lc-ip"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Rcmd.Ospf.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.TimeLine.LcIp, ['fib_complete', 'node_name', 'speed'], name, value)


                            class LcMpls(Entity):
                                """
                                List of Linecards' completion point for MPLS
                                labels
                                
                                .. attribute:: fib_complete
                                
                                	Completion point of FIB
                                	**type**\:  str
                                
                                .. attribute:: node_name
                                
                                	Linecard node name
                                	**type**\:  str
                                
                                .. attribute:: speed
                                
                                	Relative convergence speed
                                	**type**\:   :py:class:`RcmdLinecardSpeed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLinecardSpeed>`
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Rcmd.Ospf.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.TimeLine.LcMpls, self).__init__()

                                    self.yang_name = "lc-mpls"
                                    self.yang_parent_name = "time-line"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {}
                                    self._child_list_classes = {}

                                    self.fib_complete = YLeaf(YType.str, "fib-complete")

                                    self.node_name = YLeaf(YType.str, "node-name")

                                    self.speed = YLeaf(YType.enumeration, "speed")
                                    self._segment_path = lambda: "lc-mpls"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Rcmd.Ospf.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.TimeLine.LcMpls, ['fib_complete', 'node_name', 'speed'], name, value)


                        class TriggerLsa(Entity):
                            """
                            LSA that triggered this event
                            
                            .. attribute:: change_type
                            
                            	Add, Delete, Modify
                            	**type**\:   :py:class:`RcmdLsChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsChange>`
                            
                            .. attribute:: lsa_id
                            
                            	LSA ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: lsa_type
                            
                            	LSA type
                            	**type**\:   :py:class:`RcmdLsa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsa>`
                            
                            .. attribute:: origin_router_id
                            
                            	Originating Router ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: reception_time
                            
                            	Reception Time on router (in hh\:mm\:ss.msec)
                            	**type**\:  str
                            
                            .. attribute:: sequence_number
                            
                            	Sequence Number
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Rcmd.Ospf.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.TriggerLsa, self).__init__()

                                self.yang_name = "trigger-lsa"
                                self.yang_parent_name = "prefix-event-offline"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {}

                                self.change_type = YLeaf(YType.enumeration, "change-type")

                                self.lsa_id = YLeaf(YType.str, "lsa-id")

                                self.lsa_type = YLeaf(YType.enumeration, "lsa-type")

                                self.origin_router_id = YLeaf(YType.str, "origin-router-id")

                                self.reception_time = YLeaf(YType.str, "reception-time")

                                self.sequence_number = YLeaf(YType.str, "sequence-number")
                                self._segment_path = lambda: "trigger-lsa"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rcmd.Ospf.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.TriggerLsa, ['change_type', 'lsa_id', 'lsa_type', 'origin_router_id', 'reception_time', 'sequence_number'], name, value)


                class PrefixEventStatistics(Entity):
                    """
                    OSPF Prefix events summary data
                    
                    .. attribute:: prefix_event_statistic
                    
                    	Prefix Event statistics
                    	**type**\: list of    :py:class:`PrefixEventStatistic <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.PrefixEventStatistics.PrefixEventStatistic>`
                    
                    

                    """

                    _prefix = 'infra-rcmd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Rcmd.Ospf.Instances.Instance.PrefixEventStatistics, self).__init__()

                        self.yang_name = "prefix-event-statistics"
                        self.yang_parent_name = "instance"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self._child_container_classes = {}
                        self._child_list_classes = {"prefix-event-statistic" : ("prefix_event_statistic", Rcmd.Ospf.Instances.Instance.PrefixEventStatistics.PrefixEventStatistic)}

                        self.prefix_event_statistic = YList(self)
                        self._segment_path = lambda: "prefix-event-statistics"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rcmd.Ospf.Instances.Instance.PrefixEventStatistics, [], name, value)


                    class PrefixEventStatistic(Entity):
                        """
                        Prefix Event statistics
                        
                        .. attribute:: prefix_info  <key>
                        
                        	Events with Prefix
                        	**type**\: one of the below types:
                        
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                        
                        
                        ----
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                        
                        
                        ----
                        .. attribute:: add_count
                        
                        	No. of times route gets Added
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: critical_priority
                        
                        	No. of times processed under Critical Priority
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: delete_count
                        
                        	No. of times route gets Deleted
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: high_priority
                        
                        	No. of times processed under High Priority
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: last_change_type
                        
                        	Last event Add/Delete
                        	**type**\:   :py:class:`RcmdChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdChange>`
                        
                        .. attribute:: last_cost
                        
                        	Last Known Cost
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: last_event_time
                        
                        	Last event trigger time
                        	**type**\:  str
                        
                        .. attribute:: last_priority
                        
                        	Last event processed priority
                        	**type**\:   :py:class:`RcmdPriorityLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdPriorityLevel>`
                        
                        .. attribute:: last_route_type
                        
                        	Last event Route Type
                        	**type**\:   :py:class:`RcmdShowRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowRoute>`
                        
                        .. attribute:: low_priority
                        
                        	No. of times processed under Low Priority
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: medium_priority
                        
                        	No. of times processed under Medium Priority
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: modify_count
                        
                        	No. of times route gets Deleted
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: prefix
                        
                        	Prefix
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: prefix_lenth
                        
                        	Prefix length
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: threshold_exceed_count
                        
                        	No. of times threshold got exceeded
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'infra-rcmd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Rcmd.Ospf.Instances.Instance.PrefixEventStatistics.PrefixEventStatistic, self).__init__()

                            self.yang_name = "prefix-event-statistic"
                            self.yang_parent_name = "prefix-event-statistics"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self._child_container_classes = {}
                            self._child_list_classes = {}

                            self.prefix_info = YLeaf(YType.str, "prefix-info")

                            self.add_count = YLeaf(YType.uint32, "add-count")

                            self.critical_priority = YLeaf(YType.uint32, "critical-priority")

                            self.delete_count = YLeaf(YType.uint32, "delete-count")

                            self.high_priority = YLeaf(YType.uint32, "high-priority")

                            self.last_change_type = YLeaf(YType.enumeration, "last-change-type")

                            self.last_cost = YLeaf(YType.uint32, "last-cost")

                            self.last_event_time = YLeaf(YType.str, "last-event-time")

                            self.last_priority = YLeaf(YType.enumeration, "last-priority")

                            self.last_route_type = YLeaf(YType.enumeration, "last-route-type")

                            self.low_priority = YLeaf(YType.uint32, "low-priority")

                            self.medium_priority = YLeaf(YType.uint32, "medium-priority")

                            self.modify_count = YLeaf(YType.uint32, "modify-count")

                            self.prefix = YLeaf(YType.str, "prefix")

                            self.prefix_lenth = YLeaf(YType.uint32, "prefix-lenth")

                            self.threshold_exceed_count = YLeaf(YType.uint32, "threshold-exceed-count")
                            self._segment_path = lambda: "prefix-event-statistic" + "[prefix-info='" + self.prefix_info.get() + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rcmd.Ospf.Instances.Instance.PrefixEventStatistics.PrefixEventStatistic, ['prefix_info', 'add_count', 'critical_priority', 'delete_count', 'high_priority', 'last_change_type', 'last_cost', 'last_event_time', 'last_priority', 'last_route_type', 'low_priority', 'medium_priority', 'modify_count', 'prefix', 'prefix_lenth', 'threshold_exceed_count'], name, value)


                class PrefixEventSummaries(Entity):
                    """
                    OSPF Prefix events summary data
                    
                    .. attribute:: prefix_event_summary
                    
                    	OSPF Prefix Event data
                    	**type**\: list of    :py:class:`PrefixEventSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.PrefixEventSummaries.PrefixEventSummary>`
                    
                    

                    """

                    _prefix = 'infra-rcmd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Rcmd.Ospf.Instances.Instance.PrefixEventSummaries, self).__init__()

                        self.yang_name = "prefix-event-summaries"
                        self.yang_parent_name = "instance"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self._child_container_classes = {}
                        self._child_list_classes = {"prefix-event-summary" : ("prefix_event_summary", Rcmd.Ospf.Instances.Instance.PrefixEventSummaries.PrefixEventSummary)}

                        self.prefix_event_summary = YList(self)
                        self._segment_path = lambda: "prefix-event-summaries"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rcmd.Ospf.Instances.Instance.PrefixEventSummaries, [], name, value)


                    class PrefixEventSummary(Entity):
                        """
                        OSPF Prefix Event data
                        
                        .. attribute:: event_id  <key>
                        
                        	Specific Event ID
                        	**type**\:  int
                        
                        	**range:** 1..4294967295
                        
                        .. attribute:: change_type
                        
                        	Event Add/Delete
                        	**type**\:   :py:class:`RcmdChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdChange>`
                        
                        .. attribute:: cost
                        
                        	Protocol route cost
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: ip_convergence_time
                        
                        	Convergence time for IP route programming
                        	**type**\:   :py:class:`IpConvergenceTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.IpConvergenceTime>`
                        
                        .. attribute:: ipfrr_event_id
                        
                        	Referenced IP\-FRR Event ID (0 \- Not Applicable)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: lsa_processed
                        
                        	List of LSAs processed
                        	**type**\: list of    :py:class:`LsaProcessed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.LsaProcessed>`
                        
                        .. attribute:: mpls_convergence_time
                        
                        	Convergence time for MPLS label programming
                        	**type**\:   :py:class:`MplsConvergenceTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.MplsConvergenceTime>`
                        
                        .. attribute:: path
                        
                        	Path information
                        	**type**\: list of    :py:class:`Path <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.Path>`
                        
                        .. attribute:: prefix
                        
                        	Prefix
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: prefix_lenth
                        
                        	Prefix length
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: priority
                        
                        	Event processed priority
                        	**type**\:   :py:class:`RcmdPriorityLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdPriorityLevel>`
                        
                        .. attribute:: route_path_change_type
                        
                        	Route Path Change Type
                        	**type**\:   :py:class:`RcmdShowRoutePathChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowRoutePathChange>`
                        
                        .. attribute:: route_type
                        
                        	Route Type intra/inter/l1/l2
                        	**type**\:   :py:class:`RcmdShowRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowRoute>`
                        
                        .. attribute:: spf_run_no
                        
                        	Referenced SPF Run No (0 \- Not Applicable)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: threshold_exceeded
                        
                        	Threshold exceeded
                        	**type**\:  bool
                        
                        .. attribute:: time_line
                        
                        	Timeline information
                        	**type**\: list of    :py:class:`TimeLine <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.TimeLine>`
                        
                        .. attribute:: trigger_lsa
                        
                        	LSA that triggered this event
                        	**type**\: list of    :py:class:`TriggerLsa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.TriggerLsa>`
                        
                        .. attribute:: trigger_time
                        
                        	Event trigger time
                        	**type**\:  str
                        
                        

                        """

                        _prefix = 'infra-rcmd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Rcmd.Ospf.Instances.Instance.PrefixEventSummaries.PrefixEventSummary, self).__init__()

                            self.yang_name = "prefix-event-summary"
                            self.yang_parent_name = "prefix-event-summaries"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self._child_container_classes = {"ip-convergence-time" : ("ip_convergence_time", Rcmd.Ospf.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.IpConvergenceTime), "mpls-convergence-time" : ("mpls_convergence_time", Rcmd.Ospf.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.MplsConvergenceTime)}
                            self._child_list_classes = {"lsa-processed" : ("lsa_processed", Rcmd.Ospf.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.LsaProcessed), "path" : ("path", Rcmd.Ospf.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.Path), "time-line" : ("time_line", Rcmd.Ospf.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.TimeLine), "trigger-lsa" : ("trigger_lsa", Rcmd.Ospf.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.TriggerLsa)}

                            self.event_id = YLeaf(YType.uint32, "event-id")

                            self.change_type = YLeaf(YType.enumeration, "change-type")

                            self.cost = YLeaf(YType.uint32, "cost")

                            self.ipfrr_event_id = YLeaf(YType.uint32, "ipfrr-event-id")

                            self.prefix = YLeaf(YType.str, "prefix")

                            self.prefix_lenth = YLeaf(YType.uint32, "prefix-lenth")

                            self.priority = YLeaf(YType.enumeration, "priority")

                            self.route_path_change_type = YLeaf(YType.enumeration, "route-path-change-type")

                            self.route_type = YLeaf(YType.enumeration, "route-type")

                            self.spf_run_no = YLeaf(YType.uint32, "spf-run-no")

                            self.threshold_exceeded = YLeaf(YType.boolean, "threshold-exceeded")

                            self.trigger_time = YLeaf(YType.str, "trigger-time")

                            self.ip_convergence_time = Rcmd.Ospf.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.IpConvergenceTime()
                            self.ip_convergence_time.parent = self
                            self._children_name_map["ip_convergence_time"] = "ip-convergence-time"
                            self._children_yang_names.add("ip-convergence-time")

                            self.mpls_convergence_time = Rcmd.Ospf.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.MplsConvergenceTime()
                            self.mpls_convergence_time.parent = self
                            self._children_name_map["mpls_convergence_time"] = "mpls-convergence-time"
                            self._children_yang_names.add("mpls-convergence-time")

                            self.lsa_processed = YList(self)
                            self.path = YList(self)
                            self.time_line = YList(self)
                            self.trigger_lsa = YList(self)
                            self._segment_path = lambda: "prefix-event-summary" + "[event-id='" + self.event_id.get() + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rcmd.Ospf.Instances.Instance.PrefixEventSummaries.PrefixEventSummary, ['event_id', 'change_type', 'cost', 'ipfrr_event_id', 'prefix', 'prefix_lenth', 'priority', 'route_path_change_type', 'route_type', 'spf_run_no', 'threshold_exceeded', 'trigger_time'], name, value)


                        class IpConvergenceTime(Entity):
                            """
                            Convergence time for IP route programming
                            
                            .. attribute:: fastest_node_name
                            
                            	Linecard node name which took the minimum time
                            	**type**\:  str
                            
                            .. attribute:: maximum_time
                            
                            	Maximum time(in seconds.milliseconds)
                            	**type**\:  str
                            
                            	**units**\: millisecond
                            
                            .. attribute:: minimum_time
                            
                            	Minimum time(in seconds.milliseconds)
                            	**type**\:  str
                            
                            	**units**\: millisecond
                            
                            .. attribute:: slowest_node_name
                            
                            	Linecard node name which took the maximum time
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Rcmd.Ospf.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.IpConvergenceTime, self).__init__()

                                self.yang_name = "ip-convergence-time"
                                self.yang_parent_name = "prefix-event-summary"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {}

                                self.fastest_node_name = YLeaf(YType.str, "fastest-node-name")

                                self.maximum_time = YLeaf(YType.str, "maximum-time")

                                self.minimum_time = YLeaf(YType.str, "minimum-time")

                                self.slowest_node_name = YLeaf(YType.str, "slowest-node-name")
                                self._segment_path = lambda: "ip-convergence-time"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rcmd.Ospf.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.IpConvergenceTime, ['fastest_node_name', 'maximum_time', 'minimum_time', 'slowest_node_name'], name, value)


                        class LsaProcessed(Entity):
                            """
                            List of LSAs processed
                            
                            .. attribute:: change_type
                            
                            	Add, Delete, Modify
                            	**type**\:   :py:class:`RcmdLsChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsChange>`
                            
                            .. attribute:: lsa_id
                            
                            	LSA ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: lsa_type
                            
                            	LSA type
                            	**type**\:   :py:class:`RcmdLsa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsa>`
                            
                            .. attribute:: origin_router_id
                            
                            	Originating Router ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: reception_time
                            
                            	Reception Time on router (in hh\:mm\:ss.msec)
                            	**type**\:  str
                            
                            .. attribute:: sequence_number
                            
                            	Sequence Number
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Rcmd.Ospf.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.LsaProcessed, self).__init__()

                                self.yang_name = "lsa-processed"
                                self.yang_parent_name = "prefix-event-summary"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {}

                                self.change_type = YLeaf(YType.enumeration, "change-type")

                                self.lsa_id = YLeaf(YType.str, "lsa-id")

                                self.lsa_type = YLeaf(YType.enumeration, "lsa-type")

                                self.origin_router_id = YLeaf(YType.str, "origin-router-id")

                                self.reception_time = YLeaf(YType.str, "reception-time")

                                self.sequence_number = YLeaf(YType.str, "sequence-number")
                                self._segment_path = lambda: "lsa-processed"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rcmd.Ospf.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.LsaProcessed, ['change_type', 'lsa_id', 'lsa_type', 'origin_router_id', 'reception_time', 'sequence_number'], name, value)


                        class MplsConvergenceTime(Entity):
                            """
                            Convergence time for MPLS label programming
                            
                            .. attribute:: fastest_node_name
                            
                            	Linecard node name which took the minimum time
                            	**type**\:  str
                            
                            .. attribute:: maximum_time
                            
                            	Maximum time(in seconds.milliseconds)
                            	**type**\:  str
                            
                            	**units**\: millisecond
                            
                            .. attribute:: minimum_time
                            
                            	Minimum time(in seconds.milliseconds)
                            	**type**\:  str
                            
                            	**units**\: millisecond
                            
                            .. attribute:: slowest_node_name
                            
                            	Linecard node name which took the maximum time
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Rcmd.Ospf.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.MplsConvergenceTime, self).__init__()

                                self.yang_name = "mpls-convergence-time"
                                self.yang_parent_name = "prefix-event-summary"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {}

                                self.fastest_node_name = YLeaf(YType.str, "fastest-node-name")

                                self.maximum_time = YLeaf(YType.str, "maximum-time")

                                self.minimum_time = YLeaf(YType.str, "minimum-time")

                                self.slowest_node_name = YLeaf(YType.str, "slowest-node-name")
                                self._segment_path = lambda: "mpls-convergence-time"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rcmd.Ospf.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.MplsConvergenceTime, ['fastest_node_name', 'maximum_time', 'minimum_time', 'slowest_node_name'], name, value)


                        class Path(Entity):
                            """
                            Path information
                            
                            .. attribute:: change_type
                            
                            	Event Add/Delete
                            	**type**\:   :py:class:`RcmdChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdChange>`
                            
                            .. attribute:: interface_name
                            
                            	Interface Name
                            	**type**\:  str
                            
                            .. attribute:: lfa_path
                            
                            	Backup Path Informatoin
                            	**type**\: list of    :py:class:`LfaPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.Path.LfaPath>`
                            
                            .. attribute:: neighbour_address
                            
                            	Nexthop Address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: path_metric
                            
                            	Path Metric
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Rcmd.Ospf.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.Path, self).__init__()

                                self.yang_name = "path"
                                self.yang_parent_name = "prefix-event-summary"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {"lfa-path" : ("lfa_path", Rcmd.Ospf.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.Path.LfaPath)}

                                self.change_type = YLeaf(YType.enumeration, "change-type")

                                self.interface_name = YLeaf(YType.str, "interface-name")

                                self.neighbour_address = YLeaf(YType.str, "neighbour-address")

                                self.path_metric = YLeaf(YType.uint32, "path-metric")

                                self.lfa_path = YList(self)
                                self._segment_path = lambda: "path"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rcmd.Ospf.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.Path, ['change_type', 'interface_name', 'neighbour_address', 'path_metric'], name, value)


                            class LfaPath(Entity):
                                """
                                Backup Path Informatoin
                                
                                .. attribute:: change_type
                                
                                	Event Add/Delete
                                	**type**\:   :py:class:`RcmdChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdChange>`
                                
                                .. attribute:: interface_name
                                
                                	Interface Name
                                	**type**\:  str
                                
                                .. attribute:: lfa_type
                                
                                	Type of LFA
                                	**type**\:   :py:class:`RcmdShowIpfrrLfa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowIpfrrLfa>`
                                
                                .. attribute:: neighbour_address
                                
                                	Nexthop Address
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: path_metric
                                
                                	Path Metric
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: remote_node_id
                                
                                	Remote Node ID, in case of Remote LFA
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Rcmd.Ospf.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.Path.LfaPath, self).__init__()

                                    self.yang_name = "lfa-path"
                                    self.yang_parent_name = "path"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {}
                                    self._child_list_classes = {}

                                    self.change_type = YLeaf(YType.enumeration, "change-type")

                                    self.interface_name = YLeaf(YType.str, "interface-name")

                                    self.lfa_type = YLeaf(YType.enumeration, "lfa-type")

                                    self.neighbour_address = YLeaf(YType.str, "neighbour-address")

                                    self.path_metric = YLeaf(YType.uint32, "path-metric")

                                    self.remote_node_id = YLeaf(YType.str, "remote-node-id")
                                    self._segment_path = lambda: "lfa-path"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Rcmd.Ospf.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.Path.LfaPath, ['change_type', 'interface_name', 'lfa_type', 'neighbour_address', 'path_metric', 'remote_node_id'], name, value)


                        class TimeLine(Entity):
                            """
                            Timeline information
                            
                            .. attribute:: lc_ip
                            
                            	List of Linecards' completion point for IP routes
                            	**type**\: list of    :py:class:`LcIp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.TimeLine.LcIp>`
                            
                            .. attribute:: lc_mpls
                            
                            	List of Linecards' completion point for MPLS labels
                            	**type**\: list of    :py:class:`LcMpls <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.TimeLine.LcMpls>`
                            
                            .. attribute:: ldp_enter
                            
                            	Entry point of LDP
                            	**type**\:  str
                            
                            .. attribute:: ldp_exit
                            
                            	Exit point of LDP to LSD
                            	**type**\:  str
                            
                            .. attribute:: lsd_enter
                            
                            	Entry point of LSD
                            	**type**\:  str
                            
                            .. attribute:: lsd_exit
                            
                            	Exit point of LSD to FIBs
                            	**type**\:  str
                            
                            .. attribute:: ri_bv4_enter
                            
                            	Entry point of IPv4 RIB
                            	**type**\:  str
                            
                            .. attribute:: ri_bv4_exit
                            
                            	Exit point from IPv4 RIB to FIBs
                            	**type**\:  str
                            
                            .. attribute:: ri_bv4_redistribute
                            
                            	Route Redistribute point from IPv4 RIB to LDP
                            	**type**\:  str
                            
                            .. attribute:: route_origin
                            
                            	Route origin (routing protocol)
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Rcmd.Ospf.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.TimeLine, self).__init__()

                                self.yang_name = "time-line"
                                self.yang_parent_name = "prefix-event-summary"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {"lc-ip" : ("lc_ip", Rcmd.Ospf.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.TimeLine.LcIp), "lc-mpls" : ("lc_mpls", Rcmd.Ospf.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.TimeLine.LcMpls)}

                                self.ldp_enter = YLeaf(YType.str, "ldp-enter")

                                self.ldp_exit = YLeaf(YType.str, "ldp-exit")

                                self.lsd_enter = YLeaf(YType.str, "lsd-enter")

                                self.lsd_exit = YLeaf(YType.str, "lsd-exit")

                                self.ri_bv4_enter = YLeaf(YType.str, "ri-bv4-enter")

                                self.ri_bv4_exit = YLeaf(YType.str, "ri-bv4-exit")

                                self.ri_bv4_redistribute = YLeaf(YType.str, "ri-bv4-redistribute")

                                self.route_origin = YLeaf(YType.str, "route-origin")

                                self.lc_ip = YList(self)
                                self.lc_mpls = YList(self)
                                self._segment_path = lambda: "time-line"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rcmd.Ospf.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.TimeLine, ['ldp_enter', 'ldp_exit', 'lsd_enter', 'lsd_exit', 'ri_bv4_enter', 'ri_bv4_exit', 'ri_bv4_redistribute', 'route_origin'], name, value)


                            class LcIp(Entity):
                                """
                                List of Linecards' completion point for IP
                                routes
                                
                                .. attribute:: fib_complete
                                
                                	Completion point of FIB
                                	**type**\:  str
                                
                                .. attribute:: node_name
                                
                                	Linecard node name
                                	**type**\:  str
                                
                                .. attribute:: speed
                                
                                	Relative convergence speed
                                	**type**\:   :py:class:`RcmdLinecardSpeed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLinecardSpeed>`
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Rcmd.Ospf.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.TimeLine.LcIp, self).__init__()

                                    self.yang_name = "lc-ip"
                                    self.yang_parent_name = "time-line"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {}
                                    self._child_list_classes = {}

                                    self.fib_complete = YLeaf(YType.str, "fib-complete")

                                    self.node_name = YLeaf(YType.str, "node-name")

                                    self.speed = YLeaf(YType.enumeration, "speed")
                                    self._segment_path = lambda: "lc-ip"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Rcmd.Ospf.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.TimeLine.LcIp, ['fib_complete', 'node_name', 'speed'], name, value)


                            class LcMpls(Entity):
                                """
                                List of Linecards' completion point for MPLS
                                labels
                                
                                .. attribute:: fib_complete
                                
                                	Completion point of FIB
                                	**type**\:  str
                                
                                .. attribute:: node_name
                                
                                	Linecard node name
                                	**type**\:  str
                                
                                .. attribute:: speed
                                
                                	Relative convergence speed
                                	**type**\:   :py:class:`RcmdLinecardSpeed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLinecardSpeed>`
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Rcmd.Ospf.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.TimeLine.LcMpls, self).__init__()

                                    self.yang_name = "lc-mpls"
                                    self.yang_parent_name = "time-line"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {}
                                    self._child_list_classes = {}

                                    self.fib_complete = YLeaf(YType.str, "fib-complete")

                                    self.node_name = YLeaf(YType.str, "node-name")

                                    self.speed = YLeaf(YType.enumeration, "speed")
                                    self._segment_path = lambda: "lc-mpls"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Rcmd.Ospf.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.TimeLine.LcMpls, ['fib_complete', 'node_name', 'speed'], name, value)


                        class TriggerLsa(Entity):
                            """
                            LSA that triggered this event
                            
                            .. attribute:: change_type
                            
                            	Add, Delete, Modify
                            	**type**\:   :py:class:`RcmdLsChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsChange>`
                            
                            .. attribute:: lsa_id
                            
                            	LSA ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: lsa_type
                            
                            	LSA type
                            	**type**\:   :py:class:`RcmdLsa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsa>`
                            
                            .. attribute:: origin_router_id
                            
                            	Originating Router ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: reception_time
                            
                            	Reception Time on router (in hh\:mm\:ss.msec)
                            	**type**\:  str
                            
                            .. attribute:: sequence_number
                            
                            	Sequence Number
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Rcmd.Ospf.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.TriggerLsa, self).__init__()

                                self.yang_name = "trigger-lsa"
                                self.yang_parent_name = "prefix-event-summary"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {}

                                self.change_type = YLeaf(YType.enumeration, "change-type")

                                self.lsa_id = YLeaf(YType.str, "lsa-id")

                                self.lsa_type = YLeaf(YType.enumeration, "lsa-type")

                                self.origin_router_id = YLeaf(YType.str, "origin-router-id")

                                self.reception_time = YLeaf(YType.str, "reception-time")

                                self.sequence_number = YLeaf(YType.str, "sequence-number")
                                self._segment_path = lambda: "trigger-lsa"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rcmd.Ospf.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.TriggerLsa, ['change_type', 'lsa_id', 'lsa_type', 'origin_router_id', 'reception_time', 'sequence_number'], name, value)


                class SpfRunOfflines(Entity):
                    """
                    OSPF SPF run offline data
                    
                    .. attribute:: spf_run_offline
                    
                    	Offline operational data for particular OSPF SPF run
                    	**type**\: list of    :py:class:`SpfRunOffline <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline>`
                    
                    

                    """

                    _prefix = 'infra-rcmd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Rcmd.Ospf.Instances.Instance.SpfRunOfflines, self).__init__()

                        self.yang_name = "spf-run-offlines"
                        self.yang_parent_name = "instance"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self._child_container_classes = {}
                        self._child_list_classes = {"spf-run-offline" : ("spf_run_offline", Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline)}

                        self.spf_run_offline = YList(self)
                        self._segment_path = lambda: "spf-run-offlines"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunOfflines, [], name, value)


                    class SpfRunOffline(Entity):
                        """
                        Offline operational data for particular OSPF
                        SPF run
                        
                        .. attribute:: spf_run_number  <key>
                        
                        	Specific SPF run
                        	**type**\:  int
                        
                        	**range:** 1..4294967295
                        
                        .. attribute:: dijkstra_run
                        
                        	List of Dijkstra runs
                        	**type**\: list of    :py:class:`DijkstraRun <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun>`
                        
                        .. attribute:: inter_area_and_external
                        
                        	Inter\-area & external calculation information
                        	**type**\: list of    :py:class:`InterAreaAndExternal <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal>`
                        
                        .. attribute:: spf_summary
                        
                        	SPF summary information
                        	**type**\:   :py:class:`SpfSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary>`
                        
                        

                        """

                        _prefix = 'infra-rcmd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline, self).__init__()

                            self.yang_name = "spf-run-offline"
                            self.yang_parent_name = "spf-run-offlines"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self._child_container_classes = {"spf-summary" : ("spf_summary", Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary)}
                            self._child_list_classes = {"dijkstra-run" : ("dijkstra_run", Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun), "inter-area-and-external" : ("inter_area_and_external", Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal)}

                            self.spf_run_number = YLeaf(YType.uint32, "spf-run-number")

                            self.spf_summary = Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary()
                            self.spf_summary.parent = self
                            self._children_name_map["spf_summary"] = "spf-summary"
                            self._children_yang_names.add("spf-summary")

                            self.dijkstra_run = YList(self)
                            self.inter_area_and_external = YList(self)
                            self._segment_path = lambda: "spf-run-offline" + "[spf-run-number='" + self.spf_run_number.get() + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline, ['spf_run_number'], name, value)


                        class DijkstraRun(Entity):
                            """
                            List of Dijkstra runs
                            
                            .. attribute:: area_id
                            
                            	Area ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: dijkstra_run_number
                            
                            	Area Dijkstra run number
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: duration
                            
                            	Duration of Dijktra calculation (in ss.msec)
                            	**type**\:  str
                            
                            .. attribute:: lsa_processed
                            
                            	List of type 1/2 LSA changes processed
                            	**type**\: list of    :py:class:`LsaProcessed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.LsaProcessed>`
                            
                            .. attribute:: priority
                            
                            	Convergence information on per\-priority basis
                            	**type**\: list of    :py:class:`Priority <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority>`
                            
                            .. attribute:: start_time
                            
                            	Start time (offset from event trigger time in ss .msec)
                            	**type**\:  str
                            
                            .. attribute:: threshold_exceeded
                            
                            	Threshold exceeded
                            	**type**\:  bool
                            
                            .. attribute:: trigger_lsa
                            
                            	LSA that triggered the Dijkstra run
                            	**type**\: list of    :py:class:`TriggerLsa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.TriggerLsa>`
                            
                            .. attribute:: trigger_time
                            
                            	Trigger time (in hh\:mm\:ss.msec)
                            	**type**\:  str
                            
                            .. attribute:: wait_time
                            
                            	Wait time (offset from event trigger time in ss .msec)
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun, self).__init__()

                                self.yang_name = "dijkstra-run"
                                self.yang_parent_name = "spf-run-offline"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {"lsa-processed" : ("lsa_processed", Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.LsaProcessed), "priority" : ("priority", Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority), "trigger-lsa" : ("trigger_lsa", Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.TriggerLsa)}

                                self.area_id = YLeaf(YType.str, "area-id")

                                self.dijkstra_run_number = YLeaf(YType.uint32, "dijkstra-run-number")

                                self.duration = YLeaf(YType.str, "duration")

                                self.start_time = YLeaf(YType.str, "start-time")

                                self.threshold_exceeded = YLeaf(YType.boolean, "threshold-exceeded")

                                self.trigger_time = YLeaf(YType.str, "trigger-time")

                                self.wait_time = YLeaf(YType.uint32, "wait-time")

                                self.lsa_processed = YList(self)
                                self.priority = YList(self)
                                self.trigger_lsa = YList(self)
                                self._segment_path = lambda: "dijkstra-run"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun, ['area_id', 'dijkstra_run_number', 'duration', 'start_time', 'threshold_exceeded', 'trigger_time', 'wait_time'], name, value)


                            class LsaProcessed(Entity):
                                """
                                List of type 1/2 LSA changes processed
                                
                                .. attribute:: change_type
                                
                                	Add, Delete, Modify
                                	**type**\:   :py:class:`RcmdLsChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsChange>`
                                
                                .. attribute:: lsa_id
                                
                                	LSA ID
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: lsa_type
                                
                                	LSA type
                                	**type**\:   :py:class:`RcmdLsa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsa>`
                                
                                .. attribute:: origin_router_id
                                
                                	Originating Router ID
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: reception_time
                                
                                	Reception Time on router (in hh\:mm\:ss.msec)
                                	**type**\:  str
                                
                                .. attribute:: sequence_number
                                
                                	Sequence Number
                                	**type**\:  str
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.LsaProcessed, self).__init__()

                                    self.yang_name = "lsa-processed"
                                    self.yang_parent_name = "dijkstra-run"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {}
                                    self._child_list_classes = {}

                                    self.change_type = YLeaf(YType.enumeration, "change-type")

                                    self.lsa_id = YLeaf(YType.str, "lsa-id")

                                    self.lsa_type = YLeaf(YType.enumeration, "lsa-type")

                                    self.origin_router_id = YLeaf(YType.str, "origin-router-id")

                                    self.reception_time = YLeaf(YType.str, "reception-time")

                                    self.sequence_number = YLeaf(YType.str, "sequence-number")
                                    self._segment_path = lambda: "lsa-processed"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.LsaProcessed, ['change_type', 'lsa_id', 'lsa_type', 'origin_router_id', 'reception_time', 'sequence_number'], name, value)


                            class Priority(Entity):
                                """
                                Convergence information on per\-priority basis
                                
                                .. attribute:: convergence_timeline
                                
                                	Convergence timeline details
                                	**type**\: list of    :py:class:`ConvergenceTimeline <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline>`
                                
                                .. attribute:: leaf_networks_added
                                
                                	List of Leaf Networks Added
                                	**type**\: list of    :py:class:`LeafNetworksAdded <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.LeafNetworksAdded>`
                                
                                .. attribute:: leaf_networks_deleted
                                
                                	List of Leaf Networks Deleted
                                	**type**\: list of    :py:class:`LeafNetworksDeleted <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.LeafNetworksDeleted>`
                                
                                .. attribute:: priority_summary
                                
                                	Summary of the priority
                                	**type**\:   :py:class:`PrioritySummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.PrioritySummary>`
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority, self).__init__()

                                    self.yang_name = "priority"
                                    self.yang_parent_name = "dijkstra-run"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {"priority-summary" : ("priority_summary", Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.PrioritySummary)}
                                    self._child_list_classes = {"convergence-timeline" : ("convergence_timeline", Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline), "leaf-networks-added" : ("leaf_networks_added", Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.LeafNetworksAdded), "leaf-networks-deleted" : ("leaf_networks_deleted", Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.LeafNetworksDeleted)}

                                    self.priority_summary = Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.PrioritySummary()
                                    self.priority_summary.parent = self
                                    self._children_name_map["priority_summary"] = "priority-summary"
                                    self._children_yang_names.add("priority-summary")

                                    self.convergence_timeline = YList(self)
                                    self.leaf_networks_added = YList(self)
                                    self.leaf_networks_deleted = YList(self)
                                    self._segment_path = lambda: "priority"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority, [], name, value)


                                class ConvergenceTimeline(Entity):
                                    """
                                    Convergence timeline details
                                    
                                    .. attribute:: lc_ip
                                    
                                    	List of Linecards' completion point for IP routes
                                    	**type**\: list of    :py:class:`LcIp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.LcIp>`
                                    
                                    .. attribute:: lc_mpls
                                    
                                    	List of Linecards' completion point for MPLS labels
                                    	**type**\: list of    :py:class:`LcMpls <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.LcMpls>`
                                    
                                    .. attribute:: ldp_enter
                                    
                                    	Entry point of LDP
                                    	**type**\:   :py:class:`LdpEnter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.LdpEnter>`
                                    
                                    .. attribute:: ldp_exit
                                    
                                    	Exit point of LDP to LSD
                                    	**type**\:   :py:class:`LdpExit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.LdpExit>`
                                    
                                    .. attribute:: lsd_enter
                                    
                                    	Entry point of LSD
                                    	**type**\:   :py:class:`LsdEnter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.LsdEnter>`
                                    
                                    .. attribute:: lsd_exit
                                    
                                    	Exit point of LSD to FIBs
                                    	**type**\:   :py:class:`LsdExit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.LsdExit>`
                                    
                                    .. attribute:: ri_bv4_enter
                                    
                                    	Entry point of IPv4 RIB
                                    	**type**\:   :py:class:`RiBv4Enter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.RiBv4Enter>`
                                    
                                    .. attribute:: ri_bv4_exit
                                    
                                    	Exit point from IPv4 RIB to FIBs
                                    	**type**\:   :py:class:`RiBv4Exit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.RiBv4Exit>`
                                    
                                    .. attribute:: ri_bv4_redistribute
                                    
                                    	Route Redistribute point from IPv4 RIB to LDP
                                    	**type**\:   :py:class:`RiBv4Redistribute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.RiBv4Redistribute>`
                                    
                                    .. attribute:: route_origin
                                    
                                    	Route origin (routing protocol)
                                    	**type**\:   :py:class:`RouteOrigin <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.RouteOrigin>`
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline, self).__init__()

                                        self.yang_name = "convergence-timeline"
                                        self.yang_parent_name = "priority"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {"ldp-enter" : ("ldp_enter", Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.LdpEnter), "ldp-exit" : ("ldp_exit", Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.LdpExit), "lsd-enter" : ("lsd_enter", Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.LsdEnter), "lsd-exit" : ("lsd_exit", Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.LsdExit), "ri-bv4-enter" : ("ri_bv4_enter", Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.RiBv4Enter), "ri-bv4-exit" : ("ri_bv4_exit", Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.RiBv4Exit), "ri-bv4-redistribute" : ("ri_bv4_redistribute", Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.RiBv4Redistribute), "route-origin" : ("route_origin", Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.RouteOrigin)}
                                        self._child_list_classes = {"lc-ip" : ("lc_ip", Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.LcIp), "lc-mpls" : ("lc_mpls", Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.LcMpls)}

                                        self.ldp_enter = Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.LdpEnter()
                                        self.ldp_enter.parent = self
                                        self._children_name_map["ldp_enter"] = "ldp-enter"
                                        self._children_yang_names.add("ldp-enter")

                                        self.ldp_exit = Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.LdpExit()
                                        self.ldp_exit.parent = self
                                        self._children_name_map["ldp_exit"] = "ldp-exit"
                                        self._children_yang_names.add("ldp-exit")

                                        self.lsd_enter = Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.LsdEnter()
                                        self.lsd_enter.parent = self
                                        self._children_name_map["lsd_enter"] = "lsd-enter"
                                        self._children_yang_names.add("lsd-enter")

                                        self.lsd_exit = Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.LsdExit()
                                        self.lsd_exit.parent = self
                                        self._children_name_map["lsd_exit"] = "lsd-exit"
                                        self._children_yang_names.add("lsd-exit")

                                        self.ri_bv4_enter = Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.RiBv4Enter()
                                        self.ri_bv4_enter.parent = self
                                        self._children_name_map["ri_bv4_enter"] = "ri-bv4-enter"
                                        self._children_yang_names.add("ri-bv4-enter")

                                        self.ri_bv4_exit = Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.RiBv4Exit()
                                        self.ri_bv4_exit.parent = self
                                        self._children_name_map["ri_bv4_exit"] = "ri-bv4-exit"
                                        self._children_yang_names.add("ri-bv4-exit")

                                        self.ri_bv4_redistribute = Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.RiBv4Redistribute()
                                        self.ri_bv4_redistribute.parent = self
                                        self._children_name_map["ri_bv4_redistribute"] = "ri-bv4-redistribute"
                                        self._children_yang_names.add("ri-bv4-redistribute")

                                        self.route_origin = Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.RouteOrigin()
                                        self.route_origin.parent = self
                                        self._children_name_map["route_origin"] = "route-origin"
                                        self._children_yang_names.add("route-origin")

                                        self.lc_ip = YList(self)
                                        self.lc_mpls = YList(self)
                                        self._segment_path = lambda: "convergence-timeline"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline, [], name, value)


                                    class LcIp(Entity):
                                        """
                                        List of Linecards' completion point for IP
                                        routes
                                        
                                        .. attribute:: fib_complete
                                        
                                        	Completion point of FIB
                                        	**type**\:   :py:class:`FibComplete <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.LcIp.FibComplete>`
                                        
                                        .. attribute:: node_name
                                        
                                        	Linecard node name
                                        	**type**\:  str
                                        
                                        .. attribute:: speed
                                        
                                        	Relative convergence speed
                                        	**type**\:   :py:class:`RcmdLinecardSpeed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLinecardSpeed>`
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.LcIp, self).__init__()

                                            self.yang_name = "lc-ip"
                                            self.yang_parent_name = "convergence-timeline"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {"fib-complete" : ("fib_complete", Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.LcIp.FibComplete)}
                                            self._child_list_classes = {}

                                            self.node_name = YLeaf(YType.str, "node-name")

                                            self.speed = YLeaf(YType.enumeration, "speed")

                                            self.fib_complete = Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.LcIp.FibComplete()
                                            self.fib_complete.parent = self
                                            self._children_name_map["fib_complete"] = "fib-complete"
                                            self._children_yang_names.add("fib-complete")
                                            self._segment_path = lambda: "lc-ip"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.LcIp, ['node_name', 'speed'], name, value)


                                        class FibComplete(Entity):
                                            """
                                            Completion point of FIB
                                            
                                            .. attribute:: duration
                                            
                                            	Duration of processing (in ss.msec)
                                            	**type**\:  str
                                            
                                            .. attribute:: end_time
                                            
                                            	Last route process time relative to event trigger time (in ss.msec)
                                            	**type**\:  str
                                            
                                            .. attribute:: start_time
                                            
                                            	First route process time relative to event trigger time (in ss.msec)
                                            	**type**\:  str
                                            
                                            

                                            """

                                            _prefix = 'infra-rcmd-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                super(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.LcIp.FibComplete, self).__init__()

                                                self.yang_name = "fib-complete"
                                                self.yang_parent_name = "lc-ip"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.duration = YLeaf(YType.str, "duration")

                                                self.end_time = YLeaf(YType.str, "end-time")

                                                self.start_time = YLeaf(YType.str, "start-time")
                                                self._segment_path = lambda: "fib-complete"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.LcIp.FibComplete, ['duration', 'end_time', 'start_time'], name, value)


                                    class LcMpls(Entity):
                                        """
                                        List of Linecards' completion point for MPLS
                                        labels
                                        
                                        .. attribute:: fib_complete
                                        
                                        	Completion point of FIB
                                        	**type**\:   :py:class:`FibComplete <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.LcMpls.FibComplete>`
                                        
                                        .. attribute:: node_name
                                        
                                        	Linecard node name
                                        	**type**\:  str
                                        
                                        .. attribute:: speed
                                        
                                        	Relative convergence speed
                                        	**type**\:   :py:class:`RcmdLinecardSpeed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLinecardSpeed>`
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.LcMpls, self).__init__()

                                            self.yang_name = "lc-mpls"
                                            self.yang_parent_name = "convergence-timeline"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {"fib-complete" : ("fib_complete", Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.LcMpls.FibComplete)}
                                            self._child_list_classes = {}

                                            self.node_name = YLeaf(YType.str, "node-name")

                                            self.speed = YLeaf(YType.enumeration, "speed")

                                            self.fib_complete = Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.LcMpls.FibComplete()
                                            self.fib_complete.parent = self
                                            self._children_name_map["fib_complete"] = "fib-complete"
                                            self._children_yang_names.add("fib-complete")
                                            self._segment_path = lambda: "lc-mpls"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.LcMpls, ['node_name', 'speed'], name, value)


                                        class FibComplete(Entity):
                                            """
                                            Completion point of FIB
                                            
                                            .. attribute:: duration
                                            
                                            	Duration of processing (in ss.msec)
                                            	**type**\:  str
                                            
                                            .. attribute:: end_time
                                            
                                            	Last route process time relative to event trigger time (in ss.msec)
                                            	**type**\:  str
                                            
                                            .. attribute:: start_time
                                            
                                            	First route process time relative to event trigger time (in ss.msec)
                                            	**type**\:  str
                                            
                                            

                                            """

                                            _prefix = 'infra-rcmd-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                super(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.LcMpls.FibComplete, self).__init__()

                                                self.yang_name = "fib-complete"
                                                self.yang_parent_name = "lc-mpls"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.duration = YLeaf(YType.str, "duration")

                                                self.end_time = YLeaf(YType.str, "end-time")

                                                self.start_time = YLeaf(YType.str, "start-time")
                                                self._segment_path = lambda: "fib-complete"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.LcMpls.FibComplete, ['duration', 'end_time', 'start_time'], name, value)


                                    class LdpEnter(Entity):
                                        """
                                        Entry point of LDP
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.LdpEnter, self).__init__()

                                            self.yang_name = "ldp-enter"
                                            self.yang_parent_name = "convergence-timeline"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.duration = YLeaf(YType.str, "duration")

                                            self.end_time = YLeaf(YType.str, "end-time")

                                            self.start_time = YLeaf(YType.str, "start-time")
                                            self._segment_path = lambda: "ldp-enter"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.LdpEnter, ['duration', 'end_time', 'start_time'], name, value)


                                    class LdpExit(Entity):
                                        """
                                        Exit point of LDP to LSD
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.LdpExit, self).__init__()

                                            self.yang_name = "ldp-exit"
                                            self.yang_parent_name = "convergence-timeline"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.duration = YLeaf(YType.str, "duration")

                                            self.end_time = YLeaf(YType.str, "end-time")

                                            self.start_time = YLeaf(YType.str, "start-time")
                                            self._segment_path = lambda: "ldp-exit"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.LdpExit, ['duration', 'end_time', 'start_time'], name, value)


                                    class LsdEnter(Entity):
                                        """
                                        Entry point of LSD
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.LsdEnter, self).__init__()

                                            self.yang_name = "lsd-enter"
                                            self.yang_parent_name = "convergence-timeline"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.duration = YLeaf(YType.str, "duration")

                                            self.end_time = YLeaf(YType.str, "end-time")

                                            self.start_time = YLeaf(YType.str, "start-time")
                                            self._segment_path = lambda: "lsd-enter"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.LsdEnter, ['duration', 'end_time', 'start_time'], name, value)


                                    class LsdExit(Entity):
                                        """
                                        Exit point of LSD to FIBs
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.LsdExit, self).__init__()

                                            self.yang_name = "lsd-exit"
                                            self.yang_parent_name = "convergence-timeline"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.duration = YLeaf(YType.str, "duration")

                                            self.end_time = YLeaf(YType.str, "end-time")

                                            self.start_time = YLeaf(YType.str, "start-time")
                                            self._segment_path = lambda: "lsd-exit"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.LsdExit, ['duration', 'end_time', 'start_time'], name, value)


                                    class RiBv4Enter(Entity):
                                        """
                                        Entry point of IPv4 RIB
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.RiBv4Enter, self).__init__()

                                            self.yang_name = "ri-bv4-enter"
                                            self.yang_parent_name = "convergence-timeline"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.duration = YLeaf(YType.str, "duration")

                                            self.end_time = YLeaf(YType.str, "end-time")

                                            self.start_time = YLeaf(YType.str, "start-time")
                                            self._segment_path = lambda: "ri-bv4-enter"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.RiBv4Enter, ['duration', 'end_time', 'start_time'], name, value)


                                    class RiBv4Exit(Entity):
                                        """
                                        Exit point from IPv4 RIB to FIBs
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.RiBv4Exit, self).__init__()

                                            self.yang_name = "ri-bv4-exit"
                                            self.yang_parent_name = "convergence-timeline"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.duration = YLeaf(YType.str, "duration")

                                            self.end_time = YLeaf(YType.str, "end-time")

                                            self.start_time = YLeaf(YType.str, "start-time")
                                            self._segment_path = lambda: "ri-bv4-exit"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.RiBv4Exit, ['duration', 'end_time', 'start_time'], name, value)


                                    class RiBv4Redistribute(Entity):
                                        """
                                        Route Redistribute point from IPv4 RIB to LDP
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.RiBv4Redistribute, self).__init__()

                                            self.yang_name = "ri-bv4-redistribute"
                                            self.yang_parent_name = "convergence-timeline"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.duration = YLeaf(YType.str, "duration")

                                            self.end_time = YLeaf(YType.str, "end-time")

                                            self.start_time = YLeaf(YType.str, "start-time")
                                            self._segment_path = lambda: "ri-bv4-redistribute"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.RiBv4Redistribute, ['duration', 'end_time', 'start_time'], name, value)


                                    class RouteOrigin(Entity):
                                        """
                                        Route origin (routing protocol)
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.RouteOrigin, self).__init__()

                                            self.yang_name = "route-origin"
                                            self.yang_parent_name = "convergence-timeline"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.duration = YLeaf(YType.str, "duration")

                                            self.end_time = YLeaf(YType.str, "end-time")

                                            self.start_time = YLeaf(YType.str, "start-time")
                                            self._segment_path = lambda: "route-origin"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.RouteOrigin, ['duration', 'end_time', 'start_time'], name, value)


                                class LeafNetworksAdded(Entity):
                                    """
                                    List of Leaf Networks Added
                                    
                                    .. attribute:: address
                                    
                                    	IP address
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: net_mask
                                    
                                    	Mask
                                    	**type**\:  int
                                    
                                    	**range:** 0..255
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.LeafNetworksAdded, self).__init__()

                                        self.yang_name = "leaf-networks-added"
                                        self.yang_parent_name = "priority"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.address = YLeaf(YType.str, "address")

                                        self.net_mask = YLeaf(YType.uint8, "net-mask")
                                        self._segment_path = lambda: "leaf-networks-added"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.LeafNetworksAdded, ['address', 'net_mask'], name, value)


                                class LeafNetworksDeleted(Entity):
                                    """
                                    List of Leaf Networks Deleted
                                    
                                    .. attribute:: address
                                    
                                    	IP address
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: net_mask
                                    
                                    	Mask
                                    	**type**\:  int
                                    
                                    	**range:** 0..255
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.LeafNetworksDeleted, self).__init__()

                                        self.yang_name = "leaf-networks-deleted"
                                        self.yang_parent_name = "priority"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.address = YLeaf(YType.str, "address")

                                        self.net_mask = YLeaf(YType.uint8, "net-mask")
                                        self._segment_path = lambda: "leaf-networks-deleted"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.LeafNetworksDeleted, ['address', 'net_mask'], name, value)


                                class PrioritySummary(Entity):
                                    """
                                    Summary of the priority
                                    
                                    .. attribute:: frr_statistic
                                    
                                    	Fast Re\-Route Statistics
                                    	**type**\: list of    :py:class:`FrrStatistic <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.PrioritySummary.FrrStatistic>`
                                    
                                    .. attribute:: ip_convergence_time
                                    
                                    	Convergence time for IP route programming
                                    	**type**\:   :py:class:`IpConvergenceTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.PrioritySummary.IpConvergenceTime>`
                                    
                                    .. attribute:: level
                                    
                                    	Critical, High, Medium or Low
                                    	**type**\:   :py:class:`RcmdPriorityLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdPriorityLevel>`
                                    
                                    .. attribute:: mpls_convergence_time
                                    
                                    	Convergence time for MPLS label programming
                                    	**type**\:   :py:class:`MplsConvergenceTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.PrioritySummary.MplsConvergenceTime>`
                                    
                                    .. attribute:: route_statistics
                                    
                                    	Route statistics
                                    	**type**\:   :py:class:`RouteStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.PrioritySummary.RouteStatistics>`
                                    
                                    .. attribute:: threshold_exceeded
                                    
                                    	Threshold exceeded
                                    	**type**\:  bool
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.PrioritySummary, self).__init__()

                                        self.yang_name = "priority-summary"
                                        self.yang_parent_name = "priority"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {"ip-convergence-time" : ("ip_convergence_time", Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.PrioritySummary.IpConvergenceTime), "mpls-convergence-time" : ("mpls_convergence_time", Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.PrioritySummary.MplsConvergenceTime), "route-statistics" : ("route_statistics", Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.PrioritySummary.RouteStatistics)}
                                        self._child_list_classes = {"frr-statistic" : ("frr_statistic", Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.PrioritySummary.FrrStatistic)}

                                        self.level = YLeaf(YType.enumeration, "level")

                                        self.threshold_exceeded = YLeaf(YType.boolean, "threshold-exceeded")

                                        self.ip_convergence_time = Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.PrioritySummary.IpConvergenceTime()
                                        self.ip_convergence_time.parent = self
                                        self._children_name_map["ip_convergence_time"] = "ip-convergence-time"
                                        self._children_yang_names.add("ip-convergence-time")

                                        self.mpls_convergence_time = Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.PrioritySummary.MplsConvergenceTime()
                                        self.mpls_convergence_time.parent = self
                                        self._children_name_map["mpls_convergence_time"] = "mpls-convergence-time"
                                        self._children_yang_names.add("mpls-convergence-time")

                                        self.route_statistics = Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.PrioritySummary.RouteStatistics()
                                        self.route_statistics.parent = self
                                        self._children_name_map["route_statistics"] = "route-statistics"
                                        self._children_yang_names.add("route-statistics")

                                        self.frr_statistic = YList(self)
                                        self._segment_path = lambda: "priority-summary"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.PrioritySummary, ['level', 'threshold_exceeded'], name, value)


                                    class FrrStatistic(Entity):
                                        """
                                        Fast Re\-Route Statistics
                                        
                                        .. attribute:: coverage
                                        
                                        	Coverage in percentage
                                        	**type**\:  str
                                        
                                        	**units**\: percentage
                                        
                                        .. attribute:: fully_protected_routes
                                        
                                        	Fully Protected Routes
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: partially_protected_routes
                                        
                                        	Partially Protected Routes
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: total_routes
                                        
                                        	Total Number of Routes
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.PrioritySummary.FrrStatistic, self).__init__()

                                            self.yang_name = "frr-statistic"
                                            self.yang_parent_name = "priority-summary"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.coverage = YLeaf(YType.str, "coverage")

                                            self.fully_protected_routes = YLeaf(YType.uint32, "fully-protected-routes")

                                            self.partially_protected_routes = YLeaf(YType.uint32, "partially-protected-routes")

                                            self.total_routes = YLeaf(YType.uint32, "total-routes")
                                            self._segment_path = lambda: "frr-statistic"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.PrioritySummary.FrrStatistic, ['coverage', 'fully_protected_routes', 'partially_protected_routes', 'total_routes'], name, value)


                                    class IpConvergenceTime(Entity):
                                        """
                                        Convergence time for IP route programming
                                        
                                        .. attribute:: fastest_node_name
                                        
                                        	Linecard node name which took the minimum time
                                        	**type**\:  str
                                        
                                        .. attribute:: maximum_time
                                        
                                        	Maximum time(in seconds.milliseconds)
                                        	**type**\:  str
                                        
                                        	**units**\: millisecond
                                        
                                        .. attribute:: minimum_time
                                        
                                        	Minimum time(in seconds.milliseconds)
                                        	**type**\:  str
                                        
                                        	**units**\: millisecond
                                        
                                        .. attribute:: slowest_node_name
                                        
                                        	Linecard node name which took the maximum time
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.PrioritySummary.IpConvergenceTime, self).__init__()

                                            self.yang_name = "ip-convergence-time"
                                            self.yang_parent_name = "priority-summary"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.fastest_node_name = YLeaf(YType.str, "fastest-node-name")

                                            self.maximum_time = YLeaf(YType.str, "maximum-time")

                                            self.minimum_time = YLeaf(YType.str, "minimum-time")

                                            self.slowest_node_name = YLeaf(YType.str, "slowest-node-name")
                                            self._segment_path = lambda: "ip-convergence-time"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.PrioritySummary.IpConvergenceTime, ['fastest_node_name', 'maximum_time', 'minimum_time', 'slowest_node_name'], name, value)


                                    class MplsConvergenceTime(Entity):
                                        """
                                        Convergence time for MPLS label programming
                                        
                                        .. attribute:: fastest_node_name
                                        
                                        	Linecard node name which took the minimum time
                                        	**type**\:  str
                                        
                                        .. attribute:: maximum_time
                                        
                                        	Maximum time(in seconds.milliseconds)
                                        	**type**\:  str
                                        
                                        	**units**\: millisecond
                                        
                                        .. attribute:: minimum_time
                                        
                                        	Minimum time(in seconds.milliseconds)
                                        	**type**\:  str
                                        
                                        	**units**\: millisecond
                                        
                                        .. attribute:: slowest_node_name
                                        
                                        	Linecard node name which took the maximum time
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.PrioritySummary.MplsConvergenceTime, self).__init__()

                                            self.yang_name = "mpls-convergence-time"
                                            self.yang_parent_name = "priority-summary"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.fastest_node_name = YLeaf(YType.str, "fastest-node-name")

                                            self.maximum_time = YLeaf(YType.str, "maximum-time")

                                            self.minimum_time = YLeaf(YType.str, "minimum-time")

                                            self.slowest_node_name = YLeaf(YType.str, "slowest-node-name")
                                            self._segment_path = lambda: "mpls-convergence-time"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.PrioritySummary.MplsConvergenceTime, ['fastest_node_name', 'maximum_time', 'minimum_time', 'slowest_node_name'], name, value)


                                    class RouteStatistics(Entity):
                                        """
                                        Route statistics
                                        
                                        .. attribute:: adds
                                        
                                        	Added
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: deletes
                                        
                                        	Deleted
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: modifies
                                        
                                        	Modified
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: reachables
                                        
                                        	Reachable
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: touches
                                        
                                        	Touched
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: unreachables
                                        
                                        	Unreachable
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.PrioritySummary.RouteStatistics, self).__init__()

                                            self.yang_name = "route-statistics"
                                            self.yang_parent_name = "priority-summary"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.adds = YLeaf(YType.uint32, "adds")

                                            self.deletes = YLeaf(YType.uint32, "deletes")

                                            self.modifies = YLeaf(YType.uint32, "modifies")

                                            self.reachables = YLeaf(YType.uint32, "reachables")

                                            self.touches = YLeaf(YType.uint32, "touches")

                                            self.unreachables = YLeaf(YType.uint32, "unreachables")
                                            self._segment_path = lambda: "route-statistics"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.PrioritySummary.RouteStatistics, ['adds', 'deletes', 'modifies', 'reachables', 'touches', 'unreachables'], name, value)


                            class TriggerLsa(Entity):
                                """
                                LSA that triggered the Dijkstra run
                                
                                .. attribute:: change_type
                                
                                	Add, Delete, Modify
                                	**type**\:   :py:class:`RcmdLsChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsChange>`
                                
                                .. attribute:: lsa_id
                                
                                	LSA ID
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: lsa_type
                                
                                	LSA type
                                	**type**\:   :py:class:`RcmdLsa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsa>`
                                
                                .. attribute:: origin_router_id
                                
                                	Originating Router ID
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: reception_time
                                
                                	Reception Time on router (in hh\:mm\:ss.msec)
                                	**type**\:  str
                                
                                .. attribute:: sequence_number
                                
                                	Sequence Number
                                	**type**\:  str
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.TriggerLsa, self).__init__()

                                    self.yang_name = "trigger-lsa"
                                    self.yang_parent_name = "dijkstra-run"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {}
                                    self._child_list_classes = {}

                                    self.change_type = YLeaf(YType.enumeration, "change-type")

                                    self.lsa_id = YLeaf(YType.str, "lsa-id")

                                    self.lsa_type = YLeaf(YType.enumeration, "lsa-type")

                                    self.origin_router_id = YLeaf(YType.str, "origin-router-id")

                                    self.reception_time = YLeaf(YType.str, "reception-time")

                                    self.sequence_number = YLeaf(YType.str, "sequence-number")
                                    self._segment_path = lambda: "trigger-lsa"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.TriggerLsa, ['change_type', 'lsa_id', 'lsa_type', 'origin_router_id', 'reception_time', 'sequence_number'], name, value)


                        class InterAreaAndExternal(Entity):
                            """
                            Inter\-area & external calculation information
                            
                            .. attribute:: priority
                            
                            	Convergence information on a per\-priority basis
                            	**type**\: list of    :py:class:`Priority <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority>`
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal, self).__init__()

                                self.yang_name = "inter-area-and-external"
                                self.yang_parent_name = "spf-run-offline"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {"priority" : ("priority", Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority)}

                                self.priority = YList(self)
                                self._segment_path = lambda: "inter-area-and-external"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal, [], name, value)


                            class Priority(Entity):
                                """
                                Convergence information on a per\-priority basis
                                
                                .. attribute:: convergence_timeline
                                
                                	Convergence timeline details
                                	**type**\: list of    :py:class:`ConvergenceTimeline <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline>`
                                
                                .. attribute:: leaf_networks_added
                                
                                	List of Leaf Networks Added
                                	**type**\: list of    :py:class:`LeafNetworksAdded <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.LeafNetworksAdded>`
                                
                                .. attribute:: leaf_networks_deleted
                                
                                	List of Leaf Networks Deleted
                                	**type**\: list of    :py:class:`LeafNetworksDeleted <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.LeafNetworksDeleted>`
                                
                                .. attribute:: priority_summary
                                
                                	Summary of the priority
                                	**type**\:   :py:class:`PrioritySummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.PrioritySummary>`
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority, self).__init__()

                                    self.yang_name = "priority"
                                    self.yang_parent_name = "inter-area-and-external"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {"priority-summary" : ("priority_summary", Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.PrioritySummary)}
                                    self._child_list_classes = {"convergence-timeline" : ("convergence_timeline", Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline), "leaf-networks-added" : ("leaf_networks_added", Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.LeafNetworksAdded), "leaf-networks-deleted" : ("leaf_networks_deleted", Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.LeafNetworksDeleted)}

                                    self.priority_summary = Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.PrioritySummary()
                                    self.priority_summary.parent = self
                                    self._children_name_map["priority_summary"] = "priority-summary"
                                    self._children_yang_names.add("priority-summary")

                                    self.convergence_timeline = YList(self)
                                    self.leaf_networks_added = YList(self)
                                    self.leaf_networks_deleted = YList(self)
                                    self._segment_path = lambda: "priority"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority, [], name, value)


                                class ConvergenceTimeline(Entity):
                                    """
                                    Convergence timeline details
                                    
                                    .. attribute:: lc_ip
                                    
                                    	List of Linecards' completion point for IP routes
                                    	**type**\: list of    :py:class:`LcIp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.LcIp>`
                                    
                                    .. attribute:: lc_mpls
                                    
                                    	List of Linecards' completion point for MPLS labels
                                    	**type**\: list of    :py:class:`LcMpls <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.LcMpls>`
                                    
                                    .. attribute:: ldp_enter
                                    
                                    	Entry point of LDP
                                    	**type**\:   :py:class:`LdpEnter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.LdpEnter>`
                                    
                                    .. attribute:: ldp_exit
                                    
                                    	Exit point of LDP to LSD
                                    	**type**\:   :py:class:`LdpExit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.LdpExit>`
                                    
                                    .. attribute:: lsd_enter
                                    
                                    	Entry point of LSD
                                    	**type**\:   :py:class:`LsdEnter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.LsdEnter>`
                                    
                                    .. attribute:: lsd_exit
                                    
                                    	Exit point of LSD to FIBs
                                    	**type**\:   :py:class:`LsdExit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.LsdExit>`
                                    
                                    .. attribute:: ri_bv4_enter
                                    
                                    	Entry point of IPv4 RIB
                                    	**type**\:   :py:class:`RiBv4Enter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.RiBv4Enter>`
                                    
                                    .. attribute:: ri_bv4_exit
                                    
                                    	Exit point from IPv4 RIB to FIBs
                                    	**type**\:   :py:class:`RiBv4Exit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.RiBv4Exit>`
                                    
                                    .. attribute:: ri_bv4_redistribute
                                    
                                    	Route Redistribute point from IPv4 RIB to LDP
                                    	**type**\:   :py:class:`RiBv4Redistribute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.RiBv4Redistribute>`
                                    
                                    .. attribute:: route_origin
                                    
                                    	Route origin (routing protocol)
                                    	**type**\:   :py:class:`RouteOrigin <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.RouteOrigin>`
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline, self).__init__()

                                        self.yang_name = "convergence-timeline"
                                        self.yang_parent_name = "priority"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {"ldp-enter" : ("ldp_enter", Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.LdpEnter), "ldp-exit" : ("ldp_exit", Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.LdpExit), "lsd-enter" : ("lsd_enter", Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.LsdEnter), "lsd-exit" : ("lsd_exit", Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.LsdExit), "ri-bv4-enter" : ("ri_bv4_enter", Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.RiBv4Enter), "ri-bv4-exit" : ("ri_bv4_exit", Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.RiBv4Exit), "ri-bv4-redistribute" : ("ri_bv4_redistribute", Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.RiBv4Redistribute), "route-origin" : ("route_origin", Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.RouteOrigin)}
                                        self._child_list_classes = {"lc-ip" : ("lc_ip", Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.LcIp), "lc-mpls" : ("lc_mpls", Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.LcMpls)}

                                        self.ldp_enter = Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.LdpEnter()
                                        self.ldp_enter.parent = self
                                        self._children_name_map["ldp_enter"] = "ldp-enter"
                                        self._children_yang_names.add("ldp-enter")

                                        self.ldp_exit = Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.LdpExit()
                                        self.ldp_exit.parent = self
                                        self._children_name_map["ldp_exit"] = "ldp-exit"
                                        self._children_yang_names.add("ldp-exit")

                                        self.lsd_enter = Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.LsdEnter()
                                        self.lsd_enter.parent = self
                                        self._children_name_map["lsd_enter"] = "lsd-enter"
                                        self._children_yang_names.add("lsd-enter")

                                        self.lsd_exit = Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.LsdExit()
                                        self.lsd_exit.parent = self
                                        self._children_name_map["lsd_exit"] = "lsd-exit"
                                        self._children_yang_names.add("lsd-exit")

                                        self.ri_bv4_enter = Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.RiBv4Enter()
                                        self.ri_bv4_enter.parent = self
                                        self._children_name_map["ri_bv4_enter"] = "ri-bv4-enter"
                                        self._children_yang_names.add("ri-bv4-enter")

                                        self.ri_bv4_exit = Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.RiBv4Exit()
                                        self.ri_bv4_exit.parent = self
                                        self._children_name_map["ri_bv4_exit"] = "ri-bv4-exit"
                                        self._children_yang_names.add("ri-bv4-exit")

                                        self.ri_bv4_redistribute = Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.RiBv4Redistribute()
                                        self.ri_bv4_redistribute.parent = self
                                        self._children_name_map["ri_bv4_redistribute"] = "ri-bv4-redistribute"
                                        self._children_yang_names.add("ri-bv4-redistribute")

                                        self.route_origin = Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.RouteOrigin()
                                        self.route_origin.parent = self
                                        self._children_name_map["route_origin"] = "route-origin"
                                        self._children_yang_names.add("route-origin")

                                        self.lc_ip = YList(self)
                                        self.lc_mpls = YList(self)
                                        self._segment_path = lambda: "convergence-timeline"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline, [], name, value)


                                    class LcIp(Entity):
                                        """
                                        List of Linecards' completion point for IP
                                        routes
                                        
                                        .. attribute:: fib_complete
                                        
                                        	Completion point of FIB
                                        	**type**\:   :py:class:`FibComplete <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.LcIp.FibComplete>`
                                        
                                        .. attribute:: node_name
                                        
                                        	Linecard node name
                                        	**type**\:  str
                                        
                                        .. attribute:: speed
                                        
                                        	Relative convergence speed
                                        	**type**\:   :py:class:`RcmdLinecardSpeed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLinecardSpeed>`
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.LcIp, self).__init__()

                                            self.yang_name = "lc-ip"
                                            self.yang_parent_name = "convergence-timeline"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {"fib-complete" : ("fib_complete", Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.LcIp.FibComplete)}
                                            self._child_list_classes = {}

                                            self.node_name = YLeaf(YType.str, "node-name")

                                            self.speed = YLeaf(YType.enumeration, "speed")

                                            self.fib_complete = Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.LcIp.FibComplete()
                                            self.fib_complete.parent = self
                                            self._children_name_map["fib_complete"] = "fib-complete"
                                            self._children_yang_names.add("fib-complete")
                                            self._segment_path = lambda: "lc-ip"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.LcIp, ['node_name', 'speed'], name, value)


                                        class FibComplete(Entity):
                                            """
                                            Completion point of FIB
                                            
                                            .. attribute:: duration
                                            
                                            	Duration of processing (in ss.msec)
                                            	**type**\:  str
                                            
                                            .. attribute:: end_time
                                            
                                            	Last route process time relative to event trigger time (in ss.msec)
                                            	**type**\:  str
                                            
                                            .. attribute:: start_time
                                            
                                            	First route process time relative to event trigger time (in ss.msec)
                                            	**type**\:  str
                                            
                                            

                                            """

                                            _prefix = 'infra-rcmd-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                super(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.LcIp.FibComplete, self).__init__()

                                                self.yang_name = "fib-complete"
                                                self.yang_parent_name = "lc-ip"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.duration = YLeaf(YType.str, "duration")

                                                self.end_time = YLeaf(YType.str, "end-time")

                                                self.start_time = YLeaf(YType.str, "start-time")
                                                self._segment_path = lambda: "fib-complete"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.LcIp.FibComplete, ['duration', 'end_time', 'start_time'], name, value)


                                    class LcMpls(Entity):
                                        """
                                        List of Linecards' completion point for MPLS
                                        labels
                                        
                                        .. attribute:: fib_complete
                                        
                                        	Completion point of FIB
                                        	**type**\:   :py:class:`FibComplete <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.LcMpls.FibComplete>`
                                        
                                        .. attribute:: node_name
                                        
                                        	Linecard node name
                                        	**type**\:  str
                                        
                                        .. attribute:: speed
                                        
                                        	Relative convergence speed
                                        	**type**\:   :py:class:`RcmdLinecardSpeed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLinecardSpeed>`
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.LcMpls, self).__init__()

                                            self.yang_name = "lc-mpls"
                                            self.yang_parent_name = "convergence-timeline"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {"fib-complete" : ("fib_complete", Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.LcMpls.FibComplete)}
                                            self._child_list_classes = {}

                                            self.node_name = YLeaf(YType.str, "node-name")

                                            self.speed = YLeaf(YType.enumeration, "speed")

                                            self.fib_complete = Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.LcMpls.FibComplete()
                                            self.fib_complete.parent = self
                                            self._children_name_map["fib_complete"] = "fib-complete"
                                            self._children_yang_names.add("fib-complete")
                                            self._segment_path = lambda: "lc-mpls"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.LcMpls, ['node_name', 'speed'], name, value)


                                        class FibComplete(Entity):
                                            """
                                            Completion point of FIB
                                            
                                            .. attribute:: duration
                                            
                                            	Duration of processing (in ss.msec)
                                            	**type**\:  str
                                            
                                            .. attribute:: end_time
                                            
                                            	Last route process time relative to event trigger time (in ss.msec)
                                            	**type**\:  str
                                            
                                            .. attribute:: start_time
                                            
                                            	First route process time relative to event trigger time (in ss.msec)
                                            	**type**\:  str
                                            
                                            

                                            """

                                            _prefix = 'infra-rcmd-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                super(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.LcMpls.FibComplete, self).__init__()

                                                self.yang_name = "fib-complete"
                                                self.yang_parent_name = "lc-mpls"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.duration = YLeaf(YType.str, "duration")

                                                self.end_time = YLeaf(YType.str, "end-time")

                                                self.start_time = YLeaf(YType.str, "start-time")
                                                self._segment_path = lambda: "fib-complete"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.LcMpls.FibComplete, ['duration', 'end_time', 'start_time'], name, value)


                                    class LdpEnter(Entity):
                                        """
                                        Entry point of LDP
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.LdpEnter, self).__init__()

                                            self.yang_name = "ldp-enter"
                                            self.yang_parent_name = "convergence-timeline"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.duration = YLeaf(YType.str, "duration")

                                            self.end_time = YLeaf(YType.str, "end-time")

                                            self.start_time = YLeaf(YType.str, "start-time")
                                            self._segment_path = lambda: "ldp-enter"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.LdpEnter, ['duration', 'end_time', 'start_time'], name, value)


                                    class LdpExit(Entity):
                                        """
                                        Exit point of LDP to LSD
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.LdpExit, self).__init__()

                                            self.yang_name = "ldp-exit"
                                            self.yang_parent_name = "convergence-timeline"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.duration = YLeaf(YType.str, "duration")

                                            self.end_time = YLeaf(YType.str, "end-time")

                                            self.start_time = YLeaf(YType.str, "start-time")
                                            self._segment_path = lambda: "ldp-exit"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.LdpExit, ['duration', 'end_time', 'start_time'], name, value)


                                    class LsdEnter(Entity):
                                        """
                                        Entry point of LSD
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.LsdEnter, self).__init__()

                                            self.yang_name = "lsd-enter"
                                            self.yang_parent_name = "convergence-timeline"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.duration = YLeaf(YType.str, "duration")

                                            self.end_time = YLeaf(YType.str, "end-time")

                                            self.start_time = YLeaf(YType.str, "start-time")
                                            self._segment_path = lambda: "lsd-enter"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.LsdEnter, ['duration', 'end_time', 'start_time'], name, value)


                                    class LsdExit(Entity):
                                        """
                                        Exit point of LSD to FIBs
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.LsdExit, self).__init__()

                                            self.yang_name = "lsd-exit"
                                            self.yang_parent_name = "convergence-timeline"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.duration = YLeaf(YType.str, "duration")

                                            self.end_time = YLeaf(YType.str, "end-time")

                                            self.start_time = YLeaf(YType.str, "start-time")
                                            self._segment_path = lambda: "lsd-exit"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.LsdExit, ['duration', 'end_time', 'start_time'], name, value)


                                    class RiBv4Enter(Entity):
                                        """
                                        Entry point of IPv4 RIB
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.RiBv4Enter, self).__init__()

                                            self.yang_name = "ri-bv4-enter"
                                            self.yang_parent_name = "convergence-timeline"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.duration = YLeaf(YType.str, "duration")

                                            self.end_time = YLeaf(YType.str, "end-time")

                                            self.start_time = YLeaf(YType.str, "start-time")
                                            self._segment_path = lambda: "ri-bv4-enter"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.RiBv4Enter, ['duration', 'end_time', 'start_time'], name, value)


                                    class RiBv4Exit(Entity):
                                        """
                                        Exit point from IPv4 RIB to FIBs
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.RiBv4Exit, self).__init__()

                                            self.yang_name = "ri-bv4-exit"
                                            self.yang_parent_name = "convergence-timeline"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.duration = YLeaf(YType.str, "duration")

                                            self.end_time = YLeaf(YType.str, "end-time")

                                            self.start_time = YLeaf(YType.str, "start-time")
                                            self._segment_path = lambda: "ri-bv4-exit"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.RiBv4Exit, ['duration', 'end_time', 'start_time'], name, value)


                                    class RiBv4Redistribute(Entity):
                                        """
                                        Route Redistribute point from IPv4 RIB to LDP
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.RiBv4Redistribute, self).__init__()

                                            self.yang_name = "ri-bv4-redistribute"
                                            self.yang_parent_name = "convergence-timeline"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.duration = YLeaf(YType.str, "duration")

                                            self.end_time = YLeaf(YType.str, "end-time")

                                            self.start_time = YLeaf(YType.str, "start-time")
                                            self._segment_path = lambda: "ri-bv4-redistribute"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.RiBv4Redistribute, ['duration', 'end_time', 'start_time'], name, value)


                                    class RouteOrigin(Entity):
                                        """
                                        Route origin (routing protocol)
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.RouteOrigin, self).__init__()

                                            self.yang_name = "route-origin"
                                            self.yang_parent_name = "convergence-timeline"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.duration = YLeaf(YType.str, "duration")

                                            self.end_time = YLeaf(YType.str, "end-time")

                                            self.start_time = YLeaf(YType.str, "start-time")
                                            self._segment_path = lambda: "route-origin"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.RouteOrigin, ['duration', 'end_time', 'start_time'], name, value)


                                class LeafNetworksAdded(Entity):
                                    """
                                    List of Leaf Networks Added
                                    
                                    .. attribute:: address
                                    
                                    	IP address
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: net_mask
                                    
                                    	Mask
                                    	**type**\:  int
                                    
                                    	**range:** 0..255
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.LeafNetworksAdded, self).__init__()

                                        self.yang_name = "leaf-networks-added"
                                        self.yang_parent_name = "priority"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.address = YLeaf(YType.str, "address")

                                        self.net_mask = YLeaf(YType.uint8, "net-mask")
                                        self._segment_path = lambda: "leaf-networks-added"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.LeafNetworksAdded, ['address', 'net_mask'], name, value)


                                class LeafNetworksDeleted(Entity):
                                    """
                                    List of Leaf Networks Deleted
                                    
                                    .. attribute:: address
                                    
                                    	IP address
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: net_mask
                                    
                                    	Mask
                                    	**type**\:  int
                                    
                                    	**range:** 0..255
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.LeafNetworksDeleted, self).__init__()

                                        self.yang_name = "leaf-networks-deleted"
                                        self.yang_parent_name = "priority"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.address = YLeaf(YType.str, "address")

                                        self.net_mask = YLeaf(YType.uint8, "net-mask")
                                        self._segment_path = lambda: "leaf-networks-deleted"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.LeafNetworksDeleted, ['address', 'net_mask'], name, value)


                                class PrioritySummary(Entity):
                                    """
                                    Summary of the priority
                                    
                                    .. attribute:: ip_convergence_time
                                    
                                    	Convergence time for IP route programming
                                    	**type**\:   :py:class:`IpConvergenceTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.PrioritySummary.IpConvergenceTime>`
                                    
                                    .. attribute:: level
                                    
                                    	Critical, High, Medium or Low
                                    	**type**\:   :py:class:`RcmdPriorityLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdPriorityLevel>`
                                    
                                    .. attribute:: mpls_convergence_time
                                    
                                    	Convergence time for MPLS label programming
                                    	**type**\:   :py:class:`MplsConvergenceTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.PrioritySummary.MplsConvergenceTime>`
                                    
                                    .. attribute:: route_statistics
                                    
                                    	Route statistics
                                    	**type**\:   :py:class:`RouteStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.PrioritySummary.RouteStatistics>`
                                    
                                    .. attribute:: threshold_exceeded
                                    
                                    	Threshold exceeded
                                    	**type**\:  bool
                                    
                                    .. attribute:: type3ls_as
                                    
                                    	Number of Type 3 LSA
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: type4ls_as
                                    
                                    	Number of Type 4 LSA
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: type57ls_as
                                    
                                    	Number of Type 5/7 LSA
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.PrioritySummary, self).__init__()

                                        self.yang_name = "priority-summary"
                                        self.yang_parent_name = "priority"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {"ip-convergence-time" : ("ip_convergence_time", Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.PrioritySummary.IpConvergenceTime), "mpls-convergence-time" : ("mpls_convergence_time", Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.PrioritySummary.MplsConvergenceTime), "route-statistics" : ("route_statistics", Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.PrioritySummary.RouteStatistics)}
                                        self._child_list_classes = {}

                                        self.level = YLeaf(YType.enumeration, "level")

                                        self.threshold_exceeded = YLeaf(YType.boolean, "threshold-exceeded")

                                        self.type3ls_as = YLeaf(YType.uint32, "type3ls-as")

                                        self.type4ls_as = YLeaf(YType.uint32, "type4ls-as")

                                        self.type57ls_as = YLeaf(YType.uint32, "type57ls-as")

                                        self.ip_convergence_time = Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.PrioritySummary.IpConvergenceTime()
                                        self.ip_convergence_time.parent = self
                                        self._children_name_map["ip_convergence_time"] = "ip-convergence-time"
                                        self._children_yang_names.add("ip-convergence-time")

                                        self.mpls_convergence_time = Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.PrioritySummary.MplsConvergenceTime()
                                        self.mpls_convergence_time.parent = self
                                        self._children_name_map["mpls_convergence_time"] = "mpls-convergence-time"
                                        self._children_yang_names.add("mpls-convergence-time")

                                        self.route_statistics = Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.PrioritySummary.RouteStatistics()
                                        self.route_statistics.parent = self
                                        self._children_name_map["route_statistics"] = "route-statistics"
                                        self._children_yang_names.add("route-statistics")
                                        self._segment_path = lambda: "priority-summary"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.PrioritySummary, ['level', 'threshold_exceeded', 'type3ls_as', 'type4ls_as', 'type57ls_as'], name, value)


                                    class IpConvergenceTime(Entity):
                                        """
                                        Convergence time for IP route programming
                                        
                                        .. attribute:: fastest_node_name
                                        
                                        	Linecard node name which took the minimum time
                                        	**type**\:  str
                                        
                                        .. attribute:: maximum_time
                                        
                                        	Maximum time(in seconds.milliseconds)
                                        	**type**\:  str
                                        
                                        	**units**\: millisecond
                                        
                                        .. attribute:: minimum_time
                                        
                                        	Minimum time(in seconds.milliseconds)
                                        	**type**\:  str
                                        
                                        	**units**\: millisecond
                                        
                                        .. attribute:: slowest_node_name
                                        
                                        	Linecard node name which took the maximum time
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.PrioritySummary.IpConvergenceTime, self).__init__()

                                            self.yang_name = "ip-convergence-time"
                                            self.yang_parent_name = "priority-summary"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.fastest_node_name = YLeaf(YType.str, "fastest-node-name")

                                            self.maximum_time = YLeaf(YType.str, "maximum-time")

                                            self.minimum_time = YLeaf(YType.str, "minimum-time")

                                            self.slowest_node_name = YLeaf(YType.str, "slowest-node-name")
                                            self._segment_path = lambda: "ip-convergence-time"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.PrioritySummary.IpConvergenceTime, ['fastest_node_name', 'maximum_time', 'minimum_time', 'slowest_node_name'], name, value)


                                    class MplsConvergenceTime(Entity):
                                        """
                                        Convergence time for MPLS label programming
                                        
                                        .. attribute:: fastest_node_name
                                        
                                        	Linecard node name which took the minimum time
                                        	**type**\:  str
                                        
                                        .. attribute:: maximum_time
                                        
                                        	Maximum time(in seconds.milliseconds)
                                        	**type**\:  str
                                        
                                        	**units**\: millisecond
                                        
                                        .. attribute:: minimum_time
                                        
                                        	Minimum time(in seconds.milliseconds)
                                        	**type**\:  str
                                        
                                        	**units**\: millisecond
                                        
                                        .. attribute:: slowest_node_name
                                        
                                        	Linecard node name which took the maximum time
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.PrioritySummary.MplsConvergenceTime, self).__init__()

                                            self.yang_name = "mpls-convergence-time"
                                            self.yang_parent_name = "priority-summary"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.fastest_node_name = YLeaf(YType.str, "fastest-node-name")

                                            self.maximum_time = YLeaf(YType.str, "maximum-time")

                                            self.minimum_time = YLeaf(YType.str, "minimum-time")

                                            self.slowest_node_name = YLeaf(YType.str, "slowest-node-name")
                                            self._segment_path = lambda: "mpls-convergence-time"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.PrioritySummary.MplsConvergenceTime, ['fastest_node_name', 'maximum_time', 'minimum_time', 'slowest_node_name'], name, value)


                                    class RouteStatistics(Entity):
                                        """
                                        Route statistics
                                        
                                        .. attribute:: adds
                                        
                                        	Added
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: deletes
                                        
                                        	Deleted
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: modifies
                                        
                                        	Modified
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: reachables
                                        
                                        	Reachable
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: touches
                                        
                                        	Touched
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: unreachables
                                        
                                        	Unreachable
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.PrioritySummary.RouteStatistics, self).__init__()

                                            self.yang_name = "route-statistics"
                                            self.yang_parent_name = "priority-summary"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.adds = YLeaf(YType.uint32, "adds")

                                            self.deletes = YLeaf(YType.uint32, "deletes")

                                            self.modifies = YLeaf(YType.uint32, "modifies")

                                            self.reachables = YLeaf(YType.uint32, "reachables")

                                            self.touches = YLeaf(YType.uint32, "touches")

                                            self.unreachables = YLeaf(YType.uint32, "unreachables")
                                            self._segment_path = lambda: "route-statistics"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.PrioritySummary.RouteStatistics, ['adds', 'deletes', 'modifies', 'reachables', 'touches', 'unreachables'], name, value)


                        class SpfSummary(Entity):
                            """
                            SPF summary information
                            
                            .. attribute:: duration
                            
                            	Duration of complete SPF calculation (in ss .msec)
                            	**type**\:  str
                            
                            .. attribute:: is_data_complete
                            
                            	Whether the event has all information
                            	**type**\:  bool
                            
                            .. attribute:: priority_summary
                            
                            	Convergence information summary on per\-priority basis
                            	**type**\: list of    :py:class:`PrioritySummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary>`
                            
                            .. attribute:: start_time
                            
                            	Start time (offset from event trigger time in ss .msec)
                            	**type**\:  str
                            
                            .. attribute:: state
                            
                            	SPF state
                            	**type**\:   :py:class:`RcmdSpfState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdSpfState>`
                            
                            .. attribute:: threshold_exceeded
                            
                            	Threshold exceeded
                            	**type**\:  bool
                            
                            .. attribute:: total_dijkstra_runs
                            
                            	Total number of Dijkstra runs
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: total_inter_area_and_external_batches
                            
                            	Total number of inter\-area/external computation batches
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: total_type12lsa_changes
                            
                            	Total number of Type 1/2 LSA changes processed
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: total_type357lsa_changes
                            
                            	Total number of Type 3/5/7 LSA changes processed
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: trigger_time
                            
                            	Trigger time (in hh\:mm\:ss.msec)
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary, self).__init__()

                                self.yang_name = "spf-summary"
                                self.yang_parent_name = "spf-run-offline"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {"priority-summary" : ("priority_summary", Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary)}

                                self.duration = YLeaf(YType.str, "duration")

                                self.is_data_complete = YLeaf(YType.boolean, "is-data-complete")

                                self.start_time = YLeaf(YType.str, "start-time")

                                self.state = YLeaf(YType.enumeration, "state")

                                self.threshold_exceeded = YLeaf(YType.boolean, "threshold-exceeded")

                                self.total_dijkstra_runs = YLeaf(YType.uint16, "total-dijkstra-runs")

                                self.total_inter_area_and_external_batches = YLeaf(YType.uint16, "total-inter-area-and-external-batches")

                                self.total_type12lsa_changes = YLeaf(YType.uint16, "total-type12lsa-changes")

                                self.total_type357lsa_changes = YLeaf(YType.uint16, "total-type357lsa-changes")

                                self.trigger_time = YLeaf(YType.str, "trigger-time")

                                self.priority_summary = YList(self)
                                self._segment_path = lambda: "spf-summary"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary, ['duration', 'is_data_complete', 'start_time', 'state', 'threshold_exceeded', 'total_dijkstra_runs', 'total_inter_area_and_external_batches', 'total_type12lsa_changes', 'total_type357lsa_changes', 'trigger_time'], name, value)


                            class PrioritySummary(Entity):
                                """
                                Convergence information summary on per\-priority
                                basis
                                
                                .. attribute:: frr_statistic
                                
                                	Fast Re\-Route Statistics
                                	**type**\: list of    :py:class:`FrrStatistic <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary.FrrStatistic>`
                                
                                .. attribute:: ip_convergence_time
                                
                                	Convergence time for IP route programming
                                	**type**\:   :py:class:`IpConvergenceTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary.IpConvergenceTime>`
                                
                                .. attribute:: level
                                
                                	Critical, High, Medium or Low
                                	**type**\:   :py:class:`RcmdPriorityLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdPriorityLevel>`
                                
                                .. attribute:: mpls_convergence_time
                                
                                	Convergence time for MPLS label programming
                                	**type**\:   :py:class:`MplsConvergenceTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary.MplsConvergenceTime>`
                                
                                .. attribute:: route_statistics
                                
                                	Route statistics
                                	**type**\:   :py:class:`RouteStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary.RouteStatistics>`
                                
                                .. attribute:: threshold_exceeded
                                
                                	Threshold exceeded
                                	**type**\:  bool
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary, self).__init__()

                                    self.yang_name = "priority-summary"
                                    self.yang_parent_name = "spf-summary"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {"ip-convergence-time" : ("ip_convergence_time", Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary.IpConvergenceTime), "mpls-convergence-time" : ("mpls_convergence_time", Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary.MplsConvergenceTime), "route-statistics" : ("route_statistics", Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary.RouteStatistics)}
                                    self._child_list_classes = {"frr-statistic" : ("frr_statistic", Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary.FrrStatistic)}

                                    self.level = YLeaf(YType.enumeration, "level")

                                    self.threshold_exceeded = YLeaf(YType.boolean, "threshold-exceeded")

                                    self.ip_convergence_time = Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary.IpConvergenceTime()
                                    self.ip_convergence_time.parent = self
                                    self._children_name_map["ip_convergence_time"] = "ip-convergence-time"
                                    self._children_yang_names.add("ip-convergence-time")

                                    self.mpls_convergence_time = Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary.MplsConvergenceTime()
                                    self.mpls_convergence_time.parent = self
                                    self._children_name_map["mpls_convergence_time"] = "mpls-convergence-time"
                                    self._children_yang_names.add("mpls-convergence-time")

                                    self.route_statistics = Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary.RouteStatistics()
                                    self.route_statistics.parent = self
                                    self._children_name_map["route_statistics"] = "route-statistics"
                                    self._children_yang_names.add("route-statistics")

                                    self.frr_statistic = YList(self)
                                    self._segment_path = lambda: "priority-summary"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary, ['level', 'threshold_exceeded'], name, value)


                                class FrrStatistic(Entity):
                                    """
                                    Fast Re\-Route Statistics
                                    
                                    .. attribute:: coverage
                                    
                                    	Coverage in percentage
                                    	**type**\:  str
                                    
                                    	**units**\: percentage
                                    
                                    .. attribute:: fully_protected_routes
                                    
                                    	Fully Protected Routes
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: partially_protected_routes
                                    
                                    	Partially Protected Routes
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: total_routes
                                    
                                    	Total Number of Routes
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary.FrrStatistic, self).__init__()

                                        self.yang_name = "frr-statistic"
                                        self.yang_parent_name = "priority-summary"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.coverage = YLeaf(YType.str, "coverage")

                                        self.fully_protected_routes = YLeaf(YType.uint32, "fully-protected-routes")

                                        self.partially_protected_routes = YLeaf(YType.uint32, "partially-protected-routes")

                                        self.total_routes = YLeaf(YType.uint32, "total-routes")
                                        self._segment_path = lambda: "frr-statistic"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary.FrrStatistic, ['coverage', 'fully_protected_routes', 'partially_protected_routes', 'total_routes'], name, value)


                                class IpConvergenceTime(Entity):
                                    """
                                    Convergence time for IP route programming
                                    
                                    .. attribute:: fastest_node_name
                                    
                                    	Linecard node name which took the minimum time
                                    	**type**\:  str
                                    
                                    .. attribute:: maximum_time
                                    
                                    	Maximum time(in seconds.milliseconds)
                                    	**type**\:  str
                                    
                                    	**units**\: millisecond
                                    
                                    .. attribute:: minimum_time
                                    
                                    	Minimum time(in seconds.milliseconds)
                                    	**type**\:  str
                                    
                                    	**units**\: millisecond
                                    
                                    .. attribute:: slowest_node_name
                                    
                                    	Linecard node name which took the maximum time
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary.IpConvergenceTime, self).__init__()

                                        self.yang_name = "ip-convergence-time"
                                        self.yang_parent_name = "priority-summary"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.fastest_node_name = YLeaf(YType.str, "fastest-node-name")

                                        self.maximum_time = YLeaf(YType.str, "maximum-time")

                                        self.minimum_time = YLeaf(YType.str, "minimum-time")

                                        self.slowest_node_name = YLeaf(YType.str, "slowest-node-name")
                                        self._segment_path = lambda: "ip-convergence-time"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary.IpConvergenceTime, ['fastest_node_name', 'maximum_time', 'minimum_time', 'slowest_node_name'], name, value)


                                class MplsConvergenceTime(Entity):
                                    """
                                    Convergence time for MPLS label programming
                                    
                                    .. attribute:: fastest_node_name
                                    
                                    	Linecard node name which took the minimum time
                                    	**type**\:  str
                                    
                                    .. attribute:: maximum_time
                                    
                                    	Maximum time(in seconds.milliseconds)
                                    	**type**\:  str
                                    
                                    	**units**\: millisecond
                                    
                                    .. attribute:: minimum_time
                                    
                                    	Minimum time(in seconds.milliseconds)
                                    	**type**\:  str
                                    
                                    	**units**\: millisecond
                                    
                                    .. attribute:: slowest_node_name
                                    
                                    	Linecard node name which took the maximum time
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary.MplsConvergenceTime, self).__init__()

                                        self.yang_name = "mpls-convergence-time"
                                        self.yang_parent_name = "priority-summary"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.fastest_node_name = YLeaf(YType.str, "fastest-node-name")

                                        self.maximum_time = YLeaf(YType.str, "maximum-time")

                                        self.minimum_time = YLeaf(YType.str, "minimum-time")

                                        self.slowest_node_name = YLeaf(YType.str, "slowest-node-name")
                                        self._segment_path = lambda: "mpls-convergence-time"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary.MplsConvergenceTime, ['fastest_node_name', 'maximum_time', 'minimum_time', 'slowest_node_name'], name, value)


                                class RouteStatistics(Entity):
                                    """
                                    Route statistics
                                    
                                    .. attribute:: adds
                                    
                                    	Added
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: deletes
                                    
                                    	Deleted
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: modifies
                                    
                                    	Modified
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: reachables
                                    
                                    	Reachable
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: touches
                                    
                                    	Touched
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: unreachables
                                    
                                    	Unreachable
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary.RouteStatistics, self).__init__()

                                        self.yang_name = "route-statistics"
                                        self.yang_parent_name = "priority-summary"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.adds = YLeaf(YType.uint32, "adds")

                                        self.deletes = YLeaf(YType.uint32, "deletes")

                                        self.modifies = YLeaf(YType.uint32, "modifies")

                                        self.reachables = YLeaf(YType.uint32, "reachables")

                                        self.touches = YLeaf(YType.uint32, "touches")

                                        self.unreachables = YLeaf(YType.uint32, "unreachables")
                                        self._segment_path = lambda: "route-statistics"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary.RouteStatistics, ['adds', 'deletes', 'modifies', 'reachables', 'touches', 'unreachables'], name, value)


                class SpfRunSummaries(Entity):
                    """
                    OSPF SPF run summary data
                    
                    .. attribute:: spf_run_summary
                    
                    	SPF Event data
                    	**type**\: list of    :py:class:`SpfRunSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary>`
                    
                    

                    """

                    _prefix = 'infra-rcmd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Rcmd.Ospf.Instances.Instance.SpfRunSummaries, self).__init__()

                        self.yang_name = "spf-run-summaries"
                        self.yang_parent_name = "instance"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self._child_container_classes = {}
                        self._child_list_classes = {"spf-run-summary" : ("spf_run_summary", Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary)}

                        self.spf_run_summary = YList(self)
                        self._segment_path = lambda: "spf-run-summaries"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunSummaries, [], name, value)


                    class SpfRunSummary(Entity):
                        """
                        SPF Event data
                        
                        .. attribute:: spf_run_number  <key>
                        
                        	Specific SPF run
                        	**type**\:  int
                        
                        	**range:** 1..4294967295
                        
                        .. attribute:: dijkstra_run
                        
                        	List of Dijkstra runs
                        	**type**\: list of    :py:class:`DijkstraRun <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun>`
                        
                        .. attribute:: inter_area_and_external
                        
                        	Inter\-area & external calculation information
                        	**type**\: list of    :py:class:`InterAreaAndExternal <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal>`
                        
                        .. attribute:: spf_summary
                        
                        	SPF summary information
                        	**type**\:   :py:class:`SpfSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary>`
                        
                        

                        """

                        _prefix = 'infra-rcmd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary, self).__init__()

                            self.yang_name = "spf-run-summary"
                            self.yang_parent_name = "spf-run-summaries"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self._child_container_classes = {"spf-summary" : ("spf_summary", Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary)}
                            self._child_list_classes = {"dijkstra-run" : ("dijkstra_run", Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun), "inter-area-and-external" : ("inter_area_and_external", Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal)}

                            self.spf_run_number = YLeaf(YType.uint32, "spf-run-number")

                            self.spf_summary = Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary()
                            self.spf_summary.parent = self
                            self._children_name_map["spf_summary"] = "spf-summary"
                            self._children_yang_names.add("spf-summary")

                            self.dijkstra_run = YList(self)
                            self.inter_area_and_external = YList(self)
                            self._segment_path = lambda: "spf-run-summary" + "[spf-run-number='" + self.spf_run_number.get() + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary, ['spf_run_number'], name, value)


                        class DijkstraRun(Entity):
                            """
                            List of Dijkstra runs
                            
                            .. attribute:: area_id
                            
                            	Area ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: dijkstra_run_number
                            
                            	Area Dijkstra run number
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: duration
                            
                            	Duration of Dijktra calculation (in ss.msec)
                            	**type**\:  str
                            
                            .. attribute:: lsa_processed
                            
                            	List of type 1/2 LSA changes processed
                            	**type**\: list of    :py:class:`LsaProcessed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.LsaProcessed>`
                            
                            .. attribute:: priority
                            
                            	Convergence information on per\-priority basis
                            	**type**\: list of    :py:class:`Priority <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority>`
                            
                            .. attribute:: start_time
                            
                            	Start time (offset from event trigger time in ss .msec)
                            	**type**\:  str
                            
                            .. attribute:: threshold_exceeded
                            
                            	Threshold exceeded
                            	**type**\:  bool
                            
                            .. attribute:: trigger_lsa
                            
                            	LSA that triggered the Dijkstra run
                            	**type**\: list of    :py:class:`TriggerLsa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.TriggerLsa>`
                            
                            .. attribute:: trigger_time
                            
                            	Trigger time (in hh\:mm\:ss.msec)
                            	**type**\:  str
                            
                            .. attribute:: wait_time
                            
                            	Wait time (offset from event trigger time in ss .msec)
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun, self).__init__()

                                self.yang_name = "dijkstra-run"
                                self.yang_parent_name = "spf-run-summary"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {"lsa-processed" : ("lsa_processed", Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.LsaProcessed), "priority" : ("priority", Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority), "trigger-lsa" : ("trigger_lsa", Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.TriggerLsa)}

                                self.area_id = YLeaf(YType.str, "area-id")

                                self.dijkstra_run_number = YLeaf(YType.uint32, "dijkstra-run-number")

                                self.duration = YLeaf(YType.str, "duration")

                                self.start_time = YLeaf(YType.str, "start-time")

                                self.threshold_exceeded = YLeaf(YType.boolean, "threshold-exceeded")

                                self.trigger_time = YLeaf(YType.str, "trigger-time")

                                self.wait_time = YLeaf(YType.uint32, "wait-time")

                                self.lsa_processed = YList(self)
                                self.priority = YList(self)
                                self.trigger_lsa = YList(self)
                                self._segment_path = lambda: "dijkstra-run"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun, ['area_id', 'dijkstra_run_number', 'duration', 'start_time', 'threshold_exceeded', 'trigger_time', 'wait_time'], name, value)


                            class LsaProcessed(Entity):
                                """
                                List of type 1/2 LSA changes processed
                                
                                .. attribute:: change_type
                                
                                	Add, Delete, Modify
                                	**type**\:   :py:class:`RcmdLsChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsChange>`
                                
                                .. attribute:: lsa_id
                                
                                	LSA ID
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: lsa_type
                                
                                	LSA type
                                	**type**\:   :py:class:`RcmdLsa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsa>`
                                
                                .. attribute:: origin_router_id
                                
                                	Originating Router ID
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: reception_time
                                
                                	Reception Time on router (in hh\:mm\:ss.msec)
                                	**type**\:  str
                                
                                .. attribute:: sequence_number
                                
                                	Sequence Number
                                	**type**\:  str
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.LsaProcessed, self).__init__()

                                    self.yang_name = "lsa-processed"
                                    self.yang_parent_name = "dijkstra-run"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {}
                                    self._child_list_classes = {}

                                    self.change_type = YLeaf(YType.enumeration, "change-type")

                                    self.lsa_id = YLeaf(YType.str, "lsa-id")

                                    self.lsa_type = YLeaf(YType.enumeration, "lsa-type")

                                    self.origin_router_id = YLeaf(YType.str, "origin-router-id")

                                    self.reception_time = YLeaf(YType.str, "reception-time")

                                    self.sequence_number = YLeaf(YType.str, "sequence-number")
                                    self._segment_path = lambda: "lsa-processed"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.LsaProcessed, ['change_type', 'lsa_id', 'lsa_type', 'origin_router_id', 'reception_time', 'sequence_number'], name, value)


                            class Priority(Entity):
                                """
                                Convergence information on per\-priority basis
                                
                                .. attribute:: convergence_timeline
                                
                                	Convergence timeline details
                                	**type**\: list of    :py:class:`ConvergenceTimeline <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline>`
                                
                                .. attribute:: leaf_networks_added
                                
                                	List of Leaf Networks Added
                                	**type**\: list of    :py:class:`LeafNetworksAdded <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.LeafNetworksAdded>`
                                
                                .. attribute:: leaf_networks_deleted
                                
                                	List of Leaf Networks Deleted
                                	**type**\: list of    :py:class:`LeafNetworksDeleted <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.LeafNetworksDeleted>`
                                
                                .. attribute:: priority_summary
                                
                                	Summary of the priority
                                	**type**\:   :py:class:`PrioritySummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.PrioritySummary>`
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority, self).__init__()

                                    self.yang_name = "priority"
                                    self.yang_parent_name = "dijkstra-run"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {"priority-summary" : ("priority_summary", Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.PrioritySummary)}
                                    self._child_list_classes = {"convergence-timeline" : ("convergence_timeline", Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline), "leaf-networks-added" : ("leaf_networks_added", Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.LeafNetworksAdded), "leaf-networks-deleted" : ("leaf_networks_deleted", Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.LeafNetworksDeleted)}

                                    self.priority_summary = Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.PrioritySummary()
                                    self.priority_summary.parent = self
                                    self._children_name_map["priority_summary"] = "priority-summary"
                                    self._children_yang_names.add("priority-summary")

                                    self.convergence_timeline = YList(self)
                                    self.leaf_networks_added = YList(self)
                                    self.leaf_networks_deleted = YList(self)
                                    self._segment_path = lambda: "priority"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority, [], name, value)


                                class ConvergenceTimeline(Entity):
                                    """
                                    Convergence timeline details
                                    
                                    .. attribute:: lc_ip
                                    
                                    	List of Linecards' completion point for IP routes
                                    	**type**\: list of    :py:class:`LcIp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.LcIp>`
                                    
                                    .. attribute:: lc_mpls
                                    
                                    	List of Linecards' completion point for MPLS labels
                                    	**type**\: list of    :py:class:`LcMpls <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.LcMpls>`
                                    
                                    .. attribute:: ldp_enter
                                    
                                    	Entry point of LDP
                                    	**type**\:   :py:class:`LdpEnter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.LdpEnter>`
                                    
                                    .. attribute:: ldp_exit
                                    
                                    	Exit point of LDP to LSD
                                    	**type**\:   :py:class:`LdpExit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.LdpExit>`
                                    
                                    .. attribute:: lsd_enter
                                    
                                    	Entry point of LSD
                                    	**type**\:   :py:class:`LsdEnter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.LsdEnter>`
                                    
                                    .. attribute:: lsd_exit
                                    
                                    	Exit point of LSD to FIBs
                                    	**type**\:   :py:class:`LsdExit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.LsdExit>`
                                    
                                    .. attribute:: ri_bv4_enter
                                    
                                    	Entry point of IPv4 RIB
                                    	**type**\:   :py:class:`RiBv4Enter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.RiBv4Enter>`
                                    
                                    .. attribute:: ri_bv4_exit
                                    
                                    	Exit point from IPv4 RIB to FIBs
                                    	**type**\:   :py:class:`RiBv4Exit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.RiBv4Exit>`
                                    
                                    .. attribute:: ri_bv4_redistribute
                                    
                                    	Route Redistribute point from IPv4 RIB to LDP
                                    	**type**\:   :py:class:`RiBv4Redistribute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.RiBv4Redistribute>`
                                    
                                    .. attribute:: route_origin
                                    
                                    	Route origin (routing protocol)
                                    	**type**\:   :py:class:`RouteOrigin <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.RouteOrigin>`
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline, self).__init__()

                                        self.yang_name = "convergence-timeline"
                                        self.yang_parent_name = "priority"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {"ldp-enter" : ("ldp_enter", Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.LdpEnter), "ldp-exit" : ("ldp_exit", Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.LdpExit), "lsd-enter" : ("lsd_enter", Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.LsdEnter), "lsd-exit" : ("lsd_exit", Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.LsdExit), "ri-bv4-enter" : ("ri_bv4_enter", Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.RiBv4Enter), "ri-bv4-exit" : ("ri_bv4_exit", Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.RiBv4Exit), "ri-bv4-redistribute" : ("ri_bv4_redistribute", Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.RiBv4Redistribute), "route-origin" : ("route_origin", Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.RouteOrigin)}
                                        self._child_list_classes = {"lc-ip" : ("lc_ip", Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.LcIp), "lc-mpls" : ("lc_mpls", Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.LcMpls)}

                                        self.ldp_enter = Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.LdpEnter()
                                        self.ldp_enter.parent = self
                                        self._children_name_map["ldp_enter"] = "ldp-enter"
                                        self._children_yang_names.add("ldp-enter")

                                        self.ldp_exit = Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.LdpExit()
                                        self.ldp_exit.parent = self
                                        self._children_name_map["ldp_exit"] = "ldp-exit"
                                        self._children_yang_names.add("ldp-exit")

                                        self.lsd_enter = Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.LsdEnter()
                                        self.lsd_enter.parent = self
                                        self._children_name_map["lsd_enter"] = "lsd-enter"
                                        self._children_yang_names.add("lsd-enter")

                                        self.lsd_exit = Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.LsdExit()
                                        self.lsd_exit.parent = self
                                        self._children_name_map["lsd_exit"] = "lsd-exit"
                                        self._children_yang_names.add("lsd-exit")

                                        self.ri_bv4_enter = Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.RiBv4Enter()
                                        self.ri_bv4_enter.parent = self
                                        self._children_name_map["ri_bv4_enter"] = "ri-bv4-enter"
                                        self._children_yang_names.add("ri-bv4-enter")

                                        self.ri_bv4_exit = Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.RiBv4Exit()
                                        self.ri_bv4_exit.parent = self
                                        self._children_name_map["ri_bv4_exit"] = "ri-bv4-exit"
                                        self._children_yang_names.add("ri-bv4-exit")

                                        self.ri_bv4_redistribute = Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.RiBv4Redistribute()
                                        self.ri_bv4_redistribute.parent = self
                                        self._children_name_map["ri_bv4_redistribute"] = "ri-bv4-redistribute"
                                        self._children_yang_names.add("ri-bv4-redistribute")

                                        self.route_origin = Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.RouteOrigin()
                                        self.route_origin.parent = self
                                        self._children_name_map["route_origin"] = "route-origin"
                                        self._children_yang_names.add("route-origin")

                                        self.lc_ip = YList(self)
                                        self.lc_mpls = YList(self)
                                        self._segment_path = lambda: "convergence-timeline"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline, [], name, value)


                                    class LcIp(Entity):
                                        """
                                        List of Linecards' completion point for IP
                                        routes
                                        
                                        .. attribute:: fib_complete
                                        
                                        	Completion point of FIB
                                        	**type**\:   :py:class:`FibComplete <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.LcIp.FibComplete>`
                                        
                                        .. attribute:: node_name
                                        
                                        	Linecard node name
                                        	**type**\:  str
                                        
                                        .. attribute:: speed
                                        
                                        	Relative convergence speed
                                        	**type**\:   :py:class:`RcmdLinecardSpeed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLinecardSpeed>`
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.LcIp, self).__init__()

                                            self.yang_name = "lc-ip"
                                            self.yang_parent_name = "convergence-timeline"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {"fib-complete" : ("fib_complete", Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.LcIp.FibComplete)}
                                            self._child_list_classes = {}

                                            self.node_name = YLeaf(YType.str, "node-name")

                                            self.speed = YLeaf(YType.enumeration, "speed")

                                            self.fib_complete = Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.LcIp.FibComplete()
                                            self.fib_complete.parent = self
                                            self._children_name_map["fib_complete"] = "fib-complete"
                                            self._children_yang_names.add("fib-complete")
                                            self._segment_path = lambda: "lc-ip"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.LcIp, ['node_name', 'speed'], name, value)


                                        class FibComplete(Entity):
                                            """
                                            Completion point of FIB
                                            
                                            .. attribute:: duration
                                            
                                            	Duration of processing (in ss.msec)
                                            	**type**\:  str
                                            
                                            .. attribute:: end_time
                                            
                                            	Last route process time relative to event trigger time (in ss.msec)
                                            	**type**\:  str
                                            
                                            .. attribute:: start_time
                                            
                                            	First route process time relative to event trigger time (in ss.msec)
                                            	**type**\:  str
                                            
                                            

                                            """

                                            _prefix = 'infra-rcmd-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                super(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.LcIp.FibComplete, self).__init__()

                                                self.yang_name = "fib-complete"
                                                self.yang_parent_name = "lc-ip"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.duration = YLeaf(YType.str, "duration")

                                                self.end_time = YLeaf(YType.str, "end-time")

                                                self.start_time = YLeaf(YType.str, "start-time")
                                                self._segment_path = lambda: "fib-complete"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.LcIp.FibComplete, ['duration', 'end_time', 'start_time'], name, value)


                                    class LcMpls(Entity):
                                        """
                                        List of Linecards' completion point for MPLS
                                        labels
                                        
                                        .. attribute:: fib_complete
                                        
                                        	Completion point of FIB
                                        	**type**\:   :py:class:`FibComplete <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.LcMpls.FibComplete>`
                                        
                                        .. attribute:: node_name
                                        
                                        	Linecard node name
                                        	**type**\:  str
                                        
                                        .. attribute:: speed
                                        
                                        	Relative convergence speed
                                        	**type**\:   :py:class:`RcmdLinecardSpeed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLinecardSpeed>`
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.LcMpls, self).__init__()

                                            self.yang_name = "lc-mpls"
                                            self.yang_parent_name = "convergence-timeline"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {"fib-complete" : ("fib_complete", Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.LcMpls.FibComplete)}
                                            self._child_list_classes = {}

                                            self.node_name = YLeaf(YType.str, "node-name")

                                            self.speed = YLeaf(YType.enumeration, "speed")

                                            self.fib_complete = Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.LcMpls.FibComplete()
                                            self.fib_complete.parent = self
                                            self._children_name_map["fib_complete"] = "fib-complete"
                                            self._children_yang_names.add("fib-complete")
                                            self._segment_path = lambda: "lc-mpls"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.LcMpls, ['node_name', 'speed'], name, value)


                                        class FibComplete(Entity):
                                            """
                                            Completion point of FIB
                                            
                                            .. attribute:: duration
                                            
                                            	Duration of processing (in ss.msec)
                                            	**type**\:  str
                                            
                                            .. attribute:: end_time
                                            
                                            	Last route process time relative to event trigger time (in ss.msec)
                                            	**type**\:  str
                                            
                                            .. attribute:: start_time
                                            
                                            	First route process time relative to event trigger time (in ss.msec)
                                            	**type**\:  str
                                            
                                            

                                            """

                                            _prefix = 'infra-rcmd-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                super(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.LcMpls.FibComplete, self).__init__()

                                                self.yang_name = "fib-complete"
                                                self.yang_parent_name = "lc-mpls"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.duration = YLeaf(YType.str, "duration")

                                                self.end_time = YLeaf(YType.str, "end-time")

                                                self.start_time = YLeaf(YType.str, "start-time")
                                                self._segment_path = lambda: "fib-complete"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.LcMpls.FibComplete, ['duration', 'end_time', 'start_time'], name, value)


                                    class LdpEnter(Entity):
                                        """
                                        Entry point of LDP
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.LdpEnter, self).__init__()

                                            self.yang_name = "ldp-enter"
                                            self.yang_parent_name = "convergence-timeline"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.duration = YLeaf(YType.str, "duration")

                                            self.end_time = YLeaf(YType.str, "end-time")

                                            self.start_time = YLeaf(YType.str, "start-time")
                                            self._segment_path = lambda: "ldp-enter"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.LdpEnter, ['duration', 'end_time', 'start_time'], name, value)


                                    class LdpExit(Entity):
                                        """
                                        Exit point of LDP to LSD
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.LdpExit, self).__init__()

                                            self.yang_name = "ldp-exit"
                                            self.yang_parent_name = "convergence-timeline"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.duration = YLeaf(YType.str, "duration")

                                            self.end_time = YLeaf(YType.str, "end-time")

                                            self.start_time = YLeaf(YType.str, "start-time")
                                            self._segment_path = lambda: "ldp-exit"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.LdpExit, ['duration', 'end_time', 'start_time'], name, value)


                                    class LsdEnter(Entity):
                                        """
                                        Entry point of LSD
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.LsdEnter, self).__init__()

                                            self.yang_name = "lsd-enter"
                                            self.yang_parent_name = "convergence-timeline"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.duration = YLeaf(YType.str, "duration")

                                            self.end_time = YLeaf(YType.str, "end-time")

                                            self.start_time = YLeaf(YType.str, "start-time")
                                            self._segment_path = lambda: "lsd-enter"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.LsdEnter, ['duration', 'end_time', 'start_time'], name, value)


                                    class LsdExit(Entity):
                                        """
                                        Exit point of LSD to FIBs
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.LsdExit, self).__init__()

                                            self.yang_name = "lsd-exit"
                                            self.yang_parent_name = "convergence-timeline"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.duration = YLeaf(YType.str, "duration")

                                            self.end_time = YLeaf(YType.str, "end-time")

                                            self.start_time = YLeaf(YType.str, "start-time")
                                            self._segment_path = lambda: "lsd-exit"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.LsdExit, ['duration', 'end_time', 'start_time'], name, value)


                                    class RiBv4Enter(Entity):
                                        """
                                        Entry point of IPv4 RIB
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.RiBv4Enter, self).__init__()

                                            self.yang_name = "ri-bv4-enter"
                                            self.yang_parent_name = "convergence-timeline"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.duration = YLeaf(YType.str, "duration")

                                            self.end_time = YLeaf(YType.str, "end-time")

                                            self.start_time = YLeaf(YType.str, "start-time")
                                            self._segment_path = lambda: "ri-bv4-enter"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.RiBv4Enter, ['duration', 'end_time', 'start_time'], name, value)


                                    class RiBv4Exit(Entity):
                                        """
                                        Exit point from IPv4 RIB to FIBs
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.RiBv4Exit, self).__init__()

                                            self.yang_name = "ri-bv4-exit"
                                            self.yang_parent_name = "convergence-timeline"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.duration = YLeaf(YType.str, "duration")

                                            self.end_time = YLeaf(YType.str, "end-time")

                                            self.start_time = YLeaf(YType.str, "start-time")
                                            self._segment_path = lambda: "ri-bv4-exit"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.RiBv4Exit, ['duration', 'end_time', 'start_time'], name, value)


                                    class RiBv4Redistribute(Entity):
                                        """
                                        Route Redistribute point from IPv4 RIB to LDP
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.RiBv4Redistribute, self).__init__()

                                            self.yang_name = "ri-bv4-redistribute"
                                            self.yang_parent_name = "convergence-timeline"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.duration = YLeaf(YType.str, "duration")

                                            self.end_time = YLeaf(YType.str, "end-time")

                                            self.start_time = YLeaf(YType.str, "start-time")
                                            self._segment_path = lambda: "ri-bv4-redistribute"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.RiBv4Redistribute, ['duration', 'end_time', 'start_time'], name, value)


                                    class RouteOrigin(Entity):
                                        """
                                        Route origin (routing protocol)
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.RouteOrigin, self).__init__()

                                            self.yang_name = "route-origin"
                                            self.yang_parent_name = "convergence-timeline"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.duration = YLeaf(YType.str, "duration")

                                            self.end_time = YLeaf(YType.str, "end-time")

                                            self.start_time = YLeaf(YType.str, "start-time")
                                            self._segment_path = lambda: "route-origin"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.RouteOrigin, ['duration', 'end_time', 'start_time'], name, value)


                                class LeafNetworksAdded(Entity):
                                    """
                                    List of Leaf Networks Added
                                    
                                    .. attribute:: address
                                    
                                    	IP address
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: net_mask
                                    
                                    	Mask
                                    	**type**\:  int
                                    
                                    	**range:** 0..255
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.LeafNetworksAdded, self).__init__()

                                        self.yang_name = "leaf-networks-added"
                                        self.yang_parent_name = "priority"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.address = YLeaf(YType.str, "address")

                                        self.net_mask = YLeaf(YType.uint8, "net-mask")
                                        self._segment_path = lambda: "leaf-networks-added"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.LeafNetworksAdded, ['address', 'net_mask'], name, value)


                                class LeafNetworksDeleted(Entity):
                                    """
                                    List of Leaf Networks Deleted
                                    
                                    .. attribute:: address
                                    
                                    	IP address
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: net_mask
                                    
                                    	Mask
                                    	**type**\:  int
                                    
                                    	**range:** 0..255
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.LeafNetworksDeleted, self).__init__()

                                        self.yang_name = "leaf-networks-deleted"
                                        self.yang_parent_name = "priority"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.address = YLeaf(YType.str, "address")

                                        self.net_mask = YLeaf(YType.uint8, "net-mask")
                                        self._segment_path = lambda: "leaf-networks-deleted"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.LeafNetworksDeleted, ['address', 'net_mask'], name, value)


                                class PrioritySummary(Entity):
                                    """
                                    Summary of the priority
                                    
                                    .. attribute:: frr_statistic
                                    
                                    	Fast Re\-Route Statistics
                                    	**type**\: list of    :py:class:`FrrStatistic <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.PrioritySummary.FrrStatistic>`
                                    
                                    .. attribute:: ip_convergence_time
                                    
                                    	Convergence time for IP route programming
                                    	**type**\:   :py:class:`IpConvergenceTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.PrioritySummary.IpConvergenceTime>`
                                    
                                    .. attribute:: level
                                    
                                    	Critical, High, Medium or Low
                                    	**type**\:   :py:class:`RcmdPriorityLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdPriorityLevel>`
                                    
                                    .. attribute:: mpls_convergence_time
                                    
                                    	Convergence time for MPLS label programming
                                    	**type**\:   :py:class:`MplsConvergenceTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.PrioritySummary.MplsConvergenceTime>`
                                    
                                    .. attribute:: route_statistics
                                    
                                    	Route statistics
                                    	**type**\:   :py:class:`RouteStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.PrioritySummary.RouteStatistics>`
                                    
                                    .. attribute:: threshold_exceeded
                                    
                                    	Threshold exceeded
                                    	**type**\:  bool
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.PrioritySummary, self).__init__()

                                        self.yang_name = "priority-summary"
                                        self.yang_parent_name = "priority"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {"ip-convergence-time" : ("ip_convergence_time", Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.PrioritySummary.IpConvergenceTime), "mpls-convergence-time" : ("mpls_convergence_time", Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.PrioritySummary.MplsConvergenceTime), "route-statistics" : ("route_statistics", Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.PrioritySummary.RouteStatistics)}
                                        self._child_list_classes = {"frr-statistic" : ("frr_statistic", Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.PrioritySummary.FrrStatistic)}

                                        self.level = YLeaf(YType.enumeration, "level")

                                        self.threshold_exceeded = YLeaf(YType.boolean, "threshold-exceeded")

                                        self.ip_convergence_time = Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.PrioritySummary.IpConvergenceTime()
                                        self.ip_convergence_time.parent = self
                                        self._children_name_map["ip_convergence_time"] = "ip-convergence-time"
                                        self._children_yang_names.add("ip-convergence-time")

                                        self.mpls_convergence_time = Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.PrioritySummary.MplsConvergenceTime()
                                        self.mpls_convergence_time.parent = self
                                        self._children_name_map["mpls_convergence_time"] = "mpls-convergence-time"
                                        self._children_yang_names.add("mpls-convergence-time")

                                        self.route_statistics = Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.PrioritySummary.RouteStatistics()
                                        self.route_statistics.parent = self
                                        self._children_name_map["route_statistics"] = "route-statistics"
                                        self._children_yang_names.add("route-statistics")

                                        self.frr_statistic = YList(self)
                                        self._segment_path = lambda: "priority-summary"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.PrioritySummary, ['level', 'threshold_exceeded'], name, value)


                                    class FrrStatistic(Entity):
                                        """
                                        Fast Re\-Route Statistics
                                        
                                        .. attribute:: coverage
                                        
                                        	Coverage in percentage
                                        	**type**\:  str
                                        
                                        	**units**\: percentage
                                        
                                        .. attribute:: fully_protected_routes
                                        
                                        	Fully Protected Routes
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: partially_protected_routes
                                        
                                        	Partially Protected Routes
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: total_routes
                                        
                                        	Total Number of Routes
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.PrioritySummary.FrrStatistic, self).__init__()

                                            self.yang_name = "frr-statistic"
                                            self.yang_parent_name = "priority-summary"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.coverage = YLeaf(YType.str, "coverage")

                                            self.fully_protected_routes = YLeaf(YType.uint32, "fully-protected-routes")

                                            self.partially_protected_routes = YLeaf(YType.uint32, "partially-protected-routes")

                                            self.total_routes = YLeaf(YType.uint32, "total-routes")
                                            self._segment_path = lambda: "frr-statistic"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.PrioritySummary.FrrStatistic, ['coverage', 'fully_protected_routes', 'partially_protected_routes', 'total_routes'], name, value)


                                    class IpConvergenceTime(Entity):
                                        """
                                        Convergence time for IP route programming
                                        
                                        .. attribute:: fastest_node_name
                                        
                                        	Linecard node name which took the minimum time
                                        	**type**\:  str
                                        
                                        .. attribute:: maximum_time
                                        
                                        	Maximum time(in seconds.milliseconds)
                                        	**type**\:  str
                                        
                                        	**units**\: millisecond
                                        
                                        .. attribute:: minimum_time
                                        
                                        	Minimum time(in seconds.milliseconds)
                                        	**type**\:  str
                                        
                                        	**units**\: millisecond
                                        
                                        .. attribute:: slowest_node_name
                                        
                                        	Linecard node name which took the maximum time
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.PrioritySummary.IpConvergenceTime, self).__init__()

                                            self.yang_name = "ip-convergence-time"
                                            self.yang_parent_name = "priority-summary"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.fastest_node_name = YLeaf(YType.str, "fastest-node-name")

                                            self.maximum_time = YLeaf(YType.str, "maximum-time")

                                            self.minimum_time = YLeaf(YType.str, "minimum-time")

                                            self.slowest_node_name = YLeaf(YType.str, "slowest-node-name")
                                            self._segment_path = lambda: "ip-convergence-time"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.PrioritySummary.IpConvergenceTime, ['fastest_node_name', 'maximum_time', 'minimum_time', 'slowest_node_name'], name, value)


                                    class MplsConvergenceTime(Entity):
                                        """
                                        Convergence time for MPLS label programming
                                        
                                        .. attribute:: fastest_node_name
                                        
                                        	Linecard node name which took the minimum time
                                        	**type**\:  str
                                        
                                        .. attribute:: maximum_time
                                        
                                        	Maximum time(in seconds.milliseconds)
                                        	**type**\:  str
                                        
                                        	**units**\: millisecond
                                        
                                        .. attribute:: minimum_time
                                        
                                        	Minimum time(in seconds.milliseconds)
                                        	**type**\:  str
                                        
                                        	**units**\: millisecond
                                        
                                        .. attribute:: slowest_node_name
                                        
                                        	Linecard node name which took the maximum time
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.PrioritySummary.MplsConvergenceTime, self).__init__()

                                            self.yang_name = "mpls-convergence-time"
                                            self.yang_parent_name = "priority-summary"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.fastest_node_name = YLeaf(YType.str, "fastest-node-name")

                                            self.maximum_time = YLeaf(YType.str, "maximum-time")

                                            self.minimum_time = YLeaf(YType.str, "minimum-time")

                                            self.slowest_node_name = YLeaf(YType.str, "slowest-node-name")
                                            self._segment_path = lambda: "mpls-convergence-time"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.PrioritySummary.MplsConvergenceTime, ['fastest_node_name', 'maximum_time', 'minimum_time', 'slowest_node_name'], name, value)


                                    class RouteStatistics(Entity):
                                        """
                                        Route statistics
                                        
                                        .. attribute:: adds
                                        
                                        	Added
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: deletes
                                        
                                        	Deleted
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: modifies
                                        
                                        	Modified
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: reachables
                                        
                                        	Reachable
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: touches
                                        
                                        	Touched
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: unreachables
                                        
                                        	Unreachable
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.PrioritySummary.RouteStatistics, self).__init__()

                                            self.yang_name = "route-statistics"
                                            self.yang_parent_name = "priority-summary"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.adds = YLeaf(YType.uint32, "adds")

                                            self.deletes = YLeaf(YType.uint32, "deletes")

                                            self.modifies = YLeaf(YType.uint32, "modifies")

                                            self.reachables = YLeaf(YType.uint32, "reachables")

                                            self.touches = YLeaf(YType.uint32, "touches")

                                            self.unreachables = YLeaf(YType.uint32, "unreachables")
                                            self._segment_path = lambda: "route-statistics"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.PrioritySummary.RouteStatistics, ['adds', 'deletes', 'modifies', 'reachables', 'touches', 'unreachables'], name, value)


                            class TriggerLsa(Entity):
                                """
                                LSA that triggered the Dijkstra run
                                
                                .. attribute:: change_type
                                
                                	Add, Delete, Modify
                                	**type**\:   :py:class:`RcmdLsChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsChange>`
                                
                                .. attribute:: lsa_id
                                
                                	LSA ID
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: lsa_type
                                
                                	LSA type
                                	**type**\:   :py:class:`RcmdLsa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsa>`
                                
                                .. attribute:: origin_router_id
                                
                                	Originating Router ID
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: reception_time
                                
                                	Reception Time on router (in hh\:mm\:ss.msec)
                                	**type**\:  str
                                
                                .. attribute:: sequence_number
                                
                                	Sequence Number
                                	**type**\:  str
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.TriggerLsa, self).__init__()

                                    self.yang_name = "trigger-lsa"
                                    self.yang_parent_name = "dijkstra-run"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {}
                                    self._child_list_classes = {}

                                    self.change_type = YLeaf(YType.enumeration, "change-type")

                                    self.lsa_id = YLeaf(YType.str, "lsa-id")

                                    self.lsa_type = YLeaf(YType.enumeration, "lsa-type")

                                    self.origin_router_id = YLeaf(YType.str, "origin-router-id")

                                    self.reception_time = YLeaf(YType.str, "reception-time")

                                    self.sequence_number = YLeaf(YType.str, "sequence-number")
                                    self._segment_path = lambda: "trigger-lsa"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.TriggerLsa, ['change_type', 'lsa_id', 'lsa_type', 'origin_router_id', 'reception_time', 'sequence_number'], name, value)


                        class InterAreaAndExternal(Entity):
                            """
                            Inter\-area & external calculation information
                            
                            .. attribute:: priority
                            
                            	Convergence information on a per\-priority basis
                            	**type**\: list of    :py:class:`Priority <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority>`
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal, self).__init__()

                                self.yang_name = "inter-area-and-external"
                                self.yang_parent_name = "spf-run-summary"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {"priority" : ("priority", Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority)}

                                self.priority = YList(self)
                                self._segment_path = lambda: "inter-area-and-external"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal, [], name, value)


                            class Priority(Entity):
                                """
                                Convergence information on a per\-priority basis
                                
                                .. attribute:: convergence_timeline
                                
                                	Convergence timeline details
                                	**type**\: list of    :py:class:`ConvergenceTimeline <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline>`
                                
                                .. attribute:: leaf_networks_added
                                
                                	List of Leaf Networks Added
                                	**type**\: list of    :py:class:`LeafNetworksAdded <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.LeafNetworksAdded>`
                                
                                .. attribute:: leaf_networks_deleted
                                
                                	List of Leaf Networks Deleted
                                	**type**\: list of    :py:class:`LeafNetworksDeleted <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.LeafNetworksDeleted>`
                                
                                .. attribute:: priority_summary
                                
                                	Summary of the priority
                                	**type**\:   :py:class:`PrioritySummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.PrioritySummary>`
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority, self).__init__()

                                    self.yang_name = "priority"
                                    self.yang_parent_name = "inter-area-and-external"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {"priority-summary" : ("priority_summary", Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.PrioritySummary)}
                                    self._child_list_classes = {"convergence-timeline" : ("convergence_timeline", Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline), "leaf-networks-added" : ("leaf_networks_added", Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.LeafNetworksAdded), "leaf-networks-deleted" : ("leaf_networks_deleted", Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.LeafNetworksDeleted)}

                                    self.priority_summary = Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.PrioritySummary()
                                    self.priority_summary.parent = self
                                    self._children_name_map["priority_summary"] = "priority-summary"
                                    self._children_yang_names.add("priority-summary")

                                    self.convergence_timeline = YList(self)
                                    self.leaf_networks_added = YList(self)
                                    self.leaf_networks_deleted = YList(self)
                                    self._segment_path = lambda: "priority"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority, [], name, value)


                                class ConvergenceTimeline(Entity):
                                    """
                                    Convergence timeline details
                                    
                                    .. attribute:: lc_ip
                                    
                                    	List of Linecards' completion point for IP routes
                                    	**type**\: list of    :py:class:`LcIp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.LcIp>`
                                    
                                    .. attribute:: lc_mpls
                                    
                                    	List of Linecards' completion point for MPLS labels
                                    	**type**\: list of    :py:class:`LcMpls <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.LcMpls>`
                                    
                                    .. attribute:: ldp_enter
                                    
                                    	Entry point of LDP
                                    	**type**\:   :py:class:`LdpEnter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.LdpEnter>`
                                    
                                    .. attribute:: ldp_exit
                                    
                                    	Exit point of LDP to LSD
                                    	**type**\:   :py:class:`LdpExit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.LdpExit>`
                                    
                                    .. attribute:: lsd_enter
                                    
                                    	Entry point of LSD
                                    	**type**\:   :py:class:`LsdEnter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.LsdEnter>`
                                    
                                    .. attribute:: lsd_exit
                                    
                                    	Exit point of LSD to FIBs
                                    	**type**\:   :py:class:`LsdExit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.LsdExit>`
                                    
                                    .. attribute:: ri_bv4_enter
                                    
                                    	Entry point of IPv4 RIB
                                    	**type**\:   :py:class:`RiBv4Enter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.RiBv4Enter>`
                                    
                                    .. attribute:: ri_bv4_exit
                                    
                                    	Exit point from IPv4 RIB to FIBs
                                    	**type**\:   :py:class:`RiBv4Exit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.RiBv4Exit>`
                                    
                                    .. attribute:: ri_bv4_redistribute
                                    
                                    	Route Redistribute point from IPv4 RIB to LDP
                                    	**type**\:   :py:class:`RiBv4Redistribute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.RiBv4Redistribute>`
                                    
                                    .. attribute:: route_origin
                                    
                                    	Route origin (routing protocol)
                                    	**type**\:   :py:class:`RouteOrigin <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.RouteOrigin>`
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline, self).__init__()

                                        self.yang_name = "convergence-timeline"
                                        self.yang_parent_name = "priority"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {"ldp-enter" : ("ldp_enter", Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.LdpEnter), "ldp-exit" : ("ldp_exit", Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.LdpExit), "lsd-enter" : ("lsd_enter", Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.LsdEnter), "lsd-exit" : ("lsd_exit", Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.LsdExit), "ri-bv4-enter" : ("ri_bv4_enter", Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.RiBv4Enter), "ri-bv4-exit" : ("ri_bv4_exit", Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.RiBv4Exit), "ri-bv4-redistribute" : ("ri_bv4_redistribute", Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.RiBv4Redistribute), "route-origin" : ("route_origin", Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.RouteOrigin)}
                                        self._child_list_classes = {"lc-ip" : ("lc_ip", Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.LcIp), "lc-mpls" : ("lc_mpls", Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.LcMpls)}

                                        self.ldp_enter = Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.LdpEnter()
                                        self.ldp_enter.parent = self
                                        self._children_name_map["ldp_enter"] = "ldp-enter"
                                        self._children_yang_names.add("ldp-enter")

                                        self.ldp_exit = Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.LdpExit()
                                        self.ldp_exit.parent = self
                                        self._children_name_map["ldp_exit"] = "ldp-exit"
                                        self._children_yang_names.add("ldp-exit")

                                        self.lsd_enter = Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.LsdEnter()
                                        self.lsd_enter.parent = self
                                        self._children_name_map["lsd_enter"] = "lsd-enter"
                                        self._children_yang_names.add("lsd-enter")

                                        self.lsd_exit = Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.LsdExit()
                                        self.lsd_exit.parent = self
                                        self._children_name_map["lsd_exit"] = "lsd-exit"
                                        self._children_yang_names.add("lsd-exit")

                                        self.ri_bv4_enter = Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.RiBv4Enter()
                                        self.ri_bv4_enter.parent = self
                                        self._children_name_map["ri_bv4_enter"] = "ri-bv4-enter"
                                        self._children_yang_names.add("ri-bv4-enter")

                                        self.ri_bv4_exit = Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.RiBv4Exit()
                                        self.ri_bv4_exit.parent = self
                                        self._children_name_map["ri_bv4_exit"] = "ri-bv4-exit"
                                        self._children_yang_names.add("ri-bv4-exit")

                                        self.ri_bv4_redistribute = Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.RiBv4Redistribute()
                                        self.ri_bv4_redistribute.parent = self
                                        self._children_name_map["ri_bv4_redistribute"] = "ri-bv4-redistribute"
                                        self._children_yang_names.add("ri-bv4-redistribute")

                                        self.route_origin = Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.RouteOrigin()
                                        self.route_origin.parent = self
                                        self._children_name_map["route_origin"] = "route-origin"
                                        self._children_yang_names.add("route-origin")

                                        self.lc_ip = YList(self)
                                        self.lc_mpls = YList(self)
                                        self._segment_path = lambda: "convergence-timeline"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline, [], name, value)


                                    class LcIp(Entity):
                                        """
                                        List of Linecards' completion point for IP
                                        routes
                                        
                                        .. attribute:: fib_complete
                                        
                                        	Completion point of FIB
                                        	**type**\:   :py:class:`FibComplete <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.LcIp.FibComplete>`
                                        
                                        .. attribute:: node_name
                                        
                                        	Linecard node name
                                        	**type**\:  str
                                        
                                        .. attribute:: speed
                                        
                                        	Relative convergence speed
                                        	**type**\:   :py:class:`RcmdLinecardSpeed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLinecardSpeed>`
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.LcIp, self).__init__()

                                            self.yang_name = "lc-ip"
                                            self.yang_parent_name = "convergence-timeline"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {"fib-complete" : ("fib_complete", Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.LcIp.FibComplete)}
                                            self._child_list_classes = {}

                                            self.node_name = YLeaf(YType.str, "node-name")

                                            self.speed = YLeaf(YType.enumeration, "speed")

                                            self.fib_complete = Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.LcIp.FibComplete()
                                            self.fib_complete.parent = self
                                            self._children_name_map["fib_complete"] = "fib-complete"
                                            self._children_yang_names.add("fib-complete")
                                            self._segment_path = lambda: "lc-ip"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.LcIp, ['node_name', 'speed'], name, value)


                                        class FibComplete(Entity):
                                            """
                                            Completion point of FIB
                                            
                                            .. attribute:: duration
                                            
                                            	Duration of processing (in ss.msec)
                                            	**type**\:  str
                                            
                                            .. attribute:: end_time
                                            
                                            	Last route process time relative to event trigger time (in ss.msec)
                                            	**type**\:  str
                                            
                                            .. attribute:: start_time
                                            
                                            	First route process time relative to event trigger time (in ss.msec)
                                            	**type**\:  str
                                            
                                            

                                            """

                                            _prefix = 'infra-rcmd-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                super(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.LcIp.FibComplete, self).__init__()

                                                self.yang_name = "fib-complete"
                                                self.yang_parent_name = "lc-ip"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.duration = YLeaf(YType.str, "duration")

                                                self.end_time = YLeaf(YType.str, "end-time")

                                                self.start_time = YLeaf(YType.str, "start-time")
                                                self._segment_path = lambda: "fib-complete"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.LcIp.FibComplete, ['duration', 'end_time', 'start_time'], name, value)


                                    class LcMpls(Entity):
                                        """
                                        List of Linecards' completion point for MPLS
                                        labels
                                        
                                        .. attribute:: fib_complete
                                        
                                        	Completion point of FIB
                                        	**type**\:   :py:class:`FibComplete <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.LcMpls.FibComplete>`
                                        
                                        .. attribute:: node_name
                                        
                                        	Linecard node name
                                        	**type**\:  str
                                        
                                        .. attribute:: speed
                                        
                                        	Relative convergence speed
                                        	**type**\:   :py:class:`RcmdLinecardSpeed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLinecardSpeed>`
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.LcMpls, self).__init__()

                                            self.yang_name = "lc-mpls"
                                            self.yang_parent_name = "convergence-timeline"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {"fib-complete" : ("fib_complete", Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.LcMpls.FibComplete)}
                                            self._child_list_classes = {}

                                            self.node_name = YLeaf(YType.str, "node-name")

                                            self.speed = YLeaf(YType.enumeration, "speed")

                                            self.fib_complete = Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.LcMpls.FibComplete()
                                            self.fib_complete.parent = self
                                            self._children_name_map["fib_complete"] = "fib-complete"
                                            self._children_yang_names.add("fib-complete")
                                            self._segment_path = lambda: "lc-mpls"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.LcMpls, ['node_name', 'speed'], name, value)


                                        class FibComplete(Entity):
                                            """
                                            Completion point of FIB
                                            
                                            .. attribute:: duration
                                            
                                            	Duration of processing (in ss.msec)
                                            	**type**\:  str
                                            
                                            .. attribute:: end_time
                                            
                                            	Last route process time relative to event trigger time (in ss.msec)
                                            	**type**\:  str
                                            
                                            .. attribute:: start_time
                                            
                                            	First route process time relative to event trigger time (in ss.msec)
                                            	**type**\:  str
                                            
                                            

                                            """

                                            _prefix = 'infra-rcmd-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                super(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.LcMpls.FibComplete, self).__init__()

                                                self.yang_name = "fib-complete"
                                                self.yang_parent_name = "lc-mpls"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.duration = YLeaf(YType.str, "duration")

                                                self.end_time = YLeaf(YType.str, "end-time")

                                                self.start_time = YLeaf(YType.str, "start-time")
                                                self._segment_path = lambda: "fib-complete"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.LcMpls.FibComplete, ['duration', 'end_time', 'start_time'], name, value)


                                    class LdpEnter(Entity):
                                        """
                                        Entry point of LDP
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.LdpEnter, self).__init__()

                                            self.yang_name = "ldp-enter"
                                            self.yang_parent_name = "convergence-timeline"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.duration = YLeaf(YType.str, "duration")

                                            self.end_time = YLeaf(YType.str, "end-time")

                                            self.start_time = YLeaf(YType.str, "start-time")
                                            self._segment_path = lambda: "ldp-enter"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.LdpEnter, ['duration', 'end_time', 'start_time'], name, value)


                                    class LdpExit(Entity):
                                        """
                                        Exit point of LDP to LSD
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.LdpExit, self).__init__()

                                            self.yang_name = "ldp-exit"
                                            self.yang_parent_name = "convergence-timeline"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.duration = YLeaf(YType.str, "duration")

                                            self.end_time = YLeaf(YType.str, "end-time")

                                            self.start_time = YLeaf(YType.str, "start-time")
                                            self._segment_path = lambda: "ldp-exit"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.LdpExit, ['duration', 'end_time', 'start_time'], name, value)


                                    class LsdEnter(Entity):
                                        """
                                        Entry point of LSD
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.LsdEnter, self).__init__()

                                            self.yang_name = "lsd-enter"
                                            self.yang_parent_name = "convergence-timeline"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.duration = YLeaf(YType.str, "duration")

                                            self.end_time = YLeaf(YType.str, "end-time")

                                            self.start_time = YLeaf(YType.str, "start-time")
                                            self._segment_path = lambda: "lsd-enter"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.LsdEnter, ['duration', 'end_time', 'start_time'], name, value)


                                    class LsdExit(Entity):
                                        """
                                        Exit point of LSD to FIBs
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.LsdExit, self).__init__()

                                            self.yang_name = "lsd-exit"
                                            self.yang_parent_name = "convergence-timeline"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.duration = YLeaf(YType.str, "duration")

                                            self.end_time = YLeaf(YType.str, "end-time")

                                            self.start_time = YLeaf(YType.str, "start-time")
                                            self._segment_path = lambda: "lsd-exit"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.LsdExit, ['duration', 'end_time', 'start_time'], name, value)


                                    class RiBv4Enter(Entity):
                                        """
                                        Entry point of IPv4 RIB
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.RiBv4Enter, self).__init__()

                                            self.yang_name = "ri-bv4-enter"
                                            self.yang_parent_name = "convergence-timeline"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.duration = YLeaf(YType.str, "duration")

                                            self.end_time = YLeaf(YType.str, "end-time")

                                            self.start_time = YLeaf(YType.str, "start-time")
                                            self._segment_path = lambda: "ri-bv4-enter"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.RiBv4Enter, ['duration', 'end_time', 'start_time'], name, value)


                                    class RiBv4Exit(Entity):
                                        """
                                        Exit point from IPv4 RIB to FIBs
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.RiBv4Exit, self).__init__()

                                            self.yang_name = "ri-bv4-exit"
                                            self.yang_parent_name = "convergence-timeline"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.duration = YLeaf(YType.str, "duration")

                                            self.end_time = YLeaf(YType.str, "end-time")

                                            self.start_time = YLeaf(YType.str, "start-time")
                                            self._segment_path = lambda: "ri-bv4-exit"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.RiBv4Exit, ['duration', 'end_time', 'start_time'], name, value)


                                    class RiBv4Redistribute(Entity):
                                        """
                                        Route Redistribute point from IPv4 RIB to LDP
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.RiBv4Redistribute, self).__init__()

                                            self.yang_name = "ri-bv4-redistribute"
                                            self.yang_parent_name = "convergence-timeline"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.duration = YLeaf(YType.str, "duration")

                                            self.end_time = YLeaf(YType.str, "end-time")

                                            self.start_time = YLeaf(YType.str, "start-time")
                                            self._segment_path = lambda: "ri-bv4-redistribute"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.RiBv4Redistribute, ['duration', 'end_time', 'start_time'], name, value)


                                    class RouteOrigin(Entity):
                                        """
                                        Route origin (routing protocol)
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.RouteOrigin, self).__init__()

                                            self.yang_name = "route-origin"
                                            self.yang_parent_name = "convergence-timeline"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.duration = YLeaf(YType.str, "duration")

                                            self.end_time = YLeaf(YType.str, "end-time")

                                            self.start_time = YLeaf(YType.str, "start-time")
                                            self._segment_path = lambda: "route-origin"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.RouteOrigin, ['duration', 'end_time', 'start_time'], name, value)


                                class LeafNetworksAdded(Entity):
                                    """
                                    List of Leaf Networks Added
                                    
                                    .. attribute:: address
                                    
                                    	IP address
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: net_mask
                                    
                                    	Mask
                                    	**type**\:  int
                                    
                                    	**range:** 0..255
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.LeafNetworksAdded, self).__init__()

                                        self.yang_name = "leaf-networks-added"
                                        self.yang_parent_name = "priority"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.address = YLeaf(YType.str, "address")

                                        self.net_mask = YLeaf(YType.uint8, "net-mask")
                                        self._segment_path = lambda: "leaf-networks-added"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.LeafNetworksAdded, ['address', 'net_mask'], name, value)


                                class LeafNetworksDeleted(Entity):
                                    """
                                    List of Leaf Networks Deleted
                                    
                                    .. attribute:: address
                                    
                                    	IP address
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: net_mask
                                    
                                    	Mask
                                    	**type**\:  int
                                    
                                    	**range:** 0..255
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.LeafNetworksDeleted, self).__init__()

                                        self.yang_name = "leaf-networks-deleted"
                                        self.yang_parent_name = "priority"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.address = YLeaf(YType.str, "address")

                                        self.net_mask = YLeaf(YType.uint8, "net-mask")
                                        self._segment_path = lambda: "leaf-networks-deleted"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.LeafNetworksDeleted, ['address', 'net_mask'], name, value)


                                class PrioritySummary(Entity):
                                    """
                                    Summary of the priority
                                    
                                    .. attribute:: ip_convergence_time
                                    
                                    	Convergence time for IP route programming
                                    	**type**\:   :py:class:`IpConvergenceTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.PrioritySummary.IpConvergenceTime>`
                                    
                                    .. attribute:: level
                                    
                                    	Critical, High, Medium or Low
                                    	**type**\:   :py:class:`RcmdPriorityLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdPriorityLevel>`
                                    
                                    .. attribute:: mpls_convergence_time
                                    
                                    	Convergence time for MPLS label programming
                                    	**type**\:   :py:class:`MplsConvergenceTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.PrioritySummary.MplsConvergenceTime>`
                                    
                                    .. attribute:: route_statistics
                                    
                                    	Route statistics
                                    	**type**\:   :py:class:`RouteStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.PrioritySummary.RouteStatistics>`
                                    
                                    .. attribute:: threshold_exceeded
                                    
                                    	Threshold exceeded
                                    	**type**\:  bool
                                    
                                    .. attribute:: type3ls_as
                                    
                                    	Number of Type 3 LSA
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: type4ls_as
                                    
                                    	Number of Type 4 LSA
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: type57ls_as
                                    
                                    	Number of Type 5/7 LSA
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.PrioritySummary, self).__init__()

                                        self.yang_name = "priority-summary"
                                        self.yang_parent_name = "priority"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {"ip-convergence-time" : ("ip_convergence_time", Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.PrioritySummary.IpConvergenceTime), "mpls-convergence-time" : ("mpls_convergence_time", Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.PrioritySummary.MplsConvergenceTime), "route-statistics" : ("route_statistics", Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.PrioritySummary.RouteStatistics)}
                                        self._child_list_classes = {}

                                        self.level = YLeaf(YType.enumeration, "level")

                                        self.threshold_exceeded = YLeaf(YType.boolean, "threshold-exceeded")

                                        self.type3ls_as = YLeaf(YType.uint32, "type3ls-as")

                                        self.type4ls_as = YLeaf(YType.uint32, "type4ls-as")

                                        self.type57ls_as = YLeaf(YType.uint32, "type57ls-as")

                                        self.ip_convergence_time = Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.PrioritySummary.IpConvergenceTime()
                                        self.ip_convergence_time.parent = self
                                        self._children_name_map["ip_convergence_time"] = "ip-convergence-time"
                                        self._children_yang_names.add("ip-convergence-time")

                                        self.mpls_convergence_time = Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.PrioritySummary.MplsConvergenceTime()
                                        self.mpls_convergence_time.parent = self
                                        self._children_name_map["mpls_convergence_time"] = "mpls-convergence-time"
                                        self._children_yang_names.add("mpls-convergence-time")

                                        self.route_statistics = Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.PrioritySummary.RouteStatistics()
                                        self.route_statistics.parent = self
                                        self._children_name_map["route_statistics"] = "route-statistics"
                                        self._children_yang_names.add("route-statistics")
                                        self._segment_path = lambda: "priority-summary"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.PrioritySummary, ['level', 'threshold_exceeded', 'type3ls_as', 'type4ls_as', 'type57ls_as'], name, value)


                                    class IpConvergenceTime(Entity):
                                        """
                                        Convergence time for IP route programming
                                        
                                        .. attribute:: fastest_node_name
                                        
                                        	Linecard node name which took the minimum time
                                        	**type**\:  str
                                        
                                        .. attribute:: maximum_time
                                        
                                        	Maximum time(in seconds.milliseconds)
                                        	**type**\:  str
                                        
                                        	**units**\: millisecond
                                        
                                        .. attribute:: minimum_time
                                        
                                        	Minimum time(in seconds.milliseconds)
                                        	**type**\:  str
                                        
                                        	**units**\: millisecond
                                        
                                        .. attribute:: slowest_node_name
                                        
                                        	Linecard node name which took the maximum time
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.PrioritySummary.IpConvergenceTime, self).__init__()

                                            self.yang_name = "ip-convergence-time"
                                            self.yang_parent_name = "priority-summary"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.fastest_node_name = YLeaf(YType.str, "fastest-node-name")

                                            self.maximum_time = YLeaf(YType.str, "maximum-time")

                                            self.minimum_time = YLeaf(YType.str, "minimum-time")

                                            self.slowest_node_name = YLeaf(YType.str, "slowest-node-name")
                                            self._segment_path = lambda: "ip-convergence-time"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.PrioritySummary.IpConvergenceTime, ['fastest_node_name', 'maximum_time', 'minimum_time', 'slowest_node_name'], name, value)


                                    class MplsConvergenceTime(Entity):
                                        """
                                        Convergence time for MPLS label programming
                                        
                                        .. attribute:: fastest_node_name
                                        
                                        	Linecard node name which took the minimum time
                                        	**type**\:  str
                                        
                                        .. attribute:: maximum_time
                                        
                                        	Maximum time(in seconds.milliseconds)
                                        	**type**\:  str
                                        
                                        	**units**\: millisecond
                                        
                                        .. attribute:: minimum_time
                                        
                                        	Minimum time(in seconds.milliseconds)
                                        	**type**\:  str
                                        
                                        	**units**\: millisecond
                                        
                                        .. attribute:: slowest_node_name
                                        
                                        	Linecard node name which took the maximum time
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.PrioritySummary.MplsConvergenceTime, self).__init__()

                                            self.yang_name = "mpls-convergence-time"
                                            self.yang_parent_name = "priority-summary"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.fastest_node_name = YLeaf(YType.str, "fastest-node-name")

                                            self.maximum_time = YLeaf(YType.str, "maximum-time")

                                            self.minimum_time = YLeaf(YType.str, "minimum-time")

                                            self.slowest_node_name = YLeaf(YType.str, "slowest-node-name")
                                            self._segment_path = lambda: "mpls-convergence-time"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.PrioritySummary.MplsConvergenceTime, ['fastest_node_name', 'maximum_time', 'minimum_time', 'slowest_node_name'], name, value)


                                    class RouteStatistics(Entity):
                                        """
                                        Route statistics
                                        
                                        .. attribute:: adds
                                        
                                        	Added
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: deletes
                                        
                                        	Deleted
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: modifies
                                        
                                        	Modified
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: reachables
                                        
                                        	Reachable
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: touches
                                        
                                        	Touched
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: unreachables
                                        
                                        	Unreachable
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.PrioritySummary.RouteStatistics, self).__init__()

                                            self.yang_name = "route-statistics"
                                            self.yang_parent_name = "priority-summary"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.adds = YLeaf(YType.uint32, "adds")

                                            self.deletes = YLeaf(YType.uint32, "deletes")

                                            self.modifies = YLeaf(YType.uint32, "modifies")

                                            self.reachables = YLeaf(YType.uint32, "reachables")

                                            self.touches = YLeaf(YType.uint32, "touches")

                                            self.unreachables = YLeaf(YType.uint32, "unreachables")
                                            self._segment_path = lambda: "route-statistics"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.PrioritySummary.RouteStatistics, ['adds', 'deletes', 'modifies', 'reachables', 'touches', 'unreachables'], name, value)


                        class SpfSummary(Entity):
                            """
                            SPF summary information
                            
                            .. attribute:: duration
                            
                            	Duration of complete SPF calculation (in ss .msec)
                            	**type**\:  str
                            
                            .. attribute:: is_data_complete
                            
                            	Whether the event has all information
                            	**type**\:  bool
                            
                            .. attribute:: priority_summary
                            
                            	Convergence information summary on per\-priority basis
                            	**type**\: list of    :py:class:`PrioritySummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary>`
                            
                            .. attribute:: start_time
                            
                            	Start time (offset from event trigger time in ss .msec)
                            	**type**\:  str
                            
                            .. attribute:: state
                            
                            	SPF state
                            	**type**\:   :py:class:`RcmdSpfState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdSpfState>`
                            
                            .. attribute:: threshold_exceeded
                            
                            	Threshold exceeded
                            	**type**\:  bool
                            
                            .. attribute:: total_dijkstra_runs
                            
                            	Total number of Dijkstra runs
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: total_inter_area_and_external_batches
                            
                            	Total number of inter\-area/external computation batches
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: total_type12lsa_changes
                            
                            	Total number of Type 1/2 LSA changes processed
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: total_type357lsa_changes
                            
                            	Total number of Type 3/5/7 LSA changes processed
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: trigger_time
                            
                            	Trigger time (in hh\:mm\:ss.msec)
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary, self).__init__()

                                self.yang_name = "spf-summary"
                                self.yang_parent_name = "spf-run-summary"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {"priority-summary" : ("priority_summary", Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary)}

                                self.duration = YLeaf(YType.str, "duration")

                                self.is_data_complete = YLeaf(YType.boolean, "is-data-complete")

                                self.start_time = YLeaf(YType.str, "start-time")

                                self.state = YLeaf(YType.enumeration, "state")

                                self.threshold_exceeded = YLeaf(YType.boolean, "threshold-exceeded")

                                self.total_dijkstra_runs = YLeaf(YType.uint16, "total-dijkstra-runs")

                                self.total_inter_area_and_external_batches = YLeaf(YType.uint16, "total-inter-area-and-external-batches")

                                self.total_type12lsa_changes = YLeaf(YType.uint16, "total-type12lsa-changes")

                                self.total_type357lsa_changes = YLeaf(YType.uint16, "total-type357lsa-changes")

                                self.trigger_time = YLeaf(YType.str, "trigger-time")

                                self.priority_summary = YList(self)
                                self._segment_path = lambda: "spf-summary"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary, ['duration', 'is_data_complete', 'start_time', 'state', 'threshold_exceeded', 'total_dijkstra_runs', 'total_inter_area_and_external_batches', 'total_type12lsa_changes', 'total_type357lsa_changes', 'trigger_time'], name, value)


                            class PrioritySummary(Entity):
                                """
                                Convergence information summary on per\-priority
                                basis
                                
                                .. attribute:: frr_statistic
                                
                                	Fast Re\-Route Statistics
                                	**type**\: list of    :py:class:`FrrStatistic <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary.FrrStatistic>`
                                
                                .. attribute:: ip_convergence_time
                                
                                	Convergence time for IP route programming
                                	**type**\:   :py:class:`IpConvergenceTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary.IpConvergenceTime>`
                                
                                .. attribute:: level
                                
                                	Critical, High, Medium or Low
                                	**type**\:   :py:class:`RcmdPriorityLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdPriorityLevel>`
                                
                                .. attribute:: mpls_convergence_time
                                
                                	Convergence time for MPLS label programming
                                	**type**\:   :py:class:`MplsConvergenceTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary.MplsConvergenceTime>`
                                
                                .. attribute:: route_statistics
                                
                                	Route statistics
                                	**type**\:   :py:class:`RouteStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary.RouteStatistics>`
                                
                                .. attribute:: threshold_exceeded
                                
                                	Threshold exceeded
                                	**type**\:  bool
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary, self).__init__()

                                    self.yang_name = "priority-summary"
                                    self.yang_parent_name = "spf-summary"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {"ip-convergence-time" : ("ip_convergence_time", Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary.IpConvergenceTime), "mpls-convergence-time" : ("mpls_convergence_time", Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary.MplsConvergenceTime), "route-statistics" : ("route_statistics", Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary.RouteStatistics)}
                                    self._child_list_classes = {"frr-statistic" : ("frr_statistic", Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary.FrrStatistic)}

                                    self.level = YLeaf(YType.enumeration, "level")

                                    self.threshold_exceeded = YLeaf(YType.boolean, "threshold-exceeded")

                                    self.ip_convergence_time = Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary.IpConvergenceTime()
                                    self.ip_convergence_time.parent = self
                                    self._children_name_map["ip_convergence_time"] = "ip-convergence-time"
                                    self._children_yang_names.add("ip-convergence-time")

                                    self.mpls_convergence_time = Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary.MplsConvergenceTime()
                                    self.mpls_convergence_time.parent = self
                                    self._children_name_map["mpls_convergence_time"] = "mpls-convergence-time"
                                    self._children_yang_names.add("mpls-convergence-time")

                                    self.route_statistics = Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary.RouteStatistics()
                                    self.route_statistics.parent = self
                                    self._children_name_map["route_statistics"] = "route-statistics"
                                    self._children_yang_names.add("route-statistics")

                                    self.frr_statistic = YList(self)
                                    self._segment_path = lambda: "priority-summary"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary, ['level', 'threshold_exceeded'], name, value)


                                class FrrStatistic(Entity):
                                    """
                                    Fast Re\-Route Statistics
                                    
                                    .. attribute:: coverage
                                    
                                    	Coverage in percentage
                                    	**type**\:  str
                                    
                                    	**units**\: percentage
                                    
                                    .. attribute:: fully_protected_routes
                                    
                                    	Fully Protected Routes
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: partially_protected_routes
                                    
                                    	Partially Protected Routes
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: total_routes
                                    
                                    	Total Number of Routes
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary.FrrStatistic, self).__init__()

                                        self.yang_name = "frr-statistic"
                                        self.yang_parent_name = "priority-summary"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.coverage = YLeaf(YType.str, "coverage")

                                        self.fully_protected_routes = YLeaf(YType.uint32, "fully-protected-routes")

                                        self.partially_protected_routes = YLeaf(YType.uint32, "partially-protected-routes")

                                        self.total_routes = YLeaf(YType.uint32, "total-routes")
                                        self._segment_path = lambda: "frr-statistic"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary.FrrStatistic, ['coverage', 'fully_protected_routes', 'partially_protected_routes', 'total_routes'], name, value)


                                class IpConvergenceTime(Entity):
                                    """
                                    Convergence time for IP route programming
                                    
                                    .. attribute:: fastest_node_name
                                    
                                    	Linecard node name which took the minimum time
                                    	**type**\:  str
                                    
                                    .. attribute:: maximum_time
                                    
                                    	Maximum time(in seconds.milliseconds)
                                    	**type**\:  str
                                    
                                    	**units**\: millisecond
                                    
                                    .. attribute:: minimum_time
                                    
                                    	Minimum time(in seconds.milliseconds)
                                    	**type**\:  str
                                    
                                    	**units**\: millisecond
                                    
                                    .. attribute:: slowest_node_name
                                    
                                    	Linecard node name which took the maximum time
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary.IpConvergenceTime, self).__init__()

                                        self.yang_name = "ip-convergence-time"
                                        self.yang_parent_name = "priority-summary"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.fastest_node_name = YLeaf(YType.str, "fastest-node-name")

                                        self.maximum_time = YLeaf(YType.str, "maximum-time")

                                        self.minimum_time = YLeaf(YType.str, "minimum-time")

                                        self.slowest_node_name = YLeaf(YType.str, "slowest-node-name")
                                        self._segment_path = lambda: "ip-convergence-time"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary.IpConvergenceTime, ['fastest_node_name', 'maximum_time', 'minimum_time', 'slowest_node_name'], name, value)


                                class MplsConvergenceTime(Entity):
                                    """
                                    Convergence time for MPLS label programming
                                    
                                    .. attribute:: fastest_node_name
                                    
                                    	Linecard node name which took the minimum time
                                    	**type**\:  str
                                    
                                    .. attribute:: maximum_time
                                    
                                    	Maximum time(in seconds.milliseconds)
                                    	**type**\:  str
                                    
                                    	**units**\: millisecond
                                    
                                    .. attribute:: minimum_time
                                    
                                    	Minimum time(in seconds.milliseconds)
                                    	**type**\:  str
                                    
                                    	**units**\: millisecond
                                    
                                    .. attribute:: slowest_node_name
                                    
                                    	Linecard node name which took the maximum time
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary.MplsConvergenceTime, self).__init__()

                                        self.yang_name = "mpls-convergence-time"
                                        self.yang_parent_name = "priority-summary"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.fastest_node_name = YLeaf(YType.str, "fastest-node-name")

                                        self.maximum_time = YLeaf(YType.str, "maximum-time")

                                        self.minimum_time = YLeaf(YType.str, "minimum-time")

                                        self.slowest_node_name = YLeaf(YType.str, "slowest-node-name")
                                        self._segment_path = lambda: "mpls-convergence-time"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary.MplsConvergenceTime, ['fastest_node_name', 'maximum_time', 'minimum_time', 'slowest_node_name'], name, value)


                                class RouteStatistics(Entity):
                                    """
                                    Route statistics
                                    
                                    .. attribute:: adds
                                    
                                    	Added
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: deletes
                                    
                                    	Deleted
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: modifies
                                    
                                    	Modified
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: reachables
                                    
                                    	Reachable
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: touches
                                    
                                    	Touched
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: unreachables
                                    
                                    	Unreachable
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary.RouteStatistics, self).__init__()

                                        self.yang_name = "route-statistics"
                                        self.yang_parent_name = "priority-summary"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.adds = YLeaf(YType.uint32, "adds")

                                        self.deletes = YLeaf(YType.uint32, "deletes")

                                        self.modifies = YLeaf(YType.uint32, "modifies")

                                        self.reachables = YLeaf(YType.uint32, "reachables")

                                        self.touches = YLeaf(YType.uint32, "touches")

                                        self.unreachables = YLeaf(YType.uint32, "unreachables")
                                        self._segment_path = lambda: "route-statistics"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary.RouteStatistics, ['adds', 'deletes', 'modifies', 'reachables', 'touches', 'unreachables'], name, value)


                class SummaryExternalEventOfflines(Entity):
                    """
                    OSPF Summary\-External Prefix events offline
                    data
                    
                    .. attribute:: summary_external_event_offline
                    
                    	Offline operational data for particular OSPF Prefix Event
                    	**type**\: list of    :py:class:`SummaryExternalEventOffline <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines.SummaryExternalEventOffline>`
                    
                    

                    """

                    _prefix = 'infra-rcmd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines, self).__init__()

                        self.yang_name = "summary-external-event-offlines"
                        self.yang_parent_name = "instance"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self._child_container_classes = {}
                        self._child_list_classes = {"summary-external-event-offline" : ("summary_external_event_offline", Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines.SummaryExternalEventOffline)}

                        self.summary_external_event_offline = YList(self)
                        self._segment_path = lambda: "summary-external-event-offlines"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines, [], name, value)


                    class SummaryExternalEventOffline(Entity):
                        """
                        Offline operational data for particular OSPF
                        Prefix Event
                        
                        .. attribute:: event_id  <key>
                        
                        	Specific Event ID
                        	**type**\:  int
                        
                        	**range:** 1..4294967295
                        
                        .. attribute:: change_type
                        
                        	Event Add/Delete
                        	**type**\:   :py:class:`RcmdChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdChange>`
                        
                        .. attribute:: cost
                        
                        	Protocol route cost
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: ip_convergence_time
                        
                        	Convergence time for IP route programming
                        	**type**\:   :py:class:`IpConvergenceTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines.SummaryExternalEventOffline.IpConvergenceTime>`
                        
                        .. attribute:: ipfrr_event_id
                        
                        	Referenced IP\-FRR Event ID (0 \- Not Applicable)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: lsa_processed
                        
                        	List of LSAs processed
                        	**type**\: list of    :py:class:`LsaProcessed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines.SummaryExternalEventOffline.LsaProcessed>`
                        
                        .. attribute:: mpls_convergence_time
                        
                        	Convergence time for MPLS label programming
                        	**type**\:   :py:class:`MplsConvergenceTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines.SummaryExternalEventOffline.MplsConvergenceTime>`
                        
                        .. attribute:: path
                        
                        	Path information
                        	**type**\: list of    :py:class:`Path <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines.SummaryExternalEventOffline.Path>`
                        
                        .. attribute:: prefix
                        
                        	Prefix
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: prefix_lenth
                        
                        	Prefix length
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: priority
                        
                        	Event processed priority
                        	**type**\:   :py:class:`RcmdPriorityLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdPriorityLevel>`
                        
                        .. attribute:: route_path_change_type
                        
                        	Route Path Change Type
                        	**type**\:   :py:class:`RcmdShowRoutePathChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowRoutePathChange>`
                        
                        .. attribute:: route_type
                        
                        	Route Type intra/inter/l1/l2
                        	**type**\:   :py:class:`RcmdShowRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowRoute>`
                        
                        .. attribute:: spf_run_no
                        
                        	Referenced SPF Run No (0 \- Not Applicable)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: threshold_exceeded
                        
                        	Threshold exceeded
                        	**type**\:  bool
                        
                        .. attribute:: time_line
                        
                        	Timeline information
                        	**type**\: list of    :py:class:`TimeLine <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines.SummaryExternalEventOffline.TimeLine>`
                        
                        .. attribute:: trigger_lsa
                        
                        	LSA that triggered this event
                        	**type**\: list of    :py:class:`TriggerLsa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines.SummaryExternalEventOffline.TriggerLsa>`
                        
                        .. attribute:: trigger_time
                        
                        	Event trigger time
                        	**type**\:  str
                        
                        

                        """

                        _prefix = 'infra-rcmd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines.SummaryExternalEventOffline, self).__init__()

                            self.yang_name = "summary-external-event-offline"
                            self.yang_parent_name = "summary-external-event-offlines"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self._child_container_classes = {"ip-convergence-time" : ("ip_convergence_time", Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines.SummaryExternalEventOffline.IpConvergenceTime), "mpls-convergence-time" : ("mpls_convergence_time", Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines.SummaryExternalEventOffline.MplsConvergenceTime)}
                            self._child_list_classes = {"lsa-processed" : ("lsa_processed", Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines.SummaryExternalEventOffline.LsaProcessed), "path" : ("path", Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines.SummaryExternalEventOffline.Path), "time-line" : ("time_line", Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines.SummaryExternalEventOffline.TimeLine), "trigger-lsa" : ("trigger_lsa", Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines.SummaryExternalEventOffline.TriggerLsa)}

                            self.event_id = YLeaf(YType.uint32, "event-id")

                            self.change_type = YLeaf(YType.enumeration, "change-type")

                            self.cost = YLeaf(YType.uint32, "cost")

                            self.ipfrr_event_id = YLeaf(YType.uint32, "ipfrr-event-id")

                            self.prefix = YLeaf(YType.str, "prefix")

                            self.prefix_lenth = YLeaf(YType.uint32, "prefix-lenth")

                            self.priority = YLeaf(YType.enumeration, "priority")

                            self.route_path_change_type = YLeaf(YType.enumeration, "route-path-change-type")

                            self.route_type = YLeaf(YType.enumeration, "route-type")

                            self.spf_run_no = YLeaf(YType.uint32, "spf-run-no")

                            self.threshold_exceeded = YLeaf(YType.boolean, "threshold-exceeded")

                            self.trigger_time = YLeaf(YType.str, "trigger-time")

                            self.ip_convergence_time = Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines.SummaryExternalEventOffline.IpConvergenceTime()
                            self.ip_convergence_time.parent = self
                            self._children_name_map["ip_convergence_time"] = "ip-convergence-time"
                            self._children_yang_names.add("ip-convergence-time")

                            self.mpls_convergence_time = Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines.SummaryExternalEventOffline.MplsConvergenceTime()
                            self.mpls_convergence_time.parent = self
                            self._children_name_map["mpls_convergence_time"] = "mpls-convergence-time"
                            self._children_yang_names.add("mpls-convergence-time")

                            self.lsa_processed = YList(self)
                            self.path = YList(self)
                            self.time_line = YList(self)
                            self.trigger_lsa = YList(self)
                            self._segment_path = lambda: "summary-external-event-offline" + "[event-id='" + self.event_id.get() + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines.SummaryExternalEventOffline, ['event_id', 'change_type', 'cost', 'ipfrr_event_id', 'prefix', 'prefix_lenth', 'priority', 'route_path_change_type', 'route_type', 'spf_run_no', 'threshold_exceeded', 'trigger_time'], name, value)


                        class IpConvergenceTime(Entity):
                            """
                            Convergence time for IP route programming
                            
                            .. attribute:: fastest_node_name
                            
                            	Linecard node name which took the minimum time
                            	**type**\:  str
                            
                            .. attribute:: maximum_time
                            
                            	Maximum time(in seconds.milliseconds)
                            	**type**\:  str
                            
                            	**units**\: millisecond
                            
                            .. attribute:: minimum_time
                            
                            	Minimum time(in seconds.milliseconds)
                            	**type**\:  str
                            
                            	**units**\: millisecond
                            
                            .. attribute:: slowest_node_name
                            
                            	Linecard node name which took the maximum time
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines.SummaryExternalEventOffline.IpConvergenceTime, self).__init__()

                                self.yang_name = "ip-convergence-time"
                                self.yang_parent_name = "summary-external-event-offline"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {}

                                self.fastest_node_name = YLeaf(YType.str, "fastest-node-name")

                                self.maximum_time = YLeaf(YType.str, "maximum-time")

                                self.minimum_time = YLeaf(YType.str, "minimum-time")

                                self.slowest_node_name = YLeaf(YType.str, "slowest-node-name")
                                self._segment_path = lambda: "ip-convergence-time"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines.SummaryExternalEventOffline.IpConvergenceTime, ['fastest_node_name', 'maximum_time', 'minimum_time', 'slowest_node_name'], name, value)


                        class LsaProcessed(Entity):
                            """
                            List of LSAs processed
                            
                            .. attribute:: change_type
                            
                            	Add, Delete, Modify
                            	**type**\:   :py:class:`RcmdLsChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsChange>`
                            
                            .. attribute:: lsa_id
                            
                            	LSA ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: lsa_type
                            
                            	LSA type
                            	**type**\:   :py:class:`RcmdLsa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsa>`
                            
                            .. attribute:: origin_router_id
                            
                            	Originating Router ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: reception_time
                            
                            	Reception Time on router (in hh\:mm\:ss.msec)
                            	**type**\:  str
                            
                            .. attribute:: sequence_number
                            
                            	Sequence Number
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines.SummaryExternalEventOffline.LsaProcessed, self).__init__()

                                self.yang_name = "lsa-processed"
                                self.yang_parent_name = "summary-external-event-offline"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {}

                                self.change_type = YLeaf(YType.enumeration, "change-type")

                                self.lsa_id = YLeaf(YType.str, "lsa-id")

                                self.lsa_type = YLeaf(YType.enumeration, "lsa-type")

                                self.origin_router_id = YLeaf(YType.str, "origin-router-id")

                                self.reception_time = YLeaf(YType.str, "reception-time")

                                self.sequence_number = YLeaf(YType.str, "sequence-number")
                                self._segment_path = lambda: "lsa-processed"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines.SummaryExternalEventOffline.LsaProcessed, ['change_type', 'lsa_id', 'lsa_type', 'origin_router_id', 'reception_time', 'sequence_number'], name, value)


                        class MplsConvergenceTime(Entity):
                            """
                            Convergence time for MPLS label programming
                            
                            .. attribute:: fastest_node_name
                            
                            	Linecard node name which took the minimum time
                            	**type**\:  str
                            
                            .. attribute:: maximum_time
                            
                            	Maximum time(in seconds.milliseconds)
                            	**type**\:  str
                            
                            	**units**\: millisecond
                            
                            .. attribute:: minimum_time
                            
                            	Minimum time(in seconds.milliseconds)
                            	**type**\:  str
                            
                            	**units**\: millisecond
                            
                            .. attribute:: slowest_node_name
                            
                            	Linecard node name which took the maximum time
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines.SummaryExternalEventOffline.MplsConvergenceTime, self).__init__()

                                self.yang_name = "mpls-convergence-time"
                                self.yang_parent_name = "summary-external-event-offline"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {}

                                self.fastest_node_name = YLeaf(YType.str, "fastest-node-name")

                                self.maximum_time = YLeaf(YType.str, "maximum-time")

                                self.minimum_time = YLeaf(YType.str, "minimum-time")

                                self.slowest_node_name = YLeaf(YType.str, "slowest-node-name")
                                self._segment_path = lambda: "mpls-convergence-time"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines.SummaryExternalEventOffline.MplsConvergenceTime, ['fastest_node_name', 'maximum_time', 'minimum_time', 'slowest_node_name'], name, value)


                        class Path(Entity):
                            """
                            Path information
                            
                            .. attribute:: change_type
                            
                            	Event Add/Delete
                            	**type**\:   :py:class:`RcmdChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdChange>`
                            
                            .. attribute:: interface_name
                            
                            	Interface Name
                            	**type**\:  str
                            
                            .. attribute:: lfa_path
                            
                            	Backup Path Informatoin
                            	**type**\: list of    :py:class:`LfaPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines.SummaryExternalEventOffline.Path.LfaPath>`
                            
                            .. attribute:: neighbour_address
                            
                            	Nexthop Address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: path_metric
                            
                            	Path Metric
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines.SummaryExternalEventOffline.Path, self).__init__()

                                self.yang_name = "path"
                                self.yang_parent_name = "summary-external-event-offline"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {"lfa-path" : ("lfa_path", Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines.SummaryExternalEventOffline.Path.LfaPath)}

                                self.change_type = YLeaf(YType.enumeration, "change-type")

                                self.interface_name = YLeaf(YType.str, "interface-name")

                                self.neighbour_address = YLeaf(YType.str, "neighbour-address")

                                self.path_metric = YLeaf(YType.uint32, "path-metric")

                                self.lfa_path = YList(self)
                                self._segment_path = lambda: "path"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines.SummaryExternalEventOffline.Path, ['change_type', 'interface_name', 'neighbour_address', 'path_metric'], name, value)


                            class LfaPath(Entity):
                                """
                                Backup Path Informatoin
                                
                                .. attribute:: change_type
                                
                                	Event Add/Delete
                                	**type**\:   :py:class:`RcmdChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdChange>`
                                
                                .. attribute:: interface_name
                                
                                	Interface Name
                                	**type**\:  str
                                
                                .. attribute:: lfa_type
                                
                                	Type of LFA
                                	**type**\:   :py:class:`RcmdShowIpfrrLfa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowIpfrrLfa>`
                                
                                .. attribute:: neighbour_address
                                
                                	Nexthop Address
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: path_metric
                                
                                	Path Metric
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: remote_node_id
                                
                                	Remote Node ID, in case of Remote LFA
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines.SummaryExternalEventOffline.Path.LfaPath, self).__init__()

                                    self.yang_name = "lfa-path"
                                    self.yang_parent_name = "path"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {}
                                    self._child_list_classes = {}

                                    self.change_type = YLeaf(YType.enumeration, "change-type")

                                    self.interface_name = YLeaf(YType.str, "interface-name")

                                    self.lfa_type = YLeaf(YType.enumeration, "lfa-type")

                                    self.neighbour_address = YLeaf(YType.str, "neighbour-address")

                                    self.path_metric = YLeaf(YType.uint32, "path-metric")

                                    self.remote_node_id = YLeaf(YType.str, "remote-node-id")
                                    self._segment_path = lambda: "lfa-path"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines.SummaryExternalEventOffline.Path.LfaPath, ['change_type', 'interface_name', 'lfa_type', 'neighbour_address', 'path_metric', 'remote_node_id'], name, value)


                        class TimeLine(Entity):
                            """
                            Timeline information
                            
                            .. attribute:: lc_ip
                            
                            	List of Linecards' completion point for IP routes
                            	**type**\: list of    :py:class:`LcIp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines.SummaryExternalEventOffline.TimeLine.LcIp>`
                            
                            .. attribute:: lc_mpls
                            
                            	List of Linecards' completion point for MPLS labels
                            	**type**\: list of    :py:class:`LcMpls <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines.SummaryExternalEventOffline.TimeLine.LcMpls>`
                            
                            .. attribute:: ldp_enter
                            
                            	Entry point of LDP
                            	**type**\:  str
                            
                            .. attribute:: ldp_exit
                            
                            	Exit point of LDP to LSD
                            	**type**\:  str
                            
                            .. attribute:: lsd_enter
                            
                            	Entry point of LSD
                            	**type**\:  str
                            
                            .. attribute:: lsd_exit
                            
                            	Exit point of LSD to FIBs
                            	**type**\:  str
                            
                            .. attribute:: ri_bv4_enter
                            
                            	Entry point of IPv4 RIB
                            	**type**\:  str
                            
                            .. attribute:: ri_bv4_exit
                            
                            	Exit point from IPv4 RIB to FIBs
                            	**type**\:  str
                            
                            .. attribute:: ri_bv4_redistribute
                            
                            	Route Redistribute point from IPv4 RIB to LDP
                            	**type**\:  str
                            
                            .. attribute:: route_origin
                            
                            	Route origin (routing protocol)
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines.SummaryExternalEventOffline.TimeLine, self).__init__()

                                self.yang_name = "time-line"
                                self.yang_parent_name = "summary-external-event-offline"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {"lc-ip" : ("lc_ip", Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines.SummaryExternalEventOffline.TimeLine.LcIp), "lc-mpls" : ("lc_mpls", Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines.SummaryExternalEventOffline.TimeLine.LcMpls)}

                                self.ldp_enter = YLeaf(YType.str, "ldp-enter")

                                self.ldp_exit = YLeaf(YType.str, "ldp-exit")

                                self.lsd_enter = YLeaf(YType.str, "lsd-enter")

                                self.lsd_exit = YLeaf(YType.str, "lsd-exit")

                                self.ri_bv4_enter = YLeaf(YType.str, "ri-bv4-enter")

                                self.ri_bv4_exit = YLeaf(YType.str, "ri-bv4-exit")

                                self.ri_bv4_redistribute = YLeaf(YType.str, "ri-bv4-redistribute")

                                self.route_origin = YLeaf(YType.str, "route-origin")

                                self.lc_ip = YList(self)
                                self.lc_mpls = YList(self)
                                self._segment_path = lambda: "time-line"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines.SummaryExternalEventOffline.TimeLine, ['ldp_enter', 'ldp_exit', 'lsd_enter', 'lsd_exit', 'ri_bv4_enter', 'ri_bv4_exit', 'ri_bv4_redistribute', 'route_origin'], name, value)


                            class LcIp(Entity):
                                """
                                List of Linecards' completion point for IP
                                routes
                                
                                .. attribute:: fib_complete
                                
                                	Completion point of FIB
                                	**type**\:  str
                                
                                .. attribute:: node_name
                                
                                	Linecard node name
                                	**type**\:  str
                                
                                .. attribute:: speed
                                
                                	Relative convergence speed
                                	**type**\:   :py:class:`RcmdLinecardSpeed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLinecardSpeed>`
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines.SummaryExternalEventOffline.TimeLine.LcIp, self).__init__()

                                    self.yang_name = "lc-ip"
                                    self.yang_parent_name = "time-line"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {}
                                    self._child_list_classes = {}

                                    self.fib_complete = YLeaf(YType.str, "fib-complete")

                                    self.node_name = YLeaf(YType.str, "node-name")

                                    self.speed = YLeaf(YType.enumeration, "speed")
                                    self._segment_path = lambda: "lc-ip"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines.SummaryExternalEventOffline.TimeLine.LcIp, ['fib_complete', 'node_name', 'speed'], name, value)


                            class LcMpls(Entity):
                                """
                                List of Linecards' completion point for MPLS
                                labels
                                
                                .. attribute:: fib_complete
                                
                                	Completion point of FIB
                                	**type**\:  str
                                
                                .. attribute:: node_name
                                
                                	Linecard node name
                                	**type**\:  str
                                
                                .. attribute:: speed
                                
                                	Relative convergence speed
                                	**type**\:   :py:class:`RcmdLinecardSpeed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLinecardSpeed>`
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines.SummaryExternalEventOffline.TimeLine.LcMpls, self).__init__()

                                    self.yang_name = "lc-mpls"
                                    self.yang_parent_name = "time-line"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {}
                                    self._child_list_classes = {}

                                    self.fib_complete = YLeaf(YType.str, "fib-complete")

                                    self.node_name = YLeaf(YType.str, "node-name")

                                    self.speed = YLeaf(YType.enumeration, "speed")
                                    self._segment_path = lambda: "lc-mpls"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines.SummaryExternalEventOffline.TimeLine.LcMpls, ['fib_complete', 'node_name', 'speed'], name, value)


                        class TriggerLsa(Entity):
                            """
                            LSA that triggered this event
                            
                            .. attribute:: change_type
                            
                            	Add, Delete, Modify
                            	**type**\:   :py:class:`RcmdLsChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsChange>`
                            
                            .. attribute:: lsa_id
                            
                            	LSA ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: lsa_type
                            
                            	LSA type
                            	**type**\:   :py:class:`RcmdLsa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsa>`
                            
                            .. attribute:: origin_router_id
                            
                            	Originating Router ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: reception_time
                            
                            	Reception Time on router (in hh\:mm\:ss.msec)
                            	**type**\:  str
                            
                            .. attribute:: sequence_number
                            
                            	Sequence Number
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines.SummaryExternalEventOffline.TriggerLsa, self).__init__()

                                self.yang_name = "trigger-lsa"
                                self.yang_parent_name = "summary-external-event-offline"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {}

                                self.change_type = YLeaf(YType.enumeration, "change-type")

                                self.lsa_id = YLeaf(YType.str, "lsa-id")

                                self.lsa_type = YLeaf(YType.enumeration, "lsa-type")

                                self.origin_router_id = YLeaf(YType.str, "origin-router-id")

                                self.reception_time = YLeaf(YType.str, "reception-time")

                                self.sequence_number = YLeaf(YType.str, "sequence-number")
                                self._segment_path = lambda: "trigger-lsa"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines.SummaryExternalEventOffline.TriggerLsa, ['change_type', 'lsa_id', 'lsa_type', 'origin_router_id', 'reception_time', 'sequence_number'], name, value)


                class SummaryExternalEventStatistics(Entity):
                    """
                    Summary\-External prefix monitoring statistics
                    
                    .. attribute:: external_added
                    
                    	Total Ext Routes Added
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: external_critical
                    
                    	Total Ext Routes Critical
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: external_deleted
                    
                    	Total Ext Routes Deleted
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: external_high
                    
                    	Total Ext Routes High
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: external_low
                    
                    	Total Ext Routes Low
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: external_medium
                    
                    	Total Ext Routes Medium
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: external_modified
                    
                    	Total Ext Routes Modified
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: external_routes
                    
                    	Total External Routes
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: inter_area_added
                    
                    	Total IA Routes Added
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: inter_area_critical
                    
                    	Total IA Routes Critical
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: inter_area_deleted
                    
                    	Total IA Routes Deleted
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: inter_area_high
                    
                    	Total IA Routes High
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: inter_area_low
                    
                    	Total IA Routes Low
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: inter_area_medium
                    
                    	Total IA Routes Medium
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: inter_area_modified
                    
                    	Total IA Routes Modified
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: inter_area_routes
                    
                    	Total Inter\-Area Routes
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'infra-rcmd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Rcmd.Ospf.Instances.Instance.SummaryExternalEventStatistics, self).__init__()

                        self.yang_name = "summary-external-event-statistics"
                        self.yang_parent_name = "instance"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self._child_container_classes = {}
                        self._child_list_classes = {}

                        self.external_added = YLeaf(YType.uint32, "external-added")

                        self.external_critical = YLeaf(YType.uint32, "external-critical")

                        self.external_deleted = YLeaf(YType.uint32, "external-deleted")

                        self.external_high = YLeaf(YType.uint32, "external-high")

                        self.external_low = YLeaf(YType.uint32, "external-low")

                        self.external_medium = YLeaf(YType.uint32, "external-medium")

                        self.external_modified = YLeaf(YType.uint32, "external-modified")

                        self.external_routes = YLeaf(YType.uint32, "external-routes")

                        self.inter_area_added = YLeaf(YType.uint32, "inter-area-added")

                        self.inter_area_critical = YLeaf(YType.uint32, "inter-area-critical")

                        self.inter_area_deleted = YLeaf(YType.uint32, "inter-area-deleted")

                        self.inter_area_high = YLeaf(YType.uint32, "inter-area-high")

                        self.inter_area_low = YLeaf(YType.uint32, "inter-area-low")

                        self.inter_area_medium = YLeaf(YType.uint32, "inter-area-medium")

                        self.inter_area_modified = YLeaf(YType.uint32, "inter-area-modified")

                        self.inter_area_routes = YLeaf(YType.uint32, "inter-area-routes")
                        self._segment_path = lambda: "summary-external-event-statistics"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rcmd.Ospf.Instances.Instance.SummaryExternalEventStatistics, ['external_added', 'external_critical', 'external_deleted', 'external_high', 'external_low', 'external_medium', 'external_modified', 'external_routes', 'inter_area_added', 'inter_area_critical', 'inter_area_deleted', 'inter_area_high', 'inter_area_low', 'inter_area_medium', 'inter_area_modified', 'inter_area_routes'], name, value)


                class SummaryExternalEventSummaries(Entity):
                    """
                    OSPF Summary\-External Prefix events summary
                    data
                    
                    .. attribute:: summary_external_event_summary
                    
                    	OSPF Summary\-External Prefix Event data
                    	**type**\: list of    :py:class:`SummaryExternalEventSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries.SummaryExternalEventSummary>`
                    
                    

                    """

                    _prefix = 'infra-rcmd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries, self).__init__()

                        self.yang_name = "summary-external-event-summaries"
                        self.yang_parent_name = "instance"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self._child_container_classes = {}
                        self._child_list_classes = {"summary-external-event-summary" : ("summary_external_event_summary", Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries.SummaryExternalEventSummary)}

                        self.summary_external_event_summary = YList(self)
                        self._segment_path = lambda: "summary-external-event-summaries"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries, [], name, value)


                    class SummaryExternalEventSummary(Entity):
                        """
                        OSPF Summary\-External Prefix Event data
                        
                        .. attribute:: event_id  <key>
                        
                        	Specific Event ID
                        	**type**\:  int
                        
                        	**range:** 1..4294967295
                        
                        .. attribute:: change_type
                        
                        	Event Add/Delete
                        	**type**\:   :py:class:`RcmdChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdChange>`
                        
                        .. attribute:: cost
                        
                        	Protocol route cost
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: ip_convergence_time
                        
                        	Convergence time for IP route programming
                        	**type**\:   :py:class:`IpConvergenceTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries.SummaryExternalEventSummary.IpConvergenceTime>`
                        
                        .. attribute:: ipfrr_event_id
                        
                        	Referenced IP\-FRR Event ID (0 \- Not Applicable)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: lsa_processed
                        
                        	List of LSAs processed
                        	**type**\: list of    :py:class:`LsaProcessed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries.SummaryExternalEventSummary.LsaProcessed>`
                        
                        .. attribute:: mpls_convergence_time
                        
                        	Convergence time for MPLS label programming
                        	**type**\:   :py:class:`MplsConvergenceTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries.SummaryExternalEventSummary.MplsConvergenceTime>`
                        
                        .. attribute:: path
                        
                        	Path information
                        	**type**\: list of    :py:class:`Path <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries.SummaryExternalEventSummary.Path>`
                        
                        .. attribute:: prefix
                        
                        	Prefix
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: prefix_lenth
                        
                        	Prefix length
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: priority
                        
                        	Event processed priority
                        	**type**\:   :py:class:`RcmdPriorityLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdPriorityLevel>`
                        
                        .. attribute:: route_path_change_type
                        
                        	Route Path Change Type
                        	**type**\:   :py:class:`RcmdShowRoutePathChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowRoutePathChange>`
                        
                        .. attribute:: route_type
                        
                        	Route Type intra/inter/l1/l2
                        	**type**\:   :py:class:`RcmdShowRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowRoute>`
                        
                        .. attribute:: spf_run_no
                        
                        	Referenced SPF Run No (0 \- Not Applicable)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: threshold_exceeded
                        
                        	Threshold exceeded
                        	**type**\:  bool
                        
                        .. attribute:: time_line
                        
                        	Timeline information
                        	**type**\: list of    :py:class:`TimeLine <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries.SummaryExternalEventSummary.TimeLine>`
                        
                        .. attribute:: trigger_lsa
                        
                        	LSA that triggered this event
                        	**type**\: list of    :py:class:`TriggerLsa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries.SummaryExternalEventSummary.TriggerLsa>`
                        
                        .. attribute:: trigger_time
                        
                        	Event trigger time
                        	**type**\:  str
                        
                        

                        """

                        _prefix = 'infra-rcmd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries.SummaryExternalEventSummary, self).__init__()

                            self.yang_name = "summary-external-event-summary"
                            self.yang_parent_name = "summary-external-event-summaries"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self._child_container_classes = {"ip-convergence-time" : ("ip_convergence_time", Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries.SummaryExternalEventSummary.IpConvergenceTime), "mpls-convergence-time" : ("mpls_convergence_time", Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries.SummaryExternalEventSummary.MplsConvergenceTime)}
                            self._child_list_classes = {"lsa-processed" : ("lsa_processed", Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries.SummaryExternalEventSummary.LsaProcessed), "path" : ("path", Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries.SummaryExternalEventSummary.Path), "time-line" : ("time_line", Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries.SummaryExternalEventSummary.TimeLine), "trigger-lsa" : ("trigger_lsa", Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries.SummaryExternalEventSummary.TriggerLsa)}

                            self.event_id = YLeaf(YType.uint32, "event-id")

                            self.change_type = YLeaf(YType.enumeration, "change-type")

                            self.cost = YLeaf(YType.uint32, "cost")

                            self.ipfrr_event_id = YLeaf(YType.uint32, "ipfrr-event-id")

                            self.prefix = YLeaf(YType.str, "prefix")

                            self.prefix_lenth = YLeaf(YType.uint32, "prefix-lenth")

                            self.priority = YLeaf(YType.enumeration, "priority")

                            self.route_path_change_type = YLeaf(YType.enumeration, "route-path-change-type")

                            self.route_type = YLeaf(YType.enumeration, "route-type")

                            self.spf_run_no = YLeaf(YType.uint32, "spf-run-no")

                            self.threshold_exceeded = YLeaf(YType.boolean, "threshold-exceeded")

                            self.trigger_time = YLeaf(YType.str, "trigger-time")

                            self.ip_convergence_time = Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries.SummaryExternalEventSummary.IpConvergenceTime()
                            self.ip_convergence_time.parent = self
                            self._children_name_map["ip_convergence_time"] = "ip-convergence-time"
                            self._children_yang_names.add("ip-convergence-time")

                            self.mpls_convergence_time = Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries.SummaryExternalEventSummary.MplsConvergenceTime()
                            self.mpls_convergence_time.parent = self
                            self._children_name_map["mpls_convergence_time"] = "mpls-convergence-time"
                            self._children_yang_names.add("mpls-convergence-time")

                            self.lsa_processed = YList(self)
                            self.path = YList(self)
                            self.time_line = YList(self)
                            self.trigger_lsa = YList(self)
                            self._segment_path = lambda: "summary-external-event-summary" + "[event-id='" + self.event_id.get() + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries.SummaryExternalEventSummary, ['event_id', 'change_type', 'cost', 'ipfrr_event_id', 'prefix', 'prefix_lenth', 'priority', 'route_path_change_type', 'route_type', 'spf_run_no', 'threshold_exceeded', 'trigger_time'], name, value)


                        class IpConvergenceTime(Entity):
                            """
                            Convergence time for IP route programming
                            
                            .. attribute:: fastest_node_name
                            
                            	Linecard node name which took the minimum time
                            	**type**\:  str
                            
                            .. attribute:: maximum_time
                            
                            	Maximum time(in seconds.milliseconds)
                            	**type**\:  str
                            
                            	**units**\: millisecond
                            
                            .. attribute:: minimum_time
                            
                            	Minimum time(in seconds.milliseconds)
                            	**type**\:  str
                            
                            	**units**\: millisecond
                            
                            .. attribute:: slowest_node_name
                            
                            	Linecard node name which took the maximum time
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries.SummaryExternalEventSummary.IpConvergenceTime, self).__init__()

                                self.yang_name = "ip-convergence-time"
                                self.yang_parent_name = "summary-external-event-summary"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {}

                                self.fastest_node_name = YLeaf(YType.str, "fastest-node-name")

                                self.maximum_time = YLeaf(YType.str, "maximum-time")

                                self.minimum_time = YLeaf(YType.str, "minimum-time")

                                self.slowest_node_name = YLeaf(YType.str, "slowest-node-name")
                                self._segment_path = lambda: "ip-convergence-time"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries.SummaryExternalEventSummary.IpConvergenceTime, ['fastest_node_name', 'maximum_time', 'minimum_time', 'slowest_node_name'], name, value)


                        class LsaProcessed(Entity):
                            """
                            List of LSAs processed
                            
                            .. attribute:: change_type
                            
                            	Add, Delete, Modify
                            	**type**\:   :py:class:`RcmdLsChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsChange>`
                            
                            .. attribute:: lsa_id
                            
                            	LSA ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: lsa_type
                            
                            	LSA type
                            	**type**\:   :py:class:`RcmdLsa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsa>`
                            
                            .. attribute:: origin_router_id
                            
                            	Originating Router ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: reception_time
                            
                            	Reception Time on router (in hh\:mm\:ss.msec)
                            	**type**\:  str
                            
                            .. attribute:: sequence_number
                            
                            	Sequence Number
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries.SummaryExternalEventSummary.LsaProcessed, self).__init__()

                                self.yang_name = "lsa-processed"
                                self.yang_parent_name = "summary-external-event-summary"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {}

                                self.change_type = YLeaf(YType.enumeration, "change-type")

                                self.lsa_id = YLeaf(YType.str, "lsa-id")

                                self.lsa_type = YLeaf(YType.enumeration, "lsa-type")

                                self.origin_router_id = YLeaf(YType.str, "origin-router-id")

                                self.reception_time = YLeaf(YType.str, "reception-time")

                                self.sequence_number = YLeaf(YType.str, "sequence-number")
                                self._segment_path = lambda: "lsa-processed"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries.SummaryExternalEventSummary.LsaProcessed, ['change_type', 'lsa_id', 'lsa_type', 'origin_router_id', 'reception_time', 'sequence_number'], name, value)


                        class MplsConvergenceTime(Entity):
                            """
                            Convergence time for MPLS label programming
                            
                            .. attribute:: fastest_node_name
                            
                            	Linecard node name which took the minimum time
                            	**type**\:  str
                            
                            .. attribute:: maximum_time
                            
                            	Maximum time(in seconds.milliseconds)
                            	**type**\:  str
                            
                            	**units**\: millisecond
                            
                            .. attribute:: minimum_time
                            
                            	Minimum time(in seconds.milliseconds)
                            	**type**\:  str
                            
                            	**units**\: millisecond
                            
                            .. attribute:: slowest_node_name
                            
                            	Linecard node name which took the maximum time
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries.SummaryExternalEventSummary.MplsConvergenceTime, self).__init__()

                                self.yang_name = "mpls-convergence-time"
                                self.yang_parent_name = "summary-external-event-summary"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {}

                                self.fastest_node_name = YLeaf(YType.str, "fastest-node-name")

                                self.maximum_time = YLeaf(YType.str, "maximum-time")

                                self.minimum_time = YLeaf(YType.str, "minimum-time")

                                self.slowest_node_name = YLeaf(YType.str, "slowest-node-name")
                                self._segment_path = lambda: "mpls-convergence-time"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries.SummaryExternalEventSummary.MplsConvergenceTime, ['fastest_node_name', 'maximum_time', 'minimum_time', 'slowest_node_name'], name, value)


                        class Path(Entity):
                            """
                            Path information
                            
                            .. attribute:: change_type
                            
                            	Event Add/Delete
                            	**type**\:   :py:class:`RcmdChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdChange>`
                            
                            .. attribute:: interface_name
                            
                            	Interface Name
                            	**type**\:  str
                            
                            .. attribute:: lfa_path
                            
                            	Backup Path Informatoin
                            	**type**\: list of    :py:class:`LfaPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries.SummaryExternalEventSummary.Path.LfaPath>`
                            
                            .. attribute:: neighbour_address
                            
                            	Nexthop Address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: path_metric
                            
                            	Path Metric
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries.SummaryExternalEventSummary.Path, self).__init__()

                                self.yang_name = "path"
                                self.yang_parent_name = "summary-external-event-summary"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {"lfa-path" : ("lfa_path", Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries.SummaryExternalEventSummary.Path.LfaPath)}

                                self.change_type = YLeaf(YType.enumeration, "change-type")

                                self.interface_name = YLeaf(YType.str, "interface-name")

                                self.neighbour_address = YLeaf(YType.str, "neighbour-address")

                                self.path_metric = YLeaf(YType.uint32, "path-metric")

                                self.lfa_path = YList(self)
                                self._segment_path = lambda: "path"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries.SummaryExternalEventSummary.Path, ['change_type', 'interface_name', 'neighbour_address', 'path_metric'], name, value)


                            class LfaPath(Entity):
                                """
                                Backup Path Informatoin
                                
                                .. attribute:: change_type
                                
                                	Event Add/Delete
                                	**type**\:   :py:class:`RcmdChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdChange>`
                                
                                .. attribute:: interface_name
                                
                                	Interface Name
                                	**type**\:  str
                                
                                .. attribute:: lfa_type
                                
                                	Type of LFA
                                	**type**\:   :py:class:`RcmdShowIpfrrLfa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowIpfrrLfa>`
                                
                                .. attribute:: neighbour_address
                                
                                	Nexthop Address
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: path_metric
                                
                                	Path Metric
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: remote_node_id
                                
                                	Remote Node ID, in case of Remote LFA
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries.SummaryExternalEventSummary.Path.LfaPath, self).__init__()

                                    self.yang_name = "lfa-path"
                                    self.yang_parent_name = "path"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {}
                                    self._child_list_classes = {}

                                    self.change_type = YLeaf(YType.enumeration, "change-type")

                                    self.interface_name = YLeaf(YType.str, "interface-name")

                                    self.lfa_type = YLeaf(YType.enumeration, "lfa-type")

                                    self.neighbour_address = YLeaf(YType.str, "neighbour-address")

                                    self.path_metric = YLeaf(YType.uint32, "path-metric")

                                    self.remote_node_id = YLeaf(YType.str, "remote-node-id")
                                    self._segment_path = lambda: "lfa-path"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries.SummaryExternalEventSummary.Path.LfaPath, ['change_type', 'interface_name', 'lfa_type', 'neighbour_address', 'path_metric', 'remote_node_id'], name, value)


                        class TimeLine(Entity):
                            """
                            Timeline information
                            
                            .. attribute:: lc_ip
                            
                            	List of Linecards' completion point for IP routes
                            	**type**\: list of    :py:class:`LcIp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries.SummaryExternalEventSummary.TimeLine.LcIp>`
                            
                            .. attribute:: lc_mpls
                            
                            	List of Linecards' completion point for MPLS labels
                            	**type**\: list of    :py:class:`LcMpls <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries.SummaryExternalEventSummary.TimeLine.LcMpls>`
                            
                            .. attribute:: ldp_enter
                            
                            	Entry point of LDP
                            	**type**\:  str
                            
                            .. attribute:: ldp_exit
                            
                            	Exit point of LDP to LSD
                            	**type**\:  str
                            
                            .. attribute:: lsd_enter
                            
                            	Entry point of LSD
                            	**type**\:  str
                            
                            .. attribute:: lsd_exit
                            
                            	Exit point of LSD to FIBs
                            	**type**\:  str
                            
                            .. attribute:: ri_bv4_enter
                            
                            	Entry point of IPv4 RIB
                            	**type**\:  str
                            
                            .. attribute:: ri_bv4_exit
                            
                            	Exit point from IPv4 RIB to FIBs
                            	**type**\:  str
                            
                            .. attribute:: ri_bv4_redistribute
                            
                            	Route Redistribute point from IPv4 RIB to LDP
                            	**type**\:  str
                            
                            .. attribute:: route_origin
                            
                            	Route origin (routing protocol)
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries.SummaryExternalEventSummary.TimeLine, self).__init__()

                                self.yang_name = "time-line"
                                self.yang_parent_name = "summary-external-event-summary"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {"lc-ip" : ("lc_ip", Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries.SummaryExternalEventSummary.TimeLine.LcIp), "lc-mpls" : ("lc_mpls", Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries.SummaryExternalEventSummary.TimeLine.LcMpls)}

                                self.ldp_enter = YLeaf(YType.str, "ldp-enter")

                                self.ldp_exit = YLeaf(YType.str, "ldp-exit")

                                self.lsd_enter = YLeaf(YType.str, "lsd-enter")

                                self.lsd_exit = YLeaf(YType.str, "lsd-exit")

                                self.ri_bv4_enter = YLeaf(YType.str, "ri-bv4-enter")

                                self.ri_bv4_exit = YLeaf(YType.str, "ri-bv4-exit")

                                self.ri_bv4_redistribute = YLeaf(YType.str, "ri-bv4-redistribute")

                                self.route_origin = YLeaf(YType.str, "route-origin")

                                self.lc_ip = YList(self)
                                self.lc_mpls = YList(self)
                                self._segment_path = lambda: "time-line"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries.SummaryExternalEventSummary.TimeLine, ['ldp_enter', 'ldp_exit', 'lsd_enter', 'lsd_exit', 'ri_bv4_enter', 'ri_bv4_exit', 'ri_bv4_redistribute', 'route_origin'], name, value)


                            class LcIp(Entity):
                                """
                                List of Linecards' completion point for IP
                                routes
                                
                                .. attribute:: fib_complete
                                
                                	Completion point of FIB
                                	**type**\:  str
                                
                                .. attribute:: node_name
                                
                                	Linecard node name
                                	**type**\:  str
                                
                                .. attribute:: speed
                                
                                	Relative convergence speed
                                	**type**\:   :py:class:`RcmdLinecardSpeed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLinecardSpeed>`
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries.SummaryExternalEventSummary.TimeLine.LcIp, self).__init__()

                                    self.yang_name = "lc-ip"
                                    self.yang_parent_name = "time-line"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {}
                                    self._child_list_classes = {}

                                    self.fib_complete = YLeaf(YType.str, "fib-complete")

                                    self.node_name = YLeaf(YType.str, "node-name")

                                    self.speed = YLeaf(YType.enumeration, "speed")
                                    self._segment_path = lambda: "lc-ip"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries.SummaryExternalEventSummary.TimeLine.LcIp, ['fib_complete', 'node_name', 'speed'], name, value)


                            class LcMpls(Entity):
                                """
                                List of Linecards' completion point for MPLS
                                labels
                                
                                .. attribute:: fib_complete
                                
                                	Completion point of FIB
                                	**type**\:  str
                                
                                .. attribute:: node_name
                                
                                	Linecard node name
                                	**type**\:  str
                                
                                .. attribute:: speed
                                
                                	Relative convergence speed
                                	**type**\:   :py:class:`RcmdLinecardSpeed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLinecardSpeed>`
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries.SummaryExternalEventSummary.TimeLine.LcMpls, self).__init__()

                                    self.yang_name = "lc-mpls"
                                    self.yang_parent_name = "time-line"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {}
                                    self._child_list_classes = {}

                                    self.fib_complete = YLeaf(YType.str, "fib-complete")

                                    self.node_name = YLeaf(YType.str, "node-name")

                                    self.speed = YLeaf(YType.enumeration, "speed")
                                    self._segment_path = lambda: "lc-mpls"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries.SummaryExternalEventSummary.TimeLine.LcMpls, ['fib_complete', 'node_name', 'speed'], name, value)


                        class TriggerLsa(Entity):
                            """
                            LSA that triggered this event
                            
                            .. attribute:: change_type
                            
                            	Add, Delete, Modify
                            	**type**\:   :py:class:`RcmdLsChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsChange>`
                            
                            .. attribute:: lsa_id
                            
                            	LSA ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: lsa_type
                            
                            	LSA type
                            	**type**\:   :py:class:`RcmdLsa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsa>`
                            
                            .. attribute:: origin_router_id
                            
                            	Originating Router ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: reception_time
                            
                            	Reception Time on router (in hh\:mm\:ss.msec)
                            	**type**\:  str
                            
                            .. attribute:: sequence_number
                            
                            	Sequence Number
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries.SummaryExternalEventSummary.TriggerLsa, self).__init__()

                                self.yang_name = "trigger-lsa"
                                self.yang_parent_name = "summary-external-event-summary"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {}

                                self.change_type = YLeaf(YType.enumeration, "change-type")

                                self.lsa_id = YLeaf(YType.str, "lsa-id")

                                self.lsa_type = YLeaf(YType.enumeration, "lsa-type")

                                self.origin_router_id = YLeaf(YType.str, "origin-router-id")

                                self.reception_time = YLeaf(YType.str, "reception-time")

                                self.sequence_number = YLeaf(YType.str, "sequence-number")
                                self._segment_path = lambda: "trigger-lsa"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries.SummaryExternalEventSummary.TriggerLsa, ['change_type', 'lsa_id', 'lsa_type', 'origin_router_id', 'reception_time', 'sequence_number'], name, value)


    class Process(Entity):
        """
        Process information
        
        .. attribute:: isis
        
        	ISIS Process Information
        	**type**\:   :py:class:`Isis <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Process.Isis>`
        
        .. attribute:: ldp
        
        	LDP Process Information
        	**type**\:   :py:class:`Ldp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Process.Ldp>`
        
        .. attribute:: ospf
        
        	OSPF Process Information
        	**type**\:   :py:class:`Ospf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Process.Ospf>`
        
        

        """

        _prefix = 'infra-rcmd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Rcmd.Process, self).__init__()

            self.yang_name = "process"
            self.yang_parent_name = "rcmd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self._child_container_classes = {"isis" : ("isis", Rcmd.Process.Isis), "ldp" : ("ldp", Rcmd.Process.Ldp), "ospf" : ("ospf", Rcmd.Process.Ospf)}
            self._child_list_classes = {}

            self.isis = Rcmd.Process.Isis()
            self.isis.parent = self
            self._children_name_map["isis"] = "isis"
            self._children_yang_names.add("isis")

            self.ldp = Rcmd.Process.Ldp()
            self.ldp.parent = self
            self._children_name_map["ldp"] = "ldp"
            self._children_yang_names.add("ldp")

            self.ospf = Rcmd.Process.Ospf()
            self.ospf.parent = self
            self._children_name_map["ospf"] = "ospf"
            self._children_yang_names.add("ospf")
            self._segment_path = lambda: "process"
            self._absolute_path = lambda: "Cisco-IOS-XR-infra-rcmd-oper:rcmd/%s" % self._segment_path()


        class Isis(Entity):
            """
            ISIS Process Information
            
            .. attribute:: process
            
            	Process Information
            	**type**\: list of    :py:class:`Process <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Process.Isis.Process>`
            
            

            """

            _prefix = 'infra-rcmd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Rcmd.Process.Isis, self).__init__()

                self.yang_name = "isis"
                self.yang_parent_name = "process"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self._child_container_classes = {}
                self._child_list_classes = {"process" : ("process", Rcmd.Process.Isis.Process)}

                self.process = YList(self)
                self._segment_path = lambda: "isis"
                self._absolute_path = lambda: "Cisco-IOS-XR-infra-rcmd-oper:rcmd/process/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Rcmd.Process.Isis, [], name, value)


            class Process(Entity):
                """
                Process Information
                
                .. attribute:: instance_name
                
                	Instance/VRF Name
                	**type**\: list of    :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Process.Isis.Process.InstanceName>`
                
                .. attribute:: process_name
                
                	Process Name
                	**type**\:  str
                
                .. attribute:: protocol_id
                
                	Protocol id
                	**type**\:   :py:class:`RcmdProtocolId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdProtocolId>`
                
                

                """

                _prefix = 'infra-rcmd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Rcmd.Process.Isis.Process, self).__init__()

                    self.yang_name = "process"
                    self.yang_parent_name = "isis"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self._child_container_classes = {}
                    self._child_list_classes = {"instance-name" : ("instance_name", Rcmd.Process.Isis.Process.InstanceName)}

                    self.process_name = YLeaf(YType.str, "process-name")

                    self.protocol_id = YLeaf(YType.enumeration, "protocol-id")

                    self.instance_name = YList(self)
                    self._segment_path = lambda: "process"
                    self._absolute_path = lambda: "Cisco-IOS-XR-infra-rcmd-oper:rcmd/process/isis/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rcmd.Process.Isis.Process, ['process_name', 'protocol_id'], name, value)


                class InstanceName(Entity):
                    """
                    Instance/VRF Name
                    
                    .. attribute:: arch_lsp_regeneration
                    
                    	Archive Lsp regen
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: arch_spf_event
                    
                    	Archive SPF event
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: instance
                    
                    	Instance Information
                    	**type**\: list of    :py:class:`Instance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Process.Isis.Process.InstanceName.Instance>`
                    
                    .. attribute:: last_update_time
                    
                    	Last Updated Time
                    	**type**\:  str
                    
                    .. attribute:: lsp_regeneration_count
                    
                    	LSP Regen Count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: lsp_regeneration_serial
                    
                    	Last Serial
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: name
                    
                    	Instance Name
                    	**type**\:  str
                    
                    .. attribute:: no_route_change_spf_nos
                    
                    	No Route change spf nos
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: not_interested_spf_nos
                    
                    	Not Interested SPF nos
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: route_change_spf_nos
                    
                    	Route change spf nos
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: total_spf_nos
                    
                    	Total spf nos
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'infra-rcmd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Rcmd.Process.Isis.Process.InstanceName, self).__init__()

                        self.yang_name = "instance-name"
                        self.yang_parent_name = "process"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self._child_container_classes = {}
                        self._child_list_classes = {"instance" : ("instance", Rcmd.Process.Isis.Process.InstanceName.Instance)}

                        self.arch_lsp_regeneration = YLeaf(YType.uint32, "arch-lsp-regeneration")

                        self.arch_spf_event = YLeaf(YType.uint32, "arch-spf-event")

                        self.last_update_time = YLeaf(YType.str, "last-update-time")

                        self.lsp_regeneration_count = YLeaf(YType.uint32, "lsp-regeneration-count")

                        self.lsp_regeneration_serial = YLeaf(YType.uint32, "lsp-regeneration-serial")

                        self.name = YLeaf(YType.str, "name")

                        self.no_route_change_spf_nos = YLeaf(YType.uint32, "no-route-change-spf-nos")

                        self.not_interested_spf_nos = YLeaf(YType.uint32, "not-interested-spf-nos")

                        self.route_change_spf_nos = YLeaf(YType.uint32, "route-change-spf-nos")

                        self.total_spf_nos = YLeaf(YType.uint32, "total-spf-nos")

                        self.instance = YList(self)
                        self._segment_path = lambda: "instance-name"
                        self._absolute_path = lambda: "Cisco-IOS-XR-infra-rcmd-oper:rcmd/process/isis/process/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rcmd.Process.Isis.Process.InstanceName, ['arch_lsp_regeneration', 'arch_spf_event', 'last_update_time', 'lsp_regeneration_count', 'lsp_regeneration_serial', 'name', 'no_route_change_spf_nos', 'not_interested_spf_nos', 'route_change_spf_nos', 'total_spf_nos'], name, value)


                    class Instance(Entity):
                        """
                        Instance Information
                        
                        .. attribute:: arch_spf_run
                        
                        	spf run can be archived
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: fwd_referenced
                        
                        	Forward Referenced
                        	**type**\:   :py:class:`RcmdBoolYesNo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdBoolYesNo>`
                        
                        .. attribute:: instance_deleted
                        
                        	Instance Deleted
                        	**type**\:   :py:class:`RcmdBoolYesNo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdBoolYesNo>`
                        
                        .. attribute:: instance_id
                        
                        	Instance Id
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: instance_state
                        
                        	Instance State
                        	**type**\:   :py:class:`RcmdShowInstState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowInstState>`
                        
                        .. attribute:: last_update_time
                        
                        	Last Updated Time
                        	**type**\:  str
                        
                        .. attribute:: no_route_change_spf_nos
                        
                        	No Route change spf nos
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: node_id
                        
                        	Node Id
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: not_interested_spf_nos
                        
                        	Not Interested SPF nos
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: route_change_spf_nos
                        
                        	Route change spf nos
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: spf_offset
                        
                        	SPF Offset
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: total_spf_nos
                        
                        	Total spf nos
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: total_spt_nos
                        
                        	Total spt nos
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'infra-rcmd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Rcmd.Process.Isis.Process.InstanceName.Instance, self).__init__()

                            self.yang_name = "instance"
                            self.yang_parent_name = "instance-name"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self._child_container_classes = {}
                            self._child_list_classes = {}

                            self.arch_spf_run = YLeaf(YType.uint32, "arch-spf-run")

                            self.fwd_referenced = YLeaf(YType.enumeration, "fwd-referenced")

                            self.instance_deleted = YLeaf(YType.enumeration, "instance-deleted")

                            self.instance_id = YLeaf(YType.uint32, "instance-id")

                            self.instance_state = YLeaf(YType.enumeration, "instance-state")

                            self.last_update_time = YLeaf(YType.str, "last-update-time")

                            self.no_route_change_spf_nos = YLeaf(YType.uint32, "no-route-change-spf-nos")

                            self.node_id = YLeaf(YType.uint32, "node-id")

                            self.not_interested_spf_nos = YLeaf(YType.uint32, "not-interested-spf-nos")

                            self.route_change_spf_nos = YLeaf(YType.uint32, "route-change-spf-nos")

                            self.spf_offset = YLeaf(YType.uint32, "spf-offset")

                            self.total_spf_nos = YLeaf(YType.uint32, "total-spf-nos")

                            self.total_spt_nos = YLeaf(YType.uint32, "total-spt-nos")
                            self._segment_path = lambda: "instance"
                            self._absolute_path = lambda: "Cisco-IOS-XR-infra-rcmd-oper:rcmd/process/isis/process/instance-name/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rcmd.Process.Isis.Process.InstanceName.Instance, ['arch_spf_run', 'fwd_referenced', 'instance_deleted', 'instance_id', 'instance_state', 'last_update_time', 'no_route_change_spf_nos', 'node_id', 'not_interested_spf_nos', 'route_change_spf_nos', 'spf_offset', 'total_spf_nos', 'total_spt_nos'], name, value)


        class Ldp(Entity):
            """
            LDP Process Information
            
            .. attribute:: process
            
            	Process Information
            	**type**\: list of    :py:class:`Process <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Process.Ldp.Process>`
            
            

            """

            _prefix = 'infra-rcmd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Rcmd.Process.Ldp, self).__init__()

                self.yang_name = "ldp"
                self.yang_parent_name = "process"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self._child_container_classes = {}
                self._child_list_classes = {"process" : ("process", Rcmd.Process.Ldp.Process)}

                self.process = YList(self)
                self._segment_path = lambda: "ldp"
                self._absolute_path = lambda: "Cisco-IOS-XR-infra-rcmd-oper:rcmd/process/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Rcmd.Process.Ldp, [], name, value)


            class Process(Entity):
                """
                Process Information
                
                .. attribute:: instance_name
                
                	Instance/VRF Name
                	**type**\: list of    :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Process.Ldp.Process.InstanceName>`
                
                .. attribute:: process_name
                
                	Process Name
                	**type**\:  str
                
                .. attribute:: protocol_id
                
                	Protocol id
                	**type**\:   :py:class:`RcmdProtocolId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdProtocolId>`
                
                

                """

                _prefix = 'infra-rcmd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Rcmd.Process.Ldp.Process, self).__init__()

                    self.yang_name = "process"
                    self.yang_parent_name = "ldp"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self._child_container_classes = {}
                    self._child_list_classes = {"instance-name" : ("instance_name", Rcmd.Process.Ldp.Process.InstanceName)}

                    self.process_name = YLeaf(YType.str, "process-name")

                    self.protocol_id = YLeaf(YType.enumeration, "protocol-id")

                    self.instance_name = YList(self)
                    self._segment_path = lambda: "process"
                    self._absolute_path = lambda: "Cisco-IOS-XR-infra-rcmd-oper:rcmd/process/ldp/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rcmd.Process.Ldp.Process, ['process_name', 'protocol_id'], name, value)


                class InstanceName(Entity):
                    """
                    Instance/VRF Name
                    
                    .. attribute:: arch_lsp_regeneration
                    
                    	Archive Lsp regen
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: arch_spf_event
                    
                    	Archive SPF event
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: instance
                    
                    	Instance Information
                    	**type**\: list of    :py:class:`Instance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Process.Ldp.Process.InstanceName.Instance>`
                    
                    .. attribute:: last_update_time
                    
                    	Last Updated Time
                    	**type**\:  str
                    
                    .. attribute:: lsp_regeneration_count
                    
                    	LSP Regen Count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: lsp_regeneration_serial
                    
                    	Last Serial
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: name
                    
                    	Instance Name
                    	**type**\:  str
                    
                    .. attribute:: no_route_change_spf_nos
                    
                    	No Route change spf nos
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: not_interested_spf_nos
                    
                    	Not Interested SPF nos
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: route_change_spf_nos
                    
                    	Route change spf nos
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: total_spf_nos
                    
                    	Total spf nos
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'infra-rcmd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Rcmd.Process.Ldp.Process.InstanceName, self).__init__()

                        self.yang_name = "instance-name"
                        self.yang_parent_name = "process"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self._child_container_classes = {}
                        self._child_list_classes = {"instance" : ("instance", Rcmd.Process.Ldp.Process.InstanceName.Instance)}

                        self.arch_lsp_regeneration = YLeaf(YType.uint32, "arch-lsp-regeneration")

                        self.arch_spf_event = YLeaf(YType.uint32, "arch-spf-event")

                        self.last_update_time = YLeaf(YType.str, "last-update-time")

                        self.lsp_regeneration_count = YLeaf(YType.uint32, "lsp-regeneration-count")

                        self.lsp_regeneration_serial = YLeaf(YType.uint32, "lsp-regeneration-serial")

                        self.name = YLeaf(YType.str, "name")

                        self.no_route_change_spf_nos = YLeaf(YType.uint32, "no-route-change-spf-nos")

                        self.not_interested_spf_nos = YLeaf(YType.uint32, "not-interested-spf-nos")

                        self.route_change_spf_nos = YLeaf(YType.uint32, "route-change-spf-nos")

                        self.total_spf_nos = YLeaf(YType.uint32, "total-spf-nos")

                        self.instance = YList(self)
                        self._segment_path = lambda: "instance-name"
                        self._absolute_path = lambda: "Cisco-IOS-XR-infra-rcmd-oper:rcmd/process/ldp/process/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rcmd.Process.Ldp.Process.InstanceName, ['arch_lsp_regeneration', 'arch_spf_event', 'last_update_time', 'lsp_regeneration_count', 'lsp_regeneration_serial', 'name', 'no_route_change_spf_nos', 'not_interested_spf_nos', 'route_change_spf_nos', 'total_spf_nos'], name, value)


                    class Instance(Entity):
                        """
                        Instance Information
                        
                        .. attribute:: arch_spf_run
                        
                        	spf run can be archived
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: fwd_referenced
                        
                        	Forward Referenced
                        	**type**\:   :py:class:`RcmdBoolYesNo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdBoolYesNo>`
                        
                        .. attribute:: instance_deleted
                        
                        	Instance Deleted
                        	**type**\:   :py:class:`RcmdBoolYesNo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdBoolYesNo>`
                        
                        .. attribute:: instance_id
                        
                        	Instance Id
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: instance_state
                        
                        	Instance State
                        	**type**\:   :py:class:`RcmdShowInstState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowInstState>`
                        
                        .. attribute:: last_update_time
                        
                        	Last Updated Time
                        	**type**\:  str
                        
                        .. attribute:: no_route_change_spf_nos
                        
                        	No Route change spf nos
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: node_id
                        
                        	Node Id
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: not_interested_spf_nos
                        
                        	Not Interested SPF nos
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: route_change_spf_nos
                        
                        	Route change spf nos
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: spf_offset
                        
                        	SPF Offset
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: total_spf_nos
                        
                        	Total spf nos
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: total_spt_nos
                        
                        	Total spt nos
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'infra-rcmd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Rcmd.Process.Ldp.Process.InstanceName.Instance, self).__init__()

                            self.yang_name = "instance"
                            self.yang_parent_name = "instance-name"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self._child_container_classes = {}
                            self._child_list_classes = {}

                            self.arch_spf_run = YLeaf(YType.uint32, "arch-spf-run")

                            self.fwd_referenced = YLeaf(YType.enumeration, "fwd-referenced")

                            self.instance_deleted = YLeaf(YType.enumeration, "instance-deleted")

                            self.instance_id = YLeaf(YType.uint32, "instance-id")

                            self.instance_state = YLeaf(YType.enumeration, "instance-state")

                            self.last_update_time = YLeaf(YType.str, "last-update-time")

                            self.no_route_change_spf_nos = YLeaf(YType.uint32, "no-route-change-spf-nos")

                            self.node_id = YLeaf(YType.uint32, "node-id")

                            self.not_interested_spf_nos = YLeaf(YType.uint32, "not-interested-spf-nos")

                            self.route_change_spf_nos = YLeaf(YType.uint32, "route-change-spf-nos")

                            self.spf_offset = YLeaf(YType.uint32, "spf-offset")

                            self.total_spf_nos = YLeaf(YType.uint32, "total-spf-nos")

                            self.total_spt_nos = YLeaf(YType.uint32, "total-spt-nos")
                            self._segment_path = lambda: "instance"
                            self._absolute_path = lambda: "Cisco-IOS-XR-infra-rcmd-oper:rcmd/process/ldp/process/instance-name/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rcmd.Process.Ldp.Process.InstanceName.Instance, ['arch_spf_run', 'fwd_referenced', 'instance_deleted', 'instance_id', 'instance_state', 'last_update_time', 'no_route_change_spf_nos', 'node_id', 'not_interested_spf_nos', 'route_change_spf_nos', 'spf_offset', 'total_spf_nos', 'total_spt_nos'], name, value)


        class Ospf(Entity):
            """
            OSPF Process Information
            
            .. attribute:: process
            
            	Process Information
            	**type**\: list of    :py:class:`Process <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Process.Ospf.Process>`
            
            

            """

            _prefix = 'infra-rcmd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Rcmd.Process.Ospf, self).__init__()

                self.yang_name = "ospf"
                self.yang_parent_name = "process"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self._child_container_classes = {}
                self._child_list_classes = {"process" : ("process", Rcmd.Process.Ospf.Process)}

                self.process = YList(self)
                self._segment_path = lambda: "ospf"
                self._absolute_path = lambda: "Cisco-IOS-XR-infra-rcmd-oper:rcmd/process/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Rcmd.Process.Ospf, [], name, value)


            class Process(Entity):
                """
                Process Information
                
                .. attribute:: instance_name
                
                	Instance/VRF Name
                	**type**\: list of    :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Process.Ospf.Process.InstanceName>`
                
                .. attribute:: process_name
                
                	Process Name
                	**type**\:  str
                
                .. attribute:: protocol_id
                
                	Protocol id
                	**type**\:   :py:class:`RcmdProtocolId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdProtocolId>`
                
                

                """

                _prefix = 'infra-rcmd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Rcmd.Process.Ospf.Process, self).__init__()

                    self.yang_name = "process"
                    self.yang_parent_name = "ospf"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self._child_container_classes = {}
                    self._child_list_classes = {"instance-name" : ("instance_name", Rcmd.Process.Ospf.Process.InstanceName)}

                    self.process_name = YLeaf(YType.str, "process-name")

                    self.protocol_id = YLeaf(YType.enumeration, "protocol-id")

                    self.instance_name = YList(self)
                    self._segment_path = lambda: "process"
                    self._absolute_path = lambda: "Cisco-IOS-XR-infra-rcmd-oper:rcmd/process/ospf/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rcmd.Process.Ospf.Process, ['process_name', 'protocol_id'], name, value)


                class InstanceName(Entity):
                    """
                    Instance/VRF Name
                    
                    .. attribute:: arch_lsp_regeneration
                    
                    	Archive Lsp regen
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: arch_spf_event
                    
                    	Archive SPF event
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: instance
                    
                    	Instance Information
                    	**type**\: list of    :py:class:`Instance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Process.Ospf.Process.InstanceName.Instance>`
                    
                    .. attribute:: last_update_time
                    
                    	Last Updated Time
                    	**type**\:  str
                    
                    .. attribute:: lsp_regeneration_count
                    
                    	LSP Regen Count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: lsp_regeneration_serial
                    
                    	Last Serial
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: name
                    
                    	Instance Name
                    	**type**\:  str
                    
                    .. attribute:: no_route_change_spf_nos
                    
                    	No Route change spf nos
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: not_interested_spf_nos
                    
                    	Not Interested SPF nos
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: route_change_spf_nos
                    
                    	Route change spf nos
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: total_spf_nos
                    
                    	Total spf nos
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'infra-rcmd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Rcmd.Process.Ospf.Process.InstanceName, self).__init__()

                        self.yang_name = "instance-name"
                        self.yang_parent_name = "process"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self._child_container_classes = {}
                        self._child_list_classes = {"instance" : ("instance", Rcmd.Process.Ospf.Process.InstanceName.Instance)}

                        self.arch_lsp_regeneration = YLeaf(YType.uint32, "arch-lsp-regeneration")

                        self.arch_spf_event = YLeaf(YType.uint32, "arch-spf-event")

                        self.last_update_time = YLeaf(YType.str, "last-update-time")

                        self.lsp_regeneration_count = YLeaf(YType.uint32, "lsp-regeneration-count")

                        self.lsp_regeneration_serial = YLeaf(YType.uint32, "lsp-regeneration-serial")

                        self.name = YLeaf(YType.str, "name")

                        self.no_route_change_spf_nos = YLeaf(YType.uint32, "no-route-change-spf-nos")

                        self.not_interested_spf_nos = YLeaf(YType.uint32, "not-interested-spf-nos")

                        self.route_change_spf_nos = YLeaf(YType.uint32, "route-change-spf-nos")

                        self.total_spf_nos = YLeaf(YType.uint32, "total-spf-nos")

                        self.instance = YList(self)
                        self._segment_path = lambda: "instance-name"
                        self._absolute_path = lambda: "Cisco-IOS-XR-infra-rcmd-oper:rcmd/process/ospf/process/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rcmd.Process.Ospf.Process.InstanceName, ['arch_lsp_regeneration', 'arch_spf_event', 'last_update_time', 'lsp_regeneration_count', 'lsp_regeneration_serial', 'name', 'no_route_change_spf_nos', 'not_interested_spf_nos', 'route_change_spf_nos', 'total_spf_nos'], name, value)


                    class Instance(Entity):
                        """
                        Instance Information
                        
                        .. attribute:: arch_spf_run
                        
                        	spf run can be archived
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: fwd_referenced
                        
                        	Forward Referenced
                        	**type**\:   :py:class:`RcmdBoolYesNo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdBoolYesNo>`
                        
                        .. attribute:: instance_deleted
                        
                        	Instance Deleted
                        	**type**\:   :py:class:`RcmdBoolYesNo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdBoolYesNo>`
                        
                        .. attribute:: instance_id
                        
                        	Instance Id
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: instance_state
                        
                        	Instance State
                        	**type**\:   :py:class:`RcmdShowInstState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowInstState>`
                        
                        .. attribute:: last_update_time
                        
                        	Last Updated Time
                        	**type**\:  str
                        
                        .. attribute:: no_route_change_spf_nos
                        
                        	No Route change spf nos
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: node_id
                        
                        	Node Id
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: not_interested_spf_nos
                        
                        	Not Interested SPF nos
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: route_change_spf_nos
                        
                        	Route change spf nos
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: spf_offset
                        
                        	SPF Offset
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: total_spf_nos
                        
                        	Total spf nos
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: total_spt_nos
                        
                        	Total spt nos
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'infra-rcmd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Rcmd.Process.Ospf.Process.InstanceName.Instance, self).__init__()

                            self.yang_name = "instance"
                            self.yang_parent_name = "instance-name"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self._child_container_classes = {}
                            self._child_list_classes = {}

                            self.arch_spf_run = YLeaf(YType.uint32, "arch-spf-run")

                            self.fwd_referenced = YLeaf(YType.enumeration, "fwd-referenced")

                            self.instance_deleted = YLeaf(YType.enumeration, "instance-deleted")

                            self.instance_id = YLeaf(YType.uint32, "instance-id")

                            self.instance_state = YLeaf(YType.enumeration, "instance-state")

                            self.last_update_time = YLeaf(YType.str, "last-update-time")

                            self.no_route_change_spf_nos = YLeaf(YType.uint32, "no-route-change-spf-nos")

                            self.node_id = YLeaf(YType.uint32, "node-id")

                            self.not_interested_spf_nos = YLeaf(YType.uint32, "not-interested-spf-nos")

                            self.route_change_spf_nos = YLeaf(YType.uint32, "route-change-spf-nos")

                            self.spf_offset = YLeaf(YType.uint32, "spf-offset")

                            self.total_spf_nos = YLeaf(YType.uint32, "total-spf-nos")

                            self.total_spt_nos = YLeaf(YType.uint32, "total-spt-nos")
                            self._segment_path = lambda: "instance"
                            self._absolute_path = lambda: "Cisco-IOS-XR-infra-rcmd-oper:rcmd/process/ospf/process/instance-name/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rcmd.Process.Ospf.Process.InstanceName.Instance, ['arch_spf_run', 'fwd_referenced', 'instance_deleted', 'instance_id', 'instance_state', 'last_update_time', 'no_route_change_spf_nos', 'node_id', 'not_interested_spf_nos', 'route_change_spf_nos', 'spf_offset', 'total_spf_nos', 'total_spt_nos'], name, value)


    class Server(Entity):
        """
        Server Info
        
        .. attribute:: detail
        
        	Server Info
        	**type**\:   :py:class:`Detail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Server.Detail>`
        
        .. attribute:: normal
        
        	Server Info
        	**type**\:   :py:class:`Normal <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Server.Normal>`
        
        

        """

        _prefix = 'infra-rcmd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Rcmd.Server, self).__init__()

            self.yang_name = "server"
            self.yang_parent_name = "rcmd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self._child_container_classes = {"detail" : ("detail", Rcmd.Server.Detail), "normal" : ("normal", Rcmd.Server.Normal)}
            self._child_list_classes = {}

            self.detail = Rcmd.Server.Detail()
            self.detail.parent = self
            self._children_name_map["detail"] = "detail"
            self._children_yang_names.add("detail")

            self.normal = Rcmd.Server.Normal()
            self.normal.parent = self
            self._children_name_map["normal"] = "normal"
            self._children_yang_names.add("normal")
            self._segment_path = lambda: "server"
            self._absolute_path = lambda: "Cisco-IOS-XR-infra-rcmd-oper:rcmd/%s" % self._segment_path()


        class Detail(Entity):
            """
            Server Info
            
            .. attribute:: archive_count
            
            	Archive Count
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: diag_node_count
            
            	Diag Node count
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: diagnostics_archive_node
            
            	Diagnostics Archival Node (Applicable for local location)
            	**type**\:  str
            
            .. attribute:: diagnostics_archive_path
            
            	Diagnostics Archival Path
            	**type**\:  str
            
            .. attribute:: disabled_node_count
            
            	Disabled Node count
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: event_buffer_size
            
            	Event Buffer Size
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: host_name
            
            	Configured Hostname
            	**type**\:  str
            
            .. attribute:: in_active_node_count
            
            	Disabled Node count
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: interface_count
            
            	Interface events count
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: last_archival_error
            
            	Last Archival Error
            	**type**\:  str
            
            .. attribute:: last_archival_error_time
            
            	Last Archival Status
            	**type**\:  str
            
            .. attribute:: last_archival_status
            
            	Last Archival Status
            	**type**\:  str
            
            .. attribute:: last_process_duration
            
            	Last Processing Duration
            	**type**\:  str
            
            .. attribute:: last_process_start_time
            
            	Last Processing Start Time
            	**type**\:  str
            
            .. attribute:: last_process_state
            
            	Process state
            	**type**\:   :py:class:`RcmdShowPrcsState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowPrcsState>`
            
            .. attribute:: max_events
            
            	Maximum Events
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: max_interface_count
            
            	Max Interface events count
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: monitoring_interval
            
            	Configured Monitor Interval
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: next_interval
            
            	Time for next processing
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: node_lc_count
            
            	LC count
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: node_rp_count
            
            	RP count
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: process_count
            
            	Post Processing count
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: protocol_config
            
            	Protocol level configuration
            	**type**\: list of    :py:class:`ProtocolConfig <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Server.Detail.ProtocolConfig>`
            
            .. attribute:: reports_archive_node
            
            	Reports Archival Node (Applicable for local location)
            	**type**\:  str
            
            .. attribute:: reports_archive_path
            
            	Reports Archival Path
            	**type**\:  str
            
            .. attribute:: server_detail
            
            	Detailed Information
            	**type**\: list of    :py:class:`ServerDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Server.Detail.ServerDetail>`
            
            .. attribute:: spf_process_count
            
            	SPF Processing count
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: status
            
            	Server Status
            	**type**\:   :py:class:`RcmdBagEnableDisable <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdBagEnableDisable>`
            
            

            """

            _prefix = 'infra-rcmd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Rcmd.Server.Detail, self).__init__()

                self.yang_name = "detail"
                self.yang_parent_name = "server"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self._child_container_classes = {}
                self._child_list_classes = {"protocol-config" : ("protocol_config", Rcmd.Server.Detail.ProtocolConfig), "server-detail" : ("server_detail", Rcmd.Server.Detail.ServerDetail)}

                self.archive_count = YLeaf(YType.uint32, "archive-count")

                self.diag_node_count = YLeaf(YType.uint32, "diag-node-count")

                self.diagnostics_archive_node = YLeaf(YType.str, "diagnostics-archive-node")

                self.diagnostics_archive_path = YLeaf(YType.str, "diagnostics-archive-path")

                self.disabled_node_count = YLeaf(YType.uint32, "disabled-node-count")

                self.event_buffer_size = YLeaf(YType.uint32, "event-buffer-size")

                self.host_name = YLeaf(YType.str, "host-name")

                self.in_active_node_count = YLeaf(YType.uint32, "in-active-node-count")

                self.interface_count = YLeaf(YType.uint32, "interface-count")

                self.last_archival_error = YLeaf(YType.str, "last-archival-error")

                self.last_archival_error_time = YLeaf(YType.str, "last-archival-error-time")

                self.last_archival_status = YLeaf(YType.str, "last-archival-status")

                self.last_process_duration = YLeaf(YType.str, "last-process-duration")

                self.last_process_start_time = YLeaf(YType.str, "last-process-start-time")

                self.last_process_state = YLeaf(YType.enumeration, "last-process-state")

                self.max_events = YLeaf(YType.uint32, "max-events")

                self.max_interface_count = YLeaf(YType.uint32, "max-interface-count")

                self.monitoring_interval = YLeaf(YType.uint32, "monitoring-interval")

                self.next_interval = YLeaf(YType.uint32, "next-interval")

                self.node_lc_count = YLeaf(YType.uint32, "node-lc-count")

                self.node_rp_count = YLeaf(YType.uint32, "node-rp-count")

                self.process_count = YLeaf(YType.uint32, "process-count")

                self.reports_archive_node = YLeaf(YType.str, "reports-archive-node")

                self.reports_archive_path = YLeaf(YType.str, "reports-archive-path")

                self.spf_process_count = YLeaf(YType.uint32, "spf-process-count")

                self.status = YLeaf(YType.enumeration, "status")

                self.protocol_config = YList(self)
                self.server_detail = YList(self)
                self._segment_path = lambda: "detail"
                self._absolute_path = lambda: "Cisco-IOS-XR-infra-rcmd-oper:rcmd/server/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Rcmd.Server.Detail, ['archive_count', 'diag_node_count', 'diagnostics_archive_node', 'diagnostics_archive_path', 'disabled_node_count', 'event_buffer_size', 'host_name', 'in_active_node_count', 'interface_count', 'last_archival_error', 'last_archival_error_time', 'last_archival_status', 'last_process_duration', 'last_process_start_time', 'last_process_state', 'max_events', 'max_interface_count', 'monitoring_interval', 'next_interval', 'node_lc_count', 'node_rp_count', 'process_count', 'reports_archive_node', 'reports_archive_path', 'spf_process_count', 'status'], name, value)


            class ProtocolConfig(Entity):
                """
                Protocol level configuration
                
                .. attribute:: priority
                
                	Priority level configuration
                	**type**\: list of    :py:class:`Priority <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Server.Detail.ProtocolConfig.Priority>`
                
                .. attribute:: protocol_name
                
                	Protocol Name
                	**type**\:  str
                
                

                """

                _prefix = 'infra-rcmd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Rcmd.Server.Detail.ProtocolConfig, self).__init__()

                    self.yang_name = "protocol-config"
                    self.yang_parent_name = "detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self._child_container_classes = {}
                    self._child_list_classes = {"priority" : ("priority", Rcmd.Server.Detail.ProtocolConfig.Priority)}

                    self.protocol_name = YLeaf(YType.str, "protocol-name")

                    self.priority = YList(self)
                    self._segment_path = lambda: "protocol-config"
                    self._absolute_path = lambda: "Cisco-IOS-XR-infra-rcmd-oper:rcmd/server/detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rcmd.Server.Detail.ProtocolConfig, ['protocol_name'], name, value)


                class Priority(Entity):
                    """
                    Priority level configuration
                    
                    .. attribute:: disable
                    
                    	Enable/Disable cfg
                    	**type**\:   :py:class:`RcmdBoolYesNo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdBoolYesNo>`
                    
                    .. attribute:: priority_name
                    
                    	Priority Level
                    	**type**\:   :py:class:`RcmdPriorityLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdPriorityLevel>`
                    
                    .. attribute:: threshold
                    
                    	threshold value
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'infra-rcmd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Rcmd.Server.Detail.ProtocolConfig.Priority, self).__init__()

                        self.yang_name = "priority"
                        self.yang_parent_name = "protocol-config"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self._child_container_classes = {}
                        self._child_list_classes = {}

                        self.disable = YLeaf(YType.enumeration, "disable")

                        self.priority_name = YLeaf(YType.enumeration, "priority-name")

                        self.threshold = YLeaf(YType.uint32, "threshold")
                        self._segment_path = lambda: "priority"
                        self._absolute_path = lambda: "Cisco-IOS-XR-infra-rcmd-oper:rcmd/server/detail/protocol-config/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rcmd.Server.Detail.ProtocolConfig.Priority, ['disable', 'priority_name', 'threshold'], name, value)


            class ServerDetail(Entity):
                """
                Detailed Information
                
                .. attribute:: memory_suspend
                
                	Memory Suspend
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: overload_suspend
                
                	Overload suspend
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: trace_information
                
                	Trace Information
                	**type**\: list of    :py:class:`TraceInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Server.Detail.ServerDetail.TraceInformation>`
                
                

                """

                _prefix = 'infra-rcmd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Rcmd.Server.Detail.ServerDetail, self).__init__()

                    self.yang_name = "server-detail"
                    self.yang_parent_name = "detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self._child_container_classes = {}
                    self._child_list_classes = {"trace-information" : ("trace_information", Rcmd.Server.Detail.ServerDetail.TraceInformation)}

                    self.memory_suspend = YLeaf(YType.uint32, "memory-suspend")

                    self.overload_suspend = YLeaf(YType.uint32, "overload-suspend")

                    self.trace_information = YList(self)
                    self._segment_path = lambda: "server-detail"
                    self._absolute_path = lambda: "Cisco-IOS-XR-infra-rcmd-oper:rcmd/server/detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rcmd.Server.Detail.ServerDetail, ['memory_suspend', 'overload_suspend'], name, value)


                class TraceInformation(Entity):
                    """
                    Trace Information
                    
                    .. attribute:: error_stats
                    
                    	Server Error Status
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: last_run_stats
                    
                    	Server Last Run Status
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: total_stats
                    
                    	Server Total Status
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: trace_name
                    
                    	Configured Hostname
                    	**type**\:  str
                    
                    

                    """

                    _prefix = 'infra-rcmd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Rcmd.Server.Detail.ServerDetail.TraceInformation, self).__init__()

                        self.yang_name = "trace-information"
                        self.yang_parent_name = "server-detail"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self._child_container_classes = {}
                        self._child_list_classes = {}

                        self.error_stats = YLeaf(YType.uint32, "error-stats")

                        self.last_run_stats = YLeaf(YType.uint32, "last-run-stats")

                        self.total_stats = YLeaf(YType.uint32, "total-stats")

                        self.trace_name = YLeaf(YType.str, "trace-name")
                        self._segment_path = lambda: "trace-information"
                        self._absolute_path = lambda: "Cisco-IOS-XR-infra-rcmd-oper:rcmd/server/detail/server-detail/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rcmd.Server.Detail.ServerDetail.TraceInformation, ['error_stats', 'last_run_stats', 'total_stats', 'trace_name'], name, value)


        class Normal(Entity):
            """
            Server Info
            
            .. attribute:: archive_count
            
            	Archive Count
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: diag_node_count
            
            	Diag Node count
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: diagnostics_archive_node
            
            	Diagnostics Archival Node (Applicable for local location)
            	**type**\:  str
            
            .. attribute:: diagnostics_archive_path
            
            	Diagnostics Archival Path
            	**type**\:  str
            
            .. attribute:: disabled_node_count
            
            	Disabled Node count
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: event_buffer_size
            
            	Event Buffer Size
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: host_name
            
            	Configured Hostname
            	**type**\:  str
            
            .. attribute:: in_active_node_count
            
            	Disabled Node count
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: interface_count
            
            	Interface events count
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: last_archival_error
            
            	Last Archival Error
            	**type**\:  str
            
            .. attribute:: last_archival_error_time
            
            	Last Archival Status
            	**type**\:  str
            
            .. attribute:: last_archival_status
            
            	Last Archival Status
            	**type**\:  str
            
            .. attribute:: last_process_duration
            
            	Last Processing Duration
            	**type**\:  str
            
            .. attribute:: last_process_start_time
            
            	Last Processing Start Time
            	**type**\:  str
            
            .. attribute:: last_process_state
            
            	Process state
            	**type**\:   :py:class:`RcmdShowPrcsState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowPrcsState>`
            
            .. attribute:: max_events
            
            	Maximum Events
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: max_interface_count
            
            	Max Interface events count
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: monitoring_interval
            
            	Configured Monitor Interval
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: next_interval
            
            	Time for next processing
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: node_lc_count
            
            	LC count
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: node_rp_count
            
            	RP count
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: process_count
            
            	Post Processing count
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: protocol_config
            
            	Protocol level configuration
            	**type**\: list of    :py:class:`ProtocolConfig <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Server.Normal.ProtocolConfig>`
            
            .. attribute:: reports_archive_node
            
            	Reports Archival Node (Applicable for local location)
            	**type**\:  str
            
            .. attribute:: reports_archive_path
            
            	Reports Archival Path
            	**type**\:  str
            
            .. attribute:: server_detail
            
            	Detailed Information
            	**type**\: list of    :py:class:`ServerDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Server.Normal.ServerDetail>`
            
            .. attribute:: spf_process_count
            
            	SPF Processing count
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: status
            
            	Server Status
            	**type**\:   :py:class:`RcmdBagEnableDisable <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdBagEnableDisable>`
            
            

            """

            _prefix = 'infra-rcmd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Rcmd.Server.Normal, self).__init__()

                self.yang_name = "normal"
                self.yang_parent_name = "server"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self._child_container_classes = {}
                self._child_list_classes = {"protocol-config" : ("protocol_config", Rcmd.Server.Normal.ProtocolConfig), "server-detail" : ("server_detail", Rcmd.Server.Normal.ServerDetail)}

                self.archive_count = YLeaf(YType.uint32, "archive-count")

                self.diag_node_count = YLeaf(YType.uint32, "diag-node-count")

                self.diagnostics_archive_node = YLeaf(YType.str, "diagnostics-archive-node")

                self.diagnostics_archive_path = YLeaf(YType.str, "diagnostics-archive-path")

                self.disabled_node_count = YLeaf(YType.uint32, "disabled-node-count")

                self.event_buffer_size = YLeaf(YType.uint32, "event-buffer-size")

                self.host_name = YLeaf(YType.str, "host-name")

                self.in_active_node_count = YLeaf(YType.uint32, "in-active-node-count")

                self.interface_count = YLeaf(YType.uint32, "interface-count")

                self.last_archival_error = YLeaf(YType.str, "last-archival-error")

                self.last_archival_error_time = YLeaf(YType.str, "last-archival-error-time")

                self.last_archival_status = YLeaf(YType.str, "last-archival-status")

                self.last_process_duration = YLeaf(YType.str, "last-process-duration")

                self.last_process_start_time = YLeaf(YType.str, "last-process-start-time")

                self.last_process_state = YLeaf(YType.enumeration, "last-process-state")

                self.max_events = YLeaf(YType.uint32, "max-events")

                self.max_interface_count = YLeaf(YType.uint32, "max-interface-count")

                self.monitoring_interval = YLeaf(YType.uint32, "monitoring-interval")

                self.next_interval = YLeaf(YType.uint32, "next-interval")

                self.node_lc_count = YLeaf(YType.uint32, "node-lc-count")

                self.node_rp_count = YLeaf(YType.uint32, "node-rp-count")

                self.process_count = YLeaf(YType.uint32, "process-count")

                self.reports_archive_node = YLeaf(YType.str, "reports-archive-node")

                self.reports_archive_path = YLeaf(YType.str, "reports-archive-path")

                self.spf_process_count = YLeaf(YType.uint32, "spf-process-count")

                self.status = YLeaf(YType.enumeration, "status")

                self.protocol_config = YList(self)
                self.server_detail = YList(self)
                self._segment_path = lambda: "normal"
                self._absolute_path = lambda: "Cisco-IOS-XR-infra-rcmd-oper:rcmd/server/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Rcmd.Server.Normal, ['archive_count', 'diag_node_count', 'diagnostics_archive_node', 'diagnostics_archive_path', 'disabled_node_count', 'event_buffer_size', 'host_name', 'in_active_node_count', 'interface_count', 'last_archival_error', 'last_archival_error_time', 'last_archival_status', 'last_process_duration', 'last_process_start_time', 'last_process_state', 'max_events', 'max_interface_count', 'monitoring_interval', 'next_interval', 'node_lc_count', 'node_rp_count', 'process_count', 'reports_archive_node', 'reports_archive_path', 'spf_process_count', 'status'], name, value)


            class ProtocolConfig(Entity):
                """
                Protocol level configuration
                
                .. attribute:: priority
                
                	Priority level configuration
                	**type**\: list of    :py:class:`Priority <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Server.Normal.ProtocolConfig.Priority>`
                
                .. attribute:: protocol_name
                
                	Protocol Name
                	**type**\:  str
                
                

                """

                _prefix = 'infra-rcmd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Rcmd.Server.Normal.ProtocolConfig, self).__init__()

                    self.yang_name = "protocol-config"
                    self.yang_parent_name = "normal"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self._child_container_classes = {}
                    self._child_list_classes = {"priority" : ("priority", Rcmd.Server.Normal.ProtocolConfig.Priority)}

                    self.protocol_name = YLeaf(YType.str, "protocol-name")

                    self.priority = YList(self)
                    self._segment_path = lambda: "protocol-config"
                    self._absolute_path = lambda: "Cisco-IOS-XR-infra-rcmd-oper:rcmd/server/normal/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rcmd.Server.Normal.ProtocolConfig, ['protocol_name'], name, value)


                class Priority(Entity):
                    """
                    Priority level configuration
                    
                    .. attribute:: disable
                    
                    	Enable/Disable cfg
                    	**type**\:   :py:class:`RcmdBoolYesNo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdBoolYesNo>`
                    
                    .. attribute:: priority_name
                    
                    	Priority Level
                    	**type**\:   :py:class:`RcmdPriorityLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdPriorityLevel>`
                    
                    .. attribute:: threshold
                    
                    	threshold value
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'infra-rcmd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Rcmd.Server.Normal.ProtocolConfig.Priority, self).__init__()

                        self.yang_name = "priority"
                        self.yang_parent_name = "protocol-config"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self._child_container_classes = {}
                        self._child_list_classes = {}

                        self.disable = YLeaf(YType.enumeration, "disable")

                        self.priority_name = YLeaf(YType.enumeration, "priority-name")

                        self.threshold = YLeaf(YType.uint32, "threshold")
                        self._segment_path = lambda: "priority"
                        self._absolute_path = lambda: "Cisco-IOS-XR-infra-rcmd-oper:rcmd/server/normal/protocol-config/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rcmd.Server.Normal.ProtocolConfig.Priority, ['disable', 'priority_name', 'threshold'], name, value)


            class ServerDetail(Entity):
                """
                Detailed Information
                
                .. attribute:: memory_suspend
                
                	Memory Suspend
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: overload_suspend
                
                	Overload suspend
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: trace_information
                
                	Trace Information
                	**type**\: list of    :py:class:`TraceInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Server.Normal.ServerDetail.TraceInformation>`
                
                

                """

                _prefix = 'infra-rcmd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Rcmd.Server.Normal.ServerDetail, self).__init__()

                    self.yang_name = "server-detail"
                    self.yang_parent_name = "normal"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self._child_container_classes = {}
                    self._child_list_classes = {"trace-information" : ("trace_information", Rcmd.Server.Normal.ServerDetail.TraceInformation)}

                    self.memory_suspend = YLeaf(YType.uint32, "memory-suspend")

                    self.overload_suspend = YLeaf(YType.uint32, "overload-suspend")

                    self.trace_information = YList(self)
                    self._segment_path = lambda: "server-detail"
                    self._absolute_path = lambda: "Cisco-IOS-XR-infra-rcmd-oper:rcmd/server/normal/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rcmd.Server.Normal.ServerDetail, ['memory_suspend', 'overload_suspend'], name, value)


                class TraceInformation(Entity):
                    """
                    Trace Information
                    
                    .. attribute:: error_stats
                    
                    	Server Error Status
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: last_run_stats
                    
                    	Server Last Run Status
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: total_stats
                    
                    	Server Total Status
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: trace_name
                    
                    	Configured Hostname
                    	**type**\:  str
                    
                    

                    """

                    _prefix = 'infra-rcmd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Rcmd.Server.Normal.ServerDetail.TraceInformation, self).__init__()

                        self.yang_name = "trace-information"
                        self.yang_parent_name = "server-detail"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self._child_container_classes = {}
                        self._child_list_classes = {}

                        self.error_stats = YLeaf(YType.uint32, "error-stats")

                        self.last_run_stats = YLeaf(YType.uint32, "last-run-stats")

                        self.total_stats = YLeaf(YType.uint32, "total-stats")

                        self.trace_name = YLeaf(YType.str, "trace-name")
                        self._segment_path = lambda: "trace-information"
                        self._absolute_path = lambda: "Cisco-IOS-XR-infra-rcmd-oper:rcmd/server/normal/server-detail/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rcmd.Server.Normal.ServerDetail.TraceInformation, ['error_stats', 'last_run_stats', 'total_stats', 'trace_name'], name, value)

    def clone_ptr(self):
        self._top_entity = Rcmd()
        return self._top_entity

