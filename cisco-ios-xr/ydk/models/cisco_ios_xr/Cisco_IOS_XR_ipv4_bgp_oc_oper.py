""" Cisco_IOS_XR_ipv4_bgp_oc_oper 

This module contains a collection of YANG definitions
for Cisco IOS\-XR ipv4\-bgp\-oc package operational data.

This module contains definitions
for the following management objects\:
  oc\-bgp\: OC\-BGP operational data

Copyright (c) 2013\-2016 by Cisco Systems, Inc.
All rights reserved.

"""
from ydk.entity_utils import get_relative_entity_path as _get_relative_entity_path
from ydk.types import Entity, EntityPath, Identity, Enum, YType, YLeaf, YLeafList, YList, LeafDataList, Bits, Empty, Decimal64
from ydk.filters import YFilter
from ydk.errors import YPYError, YPYModelError
from ydk.errors.error_handler import handle_type_error as _handle_type_error


class BgpOcAfi(Enum):
    """
    BgpOcAfi

    BGP Address family

    .. data:: ipv4 = 0

    	IPv4 unicast

    .. data:: ipv6 = 5

    	IPv6 unicast

    """

    ipv4 = Enum.YLeaf(0, "ipv4")

    ipv6 = Enum.YLeaf(5, "ipv6")


class BgpOcInvalidRouteReason(Enum):
    """
    BgpOcInvalidRouteReason

    Invalid route reason

    .. data:: valid_route = 1

    	Valid route

    .. data:: invalid_clsuter_loop = 2

    	ClusterLoop

    .. data:: invalid_as_path_loop = 3

    	AsPathLoop

    .. data:: invalid_origin_at_or_id = 4

    	OriginatorID

    .. data:: invalid_as_confed_loop = 5

    	ASConfedLoop

    """

    valid_route = Enum.YLeaf(1, "valid-route")

    invalid_clsuter_loop = Enum.YLeaf(2, "invalid-clsuter-loop")

    invalid_as_path_loop = Enum.YLeaf(3, "invalid-as-path-loop")

    invalid_origin_at_or_id = Enum.YLeaf(4, "invalid-origin-at-or-id")

    invalid_as_confed_loop = Enum.YLeaf(5, "invalid-as-confed-loop")


class BgpOcOriginAttr(Enum):
    """
    BgpOcOriginAttr

    Origin Type

    .. data:: igp = 0

    	IGP

    .. data:: egp = 1

    	EGP

    .. data:: incomplete = 2

    	Incomplete

    """

    igp = Enum.YLeaf(0, "igp")

    egp = Enum.YLeaf(1, "egp")

    incomplete = Enum.YLeaf(2, "incomplete")



class OcBgp(Entity):
    """
    OC\-BGP operational data
    
    .. attribute:: bgp_rib
    
    	BGP\-RIB operational data
    	**type**\:   :py:class:`BgpRib <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib>`
    
    

    """

    _prefix = 'ipv4-bgp-oc-oper'
    _revision = '2015-11-09'

    def __init__(self):
        super(OcBgp, self).__init__()
        self._top_entity = None

        self.yang_name = "oc-bgp"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-oc-oper"

        self.bgp_rib = OcBgp.BgpRib()
        self.bgp_rib.parent = self
        self._children_name_map["bgp_rib"] = "bgp-rib"
        self._children_yang_names.add("bgp-rib")


    class BgpRib(Entity):
        """
        BGP\-RIB operational data
        
        .. attribute:: afi_safi_table
        
        	AFI\-SAFIs information
        	**type**\:   :py:class:`AfiSafiTable <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable>`
        
        

        """

        _prefix = 'ipv4-bgp-oc-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(OcBgp.BgpRib, self).__init__()

            self.yang_name = "bgp-rib"
            self.yang_parent_name = "oc-bgp"

            self.afi_safi_table = OcBgp.BgpRib.AfiSafiTable()
            self.afi_safi_table.parent = self
            self._children_name_map["afi_safi_table"] = "afi-safi-table"
            self._children_yang_names.add("afi-safi-table")


        class AfiSafiTable(Entity):
            """
            AFI\-SAFIs information
            
            .. attribute:: ipv4_unicast
            
            	IPv4 Unicast
            	**type**\:   :py:class:`Ipv4Unicast <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast>`
            
            .. attribute:: ipv6_unicast
            
            	IPv6 Unicast
            	**type**\:   :py:class:`Ipv6Unicast <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast>`
            
            

            """

            _prefix = 'ipv4-bgp-oc-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(OcBgp.BgpRib.AfiSafiTable, self).__init__()

                self.yang_name = "afi-safi-table"
                self.yang_parent_name = "bgp-rib"

                self.ipv4_unicast = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast()
                self.ipv4_unicast.parent = self
                self._children_name_map["ipv4_unicast"] = "ipv4-unicast"
                self._children_yang_names.add("ipv4-unicast")

                self.ipv6_unicast = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast()
                self.ipv6_unicast.parent = self
                self._children_name_map["ipv6_unicast"] = "ipv6-unicast"
                self._children_yang_names.add("ipv6-unicast")


            class Ipv4Unicast(Entity):
                """
                IPv4 Unicast
                
                .. attribute:: loc_rib
                
                	Local rib route table
                	**type**\:   :py:class:`LocRib <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib>`
                
                .. attribute:: open_config_neighbors
                
                	Neighbor list
                	**type**\:   :py:class:`OpenConfigNeighbors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors>`
                
                

                """

                _prefix = 'ipv4-bgp-oc-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast, self).__init__()

                    self.yang_name = "ipv4-unicast"
                    self.yang_parent_name = "afi-safi-table"

                    self.loc_rib = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib()
                    self.loc_rib.parent = self
                    self._children_name_map["loc_rib"] = "loc-rib"
                    self._children_yang_names.add("loc-rib")

                    self.open_config_neighbors = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors()
                    self.open_config_neighbors.parent = self
                    self._children_name_map["open_config_neighbors"] = "open-config-neighbors"
                    self._children_yang_names.add("open-config-neighbors")


                class LocRib(Entity):
                    """
                    Local rib route table
                    
                    .. attribute:: num_routes
                    
                    	Number of routes in adjacency rib out\-bound post\-policy table
                    	**type**\:   :py:class:`NumRoutes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.NumRoutes>`
                    
                    .. attribute:: routes
                    
                    	routes table
                    	**type**\:   :py:class:`Routes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes>`
                    
                    

                    """

                    _prefix = 'ipv4-bgp-oc-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib, self).__init__()

                        self.yang_name = "loc-rib"
                        self.yang_parent_name = "ipv4-unicast"

                        self.num_routes = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.NumRoutes()
                        self.num_routes.parent = self
                        self._children_name_map["num_routes"] = "num-routes"
                        self._children_yang_names.add("num-routes")

                        self.routes = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes()
                        self.routes.parent = self
                        self._children_name_map["routes"] = "routes"
                        self._children_yang_names.add("routes")


                    class Routes(Entity):
                        """
                        routes table
                        
                        .. attribute:: route
                        
                        	route entry
                        	**type**\: list of    :py:class:`Route <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes.Route>`
                        
                        

                        """

                        _prefix = 'ipv4-bgp-oc-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes, self).__init__()

                            self.yang_name = "routes"
                            self.yang_parent_name = "loc-rib"

                            self.route = YList(self)

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in () and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes, self).__setattr__(name, value)


                        class Route(Entity):
                            """
                            route entry
                            
                            .. attribute:: best_path
                            
                            	BestPath
                            	**type**\:  bool
                            
                            .. attribute:: ext_attributes_list
                            
                            	ExtAttributesList
                            	**type**\:   :py:class:`ExtAttributesList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes.Route.ExtAttributesList>`
                            
                            .. attribute:: invalid_reason
                            
                            	IndentityRef
                            	**type**\:   :py:class:`BgpOcInvalidRouteReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.BgpOcInvalidRouteReason>`
                            
                            .. attribute:: last_modified_date
                            
                            	LastModifiedDate
                            	**type**\:   :py:class:`LastModifiedDate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes.Route.LastModifiedDate>`
                            
                            .. attribute:: last_update_recieved
                            
                            	LastUpdateRecieved
                            	**type**\:   :py:class:`LastUpdateRecieved <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes.Route.LastUpdateRecieved>`
                            
                            .. attribute:: neighbor_address
                            
                            	Neighbor address
                            	**type**\: one of the below types:
                            
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            
                            ----
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            
                            ----
                            .. attribute:: path_id
                            
                            	Path ID
                            	**type**\:  int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: prefix_name
                            
                            	Prefix
                            	**type**\:   :py:class:`PrefixName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes.Route.PrefixName>`
                            
                            .. attribute:: route
                            
                            	Network in prefix/length format
                            	**type**\: one of the below types:
                            
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                            
                            
                            ----
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                            
                            
                            ----
                            .. attribute:: route_attr_list
                            
                            	RouteAttributesList
                            	**type**\:   :py:class:`RouteAttrList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes.Route.RouteAttrList>`
                            
                            .. attribute:: valid_route
                            
                            	ValidRoute
                            	**type**\:  bool
                            
                            

                            """

                            _prefix = 'ipv4-bgp-oc-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes.Route, self).__init__()

                                self.yang_name = "route"
                                self.yang_parent_name = "routes"

                                self.best_path = YLeaf(YType.boolean, "best-path")

                                self.invalid_reason = YLeaf(YType.enumeration, "invalid-reason")

                                self.neighbor_address = YLeaf(YType.str, "neighbor-address")

                                self.path_id = YLeaf(YType.int32, "path-id")

                                self.route = YLeaf(YType.str, "route")

                                self.valid_route = YLeaf(YType.boolean, "valid-route")

                                self.ext_attributes_list = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes.Route.ExtAttributesList()
                                self.ext_attributes_list.parent = self
                                self._children_name_map["ext_attributes_list"] = "ext-attributes-list"
                                self._children_yang_names.add("ext-attributes-list")

                                self.last_modified_date = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes.Route.LastModifiedDate()
                                self.last_modified_date.parent = self
                                self._children_name_map["last_modified_date"] = "last-modified-date"
                                self._children_yang_names.add("last-modified-date")

                                self.last_update_recieved = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes.Route.LastUpdateRecieved()
                                self.last_update_recieved.parent = self
                                self._children_name_map["last_update_recieved"] = "last-update-recieved"
                                self._children_yang_names.add("last-update-recieved")

                                self.prefix_name = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes.Route.PrefixName()
                                self.prefix_name.parent = self
                                self._children_name_map["prefix_name"] = "prefix-name"
                                self._children_yang_names.add("prefix-name")

                                self.route_attr_list = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes.Route.RouteAttrList()
                                self.route_attr_list.parent = self
                                self._children_name_map["route_attr_list"] = "route-attr-list"
                                self._children_yang_names.add("route-attr-list")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("best_path",
                                                "invalid_reason",
                                                "neighbor_address",
                                                "path_id",
                                                "route",
                                                "valid_route") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes.Route, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes.Route, self).__setattr__(name, value)


                            class PrefixName(Entity):
                                """
                                Prefix
                                
                                .. attribute:: prefix
                                
                                	Prefix
                                	**type**\:   :py:class:`Prefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes.Route.PrefixName.Prefix>`
                                
                                .. attribute:: prefix_length
                                
                                	Prefix length
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                

                                """

                                _prefix = 'ipv4-bgp-oc-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes.Route.PrefixName, self).__init__()

                                    self.yang_name = "prefix-name"
                                    self.yang_parent_name = "route"

                                    self.prefix_length = YLeaf(YType.uint8, "prefix-length")

                                    self.prefix = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes.Route.PrefixName.Prefix()
                                    self.prefix.parent = self
                                    self._children_name_map["prefix"] = "prefix"
                                    self._children_yang_names.add("prefix")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("prefix_length") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes.Route.PrefixName, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes.Route.PrefixName, self).__setattr__(name, value)


                                class Prefix(Entity):
                                    """
                                    Prefix
                                    
                                    .. attribute:: afi
                                    
                                    	AFI
                                    	**type**\:   :py:class:`BgpOcAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.BgpOcAfi>`
                                    
                                    .. attribute:: ipv4_address
                                    
                                    	IPv4 Addr
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: ipv6_address
                                    
                                    	IPv6 Addr
                                    	**type**\:  str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-oc-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes.Route.PrefixName.Prefix, self).__init__()

                                        self.yang_name = "prefix"
                                        self.yang_parent_name = "prefix-name"

                                        self.afi = YLeaf(YType.enumeration, "afi")

                                        self.ipv4_address = YLeaf(YType.str, "ipv4-address")

                                        self.ipv6_address = YLeaf(YType.str, "ipv6-address")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("afi",
                                                        "ipv4_address",
                                                        "ipv6_address") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes.Route.PrefixName.Prefix, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes.Route.PrefixName.Prefix, self).__setattr__(name, value)

                                    def has_data(self):
                                        return (
                                            self.afi.is_set or
                                            self.ipv4_address.is_set or
                                            self.ipv6_address.is_set)

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.afi.yfilter != YFilter.not_set or
                                            self.ipv4_address.yfilter != YFilter.not_set or
                                            self.ipv6_address.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "prefix" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            path_buffer = "Cisco-IOS-XR-ipv4-bgp-oc-oper:oc-bgp/bgp-rib/afi-safi-table/ipv4-unicast/loc-rib/routes/route/prefix-name/%s" % self.get_segment_path()
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.afi.is_set or self.afi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.afi.get_name_leafdata())
                                        if (self.ipv4_address.is_set or self.ipv4_address.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.ipv4_address.get_name_leafdata())
                                        if (self.ipv6_address.is_set or self.ipv6_address.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.ipv6_address.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "afi" or name == "ipv4-address" or name == "ipv6-address"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "afi"):
                                            self.afi = value
                                            self.afi.value_namespace = name_space
                                            self.afi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "ipv4-address"):
                                            self.ipv4_address = value
                                            self.ipv4_address.value_namespace = name_space
                                            self.ipv4_address.value_namespace_prefix = name_space_prefix
                                        if(value_path == "ipv6-address"):
                                            self.ipv6_address = value
                                            self.ipv6_address.value_namespace = name_space
                                            self.ipv6_address.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    return (
                                        self.prefix_length.is_set or
                                        (self.prefix is not None and self.prefix.has_data()))

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.prefix_length.yfilter != YFilter.not_set or
                                        (self.prefix is not None and self.prefix.has_operation()))

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "prefix-name" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        path_buffer = "Cisco-IOS-XR-ipv4-bgp-oc-oper:oc-bgp/bgp-rib/afi-safi-table/ipv4-unicast/loc-rib/routes/route/%s" % self.get_segment_path()
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.prefix_length.is_set or self.prefix_length.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.prefix_length.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "prefix"):
                                        if (self.prefix is None):
                                            self.prefix = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes.Route.PrefixName.Prefix()
                                            self.prefix.parent = self
                                            self._children_name_map["prefix"] = "prefix"
                                        return self.prefix

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "prefix" or name == "prefix-length"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "prefix-length"):
                                        self.prefix_length = value
                                        self.prefix_length.value_namespace = name_space
                                        self.prefix_length.value_namespace_prefix = name_space_prefix


                            class RouteAttrList(Entity):
                                """
                                RouteAttributesList
                                
                                .. attribute:: aggregrator_attributes
                                
                                	AggregatorList
                                	**type**\:   :py:class:`AggregratorAttributes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes.Route.RouteAttrList.AggregratorAttributes>`
                                
                                .. attribute:: as4_path
                                
                                	AS4 Path
                                	**type**\:  str
                                
                                .. attribute:: as_path
                                
                                	AS Path
                                	**type**\:  str
                                
                                .. attribute:: atomic_aggr
                                
                                	AtomicAggr
                                	**type**\:  bool
                                
                                .. attribute:: community
                                
                                	CommunityArray
                                	**type**\: list of    :py:class:`Community <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes.Route.RouteAttrList.Community>`
                                
                                .. attribute:: local_pref
                                
                                	LocalPref
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: med
                                
                                	Med
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: next_hop
                                
                                	NextHopAddress
                                	**type**\:   :py:class:`NextHop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes.Route.RouteAttrList.NextHop>`
                                
                                .. attribute:: origin_type
                                
                                	Origin Attribute Type
                                	**type**\:   :py:class:`BgpOcOriginAttr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.BgpOcOriginAttr>`
                                
                                

                                """

                                _prefix = 'ipv4-bgp-oc-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes.Route.RouteAttrList, self).__init__()

                                    self.yang_name = "route-attr-list"
                                    self.yang_parent_name = "route"

                                    self.as4_path = YLeaf(YType.str, "as4-path")

                                    self.as_path = YLeaf(YType.str, "as-path")

                                    self.atomic_aggr = YLeaf(YType.boolean, "atomic-aggr")

                                    self.local_pref = YLeaf(YType.uint32, "local-pref")

                                    self.med = YLeaf(YType.uint32, "med")

                                    self.origin_type = YLeaf(YType.enumeration, "origin-type")

                                    self.aggregrator_attributes = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes.Route.RouteAttrList.AggregratorAttributes()
                                    self.aggregrator_attributes.parent = self
                                    self._children_name_map["aggregrator_attributes"] = "aggregrator-attributes"
                                    self._children_yang_names.add("aggregrator-attributes")

                                    self.next_hop = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes.Route.RouteAttrList.NextHop()
                                    self.next_hop.parent = self
                                    self._children_name_map["next_hop"] = "next-hop"
                                    self._children_yang_names.add("next-hop")

                                    self.community = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("as4_path",
                                                    "as_path",
                                                    "atomic_aggr",
                                                    "local_pref",
                                                    "med",
                                                    "origin_type") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes.Route.RouteAttrList, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes.Route.RouteAttrList, self).__setattr__(name, value)


                                class NextHop(Entity):
                                    """
                                    NextHopAddress
                                    
                                    .. attribute:: afi
                                    
                                    	AFI
                                    	**type**\:   :py:class:`BgpOcAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.BgpOcAfi>`
                                    
                                    .. attribute:: ipv4_address
                                    
                                    	IPv4 Addr
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: ipv6_address
                                    
                                    	IPv6 Addr
                                    	**type**\:  str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-oc-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes.Route.RouteAttrList.NextHop, self).__init__()

                                        self.yang_name = "next-hop"
                                        self.yang_parent_name = "route-attr-list"

                                        self.afi = YLeaf(YType.enumeration, "afi")

                                        self.ipv4_address = YLeaf(YType.str, "ipv4-address")

                                        self.ipv6_address = YLeaf(YType.str, "ipv6-address")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("afi",
                                                        "ipv4_address",
                                                        "ipv6_address") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes.Route.RouteAttrList.NextHop, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes.Route.RouteAttrList.NextHop, self).__setattr__(name, value)

                                    def has_data(self):
                                        return (
                                            self.afi.is_set or
                                            self.ipv4_address.is_set or
                                            self.ipv6_address.is_set)

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.afi.yfilter != YFilter.not_set or
                                            self.ipv4_address.yfilter != YFilter.not_set or
                                            self.ipv6_address.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "next-hop" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            path_buffer = "Cisco-IOS-XR-ipv4-bgp-oc-oper:oc-bgp/bgp-rib/afi-safi-table/ipv4-unicast/loc-rib/routes/route/route-attr-list/%s" % self.get_segment_path()
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.afi.is_set or self.afi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.afi.get_name_leafdata())
                                        if (self.ipv4_address.is_set or self.ipv4_address.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.ipv4_address.get_name_leafdata())
                                        if (self.ipv6_address.is_set or self.ipv6_address.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.ipv6_address.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "afi" or name == "ipv4-address" or name == "ipv6-address"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "afi"):
                                            self.afi = value
                                            self.afi.value_namespace = name_space
                                            self.afi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "ipv4-address"):
                                            self.ipv4_address = value
                                            self.ipv4_address.value_namespace = name_space
                                            self.ipv4_address.value_namespace_prefix = name_space_prefix
                                        if(value_path == "ipv6-address"):
                                            self.ipv6_address = value
                                            self.ipv6_address.value_namespace = name_space
                                            self.ipv6_address.value_namespace_prefix = name_space_prefix


                                class AggregratorAttributes(Entity):
                                    """
                                    AggregatorList
                                    
                                    .. attribute:: address
                                    
                                    	IPv4 address
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: as4
                                    
                                    	AS4 number
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: as_
                                    
                                    	AS number
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-oc-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes.Route.RouteAttrList.AggregratorAttributes, self).__init__()

                                        self.yang_name = "aggregrator-attributes"
                                        self.yang_parent_name = "route-attr-list"

                                        self.address = YLeaf(YType.str, "address")

                                        self.as4 = YLeaf(YType.uint32, "as4")

                                        self.as_ = YLeaf(YType.uint32, "as")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("address",
                                                        "as4",
                                                        "as_") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes.Route.RouteAttrList.AggregratorAttributes, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes.Route.RouteAttrList.AggregratorAttributes, self).__setattr__(name, value)

                                    def has_data(self):
                                        return (
                                            self.address.is_set or
                                            self.as4.is_set or
                                            self.as_.is_set)

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.address.yfilter != YFilter.not_set or
                                            self.as4.yfilter != YFilter.not_set or
                                            self.as_.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "aggregrator-attributes" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            path_buffer = "Cisco-IOS-XR-ipv4-bgp-oc-oper:oc-bgp/bgp-rib/afi-safi-table/ipv4-unicast/loc-rib/routes/route/route-attr-list/%s" % self.get_segment_path()
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.address.is_set or self.address.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.address.get_name_leafdata())
                                        if (self.as4.is_set or self.as4.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.as4.get_name_leafdata())
                                        if (self.as_.is_set or self.as_.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.as_.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "address" or name == "as4" or name == "as"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "address"):
                                            self.address = value
                                            self.address.value_namespace = name_space
                                            self.address.value_namespace_prefix = name_space_prefix
                                        if(value_path == "as4"):
                                            self.as4 = value
                                            self.as4.value_namespace = name_space
                                            self.as4.value_namespace_prefix = name_space_prefix
                                        if(value_path == "as"):
                                            self.as_ = value
                                            self.as_.value_namespace = name_space
                                            self.as_.value_namespace_prefix = name_space_prefix


                                class Community(Entity):
                                    """
                                    CommunityArray
                                    
                                    .. attribute:: objects
                                    
                                    	BGP OC objects
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-oc-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes.Route.RouteAttrList.Community, self).__init__()

                                        self.yang_name = "community"
                                        self.yang_parent_name = "route-attr-list"

                                        self.objects = YLeaf(YType.str, "objects")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("objects") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes.Route.RouteAttrList.Community, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes.Route.RouteAttrList.Community, self).__setattr__(name, value)

                                    def has_data(self):
                                        return self.objects.is_set

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.objects.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "community" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            path_buffer = "Cisco-IOS-XR-ipv4-bgp-oc-oper:oc-bgp/bgp-rib/afi-safi-table/ipv4-unicast/loc-rib/routes/route/route-attr-list/%s" % self.get_segment_path()
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.objects.is_set or self.objects.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.objects.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "objects"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "objects"):
                                            self.objects = value
                                            self.objects.value_namespace = name_space
                                            self.objects.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.community:
                                        if (c.has_data()):
                                            return True
                                    return (
                                        self.as4_path.is_set or
                                        self.as_path.is_set or
                                        self.atomic_aggr.is_set or
                                        self.local_pref.is_set or
                                        self.med.is_set or
                                        self.origin_type.is_set or
                                        (self.aggregrator_attributes is not None and self.aggregrator_attributes.has_data()) or
                                        (self.next_hop is not None and self.next_hop.has_data()))

                                def has_operation(self):
                                    for c in self.community:
                                        if (c.has_operation()):
                                            return True
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.as4_path.yfilter != YFilter.not_set or
                                        self.as_path.yfilter != YFilter.not_set or
                                        self.atomic_aggr.yfilter != YFilter.not_set or
                                        self.local_pref.yfilter != YFilter.not_set or
                                        self.med.yfilter != YFilter.not_set or
                                        self.origin_type.yfilter != YFilter.not_set or
                                        (self.aggregrator_attributes is not None and self.aggregrator_attributes.has_operation()) or
                                        (self.next_hop is not None and self.next_hop.has_operation()))

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "route-attr-list" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        path_buffer = "Cisco-IOS-XR-ipv4-bgp-oc-oper:oc-bgp/bgp-rib/afi-safi-table/ipv4-unicast/loc-rib/routes/route/%s" % self.get_segment_path()
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.as4_path.is_set or self.as4_path.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.as4_path.get_name_leafdata())
                                    if (self.as_path.is_set or self.as_path.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.as_path.get_name_leafdata())
                                    if (self.atomic_aggr.is_set or self.atomic_aggr.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.atomic_aggr.get_name_leafdata())
                                    if (self.local_pref.is_set or self.local_pref.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.local_pref.get_name_leafdata())
                                    if (self.med.is_set or self.med.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.med.get_name_leafdata())
                                    if (self.origin_type.is_set or self.origin_type.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.origin_type.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "aggregrator-attributes"):
                                        if (self.aggregrator_attributes is None):
                                            self.aggregrator_attributes = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes.Route.RouteAttrList.AggregratorAttributes()
                                            self.aggregrator_attributes.parent = self
                                            self._children_name_map["aggregrator_attributes"] = "aggregrator-attributes"
                                        return self.aggregrator_attributes

                                    if (child_yang_name == "community"):
                                        for c in self.community:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes.Route.RouteAttrList.Community()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.community.append(c)
                                        return c

                                    if (child_yang_name == "next-hop"):
                                        if (self.next_hop is None):
                                            self.next_hop = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes.Route.RouteAttrList.NextHop()
                                            self.next_hop.parent = self
                                            self._children_name_map["next_hop"] = "next-hop"
                                        return self.next_hop

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "aggregrator-attributes" or name == "community" or name == "next-hop" or name == "as4-path" or name == "as-path" or name == "atomic-aggr" or name == "local-pref" or name == "med" or name == "origin-type"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "as4-path"):
                                        self.as4_path = value
                                        self.as4_path.value_namespace = name_space
                                        self.as4_path.value_namespace_prefix = name_space_prefix
                                    if(value_path == "as-path"):
                                        self.as_path = value
                                        self.as_path.value_namespace = name_space
                                        self.as_path.value_namespace_prefix = name_space_prefix
                                    if(value_path == "atomic-aggr"):
                                        self.atomic_aggr = value
                                        self.atomic_aggr.value_namespace = name_space
                                        self.atomic_aggr.value_namespace_prefix = name_space_prefix
                                    if(value_path == "local-pref"):
                                        self.local_pref = value
                                        self.local_pref.value_namespace = name_space
                                        self.local_pref.value_namespace_prefix = name_space_prefix
                                    if(value_path == "med"):
                                        self.med = value
                                        self.med.value_namespace = name_space
                                        self.med.value_namespace_prefix = name_space_prefix
                                    if(value_path == "origin-type"):
                                        self.origin_type = value
                                        self.origin_type.value_namespace = name_space
                                        self.origin_type.value_namespace_prefix = name_space_prefix


                            class ExtAttributesList(Entity):
                                """
                                ExtAttributesList
                                
                                .. attribute:: aigp
                                
                                	AIGP
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: cluster
                                
                                	ClusterList
                                	**type**\:  list of str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: ext_community
                                
                                	ExtendedCommunityArray
                                	**type**\: list of    :py:class:`ExtCommunity <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes.Route.ExtAttributesList.ExtCommunity>`
                                
                                .. attribute:: originator_id
                                
                                	OriginatorID
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: path_id
                                
                                	PathId
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: unknown_attributes
                                
                                	UnknownAttributes
                                	**type**\: list of    :py:class:`UnknownAttributes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes.Route.ExtAttributesList.UnknownAttributes>`
                                
                                

                                """

                                _prefix = 'ipv4-bgp-oc-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes.Route.ExtAttributesList, self).__init__()

                                    self.yang_name = "ext-attributes-list"
                                    self.yang_parent_name = "route"

                                    self.aigp = YLeaf(YType.uint64, "aigp")

                                    self.cluster = YLeafList(YType.str, "cluster")

                                    self.originator_id = YLeaf(YType.str, "originator-id")

                                    self.path_id = YLeaf(YType.uint32, "path-id")

                                    self.ext_community = YList(self)
                                    self.unknown_attributes = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("aigp",
                                                    "cluster",
                                                    "originator_id",
                                                    "path_id") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes.Route.ExtAttributesList, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes.Route.ExtAttributesList, self).__setattr__(name, value)


                                class ExtCommunity(Entity):
                                    """
                                    ExtendedCommunityArray
                                    
                                    .. attribute:: objects
                                    
                                    	BGP OC objects
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-oc-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes.Route.ExtAttributesList.ExtCommunity, self).__init__()

                                        self.yang_name = "ext-community"
                                        self.yang_parent_name = "ext-attributes-list"

                                        self.objects = YLeaf(YType.str, "objects")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("objects") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes.Route.ExtAttributesList.ExtCommunity, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes.Route.ExtAttributesList.ExtCommunity, self).__setattr__(name, value)

                                    def has_data(self):
                                        return self.objects.is_set

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.objects.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "ext-community" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            path_buffer = "Cisco-IOS-XR-ipv4-bgp-oc-oper:oc-bgp/bgp-rib/afi-safi-table/ipv4-unicast/loc-rib/routes/route/ext-attributes-list/%s" % self.get_segment_path()
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.objects.is_set or self.objects.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.objects.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "objects"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "objects"):
                                            self.objects = value
                                            self.objects.value_namespace = name_space
                                            self.objects.value_namespace_prefix = name_space_prefix


                                class UnknownAttributes(Entity):
                                    """
                                    UnknownAttributes
                                    
                                    .. attribute:: attribute_length
                                    
                                    	AttributeLength
                                    	**type**\:  int
                                    
                                    	**range:** 0..65535
                                    
                                    .. attribute:: attribute_type
                                    
                                    	AttributeType
                                    	**type**\:  int
                                    
                                    	**range:** 0..65535
                                    
                                    .. attribute:: attribute_value
                                    
                                    	Atributevalue
                                    	**type**\:  str
                                    
                                    	**pattern:** ([0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2})\*)?
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-oc-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes.Route.ExtAttributesList.UnknownAttributes, self).__init__()

                                        self.yang_name = "unknown-attributes"
                                        self.yang_parent_name = "ext-attributes-list"

                                        self.attribute_length = YLeaf(YType.uint16, "attribute-length")

                                        self.attribute_type = YLeaf(YType.uint16, "attribute-type")

                                        self.attribute_value = YLeaf(YType.str, "attribute-value")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("attribute_length",
                                                        "attribute_type",
                                                        "attribute_value") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes.Route.ExtAttributesList.UnknownAttributes, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes.Route.ExtAttributesList.UnknownAttributes, self).__setattr__(name, value)

                                    def has_data(self):
                                        return (
                                            self.attribute_length.is_set or
                                            self.attribute_type.is_set or
                                            self.attribute_value.is_set)

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.attribute_length.yfilter != YFilter.not_set or
                                            self.attribute_type.yfilter != YFilter.not_set or
                                            self.attribute_value.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "unknown-attributes" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            path_buffer = "Cisco-IOS-XR-ipv4-bgp-oc-oper:oc-bgp/bgp-rib/afi-safi-table/ipv4-unicast/loc-rib/routes/route/ext-attributes-list/%s" % self.get_segment_path()
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.attribute_length.is_set or self.attribute_length.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.attribute_length.get_name_leafdata())
                                        if (self.attribute_type.is_set or self.attribute_type.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.attribute_type.get_name_leafdata())
                                        if (self.attribute_value.is_set or self.attribute_value.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.attribute_value.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "attribute-length" or name == "attribute-type" or name == "attribute-value"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "attribute-length"):
                                            self.attribute_length = value
                                            self.attribute_length.value_namespace = name_space
                                            self.attribute_length.value_namespace_prefix = name_space_prefix
                                        if(value_path == "attribute-type"):
                                            self.attribute_type = value
                                            self.attribute_type.value_namespace = name_space
                                            self.attribute_type.value_namespace_prefix = name_space_prefix
                                        if(value_path == "attribute-value"):
                                            self.attribute_value = value
                                            self.attribute_value.value_namespace = name_space
                                            self.attribute_value.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.ext_community:
                                        if (c.has_data()):
                                            return True
                                    for c in self.unknown_attributes:
                                        if (c.has_data()):
                                            return True
                                    for leaf in self.cluster.getYLeafs():
                                        if (leaf.yfilter != YFilter.not_set):
                                            return True
                                    return (
                                        self.aigp.is_set or
                                        self.originator_id.is_set or
                                        self.path_id.is_set)

                                def has_operation(self):
                                    for c in self.ext_community:
                                        if (c.has_operation()):
                                            return True
                                    for c in self.unknown_attributes:
                                        if (c.has_operation()):
                                            return True
                                    for leaf in self.cluster.getYLeafs():
                                        if (leaf.is_set):
                                            return True
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.aigp.yfilter != YFilter.not_set or
                                        self.cluster.yfilter != YFilter.not_set or
                                        self.originator_id.yfilter != YFilter.not_set or
                                        self.path_id.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "ext-attributes-list" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        path_buffer = "Cisco-IOS-XR-ipv4-bgp-oc-oper:oc-bgp/bgp-rib/afi-safi-table/ipv4-unicast/loc-rib/routes/route/%s" % self.get_segment_path()
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.aigp.is_set or self.aigp.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.aigp.get_name_leafdata())
                                    if (self.originator_id.is_set or self.originator_id.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.originator_id.get_name_leafdata())
                                    if (self.path_id.is_set or self.path_id.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.path_id.get_name_leafdata())

                                    leaf_name_data.extend(self.cluster.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "ext-community"):
                                        for c in self.ext_community:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes.Route.ExtAttributesList.ExtCommunity()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.ext_community.append(c)
                                        return c

                                    if (child_yang_name == "unknown-attributes"):
                                        for c in self.unknown_attributes:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes.Route.ExtAttributesList.UnknownAttributes()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.unknown_attributes.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "ext-community" or name == "unknown-attributes" or name == "aigp" or name == "cluster" or name == "originator-id" or name == "path-id"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "aigp"):
                                        self.aigp = value
                                        self.aigp.value_namespace = name_space
                                        self.aigp.value_namespace_prefix = name_space_prefix
                                    if(value_path == "cluster"):
                                        self.cluster.append(value)
                                    if(value_path == "originator-id"):
                                        self.originator_id = value
                                        self.originator_id.value_namespace = name_space
                                        self.originator_id.value_namespace_prefix = name_space_prefix
                                    if(value_path == "path-id"):
                                        self.path_id = value
                                        self.path_id.value_namespace = name_space
                                        self.path_id.value_namespace_prefix = name_space_prefix


                            class LastModifiedDate(Entity):
                                """
                                LastModifiedDate
                                
                                .. attribute:: time_value
                                
                                	TimeValue
                                	**type**\:  str
                                
                                

                                """

                                _prefix = 'ipv4-bgp-oc-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes.Route.LastModifiedDate, self).__init__()

                                    self.yang_name = "last-modified-date"
                                    self.yang_parent_name = "route"

                                    self.time_value = YLeaf(YType.str, "time-value")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("time_value") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes.Route.LastModifiedDate, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes.Route.LastModifiedDate, self).__setattr__(name, value)

                                def has_data(self):
                                    return self.time_value.is_set

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.time_value.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "last-modified-date" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        path_buffer = "Cisco-IOS-XR-ipv4-bgp-oc-oper:oc-bgp/bgp-rib/afi-safi-table/ipv4-unicast/loc-rib/routes/route/%s" % self.get_segment_path()
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.time_value.is_set or self.time_value.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.time_value.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "time-value"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "time-value"):
                                        self.time_value = value
                                        self.time_value.value_namespace = name_space
                                        self.time_value.value_namespace_prefix = name_space_prefix


                            class LastUpdateRecieved(Entity):
                                """
                                LastUpdateRecieved
                                
                                .. attribute:: time_value
                                
                                	TimeValue
                                	**type**\:  str
                                
                                

                                """

                                _prefix = 'ipv4-bgp-oc-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes.Route.LastUpdateRecieved, self).__init__()

                                    self.yang_name = "last-update-recieved"
                                    self.yang_parent_name = "route"

                                    self.time_value = YLeaf(YType.str, "time-value")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("time_value") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes.Route.LastUpdateRecieved, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes.Route.LastUpdateRecieved, self).__setattr__(name, value)

                                def has_data(self):
                                    return self.time_value.is_set

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.time_value.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "last-update-recieved" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        path_buffer = "Cisco-IOS-XR-ipv4-bgp-oc-oper:oc-bgp/bgp-rib/afi-safi-table/ipv4-unicast/loc-rib/routes/route/%s" % self.get_segment_path()
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.time_value.is_set or self.time_value.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.time_value.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "time-value"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "time-value"):
                                        self.time_value = value
                                        self.time_value.value_namespace = name_space
                                        self.time_value.value_namespace_prefix = name_space_prefix

                            def has_data(self):
                                return (
                                    self.best_path.is_set or
                                    self.invalid_reason.is_set or
                                    self.neighbor_address.is_set or
                                    self.path_id.is_set or
                                    self.route.is_set or
                                    self.valid_route.is_set or
                                    (self.ext_attributes_list is not None and self.ext_attributes_list.has_data()) or
                                    (self.last_modified_date is not None and self.last_modified_date.has_data()) or
                                    (self.last_update_recieved is not None and self.last_update_recieved.has_data()) or
                                    (self.prefix_name is not None and self.prefix_name.has_data()) or
                                    (self.route_attr_list is not None and self.route_attr_list.has_data()))

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.best_path.yfilter != YFilter.not_set or
                                    self.invalid_reason.yfilter != YFilter.not_set or
                                    self.neighbor_address.yfilter != YFilter.not_set or
                                    self.path_id.yfilter != YFilter.not_set or
                                    self.route.yfilter != YFilter.not_set or
                                    self.valid_route.yfilter != YFilter.not_set or
                                    (self.ext_attributes_list is not None and self.ext_attributes_list.has_operation()) or
                                    (self.last_modified_date is not None and self.last_modified_date.has_operation()) or
                                    (self.last_update_recieved is not None and self.last_update_recieved.has_operation()) or
                                    (self.prefix_name is not None and self.prefix_name.has_operation()) or
                                    (self.route_attr_list is not None and self.route_attr_list.has_operation()))

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "route" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    path_buffer = "Cisco-IOS-XR-ipv4-bgp-oc-oper:oc-bgp/bgp-rib/afi-safi-table/ipv4-unicast/loc-rib/routes/%s" % self.get_segment_path()
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.best_path.is_set or self.best_path.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.best_path.get_name_leafdata())
                                if (self.invalid_reason.is_set or self.invalid_reason.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.invalid_reason.get_name_leafdata())
                                if (self.neighbor_address.is_set or self.neighbor_address.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.neighbor_address.get_name_leafdata())
                                if (self.path_id.is_set or self.path_id.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.path_id.get_name_leafdata())
                                if (self.route.is_set or self.route.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.route.get_name_leafdata())
                                if (self.valid_route.is_set or self.valid_route.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.valid_route.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "ext-attributes-list"):
                                    if (self.ext_attributes_list is None):
                                        self.ext_attributes_list = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes.Route.ExtAttributesList()
                                        self.ext_attributes_list.parent = self
                                        self._children_name_map["ext_attributes_list"] = "ext-attributes-list"
                                    return self.ext_attributes_list

                                if (child_yang_name == "last-modified-date"):
                                    if (self.last_modified_date is None):
                                        self.last_modified_date = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes.Route.LastModifiedDate()
                                        self.last_modified_date.parent = self
                                        self._children_name_map["last_modified_date"] = "last-modified-date"
                                    return self.last_modified_date

                                if (child_yang_name == "last-update-recieved"):
                                    if (self.last_update_recieved is None):
                                        self.last_update_recieved = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes.Route.LastUpdateRecieved()
                                        self.last_update_recieved.parent = self
                                        self._children_name_map["last_update_recieved"] = "last-update-recieved"
                                    return self.last_update_recieved

                                if (child_yang_name == "prefix-name"):
                                    if (self.prefix_name is None):
                                        self.prefix_name = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes.Route.PrefixName()
                                        self.prefix_name.parent = self
                                        self._children_name_map["prefix_name"] = "prefix-name"
                                    return self.prefix_name

                                if (child_yang_name == "route-attr-list"):
                                    if (self.route_attr_list is None):
                                        self.route_attr_list = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes.Route.RouteAttrList()
                                        self.route_attr_list.parent = self
                                        self._children_name_map["route_attr_list"] = "route-attr-list"
                                    return self.route_attr_list

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "ext-attributes-list" or name == "last-modified-date" or name == "last-update-recieved" or name == "prefix-name" or name == "route-attr-list" or name == "best-path" or name == "invalid-reason" or name == "neighbor-address" or name == "path-id" or name == "route" or name == "valid-route"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "best-path"):
                                    self.best_path = value
                                    self.best_path.value_namespace = name_space
                                    self.best_path.value_namespace_prefix = name_space_prefix
                                if(value_path == "invalid-reason"):
                                    self.invalid_reason = value
                                    self.invalid_reason.value_namespace = name_space
                                    self.invalid_reason.value_namespace_prefix = name_space_prefix
                                if(value_path == "neighbor-address"):
                                    self.neighbor_address = value
                                    self.neighbor_address.value_namespace = name_space
                                    self.neighbor_address.value_namespace_prefix = name_space_prefix
                                if(value_path == "path-id"):
                                    self.path_id = value
                                    self.path_id.value_namespace = name_space
                                    self.path_id.value_namespace_prefix = name_space_prefix
                                if(value_path == "route"):
                                    self.route = value
                                    self.route.value_namespace = name_space
                                    self.route.value_namespace_prefix = name_space_prefix
                                if(value_path == "valid-route"):
                                    self.valid_route = value
                                    self.valid_route.value_namespace = name_space
                                    self.valid_route.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            for c in self.route:
                                if (c.has_data()):
                                    return True
                            return False

                        def has_operation(self):
                            for c in self.route:
                                if (c.has_operation()):
                                    return True
                            return self.yfilter != YFilter.not_set

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "routes" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                path_buffer = "Cisco-IOS-XR-ipv4-bgp-oc-oper:oc-bgp/bgp-rib/afi-safi-table/ipv4-unicast/loc-rib/%s" % self.get_segment_path()
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "route"):
                                for c in self.route:
                                    segment = c.get_segment_path()
                                    if (segment_path == segment):
                                        return c
                                c = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes.Route()
                                c.parent = self
                                local_reference_key = "ydk::seg::%s" % segment_path
                                self._local_refs[local_reference_key] = c
                                self.route.append(c)
                                return c

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "route"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            pass


                    class NumRoutes(Entity):
                        """
                        Number of routes in adjacency rib out\-bound
                        post\-policy table
                        
                        .. attribute:: num_routes
                        
                        	NumRoutes
                        	**type**\:  int
                        
                        	**range:** 0..18446744073709551615
                        
                        

                        """

                        _prefix = 'ipv4-bgp-oc-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.NumRoutes, self).__init__()

                            self.yang_name = "num-routes"
                            self.yang_parent_name = "loc-rib"

                            self.num_routes = YLeaf(YType.uint64, "num-routes")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("num_routes") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.NumRoutes, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.NumRoutes, self).__setattr__(name, value)

                        def has_data(self):
                            return self.num_routes.is_set

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.num_routes.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "num-routes" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                path_buffer = "Cisco-IOS-XR-ipv4-bgp-oc-oper:oc-bgp/bgp-rib/afi-safi-table/ipv4-unicast/loc-rib/%s" % self.get_segment_path()
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.num_routes.is_set or self.num_routes.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.num_routes.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "num-routes"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "num-routes"):
                                self.num_routes = value
                                self.num_routes.value_namespace = name_space
                                self.num_routes.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        return (
                            (self.num_routes is not None and self.num_routes.has_data()) or
                            (self.routes is not None and self.routes.has_data()))

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            (self.num_routes is not None and self.num_routes.has_operation()) or
                            (self.routes is not None and self.routes.has_operation()))

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "loc-rib" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-ipv4-bgp-oc-oper:oc-bgp/bgp-rib/afi-safi-table/ipv4-unicast/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "num-routes"):
                            if (self.num_routes is None):
                                self.num_routes = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.NumRoutes()
                                self.num_routes.parent = self
                                self._children_name_map["num_routes"] = "num-routes"
                            return self.num_routes

                        if (child_yang_name == "routes"):
                            if (self.routes is None):
                                self.routes = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib.Routes()
                                self.routes.parent = self
                                self._children_name_map["routes"] = "routes"
                            return self.routes

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "num-routes" or name == "routes"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass


                class OpenConfigNeighbors(Entity):
                    """
                    Neighbor list
                    
                    .. attribute:: open_config_neighbor
                    
                    	Neighbor name
                    	**type**\: list of    :py:class:`OpenConfigNeighbor <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor>`
                    
                    

                    """

                    _prefix = 'ipv4-bgp-oc-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors, self).__init__()

                        self.yang_name = "open-config-neighbors"
                        self.yang_parent_name = "ipv4-unicast"

                        self.open_config_neighbor = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in () and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors, self).__setattr__(name, value)


                    class OpenConfigNeighbor(Entity):
                        """
                        Neighbor name
                        
                        .. attribute:: neighbor_address  <key>
                        
                        	Neighbor Address
                        	**type**\: one of the below types:
                        
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        
                        ----
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        
                        ----
                        .. attribute:: adj_rib_in_post
                        
                        	Adjacency rib in\-bound post\-policy table
                        	**type**\:   :py:class:`AdjRibInPost <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost>`
                        
                        .. attribute:: adj_rib_in_pre
                        
                        	Adjacency rib in\-bound pre\-policy table
                        	**type**\:   :py:class:`AdjRibInPre <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre>`
                        
                        .. attribute:: adj_rib_out_post
                        
                        	Adjacency rib out\-bound post\-policy table
                        	**type**\:   :py:class:`AdjRibOutPost <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost>`
                        
                        .. attribute:: adj_rib_out_pre
                        
                        	Adjacency rib out\-bound pre\-policy table
                        	**type**\:   :py:class:`AdjRibOutPre <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre>`
                        
                        

                        """

                        _prefix = 'ipv4-bgp-oc-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor, self).__init__()

                            self.yang_name = "open-config-neighbor"
                            self.yang_parent_name = "open-config-neighbors"

                            self.neighbor_address = YLeaf(YType.str, "neighbor-address")

                            self.adj_rib_in_post = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost()
                            self.adj_rib_in_post.parent = self
                            self._children_name_map["adj_rib_in_post"] = "adj-rib-in-post"
                            self._children_yang_names.add("adj-rib-in-post")

                            self.adj_rib_in_pre = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre()
                            self.adj_rib_in_pre.parent = self
                            self._children_name_map["adj_rib_in_pre"] = "adj-rib-in-pre"
                            self._children_yang_names.add("adj-rib-in-pre")

                            self.adj_rib_out_post = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost()
                            self.adj_rib_out_post.parent = self
                            self._children_name_map["adj_rib_out_post"] = "adj-rib-out-post"
                            self._children_yang_names.add("adj-rib-out-post")

                            self.adj_rib_out_pre = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre()
                            self.adj_rib_out_pre.parent = self
                            self._children_name_map["adj_rib_out_pre"] = "adj-rib-out-pre"
                            self._children_yang_names.add("adj-rib-out-pre")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("neighbor_address") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor, self).__setattr__(name, value)


                        class AdjRibInPost(Entity):
                            """
                            Adjacency rib in\-bound post\-policy table
                            
                            .. attribute:: num_routes
                            
                            	Number of routes in adjacency rib out\-bound post\-policy table
                            	**type**\:   :py:class:`NumRoutes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.NumRoutes>`
                            
                            .. attribute:: routes
                            
                            	routes table
                            	**type**\:   :py:class:`Routes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes>`
                            
                            

                            """

                            _prefix = 'ipv4-bgp-oc-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost, self).__init__()

                                self.yang_name = "adj-rib-in-post"
                                self.yang_parent_name = "open-config-neighbor"

                                self.num_routes = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.NumRoutes()
                                self.num_routes.parent = self
                                self._children_name_map["num_routes"] = "num-routes"
                                self._children_yang_names.add("num-routes")

                                self.routes = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes()
                                self.routes.parent = self
                                self._children_name_map["routes"] = "routes"
                                self._children_yang_names.add("routes")


                            class Routes(Entity):
                                """
                                routes table
                                
                                .. attribute:: route
                                
                                	route entry
                                	**type**\: list of    :py:class:`Route <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route>`
                                
                                

                                """

                                _prefix = 'ipv4-bgp-oc-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes, self).__init__()

                                    self.yang_name = "routes"
                                    self.yang_parent_name = "adj-rib-in-post"

                                    self.route = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes, self).__setattr__(name, value)


                                class Route(Entity):
                                    """
                                    route entry
                                    
                                    .. attribute:: best_path
                                    
                                    	BestPath
                                    	**type**\:  bool
                                    
                                    .. attribute:: ext_attributes_list
                                    
                                    	ExtAttributesList
                                    	**type**\:   :py:class:`ExtAttributesList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.ExtAttributesList>`
                                    
                                    .. attribute:: invalid_reason
                                    
                                    	IndentityRef
                                    	**type**\:   :py:class:`BgpOcInvalidRouteReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.BgpOcInvalidRouteReason>`
                                    
                                    .. attribute:: last_modified_date
                                    
                                    	LastModifiedDate
                                    	**type**\:   :py:class:`LastModifiedDate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.LastModifiedDate>`
                                    
                                    .. attribute:: last_update_recieved
                                    
                                    	LastUpdateRecieved
                                    	**type**\:   :py:class:`LastUpdateRecieved <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.LastUpdateRecieved>`
                                    
                                    .. attribute:: neighbor_address
                                    
                                    	Neighbor address
                                    	**type**\: one of the below types:
                                    
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    
                                    ----
                                    	**type**\:  str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    
                                    ----
                                    .. attribute:: path_id
                                    
                                    	Path ID
                                    	**type**\:  int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    .. attribute:: prefix_name
                                    
                                    	Prefix
                                    	**type**\:   :py:class:`PrefixName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.PrefixName>`
                                    
                                    .. attribute:: route
                                    
                                    	Network in prefix/length format
                                    	**type**\: one of the below types:
                                    
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                    
                                    
                                    ----
                                    	**type**\:  str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                    
                                    
                                    ----
                                    .. attribute:: route_attr_list
                                    
                                    	RouteAttributesList
                                    	**type**\:   :py:class:`RouteAttrList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.RouteAttrList>`
                                    
                                    .. attribute:: valid_route
                                    
                                    	ValidRoute
                                    	**type**\:  bool
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-oc-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route, self).__init__()

                                        self.yang_name = "route"
                                        self.yang_parent_name = "routes"

                                        self.best_path = YLeaf(YType.boolean, "best-path")

                                        self.invalid_reason = YLeaf(YType.enumeration, "invalid-reason")

                                        self.neighbor_address = YLeaf(YType.str, "neighbor-address")

                                        self.path_id = YLeaf(YType.int32, "path-id")

                                        self.route = YLeaf(YType.str, "route")

                                        self.valid_route = YLeaf(YType.boolean, "valid-route")

                                        self.ext_attributes_list = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.ExtAttributesList()
                                        self.ext_attributes_list.parent = self
                                        self._children_name_map["ext_attributes_list"] = "ext-attributes-list"
                                        self._children_yang_names.add("ext-attributes-list")

                                        self.last_modified_date = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.LastModifiedDate()
                                        self.last_modified_date.parent = self
                                        self._children_name_map["last_modified_date"] = "last-modified-date"
                                        self._children_yang_names.add("last-modified-date")

                                        self.last_update_recieved = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.LastUpdateRecieved()
                                        self.last_update_recieved.parent = self
                                        self._children_name_map["last_update_recieved"] = "last-update-recieved"
                                        self._children_yang_names.add("last-update-recieved")

                                        self.prefix_name = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.PrefixName()
                                        self.prefix_name.parent = self
                                        self._children_name_map["prefix_name"] = "prefix-name"
                                        self._children_yang_names.add("prefix-name")

                                        self.route_attr_list = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.RouteAttrList()
                                        self.route_attr_list.parent = self
                                        self._children_name_map["route_attr_list"] = "route-attr-list"
                                        self._children_yang_names.add("route-attr-list")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("best_path",
                                                        "invalid_reason",
                                                        "neighbor_address",
                                                        "path_id",
                                                        "route",
                                                        "valid_route") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route, self).__setattr__(name, value)


                                    class PrefixName(Entity):
                                        """
                                        Prefix
                                        
                                        .. attribute:: prefix
                                        
                                        	Prefix
                                        	**type**\:   :py:class:`Prefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.PrefixName.Prefix>`
                                        
                                        .. attribute:: prefix_length
                                        
                                        	Prefix length
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-oc-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.PrefixName, self).__init__()

                                            self.yang_name = "prefix-name"
                                            self.yang_parent_name = "route"

                                            self.prefix_length = YLeaf(YType.uint8, "prefix-length")

                                            self.prefix = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.PrefixName.Prefix()
                                            self.prefix.parent = self
                                            self._children_name_map["prefix"] = "prefix"
                                            self._children_yang_names.add("prefix")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("prefix_length") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.PrefixName, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.PrefixName, self).__setattr__(name, value)


                                        class Prefix(Entity):
                                            """
                                            Prefix
                                            
                                            .. attribute:: afi
                                            
                                            	AFI
                                            	**type**\:   :py:class:`BgpOcAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.BgpOcAfi>`
                                            
                                            .. attribute:: ipv4_address
                                            
                                            	IPv4 Addr
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: ipv6_address
                                            
                                            	IPv6 Addr
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-oc-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.PrefixName.Prefix, self).__init__()

                                                self.yang_name = "prefix"
                                                self.yang_parent_name = "prefix-name"

                                                self.afi = YLeaf(YType.enumeration, "afi")

                                                self.ipv4_address = YLeaf(YType.str, "ipv4-address")

                                                self.ipv6_address = YLeaf(YType.str, "ipv6-address")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("afi",
                                                                "ipv4_address",
                                                                "ipv6_address") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.PrefixName.Prefix, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.PrefixName.Prefix, self).__setattr__(name, value)

                                            def has_data(self):
                                                return (
                                                    self.afi.is_set or
                                                    self.ipv4_address.is_set or
                                                    self.ipv6_address.is_set)

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.afi.yfilter != YFilter.not_set or
                                                    self.ipv4_address.yfilter != YFilter.not_set or
                                                    self.ipv6_address.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "prefix" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.afi.is_set or self.afi.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.afi.get_name_leafdata())
                                                if (self.ipv4_address.is_set or self.ipv4_address.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.ipv4_address.get_name_leafdata())
                                                if (self.ipv6_address.is_set or self.ipv6_address.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.ipv6_address.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "afi" or name == "ipv4-address" or name == "ipv6-address"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "afi"):
                                                    self.afi = value
                                                    self.afi.value_namespace = name_space
                                                    self.afi.value_namespace_prefix = name_space_prefix
                                                if(value_path == "ipv4-address"):
                                                    self.ipv4_address = value
                                                    self.ipv4_address.value_namespace = name_space
                                                    self.ipv4_address.value_namespace_prefix = name_space_prefix
                                                if(value_path == "ipv6-address"):
                                                    self.ipv6_address = value
                                                    self.ipv6_address.value_namespace = name_space
                                                    self.ipv6_address.value_namespace_prefix = name_space_prefix

                                        def has_data(self):
                                            return (
                                                self.prefix_length.is_set or
                                                (self.prefix is not None and self.prefix.has_data()))

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.prefix_length.yfilter != YFilter.not_set or
                                                (self.prefix is not None and self.prefix.has_operation()))

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "prefix-name" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.prefix_length.is_set or self.prefix_length.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.prefix_length.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            if (child_yang_name == "prefix"):
                                                if (self.prefix is None):
                                                    self.prefix = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.PrefixName.Prefix()
                                                    self.prefix.parent = self
                                                    self._children_name_map["prefix"] = "prefix"
                                                return self.prefix

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "prefix" or name == "prefix-length"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "prefix-length"):
                                                self.prefix_length = value
                                                self.prefix_length.value_namespace = name_space
                                                self.prefix_length.value_namespace_prefix = name_space_prefix


                                    class RouteAttrList(Entity):
                                        """
                                        RouteAttributesList
                                        
                                        .. attribute:: aggregrator_attributes
                                        
                                        	AggregatorList
                                        	**type**\:   :py:class:`AggregratorAttributes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.RouteAttrList.AggregratorAttributes>`
                                        
                                        .. attribute:: as4_path
                                        
                                        	AS4 Path
                                        	**type**\:  str
                                        
                                        .. attribute:: as_path
                                        
                                        	AS Path
                                        	**type**\:  str
                                        
                                        .. attribute:: atomic_aggr
                                        
                                        	AtomicAggr
                                        	**type**\:  bool
                                        
                                        .. attribute:: community
                                        
                                        	CommunityArray
                                        	**type**\: list of    :py:class:`Community <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.RouteAttrList.Community>`
                                        
                                        .. attribute:: local_pref
                                        
                                        	LocalPref
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: med
                                        
                                        	Med
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: next_hop
                                        
                                        	NextHopAddress
                                        	**type**\:   :py:class:`NextHop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.RouteAttrList.NextHop>`
                                        
                                        .. attribute:: origin_type
                                        
                                        	Origin Attribute Type
                                        	**type**\:   :py:class:`BgpOcOriginAttr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.BgpOcOriginAttr>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-oc-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.RouteAttrList, self).__init__()

                                            self.yang_name = "route-attr-list"
                                            self.yang_parent_name = "route"

                                            self.as4_path = YLeaf(YType.str, "as4-path")

                                            self.as_path = YLeaf(YType.str, "as-path")

                                            self.atomic_aggr = YLeaf(YType.boolean, "atomic-aggr")

                                            self.local_pref = YLeaf(YType.uint32, "local-pref")

                                            self.med = YLeaf(YType.uint32, "med")

                                            self.origin_type = YLeaf(YType.enumeration, "origin-type")

                                            self.aggregrator_attributes = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.RouteAttrList.AggregratorAttributes()
                                            self.aggregrator_attributes.parent = self
                                            self._children_name_map["aggregrator_attributes"] = "aggregrator-attributes"
                                            self._children_yang_names.add("aggregrator-attributes")

                                            self.next_hop = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.RouteAttrList.NextHop()
                                            self.next_hop.parent = self
                                            self._children_name_map["next_hop"] = "next-hop"
                                            self._children_yang_names.add("next-hop")

                                            self.community = YList(self)

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("as4_path",
                                                            "as_path",
                                                            "atomic_aggr",
                                                            "local_pref",
                                                            "med",
                                                            "origin_type") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.RouteAttrList, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.RouteAttrList, self).__setattr__(name, value)


                                        class NextHop(Entity):
                                            """
                                            NextHopAddress
                                            
                                            .. attribute:: afi
                                            
                                            	AFI
                                            	**type**\:   :py:class:`BgpOcAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.BgpOcAfi>`
                                            
                                            .. attribute:: ipv4_address
                                            
                                            	IPv4 Addr
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: ipv6_address
                                            
                                            	IPv6 Addr
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-oc-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.RouteAttrList.NextHop, self).__init__()

                                                self.yang_name = "next-hop"
                                                self.yang_parent_name = "route-attr-list"

                                                self.afi = YLeaf(YType.enumeration, "afi")

                                                self.ipv4_address = YLeaf(YType.str, "ipv4-address")

                                                self.ipv6_address = YLeaf(YType.str, "ipv6-address")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("afi",
                                                                "ipv4_address",
                                                                "ipv6_address") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.RouteAttrList.NextHop, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.RouteAttrList.NextHop, self).__setattr__(name, value)

                                            def has_data(self):
                                                return (
                                                    self.afi.is_set or
                                                    self.ipv4_address.is_set or
                                                    self.ipv6_address.is_set)

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.afi.yfilter != YFilter.not_set or
                                                    self.ipv4_address.yfilter != YFilter.not_set or
                                                    self.ipv6_address.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "next-hop" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.afi.is_set or self.afi.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.afi.get_name_leafdata())
                                                if (self.ipv4_address.is_set or self.ipv4_address.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.ipv4_address.get_name_leafdata())
                                                if (self.ipv6_address.is_set or self.ipv6_address.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.ipv6_address.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "afi" or name == "ipv4-address" or name == "ipv6-address"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "afi"):
                                                    self.afi = value
                                                    self.afi.value_namespace = name_space
                                                    self.afi.value_namespace_prefix = name_space_prefix
                                                if(value_path == "ipv4-address"):
                                                    self.ipv4_address = value
                                                    self.ipv4_address.value_namespace = name_space
                                                    self.ipv4_address.value_namespace_prefix = name_space_prefix
                                                if(value_path == "ipv6-address"):
                                                    self.ipv6_address = value
                                                    self.ipv6_address.value_namespace = name_space
                                                    self.ipv6_address.value_namespace_prefix = name_space_prefix


                                        class AggregratorAttributes(Entity):
                                            """
                                            AggregatorList
                                            
                                            .. attribute:: address
                                            
                                            	IPv4 address
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: as4
                                            
                                            	AS4 number
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: as_
                                            
                                            	AS number
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-oc-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.RouteAttrList.AggregratorAttributes, self).__init__()

                                                self.yang_name = "aggregrator-attributes"
                                                self.yang_parent_name = "route-attr-list"

                                                self.address = YLeaf(YType.str, "address")

                                                self.as4 = YLeaf(YType.uint32, "as4")

                                                self.as_ = YLeaf(YType.uint32, "as")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("address",
                                                                "as4",
                                                                "as_") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.RouteAttrList.AggregratorAttributes, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.RouteAttrList.AggregratorAttributes, self).__setattr__(name, value)

                                            def has_data(self):
                                                return (
                                                    self.address.is_set or
                                                    self.as4.is_set or
                                                    self.as_.is_set)

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.address.yfilter != YFilter.not_set or
                                                    self.as4.yfilter != YFilter.not_set or
                                                    self.as_.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "aggregrator-attributes" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.address.is_set or self.address.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.address.get_name_leafdata())
                                                if (self.as4.is_set or self.as4.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.as4.get_name_leafdata())
                                                if (self.as_.is_set or self.as_.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.as_.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "address" or name == "as4" or name == "as"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "address"):
                                                    self.address = value
                                                    self.address.value_namespace = name_space
                                                    self.address.value_namespace_prefix = name_space_prefix
                                                if(value_path == "as4"):
                                                    self.as4 = value
                                                    self.as4.value_namespace = name_space
                                                    self.as4.value_namespace_prefix = name_space_prefix
                                                if(value_path == "as"):
                                                    self.as_ = value
                                                    self.as_.value_namespace = name_space
                                                    self.as_.value_namespace_prefix = name_space_prefix


                                        class Community(Entity):
                                            """
                                            CommunityArray
                                            
                                            .. attribute:: objects
                                            
                                            	BGP OC objects
                                            	**type**\:  str
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-oc-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.RouteAttrList.Community, self).__init__()

                                                self.yang_name = "community"
                                                self.yang_parent_name = "route-attr-list"

                                                self.objects = YLeaf(YType.str, "objects")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("objects") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.RouteAttrList.Community, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.RouteAttrList.Community, self).__setattr__(name, value)

                                            def has_data(self):
                                                return self.objects.is_set

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.objects.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "community" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.objects.is_set or self.objects.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.objects.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "objects"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "objects"):
                                                    self.objects = value
                                                    self.objects.value_namespace = name_space
                                                    self.objects.value_namespace_prefix = name_space_prefix

                                        def has_data(self):
                                            for c in self.community:
                                                if (c.has_data()):
                                                    return True
                                            return (
                                                self.as4_path.is_set or
                                                self.as_path.is_set or
                                                self.atomic_aggr.is_set or
                                                self.local_pref.is_set or
                                                self.med.is_set or
                                                self.origin_type.is_set or
                                                (self.aggregrator_attributes is not None and self.aggregrator_attributes.has_data()) or
                                                (self.next_hop is not None and self.next_hop.has_data()))

                                        def has_operation(self):
                                            for c in self.community:
                                                if (c.has_operation()):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.as4_path.yfilter != YFilter.not_set or
                                                self.as_path.yfilter != YFilter.not_set or
                                                self.atomic_aggr.yfilter != YFilter.not_set or
                                                self.local_pref.yfilter != YFilter.not_set or
                                                self.med.yfilter != YFilter.not_set or
                                                self.origin_type.yfilter != YFilter.not_set or
                                                (self.aggregrator_attributes is not None and self.aggregrator_attributes.has_operation()) or
                                                (self.next_hop is not None and self.next_hop.has_operation()))

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "route-attr-list" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.as4_path.is_set or self.as4_path.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.as4_path.get_name_leafdata())
                                            if (self.as_path.is_set or self.as_path.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.as_path.get_name_leafdata())
                                            if (self.atomic_aggr.is_set or self.atomic_aggr.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.atomic_aggr.get_name_leafdata())
                                            if (self.local_pref.is_set or self.local_pref.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.local_pref.get_name_leafdata())
                                            if (self.med.is_set or self.med.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.med.get_name_leafdata())
                                            if (self.origin_type.is_set or self.origin_type.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.origin_type.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            if (child_yang_name == "aggregrator-attributes"):
                                                if (self.aggregrator_attributes is None):
                                                    self.aggregrator_attributes = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.RouteAttrList.AggregratorAttributes()
                                                    self.aggregrator_attributes.parent = self
                                                    self._children_name_map["aggregrator_attributes"] = "aggregrator-attributes"
                                                return self.aggregrator_attributes

                                            if (child_yang_name == "community"):
                                                for c in self.community:
                                                    segment = c.get_segment_path()
                                                    if (segment_path == segment):
                                                        return c
                                                c = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.RouteAttrList.Community()
                                                c.parent = self
                                                local_reference_key = "ydk::seg::%s" % segment_path
                                                self._local_refs[local_reference_key] = c
                                                self.community.append(c)
                                                return c

                                            if (child_yang_name == "next-hop"):
                                                if (self.next_hop is None):
                                                    self.next_hop = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.RouteAttrList.NextHop()
                                                    self.next_hop.parent = self
                                                    self._children_name_map["next_hop"] = "next-hop"
                                                return self.next_hop

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "aggregrator-attributes" or name == "community" or name == "next-hop" or name == "as4-path" or name == "as-path" or name == "atomic-aggr" or name == "local-pref" or name == "med" or name == "origin-type"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "as4-path"):
                                                self.as4_path = value
                                                self.as4_path.value_namespace = name_space
                                                self.as4_path.value_namespace_prefix = name_space_prefix
                                            if(value_path == "as-path"):
                                                self.as_path = value
                                                self.as_path.value_namespace = name_space
                                                self.as_path.value_namespace_prefix = name_space_prefix
                                            if(value_path == "atomic-aggr"):
                                                self.atomic_aggr = value
                                                self.atomic_aggr.value_namespace = name_space
                                                self.atomic_aggr.value_namespace_prefix = name_space_prefix
                                            if(value_path == "local-pref"):
                                                self.local_pref = value
                                                self.local_pref.value_namespace = name_space
                                                self.local_pref.value_namespace_prefix = name_space_prefix
                                            if(value_path == "med"):
                                                self.med = value
                                                self.med.value_namespace = name_space
                                                self.med.value_namespace_prefix = name_space_prefix
                                            if(value_path == "origin-type"):
                                                self.origin_type = value
                                                self.origin_type.value_namespace = name_space
                                                self.origin_type.value_namespace_prefix = name_space_prefix


                                    class ExtAttributesList(Entity):
                                        """
                                        ExtAttributesList
                                        
                                        .. attribute:: aigp
                                        
                                        	AIGP
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: cluster
                                        
                                        	ClusterList
                                        	**type**\:  list of str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        .. attribute:: ext_community
                                        
                                        	ExtendedCommunityArray
                                        	**type**\: list of    :py:class:`ExtCommunity <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.ExtAttributesList.ExtCommunity>`
                                        
                                        .. attribute:: originator_id
                                        
                                        	OriginatorID
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        .. attribute:: path_id
                                        
                                        	PathId
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: unknown_attributes
                                        
                                        	UnknownAttributes
                                        	**type**\: list of    :py:class:`UnknownAttributes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.ExtAttributesList.UnknownAttributes>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-oc-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.ExtAttributesList, self).__init__()

                                            self.yang_name = "ext-attributes-list"
                                            self.yang_parent_name = "route"

                                            self.aigp = YLeaf(YType.uint64, "aigp")

                                            self.cluster = YLeafList(YType.str, "cluster")

                                            self.originator_id = YLeaf(YType.str, "originator-id")

                                            self.path_id = YLeaf(YType.uint32, "path-id")

                                            self.ext_community = YList(self)
                                            self.unknown_attributes = YList(self)

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("aigp",
                                                            "cluster",
                                                            "originator_id",
                                                            "path_id") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.ExtAttributesList, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.ExtAttributesList, self).__setattr__(name, value)


                                        class ExtCommunity(Entity):
                                            """
                                            ExtendedCommunityArray
                                            
                                            .. attribute:: objects
                                            
                                            	BGP OC objects
                                            	**type**\:  str
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-oc-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.ExtAttributesList.ExtCommunity, self).__init__()

                                                self.yang_name = "ext-community"
                                                self.yang_parent_name = "ext-attributes-list"

                                                self.objects = YLeaf(YType.str, "objects")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("objects") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.ExtAttributesList.ExtCommunity, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.ExtAttributesList.ExtCommunity, self).__setattr__(name, value)

                                            def has_data(self):
                                                return self.objects.is_set

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.objects.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "ext-community" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.objects.is_set or self.objects.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.objects.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "objects"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "objects"):
                                                    self.objects = value
                                                    self.objects.value_namespace = name_space
                                                    self.objects.value_namespace_prefix = name_space_prefix


                                        class UnknownAttributes(Entity):
                                            """
                                            UnknownAttributes
                                            
                                            .. attribute:: attribute_length
                                            
                                            	AttributeLength
                                            	**type**\:  int
                                            
                                            	**range:** 0..65535
                                            
                                            .. attribute:: attribute_type
                                            
                                            	AttributeType
                                            	**type**\:  int
                                            
                                            	**range:** 0..65535
                                            
                                            .. attribute:: attribute_value
                                            
                                            	Atributevalue
                                            	**type**\:  str
                                            
                                            	**pattern:** ([0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2})\*)?
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-oc-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.ExtAttributesList.UnknownAttributes, self).__init__()

                                                self.yang_name = "unknown-attributes"
                                                self.yang_parent_name = "ext-attributes-list"

                                                self.attribute_length = YLeaf(YType.uint16, "attribute-length")

                                                self.attribute_type = YLeaf(YType.uint16, "attribute-type")

                                                self.attribute_value = YLeaf(YType.str, "attribute-value")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("attribute_length",
                                                                "attribute_type",
                                                                "attribute_value") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.ExtAttributesList.UnknownAttributes, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.ExtAttributesList.UnknownAttributes, self).__setattr__(name, value)

                                            def has_data(self):
                                                return (
                                                    self.attribute_length.is_set or
                                                    self.attribute_type.is_set or
                                                    self.attribute_value.is_set)

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.attribute_length.yfilter != YFilter.not_set or
                                                    self.attribute_type.yfilter != YFilter.not_set or
                                                    self.attribute_value.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "unknown-attributes" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.attribute_length.is_set or self.attribute_length.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.attribute_length.get_name_leafdata())
                                                if (self.attribute_type.is_set or self.attribute_type.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.attribute_type.get_name_leafdata())
                                                if (self.attribute_value.is_set or self.attribute_value.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.attribute_value.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "attribute-length" or name == "attribute-type" or name == "attribute-value"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "attribute-length"):
                                                    self.attribute_length = value
                                                    self.attribute_length.value_namespace = name_space
                                                    self.attribute_length.value_namespace_prefix = name_space_prefix
                                                if(value_path == "attribute-type"):
                                                    self.attribute_type = value
                                                    self.attribute_type.value_namespace = name_space
                                                    self.attribute_type.value_namespace_prefix = name_space_prefix
                                                if(value_path == "attribute-value"):
                                                    self.attribute_value = value
                                                    self.attribute_value.value_namespace = name_space
                                                    self.attribute_value.value_namespace_prefix = name_space_prefix

                                        def has_data(self):
                                            for c in self.ext_community:
                                                if (c.has_data()):
                                                    return True
                                            for c in self.unknown_attributes:
                                                if (c.has_data()):
                                                    return True
                                            for leaf in self.cluster.getYLeafs():
                                                if (leaf.yfilter != YFilter.not_set):
                                                    return True
                                            return (
                                                self.aigp.is_set or
                                                self.originator_id.is_set or
                                                self.path_id.is_set)

                                        def has_operation(self):
                                            for c in self.ext_community:
                                                if (c.has_operation()):
                                                    return True
                                            for c in self.unknown_attributes:
                                                if (c.has_operation()):
                                                    return True
                                            for leaf in self.cluster.getYLeafs():
                                                if (leaf.is_set):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.aigp.yfilter != YFilter.not_set or
                                                self.cluster.yfilter != YFilter.not_set or
                                                self.originator_id.yfilter != YFilter.not_set or
                                                self.path_id.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "ext-attributes-list" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.aigp.is_set or self.aigp.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.aigp.get_name_leafdata())
                                            if (self.originator_id.is_set or self.originator_id.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.originator_id.get_name_leafdata())
                                            if (self.path_id.is_set or self.path_id.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.path_id.get_name_leafdata())

                                            leaf_name_data.extend(self.cluster.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            if (child_yang_name == "ext-community"):
                                                for c in self.ext_community:
                                                    segment = c.get_segment_path()
                                                    if (segment_path == segment):
                                                        return c
                                                c = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.ExtAttributesList.ExtCommunity()
                                                c.parent = self
                                                local_reference_key = "ydk::seg::%s" % segment_path
                                                self._local_refs[local_reference_key] = c
                                                self.ext_community.append(c)
                                                return c

                                            if (child_yang_name == "unknown-attributes"):
                                                for c in self.unknown_attributes:
                                                    segment = c.get_segment_path()
                                                    if (segment_path == segment):
                                                        return c
                                                c = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.ExtAttributesList.UnknownAttributes()
                                                c.parent = self
                                                local_reference_key = "ydk::seg::%s" % segment_path
                                                self._local_refs[local_reference_key] = c
                                                self.unknown_attributes.append(c)
                                                return c

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "ext-community" or name == "unknown-attributes" or name == "aigp" or name == "cluster" or name == "originator-id" or name == "path-id"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "aigp"):
                                                self.aigp = value
                                                self.aigp.value_namespace = name_space
                                                self.aigp.value_namespace_prefix = name_space_prefix
                                            if(value_path == "cluster"):
                                                self.cluster.append(value)
                                            if(value_path == "originator-id"):
                                                self.originator_id = value
                                                self.originator_id.value_namespace = name_space
                                                self.originator_id.value_namespace_prefix = name_space_prefix
                                            if(value_path == "path-id"):
                                                self.path_id = value
                                                self.path_id.value_namespace = name_space
                                                self.path_id.value_namespace_prefix = name_space_prefix


                                    class LastModifiedDate(Entity):
                                        """
                                        LastModifiedDate
                                        
                                        .. attribute:: time_value
                                        
                                        	TimeValue
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-oc-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.LastModifiedDate, self).__init__()

                                            self.yang_name = "last-modified-date"
                                            self.yang_parent_name = "route"

                                            self.time_value = YLeaf(YType.str, "time-value")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("time_value") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.LastModifiedDate, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.LastModifiedDate, self).__setattr__(name, value)

                                        def has_data(self):
                                            return self.time_value.is_set

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.time_value.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "last-modified-date" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.time_value.is_set or self.time_value.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.time_value.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "time-value"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "time-value"):
                                                self.time_value = value
                                                self.time_value.value_namespace = name_space
                                                self.time_value.value_namespace_prefix = name_space_prefix


                                    class LastUpdateRecieved(Entity):
                                        """
                                        LastUpdateRecieved
                                        
                                        .. attribute:: time_value
                                        
                                        	TimeValue
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-oc-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.LastUpdateRecieved, self).__init__()

                                            self.yang_name = "last-update-recieved"
                                            self.yang_parent_name = "route"

                                            self.time_value = YLeaf(YType.str, "time-value")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("time_value") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.LastUpdateRecieved, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.LastUpdateRecieved, self).__setattr__(name, value)

                                        def has_data(self):
                                            return self.time_value.is_set

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.time_value.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "last-update-recieved" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.time_value.is_set or self.time_value.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.time_value.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "time-value"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "time-value"):
                                                self.time_value = value
                                                self.time_value.value_namespace = name_space
                                                self.time_value.value_namespace_prefix = name_space_prefix

                                    def has_data(self):
                                        return (
                                            self.best_path.is_set or
                                            self.invalid_reason.is_set or
                                            self.neighbor_address.is_set or
                                            self.path_id.is_set or
                                            self.route.is_set or
                                            self.valid_route.is_set or
                                            (self.ext_attributes_list is not None and self.ext_attributes_list.has_data()) or
                                            (self.last_modified_date is not None and self.last_modified_date.has_data()) or
                                            (self.last_update_recieved is not None and self.last_update_recieved.has_data()) or
                                            (self.prefix_name is not None and self.prefix_name.has_data()) or
                                            (self.route_attr_list is not None and self.route_attr_list.has_data()))

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.best_path.yfilter != YFilter.not_set or
                                            self.invalid_reason.yfilter != YFilter.not_set or
                                            self.neighbor_address.yfilter != YFilter.not_set or
                                            self.path_id.yfilter != YFilter.not_set or
                                            self.route.yfilter != YFilter.not_set or
                                            self.valid_route.yfilter != YFilter.not_set or
                                            (self.ext_attributes_list is not None and self.ext_attributes_list.has_operation()) or
                                            (self.last_modified_date is not None and self.last_modified_date.has_operation()) or
                                            (self.last_update_recieved is not None and self.last_update_recieved.has_operation()) or
                                            (self.prefix_name is not None and self.prefix_name.has_operation()) or
                                            (self.route_attr_list is not None and self.route_attr_list.has_operation()))

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "route" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.best_path.is_set or self.best_path.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.best_path.get_name_leafdata())
                                        if (self.invalid_reason.is_set or self.invalid_reason.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.invalid_reason.get_name_leafdata())
                                        if (self.neighbor_address.is_set or self.neighbor_address.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.neighbor_address.get_name_leafdata())
                                        if (self.path_id.is_set or self.path_id.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.path_id.get_name_leafdata())
                                        if (self.route.is_set or self.route.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.route.get_name_leafdata())
                                        if (self.valid_route.is_set or self.valid_route.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.valid_route.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "ext-attributes-list"):
                                            if (self.ext_attributes_list is None):
                                                self.ext_attributes_list = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.ExtAttributesList()
                                                self.ext_attributes_list.parent = self
                                                self._children_name_map["ext_attributes_list"] = "ext-attributes-list"
                                            return self.ext_attributes_list

                                        if (child_yang_name == "last-modified-date"):
                                            if (self.last_modified_date is None):
                                                self.last_modified_date = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.LastModifiedDate()
                                                self.last_modified_date.parent = self
                                                self._children_name_map["last_modified_date"] = "last-modified-date"
                                            return self.last_modified_date

                                        if (child_yang_name == "last-update-recieved"):
                                            if (self.last_update_recieved is None):
                                                self.last_update_recieved = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.LastUpdateRecieved()
                                                self.last_update_recieved.parent = self
                                                self._children_name_map["last_update_recieved"] = "last-update-recieved"
                                            return self.last_update_recieved

                                        if (child_yang_name == "prefix-name"):
                                            if (self.prefix_name is None):
                                                self.prefix_name = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.PrefixName()
                                                self.prefix_name.parent = self
                                                self._children_name_map["prefix_name"] = "prefix-name"
                                            return self.prefix_name

                                        if (child_yang_name == "route-attr-list"):
                                            if (self.route_attr_list is None):
                                                self.route_attr_list = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.RouteAttrList()
                                                self.route_attr_list.parent = self
                                                self._children_name_map["route_attr_list"] = "route-attr-list"
                                            return self.route_attr_list

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "ext-attributes-list" or name == "last-modified-date" or name == "last-update-recieved" or name == "prefix-name" or name == "route-attr-list" or name == "best-path" or name == "invalid-reason" or name == "neighbor-address" or name == "path-id" or name == "route" or name == "valid-route"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "best-path"):
                                            self.best_path = value
                                            self.best_path.value_namespace = name_space
                                            self.best_path.value_namespace_prefix = name_space_prefix
                                        if(value_path == "invalid-reason"):
                                            self.invalid_reason = value
                                            self.invalid_reason.value_namespace = name_space
                                            self.invalid_reason.value_namespace_prefix = name_space_prefix
                                        if(value_path == "neighbor-address"):
                                            self.neighbor_address = value
                                            self.neighbor_address.value_namespace = name_space
                                            self.neighbor_address.value_namespace_prefix = name_space_prefix
                                        if(value_path == "path-id"):
                                            self.path_id = value
                                            self.path_id.value_namespace = name_space
                                            self.path_id.value_namespace_prefix = name_space_prefix
                                        if(value_path == "route"):
                                            self.route = value
                                            self.route.value_namespace = name_space
                                            self.route.value_namespace_prefix = name_space_prefix
                                        if(value_path == "valid-route"):
                                            self.valid_route = value
                                            self.valid_route.value_namespace = name_space
                                            self.valid_route.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.route:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.route:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "routes" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "route"):
                                        for c in self.route:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.route.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "route"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class NumRoutes(Entity):
                                """
                                Number of routes in adjacency rib out\-bound
                                post\-policy table
                                
                                .. attribute:: num_routes
                                
                                	NumRoutes
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv4-bgp-oc-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.NumRoutes, self).__init__()

                                    self.yang_name = "num-routes"
                                    self.yang_parent_name = "adj-rib-in-post"

                                    self.num_routes = YLeaf(YType.uint64, "num-routes")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("num_routes") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.NumRoutes, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.NumRoutes, self).__setattr__(name, value)

                                def has_data(self):
                                    return self.num_routes.is_set

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.num_routes.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "num-routes" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.num_routes.is_set or self.num_routes.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.num_routes.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "num-routes"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "num-routes"):
                                        self.num_routes = value
                                        self.num_routes.value_namespace = name_space
                                        self.num_routes.value_namespace_prefix = name_space_prefix

                            def has_data(self):
                                return (
                                    (self.num_routes is not None and self.num_routes.has_data()) or
                                    (self.routes is not None and self.routes.has_data()))

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    (self.num_routes is not None and self.num_routes.has_operation()) or
                                    (self.routes is not None and self.routes.has_operation()))

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "adj-rib-in-post" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "num-routes"):
                                    if (self.num_routes is None):
                                        self.num_routes = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.NumRoutes()
                                        self.num_routes.parent = self
                                        self._children_name_map["num_routes"] = "num-routes"
                                    return self.num_routes

                                if (child_yang_name == "routes"):
                                    if (self.routes is None):
                                        self.routes = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes()
                                        self.routes.parent = self
                                        self._children_name_map["routes"] = "routes"
                                    return self.routes

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "num-routes" or name == "routes"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                pass


                        class AdjRibOutPost(Entity):
                            """
                            Adjacency rib out\-bound post\-policy table
                            
                            .. attribute:: num_routes
                            
                            	Number of routes in adjacency rib out\-bound post\-policy table
                            	**type**\:   :py:class:`NumRoutes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.NumRoutes>`
                            
                            .. attribute:: routes
                            
                            	routes table
                            	**type**\:   :py:class:`Routes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes>`
                            
                            

                            """

                            _prefix = 'ipv4-bgp-oc-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost, self).__init__()

                                self.yang_name = "adj-rib-out-post"
                                self.yang_parent_name = "open-config-neighbor"

                                self.num_routes = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.NumRoutes()
                                self.num_routes.parent = self
                                self._children_name_map["num_routes"] = "num-routes"
                                self._children_yang_names.add("num-routes")

                                self.routes = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes()
                                self.routes.parent = self
                                self._children_name_map["routes"] = "routes"
                                self._children_yang_names.add("routes")


                            class Routes(Entity):
                                """
                                routes table
                                
                                .. attribute:: route
                                
                                	route entry
                                	**type**\: list of    :py:class:`Route <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route>`
                                
                                

                                """

                                _prefix = 'ipv4-bgp-oc-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes, self).__init__()

                                    self.yang_name = "routes"
                                    self.yang_parent_name = "adj-rib-out-post"

                                    self.route = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes, self).__setattr__(name, value)


                                class Route(Entity):
                                    """
                                    route entry
                                    
                                    .. attribute:: best_path
                                    
                                    	BestPath
                                    	**type**\:  bool
                                    
                                    .. attribute:: ext_attributes_list
                                    
                                    	ExtAttributesList
                                    	**type**\:   :py:class:`ExtAttributesList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.ExtAttributesList>`
                                    
                                    .. attribute:: invalid_reason
                                    
                                    	IndentityRef
                                    	**type**\:   :py:class:`BgpOcInvalidRouteReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.BgpOcInvalidRouteReason>`
                                    
                                    .. attribute:: last_modified_date
                                    
                                    	LastModifiedDate
                                    	**type**\:   :py:class:`LastModifiedDate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.LastModifiedDate>`
                                    
                                    .. attribute:: last_update_recieved
                                    
                                    	LastUpdateRecieved
                                    	**type**\:   :py:class:`LastUpdateRecieved <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.LastUpdateRecieved>`
                                    
                                    .. attribute:: neighbor_address
                                    
                                    	Neighbor address
                                    	**type**\: one of the below types:
                                    
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    
                                    ----
                                    	**type**\:  str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    
                                    ----
                                    .. attribute:: path_id
                                    
                                    	Path ID
                                    	**type**\:  int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    .. attribute:: prefix_name
                                    
                                    	Prefix
                                    	**type**\:   :py:class:`PrefixName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.PrefixName>`
                                    
                                    .. attribute:: route
                                    
                                    	Network in prefix/length format
                                    	**type**\: one of the below types:
                                    
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                    
                                    
                                    ----
                                    	**type**\:  str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                    
                                    
                                    ----
                                    .. attribute:: route_attr_list
                                    
                                    	RouteAttributesList
                                    	**type**\:   :py:class:`RouteAttrList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.RouteAttrList>`
                                    
                                    .. attribute:: valid_route
                                    
                                    	ValidRoute
                                    	**type**\:  bool
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-oc-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route, self).__init__()

                                        self.yang_name = "route"
                                        self.yang_parent_name = "routes"

                                        self.best_path = YLeaf(YType.boolean, "best-path")

                                        self.invalid_reason = YLeaf(YType.enumeration, "invalid-reason")

                                        self.neighbor_address = YLeaf(YType.str, "neighbor-address")

                                        self.path_id = YLeaf(YType.int32, "path-id")

                                        self.route = YLeaf(YType.str, "route")

                                        self.valid_route = YLeaf(YType.boolean, "valid-route")

                                        self.ext_attributes_list = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.ExtAttributesList()
                                        self.ext_attributes_list.parent = self
                                        self._children_name_map["ext_attributes_list"] = "ext-attributes-list"
                                        self._children_yang_names.add("ext-attributes-list")

                                        self.last_modified_date = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.LastModifiedDate()
                                        self.last_modified_date.parent = self
                                        self._children_name_map["last_modified_date"] = "last-modified-date"
                                        self._children_yang_names.add("last-modified-date")

                                        self.last_update_recieved = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.LastUpdateRecieved()
                                        self.last_update_recieved.parent = self
                                        self._children_name_map["last_update_recieved"] = "last-update-recieved"
                                        self._children_yang_names.add("last-update-recieved")

                                        self.prefix_name = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.PrefixName()
                                        self.prefix_name.parent = self
                                        self._children_name_map["prefix_name"] = "prefix-name"
                                        self._children_yang_names.add("prefix-name")

                                        self.route_attr_list = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.RouteAttrList()
                                        self.route_attr_list.parent = self
                                        self._children_name_map["route_attr_list"] = "route-attr-list"
                                        self._children_yang_names.add("route-attr-list")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("best_path",
                                                        "invalid_reason",
                                                        "neighbor_address",
                                                        "path_id",
                                                        "route",
                                                        "valid_route") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route, self).__setattr__(name, value)


                                    class PrefixName(Entity):
                                        """
                                        Prefix
                                        
                                        .. attribute:: prefix
                                        
                                        	Prefix
                                        	**type**\:   :py:class:`Prefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.PrefixName.Prefix>`
                                        
                                        .. attribute:: prefix_length
                                        
                                        	Prefix length
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-oc-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.PrefixName, self).__init__()

                                            self.yang_name = "prefix-name"
                                            self.yang_parent_name = "route"

                                            self.prefix_length = YLeaf(YType.uint8, "prefix-length")

                                            self.prefix = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.PrefixName.Prefix()
                                            self.prefix.parent = self
                                            self._children_name_map["prefix"] = "prefix"
                                            self._children_yang_names.add("prefix")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("prefix_length") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.PrefixName, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.PrefixName, self).__setattr__(name, value)


                                        class Prefix(Entity):
                                            """
                                            Prefix
                                            
                                            .. attribute:: afi
                                            
                                            	AFI
                                            	**type**\:   :py:class:`BgpOcAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.BgpOcAfi>`
                                            
                                            .. attribute:: ipv4_address
                                            
                                            	IPv4 Addr
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: ipv6_address
                                            
                                            	IPv6 Addr
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-oc-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.PrefixName.Prefix, self).__init__()

                                                self.yang_name = "prefix"
                                                self.yang_parent_name = "prefix-name"

                                                self.afi = YLeaf(YType.enumeration, "afi")

                                                self.ipv4_address = YLeaf(YType.str, "ipv4-address")

                                                self.ipv6_address = YLeaf(YType.str, "ipv6-address")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("afi",
                                                                "ipv4_address",
                                                                "ipv6_address") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.PrefixName.Prefix, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.PrefixName.Prefix, self).__setattr__(name, value)

                                            def has_data(self):
                                                return (
                                                    self.afi.is_set or
                                                    self.ipv4_address.is_set or
                                                    self.ipv6_address.is_set)

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.afi.yfilter != YFilter.not_set or
                                                    self.ipv4_address.yfilter != YFilter.not_set or
                                                    self.ipv6_address.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "prefix" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.afi.is_set or self.afi.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.afi.get_name_leafdata())
                                                if (self.ipv4_address.is_set or self.ipv4_address.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.ipv4_address.get_name_leafdata())
                                                if (self.ipv6_address.is_set or self.ipv6_address.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.ipv6_address.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "afi" or name == "ipv4-address" or name == "ipv6-address"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "afi"):
                                                    self.afi = value
                                                    self.afi.value_namespace = name_space
                                                    self.afi.value_namespace_prefix = name_space_prefix
                                                if(value_path == "ipv4-address"):
                                                    self.ipv4_address = value
                                                    self.ipv4_address.value_namespace = name_space
                                                    self.ipv4_address.value_namespace_prefix = name_space_prefix
                                                if(value_path == "ipv6-address"):
                                                    self.ipv6_address = value
                                                    self.ipv6_address.value_namespace = name_space
                                                    self.ipv6_address.value_namespace_prefix = name_space_prefix

                                        def has_data(self):
                                            return (
                                                self.prefix_length.is_set or
                                                (self.prefix is not None and self.prefix.has_data()))

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.prefix_length.yfilter != YFilter.not_set or
                                                (self.prefix is not None and self.prefix.has_operation()))

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "prefix-name" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.prefix_length.is_set or self.prefix_length.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.prefix_length.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            if (child_yang_name == "prefix"):
                                                if (self.prefix is None):
                                                    self.prefix = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.PrefixName.Prefix()
                                                    self.prefix.parent = self
                                                    self._children_name_map["prefix"] = "prefix"
                                                return self.prefix

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "prefix" or name == "prefix-length"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "prefix-length"):
                                                self.prefix_length = value
                                                self.prefix_length.value_namespace = name_space
                                                self.prefix_length.value_namespace_prefix = name_space_prefix


                                    class RouteAttrList(Entity):
                                        """
                                        RouteAttributesList
                                        
                                        .. attribute:: aggregrator_attributes
                                        
                                        	AggregatorList
                                        	**type**\:   :py:class:`AggregratorAttributes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.RouteAttrList.AggregratorAttributes>`
                                        
                                        .. attribute:: as4_path
                                        
                                        	AS4 Path
                                        	**type**\:  str
                                        
                                        .. attribute:: as_path
                                        
                                        	AS Path
                                        	**type**\:  str
                                        
                                        .. attribute:: atomic_aggr
                                        
                                        	AtomicAggr
                                        	**type**\:  bool
                                        
                                        .. attribute:: community
                                        
                                        	CommunityArray
                                        	**type**\: list of    :py:class:`Community <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.RouteAttrList.Community>`
                                        
                                        .. attribute:: local_pref
                                        
                                        	LocalPref
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: med
                                        
                                        	Med
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: next_hop
                                        
                                        	NextHopAddress
                                        	**type**\:   :py:class:`NextHop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.RouteAttrList.NextHop>`
                                        
                                        .. attribute:: origin_type
                                        
                                        	Origin Attribute Type
                                        	**type**\:   :py:class:`BgpOcOriginAttr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.BgpOcOriginAttr>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-oc-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.RouteAttrList, self).__init__()

                                            self.yang_name = "route-attr-list"
                                            self.yang_parent_name = "route"

                                            self.as4_path = YLeaf(YType.str, "as4-path")

                                            self.as_path = YLeaf(YType.str, "as-path")

                                            self.atomic_aggr = YLeaf(YType.boolean, "atomic-aggr")

                                            self.local_pref = YLeaf(YType.uint32, "local-pref")

                                            self.med = YLeaf(YType.uint32, "med")

                                            self.origin_type = YLeaf(YType.enumeration, "origin-type")

                                            self.aggregrator_attributes = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.RouteAttrList.AggregratorAttributes()
                                            self.aggregrator_attributes.parent = self
                                            self._children_name_map["aggregrator_attributes"] = "aggregrator-attributes"
                                            self._children_yang_names.add("aggregrator-attributes")

                                            self.next_hop = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.RouteAttrList.NextHop()
                                            self.next_hop.parent = self
                                            self._children_name_map["next_hop"] = "next-hop"
                                            self._children_yang_names.add("next-hop")

                                            self.community = YList(self)

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("as4_path",
                                                            "as_path",
                                                            "atomic_aggr",
                                                            "local_pref",
                                                            "med",
                                                            "origin_type") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.RouteAttrList, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.RouteAttrList, self).__setattr__(name, value)


                                        class NextHop(Entity):
                                            """
                                            NextHopAddress
                                            
                                            .. attribute:: afi
                                            
                                            	AFI
                                            	**type**\:   :py:class:`BgpOcAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.BgpOcAfi>`
                                            
                                            .. attribute:: ipv4_address
                                            
                                            	IPv4 Addr
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: ipv6_address
                                            
                                            	IPv6 Addr
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-oc-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.RouteAttrList.NextHop, self).__init__()

                                                self.yang_name = "next-hop"
                                                self.yang_parent_name = "route-attr-list"

                                                self.afi = YLeaf(YType.enumeration, "afi")

                                                self.ipv4_address = YLeaf(YType.str, "ipv4-address")

                                                self.ipv6_address = YLeaf(YType.str, "ipv6-address")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("afi",
                                                                "ipv4_address",
                                                                "ipv6_address") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.RouteAttrList.NextHop, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.RouteAttrList.NextHop, self).__setattr__(name, value)

                                            def has_data(self):
                                                return (
                                                    self.afi.is_set or
                                                    self.ipv4_address.is_set or
                                                    self.ipv6_address.is_set)

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.afi.yfilter != YFilter.not_set or
                                                    self.ipv4_address.yfilter != YFilter.not_set or
                                                    self.ipv6_address.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "next-hop" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.afi.is_set or self.afi.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.afi.get_name_leafdata())
                                                if (self.ipv4_address.is_set or self.ipv4_address.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.ipv4_address.get_name_leafdata())
                                                if (self.ipv6_address.is_set or self.ipv6_address.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.ipv6_address.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "afi" or name == "ipv4-address" or name == "ipv6-address"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "afi"):
                                                    self.afi = value
                                                    self.afi.value_namespace = name_space
                                                    self.afi.value_namespace_prefix = name_space_prefix
                                                if(value_path == "ipv4-address"):
                                                    self.ipv4_address = value
                                                    self.ipv4_address.value_namespace = name_space
                                                    self.ipv4_address.value_namespace_prefix = name_space_prefix
                                                if(value_path == "ipv6-address"):
                                                    self.ipv6_address = value
                                                    self.ipv6_address.value_namespace = name_space
                                                    self.ipv6_address.value_namespace_prefix = name_space_prefix


                                        class AggregratorAttributes(Entity):
                                            """
                                            AggregatorList
                                            
                                            .. attribute:: address
                                            
                                            	IPv4 address
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: as4
                                            
                                            	AS4 number
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: as_
                                            
                                            	AS number
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-oc-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.RouteAttrList.AggregratorAttributes, self).__init__()

                                                self.yang_name = "aggregrator-attributes"
                                                self.yang_parent_name = "route-attr-list"

                                                self.address = YLeaf(YType.str, "address")

                                                self.as4 = YLeaf(YType.uint32, "as4")

                                                self.as_ = YLeaf(YType.uint32, "as")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("address",
                                                                "as4",
                                                                "as_") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.RouteAttrList.AggregratorAttributes, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.RouteAttrList.AggregratorAttributes, self).__setattr__(name, value)

                                            def has_data(self):
                                                return (
                                                    self.address.is_set or
                                                    self.as4.is_set or
                                                    self.as_.is_set)

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.address.yfilter != YFilter.not_set or
                                                    self.as4.yfilter != YFilter.not_set or
                                                    self.as_.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "aggregrator-attributes" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.address.is_set or self.address.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.address.get_name_leafdata())
                                                if (self.as4.is_set or self.as4.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.as4.get_name_leafdata())
                                                if (self.as_.is_set or self.as_.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.as_.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "address" or name == "as4" or name == "as"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "address"):
                                                    self.address = value
                                                    self.address.value_namespace = name_space
                                                    self.address.value_namespace_prefix = name_space_prefix
                                                if(value_path == "as4"):
                                                    self.as4 = value
                                                    self.as4.value_namespace = name_space
                                                    self.as4.value_namespace_prefix = name_space_prefix
                                                if(value_path == "as"):
                                                    self.as_ = value
                                                    self.as_.value_namespace = name_space
                                                    self.as_.value_namespace_prefix = name_space_prefix


                                        class Community(Entity):
                                            """
                                            CommunityArray
                                            
                                            .. attribute:: objects
                                            
                                            	BGP OC objects
                                            	**type**\:  str
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-oc-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.RouteAttrList.Community, self).__init__()

                                                self.yang_name = "community"
                                                self.yang_parent_name = "route-attr-list"

                                                self.objects = YLeaf(YType.str, "objects")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("objects") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.RouteAttrList.Community, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.RouteAttrList.Community, self).__setattr__(name, value)

                                            def has_data(self):
                                                return self.objects.is_set

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.objects.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "community" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.objects.is_set or self.objects.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.objects.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "objects"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "objects"):
                                                    self.objects = value
                                                    self.objects.value_namespace = name_space
                                                    self.objects.value_namespace_prefix = name_space_prefix

                                        def has_data(self):
                                            for c in self.community:
                                                if (c.has_data()):
                                                    return True
                                            return (
                                                self.as4_path.is_set or
                                                self.as_path.is_set or
                                                self.atomic_aggr.is_set or
                                                self.local_pref.is_set or
                                                self.med.is_set or
                                                self.origin_type.is_set or
                                                (self.aggregrator_attributes is not None and self.aggregrator_attributes.has_data()) or
                                                (self.next_hop is not None and self.next_hop.has_data()))

                                        def has_operation(self):
                                            for c in self.community:
                                                if (c.has_operation()):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.as4_path.yfilter != YFilter.not_set or
                                                self.as_path.yfilter != YFilter.not_set or
                                                self.atomic_aggr.yfilter != YFilter.not_set or
                                                self.local_pref.yfilter != YFilter.not_set or
                                                self.med.yfilter != YFilter.not_set or
                                                self.origin_type.yfilter != YFilter.not_set or
                                                (self.aggregrator_attributes is not None and self.aggregrator_attributes.has_operation()) or
                                                (self.next_hop is not None and self.next_hop.has_operation()))

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "route-attr-list" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.as4_path.is_set or self.as4_path.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.as4_path.get_name_leafdata())
                                            if (self.as_path.is_set or self.as_path.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.as_path.get_name_leafdata())
                                            if (self.atomic_aggr.is_set or self.atomic_aggr.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.atomic_aggr.get_name_leafdata())
                                            if (self.local_pref.is_set or self.local_pref.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.local_pref.get_name_leafdata())
                                            if (self.med.is_set or self.med.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.med.get_name_leafdata())
                                            if (self.origin_type.is_set or self.origin_type.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.origin_type.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            if (child_yang_name == "aggregrator-attributes"):
                                                if (self.aggregrator_attributes is None):
                                                    self.aggregrator_attributes = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.RouteAttrList.AggregratorAttributes()
                                                    self.aggregrator_attributes.parent = self
                                                    self._children_name_map["aggregrator_attributes"] = "aggregrator-attributes"
                                                return self.aggregrator_attributes

                                            if (child_yang_name == "community"):
                                                for c in self.community:
                                                    segment = c.get_segment_path()
                                                    if (segment_path == segment):
                                                        return c
                                                c = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.RouteAttrList.Community()
                                                c.parent = self
                                                local_reference_key = "ydk::seg::%s" % segment_path
                                                self._local_refs[local_reference_key] = c
                                                self.community.append(c)
                                                return c

                                            if (child_yang_name == "next-hop"):
                                                if (self.next_hop is None):
                                                    self.next_hop = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.RouteAttrList.NextHop()
                                                    self.next_hop.parent = self
                                                    self._children_name_map["next_hop"] = "next-hop"
                                                return self.next_hop

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "aggregrator-attributes" or name == "community" or name == "next-hop" or name == "as4-path" or name == "as-path" or name == "atomic-aggr" or name == "local-pref" or name == "med" or name == "origin-type"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "as4-path"):
                                                self.as4_path = value
                                                self.as4_path.value_namespace = name_space
                                                self.as4_path.value_namespace_prefix = name_space_prefix
                                            if(value_path == "as-path"):
                                                self.as_path = value
                                                self.as_path.value_namespace = name_space
                                                self.as_path.value_namespace_prefix = name_space_prefix
                                            if(value_path == "atomic-aggr"):
                                                self.atomic_aggr = value
                                                self.atomic_aggr.value_namespace = name_space
                                                self.atomic_aggr.value_namespace_prefix = name_space_prefix
                                            if(value_path == "local-pref"):
                                                self.local_pref = value
                                                self.local_pref.value_namespace = name_space
                                                self.local_pref.value_namespace_prefix = name_space_prefix
                                            if(value_path == "med"):
                                                self.med = value
                                                self.med.value_namespace = name_space
                                                self.med.value_namespace_prefix = name_space_prefix
                                            if(value_path == "origin-type"):
                                                self.origin_type = value
                                                self.origin_type.value_namespace = name_space
                                                self.origin_type.value_namespace_prefix = name_space_prefix


                                    class ExtAttributesList(Entity):
                                        """
                                        ExtAttributesList
                                        
                                        .. attribute:: aigp
                                        
                                        	AIGP
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: cluster
                                        
                                        	ClusterList
                                        	**type**\:  list of str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        .. attribute:: ext_community
                                        
                                        	ExtendedCommunityArray
                                        	**type**\: list of    :py:class:`ExtCommunity <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.ExtAttributesList.ExtCommunity>`
                                        
                                        .. attribute:: originator_id
                                        
                                        	OriginatorID
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        .. attribute:: path_id
                                        
                                        	PathId
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: unknown_attributes
                                        
                                        	UnknownAttributes
                                        	**type**\: list of    :py:class:`UnknownAttributes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.ExtAttributesList.UnknownAttributes>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-oc-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.ExtAttributesList, self).__init__()

                                            self.yang_name = "ext-attributes-list"
                                            self.yang_parent_name = "route"

                                            self.aigp = YLeaf(YType.uint64, "aigp")

                                            self.cluster = YLeafList(YType.str, "cluster")

                                            self.originator_id = YLeaf(YType.str, "originator-id")

                                            self.path_id = YLeaf(YType.uint32, "path-id")

                                            self.ext_community = YList(self)
                                            self.unknown_attributes = YList(self)

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("aigp",
                                                            "cluster",
                                                            "originator_id",
                                                            "path_id") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.ExtAttributesList, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.ExtAttributesList, self).__setattr__(name, value)


                                        class ExtCommunity(Entity):
                                            """
                                            ExtendedCommunityArray
                                            
                                            .. attribute:: objects
                                            
                                            	BGP OC objects
                                            	**type**\:  str
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-oc-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.ExtAttributesList.ExtCommunity, self).__init__()

                                                self.yang_name = "ext-community"
                                                self.yang_parent_name = "ext-attributes-list"

                                                self.objects = YLeaf(YType.str, "objects")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("objects") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.ExtAttributesList.ExtCommunity, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.ExtAttributesList.ExtCommunity, self).__setattr__(name, value)

                                            def has_data(self):
                                                return self.objects.is_set

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.objects.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "ext-community" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.objects.is_set or self.objects.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.objects.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "objects"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "objects"):
                                                    self.objects = value
                                                    self.objects.value_namespace = name_space
                                                    self.objects.value_namespace_prefix = name_space_prefix


                                        class UnknownAttributes(Entity):
                                            """
                                            UnknownAttributes
                                            
                                            .. attribute:: attribute_length
                                            
                                            	AttributeLength
                                            	**type**\:  int
                                            
                                            	**range:** 0..65535
                                            
                                            .. attribute:: attribute_type
                                            
                                            	AttributeType
                                            	**type**\:  int
                                            
                                            	**range:** 0..65535
                                            
                                            .. attribute:: attribute_value
                                            
                                            	Atributevalue
                                            	**type**\:  str
                                            
                                            	**pattern:** ([0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2})\*)?
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-oc-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.ExtAttributesList.UnknownAttributes, self).__init__()

                                                self.yang_name = "unknown-attributes"
                                                self.yang_parent_name = "ext-attributes-list"

                                                self.attribute_length = YLeaf(YType.uint16, "attribute-length")

                                                self.attribute_type = YLeaf(YType.uint16, "attribute-type")

                                                self.attribute_value = YLeaf(YType.str, "attribute-value")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("attribute_length",
                                                                "attribute_type",
                                                                "attribute_value") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.ExtAttributesList.UnknownAttributes, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.ExtAttributesList.UnknownAttributes, self).__setattr__(name, value)

                                            def has_data(self):
                                                return (
                                                    self.attribute_length.is_set or
                                                    self.attribute_type.is_set or
                                                    self.attribute_value.is_set)

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.attribute_length.yfilter != YFilter.not_set or
                                                    self.attribute_type.yfilter != YFilter.not_set or
                                                    self.attribute_value.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "unknown-attributes" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.attribute_length.is_set or self.attribute_length.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.attribute_length.get_name_leafdata())
                                                if (self.attribute_type.is_set or self.attribute_type.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.attribute_type.get_name_leafdata())
                                                if (self.attribute_value.is_set or self.attribute_value.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.attribute_value.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "attribute-length" or name == "attribute-type" or name == "attribute-value"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "attribute-length"):
                                                    self.attribute_length = value
                                                    self.attribute_length.value_namespace = name_space
                                                    self.attribute_length.value_namespace_prefix = name_space_prefix
                                                if(value_path == "attribute-type"):
                                                    self.attribute_type = value
                                                    self.attribute_type.value_namespace = name_space
                                                    self.attribute_type.value_namespace_prefix = name_space_prefix
                                                if(value_path == "attribute-value"):
                                                    self.attribute_value = value
                                                    self.attribute_value.value_namespace = name_space
                                                    self.attribute_value.value_namespace_prefix = name_space_prefix

                                        def has_data(self):
                                            for c in self.ext_community:
                                                if (c.has_data()):
                                                    return True
                                            for c in self.unknown_attributes:
                                                if (c.has_data()):
                                                    return True
                                            for leaf in self.cluster.getYLeafs():
                                                if (leaf.yfilter != YFilter.not_set):
                                                    return True
                                            return (
                                                self.aigp.is_set or
                                                self.originator_id.is_set or
                                                self.path_id.is_set)

                                        def has_operation(self):
                                            for c in self.ext_community:
                                                if (c.has_operation()):
                                                    return True
                                            for c in self.unknown_attributes:
                                                if (c.has_operation()):
                                                    return True
                                            for leaf in self.cluster.getYLeafs():
                                                if (leaf.is_set):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.aigp.yfilter != YFilter.not_set or
                                                self.cluster.yfilter != YFilter.not_set or
                                                self.originator_id.yfilter != YFilter.not_set or
                                                self.path_id.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "ext-attributes-list" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.aigp.is_set or self.aigp.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.aigp.get_name_leafdata())
                                            if (self.originator_id.is_set or self.originator_id.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.originator_id.get_name_leafdata())
                                            if (self.path_id.is_set or self.path_id.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.path_id.get_name_leafdata())

                                            leaf_name_data.extend(self.cluster.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            if (child_yang_name == "ext-community"):
                                                for c in self.ext_community:
                                                    segment = c.get_segment_path()
                                                    if (segment_path == segment):
                                                        return c
                                                c = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.ExtAttributesList.ExtCommunity()
                                                c.parent = self
                                                local_reference_key = "ydk::seg::%s" % segment_path
                                                self._local_refs[local_reference_key] = c
                                                self.ext_community.append(c)
                                                return c

                                            if (child_yang_name == "unknown-attributes"):
                                                for c in self.unknown_attributes:
                                                    segment = c.get_segment_path()
                                                    if (segment_path == segment):
                                                        return c
                                                c = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.ExtAttributesList.UnknownAttributes()
                                                c.parent = self
                                                local_reference_key = "ydk::seg::%s" % segment_path
                                                self._local_refs[local_reference_key] = c
                                                self.unknown_attributes.append(c)
                                                return c

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "ext-community" or name == "unknown-attributes" or name == "aigp" or name == "cluster" or name == "originator-id" or name == "path-id"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "aigp"):
                                                self.aigp = value
                                                self.aigp.value_namespace = name_space
                                                self.aigp.value_namespace_prefix = name_space_prefix
                                            if(value_path == "cluster"):
                                                self.cluster.append(value)
                                            if(value_path == "originator-id"):
                                                self.originator_id = value
                                                self.originator_id.value_namespace = name_space
                                                self.originator_id.value_namespace_prefix = name_space_prefix
                                            if(value_path == "path-id"):
                                                self.path_id = value
                                                self.path_id.value_namespace = name_space
                                                self.path_id.value_namespace_prefix = name_space_prefix


                                    class LastModifiedDate(Entity):
                                        """
                                        LastModifiedDate
                                        
                                        .. attribute:: time_value
                                        
                                        	TimeValue
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-oc-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.LastModifiedDate, self).__init__()

                                            self.yang_name = "last-modified-date"
                                            self.yang_parent_name = "route"

                                            self.time_value = YLeaf(YType.str, "time-value")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("time_value") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.LastModifiedDate, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.LastModifiedDate, self).__setattr__(name, value)

                                        def has_data(self):
                                            return self.time_value.is_set

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.time_value.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "last-modified-date" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.time_value.is_set or self.time_value.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.time_value.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "time-value"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "time-value"):
                                                self.time_value = value
                                                self.time_value.value_namespace = name_space
                                                self.time_value.value_namespace_prefix = name_space_prefix


                                    class LastUpdateRecieved(Entity):
                                        """
                                        LastUpdateRecieved
                                        
                                        .. attribute:: time_value
                                        
                                        	TimeValue
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-oc-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.LastUpdateRecieved, self).__init__()

                                            self.yang_name = "last-update-recieved"
                                            self.yang_parent_name = "route"

                                            self.time_value = YLeaf(YType.str, "time-value")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("time_value") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.LastUpdateRecieved, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.LastUpdateRecieved, self).__setattr__(name, value)

                                        def has_data(self):
                                            return self.time_value.is_set

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.time_value.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "last-update-recieved" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.time_value.is_set or self.time_value.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.time_value.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "time-value"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "time-value"):
                                                self.time_value = value
                                                self.time_value.value_namespace = name_space
                                                self.time_value.value_namespace_prefix = name_space_prefix

                                    def has_data(self):
                                        return (
                                            self.best_path.is_set or
                                            self.invalid_reason.is_set or
                                            self.neighbor_address.is_set or
                                            self.path_id.is_set or
                                            self.route.is_set or
                                            self.valid_route.is_set or
                                            (self.ext_attributes_list is not None and self.ext_attributes_list.has_data()) or
                                            (self.last_modified_date is not None and self.last_modified_date.has_data()) or
                                            (self.last_update_recieved is not None and self.last_update_recieved.has_data()) or
                                            (self.prefix_name is not None and self.prefix_name.has_data()) or
                                            (self.route_attr_list is not None and self.route_attr_list.has_data()))

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.best_path.yfilter != YFilter.not_set or
                                            self.invalid_reason.yfilter != YFilter.not_set or
                                            self.neighbor_address.yfilter != YFilter.not_set or
                                            self.path_id.yfilter != YFilter.not_set or
                                            self.route.yfilter != YFilter.not_set or
                                            self.valid_route.yfilter != YFilter.not_set or
                                            (self.ext_attributes_list is not None and self.ext_attributes_list.has_operation()) or
                                            (self.last_modified_date is not None and self.last_modified_date.has_operation()) or
                                            (self.last_update_recieved is not None and self.last_update_recieved.has_operation()) or
                                            (self.prefix_name is not None and self.prefix_name.has_operation()) or
                                            (self.route_attr_list is not None and self.route_attr_list.has_operation()))

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "route" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.best_path.is_set or self.best_path.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.best_path.get_name_leafdata())
                                        if (self.invalid_reason.is_set or self.invalid_reason.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.invalid_reason.get_name_leafdata())
                                        if (self.neighbor_address.is_set or self.neighbor_address.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.neighbor_address.get_name_leafdata())
                                        if (self.path_id.is_set or self.path_id.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.path_id.get_name_leafdata())
                                        if (self.route.is_set or self.route.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.route.get_name_leafdata())
                                        if (self.valid_route.is_set or self.valid_route.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.valid_route.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "ext-attributes-list"):
                                            if (self.ext_attributes_list is None):
                                                self.ext_attributes_list = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.ExtAttributesList()
                                                self.ext_attributes_list.parent = self
                                                self._children_name_map["ext_attributes_list"] = "ext-attributes-list"
                                            return self.ext_attributes_list

                                        if (child_yang_name == "last-modified-date"):
                                            if (self.last_modified_date is None):
                                                self.last_modified_date = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.LastModifiedDate()
                                                self.last_modified_date.parent = self
                                                self._children_name_map["last_modified_date"] = "last-modified-date"
                                            return self.last_modified_date

                                        if (child_yang_name == "last-update-recieved"):
                                            if (self.last_update_recieved is None):
                                                self.last_update_recieved = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.LastUpdateRecieved()
                                                self.last_update_recieved.parent = self
                                                self._children_name_map["last_update_recieved"] = "last-update-recieved"
                                            return self.last_update_recieved

                                        if (child_yang_name == "prefix-name"):
                                            if (self.prefix_name is None):
                                                self.prefix_name = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.PrefixName()
                                                self.prefix_name.parent = self
                                                self._children_name_map["prefix_name"] = "prefix-name"
                                            return self.prefix_name

                                        if (child_yang_name == "route-attr-list"):
                                            if (self.route_attr_list is None):
                                                self.route_attr_list = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.RouteAttrList()
                                                self.route_attr_list.parent = self
                                                self._children_name_map["route_attr_list"] = "route-attr-list"
                                            return self.route_attr_list

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "ext-attributes-list" or name == "last-modified-date" or name == "last-update-recieved" or name == "prefix-name" or name == "route-attr-list" or name == "best-path" or name == "invalid-reason" or name == "neighbor-address" or name == "path-id" or name == "route" or name == "valid-route"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "best-path"):
                                            self.best_path = value
                                            self.best_path.value_namespace = name_space
                                            self.best_path.value_namespace_prefix = name_space_prefix
                                        if(value_path == "invalid-reason"):
                                            self.invalid_reason = value
                                            self.invalid_reason.value_namespace = name_space
                                            self.invalid_reason.value_namespace_prefix = name_space_prefix
                                        if(value_path == "neighbor-address"):
                                            self.neighbor_address = value
                                            self.neighbor_address.value_namespace = name_space
                                            self.neighbor_address.value_namespace_prefix = name_space_prefix
                                        if(value_path == "path-id"):
                                            self.path_id = value
                                            self.path_id.value_namespace = name_space
                                            self.path_id.value_namespace_prefix = name_space_prefix
                                        if(value_path == "route"):
                                            self.route = value
                                            self.route.value_namespace = name_space
                                            self.route.value_namespace_prefix = name_space_prefix
                                        if(value_path == "valid-route"):
                                            self.valid_route = value
                                            self.valid_route.value_namespace = name_space
                                            self.valid_route.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.route:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.route:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "routes" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "route"):
                                        for c in self.route:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.route.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "route"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class NumRoutes(Entity):
                                """
                                Number of routes in adjacency rib out\-bound
                                post\-policy table
                                
                                .. attribute:: num_routes
                                
                                	NumRoutes
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv4-bgp-oc-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.NumRoutes, self).__init__()

                                    self.yang_name = "num-routes"
                                    self.yang_parent_name = "adj-rib-out-post"

                                    self.num_routes = YLeaf(YType.uint64, "num-routes")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("num_routes") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.NumRoutes, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.NumRoutes, self).__setattr__(name, value)

                                def has_data(self):
                                    return self.num_routes.is_set

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.num_routes.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "num-routes" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.num_routes.is_set or self.num_routes.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.num_routes.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "num-routes"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "num-routes"):
                                        self.num_routes = value
                                        self.num_routes.value_namespace = name_space
                                        self.num_routes.value_namespace_prefix = name_space_prefix

                            def has_data(self):
                                return (
                                    (self.num_routes is not None and self.num_routes.has_data()) or
                                    (self.routes is not None and self.routes.has_data()))

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    (self.num_routes is not None and self.num_routes.has_operation()) or
                                    (self.routes is not None and self.routes.has_operation()))

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "adj-rib-out-post" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "num-routes"):
                                    if (self.num_routes is None):
                                        self.num_routes = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.NumRoutes()
                                        self.num_routes.parent = self
                                        self._children_name_map["num_routes"] = "num-routes"
                                    return self.num_routes

                                if (child_yang_name == "routes"):
                                    if (self.routes is None):
                                        self.routes = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes()
                                        self.routes.parent = self
                                        self._children_name_map["routes"] = "routes"
                                    return self.routes

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "num-routes" or name == "routes"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                pass


                        class AdjRibOutPre(Entity):
                            """
                            Adjacency rib out\-bound pre\-policy table
                            
                            .. attribute:: num_routes
                            
                            	Number of routes in adjacency rib out\-bound post\-policy table
                            	**type**\:   :py:class:`NumRoutes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.NumRoutes>`
                            
                            .. attribute:: routes
                            
                            	routes table
                            	**type**\:   :py:class:`Routes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes>`
                            
                            

                            """

                            _prefix = 'ipv4-bgp-oc-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre, self).__init__()

                                self.yang_name = "adj-rib-out-pre"
                                self.yang_parent_name = "open-config-neighbor"

                                self.num_routes = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.NumRoutes()
                                self.num_routes.parent = self
                                self._children_name_map["num_routes"] = "num-routes"
                                self._children_yang_names.add("num-routes")

                                self.routes = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes()
                                self.routes.parent = self
                                self._children_name_map["routes"] = "routes"
                                self._children_yang_names.add("routes")


                            class Routes(Entity):
                                """
                                routes table
                                
                                .. attribute:: route
                                
                                	route entry
                                	**type**\: list of    :py:class:`Route <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route>`
                                
                                

                                """

                                _prefix = 'ipv4-bgp-oc-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes, self).__init__()

                                    self.yang_name = "routes"
                                    self.yang_parent_name = "adj-rib-out-pre"

                                    self.route = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes, self).__setattr__(name, value)


                                class Route(Entity):
                                    """
                                    route entry
                                    
                                    .. attribute:: best_path
                                    
                                    	BestPath
                                    	**type**\:  bool
                                    
                                    .. attribute:: ext_attributes_list
                                    
                                    	ExtAttributesList
                                    	**type**\:   :py:class:`ExtAttributesList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.ExtAttributesList>`
                                    
                                    .. attribute:: invalid_reason
                                    
                                    	IndentityRef
                                    	**type**\:   :py:class:`BgpOcInvalidRouteReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.BgpOcInvalidRouteReason>`
                                    
                                    .. attribute:: last_modified_date
                                    
                                    	LastModifiedDate
                                    	**type**\:   :py:class:`LastModifiedDate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.LastModifiedDate>`
                                    
                                    .. attribute:: last_update_recieved
                                    
                                    	LastUpdateRecieved
                                    	**type**\:   :py:class:`LastUpdateRecieved <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.LastUpdateRecieved>`
                                    
                                    .. attribute:: neighbor_address
                                    
                                    	Neighbor address
                                    	**type**\: one of the below types:
                                    
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    
                                    ----
                                    	**type**\:  str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    
                                    ----
                                    .. attribute:: path_id
                                    
                                    	Path ID
                                    	**type**\:  int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    .. attribute:: prefix_name
                                    
                                    	Prefix
                                    	**type**\:   :py:class:`PrefixName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.PrefixName>`
                                    
                                    .. attribute:: route
                                    
                                    	Network in prefix/length format
                                    	**type**\: one of the below types:
                                    
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                    
                                    
                                    ----
                                    	**type**\:  str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                    
                                    
                                    ----
                                    .. attribute:: route_attr_list
                                    
                                    	RouteAttributesList
                                    	**type**\:   :py:class:`RouteAttrList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.RouteAttrList>`
                                    
                                    .. attribute:: valid_route
                                    
                                    	ValidRoute
                                    	**type**\:  bool
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-oc-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route, self).__init__()

                                        self.yang_name = "route"
                                        self.yang_parent_name = "routes"

                                        self.best_path = YLeaf(YType.boolean, "best-path")

                                        self.invalid_reason = YLeaf(YType.enumeration, "invalid-reason")

                                        self.neighbor_address = YLeaf(YType.str, "neighbor-address")

                                        self.path_id = YLeaf(YType.int32, "path-id")

                                        self.route = YLeaf(YType.str, "route")

                                        self.valid_route = YLeaf(YType.boolean, "valid-route")

                                        self.ext_attributes_list = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.ExtAttributesList()
                                        self.ext_attributes_list.parent = self
                                        self._children_name_map["ext_attributes_list"] = "ext-attributes-list"
                                        self._children_yang_names.add("ext-attributes-list")

                                        self.last_modified_date = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.LastModifiedDate()
                                        self.last_modified_date.parent = self
                                        self._children_name_map["last_modified_date"] = "last-modified-date"
                                        self._children_yang_names.add("last-modified-date")

                                        self.last_update_recieved = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.LastUpdateRecieved()
                                        self.last_update_recieved.parent = self
                                        self._children_name_map["last_update_recieved"] = "last-update-recieved"
                                        self._children_yang_names.add("last-update-recieved")

                                        self.prefix_name = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.PrefixName()
                                        self.prefix_name.parent = self
                                        self._children_name_map["prefix_name"] = "prefix-name"
                                        self._children_yang_names.add("prefix-name")

                                        self.route_attr_list = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.RouteAttrList()
                                        self.route_attr_list.parent = self
                                        self._children_name_map["route_attr_list"] = "route-attr-list"
                                        self._children_yang_names.add("route-attr-list")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("best_path",
                                                        "invalid_reason",
                                                        "neighbor_address",
                                                        "path_id",
                                                        "route",
                                                        "valid_route") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route, self).__setattr__(name, value)


                                    class PrefixName(Entity):
                                        """
                                        Prefix
                                        
                                        .. attribute:: prefix
                                        
                                        	Prefix
                                        	**type**\:   :py:class:`Prefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.PrefixName.Prefix>`
                                        
                                        .. attribute:: prefix_length
                                        
                                        	Prefix length
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-oc-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.PrefixName, self).__init__()

                                            self.yang_name = "prefix-name"
                                            self.yang_parent_name = "route"

                                            self.prefix_length = YLeaf(YType.uint8, "prefix-length")

                                            self.prefix = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.PrefixName.Prefix()
                                            self.prefix.parent = self
                                            self._children_name_map["prefix"] = "prefix"
                                            self._children_yang_names.add("prefix")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("prefix_length") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.PrefixName, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.PrefixName, self).__setattr__(name, value)


                                        class Prefix(Entity):
                                            """
                                            Prefix
                                            
                                            .. attribute:: afi
                                            
                                            	AFI
                                            	**type**\:   :py:class:`BgpOcAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.BgpOcAfi>`
                                            
                                            .. attribute:: ipv4_address
                                            
                                            	IPv4 Addr
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: ipv6_address
                                            
                                            	IPv6 Addr
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-oc-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.PrefixName.Prefix, self).__init__()

                                                self.yang_name = "prefix"
                                                self.yang_parent_name = "prefix-name"

                                                self.afi = YLeaf(YType.enumeration, "afi")

                                                self.ipv4_address = YLeaf(YType.str, "ipv4-address")

                                                self.ipv6_address = YLeaf(YType.str, "ipv6-address")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("afi",
                                                                "ipv4_address",
                                                                "ipv6_address") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.PrefixName.Prefix, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.PrefixName.Prefix, self).__setattr__(name, value)

                                            def has_data(self):
                                                return (
                                                    self.afi.is_set or
                                                    self.ipv4_address.is_set or
                                                    self.ipv6_address.is_set)

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.afi.yfilter != YFilter.not_set or
                                                    self.ipv4_address.yfilter != YFilter.not_set or
                                                    self.ipv6_address.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "prefix" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.afi.is_set or self.afi.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.afi.get_name_leafdata())
                                                if (self.ipv4_address.is_set or self.ipv4_address.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.ipv4_address.get_name_leafdata())
                                                if (self.ipv6_address.is_set or self.ipv6_address.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.ipv6_address.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "afi" or name == "ipv4-address" or name == "ipv6-address"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "afi"):
                                                    self.afi = value
                                                    self.afi.value_namespace = name_space
                                                    self.afi.value_namespace_prefix = name_space_prefix
                                                if(value_path == "ipv4-address"):
                                                    self.ipv4_address = value
                                                    self.ipv4_address.value_namespace = name_space
                                                    self.ipv4_address.value_namespace_prefix = name_space_prefix
                                                if(value_path == "ipv6-address"):
                                                    self.ipv6_address = value
                                                    self.ipv6_address.value_namespace = name_space
                                                    self.ipv6_address.value_namespace_prefix = name_space_prefix

                                        def has_data(self):
                                            return (
                                                self.prefix_length.is_set or
                                                (self.prefix is not None and self.prefix.has_data()))

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.prefix_length.yfilter != YFilter.not_set or
                                                (self.prefix is not None and self.prefix.has_operation()))

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "prefix-name" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.prefix_length.is_set or self.prefix_length.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.prefix_length.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            if (child_yang_name == "prefix"):
                                                if (self.prefix is None):
                                                    self.prefix = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.PrefixName.Prefix()
                                                    self.prefix.parent = self
                                                    self._children_name_map["prefix"] = "prefix"
                                                return self.prefix

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "prefix" or name == "prefix-length"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "prefix-length"):
                                                self.prefix_length = value
                                                self.prefix_length.value_namespace = name_space
                                                self.prefix_length.value_namespace_prefix = name_space_prefix


                                    class RouteAttrList(Entity):
                                        """
                                        RouteAttributesList
                                        
                                        .. attribute:: aggregrator_attributes
                                        
                                        	AggregatorList
                                        	**type**\:   :py:class:`AggregratorAttributes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.RouteAttrList.AggregratorAttributes>`
                                        
                                        .. attribute:: as4_path
                                        
                                        	AS4 Path
                                        	**type**\:  str
                                        
                                        .. attribute:: as_path
                                        
                                        	AS Path
                                        	**type**\:  str
                                        
                                        .. attribute:: atomic_aggr
                                        
                                        	AtomicAggr
                                        	**type**\:  bool
                                        
                                        .. attribute:: community
                                        
                                        	CommunityArray
                                        	**type**\: list of    :py:class:`Community <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.RouteAttrList.Community>`
                                        
                                        .. attribute:: local_pref
                                        
                                        	LocalPref
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: med
                                        
                                        	Med
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: next_hop
                                        
                                        	NextHopAddress
                                        	**type**\:   :py:class:`NextHop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.RouteAttrList.NextHop>`
                                        
                                        .. attribute:: origin_type
                                        
                                        	Origin Attribute Type
                                        	**type**\:   :py:class:`BgpOcOriginAttr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.BgpOcOriginAttr>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-oc-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.RouteAttrList, self).__init__()

                                            self.yang_name = "route-attr-list"
                                            self.yang_parent_name = "route"

                                            self.as4_path = YLeaf(YType.str, "as4-path")

                                            self.as_path = YLeaf(YType.str, "as-path")

                                            self.atomic_aggr = YLeaf(YType.boolean, "atomic-aggr")

                                            self.local_pref = YLeaf(YType.uint32, "local-pref")

                                            self.med = YLeaf(YType.uint32, "med")

                                            self.origin_type = YLeaf(YType.enumeration, "origin-type")

                                            self.aggregrator_attributes = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.RouteAttrList.AggregratorAttributes()
                                            self.aggregrator_attributes.parent = self
                                            self._children_name_map["aggregrator_attributes"] = "aggregrator-attributes"
                                            self._children_yang_names.add("aggregrator-attributes")

                                            self.next_hop = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.RouteAttrList.NextHop()
                                            self.next_hop.parent = self
                                            self._children_name_map["next_hop"] = "next-hop"
                                            self._children_yang_names.add("next-hop")

                                            self.community = YList(self)

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("as4_path",
                                                            "as_path",
                                                            "atomic_aggr",
                                                            "local_pref",
                                                            "med",
                                                            "origin_type") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.RouteAttrList, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.RouteAttrList, self).__setattr__(name, value)


                                        class NextHop(Entity):
                                            """
                                            NextHopAddress
                                            
                                            .. attribute:: afi
                                            
                                            	AFI
                                            	**type**\:   :py:class:`BgpOcAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.BgpOcAfi>`
                                            
                                            .. attribute:: ipv4_address
                                            
                                            	IPv4 Addr
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: ipv6_address
                                            
                                            	IPv6 Addr
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-oc-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.RouteAttrList.NextHop, self).__init__()

                                                self.yang_name = "next-hop"
                                                self.yang_parent_name = "route-attr-list"

                                                self.afi = YLeaf(YType.enumeration, "afi")

                                                self.ipv4_address = YLeaf(YType.str, "ipv4-address")

                                                self.ipv6_address = YLeaf(YType.str, "ipv6-address")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("afi",
                                                                "ipv4_address",
                                                                "ipv6_address") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.RouteAttrList.NextHop, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.RouteAttrList.NextHop, self).__setattr__(name, value)

                                            def has_data(self):
                                                return (
                                                    self.afi.is_set or
                                                    self.ipv4_address.is_set or
                                                    self.ipv6_address.is_set)

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.afi.yfilter != YFilter.not_set or
                                                    self.ipv4_address.yfilter != YFilter.not_set or
                                                    self.ipv6_address.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "next-hop" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.afi.is_set or self.afi.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.afi.get_name_leafdata())
                                                if (self.ipv4_address.is_set or self.ipv4_address.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.ipv4_address.get_name_leafdata())
                                                if (self.ipv6_address.is_set or self.ipv6_address.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.ipv6_address.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "afi" or name == "ipv4-address" or name == "ipv6-address"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "afi"):
                                                    self.afi = value
                                                    self.afi.value_namespace = name_space
                                                    self.afi.value_namespace_prefix = name_space_prefix
                                                if(value_path == "ipv4-address"):
                                                    self.ipv4_address = value
                                                    self.ipv4_address.value_namespace = name_space
                                                    self.ipv4_address.value_namespace_prefix = name_space_prefix
                                                if(value_path == "ipv6-address"):
                                                    self.ipv6_address = value
                                                    self.ipv6_address.value_namespace = name_space
                                                    self.ipv6_address.value_namespace_prefix = name_space_prefix


                                        class AggregratorAttributes(Entity):
                                            """
                                            AggregatorList
                                            
                                            .. attribute:: address
                                            
                                            	IPv4 address
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: as4
                                            
                                            	AS4 number
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: as_
                                            
                                            	AS number
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-oc-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.RouteAttrList.AggregratorAttributes, self).__init__()

                                                self.yang_name = "aggregrator-attributes"
                                                self.yang_parent_name = "route-attr-list"

                                                self.address = YLeaf(YType.str, "address")

                                                self.as4 = YLeaf(YType.uint32, "as4")

                                                self.as_ = YLeaf(YType.uint32, "as")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("address",
                                                                "as4",
                                                                "as_") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.RouteAttrList.AggregratorAttributes, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.RouteAttrList.AggregratorAttributes, self).__setattr__(name, value)

                                            def has_data(self):
                                                return (
                                                    self.address.is_set or
                                                    self.as4.is_set or
                                                    self.as_.is_set)

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.address.yfilter != YFilter.not_set or
                                                    self.as4.yfilter != YFilter.not_set or
                                                    self.as_.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "aggregrator-attributes" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.address.is_set or self.address.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.address.get_name_leafdata())
                                                if (self.as4.is_set or self.as4.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.as4.get_name_leafdata())
                                                if (self.as_.is_set or self.as_.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.as_.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "address" or name == "as4" or name == "as"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "address"):
                                                    self.address = value
                                                    self.address.value_namespace = name_space
                                                    self.address.value_namespace_prefix = name_space_prefix
                                                if(value_path == "as4"):
                                                    self.as4 = value
                                                    self.as4.value_namespace = name_space
                                                    self.as4.value_namespace_prefix = name_space_prefix
                                                if(value_path == "as"):
                                                    self.as_ = value
                                                    self.as_.value_namespace = name_space
                                                    self.as_.value_namespace_prefix = name_space_prefix


                                        class Community(Entity):
                                            """
                                            CommunityArray
                                            
                                            .. attribute:: objects
                                            
                                            	BGP OC objects
                                            	**type**\:  str
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-oc-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.RouteAttrList.Community, self).__init__()

                                                self.yang_name = "community"
                                                self.yang_parent_name = "route-attr-list"

                                                self.objects = YLeaf(YType.str, "objects")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("objects") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.RouteAttrList.Community, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.RouteAttrList.Community, self).__setattr__(name, value)

                                            def has_data(self):
                                                return self.objects.is_set

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.objects.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "community" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.objects.is_set or self.objects.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.objects.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "objects"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "objects"):
                                                    self.objects = value
                                                    self.objects.value_namespace = name_space
                                                    self.objects.value_namespace_prefix = name_space_prefix

                                        def has_data(self):
                                            for c in self.community:
                                                if (c.has_data()):
                                                    return True
                                            return (
                                                self.as4_path.is_set or
                                                self.as_path.is_set or
                                                self.atomic_aggr.is_set or
                                                self.local_pref.is_set or
                                                self.med.is_set or
                                                self.origin_type.is_set or
                                                (self.aggregrator_attributes is not None and self.aggregrator_attributes.has_data()) or
                                                (self.next_hop is not None and self.next_hop.has_data()))

                                        def has_operation(self):
                                            for c in self.community:
                                                if (c.has_operation()):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.as4_path.yfilter != YFilter.not_set or
                                                self.as_path.yfilter != YFilter.not_set or
                                                self.atomic_aggr.yfilter != YFilter.not_set or
                                                self.local_pref.yfilter != YFilter.not_set or
                                                self.med.yfilter != YFilter.not_set or
                                                self.origin_type.yfilter != YFilter.not_set or
                                                (self.aggregrator_attributes is not None and self.aggregrator_attributes.has_operation()) or
                                                (self.next_hop is not None and self.next_hop.has_operation()))

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "route-attr-list" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.as4_path.is_set or self.as4_path.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.as4_path.get_name_leafdata())
                                            if (self.as_path.is_set or self.as_path.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.as_path.get_name_leafdata())
                                            if (self.atomic_aggr.is_set or self.atomic_aggr.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.atomic_aggr.get_name_leafdata())
                                            if (self.local_pref.is_set or self.local_pref.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.local_pref.get_name_leafdata())
                                            if (self.med.is_set or self.med.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.med.get_name_leafdata())
                                            if (self.origin_type.is_set or self.origin_type.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.origin_type.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            if (child_yang_name == "aggregrator-attributes"):
                                                if (self.aggregrator_attributes is None):
                                                    self.aggregrator_attributes = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.RouteAttrList.AggregratorAttributes()
                                                    self.aggregrator_attributes.parent = self
                                                    self._children_name_map["aggregrator_attributes"] = "aggregrator-attributes"
                                                return self.aggregrator_attributes

                                            if (child_yang_name == "community"):
                                                for c in self.community:
                                                    segment = c.get_segment_path()
                                                    if (segment_path == segment):
                                                        return c
                                                c = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.RouteAttrList.Community()
                                                c.parent = self
                                                local_reference_key = "ydk::seg::%s" % segment_path
                                                self._local_refs[local_reference_key] = c
                                                self.community.append(c)
                                                return c

                                            if (child_yang_name == "next-hop"):
                                                if (self.next_hop is None):
                                                    self.next_hop = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.RouteAttrList.NextHop()
                                                    self.next_hop.parent = self
                                                    self._children_name_map["next_hop"] = "next-hop"
                                                return self.next_hop

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "aggregrator-attributes" or name == "community" or name == "next-hop" or name == "as4-path" or name == "as-path" or name == "atomic-aggr" or name == "local-pref" or name == "med" or name == "origin-type"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "as4-path"):
                                                self.as4_path = value
                                                self.as4_path.value_namespace = name_space
                                                self.as4_path.value_namespace_prefix = name_space_prefix
                                            if(value_path == "as-path"):
                                                self.as_path = value
                                                self.as_path.value_namespace = name_space
                                                self.as_path.value_namespace_prefix = name_space_prefix
                                            if(value_path == "atomic-aggr"):
                                                self.atomic_aggr = value
                                                self.atomic_aggr.value_namespace = name_space
                                                self.atomic_aggr.value_namespace_prefix = name_space_prefix
                                            if(value_path == "local-pref"):
                                                self.local_pref = value
                                                self.local_pref.value_namespace = name_space
                                                self.local_pref.value_namespace_prefix = name_space_prefix
                                            if(value_path == "med"):
                                                self.med = value
                                                self.med.value_namespace = name_space
                                                self.med.value_namespace_prefix = name_space_prefix
                                            if(value_path == "origin-type"):
                                                self.origin_type = value
                                                self.origin_type.value_namespace = name_space
                                                self.origin_type.value_namespace_prefix = name_space_prefix


                                    class ExtAttributesList(Entity):
                                        """
                                        ExtAttributesList
                                        
                                        .. attribute:: aigp
                                        
                                        	AIGP
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: cluster
                                        
                                        	ClusterList
                                        	**type**\:  list of str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        .. attribute:: ext_community
                                        
                                        	ExtendedCommunityArray
                                        	**type**\: list of    :py:class:`ExtCommunity <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.ExtAttributesList.ExtCommunity>`
                                        
                                        .. attribute:: originator_id
                                        
                                        	OriginatorID
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        .. attribute:: path_id
                                        
                                        	PathId
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: unknown_attributes
                                        
                                        	UnknownAttributes
                                        	**type**\: list of    :py:class:`UnknownAttributes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.ExtAttributesList.UnknownAttributes>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-oc-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.ExtAttributesList, self).__init__()

                                            self.yang_name = "ext-attributes-list"
                                            self.yang_parent_name = "route"

                                            self.aigp = YLeaf(YType.uint64, "aigp")

                                            self.cluster = YLeafList(YType.str, "cluster")

                                            self.originator_id = YLeaf(YType.str, "originator-id")

                                            self.path_id = YLeaf(YType.uint32, "path-id")

                                            self.ext_community = YList(self)
                                            self.unknown_attributes = YList(self)

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("aigp",
                                                            "cluster",
                                                            "originator_id",
                                                            "path_id") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.ExtAttributesList, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.ExtAttributesList, self).__setattr__(name, value)


                                        class ExtCommunity(Entity):
                                            """
                                            ExtendedCommunityArray
                                            
                                            .. attribute:: objects
                                            
                                            	BGP OC objects
                                            	**type**\:  str
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-oc-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.ExtAttributesList.ExtCommunity, self).__init__()

                                                self.yang_name = "ext-community"
                                                self.yang_parent_name = "ext-attributes-list"

                                                self.objects = YLeaf(YType.str, "objects")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("objects") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.ExtAttributesList.ExtCommunity, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.ExtAttributesList.ExtCommunity, self).__setattr__(name, value)

                                            def has_data(self):
                                                return self.objects.is_set

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.objects.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "ext-community" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.objects.is_set or self.objects.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.objects.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "objects"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "objects"):
                                                    self.objects = value
                                                    self.objects.value_namespace = name_space
                                                    self.objects.value_namespace_prefix = name_space_prefix


                                        class UnknownAttributes(Entity):
                                            """
                                            UnknownAttributes
                                            
                                            .. attribute:: attribute_length
                                            
                                            	AttributeLength
                                            	**type**\:  int
                                            
                                            	**range:** 0..65535
                                            
                                            .. attribute:: attribute_type
                                            
                                            	AttributeType
                                            	**type**\:  int
                                            
                                            	**range:** 0..65535
                                            
                                            .. attribute:: attribute_value
                                            
                                            	Atributevalue
                                            	**type**\:  str
                                            
                                            	**pattern:** ([0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2})\*)?
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-oc-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.ExtAttributesList.UnknownAttributes, self).__init__()

                                                self.yang_name = "unknown-attributes"
                                                self.yang_parent_name = "ext-attributes-list"

                                                self.attribute_length = YLeaf(YType.uint16, "attribute-length")

                                                self.attribute_type = YLeaf(YType.uint16, "attribute-type")

                                                self.attribute_value = YLeaf(YType.str, "attribute-value")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("attribute_length",
                                                                "attribute_type",
                                                                "attribute_value") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.ExtAttributesList.UnknownAttributes, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.ExtAttributesList.UnknownAttributes, self).__setattr__(name, value)

                                            def has_data(self):
                                                return (
                                                    self.attribute_length.is_set or
                                                    self.attribute_type.is_set or
                                                    self.attribute_value.is_set)

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.attribute_length.yfilter != YFilter.not_set or
                                                    self.attribute_type.yfilter != YFilter.not_set or
                                                    self.attribute_value.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "unknown-attributes" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.attribute_length.is_set or self.attribute_length.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.attribute_length.get_name_leafdata())
                                                if (self.attribute_type.is_set or self.attribute_type.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.attribute_type.get_name_leafdata())
                                                if (self.attribute_value.is_set or self.attribute_value.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.attribute_value.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "attribute-length" or name == "attribute-type" or name == "attribute-value"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "attribute-length"):
                                                    self.attribute_length = value
                                                    self.attribute_length.value_namespace = name_space
                                                    self.attribute_length.value_namespace_prefix = name_space_prefix
                                                if(value_path == "attribute-type"):
                                                    self.attribute_type = value
                                                    self.attribute_type.value_namespace = name_space
                                                    self.attribute_type.value_namespace_prefix = name_space_prefix
                                                if(value_path == "attribute-value"):
                                                    self.attribute_value = value
                                                    self.attribute_value.value_namespace = name_space
                                                    self.attribute_value.value_namespace_prefix = name_space_prefix

                                        def has_data(self):
                                            for c in self.ext_community:
                                                if (c.has_data()):
                                                    return True
                                            for c in self.unknown_attributes:
                                                if (c.has_data()):
                                                    return True
                                            for leaf in self.cluster.getYLeafs():
                                                if (leaf.yfilter != YFilter.not_set):
                                                    return True
                                            return (
                                                self.aigp.is_set or
                                                self.originator_id.is_set or
                                                self.path_id.is_set)

                                        def has_operation(self):
                                            for c in self.ext_community:
                                                if (c.has_operation()):
                                                    return True
                                            for c in self.unknown_attributes:
                                                if (c.has_operation()):
                                                    return True
                                            for leaf in self.cluster.getYLeafs():
                                                if (leaf.is_set):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.aigp.yfilter != YFilter.not_set or
                                                self.cluster.yfilter != YFilter.not_set or
                                                self.originator_id.yfilter != YFilter.not_set or
                                                self.path_id.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "ext-attributes-list" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.aigp.is_set or self.aigp.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.aigp.get_name_leafdata())
                                            if (self.originator_id.is_set or self.originator_id.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.originator_id.get_name_leafdata())
                                            if (self.path_id.is_set or self.path_id.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.path_id.get_name_leafdata())

                                            leaf_name_data.extend(self.cluster.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            if (child_yang_name == "ext-community"):
                                                for c in self.ext_community:
                                                    segment = c.get_segment_path()
                                                    if (segment_path == segment):
                                                        return c
                                                c = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.ExtAttributesList.ExtCommunity()
                                                c.parent = self
                                                local_reference_key = "ydk::seg::%s" % segment_path
                                                self._local_refs[local_reference_key] = c
                                                self.ext_community.append(c)
                                                return c

                                            if (child_yang_name == "unknown-attributes"):
                                                for c in self.unknown_attributes:
                                                    segment = c.get_segment_path()
                                                    if (segment_path == segment):
                                                        return c
                                                c = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.ExtAttributesList.UnknownAttributes()
                                                c.parent = self
                                                local_reference_key = "ydk::seg::%s" % segment_path
                                                self._local_refs[local_reference_key] = c
                                                self.unknown_attributes.append(c)
                                                return c

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "ext-community" or name == "unknown-attributes" or name == "aigp" or name == "cluster" or name == "originator-id" or name == "path-id"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "aigp"):
                                                self.aigp = value
                                                self.aigp.value_namespace = name_space
                                                self.aigp.value_namespace_prefix = name_space_prefix
                                            if(value_path == "cluster"):
                                                self.cluster.append(value)
                                            if(value_path == "originator-id"):
                                                self.originator_id = value
                                                self.originator_id.value_namespace = name_space
                                                self.originator_id.value_namespace_prefix = name_space_prefix
                                            if(value_path == "path-id"):
                                                self.path_id = value
                                                self.path_id.value_namespace = name_space
                                                self.path_id.value_namespace_prefix = name_space_prefix


                                    class LastModifiedDate(Entity):
                                        """
                                        LastModifiedDate
                                        
                                        .. attribute:: time_value
                                        
                                        	TimeValue
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-oc-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.LastModifiedDate, self).__init__()

                                            self.yang_name = "last-modified-date"
                                            self.yang_parent_name = "route"

                                            self.time_value = YLeaf(YType.str, "time-value")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("time_value") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.LastModifiedDate, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.LastModifiedDate, self).__setattr__(name, value)

                                        def has_data(self):
                                            return self.time_value.is_set

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.time_value.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "last-modified-date" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.time_value.is_set or self.time_value.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.time_value.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "time-value"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "time-value"):
                                                self.time_value = value
                                                self.time_value.value_namespace = name_space
                                                self.time_value.value_namespace_prefix = name_space_prefix


                                    class LastUpdateRecieved(Entity):
                                        """
                                        LastUpdateRecieved
                                        
                                        .. attribute:: time_value
                                        
                                        	TimeValue
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-oc-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.LastUpdateRecieved, self).__init__()

                                            self.yang_name = "last-update-recieved"
                                            self.yang_parent_name = "route"

                                            self.time_value = YLeaf(YType.str, "time-value")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("time_value") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.LastUpdateRecieved, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.LastUpdateRecieved, self).__setattr__(name, value)

                                        def has_data(self):
                                            return self.time_value.is_set

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.time_value.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "last-update-recieved" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.time_value.is_set or self.time_value.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.time_value.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "time-value"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "time-value"):
                                                self.time_value = value
                                                self.time_value.value_namespace = name_space
                                                self.time_value.value_namespace_prefix = name_space_prefix

                                    def has_data(self):
                                        return (
                                            self.best_path.is_set or
                                            self.invalid_reason.is_set or
                                            self.neighbor_address.is_set or
                                            self.path_id.is_set or
                                            self.route.is_set or
                                            self.valid_route.is_set or
                                            (self.ext_attributes_list is not None and self.ext_attributes_list.has_data()) or
                                            (self.last_modified_date is not None and self.last_modified_date.has_data()) or
                                            (self.last_update_recieved is not None and self.last_update_recieved.has_data()) or
                                            (self.prefix_name is not None and self.prefix_name.has_data()) or
                                            (self.route_attr_list is not None and self.route_attr_list.has_data()))

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.best_path.yfilter != YFilter.not_set or
                                            self.invalid_reason.yfilter != YFilter.not_set or
                                            self.neighbor_address.yfilter != YFilter.not_set or
                                            self.path_id.yfilter != YFilter.not_set or
                                            self.route.yfilter != YFilter.not_set or
                                            self.valid_route.yfilter != YFilter.not_set or
                                            (self.ext_attributes_list is not None and self.ext_attributes_list.has_operation()) or
                                            (self.last_modified_date is not None and self.last_modified_date.has_operation()) or
                                            (self.last_update_recieved is not None and self.last_update_recieved.has_operation()) or
                                            (self.prefix_name is not None and self.prefix_name.has_operation()) or
                                            (self.route_attr_list is not None and self.route_attr_list.has_operation()))

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "route" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.best_path.is_set or self.best_path.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.best_path.get_name_leafdata())
                                        if (self.invalid_reason.is_set or self.invalid_reason.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.invalid_reason.get_name_leafdata())
                                        if (self.neighbor_address.is_set or self.neighbor_address.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.neighbor_address.get_name_leafdata())
                                        if (self.path_id.is_set or self.path_id.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.path_id.get_name_leafdata())
                                        if (self.route.is_set or self.route.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.route.get_name_leafdata())
                                        if (self.valid_route.is_set or self.valid_route.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.valid_route.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "ext-attributes-list"):
                                            if (self.ext_attributes_list is None):
                                                self.ext_attributes_list = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.ExtAttributesList()
                                                self.ext_attributes_list.parent = self
                                                self._children_name_map["ext_attributes_list"] = "ext-attributes-list"
                                            return self.ext_attributes_list

                                        if (child_yang_name == "last-modified-date"):
                                            if (self.last_modified_date is None):
                                                self.last_modified_date = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.LastModifiedDate()
                                                self.last_modified_date.parent = self
                                                self._children_name_map["last_modified_date"] = "last-modified-date"
                                            return self.last_modified_date

                                        if (child_yang_name == "last-update-recieved"):
                                            if (self.last_update_recieved is None):
                                                self.last_update_recieved = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.LastUpdateRecieved()
                                                self.last_update_recieved.parent = self
                                                self._children_name_map["last_update_recieved"] = "last-update-recieved"
                                            return self.last_update_recieved

                                        if (child_yang_name == "prefix-name"):
                                            if (self.prefix_name is None):
                                                self.prefix_name = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.PrefixName()
                                                self.prefix_name.parent = self
                                                self._children_name_map["prefix_name"] = "prefix-name"
                                            return self.prefix_name

                                        if (child_yang_name == "route-attr-list"):
                                            if (self.route_attr_list is None):
                                                self.route_attr_list = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.RouteAttrList()
                                                self.route_attr_list.parent = self
                                                self._children_name_map["route_attr_list"] = "route-attr-list"
                                            return self.route_attr_list

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "ext-attributes-list" or name == "last-modified-date" or name == "last-update-recieved" or name == "prefix-name" or name == "route-attr-list" or name == "best-path" or name == "invalid-reason" or name == "neighbor-address" or name == "path-id" or name == "route" or name == "valid-route"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "best-path"):
                                            self.best_path = value
                                            self.best_path.value_namespace = name_space
                                            self.best_path.value_namespace_prefix = name_space_prefix
                                        if(value_path == "invalid-reason"):
                                            self.invalid_reason = value
                                            self.invalid_reason.value_namespace = name_space
                                            self.invalid_reason.value_namespace_prefix = name_space_prefix
                                        if(value_path == "neighbor-address"):
                                            self.neighbor_address = value
                                            self.neighbor_address.value_namespace = name_space
                                            self.neighbor_address.value_namespace_prefix = name_space_prefix
                                        if(value_path == "path-id"):
                                            self.path_id = value
                                            self.path_id.value_namespace = name_space
                                            self.path_id.value_namespace_prefix = name_space_prefix
                                        if(value_path == "route"):
                                            self.route = value
                                            self.route.value_namespace = name_space
                                            self.route.value_namespace_prefix = name_space_prefix
                                        if(value_path == "valid-route"):
                                            self.valid_route = value
                                            self.valid_route.value_namespace = name_space
                                            self.valid_route.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.route:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.route:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "routes" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "route"):
                                        for c in self.route:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.route.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "route"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class NumRoutes(Entity):
                                """
                                Number of routes in adjacency rib out\-bound
                                post\-policy table
                                
                                .. attribute:: num_routes
                                
                                	NumRoutes
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv4-bgp-oc-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.NumRoutes, self).__init__()

                                    self.yang_name = "num-routes"
                                    self.yang_parent_name = "adj-rib-out-pre"

                                    self.num_routes = YLeaf(YType.uint64, "num-routes")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("num_routes") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.NumRoutes, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.NumRoutes, self).__setattr__(name, value)

                                def has_data(self):
                                    return self.num_routes.is_set

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.num_routes.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "num-routes" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.num_routes.is_set or self.num_routes.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.num_routes.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "num-routes"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "num-routes"):
                                        self.num_routes = value
                                        self.num_routes.value_namespace = name_space
                                        self.num_routes.value_namespace_prefix = name_space_prefix

                            def has_data(self):
                                return (
                                    (self.num_routes is not None and self.num_routes.has_data()) or
                                    (self.routes is not None and self.routes.has_data()))

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    (self.num_routes is not None and self.num_routes.has_operation()) or
                                    (self.routes is not None and self.routes.has_operation()))

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "adj-rib-out-pre" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "num-routes"):
                                    if (self.num_routes is None):
                                        self.num_routes = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.NumRoutes()
                                        self.num_routes.parent = self
                                        self._children_name_map["num_routes"] = "num-routes"
                                    return self.num_routes

                                if (child_yang_name == "routes"):
                                    if (self.routes is None):
                                        self.routes = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes()
                                        self.routes.parent = self
                                        self._children_name_map["routes"] = "routes"
                                    return self.routes

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "num-routes" or name == "routes"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                pass


                        class AdjRibInPre(Entity):
                            """
                            Adjacency rib in\-bound pre\-policy table
                            
                            .. attribute:: num_routes
                            
                            	Number of routes in adjacency rib out\-bound post\-policy table
                            	**type**\:   :py:class:`NumRoutes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.NumRoutes>`
                            
                            .. attribute:: routes
                            
                            	routes table
                            	**type**\:   :py:class:`Routes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes>`
                            
                            

                            """

                            _prefix = 'ipv4-bgp-oc-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre, self).__init__()

                                self.yang_name = "adj-rib-in-pre"
                                self.yang_parent_name = "open-config-neighbor"

                                self.num_routes = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.NumRoutes()
                                self.num_routes.parent = self
                                self._children_name_map["num_routes"] = "num-routes"
                                self._children_yang_names.add("num-routes")

                                self.routes = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes()
                                self.routes.parent = self
                                self._children_name_map["routes"] = "routes"
                                self._children_yang_names.add("routes")


                            class Routes(Entity):
                                """
                                routes table
                                
                                .. attribute:: route
                                
                                	route entry
                                	**type**\: list of    :py:class:`Route <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route>`
                                
                                

                                """

                                _prefix = 'ipv4-bgp-oc-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes, self).__init__()

                                    self.yang_name = "routes"
                                    self.yang_parent_name = "adj-rib-in-pre"

                                    self.route = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes, self).__setattr__(name, value)


                                class Route(Entity):
                                    """
                                    route entry
                                    
                                    .. attribute:: best_path
                                    
                                    	BestPath
                                    	**type**\:  bool
                                    
                                    .. attribute:: ext_attributes_list
                                    
                                    	ExtAttributesList
                                    	**type**\:   :py:class:`ExtAttributesList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.ExtAttributesList>`
                                    
                                    .. attribute:: invalid_reason
                                    
                                    	IndentityRef
                                    	**type**\:   :py:class:`BgpOcInvalidRouteReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.BgpOcInvalidRouteReason>`
                                    
                                    .. attribute:: last_modified_date
                                    
                                    	LastModifiedDate
                                    	**type**\:   :py:class:`LastModifiedDate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.LastModifiedDate>`
                                    
                                    .. attribute:: last_update_recieved
                                    
                                    	LastUpdateRecieved
                                    	**type**\:   :py:class:`LastUpdateRecieved <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.LastUpdateRecieved>`
                                    
                                    .. attribute:: neighbor_address
                                    
                                    	Neighbor address
                                    	**type**\: one of the below types:
                                    
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    
                                    ----
                                    	**type**\:  str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    
                                    ----
                                    .. attribute:: path_id
                                    
                                    	Path ID
                                    	**type**\:  int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    .. attribute:: prefix_name
                                    
                                    	Prefix
                                    	**type**\:   :py:class:`PrefixName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.PrefixName>`
                                    
                                    .. attribute:: route
                                    
                                    	Network in prefix/length format
                                    	**type**\: one of the below types:
                                    
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                    
                                    
                                    ----
                                    	**type**\:  str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                    
                                    
                                    ----
                                    .. attribute:: route_attr_list
                                    
                                    	RouteAttributesList
                                    	**type**\:   :py:class:`RouteAttrList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.RouteAttrList>`
                                    
                                    .. attribute:: valid_route
                                    
                                    	ValidRoute
                                    	**type**\:  bool
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-oc-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route, self).__init__()

                                        self.yang_name = "route"
                                        self.yang_parent_name = "routes"

                                        self.best_path = YLeaf(YType.boolean, "best-path")

                                        self.invalid_reason = YLeaf(YType.enumeration, "invalid-reason")

                                        self.neighbor_address = YLeaf(YType.str, "neighbor-address")

                                        self.path_id = YLeaf(YType.int32, "path-id")

                                        self.route = YLeaf(YType.str, "route")

                                        self.valid_route = YLeaf(YType.boolean, "valid-route")

                                        self.ext_attributes_list = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.ExtAttributesList()
                                        self.ext_attributes_list.parent = self
                                        self._children_name_map["ext_attributes_list"] = "ext-attributes-list"
                                        self._children_yang_names.add("ext-attributes-list")

                                        self.last_modified_date = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.LastModifiedDate()
                                        self.last_modified_date.parent = self
                                        self._children_name_map["last_modified_date"] = "last-modified-date"
                                        self._children_yang_names.add("last-modified-date")

                                        self.last_update_recieved = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.LastUpdateRecieved()
                                        self.last_update_recieved.parent = self
                                        self._children_name_map["last_update_recieved"] = "last-update-recieved"
                                        self._children_yang_names.add("last-update-recieved")

                                        self.prefix_name = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.PrefixName()
                                        self.prefix_name.parent = self
                                        self._children_name_map["prefix_name"] = "prefix-name"
                                        self._children_yang_names.add("prefix-name")

                                        self.route_attr_list = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.RouteAttrList()
                                        self.route_attr_list.parent = self
                                        self._children_name_map["route_attr_list"] = "route-attr-list"
                                        self._children_yang_names.add("route-attr-list")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("best_path",
                                                        "invalid_reason",
                                                        "neighbor_address",
                                                        "path_id",
                                                        "route",
                                                        "valid_route") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route, self).__setattr__(name, value)


                                    class PrefixName(Entity):
                                        """
                                        Prefix
                                        
                                        .. attribute:: prefix
                                        
                                        	Prefix
                                        	**type**\:   :py:class:`Prefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.PrefixName.Prefix>`
                                        
                                        .. attribute:: prefix_length
                                        
                                        	Prefix length
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-oc-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.PrefixName, self).__init__()

                                            self.yang_name = "prefix-name"
                                            self.yang_parent_name = "route"

                                            self.prefix_length = YLeaf(YType.uint8, "prefix-length")

                                            self.prefix = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.PrefixName.Prefix()
                                            self.prefix.parent = self
                                            self._children_name_map["prefix"] = "prefix"
                                            self._children_yang_names.add("prefix")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("prefix_length") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.PrefixName, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.PrefixName, self).__setattr__(name, value)


                                        class Prefix(Entity):
                                            """
                                            Prefix
                                            
                                            .. attribute:: afi
                                            
                                            	AFI
                                            	**type**\:   :py:class:`BgpOcAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.BgpOcAfi>`
                                            
                                            .. attribute:: ipv4_address
                                            
                                            	IPv4 Addr
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: ipv6_address
                                            
                                            	IPv6 Addr
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-oc-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.PrefixName.Prefix, self).__init__()

                                                self.yang_name = "prefix"
                                                self.yang_parent_name = "prefix-name"

                                                self.afi = YLeaf(YType.enumeration, "afi")

                                                self.ipv4_address = YLeaf(YType.str, "ipv4-address")

                                                self.ipv6_address = YLeaf(YType.str, "ipv6-address")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("afi",
                                                                "ipv4_address",
                                                                "ipv6_address") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.PrefixName.Prefix, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.PrefixName.Prefix, self).__setattr__(name, value)

                                            def has_data(self):
                                                return (
                                                    self.afi.is_set or
                                                    self.ipv4_address.is_set or
                                                    self.ipv6_address.is_set)

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.afi.yfilter != YFilter.not_set or
                                                    self.ipv4_address.yfilter != YFilter.not_set or
                                                    self.ipv6_address.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "prefix" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.afi.is_set or self.afi.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.afi.get_name_leafdata())
                                                if (self.ipv4_address.is_set or self.ipv4_address.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.ipv4_address.get_name_leafdata())
                                                if (self.ipv6_address.is_set or self.ipv6_address.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.ipv6_address.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "afi" or name == "ipv4-address" or name == "ipv6-address"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "afi"):
                                                    self.afi = value
                                                    self.afi.value_namespace = name_space
                                                    self.afi.value_namespace_prefix = name_space_prefix
                                                if(value_path == "ipv4-address"):
                                                    self.ipv4_address = value
                                                    self.ipv4_address.value_namespace = name_space
                                                    self.ipv4_address.value_namespace_prefix = name_space_prefix
                                                if(value_path == "ipv6-address"):
                                                    self.ipv6_address = value
                                                    self.ipv6_address.value_namespace = name_space
                                                    self.ipv6_address.value_namespace_prefix = name_space_prefix

                                        def has_data(self):
                                            return (
                                                self.prefix_length.is_set or
                                                (self.prefix is not None and self.prefix.has_data()))

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.prefix_length.yfilter != YFilter.not_set or
                                                (self.prefix is not None and self.prefix.has_operation()))

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "prefix-name" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.prefix_length.is_set or self.prefix_length.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.prefix_length.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            if (child_yang_name == "prefix"):
                                                if (self.prefix is None):
                                                    self.prefix = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.PrefixName.Prefix()
                                                    self.prefix.parent = self
                                                    self._children_name_map["prefix"] = "prefix"
                                                return self.prefix

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "prefix" or name == "prefix-length"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "prefix-length"):
                                                self.prefix_length = value
                                                self.prefix_length.value_namespace = name_space
                                                self.prefix_length.value_namespace_prefix = name_space_prefix


                                    class RouteAttrList(Entity):
                                        """
                                        RouteAttributesList
                                        
                                        .. attribute:: aggregrator_attributes
                                        
                                        	AggregatorList
                                        	**type**\:   :py:class:`AggregratorAttributes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.RouteAttrList.AggregratorAttributes>`
                                        
                                        .. attribute:: as4_path
                                        
                                        	AS4 Path
                                        	**type**\:  str
                                        
                                        .. attribute:: as_path
                                        
                                        	AS Path
                                        	**type**\:  str
                                        
                                        .. attribute:: atomic_aggr
                                        
                                        	AtomicAggr
                                        	**type**\:  bool
                                        
                                        .. attribute:: community
                                        
                                        	CommunityArray
                                        	**type**\: list of    :py:class:`Community <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.RouteAttrList.Community>`
                                        
                                        .. attribute:: local_pref
                                        
                                        	LocalPref
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: med
                                        
                                        	Med
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: next_hop
                                        
                                        	NextHopAddress
                                        	**type**\:   :py:class:`NextHop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.RouteAttrList.NextHop>`
                                        
                                        .. attribute:: origin_type
                                        
                                        	Origin Attribute Type
                                        	**type**\:   :py:class:`BgpOcOriginAttr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.BgpOcOriginAttr>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-oc-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.RouteAttrList, self).__init__()

                                            self.yang_name = "route-attr-list"
                                            self.yang_parent_name = "route"

                                            self.as4_path = YLeaf(YType.str, "as4-path")

                                            self.as_path = YLeaf(YType.str, "as-path")

                                            self.atomic_aggr = YLeaf(YType.boolean, "atomic-aggr")

                                            self.local_pref = YLeaf(YType.uint32, "local-pref")

                                            self.med = YLeaf(YType.uint32, "med")

                                            self.origin_type = YLeaf(YType.enumeration, "origin-type")

                                            self.aggregrator_attributes = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.RouteAttrList.AggregratorAttributes()
                                            self.aggregrator_attributes.parent = self
                                            self._children_name_map["aggregrator_attributes"] = "aggregrator-attributes"
                                            self._children_yang_names.add("aggregrator-attributes")

                                            self.next_hop = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.RouteAttrList.NextHop()
                                            self.next_hop.parent = self
                                            self._children_name_map["next_hop"] = "next-hop"
                                            self._children_yang_names.add("next-hop")

                                            self.community = YList(self)

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("as4_path",
                                                            "as_path",
                                                            "atomic_aggr",
                                                            "local_pref",
                                                            "med",
                                                            "origin_type") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.RouteAttrList, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.RouteAttrList, self).__setattr__(name, value)


                                        class NextHop(Entity):
                                            """
                                            NextHopAddress
                                            
                                            .. attribute:: afi
                                            
                                            	AFI
                                            	**type**\:   :py:class:`BgpOcAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.BgpOcAfi>`
                                            
                                            .. attribute:: ipv4_address
                                            
                                            	IPv4 Addr
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: ipv6_address
                                            
                                            	IPv6 Addr
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-oc-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.RouteAttrList.NextHop, self).__init__()

                                                self.yang_name = "next-hop"
                                                self.yang_parent_name = "route-attr-list"

                                                self.afi = YLeaf(YType.enumeration, "afi")

                                                self.ipv4_address = YLeaf(YType.str, "ipv4-address")

                                                self.ipv6_address = YLeaf(YType.str, "ipv6-address")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("afi",
                                                                "ipv4_address",
                                                                "ipv6_address") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.RouteAttrList.NextHop, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.RouteAttrList.NextHop, self).__setattr__(name, value)

                                            def has_data(self):
                                                return (
                                                    self.afi.is_set or
                                                    self.ipv4_address.is_set or
                                                    self.ipv6_address.is_set)

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.afi.yfilter != YFilter.not_set or
                                                    self.ipv4_address.yfilter != YFilter.not_set or
                                                    self.ipv6_address.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "next-hop" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.afi.is_set or self.afi.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.afi.get_name_leafdata())
                                                if (self.ipv4_address.is_set or self.ipv4_address.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.ipv4_address.get_name_leafdata())
                                                if (self.ipv6_address.is_set or self.ipv6_address.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.ipv6_address.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "afi" or name == "ipv4-address" or name == "ipv6-address"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "afi"):
                                                    self.afi = value
                                                    self.afi.value_namespace = name_space
                                                    self.afi.value_namespace_prefix = name_space_prefix
                                                if(value_path == "ipv4-address"):
                                                    self.ipv4_address = value
                                                    self.ipv4_address.value_namespace = name_space
                                                    self.ipv4_address.value_namespace_prefix = name_space_prefix
                                                if(value_path == "ipv6-address"):
                                                    self.ipv6_address = value
                                                    self.ipv6_address.value_namespace = name_space
                                                    self.ipv6_address.value_namespace_prefix = name_space_prefix


                                        class AggregratorAttributes(Entity):
                                            """
                                            AggregatorList
                                            
                                            .. attribute:: address
                                            
                                            	IPv4 address
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: as4
                                            
                                            	AS4 number
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: as_
                                            
                                            	AS number
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-oc-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.RouteAttrList.AggregratorAttributes, self).__init__()

                                                self.yang_name = "aggregrator-attributes"
                                                self.yang_parent_name = "route-attr-list"

                                                self.address = YLeaf(YType.str, "address")

                                                self.as4 = YLeaf(YType.uint32, "as4")

                                                self.as_ = YLeaf(YType.uint32, "as")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("address",
                                                                "as4",
                                                                "as_") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.RouteAttrList.AggregratorAttributes, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.RouteAttrList.AggregratorAttributes, self).__setattr__(name, value)

                                            def has_data(self):
                                                return (
                                                    self.address.is_set or
                                                    self.as4.is_set or
                                                    self.as_.is_set)

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.address.yfilter != YFilter.not_set or
                                                    self.as4.yfilter != YFilter.not_set or
                                                    self.as_.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "aggregrator-attributes" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.address.is_set or self.address.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.address.get_name_leafdata())
                                                if (self.as4.is_set or self.as4.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.as4.get_name_leafdata())
                                                if (self.as_.is_set or self.as_.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.as_.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "address" or name == "as4" or name == "as"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "address"):
                                                    self.address = value
                                                    self.address.value_namespace = name_space
                                                    self.address.value_namespace_prefix = name_space_prefix
                                                if(value_path == "as4"):
                                                    self.as4 = value
                                                    self.as4.value_namespace = name_space
                                                    self.as4.value_namespace_prefix = name_space_prefix
                                                if(value_path == "as"):
                                                    self.as_ = value
                                                    self.as_.value_namespace = name_space
                                                    self.as_.value_namespace_prefix = name_space_prefix


                                        class Community(Entity):
                                            """
                                            CommunityArray
                                            
                                            .. attribute:: objects
                                            
                                            	BGP OC objects
                                            	**type**\:  str
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-oc-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.RouteAttrList.Community, self).__init__()

                                                self.yang_name = "community"
                                                self.yang_parent_name = "route-attr-list"

                                                self.objects = YLeaf(YType.str, "objects")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("objects") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.RouteAttrList.Community, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.RouteAttrList.Community, self).__setattr__(name, value)

                                            def has_data(self):
                                                return self.objects.is_set

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.objects.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "community" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.objects.is_set or self.objects.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.objects.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "objects"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "objects"):
                                                    self.objects = value
                                                    self.objects.value_namespace = name_space
                                                    self.objects.value_namespace_prefix = name_space_prefix

                                        def has_data(self):
                                            for c in self.community:
                                                if (c.has_data()):
                                                    return True
                                            return (
                                                self.as4_path.is_set or
                                                self.as_path.is_set or
                                                self.atomic_aggr.is_set or
                                                self.local_pref.is_set or
                                                self.med.is_set or
                                                self.origin_type.is_set or
                                                (self.aggregrator_attributes is not None and self.aggregrator_attributes.has_data()) or
                                                (self.next_hop is not None and self.next_hop.has_data()))

                                        def has_operation(self):
                                            for c in self.community:
                                                if (c.has_operation()):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.as4_path.yfilter != YFilter.not_set or
                                                self.as_path.yfilter != YFilter.not_set or
                                                self.atomic_aggr.yfilter != YFilter.not_set or
                                                self.local_pref.yfilter != YFilter.not_set or
                                                self.med.yfilter != YFilter.not_set or
                                                self.origin_type.yfilter != YFilter.not_set or
                                                (self.aggregrator_attributes is not None and self.aggregrator_attributes.has_operation()) or
                                                (self.next_hop is not None and self.next_hop.has_operation()))

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "route-attr-list" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.as4_path.is_set or self.as4_path.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.as4_path.get_name_leafdata())
                                            if (self.as_path.is_set or self.as_path.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.as_path.get_name_leafdata())
                                            if (self.atomic_aggr.is_set or self.atomic_aggr.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.atomic_aggr.get_name_leafdata())
                                            if (self.local_pref.is_set or self.local_pref.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.local_pref.get_name_leafdata())
                                            if (self.med.is_set or self.med.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.med.get_name_leafdata())
                                            if (self.origin_type.is_set or self.origin_type.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.origin_type.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            if (child_yang_name == "aggregrator-attributes"):
                                                if (self.aggregrator_attributes is None):
                                                    self.aggregrator_attributes = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.RouteAttrList.AggregratorAttributes()
                                                    self.aggregrator_attributes.parent = self
                                                    self._children_name_map["aggregrator_attributes"] = "aggregrator-attributes"
                                                return self.aggregrator_attributes

                                            if (child_yang_name == "community"):
                                                for c in self.community:
                                                    segment = c.get_segment_path()
                                                    if (segment_path == segment):
                                                        return c
                                                c = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.RouteAttrList.Community()
                                                c.parent = self
                                                local_reference_key = "ydk::seg::%s" % segment_path
                                                self._local_refs[local_reference_key] = c
                                                self.community.append(c)
                                                return c

                                            if (child_yang_name == "next-hop"):
                                                if (self.next_hop is None):
                                                    self.next_hop = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.RouteAttrList.NextHop()
                                                    self.next_hop.parent = self
                                                    self._children_name_map["next_hop"] = "next-hop"
                                                return self.next_hop

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "aggregrator-attributes" or name == "community" or name == "next-hop" or name == "as4-path" or name == "as-path" or name == "atomic-aggr" or name == "local-pref" or name == "med" or name == "origin-type"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "as4-path"):
                                                self.as4_path = value
                                                self.as4_path.value_namespace = name_space
                                                self.as4_path.value_namespace_prefix = name_space_prefix
                                            if(value_path == "as-path"):
                                                self.as_path = value
                                                self.as_path.value_namespace = name_space
                                                self.as_path.value_namespace_prefix = name_space_prefix
                                            if(value_path == "atomic-aggr"):
                                                self.atomic_aggr = value
                                                self.atomic_aggr.value_namespace = name_space
                                                self.atomic_aggr.value_namespace_prefix = name_space_prefix
                                            if(value_path == "local-pref"):
                                                self.local_pref = value
                                                self.local_pref.value_namespace = name_space
                                                self.local_pref.value_namespace_prefix = name_space_prefix
                                            if(value_path == "med"):
                                                self.med = value
                                                self.med.value_namespace = name_space
                                                self.med.value_namespace_prefix = name_space_prefix
                                            if(value_path == "origin-type"):
                                                self.origin_type = value
                                                self.origin_type.value_namespace = name_space
                                                self.origin_type.value_namespace_prefix = name_space_prefix


                                    class ExtAttributesList(Entity):
                                        """
                                        ExtAttributesList
                                        
                                        .. attribute:: aigp
                                        
                                        	AIGP
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: cluster
                                        
                                        	ClusterList
                                        	**type**\:  list of str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        .. attribute:: ext_community
                                        
                                        	ExtendedCommunityArray
                                        	**type**\: list of    :py:class:`ExtCommunity <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.ExtAttributesList.ExtCommunity>`
                                        
                                        .. attribute:: originator_id
                                        
                                        	OriginatorID
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        .. attribute:: path_id
                                        
                                        	PathId
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: unknown_attributes
                                        
                                        	UnknownAttributes
                                        	**type**\: list of    :py:class:`UnknownAttributes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.ExtAttributesList.UnknownAttributes>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-oc-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.ExtAttributesList, self).__init__()

                                            self.yang_name = "ext-attributes-list"
                                            self.yang_parent_name = "route"

                                            self.aigp = YLeaf(YType.uint64, "aigp")

                                            self.cluster = YLeafList(YType.str, "cluster")

                                            self.originator_id = YLeaf(YType.str, "originator-id")

                                            self.path_id = YLeaf(YType.uint32, "path-id")

                                            self.ext_community = YList(self)
                                            self.unknown_attributes = YList(self)

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("aigp",
                                                            "cluster",
                                                            "originator_id",
                                                            "path_id") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.ExtAttributesList, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.ExtAttributesList, self).__setattr__(name, value)


                                        class ExtCommunity(Entity):
                                            """
                                            ExtendedCommunityArray
                                            
                                            .. attribute:: objects
                                            
                                            	BGP OC objects
                                            	**type**\:  str
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-oc-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.ExtAttributesList.ExtCommunity, self).__init__()

                                                self.yang_name = "ext-community"
                                                self.yang_parent_name = "ext-attributes-list"

                                                self.objects = YLeaf(YType.str, "objects")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("objects") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.ExtAttributesList.ExtCommunity, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.ExtAttributesList.ExtCommunity, self).__setattr__(name, value)

                                            def has_data(self):
                                                return self.objects.is_set

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.objects.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "ext-community" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.objects.is_set or self.objects.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.objects.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "objects"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "objects"):
                                                    self.objects = value
                                                    self.objects.value_namespace = name_space
                                                    self.objects.value_namespace_prefix = name_space_prefix


                                        class UnknownAttributes(Entity):
                                            """
                                            UnknownAttributes
                                            
                                            .. attribute:: attribute_length
                                            
                                            	AttributeLength
                                            	**type**\:  int
                                            
                                            	**range:** 0..65535
                                            
                                            .. attribute:: attribute_type
                                            
                                            	AttributeType
                                            	**type**\:  int
                                            
                                            	**range:** 0..65535
                                            
                                            .. attribute:: attribute_value
                                            
                                            	Atributevalue
                                            	**type**\:  str
                                            
                                            	**pattern:** ([0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2})\*)?
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-oc-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.ExtAttributesList.UnknownAttributes, self).__init__()

                                                self.yang_name = "unknown-attributes"
                                                self.yang_parent_name = "ext-attributes-list"

                                                self.attribute_length = YLeaf(YType.uint16, "attribute-length")

                                                self.attribute_type = YLeaf(YType.uint16, "attribute-type")

                                                self.attribute_value = YLeaf(YType.str, "attribute-value")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("attribute_length",
                                                                "attribute_type",
                                                                "attribute_value") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.ExtAttributesList.UnknownAttributes, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.ExtAttributesList.UnknownAttributes, self).__setattr__(name, value)

                                            def has_data(self):
                                                return (
                                                    self.attribute_length.is_set or
                                                    self.attribute_type.is_set or
                                                    self.attribute_value.is_set)

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.attribute_length.yfilter != YFilter.not_set or
                                                    self.attribute_type.yfilter != YFilter.not_set or
                                                    self.attribute_value.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "unknown-attributes" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.attribute_length.is_set or self.attribute_length.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.attribute_length.get_name_leafdata())
                                                if (self.attribute_type.is_set or self.attribute_type.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.attribute_type.get_name_leafdata())
                                                if (self.attribute_value.is_set or self.attribute_value.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.attribute_value.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "attribute-length" or name == "attribute-type" or name == "attribute-value"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "attribute-length"):
                                                    self.attribute_length = value
                                                    self.attribute_length.value_namespace = name_space
                                                    self.attribute_length.value_namespace_prefix = name_space_prefix
                                                if(value_path == "attribute-type"):
                                                    self.attribute_type = value
                                                    self.attribute_type.value_namespace = name_space
                                                    self.attribute_type.value_namespace_prefix = name_space_prefix
                                                if(value_path == "attribute-value"):
                                                    self.attribute_value = value
                                                    self.attribute_value.value_namespace = name_space
                                                    self.attribute_value.value_namespace_prefix = name_space_prefix

                                        def has_data(self):
                                            for c in self.ext_community:
                                                if (c.has_data()):
                                                    return True
                                            for c in self.unknown_attributes:
                                                if (c.has_data()):
                                                    return True
                                            for leaf in self.cluster.getYLeafs():
                                                if (leaf.yfilter != YFilter.not_set):
                                                    return True
                                            return (
                                                self.aigp.is_set or
                                                self.originator_id.is_set or
                                                self.path_id.is_set)

                                        def has_operation(self):
                                            for c in self.ext_community:
                                                if (c.has_operation()):
                                                    return True
                                            for c in self.unknown_attributes:
                                                if (c.has_operation()):
                                                    return True
                                            for leaf in self.cluster.getYLeafs():
                                                if (leaf.is_set):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.aigp.yfilter != YFilter.not_set or
                                                self.cluster.yfilter != YFilter.not_set or
                                                self.originator_id.yfilter != YFilter.not_set or
                                                self.path_id.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "ext-attributes-list" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.aigp.is_set or self.aigp.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.aigp.get_name_leafdata())
                                            if (self.originator_id.is_set or self.originator_id.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.originator_id.get_name_leafdata())
                                            if (self.path_id.is_set or self.path_id.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.path_id.get_name_leafdata())

                                            leaf_name_data.extend(self.cluster.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            if (child_yang_name == "ext-community"):
                                                for c in self.ext_community:
                                                    segment = c.get_segment_path()
                                                    if (segment_path == segment):
                                                        return c
                                                c = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.ExtAttributesList.ExtCommunity()
                                                c.parent = self
                                                local_reference_key = "ydk::seg::%s" % segment_path
                                                self._local_refs[local_reference_key] = c
                                                self.ext_community.append(c)
                                                return c

                                            if (child_yang_name == "unknown-attributes"):
                                                for c in self.unknown_attributes:
                                                    segment = c.get_segment_path()
                                                    if (segment_path == segment):
                                                        return c
                                                c = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.ExtAttributesList.UnknownAttributes()
                                                c.parent = self
                                                local_reference_key = "ydk::seg::%s" % segment_path
                                                self._local_refs[local_reference_key] = c
                                                self.unknown_attributes.append(c)
                                                return c

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "ext-community" or name == "unknown-attributes" or name == "aigp" or name == "cluster" or name == "originator-id" or name == "path-id"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "aigp"):
                                                self.aigp = value
                                                self.aigp.value_namespace = name_space
                                                self.aigp.value_namespace_prefix = name_space_prefix
                                            if(value_path == "cluster"):
                                                self.cluster.append(value)
                                            if(value_path == "originator-id"):
                                                self.originator_id = value
                                                self.originator_id.value_namespace = name_space
                                                self.originator_id.value_namespace_prefix = name_space_prefix
                                            if(value_path == "path-id"):
                                                self.path_id = value
                                                self.path_id.value_namespace = name_space
                                                self.path_id.value_namespace_prefix = name_space_prefix


                                    class LastModifiedDate(Entity):
                                        """
                                        LastModifiedDate
                                        
                                        .. attribute:: time_value
                                        
                                        	TimeValue
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-oc-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.LastModifiedDate, self).__init__()

                                            self.yang_name = "last-modified-date"
                                            self.yang_parent_name = "route"

                                            self.time_value = YLeaf(YType.str, "time-value")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("time_value") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.LastModifiedDate, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.LastModifiedDate, self).__setattr__(name, value)

                                        def has_data(self):
                                            return self.time_value.is_set

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.time_value.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "last-modified-date" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.time_value.is_set or self.time_value.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.time_value.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "time-value"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "time-value"):
                                                self.time_value = value
                                                self.time_value.value_namespace = name_space
                                                self.time_value.value_namespace_prefix = name_space_prefix


                                    class LastUpdateRecieved(Entity):
                                        """
                                        LastUpdateRecieved
                                        
                                        .. attribute:: time_value
                                        
                                        	TimeValue
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-oc-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.LastUpdateRecieved, self).__init__()

                                            self.yang_name = "last-update-recieved"
                                            self.yang_parent_name = "route"

                                            self.time_value = YLeaf(YType.str, "time-value")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("time_value") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.LastUpdateRecieved, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.LastUpdateRecieved, self).__setattr__(name, value)

                                        def has_data(self):
                                            return self.time_value.is_set

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.time_value.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "last-update-recieved" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.time_value.is_set or self.time_value.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.time_value.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "time-value"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "time-value"):
                                                self.time_value = value
                                                self.time_value.value_namespace = name_space
                                                self.time_value.value_namespace_prefix = name_space_prefix

                                    def has_data(self):
                                        return (
                                            self.best_path.is_set or
                                            self.invalid_reason.is_set or
                                            self.neighbor_address.is_set or
                                            self.path_id.is_set or
                                            self.route.is_set or
                                            self.valid_route.is_set or
                                            (self.ext_attributes_list is not None and self.ext_attributes_list.has_data()) or
                                            (self.last_modified_date is not None and self.last_modified_date.has_data()) or
                                            (self.last_update_recieved is not None and self.last_update_recieved.has_data()) or
                                            (self.prefix_name is not None and self.prefix_name.has_data()) or
                                            (self.route_attr_list is not None and self.route_attr_list.has_data()))

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.best_path.yfilter != YFilter.not_set or
                                            self.invalid_reason.yfilter != YFilter.not_set or
                                            self.neighbor_address.yfilter != YFilter.not_set or
                                            self.path_id.yfilter != YFilter.not_set or
                                            self.route.yfilter != YFilter.not_set or
                                            self.valid_route.yfilter != YFilter.not_set or
                                            (self.ext_attributes_list is not None and self.ext_attributes_list.has_operation()) or
                                            (self.last_modified_date is not None and self.last_modified_date.has_operation()) or
                                            (self.last_update_recieved is not None and self.last_update_recieved.has_operation()) or
                                            (self.prefix_name is not None and self.prefix_name.has_operation()) or
                                            (self.route_attr_list is not None and self.route_attr_list.has_operation()))

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "route" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.best_path.is_set or self.best_path.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.best_path.get_name_leafdata())
                                        if (self.invalid_reason.is_set or self.invalid_reason.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.invalid_reason.get_name_leafdata())
                                        if (self.neighbor_address.is_set or self.neighbor_address.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.neighbor_address.get_name_leafdata())
                                        if (self.path_id.is_set or self.path_id.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.path_id.get_name_leafdata())
                                        if (self.route.is_set or self.route.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.route.get_name_leafdata())
                                        if (self.valid_route.is_set or self.valid_route.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.valid_route.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "ext-attributes-list"):
                                            if (self.ext_attributes_list is None):
                                                self.ext_attributes_list = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.ExtAttributesList()
                                                self.ext_attributes_list.parent = self
                                                self._children_name_map["ext_attributes_list"] = "ext-attributes-list"
                                            return self.ext_attributes_list

                                        if (child_yang_name == "last-modified-date"):
                                            if (self.last_modified_date is None):
                                                self.last_modified_date = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.LastModifiedDate()
                                                self.last_modified_date.parent = self
                                                self._children_name_map["last_modified_date"] = "last-modified-date"
                                            return self.last_modified_date

                                        if (child_yang_name == "last-update-recieved"):
                                            if (self.last_update_recieved is None):
                                                self.last_update_recieved = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.LastUpdateRecieved()
                                                self.last_update_recieved.parent = self
                                                self._children_name_map["last_update_recieved"] = "last-update-recieved"
                                            return self.last_update_recieved

                                        if (child_yang_name == "prefix-name"):
                                            if (self.prefix_name is None):
                                                self.prefix_name = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.PrefixName()
                                                self.prefix_name.parent = self
                                                self._children_name_map["prefix_name"] = "prefix-name"
                                            return self.prefix_name

                                        if (child_yang_name == "route-attr-list"):
                                            if (self.route_attr_list is None):
                                                self.route_attr_list = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.RouteAttrList()
                                                self.route_attr_list.parent = self
                                                self._children_name_map["route_attr_list"] = "route-attr-list"
                                            return self.route_attr_list

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "ext-attributes-list" or name == "last-modified-date" or name == "last-update-recieved" or name == "prefix-name" or name == "route-attr-list" or name == "best-path" or name == "invalid-reason" or name == "neighbor-address" or name == "path-id" or name == "route" or name == "valid-route"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "best-path"):
                                            self.best_path = value
                                            self.best_path.value_namespace = name_space
                                            self.best_path.value_namespace_prefix = name_space_prefix
                                        if(value_path == "invalid-reason"):
                                            self.invalid_reason = value
                                            self.invalid_reason.value_namespace = name_space
                                            self.invalid_reason.value_namespace_prefix = name_space_prefix
                                        if(value_path == "neighbor-address"):
                                            self.neighbor_address = value
                                            self.neighbor_address.value_namespace = name_space
                                            self.neighbor_address.value_namespace_prefix = name_space_prefix
                                        if(value_path == "path-id"):
                                            self.path_id = value
                                            self.path_id.value_namespace = name_space
                                            self.path_id.value_namespace_prefix = name_space_prefix
                                        if(value_path == "route"):
                                            self.route = value
                                            self.route.value_namespace = name_space
                                            self.route.value_namespace_prefix = name_space_prefix
                                        if(value_path == "valid-route"):
                                            self.valid_route = value
                                            self.valid_route.value_namespace = name_space
                                            self.valid_route.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.route:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.route:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "routes" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "route"):
                                        for c in self.route:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.route.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "route"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class NumRoutes(Entity):
                                """
                                Number of routes in adjacency rib out\-bound
                                post\-policy table
                                
                                .. attribute:: num_routes
                                
                                	NumRoutes
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv4-bgp-oc-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.NumRoutes, self).__init__()

                                    self.yang_name = "num-routes"
                                    self.yang_parent_name = "adj-rib-in-pre"

                                    self.num_routes = YLeaf(YType.uint64, "num-routes")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("num_routes") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.NumRoutes, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.NumRoutes, self).__setattr__(name, value)

                                def has_data(self):
                                    return self.num_routes.is_set

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.num_routes.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "num-routes" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.num_routes.is_set or self.num_routes.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.num_routes.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "num-routes"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "num-routes"):
                                        self.num_routes = value
                                        self.num_routes.value_namespace = name_space
                                        self.num_routes.value_namespace_prefix = name_space_prefix

                            def has_data(self):
                                return (
                                    (self.num_routes is not None and self.num_routes.has_data()) or
                                    (self.routes is not None and self.routes.has_data()))

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    (self.num_routes is not None and self.num_routes.has_operation()) or
                                    (self.routes is not None and self.routes.has_operation()))

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "adj-rib-in-pre" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "num-routes"):
                                    if (self.num_routes is None):
                                        self.num_routes = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.NumRoutes()
                                        self.num_routes.parent = self
                                        self._children_name_map["num_routes"] = "num-routes"
                                    return self.num_routes

                                if (child_yang_name == "routes"):
                                    if (self.routes is None):
                                        self.routes = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes()
                                        self.routes.parent = self
                                        self._children_name_map["routes"] = "routes"
                                    return self.routes

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "num-routes" or name == "routes"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                pass

                        def has_data(self):
                            return (
                                self.neighbor_address.is_set or
                                (self.adj_rib_in_post is not None and self.adj_rib_in_post.has_data()) or
                                (self.adj_rib_in_pre is not None and self.adj_rib_in_pre.has_data()) or
                                (self.adj_rib_out_post is not None and self.adj_rib_out_post.has_data()) or
                                (self.adj_rib_out_pre is not None and self.adj_rib_out_pre.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.neighbor_address.yfilter != YFilter.not_set or
                                (self.adj_rib_in_post is not None and self.adj_rib_in_post.has_operation()) or
                                (self.adj_rib_in_pre is not None and self.adj_rib_in_pre.has_operation()) or
                                (self.adj_rib_out_post is not None and self.adj_rib_out_post.has_operation()) or
                                (self.adj_rib_out_pre is not None and self.adj_rib_out_pre.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "open-config-neighbor" + "[neighbor-address='" + self.neighbor_address.get() + "']" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                path_buffer = "Cisco-IOS-XR-ipv4-bgp-oc-oper:oc-bgp/bgp-rib/afi-safi-table/ipv4-unicast/open-config-neighbors/%s" % self.get_segment_path()
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.neighbor_address.is_set or self.neighbor_address.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.neighbor_address.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "adj-rib-in-post"):
                                if (self.adj_rib_in_post is None):
                                    self.adj_rib_in_post = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost()
                                    self.adj_rib_in_post.parent = self
                                    self._children_name_map["adj_rib_in_post"] = "adj-rib-in-post"
                                return self.adj_rib_in_post

                            if (child_yang_name == "adj-rib-in-pre"):
                                if (self.adj_rib_in_pre is None):
                                    self.adj_rib_in_pre = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre()
                                    self.adj_rib_in_pre.parent = self
                                    self._children_name_map["adj_rib_in_pre"] = "adj-rib-in-pre"
                                return self.adj_rib_in_pre

                            if (child_yang_name == "adj-rib-out-post"):
                                if (self.adj_rib_out_post is None):
                                    self.adj_rib_out_post = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost()
                                    self.adj_rib_out_post.parent = self
                                    self._children_name_map["adj_rib_out_post"] = "adj-rib-out-post"
                                return self.adj_rib_out_post

                            if (child_yang_name == "adj-rib-out-pre"):
                                if (self.adj_rib_out_pre is None):
                                    self.adj_rib_out_pre = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre()
                                    self.adj_rib_out_pre.parent = self
                                    self._children_name_map["adj_rib_out_pre"] = "adj-rib-out-pre"
                                return self.adj_rib_out_pre

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "adj-rib-in-post" or name == "adj-rib-in-pre" or name == "adj-rib-out-post" or name == "adj-rib-out-pre" or name == "neighbor-address"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "neighbor-address"):
                                self.neighbor_address = value
                                self.neighbor_address.value_namespace = name_space
                                self.neighbor_address.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.open_config_neighbor:
                            if (c.has_data()):
                                return True
                        return False

                    def has_operation(self):
                        for c in self.open_config_neighbor:
                            if (c.has_operation()):
                                return True
                        return self.yfilter != YFilter.not_set

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "open-config-neighbors" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-ipv4-bgp-oc-oper:oc-bgp/bgp-rib/afi-safi-table/ipv4-unicast/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "open-config-neighbor"):
                            for c in self.open_config_neighbor:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors.OpenConfigNeighbor()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.open_config_neighbor.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "open-config-neighbor"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass

                def has_data(self):
                    return (
                        (self.loc_rib is not None and self.loc_rib.has_data()) or
                        (self.open_config_neighbors is not None and self.open_config_neighbors.has_data()))

                def has_operation(self):
                    return (
                        self.yfilter != YFilter.not_set or
                        (self.loc_rib is not None and self.loc_rib.has_operation()) or
                        (self.open_config_neighbors is not None and self.open_config_neighbors.has_operation()))

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "ipv4-unicast" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-ipv4-bgp-oc-oper:oc-bgp/bgp-rib/afi-safi-table/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "loc-rib"):
                        if (self.loc_rib is None):
                            self.loc_rib = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.LocRib()
                            self.loc_rib.parent = self
                            self._children_name_map["loc_rib"] = "loc-rib"
                        return self.loc_rib

                    if (child_yang_name == "open-config-neighbors"):
                        if (self.open_config_neighbors is None):
                            self.open_config_neighbors = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast.OpenConfigNeighbors()
                            self.open_config_neighbors.parent = self
                            self._children_name_map["open_config_neighbors"] = "open-config-neighbors"
                        return self.open_config_neighbors

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "loc-rib" or name == "open-config-neighbors"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass


            class Ipv6Unicast(Entity):
                """
                IPv6 Unicast
                
                .. attribute:: loc_rib
                
                	Local rib route table
                	**type**\:   :py:class:`LocRib <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib>`
                
                .. attribute:: open_config_neighbors
                
                	Neighbor list
                	**type**\:   :py:class:`OpenConfigNeighbors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors>`
                
                

                """

                _prefix = 'ipv4-bgp-oc-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast, self).__init__()

                    self.yang_name = "ipv6-unicast"
                    self.yang_parent_name = "afi-safi-table"

                    self.loc_rib = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib()
                    self.loc_rib.parent = self
                    self._children_name_map["loc_rib"] = "loc-rib"
                    self._children_yang_names.add("loc-rib")

                    self.open_config_neighbors = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors()
                    self.open_config_neighbors.parent = self
                    self._children_name_map["open_config_neighbors"] = "open-config-neighbors"
                    self._children_yang_names.add("open-config-neighbors")


                class LocRib(Entity):
                    """
                    Local rib route table
                    
                    .. attribute:: num_routes
                    
                    	Number of routes in adjacency rib out\-bound post\-policy table
                    	**type**\:   :py:class:`NumRoutes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.NumRoutes>`
                    
                    .. attribute:: routes
                    
                    	routes table
                    	**type**\:   :py:class:`Routes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes>`
                    
                    

                    """

                    _prefix = 'ipv4-bgp-oc-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib, self).__init__()

                        self.yang_name = "loc-rib"
                        self.yang_parent_name = "ipv6-unicast"

                        self.num_routes = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.NumRoutes()
                        self.num_routes.parent = self
                        self._children_name_map["num_routes"] = "num-routes"
                        self._children_yang_names.add("num-routes")

                        self.routes = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes()
                        self.routes.parent = self
                        self._children_name_map["routes"] = "routes"
                        self._children_yang_names.add("routes")


                    class Routes(Entity):
                        """
                        routes table
                        
                        .. attribute:: route
                        
                        	route entry
                        	**type**\: list of    :py:class:`Route <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes.Route>`
                        
                        

                        """

                        _prefix = 'ipv4-bgp-oc-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes, self).__init__()

                            self.yang_name = "routes"
                            self.yang_parent_name = "loc-rib"

                            self.route = YList(self)

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in () and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes, self).__setattr__(name, value)


                        class Route(Entity):
                            """
                            route entry
                            
                            .. attribute:: best_path
                            
                            	BestPath
                            	**type**\:  bool
                            
                            .. attribute:: ext_attributes_list
                            
                            	ExtAttributesList
                            	**type**\:   :py:class:`ExtAttributesList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes.Route.ExtAttributesList>`
                            
                            .. attribute:: invalid_reason
                            
                            	IndentityRef
                            	**type**\:   :py:class:`BgpOcInvalidRouteReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.BgpOcInvalidRouteReason>`
                            
                            .. attribute:: last_modified_date
                            
                            	LastModifiedDate
                            	**type**\:   :py:class:`LastModifiedDate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes.Route.LastModifiedDate>`
                            
                            .. attribute:: last_update_recieved
                            
                            	LastUpdateRecieved
                            	**type**\:   :py:class:`LastUpdateRecieved <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes.Route.LastUpdateRecieved>`
                            
                            .. attribute:: neighbor_address
                            
                            	Neighbor address
                            	**type**\: one of the below types:
                            
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            
                            ----
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            
                            ----
                            .. attribute:: path_id
                            
                            	Path ID
                            	**type**\:  int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: prefix_name
                            
                            	Prefix
                            	**type**\:   :py:class:`PrefixName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes.Route.PrefixName>`
                            
                            .. attribute:: route
                            
                            	Network in prefix/length format
                            	**type**\: one of the below types:
                            
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                            
                            
                            ----
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                            
                            
                            ----
                            .. attribute:: route_attr_list
                            
                            	RouteAttributesList
                            	**type**\:   :py:class:`RouteAttrList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes.Route.RouteAttrList>`
                            
                            .. attribute:: valid_route
                            
                            	ValidRoute
                            	**type**\:  bool
                            
                            

                            """

                            _prefix = 'ipv4-bgp-oc-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes.Route, self).__init__()

                                self.yang_name = "route"
                                self.yang_parent_name = "routes"

                                self.best_path = YLeaf(YType.boolean, "best-path")

                                self.invalid_reason = YLeaf(YType.enumeration, "invalid-reason")

                                self.neighbor_address = YLeaf(YType.str, "neighbor-address")

                                self.path_id = YLeaf(YType.int32, "path-id")

                                self.route = YLeaf(YType.str, "route")

                                self.valid_route = YLeaf(YType.boolean, "valid-route")

                                self.ext_attributes_list = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes.Route.ExtAttributesList()
                                self.ext_attributes_list.parent = self
                                self._children_name_map["ext_attributes_list"] = "ext-attributes-list"
                                self._children_yang_names.add("ext-attributes-list")

                                self.last_modified_date = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes.Route.LastModifiedDate()
                                self.last_modified_date.parent = self
                                self._children_name_map["last_modified_date"] = "last-modified-date"
                                self._children_yang_names.add("last-modified-date")

                                self.last_update_recieved = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes.Route.LastUpdateRecieved()
                                self.last_update_recieved.parent = self
                                self._children_name_map["last_update_recieved"] = "last-update-recieved"
                                self._children_yang_names.add("last-update-recieved")

                                self.prefix_name = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes.Route.PrefixName()
                                self.prefix_name.parent = self
                                self._children_name_map["prefix_name"] = "prefix-name"
                                self._children_yang_names.add("prefix-name")

                                self.route_attr_list = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes.Route.RouteAttrList()
                                self.route_attr_list.parent = self
                                self._children_name_map["route_attr_list"] = "route-attr-list"
                                self._children_yang_names.add("route-attr-list")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("best_path",
                                                "invalid_reason",
                                                "neighbor_address",
                                                "path_id",
                                                "route",
                                                "valid_route") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes.Route, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes.Route, self).__setattr__(name, value)


                            class PrefixName(Entity):
                                """
                                Prefix
                                
                                .. attribute:: prefix
                                
                                	Prefix
                                	**type**\:   :py:class:`Prefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes.Route.PrefixName.Prefix>`
                                
                                .. attribute:: prefix_length
                                
                                	Prefix length
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                

                                """

                                _prefix = 'ipv4-bgp-oc-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes.Route.PrefixName, self).__init__()

                                    self.yang_name = "prefix-name"
                                    self.yang_parent_name = "route"

                                    self.prefix_length = YLeaf(YType.uint8, "prefix-length")

                                    self.prefix = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes.Route.PrefixName.Prefix()
                                    self.prefix.parent = self
                                    self._children_name_map["prefix"] = "prefix"
                                    self._children_yang_names.add("prefix")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("prefix_length") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes.Route.PrefixName, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes.Route.PrefixName, self).__setattr__(name, value)


                                class Prefix(Entity):
                                    """
                                    Prefix
                                    
                                    .. attribute:: afi
                                    
                                    	AFI
                                    	**type**\:   :py:class:`BgpOcAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.BgpOcAfi>`
                                    
                                    .. attribute:: ipv4_address
                                    
                                    	IPv4 Addr
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: ipv6_address
                                    
                                    	IPv6 Addr
                                    	**type**\:  str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-oc-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes.Route.PrefixName.Prefix, self).__init__()

                                        self.yang_name = "prefix"
                                        self.yang_parent_name = "prefix-name"

                                        self.afi = YLeaf(YType.enumeration, "afi")

                                        self.ipv4_address = YLeaf(YType.str, "ipv4-address")

                                        self.ipv6_address = YLeaf(YType.str, "ipv6-address")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("afi",
                                                        "ipv4_address",
                                                        "ipv6_address") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes.Route.PrefixName.Prefix, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes.Route.PrefixName.Prefix, self).__setattr__(name, value)

                                    def has_data(self):
                                        return (
                                            self.afi.is_set or
                                            self.ipv4_address.is_set or
                                            self.ipv6_address.is_set)

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.afi.yfilter != YFilter.not_set or
                                            self.ipv4_address.yfilter != YFilter.not_set or
                                            self.ipv6_address.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "prefix" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            path_buffer = "Cisco-IOS-XR-ipv4-bgp-oc-oper:oc-bgp/bgp-rib/afi-safi-table/ipv6-unicast/loc-rib/routes/route/prefix-name/%s" % self.get_segment_path()
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.afi.is_set or self.afi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.afi.get_name_leafdata())
                                        if (self.ipv4_address.is_set or self.ipv4_address.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.ipv4_address.get_name_leafdata())
                                        if (self.ipv6_address.is_set or self.ipv6_address.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.ipv6_address.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "afi" or name == "ipv4-address" or name == "ipv6-address"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "afi"):
                                            self.afi = value
                                            self.afi.value_namespace = name_space
                                            self.afi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "ipv4-address"):
                                            self.ipv4_address = value
                                            self.ipv4_address.value_namespace = name_space
                                            self.ipv4_address.value_namespace_prefix = name_space_prefix
                                        if(value_path == "ipv6-address"):
                                            self.ipv6_address = value
                                            self.ipv6_address.value_namespace = name_space
                                            self.ipv6_address.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    return (
                                        self.prefix_length.is_set or
                                        (self.prefix is not None and self.prefix.has_data()))

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.prefix_length.yfilter != YFilter.not_set or
                                        (self.prefix is not None and self.prefix.has_operation()))

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "prefix-name" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        path_buffer = "Cisco-IOS-XR-ipv4-bgp-oc-oper:oc-bgp/bgp-rib/afi-safi-table/ipv6-unicast/loc-rib/routes/route/%s" % self.get_segment_path()
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.prefix_length.is_set or self.prefix_length.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.prefix_length.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "prefix"):
                                        if (self.prefix is None):
                                            self.prefix = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes.Route.PrefixName.Prefix()
                                            self.prefix.parent = self
                                            self._children_name_map["prefix"] = "prefix"
                                        return self.prefix

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "prefix" or name == "prefix-length"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "prefix-length"):
                                        self.prefix_length = value
                                        self.prefix_length.value_namespace = name_space
                                        self.prefix_length.value_namespace_prefix = name_space_prefix


                            class RouteAttrList(Entity):
                                """
                                RouteAttributesList
                                
                                .. attribute:: aggregrator_attributes
                                
                                	AggregatorList
                                	**type**\:   :py:class:`AggregratorAttributes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes.Route.RouteAttrList.AggregratorAttributes>`
                                
                                .. attribute:: as4_path
                                
                                	AS4 Path
                                	**type**\:  str
                                
                                .. attribute:: as_path
                                
                                	AS Path
                                	**type**\:  str
                                
                                .. attribute:: atomic_aggr
                                
                                	AtomicAggr
                                	**type**\:  bool
                                
                                .. attribute:: community
                                
                                	CommunityArray
                                	**type**\: list of    :py:class:`Community <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes.Route.RouteAttrList.Community>`
                                
                                .. attribute:: local_pref
                                
                                	LocalPref
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: med
                                
                                	Med
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: next_hop
                                
                                	NextHopAddress
                                	**type**\:   :py:class:`NextHop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes.Route.RouteAttrList.NextHop>`
                                
                                .. attribute:: origin_type
                                
                                	Origin Attribute Type
                                	**type**\:   :py:class:`BgpOcOriginAttr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.BgpOcOriginAttr>`
                                
                                

                                """

                                _prefix = 'ipv4-bgp-oc-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes.Route.RouteAttrList, self).__init__()

                                    self.yang_name = "route-attr-list"
                                    self.yang_parent_name = "route"

                                    self.as4_path = YLeaf(YType.str, "as4-path")

                                    self.as_path = YLeaf(YType.str, "as-path")

                                    self.atomic_aggr = YLeaf(YType.boolean, "atomic-aggr")

                                    self.local_pref = YLeaf(YType.uint32, "local-pref")

                                    self.med = YLeaf(YType.uint32, "med")

                                    self.origin_type = YLeaf(YType.enumeration, "origin-type")

                                    self.aggregrator_attributes = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes.Route.RouteAttrList.AggregratorAttributes()
                                    self.aggregrator_attributes.parent = self
                                    self._children_name_map["aggregrator_attributes"] = "aggregrator-attributes"
                                    self._children_yang_names.add("aggregrator-attributes")

                                    self.next_hop = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes.Route.RouteAttrList.NextHop()
                                    self.next_hop.parent = self
                                    self._children_name_map["next_hop"] = "next-hop"
                                    self._children_yang_names.add("next-hop")

                                    self.community = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("as4_path",
                                                    "as_path",
                                                    "atomic_aggr",
                                                    "local_pref",
                                                    "med",
                                                    "origin_type") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes.Route.RouteAttrList, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes.Route.RouteAttrList, self).__setattr__(name, value)


                                class NextHop(Entity):
                                    """
                                    NextHopAddress
                                    
                                    .. attribute:: afi
                                    
                                    	AFI
                                    	**type**\:   :py:class:`BgpOcAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.BgpOcAfi>`
                                    
                                    .. attribute:: ipv4_address
                                    
                                    	IPv4 Addr
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: ipv6_address
                                    
                                    	IPv6 Addr
                                    	**type**\:  str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-oc-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes.Route.RouteAttrList.NextHop, self).__init__()

                                        self.yang_name = "next-hop"
                                        self.yang_parent_name = "route-attr-list"

                                        self.afi = YLeaf(YType.enumeration, "afi")

                                        self.ipv4_address = YLeaf(YType.str, "ipv4-address")

                                        self.ipv6_address = YLeaf(YType.str, "ipv6-address")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("afi",
                                                        "ipv4_address",
                                                        "ipv6_address") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes.Route.RouteAttrList.NextHop, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes.Route.RouteAttrList.NextHop, self).__setattr__(name, value)

                                    def has_data(self):
                                        return (
                                            self.afi.is_set or
                                            self.ipv4_address.is_set or
                                            self.ipv6_address.is_set)

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.afi.yfilter != YFilter.not_set or
                                            self.ipv4_address.yfilter != YFilter.not_set or
                                            self.ipv6_address.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "next-hop" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            path_buffer = "Cisco-IOS-XR-ipv4-bgp-oc-oper:oc-bgp/bgp-rib/afi-safi-table/ipv6-unicast/loc-rib/routes/route/route-attr-list/%s" % self.get_segment_path()
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.afi.is_set or self.afi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.afi.get_name_leafdata())
                                        if (self.ipv4_address.is_set or self.ipv4_address.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.ipv4_address.get_name_leafdata())
                                        if (self.ipv6_address.is_set or self.ipv6_address.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.ipv6_address.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "afi" or name == "ipv4-address" or name == "ipv6-address"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "afi"):
                                            self.afi = value
                                            self.afi.value_namespace = name_space
                                            self.afi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "ipv4-address"):
                                            self.ipv4_address = value
                                            self.ipv4_address.value_namespace = name_space
                                            self.ipv4_address.value_namespace_prefix = name_space_prefix
                                        if(value_path == "ipv6-address"):
                                            self.ipv6_address = value
                                            self.ipv6_address.value_namespace = name_space
                                            self.ipv6_address.value_namespace_prefix = name_space_prefix


                                class AggregratorAttributes(Entity):
                                    """
                                    AggregatorList
                                    
                                    .. attribute:: address
                                    
                                    	IPv4 address
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: as4
                                    
                                    	AS4 number
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: as_
                                    
                                    	AS number
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-oc-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes.Route.RouteAttrList.AggregratorAttributes, self).__init__()

                                        self.yang_name = "aggregrator-attributes"
                                        self.yang_parent_name = "route-attr-list"

                                        self.address = YLeaf(YType.str, "address")

                                        self.as4 = YLeaf(YType.uint32, "as4")

                                        self.as_ = YLeaf(YType.uint32, "as")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("address",
                                                        "as4",
                                                        "as_") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes.Route.RouteAttrList.AggregratorAttributes, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes.Route.RouteAttrList.AggregratorAttributes, self).__setattr__(name, value)

                                    def has_data(self):
                                        return (
                                            self.address.is_set or
                                            self.as4.is_set or
                                            self.as_.is_set)

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.address.yfilter != YFilter.not_set or
                                            self.as4.yfilter != YFilter.not_set or
                                            self.as_.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "aggregrator-attributes" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            path_buffer = "Cisco-IOS-XR-ipv4-bgp-oc-oper:oc-bgp/bgp-rib/afi-safi-table/ipv6-unicast/loc-rib/routes/route/route-attr-list/%s" % self.get_segment_path()
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.address.is_set or self.address.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.address.get_name_leafdata())
                                        if (self.as4.is_set or self.as4.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.as4.get_name_leafdata())
                                        if (self.as_.is_set or self.as_.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.as_.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "address" or name == "as4" or name == "as"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "address"):
                                            self.address = value
                                            self.address.value_namespace = name_space
                                            self.address.value_namespace_prefix = name_space_prefix
                                        if(value_path == "as4"):
                                            self.as4 = value
                                            self.as4.value_namespace = name_space
                                            self.as4.value_namespace_prefix = name_space_prefix
                                        if(value_path == "as"):
                                            self.as_ = value
                                            self.as_.value_namespace = name_space
                                            self.as_.value_namespace_prefix = name_space_prefix


                                class Community(Entity):
                                    """
                                    CommunityArray
                                    
                                    .. attribute:: objects
                                    
                                    	BGP OC objects
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-oc-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes.Route.RouteAttrList.Community, self).__init__()

                                        self.yang_name = "community"
                                        self.yang_parent_name = "route-attr-list"

                                        self.objects = YLeaf(YType.str, "objects")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("objects") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes.Route.RouteAttrList.Community, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes.Route.RouteAttrList.Community, self).__setattr__(name, value)

                                    def has_data(self):
                                        return self.objects.is_set

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.objects.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "community" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            path_buffer = "Cisco-IOS-XR-ipv4-bgp-oc-oper:oc-bgp/bgp-rib/afi-safi-table/ipv6-unicast/loc-rib/routes/route/route-attr-list/%s" % self.get_segment_path()
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.objects.is_set or self.objects.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.objects.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "objects"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "objects"):
                                            self.objects = value
                                            self.objects.value_namespace = name_space
                                            self.objects.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.community:
                                        if (c.has_data()):
                                            return True
                                    return (
                                        self.as4_path.is_set or
                                        self.as_path.is_set or
                                        self.atomic_aggr.is_set or
                                        self.local_pref.is_set or
                                        self.med.is_set or
                                        self.origin_type.is_set or
                                        (self.aggregrator_attributes is not None and self.aggregrator_attributes.has_data()) or
                                        (self.next_hop is not None and self.next_hop.has_data()))

                                def has_operation(self):
                                    for c in self.community:
                                        if (c.has_operation()):
                                            return True
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.as4_path.yfilter != YFilter.not_set or
                                        self.as_path.yfilter != YFilter.not_set or
                                        self.atomic_aggr.yfilter != YFilter.not_set or
                                        self.local_pref.yfilter != YFilter.not_set or
                                        self.med.yfilter != YFilter.not_set or
                                        self.origin_type.yfilter != YFilter.not_set or
                                        (self.aggregrator_attributes is not None and self.aggregrator_attributes.has_operation()) or
                                        (self.next_hop is not None and self.next_hop.has_operation()))

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "route-attr-list" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        path_buffer = "Cisco-IOS-XR-ipv4-bgp-oc-oper:oc-bgp/bgp-rib/afi-safi-table/ipv6-unicast/loc-rib/routes/route/%s" % self.get_segment_path()
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.as4_path.is_set or self.as4_path.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.as4_path.get_name_leafdata())
                                    if (self.as_path.is_set or self.as_path.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.as_path.get_name_leafdata())
                                    if (self.atomic_aggr.is_set or self.atomic_aggr.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.atomic_aggr.get_name_leafdata())
                                    if (self.local_pref.is_set or self.local_pref.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.local_pref.get_name_leafdata())
                                    if (self.med.is_set or self.med.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.med.get_name_leafdata())
                                    if (self.origin_type.is_set or self.origin_type.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.origin_type.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "aggregrator-attributes"):
                                        if (self.aggregrator_attributes is None):
                                            self.aggregrator_attributes = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes.Route.RouteAttrList.AggregratorAttributes()
                                            self.aggregrator_attributes.parent = self
                                            self._children_name_map["aggregrator_attributes"] = "aggregrator-attributes"
                                        return self.aggregrator_attributes

                                    if (child_yang_name == "community"):
                                        for c in self.community:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes.Route.RouteAttrList.Community()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.community.append(c)
                                        return c

                                    if (child_yang_name == "next-hop"):
                                        if (self.next_hop is None):
                                            self.next_hop = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes.Route.RouteAttrList.NextHop()
                                            self.next_hop.parent = self
                                            self._children_name_map["next_hop"] = "next-hop"
                                        return self.next_hop

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "aggregrator-attributes" or name == "community" or name == "next-hop" or name == "as4-path" or name == "as-path" or name == "atomic-aggr" or name == "local-pref" or name == "med" or name == "origin-type"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "as4-path"):
                                        self.as4_path = value
                                        self.as4_path.value_namespace = name_space
                                        self.as4_path.value_namespace_prefix = name_space_prefix
                                    if(value_path == "as-path"):
                                        self.as_path = value
                                        self.as_path.value_namespace = name_space
                                        self.as_path.value_namespace_prefix = name_space_prefix
                                    if(value_path == "atomic-aggr"):
                                        self.atomic_aggr = value
                                        self.atomic_aggr.value_namespace = name_space
                                        self.atomic_aggr.value_namespace_prefix = name_space_prefix
                                    if(value_path == "local-pref"):
                                        self.local_pref = value
                                        self.local_pref.value_namespace = name_space
                                        self.local_pref.value_namespace_prefix = name_space_prefix
                                    if(value_path == "med"):
                                        self.med = value
                                        self.med.value_namespace = name_space
                                        self.med.value_namespace_prefix = name_space_prefix
                                    if(value_path == "origin-type"):
                                        self.origin_type = value
                                        self.origin_type.value_namespace = name_space
                                        self.origin_type.value_namespace_prefix = name_space_prefix


                            class ExtAttributesList(Entity):
                                """
                                ExtAttributesList
                                
                                .. attribute:: aigp
                                
                                	AIGP
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: cluster
                                
                                	ClusterList
                                	**type**\:  list of str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: ext_community
                                
                                	ExtendedCommunityArray
                                	**type**\: list of    :py:class:`ExtCommunity <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes.Route.ExtAttributesList.ExtCommunity>`
                                
                                .. attribute:: originator_id
                                
                                	OriginatorID
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: path_id
                                
                                	PathId
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: unknown_attributes
                                
                                	UnknownAttributes
                                	**type**\: list of    :py:class:`UnknownAttributes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes.Route.ExtAttributesList.UnknownAttributes>`
                                
                                

                                """

                                _prefix = 'ipv4-bgp-oc-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes.Route.ExtAttributesList, self).__init__()

                                    self.yang_name = "ext-attributes-list"
                                    self.yang_parent_name = "route"

                                    self.aigp = YLeaf(YType.uint64, "aigp")

                                    self.cluster = YLeafList(YType.str, "cluster")

                                    self.originator_id = YLeaf(YType.str, "originator-id")

                                    self.path_id = YLeaf(YType.uint32, "path-id")

                                    self.ext_community = YList(self)
                                    self.unknown_attributes = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("aigp",
                                                    "cluster",
                                                    "originator_id",
                                                    "path_id") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes.Route.ExtAttributesList, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes.Route.ExtAttributesList, self).__setattr__(name, value)


                                class ExtCommunity(Entity):
                                    """
                                    ExtendedCommunityArray
                                    
                                    .. attribute:: objects
                                    
                                    	BGP OC objects
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-oc-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes.Route.ExtAttributesList.ExtCommunity, self).__init__()

                                        self.yang_name = "ext-community"
                                        self.yang_parent_name = "ext-attributes-list"

                                        self.objects = YLeaf(YType.str, "objects")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("objects") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes.Route.ExtAttributesList.ExtCommunity, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes.Route.ExtAttributesList.ExtCommunity, self).__setattr__(name, value)

                                    def has_data(self):
                                        return self.objects.is_set

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.objects.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "ext-community" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            path_buffer = "Cisco-IOS-XR-ipv4-bgp-oc-oper:oc-bgp/bgp-rib/afi-safi-table/ipv6-unicast/loc-rib/routes/route/ext-attributes-list/%s" % self.get_segment_path()
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.objects.is_set or self.objects.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.objects.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "objects"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "objects"):
                                            self.objects = value
                                            self.objects.value_namespace = name_space
                                            self.objects.value_namespace_prefix = name_space_prefix


                                class UnknownAttributes(Entity):
                                    """
                                    UnknownAttributes
                                    
                                    .. attribute:: attribute_length
                                    
                                    	AttributeLength
                                    	**type**\:  int
                                    
                                    	**range:** 0..65535
                                    
                                    .. attribute:: attribute_type
                                    
                                    	AttributeType
                                    	**type**\:  int
                                    
                                    	**range:** 0..65535
                                    
                                    .. attribute:: attribute_value
                                    
                                    	Atributevalue
                                    	**type**\:  str
                                    
                                    	**pattern:** ([0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2})\*)?
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-oc-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes.Route.ExtAttributesList.UnknownAttributes, self).__init__()

                                        self.yang_name = "unknown-attributes"
                                        self.yang_parent_name = "ext-attributes-list"

                                        self.attribute_length = YLeaf(YType.uint16, "attribute-length")

                                        self.attribute_type = YLeaf(YType.uint16, "attribute-type")

                                        self.attribute_value = YLeaf(YType.str, "attribute-value")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("attribute_length",
                                                        "attribute_type",
                                                        "attribute_value") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes.Route.ExtAttributesList.UnknownAttributes, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes.Route.ExtAttributesList.UnknownAttributes, self).__setattr__(name, value)

                                    def has_data(self):
                                        return (
                                            self.attribute_length.is_set or
                                            self.attribute_type.is_set or
                                            self.attribute_value.is_set)

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.attribute_length.yfilter != YFilter.not_set or
                                            self.attribute_type.yfilter != YFilter.not_set or
                                            self.attribute_value.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "unknown-attributes" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            path_buffer = "Cisco-IOS-XR-ipv4-bgp-oc-oper:oc-bgp/bgp-rib/afi-safi-table/ipv6-unicast/loc-rib/routes/route/ext-attributes-list/%s" % self.get_segment_path()
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.attribute_length.is_set or self.attribute_length.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.attribute_length.get_name_leafdata())
                                        if (self.attribute_type.is_set or self.attribute_type.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.attribute_type.get_name_leafdata())
                                        if (self.attribute_value.is_set or self.attribute_value.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.attribute_value.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "attribute-length" or name == "attribute-type" or name == "attribute-value"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "attribute-length"):
                                            self.attribute_length = value
                                            self.attribute_length.value_namespace = name_space
                                            self.attribute_length.value_namespace_prefix = name_space_prefix
                                        if(value_path == "attribute-type"):
                                            self.attribute_type = value
                                            self.attribute_type.value_namespace = name_space
                                            self.attribute_type.value_namespace_prefix = name_space_prefix
                                        if(value_path == "attribute-value"):
                                            self.attribute_value = value
                                            self.attribute_value.value_namespace = name_space
                                            self.attribute_value.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.ext_community:
                                        if (c.has_data()):
                                            return True
                                    for c in self.unknown_attributes:
                                        if (c.has_data()):
                                            return True
                                    for leaf in self.cluster.getYLeafs():
                                        if (leaf.yfilter != YFilter.not_set):
                                            return True
                                    return (
                                        self.aigp.is_set or
                                        self.originator_id.is_set or
                                        self.path_id.is_set)

                                def has_operation(self):
                                    for c in self.ext_community:
                                        if (c.has_operation()):
                                            return True
                                    for c in self.unknown_attributes:
                                        if (c.has_operation()):
                                            return True
                                    for leaf in self.cluster.getYLeafs():
                                        if (leaf.is_set):
                                            return True
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.aigp.yfilter != YFilter.not_set or
                                        self.cluster.yfilter != YFilter.not_set or
                                        self.originator_id.yfilter != YFilter.not_set or
                                        self.path_id.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "ext-attributes-list" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        path_buffer = "Cisco-IOS-XR-ipv4-bgp-oc-oper:oc-bgp/bgp-rib/afi-safi-table/ipv6-unicast/loc-rib/routes/route/%s" % self.get_segment_path()
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.aigp.is_set or self.aigp.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.aigp.get_name_leafdata())
                                    if (self.originator_id.is_set or self.originator_id.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.originator_id.get_name_leafdata())
                                    if (self.path_id.is_set or self.path_id.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.path_id.get_name_leafdata())

                                    leaf_name_data.extend(self.cluster.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "ext-community"):
                                        for c in self.ext_community:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes.Route.ExtAttributesList.ExtCommunity()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.ext_community.append(c)
                                        return c

                                    if (child_yang_name == "unknown-attributes"):
                                        for c in self.unknown_attributes:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes.Route.ExtAttributesList.UnknownAttributes()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.unknown_attributes.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "ext-community" or name == "unknown-attributes" or name == "aigp" or name == "cluster" or name == "originator-id" or name == "path-id"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "aigp"):
                                        self.aigp = value
                                        self.aigp.value_namespace = name_space
                                        self.aigp.value_namespace_prefix = name_space_prefix
                                    if(value_path == "cluster"):
                                        self.cluster.append(value)
                                    if(value_path == "originator-id"):
                                        self.originator_id = value
                                        self.originator_id.value_namespace = name_space
                                        self.originator_id.value_namespace_prefix = name_space_prefix
                                    if(value_path == "path-id"):
                                        self.path_id = value
                                        self.path_id.value_namespace = name_space
                                        self.path_id.value_namespace_prefix = name_space_prefix


                            class LastModifiedDate(Entity):
                                """
                                LastModifiedDate
                                
                                .. attribute:: time_value
                                
                                	TimeValue
                                	**type**\:  str
                                
                                

                                """

                                _prefix = 'ipv4-bgp-oc-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes.Route.LastModifiedDate, self).__init__()

                                    self.yang_name = "last-modified-date"
                                    self.yang_parent_name = "route"

                                    self.time_value = YLeaf(YType.str, "time-value")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("time_value") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes.Route.LastModifiedDate, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes.Route.LastModifiedDate, self).__setattr__(name, value)

                                def has_data(self):
                                    return self.time_value.is_set

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.time_value.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "last-modified-date" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        path_buffer = "Cisco-IOS-XR-ipv4-bgp-oc-oper:oc-bgp/bgp-rib/afi-safi-table/ipv6-unicast/loc-rib/routes/route/%s" % self.get_segment_path()
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.time_value.is_set or self.time_value.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.time_value.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "time-value"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "time-value"):
                                        self.time_value = value
                                        self.time_value.value_namespace = name_space
                                        self.time_value.value_namespace_prefix = name_space_prefix


                            class LastUpdateRecieved(Entity):
                                """
                                LastUpdateRecieved
                                
                                .. attribute:: time_value
                                
                                	TimeValue
                                	**type**\:  str
                                
                                

                                """

                                _prefix = 'ipv4-bgp-oc-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes.Route.LastUpdateRecieved, self).__init__()

                                    self.yang_name = "last-update-recieved"
                                    self.yang_parent_name = "route"

                                    self.time_value = YLeaf(YType.str, "time-value")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("time_value") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes.Route.LastUpdateRecieved, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes.Route.LastUpdateRecieved, self).__setattr__(name, value)

                                def has_data(self):
                                    return self.time_value.is_set

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.time_value.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "last-update-recieved" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        path_buffer = "Cisco-IOS-XR-ipv4-bgp-oc-oper:oc-bgp/bgp-rib/afi-safi-table/ipv6-unicast/loc-rib/routes/route/%s" % self.get_segment_path()
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.time_value.is_set or self.time_value.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.time_value.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "time-value"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "time-value"):
                                        self.time_value = value
                                        self.time_value.value_namespace = name_space
                                        self.time_value.value_namespace_prefix = name_space_prefix

                            def has_data(self):
                                return (
                                    self.best_path.is_set or
                                    self.invalid_reason.is_set or
                                    self.neighbor_address.is_set or
                                    self.path_id.is_set or
                                    self.route.is_set or
                                    self.valid_route.is_set or
                                    (self.ext_attributes_list is not None and self.ext_attributes_list.has_data()) or
                                    (self.last_modified_date is not None and self.last_modified_date.has_data()) or
                                    (self.last_update_recieved is not None and self.last_update_recieved.has_data()) or
                                    (self.prefix_name is not None and self.prefix_name.has_data()) or
                                    (self.route_attr_list is not None and self.route_attr_list.has_data()))

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.best_path.yfilter != YFilter.not_set or
                                    self.invalid_reason.yfilter != YFilter.not_set or
                                    self.neighbor_address.yfilter != YFilter.not_set or
                                    self.path_id.yfilter != YFilter.not_set or
                                    self.route.yfilter != YFilter.not_set or
                                    self.valid_route.yfilter != YFilter.not_set or
                                    (self.ext_attributes_list is not None and self.ext_attributes_list.has_operation()) or
                                    (self.last_modified_date is not None and self.last_modified_date.has_operation()) or
                                    (self.last_update_recieved is not None and self.last_update_recieved.has_operation()) or
                                    (self.prefix_name is not None and self.prefix_name.has_operation()) or
                                    (self.route_attr_list is not None and self.route_attr_list.has_operation()))

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "route" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    path_buffer = "Cisco-IOS-XR-ipv4-bgp-oc-oper:oc-bgp/bgp-rib/afi-safi-table/ipv6-unicast/loc-rib/routes/%s" % self.get_segment_path()
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.best_path.is_set or self.best_path.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.best_path.get_name_leafdata())
                                if (self.invalid_reason.is_set or self.invalid_reason.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.invalid_reason.get_name_leafdata())
                                if (self.neighbor_address.is_set or self.neighbor_address.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.neighbor_address.get_name_leafdata())
                                if (self.path_id.is_set or self.path_id.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.path_id.get_name_leafdata())
                                if (self.route.is_set or self.route.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.route.get_name_leafdata())
                                if (self.valid_route.is_set or self.valid_route.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.valid_route.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "ext-attributes-list"):
                                    if (self.ext_attributes_list is None):
                                        self.ext_attributes_list = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes.Route.ExtAttributesList()
                                        self.ext_attributes_list.parent = self
                                        self._children_name_map["ext_attributes_list"] = "ext-attributes-list"
                                    return self.ext_attributes_list

                                if (child_yang_name == "last-modified-date"):
                                    if (self.last_modified_date is None):
                                        self.last_modified_date = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes.Route.LastModifiedDate()
                                        self.last_modified_date.parent = self
                                        self._children_name_map["last_modified_date"] = "last-modified-date"
                                    return self.last_modified_date

                                if (child_yang_name == "last-update-recieved"):
                                    if (self.last_update_recieved is None):
                                        self.last_update_recieved = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes.Route.LastUpdateRecieved()
                                        self.last_update_recieved.parent = self
                                        self._children_name_map["last_update_recieved"] = "last-update-recieved"
                                    return self.last_update_recieved

                                if (child_yang_name == "prefix-name"):
                                    if (self.prefix_name is None):
                                        self.prefix_name = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes.Route.PrefixName()
                                        self.prefix_name.parent = self
                                        self._children_name_map["prefix_name"] = "prefix-name"
                                    return self.prefix_name

                                if (child_yang_name == "route-attr-list"):
                                    if (self.route_attr_list is None):
                                        self.route_attr_list = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes.Route.RouteAttrList()
                                        self.route_attr_list.parent = self
                                        self._children_name_map["route_attr_list"] = "route-attr-list"
                                    return self.route_attr_list

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "ext-attributes-list" or name == "last-modified-date" or name == "last-update-recieved" or name == "prefix-name" or name == "route-attr-list" or name == "best-path" or name == "invalid-reason" or name == "neighbor-address" or name == "path-id" or name == "route" or name == "valid-route"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "best-path"):
                                    self.best_path = value
                                    self.best_path.value_namespace = name_space
                                    self.best_path.value_namespace_prefix = name_space_prefix
                                if(value_path == "invalid-reason"):
                                    self.invalid_reason = value
                                    self.invalid_reason.value_namespace = name_space
                                    self.invalid_reason.value_namespace_prefix = name_space_prefix
                                if(value_path == "neighbor-address"):
                                    self.neighbor_address = value
                                    self.neighbor_address.value_namespace = name_space
                                    self.neighbor_address.value_namespace_prefix = name_space_prefix
                                if(value_path == "path-id"):
                                    self.path_id = value
                                    self.path_id.value_namespace = name_space
                                    self.path_id.value_namespace_prefix = name_space_prefix
                                if(value_path == "route"):
                                    self.route = value
                                    self.route.value_namespace = name_space
                                    self.route.value_namespace_prefix = name_space_prefix
                                if(value_path == "valid-route"):
                                    self.valid_route = value
                                    self.valid_route.value_namespace = name_space
                                    self.valid_route.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            for c in self.route:
                                if (c.has_data()):
                                    return True
                            return False

                        def has_operation(self):
                            for c in self.route:
                                if (c.has_operation()):
                                    return True
                            return self.yfilter != YFilter.not_set

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "routes" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                path_buffer = "Cisco-IOS-XR-ipv4-bgp-oc-oper:oc-bgp/bgp-rib/afi-safi-table/ipv6-unicast/loc-rib/%s" % self.get_segment_path()
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "route"):
                                for c in self.route:
                                    segment = c.get_segment_path()
                                    if (segment_path == segment):
                                        return c
                                c = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes.Route()
                                c.parent = self
                                local_reference_key = "ydk::seg::%s" % segment_path
                                self._local_refs[local_reference_key] = c
                                self.route.append(c)
                                return c

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "route"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            pass


                    class NumRoutes(Entity):
                        """
                        Number of routes in adjacency rib out\-bound
                        post\-policy table
                        
                        .. attribute:: num_routes
                        
                        	NumRoutes
                        	**type**\:  int
                        
                        	**range:** 0..18446744073709551615
                        
                        

                        """

                        _prefix = 'ipv4-bgp-oc-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.NumRoutes, self).__init__()

                            self.yang_name = "num-routes"
                            self.yang_parent_name = "loc-rib"

                            self.num_routes = YLeaf(YType.uint64, "num-routes")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("num_routes") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.NumRoutes, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.NumRoutes, self).__setattr__(name, value)

                        def has_data(self):
                            return self.num_routes.is_set

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.num_routes.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "num-routes" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                path_buffer = "Cisco-IOS-XR-ipv4-bgp-oc-oper:oc-bgp/bgp-rib/afi-safi-table/ipv6-unicast/loc-rib/%s" % self.get_segment_path()
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.num_routes.is_set or self.num_routes.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.num_routes.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "num-routes"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "num-routes"):
                                self.num_routes = value
                                self.num_routes.value_namespace = name_space
                                self.num_routes.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        return (
                            (self.num_routes is not None and self.num_routes.has_data()) or
                            (self.routes is not None and self.routes.has_data()))

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            (self.num_routes is not None and self.num_routes.has_operation()) or
                            (self.routes is not None and self.routes.has_operation()))

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "loc-rib" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-ipv4-bgp-oc-oper:oc-bgp/bgp-rib/afi-safi-table/ipv6-unicast/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "num-routes"):
                            if (self.num_routes is None):
                                self.num_routes = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.NumRoutes()
                                self.num_routes.parent = self
                                self._children_name_map["num_routes"] = "num-routes"
                            return self.num_routes

                        if (child_yang_name == "routes"):
                            if (self.routes is None):
                                self.routes = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib.Routes()
                                self.routes.parent = self
                                self._children_name_map["routes"] = "routes"
                            return self.routes

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "num-routes" or name == "routes"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass


                class OpenConfigNeighbors(Entity):
                    """
                    Neighbor list
                    
                    .. attribute:: open_config_neighbor
                    
                    	Neighbor name
                    	**type**\: list of    :py:class:`OpenConfigNeighbor <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor>`
                    
                    

                    """

                    _prefix = 'ipv4-bgp-oc-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors, self).__init__()

                        self.yang_name = "open-config-neighbors"
                        self.yang_parent_name = "ipv6-unicast"

                        self.open_config_neighbor = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in () and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors, self).__setattr__(name, value)


                    class OpenConfigNeighbor(Entity):
                        """
                        Neighbor name
                        
                        .. attribute:: neighbor_address  <key>
                        
                        	Neighbor Address
                        	**type**\: one of the below types:
                        
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        
                        ----
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        
                        ----
                        .. attribute:: adj_rib_in_post
                        
                        	Adjacency rib in\-bound post\-policy table
                        	**type**\:   :py:class:`AdjRibInPost <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost>`
                        
                        .. attribute:: adj_rib_in_pre
                        
                        	Adjacency rib in\-bound pre\-policy table
                        	**type**\:   :py:class:`AdjRibInPre <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre>`
                        
                        .. attribute:: adj_rib_out_post
                        
                        	Adjacency rib out\-bound post\-policy table
                        	**type**\:   :py:class:`AdjRibOutPost <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost>`
                        
                        .. attribute:: adj_rib_out_pre
                        
                        	Adjacency rib out\-bound pre\-policy table
                        	**type**\:   :py:class:`AdjRibOutPre <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre>`
                        
                        

                        """

                        _prefix = 'ipv4-bgp-oc-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor, self).__init__()

                            self.yang_name = "open-config-neighbor"
                            self.yang_parent_name = "open-config-neighbors"

                            self.neighbor_address = YLeaf(YType.str, "neighbor-address")

                            self.adj_rib_in_post = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost()
                            self.adj_rib_in_post.parent = self
                            self._children_name_map["adj_rib_in_post"] = "adj-rib-in-post"
                            self._children_yang_names.add("adj-rib-in-post")

                            self.adj_rib_in_pre = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre()
                            self.adj_rib_in_pre.parent = self
                            self._children_name_map["adj_rib_in_pre"] = "adj-rib-in-pre"
                            self._children_yang_names.add("adj-rib-in-pre")

                            self.adj_rib_out_post = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost()
                            self.adj_rib_out_post.parent = self
                            self._children_name_map["adj_rib_out_post"] = "adj-rib-out-post"
                            self._children_yang_names.add("adj-rib-out-post")

                            self.adj_rib_out_pre = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre()
                            self.adj_rib_out_pre.parent = self
                            self._children_name_map["adj_rib_out_pre"] = "adj-rib-out-pre"
                            self._children_yang_names.add("adj-rib-out-pre")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("neighbor_address") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor, self).__setattr__(name, value)


                        class AdjRibInPost(Entity):
                            """
                            Adjacency rib in\-bound post\-policy table
                            
                            .. attribute:: num_routes
                            
                            	Number of routes in adjacency rib out\-bound post\-policy table
                            	**type**\:   :py:class:`NumRoutes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.NumRoutes>`
                            
                            .. attribute:: routes
                            
                            	routes table
                            	**type**\:   :py:class:`Routes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes>`
                            
                            

                            """

                            _prefix = 'ipv4-bgp-oc-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost, self).__init__()

                                self.yang_name = "adj-rib-in-post"
                                self.yang_parent_name = "open-config-neighbor"

                                self.num_routes = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.NumRoutes()
                                self.num_routes.parent = self
                                self._children_name_map["num_routes"] = "num-routes"
                                self._children_yang_names.add("num-routes")

                                self.routes = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes()
                                self.routes.parent = self
                                self._children_name_map["routes"] = "routes"
                                self._children_yang_names.add("routes")


                            class Routes(Entity):
                                """
                                routes table
                                
                                .. attribute:: route
                                
                                	route entry
                                	**type**\: list of    :py:class:`Route <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route>`
                                
                                

                                """

                                _prefix = 'ipv4-bgp-oc-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes, self).__init__()

                                    self.yang_name = "routes"
                                    self.yang_parent_name = "adj-rib-in-post"

                                    self.route = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes, self).__setattr__(name, value)


                                class Route(Entity):
                                    """
                                    route entry
                                    
                                    .. attribute:: best_path
                                    
                                    	BestPath
                                    	**type**\:  bool
                                    
                                    .. attribute:: ext_attributes_list
                                    
                                    	ExtAttributesList
                                    	**type**\:   :py:class:`ExtAttributesList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.ExtAttributesList>`
                                    
                                    .. attribute:: invalid_reason
                                    
                                    	IndentityRef
                                    	**type**\:   :py:class:`BgpOcInvalidRouteReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.BgpOcInvalidRouteReason>`
                                    
                                    .. attribute:: last_modified_date
                                    
                                    	LastModifiedDate
                                    	**type**\:   :py:class:`LastModifiedDate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.LastModifiedDate>`
                                    
                                    .. attribute:: last_update_recieved
                                    
                                    	LastUpdateRecieved
                                    	**type**\:   :py:class:`LastUpdateRecieved <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.LastUpdateRecieved>`
                                    
                                    .. attribute:: neighbor_address
                                    
                                    	Neighbor address
                                    	**type**\: one of the below types:
                                    
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    
                                    ----
                                    	**type**\:  str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    
                                    ----
                                    .. attribute:: path_id
                                    
                                    	Path ID
                                    	**type**\:  int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    .. attribute:: prefix_name
                                    
                                    	Prefix
                                    	**type**\:   :py:class:`PrefixName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.PrefixName>`
                                    
                                    .. attribute:: route
                                    
                                    	Network in prefix/length format
                                    	**type**\: one of the below types:
                                    
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                    
                                    
                                    ----
                                    	**type**\:  str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                    
                                    
                                    ----
                                    .. attribute:: route_attr_list
                                    
                                    	RouteAttributesList
                                    	**type**\:   :py:class:`RouteAttrList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.RouteAttrList>`
                                    
                                    .. attribute:: valid_route
                                    
                                    	ValidRoute
                                    	**type**\:  bool
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-oc-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route, self).__init__()

                                        self.yang_name = "route"
                                        self.yang_parent_name = "routes"

                                        self.best_path = YLeaf(YType.boolean, "best-path")

                                        self.invalid_reason = YLeaf(YType.enumeration, "invalid-reason")

                                        self.neighbor_address = YLeaf(YType.str, "neighbor-address")

                                        self.path_id = YLeaf(YType.int32, "path-id")

                                        self.route = YLeaf(YType.str, "route")

                                        self.valid_route = YLeaf(YType.boolean, "valid-route")

                                        self.ext_attributes_list = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.ExtAttributesList()
                                        self.ext_attributes_list.parent = self
                                        self._children_name_map["ext_attributes_list"] = "ext-attributes-list"
                                        self._children_yang_names.add("ext-attributes-list")

                                        self.last_modified_date = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.LastModifiedDate()
                                        self.last_modified_date.parent = self
                                        self._children_name_map["last_modified_date"] = "last-modified-date"
                                        self._children_yang_names.add("last-modified-date")

                                        self.last_update_recieved = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.LastUpdateRecieved()
                                        self.last_update_recieved.parent = self
                                        self._children_name_map["last_update_recieved"] = "last-update-recieved"
                                        self._children_yang_names.add("last-update-recieved")

                                        self.prefix_name = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.PrefixName()
                                        self.prefix_name.parent = self
                                        self._children_name_map["prefix_name"] = "prefix-name"
                                        self._children_yang_names.add("prefix-name")

                                        self.route_attr_list = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.RouteAttrList()
                                        self.route_attr_list.parent = self
                                        self._children_name_map["route_attr_list"] = "route-attr-list"
                                        self._children_yang_names.add("route-attr-list")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("best_path",
                                                        "invalid_reason",
                                                        "neighbor_address",
                                                        "path_id",
                                                        "route",
                                                        "valid_route") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route, self).__setattr__(name, value)


                                    class PrefixName(Entity):
                                        """
                                        Prefix
                                        
                                        .. attribute:: prefix
                                        
                                        	Prefix
                                        	**type**\:   :py:class:`Prefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.PrefixName.Prefix>`
                                        
                                        .. attribute:: prefix_length
                                        
                                        	Prefix length
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-oc-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.PrefixName, self).__init__()

                                            self.yang_name = "prefix-name"
                                            self.yang_parent_name = "route"

                                            self.prefix_length = YLeaf(YType.uint8, "prefix-length")

                                            self.prefix = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.PrefixName.Prefix()
                                            self.prefix.parent = self
                                            self._children_name_map["prefix"] = "prefix"
                                            self._children_yang_names.add("prefix")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("prefix_length") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.PrefixName, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.PrefixName, self).__setattr__(name, value)


                                        class Prefix(Entity):
                                            """
                                            Prefix
                                            
                                            .. attribute:: afi
                                            
                                            	AFI
                                            	**type**\:   :py:class:`BgpOcAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.BgpOcAfi>`
                                            
                                            .. attribute:: ipv4_address
                                            
                                            	IPv4 Addr
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: ipv6_address
                                            
                                            	IPv6 Addr
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-oc-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.PrefixName.Prefix, self).__init__()

                                                self.yang_name = "prefix"
                                                self.yang_parent_name = "prefix-name"

                                                self.afi = YLeaf(YType.enumeration, "afi")

                                                self.ipv4_address = YLeaf(YType.str, "ipv4-address")

                                                self.ipv6_address = YLeaf(YType.str, "ipv6-address")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("afi",
                                                                "ipv4_address",
                                                                "ipv6_address") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.PrefixName.Prefix, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.PrefixName.Prefix, self).__setattr__(name, value)

                                            def has_data(self):
                                                return (
                                                    self.afi.is_set or
                                                    self.ipv4_address.is_set or
                                                    self.ipv6_address.is_set)

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.afi.yfilter != YFilter.not_set or
                                                    self.ipv4_address.yfilter != YFilter.not_set or
                                                    self.ipv6_address.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "prefix" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.afi.is_set or self.afi.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.afi.get_name_leafdata())
                                                if (self.ipv4_address.is_set or self.ipv4_address.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.ipv4_address.get_name_leafdata())
                                                if (self.ipv6_address.is_set or self.ipv6_address.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.ipv6_address.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "afi" or name == "ipv4-address" or name == "ipv6-address"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "afi"):
                                                    self.afi = value
                                                    self.afi.value_namespace = name_space
                                                    self.afi.value_namespace_prefix = name_space_prefix
                                                if(value_path == "ipv4-address"):
                                                    self.ipv4_address = value
                                                    self.ipv4_address.value_namespace = name_space
                                                    self.ipv4_address.value_namespace_prefix = name_space_prefix
                                                if(value_path == "ipv6-address"):
                                                    self.ipv6_address = value
                                                    self.ipv6_address.value_namespace = name_space
                                                    self.ipv6_address.value_namespace_prefix = name_space_prefix

                                        def has_data(self):
                                            return (
                                                self.prefix_length.is_set or
                                                (self.prefix is not None and self.prefix.has_data()))

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.prefix_length.yfilter != YFilter.not_set or
                                                (self.prefix is not None and self.prefix.has_operation()))

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "prefix-name" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.prefix_length.is_set or self.prefix_length.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.prefix_length.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            if (child_yang_name == "prefix"):
                                                if (self.prefix is None):
                                                    self.prefix = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.PrefixName.Prefix()
                                                    self.prefix.parent = self
                                                    self._children_name_map["prefix"] = "prefix"
                                                return self.prefix

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "prefix" or name == "prefix-length"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "prefix-length"):
                                                self.prefix_length = value
                                                self.prefix_length.value_namespace = name_space
                                                self.prefix_length.value_namespace_prefix = name_space_prefix


                                    class RouteAttrList(Entity):
                                        """
                                        RouteAttributesList
                                        
                                        .. attribute:: aggregrator_attributes
                                        
                                        	AggregatorList
                                        	**type**\:   :py:class:`AggregratorAttributes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.RouteAttrList.AggregratorAttributes>`
                                        
                                        .. attribute:: as4_path
                                        
                                        	AS4 Path
                                        	**type**\:  str
                                        
                                        .. attribute:: as_path
                                        
                                        	AS Path
                                        	**type**\:  str
                                        
                                        .. attribute:: atomic_aggr
                                        
                                        	AtomicAggr
                                        	**type**\:  bool
                                        
                                        .. attribute:: community
                                        
                                        	CommunityArray
                                        	**type**\: list of    :py:class:`Community <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.RouteAttrList.Community>`
                                        
                                        .. attribute:: local_pref
                                        
                                        	LocalPref
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: med
                                        
                                        	Med
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: next_hop
                                        
                                        	NextHopAddress
                                        	**type**\:   :py:class:`NextHop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.RouteAttrList.NextHop>`
                                        
                                        .. attribute:: origin_type
                                        
                                        	Origin Attribute Type
                                        	**type**\:   :py:class:`BgpOcOriginAttr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.BgpOcOriginAttr>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-oc-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.RouteAttrList, self).__init__()

                                            self.yang_name = "route-attr-list"
                                            self.yang_parent_name = "route"

                                            self.as4_path = YLeaf(YType.str, "as4-path")

                                            self.as_path = YLeaf(YType.str, "as-path")

                                            self.atomic_aggr = YLeaf(YType.boolean, "atomic-aggr")

                                            self.local_pref = YLeaf(YType.uint32, "local-pref")

                                            self.med = YLeaf(YType.uint32, "med")

                                            self.origin_type = YLeaf(YType.enumeration, "origin-type")

                                            self.aggregrator_attributes = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.RouteAttrList.AggregratorAttributes()
                                            self.aggregrator_attributes.parent = self
                                            self._children_name_map["aggregrator_attributes"] = "aggregrator-attributes"
                                            self._children_yang_names.add("aggregrator-attributes")

                                            self.next_hop = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.RouteAttrList.NextHop()
                                            self.next_hop.parent = self
                                            self._children_name_map["next_hop"] = "next-hop"
                                            self._children_yang_names.add("next-hop")

                                            self.community = YList(self)

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("as4_path",
                                                            "as_path",
                                                            "atomic_aggr",
                                                            "local_pref",
                                                            "med",
                                                            "origin_type") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.RouteAttrList, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.RouteAttrList, self).__setattr__(name, value)


                                        class NextHop(Entity):
                                            """
                                            NextHopAddress
                                            
                                            .. attribute:: afi
                                            
                                            	AFI
                                            	**type**\:   :py:class:`BgpOcAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.BgpOcAfi>`
                                            
                                            .. attribute:: ipv4_address
                                            
                                            	IPv4 Addr
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: ipv6_address
                                            
                                            	IPv6 Addr
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-oc-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.RouteAttrList.NextHop, self).__init__()

                                                self.yang_name = "next-hop"
                                                self.yang_parent_name = "route-attr-list"

                                                self.afi = YLeaf(YType.enumeration, "afi")

                                                self.ipv4_address = YLeaf(YType.str, "ipv4-address")

                                                self.ipv6_address = YLeaf(YType.str, "ipv6-address")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("afi",
                                                                "ipv4_address",
                                                                "ipv6_address") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.RouteAttrList.NextHop, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.RouteAttrList.NextHop, self).__setattr__(name, value)

                                            def has_data(self):
                                                return (
                                                    self.afi.is_set or
                                                    self.ipv4_address.is_set or
                                                    self.ipv6_address.is_set)

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.afi.yfilter != YFilter.not_set or
                                                    self.ipv4_address.yfilter != YFilter.not_set or
                                                    self.ipv6_address.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "next-hop" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.afi.is_set or self.afi.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.afi.get_name_leafdata())
                                                if (self.ipv4_address.is_set or self.ipv4_address.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.ipv4_address.get_name_leafdata())
                                                if (self.ipv6_address.is_set or self.ipv6_address.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.ipv6_address.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "afi" or name == "ipv4-address" or name == "ipv6-address"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "afi"):
                                                    self.afi = value
                                                    self.afi.value_namespace = name_space
                                                    self.afi.value_namespace_prefix = name_space_prefix
                                                if(value_path == "ipv4-address"):
                                                    self.ipv4_address = value
                                                    self.ipv4_address.value_namespace = name_space
                                                    self.ipv4_address.value_namespace_prefix = name_space_prefix
                                                if(value_path == "ipv6-address"):
                                                    self.ipv6_address = value
                                                    self.ipv6_address.value_namespace = name_space
                                                    self.ipv6_address.value_namespace_prefix = name_space_prefix


                                        class AggregratorAttributes(Entity):
                                            """
                                            AggregatorList
                                            
                                            .. attribute:: address
                                            
                                            	IPv4 address
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: as4
                                            
                                            	AS4 number
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: as_
                                            
                                            	AS number
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-oc-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.RouteAttrList.AggregratorAttributes, self).__init__()

                                                self.yang_name = "aggregrator-attributes"
                                                self.yang_parent_name = "route-attr-list"

                                                self.address = YLeaf(YType.str, "address")

                                                self.as4 = YLeaf(YType.uint32, "as4")

                                                self.as_ = YLeaf(YType.uint32, "as")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("address",
                                                                "as4",
                                                                "as_") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.RouteAttrList.AggregratorAttributes, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.RouteAttrList.AggregratorAttributes, self).__setattr__(name, value)

                                            def has_data(self):
                                                return (
                                                    self.address.is_set or
                                                    self.as4.is_set or
                                                    self.as_.is_set)

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.address.yfilter != YFilter.not_set or
                                                    self.as4.yfilter != YFilter.not_set or
                                                    self.as_.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "aggregrator-attributes" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.address.is_set or self.address.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.address.get_name_leafdata())
                                                if (self.as4.is_set or self.as4.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.as4.get_name_leafdata())
                                                if (self.as_.is_set or self.as_.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.as_.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "address" or name == "as4" or name == "as"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "address"):
                                                    self.address = value
                                                    self.address.value_namespace = name_space
                                                    self.address.value_namespace_prefix = name_space_prefix
                                                if(value_path == "as4"):
                                                    self.as4 = value
                                                    self.as4.value_namespace = name_space
                                                    self.as4.value_namespace_prefix = name_space_prefix
                                                if(value_path == "as"):
                                                    self.as_ = value
                                                    self.as_.value_namespace = name_space
                                                    self.as_.value_namespace_prefix = name_space_prefix


                                        class Community(Entity):
                                            """
                                            CommunityArray
                                            
                                            .. attribute:: objects
                                            
                                            	BGP OC objects
                                            	**type**\:  str
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-oc-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.RouteAttrList.Community, self).__init__()

                                                self.yang_name = "community"
                                                self.yang_parent_name = "route-attr-list"

                                                self.objects = YLeaf(YType.str, "objects")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("objects") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.RouteAttrList.Community, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.RouteAttrList.Community, self).__setattr__(name, value)

                                            def has_data(self):
                                                return self.objects.is_set

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.objects.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "community" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.objects.is_set or self.objects.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.objects.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "objects"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "objects"):
                                                    self.objects = value
                                                    self.objects.value_namespace = name_space
                                                    self.objects.value_namespace_prefix = name_space_prefix

                                        def has_data(self):
                                            for c in self.community:
                                                if (c.has_data()):
                                                    return True
                                            return (
                                                self.as4_path.is_set or
                                                self.as_path.is_set or
                                                self.atomic_aggr.is_set or
                                                self.local_pref.is_set or
                                                self.med.is_set or
                                                self.origin_type.is_set or
                                                (self.aggregrator_attributes is not None and self.aggregrator_attributes.has_data()) or
                                                (self.next_hop is not None and self.next_hop.has_data()))

                                        def has_operation(self):
                                            for c in self.community:
                                                if (c.has_operation()):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.as4_path.yfilter != YFilter.not_set or
                                                self.as_path.yfilter != YFilter.not_set or
                                                self.atomic_aggr.yfilter != YFilter.not_set or
                                                self.local_pref.yfilter != YFilter.not_set or
                                                self.med.yfilter != YFilter.not_set or
                                                self.origin_type.yfilter != YFilter.not_set or
                                                (self.aggregrator_attributes is not None and self.aggregrator_attributes.has_operation()) or
                                                (self.next_hop is not None and self.next_hop.has_operation()))

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "route-attr-list" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.as4_path.is_set or self.as4_path.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.as4_path.get_name_leafdata())
                                            if (self.as_path.is_set or self.as_path.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.as_path.get_name_leafdata())
                                            if (self.atomic_aggr.is_set or self.atomic_aggr.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.atomic_aggr.get_name_leafdata())
                                            if (self.local_pref.is_set or self.local_pref.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.local_pref.get_name_leafdata())
                                            if (self.med.is_set or self.med.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.med.get_name_leafdata())
                                            if (self.origin_type.is_set or self.origin_type.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.origin_type.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            if (child_yang_name == "aggregrator-attributes"):
                                                if (self.aggregrator_attributes is None):
                                                    self.aggregrator_attributes = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.RouteAttrList.AggregratorAttributes()
                                                    self.aggregrator_attributes.parent = self
                                                    self._children_name_map["aggregrator_attributes"] = "aggregrator-attributes"
                                                return self.aggregrator_attributes

                                            if (child_yang_name == "community"):
                                                for c in self.community:
                                                    segment = c.get_segment_path()
                                                    if (segment_path == segment):
                                                        return c
                                                c = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.RouteAttrList.Community()
                                                c.parent = self
                                                local_reference_key = "ydk::seg::%s" % segment_path
                                                self._local_refs[local_reference_key] = c
                                                self.community.append(c)
                                                return c

                                            if (child_yang_name == "next-hop"):
                                                if (self.next_hop is None):
                                                    self.next_hop = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.RouteAttrList.NextHop()
                                                    self.next_hop.parent = self
                                                    self._children_name_map["next_hop"] = "next-hop"
                                                return self.next_hop

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "aggregrator-attributes" or name == "community" or name == "next-hop" or name == "as4-path" or name == "as-path" or name == "atomic-aggr" or name == "local-pref" or name == "med" or name == "origin-type"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "as4-path"):
                                                self.as4_path = value
                                                self.as4_path.value_namespace = name_space
                                                self.as4_path.value_namespace_prefix = name_space_prefix
                                            if(value_path == "as-path"):
                                                self.as_path = value
                                                self.as_path.value_namespace = name_space
                                                self.as_path.value_namespace_prefix = name_space_prefix
                                            if(value_path == "atomic-aggr"):
                                                self.atomic_aggr = value
                                                self.atomic_aggr.value_namespace = name_space
                                                self.atomic_aggr.value_namespace_prefix = name_space_prefix
                                            if(value_path == "local-pref"):
                                                self.local_pref = value
                                                self.local_pref.value_namespace = name_space
                                                self.local_pref.value_namespace_prefix = name_space_prefix
                                            if(value_path == "med"):
                                                self.med = value
                                                self.med.value_namespace = name_space
                                                self.med.value_namespace_prefix = name_space_prefix
                                            if(value_path == "origin-type"):
                                                self.origin_type = value
                                                self.origin_type.value_namespace = name_space
                                                self.origin_type.value_namespace_prefix = name_space_prefix


                                    class ExtAttributesList(Entity):
                                        """
                                        ExtAttributesList
                                        
                                        .. attribute:: aigp
                                        
                                        	AIGP
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: cluster
                                        
                                        	ClusterList
                                        	**type**\:  list of str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        .. attribute:: ext_community
                                        
                                        	ExtendedCommunityArray
                                        	**type**\: list of    :py:class:`ExtCommunity <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.ExtAttributesList.ExtCommunity>`
                                        
                                        .. attribute:: originator_id
                                        
                                        	OriginatorID
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        .. attribute:: path_id
                                        
                                        	PathId
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: unknown_attributes
                                        
                                        	UnknownAttributes
                                        	**type**\: list of    :py:class:`UnknownAttributes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.ExtAttributesList.UnknownAttributes>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-oc-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.ExtAttributesList, self).__init__()

                                            self.yang_name = "ext-attributes-list"
                                            self.yang_parent_name = "route"

                                            self.aigp = YLeaf(YType.uint64, "aigp")

                                            self.cluster = YLeafList(YType.str, "cluster")

                                            self.originator_id = YLeaf(YType.str, "originator-id")

                                            self.path_id = YLeaf(YType.uint32, "path-id")

                                            self.ext_community = YList(self)
                                            self.unknown_attributes = YList(self)

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("aigp",
                                                            "cluster",
                                                            "originator_id",
                                                            "path_id") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.ExtAttributesList, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.ExtAttributesList, self).__setattr__(name, value)


                                        class ExtCommunity(Entity):
                                            """
                                            ExtendedCommunityArray
                                            
                                            .. attribute:: objects
                                            
                                            	BGP OC objects
                                            	**type**\:  str
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-oc-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.ExtAttributesList.ExtCommunity, self).__init__()

                                                self.yang_name = "ext-community"
                                                self.yang_parent_name = "ext-attributes-list"

                                                self.objects = YLeaf(YType.str, "objects")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("objects") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.ExtAttributesList.ExtCommunity, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.ExtAttributesList.ExtCommunity, self).__setattr__(name, value)

                                            def has_data(self):
                                                return self.objects.is_set

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.objects.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "ext-community" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.objects.is_set or self.objects.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.objects.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "objects"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "objects"):
                                                    self.objects = value
                                                    self.objects.value_namespace = name_space
                                                    self.objects.value_namespace_prefix = name_space_prefix


                                        class UnknownAttributes(Entity):
                                            """
                                            UnknownAttributes
                                            
                                            .. attribute:: attribute_length
                                            
                                            	AttributeLength
                                            	**type**\:  int
                                            
                                            	**range:** 0..65535
                                            
                                            .. attribute:: attribute_type
                                            
                                            	AttributeType
                                            	**type**\:  int
                                            
                                            	**range:** 0..65535
                                            
                                            .. attribute:: attribute_value
                                            
                                            	Atributevalue
                                            	**type**\:  str
                                            
                                            	**pattern:** ([0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2})\*)?
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-oc-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.ExtAttributesList.UnknownAttributes, self).__init__()

                                                self.yang_name = "unknown-attributes"
                                                self.yang_parent_name = "ext-attributes-list"

                                                self.attribute_length = YLeaf(YType.uint16, "attribute-length")

                                                self.attribute_type = YLeaf(YType.uint16, "attribute-type")

                                                self.attribute_value = YLeaf(YType.str, "attribute-value")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("attribute_length",
                                                                "attribute_type",
                                                                "attribute_value") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.ExtAttributesList.UnknownAttributes, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.ExtAttributesList.UnknownAttributes, self).__setattr__(name, value)

                                            def has_data(self):
                                                return (
                                                    self.attribute_length.is_set or
                                                    self.attribute_type.is_set or
                                                    self.attribute_value.is_set)

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.attribute_length.yfilter != YFilter.not_set or
                                                    self.attribute_type.yfilter != YFilter.not_set or
                                                    self.attribute_value.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "unknown-attributes" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.attribute_length.is_set or self.attribute_length.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.attribute_length.get_name_leafdata())
                                                if (self.attribute_type.is_set or self.attribute_type.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.attribute_type.get_name_leafdata())
                                                if (self.attribute_value.is_set or self.attribute_value.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.attribute_value.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "attribute-length" or name == "attribute-type" or name == "attribute-value"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "attribute-length"):
                                                    self.attribute_length = value
                                                    self.attribute_length.value_namespace = name_space
                                                    self.attribute_length.value_namespace_prefix = name_space_prefix
                                                if(value_path == "attribute-type"):
                                                    self.attribute_type = value
                                                    self.attribute_type.value_namespace = name_space
                                                    self.attribute_type.value_namespace_prefix = name_space_prefix
                                                if(value_path == "attribute-value"):
                                                    self.attribute_value = value
                                                    self.attribute_value.value_namespace = name_space
                                                    self.attribute_value.value_namespace_prefix = name_space_prefix

                                        def has_data(self):
                                            for c in self.ext_community:
                                                if (c.has_data()):
                                                    return True
                                            for c in self.unknown_attributes:
                                                if (c.has_data()):
                                                    return True
                                            for leaf in self.cluster.getYLeafs():
                                                if (leaf.yfilter != YFilter.not_set):
                                                    return True
                                            return (
                                                self.aigp.is_set or
                                                self.originator_id.is_set or
                                                self.path_id.is_set)

                                        def has_operation(self):
                                            for c in self.ext_community:
                                                if (c.has_operation()):
                                                    return True
                                            for c in self.unknown_attributes:
                                                if (c.has_operation()):
                                                    return True
                                            for leaf in self.cluster.getYLeafs():
                                                if (leaf.is_set):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.aigp.yfilter != YFilter.not_set or
                                                self.cluster.yfilter != YFilter.not_set or
                                                self.originator_id.yfilter != YFilter.not_set or
                                                self.path_id.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "ext-attributes-list" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.aigp.is_set or self.aigp.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.aigp.get_name_leafdata())
                                            if (self.originator_id.is_set or self.originator_id.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.originator_id.get_name_leafdata())
                                            if (self.path_id.is_set or self.path_id.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.path_id.get_name_leafdata())

                                            leaf_name_data.extend(self.cluster.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            if (child_yang_name == "ext-community"):
                                                for c in self.ext_community:
                                                    segment = c.get_segment_path()
                                                    if (segment_path == segment):
                                                        return c
                                                c = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.ExtAttributesList.ExtCommunity()
                                                c.parent = self
                                                local_reference_key = "ydk::seg::%s" % segment_path
                                                self._local_refs[local_reference_key] = c
                                                self.ext_community.append(c)
                                                return c

                                            if (child_yang_name == "unknown-attributes"):
                                                for c in self.unknown_attributes:
                                                    segment = c.get_segment_path()
                                                    if (segment_path == segment):
                                                        return c
                                                c = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.ExtAttributesList.UnknownAttributes()
                                                c.parent = self
                                                local_reference_key = "ydk::seg::%s" % segment_path
                                                self._local_refs[local_reference_key] = c
                                                self.unknown_attributes.append(c)
                                                return c

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "ext-community" or name == "unknown-attributes" or name == "aigp" or name == "cluster" or name == "originator-id" or name == "path-id"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "aigp"):
                                                self.aigp = value
                                                self.aigp.value_namespace = name_space
                                                self.aigp.value_namespace_prefix = name_space_prefix
                                            if(value_path == "cluster"):
                                                self.cluster.append(value)
                                            if(value_path == "originator-id"):
                                                self.originator_id = value
                                                self.originator_id.value_namespace = name_space
                                                self.originator_id.value_namespace_prefix = name_space_prefix
                                            if(value_path == "path-id"):
                                                self.path_id = value
                                                self.path_id.value_namespace = name_space
                                                self.path_id.value_namespace_prefix = name_space_prefix


                                    class LastModifiedDate(Entity):
                                        """
                                        LastModifiedDate
                                        
                                        .. attribute:: time_value
                                        
                                        	TimeValue
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-oc-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.LastModifiedDate, self).__init__()

                                            self.yang_name = "last-modified-date"
                                            self.yang_parent_name = "route"

                                            self.time_value = YLeaf(YType.str, "time-value")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("time_value") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.LastModifiedDate, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.LastModifiedDate, self).__setattr__(name, value)

                                        def has_data(self):
                                            return self.time_value.is_set

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.time_value.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "last-modified-date" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.time_value.is_set or self.time_value.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.time_value.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "time-value"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "time-value"):
                                                self.time_value = value
                                                self.time_value.value_namespace = name_space
                                                self.time_value.value_namespace_prefix = name_space_prefix


                                    class LastUpdateRecieved(Entity):
                                        """
                                        LastUpdateRecieved
                                        
                                        .. attribute:: time_value
                                        
                                        	TimeValue
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-oc-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.LastUpdateRecieved, self).__init__()

                                            self.yang_name = "last-update-recieved"
                                            self.yang_parent_name = "route"

                                            self.time_value = YLeaf(YType.str, "time-value")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("time_value") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.LastUpdateRecieved, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.LastUpdateRecieved, self).__setattr__(name, value)

                                        def has_data(self):
                                            return self.time_value.is_set

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.time_value.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "last-update-recieved" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.time_value.is_set or self.time_value.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.time_value.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "time-value"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "time-value"):
                                                self.time_value = value
                                                self.time_value.value_namespace = name_space
                                                self.time_value.value_namespace_prefix = name_space_prefix

                                    def has_data(self):
                                        return (
                                            self.best_path.is_set or
                                            self.invalid_reason.is_set or
                                            self.neighbor_address.is_set or
                                            self.path_id.is_set or
                                            self.route.is_set or
                                            self.valid_route.is_set or
                                            (self.ext_attributes_list is not None and self.ext_attributes_list.has_data()) or
                                            (self.last_modified_date is not None and self.last_modified_date.has_data()) or
                                            (self.last_update_recieved is not None and self.last_update_recieved.has_data()) or
                                            (self.prefix_name is not None and self.prefix_name.has_data()) or
                                            (self.route_attr_list is not None and self.route_attr_list.has_data()))

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.best_path.yfilter != YFilter.not_set or
                                            self.invalid_reason.yfilter != YFilter.not_set or
                                            self.neighbor_address.yfilter != YFilter.not_set or
                                            self.path_id.yfilter != YFilter.not_set or
                                            self.route.yfilter != YFilter.not_set or
                                            self.valid_route.yfilter != YFilter.not_set or
                                            (self.ext_attributes_list is not None and self.ext_attributes_list.has_operation()) or
                                            (self.last_modified_date is not None and self.last_modified_date.has_operation()) or
                                            (self.last_update_recieved is not None and self.last_update_recieved.has_operation()) or
                                            (self.prefix_name is not None and self.prefix_name.has_operation()) or
                                            (self.route_attr_list is not None and self.route_attr_list.has_operation()))

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "route" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.best_path.is_set or self.best_path.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.best_path.get_name_leafdata())
                                        if (self.invalid_reason.is_set or self.invalid_reason.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.invalid_reason.get_name_leafdata())
                                        if (self.neighbor_address.is_set or self.neighbor_address.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.neighbor_address.get_name_leafdata())
                                        if (self.path_id.is_set or self.path_id.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.path_id.get_name_leafdata())
                                        if (self.route.is_set or self.route.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.route.get_name_leafdata())
                                        if (self.valid_route.is_set or self.valid_route.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.valid_route.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "ext-attributes-list"):
                                            if (self.ext_attributes_list is None):
                                                self.ext_attributes_list = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.ExtAttributesList()
                                                self.ext_attributes_list.parent = self
                                                self._children_name_map["ext_attributes_list"] = "ext-attributes-list"
                                            return self.ext_attributes_list

                                        if (child_yang_name == "last-modified-date"):
                                            if (self.last_modified_date is None):
                                                self.last_modified_date = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.LastModifiedDate()
                                                self.last_modified_date.parent = self
                                                self._children_name_map["last_modified_date"] = "last-modified-date"
                                            return self.last_modified_date

                                        if (child_yang_name == "last-update-recieved"):
                                            if (self.last_update_recieved is None):
                                                self.last_update_recieved = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.LastUpdateRecieved()
                                                self.last_update_recieved.parent = self
                                                self._children_name_map["last_update_recieved"] = "last-update-recieved"
                                            return self.last_update_recieved

                                        if (child_yang_name == "prefix-name"):
                                            if (self.prefix_name is None):
                                                self.prefix_name = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.PrefixName()
                                                self.prefix_name.parent = self
                                                self._children_name_map["prefix_name"] = "prefix-name"
                                            return self.prefix_name

                                        if (child_yang_name == "route-attr-list"):
                                            if (self.route_attr_list is None):
                                                self.route_attr_list = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route.RouteAttrList()
                                                self.route_attr_list.parent = self
                                                self._children_name_map["route_attr_list"] = "route-attr-list"
                                            return self.route_attr_list

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "ext-attributes-list" or name == "last-modified-date" or name == "last-update-recieved" or name == "prefix-name" or name == "route-attr-list" or name == "best-path" or name == "invalid-reason" or name == "neighbor-address" or name == "path-id" or name == "route" or name == "valid-route"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "best-path"):
                                            self.best_path = value
                                            self.best_path.value_namespace = name_space
                                            self.best_path.value_namespace_prefix = name_space_prefix
                                        if(value_path == "invalid-reason"):
                                            self.invalid_reason = value
                                            self.invalid_reason.value_namespace = name_space
                                            self.invalid_reason.value_namespace_prefix = name_space_prefix
                                        if(value_path == "neighbor-address"):
                                            self.neighbor_address = value
                                            self.neighbor_address.value_namespace = name_space
                                            self.neighbor_address.value_namespace_prefix = name_space_prefix
                                        if(value_path == "path-id"):
                                            self.path_id = value
                                            self.path_id.value_namespace = name_space
                                            self.path_id.value_namespace_prefix = name_space_prefix
                                        if(value_path == "route"):
                                            self.route = value
                                            self.route.value_namespace = name_space
                                            self.route.value_namespace_prefix = name_space_prefix
                                        if(value_path == "valid-route"):
                                            self.valid_route = value
                                            self.valid_route.value_namespace = name_space
                                            self.valid_route.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.route:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.route:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "routes" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "route"):
                                        for c in self.route:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes.Route()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.route.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "route"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class NumRoutes(Entity):
                                """
                                Number of routes in adjacency rib out\-bound
                                post\-policy table
                                
                                .. attribute:: num_routes
                                
                                	NumRoutes
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv4-bgp-oc-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.NumRoutes, self).__init__()

                                    self.yang_name = "num-routes"
                                    self.yang_parent_name = "adj-rib-in-post"

                                    self.num_routes = YLeaf(YType.uint64, "num-routes")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("num_routes") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.NumRoutes, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.NumRoutes, self).__setattr__(name, value)

                                def has_data(self):
                                    return self.num_routes.is_set

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.num_routes.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "num-routes" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.num_routes.is_set or self.num_routes.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.num_routes.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "num-routes"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "num-routes"):
                                        self.num_routes = value
                                        self.num_routes.value_namespace = name_space
                                        self.num_routes.value_namespace_prefix = name_space_prefix

                            def has_data(self):
                                return (
                                    (self.num_routes is not None and self.num_routes.has_data()) or
                                    (self.routes is not None and self.routes.has_data()))

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    (self.num_routes is not None and self.num_routes.has_operation()) or
                                    (self.routes is not None and self.routes.has_operation()))

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "adj-rib-in-post" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "num-routes"):
                                    if (self.num_routes is None):
                                        self.num_routes = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.NumRoutes()
                                        self.num_routes.parent = self
                                        self._children_name_map["num_routes"] = "num-routes"
                                    return self.num_routes

                                if (child_yang_name == "routes"):
                                    if (self.routes is None):
                                        self.routes = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost.Routes()
                                        self.routes.parent = self
                                        self._children_name_map["routes"] = "routes"
                                    return self.routes

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "num-routes" or name == "routes"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                pass


                        class AdjRibOutPost(Entity):
                            """
                            Adjacency rib out\-bound post\-policy table
                            
                            .. attribute:: num_routes
                            
                            	Number of routes in adjacency rib out\-bound post\-policy table
                            	**type**\:   :py:class:`NumRoutes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.NumRoutes>`
                            
                            .. attribute:: routes
                            
                            	routes table
                            	**type**\:   :py:class:`Routes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes>`
                            
                            

                            """

                            _prefix = 'ipv4-bgp-oc-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost, self).__init__()

                                self.yang_name = "adj-rib-out-post"
                                self.yang_parent_name = "open-config-neighbor"

                                self.num_routes = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.NumRoutes()
                                self.num_routes.parent = self
                                self._children_name_map["num_routes"] = "num-routes"
                                self._children_yang_names.add("num-routes")

                                self.routes = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes()
                                self.routes.parent = self
                                self._children_name_map["routes"] = "routes"
                                self._children_yang_names.add("routes")


                            class Routes(Entity):
                                """
                                routes table
                                
                                .. attribute:: route
                                
                                	route entry
                                	**type**\: list of    :py:class:`Route <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route>`
                                
                                

                                """

                                _prefix = 'ipv4-bgp-oc-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes, self).__init__()

                                    self.yang_name = "routes"
                                    self.yang_parent_name = "adj-rib-out-post"

                                    self.route = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes, self).__setattr__(name, value)


                                class Route(Entity):
                                    """
                                    route entry
                                    
                                    .. attribute:: best_path
                                    
                                    	BestPath
                                    	**type**\:  bool
                                    
                                    .. attribute:: ext_attributes_list
                                    
                                    	ExtAttributesList
                                    	**type**\:   :py:class:`ExtAttributesList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.ExtAttributesList>`
                                    
                                    .. attribute:: invalid_reason
                                    
                                    	IndentityRef
                                    	**type**\:   :py:class:`BgpOcInvalidRouteReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.BgpOcInvalidRouteReason>`
                                    
                                    .. attribute:: last_modified_date
                                    
                                    	LastModifiedDate
                                    	**type**\:   :py:class:`LastModifiedDate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.LastModifiedDate>`
                                    
                                    .. attribute:: last_update_recieved
                                    
                                    	LastUpdateRecieved
                                    	**type**\:   :py:class:`LastUpdateRecieved <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.LastUpdateRecieved>`
                                    
                                    .. attribute:: neighbor_address
                                    
                                    	Neighbor address
                                    	**type**\: one of the below types:
                                    
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    
                                    ----
                                    	**type**\:  str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    
                                    ----
                                    .. attribute:: path_id
                                    
                                    	Path ID
                                    	**type**\:  int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    .. attribute:: prefix_name
                                    
                                    	Prefix
                                    	**type**\:   :py:class:`PrefixName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.PrefixName>`
                                    
                                    .. attribute:: route
                                    
                                    	Network in prefix/length format
                                    	**type**\: one of the below types:
                                    
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                    
                                    
                                    ----
                                    	**type**\:  str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                    
                                    
                                    ----
                                    .. attribute:: route_attr_list
                                    
                                    	RouteAttributesList
                                    	**type**\:   :py:class:`RouteAttrList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.RouteAttrList>`
                                    
                                    .. attribute:: valid_route
                                    
                                    	ValidRoute
                                    	**type**\:  bool
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-oc-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route, self).__init__()

                                        self.yang_name = "route"
                                        self.yang_parent_name = "routes"

                                        self.best_path = YLeaf(YType.boolean, "best-path")

                                        self.invalid_reason = YLeaf(YType.enumeration, "invalid-reason")

                                        self.neighbor_address = YLeaf(YType.str, "neighbor-address")

                                        self.path_id = YLeaf(YType.int32, "path-id")

                                        self.route = YLeaf(YType.str, "route")

                                        self.valid_route = YLeaf(YType.boolean, "valid-route")

                                        self.ext_attributes_list = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.ExtAttributesList()
                                        self.ext_attributes_list.parent = self
                                        self._children_name_map["ext_attributes_list"] = "ext-attributes-list"
                                        self._children_yang_names.add("ext-attributes-list")

                                        self.last_modified_date = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.LastModifiedDate()
                                        self.last_modified_date.parent = self
                                        self._children_name_map["last_modified_date"] = "last-modified-date"
                                        self._children_yang_names.add("last-modified-date")

                                        self.last_update_recieved = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.LastUpdateRecieved()
                                        self.last_update_recieved.parent = self
                                        self._children_name_map["last_update_recieved"] = "last-update-recieved"
                                        self._children_yang_names.add("last-update-recieved")

                                        self.prefix_name = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.PrefixName()
                                        self.prefix_name.parent = self
                                        self._children_name_map["prefix_name"] = "prefix-name"
                                        self._children_yang_names.add("prefix-name")

                                        self.route_attr_list = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.RouteAttrList()
                                        self.route_attr_list.parent = self
                                        self._children_name_map["route_attr_list"] = "route-attr-list"
                                        self._children_yang_names.add("route-attr-list")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("best_path",
                                                        "invalid_reason",
                                                        "neighbor_address",
                                                        "path_id",
                                                        "route",
                                                        "valid_route") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route, self).__setattr__(name, value)


                                    class PrefixName(Entity):
                                        """
                                        Prefix
                                        
                                        .. attribute:: prefix
                                        
                                        	Prefix
                                        	**type**\:   :py:class:`Prefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.PrefixName.Prefix>`
                                        
                                        .. attribute:: prefix_length
                                        
                                        	Prefix length
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-oc-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.PrefixName, self).__init__()

                                            self.yang_name = "prefix-name"
                                            self.yang_parent_name = "route"

                                            self.prefix_length = YLeaf(YType.uint8, "prefix-length")

                                            self.prefix = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.PrefixName.Prefix()
                                            self.prefix.parent = self
                                            self._children_name_map["prefix"] = "prefix"
                                            self._children_yang_names.add("prefix")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("prefix_length") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.PrefixName, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.PrefixName, self).__setattr__(name, value)


                                        class Prefix(Entity):
                                            """
                                            Prefix
                                            
                                            .. attribute:: afi
                                            
                                            	AFI
                                            	**type**\:   :py:class:`BgpOcAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.BgpOcAfi>`
                                            
                                            .. attribute:: ipv4_address
                                            
                                            	IPv4 Addr
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: ipv6_address
                                            
                                            	IPv6 Addr
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-oc-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.PrefixName.Prefix, self).__init__()

                                                self.yang_name = "prefix"
                                                self.yang_parent_name = "prefix-name"

                                                self.afi = YLeaf(YType.enumeration, "afi")

                                                self.ipv4_address = YLeaf(YType.str, "ipv4-address")

                                                self.ipv6_address = YLeaf(YType.str, "ipv6-address")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("afi",
                                                                "ipv4_address",
                                                                "ipv6_address") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.PrefixName.Prefix, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.PrefixName.Prefix, self).__setattr__(name, value)

                                            def has_data(self):
                                                return (
                                                    self.afi.is_set or
                                                    self.ipv4_address.is_set or
                                                    self.ipv6_address.is_set)

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.afi.yfilter != YFilter.not_set or
                                                    self.ipv4_address.yfilter != YFilter.not_set or
                                                    self.ipv6_address.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "prefix" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.afi.is_set or self.afi.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.afi.get_name_leafdata())
                                                if (self.ipv4_address.is_set or self.ipv4_address.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.ipv4_address.get_name_leafdata())
                                                if (self.ipv6_address.is_set or self.ipv6_address.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.ipv6_address.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "afi" or name == "ipv4-address" or name == "ipv6-address"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "afi"):
                                                    self.afi = value
                                                    self.afi.value_namespace = name_space
                                                    self.afi.value_namespace_prefix = name_space_prefix
                                                if(value_path == "ipv4-address"):
                                                    self.ipv4_address = value
                                                    self.ipv4_address.value_namespace = name_space
                                                    self.ipv4_address.value_namespace_prefix = name_space_prefix
                                                if(value_path == "ipv6-address"):
                                                    self.ipv6_address = value
                                                    self.ipv6_address.value_namespace = name_space
                                                    self.ipv6_address.value_namespace_prefix = name_space_prefix

                                        def has_data(self):
                                            return (
                                                self.prefix_length.is_set or
                                                (self.prefix is not None and self.prefix.has_data()))

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.prefix_length.yfilter != YFilter.not_set or
                                                (self.prefix is not None and self.prefix.has_operation()))

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "prefix-name" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.prefix_length.is_set or self.prefix_length.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.prefix_length.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            if (child_yang_name == "prefix"):
                                                if (self.prefix is None):
                                                    self.prefix = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.PrefixName.Prefix()
                                                    self.prefix.parent = self
                                                    self._children_name_map["prefix"] = "prefix"
                                                return self.prefix

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "prefix" or name == "prefix-length"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "prefix-length"):
                                                self.prefix_length = value
                                                self.prefix_length.value_namespace = name_space
                                                self.prefix_length.value_namespace_prefix = name_space_prefix


                                    class RouteAttrList(Entity):
                                        """
                                        RouteAttributesList
                                        
                                        .. attribute:: aggregrator_attributes
                                        
                                        	AggregatorList
                                        	**type**\:   :py:class:`AggregratorAttributes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.RouteAttrList.AggregratorAttributes>`
                                        
                                        .. attribute:: as4_path
                                        
                                        	AS4 Path
                                        	**type**\:  str
                                        
                                        .. attribute:: as_path
                                        
                                        	AS Path
                                        	**type**\:  str
                                        
                                        .. attribute:: atomic_aggr
                                        
                                        	AtomicAggr
                                        	**type**\:  bool
                                        
                                        .. attribute:: community
                                        
                                        	CommunityArray
                                        	**type**\: list of    :py:class:`Community <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.RouteAttrList.Community>`
                                        
                                        .. attribute:: local_pref
                                        
                                        	LocalPref
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: med
                                        
                                        	Med
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: next_hop
                                        
                                        	NextHopAddress
                                        	**type**\:   :py:class:`NextHop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.RouteAttrList.NextHop>`
                                        
                                        .. attribute:: origin_type
                                        
                                        	Origin Attribute Type
                                        	**type**\:   :py:class:`BgpOcOriginAttr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.BgpOcOriginAttr>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-oc-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.RouteAttrList, self).__init__()

                                            self.yang_name = "route-attr-list"
                                            self.yang_parent_name = "route"

                                            self.as4_path = YLeaf(YType.str, "as4-path")

                                            self.as_path = YLeaf(YType.str, "as-path")

                                            self.atomic_aggr = YLeaf(YType.boolean, "atomic-aggr")

                                            self.local_pref = YLeaf(YType.uint32, "local-pref")

                                            self.med = YLeaf(YType.uint32, "med")

                                            self.origin_type = YLeaf(YType.enumeration, "origin-type")

                                            self.aggregrator_attributes = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.RouteAttrList.AggregratorAttributes()
                                            self.aggregrator_attributes.parent = self
                                            self._children_name_map["aggregrator_attributes"] = "aggregrator-attributes"
                                            self._children_yang_names.add("aggregrator-attributes")

                                            self.next_hop = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.RouteAttrList.NextHop()
                                            self.next_hop.parent = self
                                            self._children_name_map["next_hop"] = "next-hop"
                                            self._children_yang_names.add("next-hop")

                                            self.community = YList(self)

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("as4_path",
                                                            "as_path",
                                                            "atomic_aggr",
                                                            "local_pref",
                                                            "med",
                                                            "origin_type") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.RouteAttrList, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.RouteAttrList, self).__setattr__(name, value)


                                        class NextHop(Entity):
                                            """
                                            NextHopAddress
                                            
                                            .. attribute:: afi
                                            
                                            	AFI
                                            	**type**\:   :py:class:`BgpOcAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.BgpOcAfi>`
                                            
                                            .. attribute:: ipv4_address
                                            
                                            	IPv4 Addr
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: ipv6_address
                                            
                                            	IPv6 Addr
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-oc-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.RouteAttrList.NextHop, self).__init__()

                                                self.yang_name = "next-hop"
                                                self.yang_parent_name = "route-attr-list"

                                                self.afi = YLeaf(YType.enumeration, "afi")

                                                self.ipv4_address = YLeaf(YType.str, "ipv4-address")

                                                self.ipv6_address = YLeaf(YType.str, "ipv6-address")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("afi",
                                                                "ipv4_address",
                                                                "ipv6_address") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.RouteAttrList.NextHop, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.RouteAttrList.NextHop, self).__setattr__(name, value)

                                            def has_data(self):
                                                return (
                                                    self.afi.is_set or
                                                    self.ipv4_address.is_set or
                                                    self.ipv6_address.is_set)

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.afi.yfilter != YFilter.not_set or
                                                    self.ipv4_address.yfilter != YFilter.not_set or
                                                    self.ipv6_address.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "next-hop" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.afi.is_set or self.afi.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.afi.get_name_leafdata())
                                                if (self.ipv4_address.is_set or self.ipv4_address.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.ipv4_address.get_name_leafdata())
                                                if (self.ipv6_address.is_set or self.ipv6_address.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.ipv6_address.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "afi" or name == "ipv4-address" or name == "ipv6-address"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "afi"):
                                                    self.afi = value
                                                    self.afi.value_namespace = name_space
                                                    self.afi.value_namespace_prefix = name_space_prefix
                                                if(value_path == "ipv4-address"):
                                                    self.ipv4_address = value
                                                    self.ipv4_address.value_namespace = name_space
                                                    self.ipv4_address.value_namespace_prefix = name_space_prefix
                                                if(value_path == "ipv6-address"):
                                                    self.ipv6_address = value
                                                    self.ipv6_address.value_namespace = name_space
                                                    self.ipv6_address.value_namespace_prefix = name_space_prefix


                                        class AggregratorAttributes(Entity):
                                            """
                                            AggregatorList
                                            
                                            .. attribute:: address
                                            
                                            	IPv4 address
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: as4
                                            
                                            	AS4 number
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: as_
                                            
                                            	AS number
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-oc-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.RouteAttrList.AggregratorAttributes, self).__init__()

                                                self.yang_name = "aggregrator-attributes"
                                                self.yang_parent_name = "route-attr-list"

                                                self.address = YLeaf(YType.str, "address")

                                                self.as4 = YLeaf(YType.uint32, "as4")

                                                self.as_ = YLeaf(YType.uint32, "as")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("address",
                                                                "as4",
                                                                "as_") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.RouteAttrList.AggregratorAttributes, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.RouteAttrList.AggregratorAttributes, self).__setattr__(name, value)

                                            def has_data(self):
                                                return (
                                                    self.address.is_set or
                                                    self.as4.is_set or
                                                    self.as_.is_set)

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.address.yfilter != YFilter.not_set or
                                                    self.as4.yfilter != YFilter.not_set or
                                                    self.as_.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "aggregrator-attributes" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.address.is_set or self.address.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.address.get_name_leafdata())
                                                if (self.as4.is_set or self.as4.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.as4.get_name_leafdata())
                                                if (self.as_.is_set or self.as_.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.as_.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "address" or name == "as4" or name == "as"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "address"):
                                                    self.address = value
                                                    self.address.value_namespace = name_space
                                                    self.address.value_namespace_prefix = name_space_prefix
                                                if(value_path == "as4"):
                                                    self.as4 = value
                                                    self.as4.value_namespace = name_space
                                                    self.as4.value_namespace_prefix = name_space_prefix
                                                if(value_path == "as"):
                                                    self.as_ = value
                                                    self.as_.value_namespace = name_space
                                                    self.as_.value_namespace_prefix = name_space_prefix


                                        class Community(Entity):
                                            """
                                            CommunityArray
                                            
                                            .. attribute:: objects
                                            
                                            	BGP OC objects
                                            	**type**\:  str
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-oc-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.RouteAttrList.Community, self).__init__()

                                                self.yang_name = "community"
                                                self.yang_parent_name = "route-attr-list"

                                                self.objects = YLeaf(YType.str, "objects")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("objects") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.RouteAttrList.Community, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.RouteAttrList.Community, self).__setattr__(name, value)

                                            def has_data(self):
                                                return self.objects.is_set

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.objects.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "community" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.objects.is_set or self.objects.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.objects.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "objects"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "objects"):
                                                    self.objects = value
                                                    self.objects.value_namespace = name_space
                                                    self.objects.value_namespace_prefix = name_space_prefix

                                        def has_data(self):
                                            for c in self.community:
                                                if (c.has_data()):
                                                    return True
                                            return (
                                                self.as4_path.is_set or
                                                self.as_path.is_set or
                                                self.atomic_aggr.is_set or
                                                self.local_pref.is_set or
                                                self.med.is_set or
                                                self.origin_type.is_set or
                                                (self.aggregrator_attributes is not None and self.aggregrator_attributes.has_data()) or
                                                (self.next_hop is not None and self.next_hop.has_data()))

                                        def has_operation(self):
                                            for c in self.community:
                                                if (c.has_operation()):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.as4_path.yfilter != YFilter.not_set or
                                                self.as_path.yfilter != YFilter.not_set or
                                                self.atomic_aggr.yfilter != YFilter.not_set or
                                                self.local_pref.yfilter != YFilter.not_set or
                                                self.med.yfilter != YFilter.not_set or
                                                self.origin_type.yfilter != YFilter.not_set or
                                                (self.aggregrator_attributes is not None and self.aggregrator_attributes.has_operation()) or
                                                (self.next_hop is not None and self.next_hop.has_operation()))

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "route-attr-list" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.as4_path.is_set or self.as4_path.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.as4_path.get_name_leafdata())
                                            if (self.as_path.is_set or self.as_path.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.as_path.get_name_leafdata())
                                            if (self.atomic_aggr.is_set or self.atomic_aggr.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.atomic_aggr.get_name_leafdata())
                                            if (self.local_pref.is_set or self.local_pref.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.local_pref.get_name_leafdata())
                                            if (self.med.is_set or self.med.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.med.get_name_leafdata())
                                            if (self.origin_type.is_set or self.origin_type.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.origin_type.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            if (child_yang_name == "aggregrator-attributes"):
                                                if (self.aggregrator_attributes is None):
                                                    self.aggregrator_attributes = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.RouteAttrList.AggregratorAttributes()
                                                    self.aggregrator_attributes.parent = self
                                                    self._children_name_map["aggregrator_attributes"] = "aggregrator-attributes"
                                                return self.aggregrator_attributes

                                            if (child_yang_name == "community"):
                                                for c in self.community:
                                                    segment = c.get_segment_path()
                                                    if (segment_path == segment):
                                                        return c
                                                c = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.RouteAttrList.Community()
                                                c.parent = self
                                                local_reference_key = "ydk::seg::%s" % segment_path
                                                self._local_refs[local_reference_key] = c
                                                self.community.append(c)
                                                return c

                                            if (child_yang_name == "next-hop"):
                                                if (self.next_hop is None):
                                                    self.next_hop = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.RouteAttrList.NextHop()
                                                    self.next_hop.parent = self
                                                    self._children_name_map["next_hop"] = "next-hop"
                                                return self.next_hop

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "aggregrator-attributes" or name == "community" or name == "next-hop" or name == "as4-path" or name == "as-path" or name == "atomic-aggr" or name == "local-pref" or name == "med" or name == "origin-type"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "as4-path"):
                                                self.as4_path = value
                                                self.as4_path.value_namespace = name_space
                                                self.as4_path.value_namespace_prefix = name_space_prefix
                                            if(value_path == "as-path"):
                                                self.as_path = value
                                                self.as_path.value_namespace = name_space
                                                self.as_path.value_namespace_prefix = name_space_prefix
                                            if(value_path == "atomic-aggr"):
                                                self.atomic_aggr = value
                                                self.atomic_aggr.value_namespace = name_space
                                                self.atomic_aggr.value_namespace_prefix = name_space_prefix
                                            if(value_path == "local-pref"):
                                                self.local_pref = value
                                                self.local_pref.value_namespace = name_space
                                                self.local_pref.value_namespace_prefix = name_space_prefix
                                            if(value_path == "med"):
                                                self.med = value
                                                self.med.value_namespace = name_space
                                                self.med.value_namespace_prefix = name_space_prefix
                                            if(value_path == "origin-type"):
                                                self.origin_type = value
                                                self.origin_type.value_namespace = name_space
                                                self.origin_type.value_namespace_prefix = name_space_prefix


                                    class ExtAttributesList(Entity):
                                        """
                                        ExtAttributesList
                                        
                                        .. attribute:: aigp
                                        
                                        	AIGP
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: cluster
                                        
                                        	ClusterList
                                        	**type**\:  list of str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        .. attribute:: ext_community
                                        
                                        	ExtendedCommunityArray
                                        	**type**\: list of    :py:class:`ExtCommunity <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.ExtAttributesList.ExtCommunity>`
                                        
                                        .. attribute:: originator_id
                                        
                                        	OriginatorID
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        .. attribute:: path_id
                                        
                                        	PathId
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: unknown_attributes
                                        
                                        	UnknownAttributes
                                        	**type**\: list of    :py:class:`UnknownAttributes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.ExtAttributesList.UnknownAttributes>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-oc-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.ExtAttributesList, self).__init__()

                                            self.yang_name = "ext-attributes-list"
                                            self.yang_parent_name = "route"

                                            self.aigp = YLeaf(YType.uint64, "aigp")

                                            self.cluster = YLeafList(YType.str, "cluster")

                                            self.originator_id = YLeaf(YType.str, "originator-id")

                                            self.path_id = YLeaf(YType.uint32, "path-id")

                                            self.ext_community = YList(self)
                                            self.unknown_attributes = YList(self)

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("aigp",
                                                            "cluster",
                                                            "originator_id",
                                                            "path_id") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.ExtAttributesList, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.ExtAttributesList, self).__setattr__(name, value)


                                        class ExtCommunity(Entity):
                                            """
                                            ExtendedCommunityArray
                                            
                                            .. attribute:: objects
                                            
                                            	BGP OC objects
                                            	**type**\:  str
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-oc-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.ExtAttributesList.ExtCommunity, self).__init__()

                                                self.yang_name = "ext-community"
                                                self.yang_parent_name = "ext-attributes-list"

                                                self.objects = YLeaf(YType.str, "objects")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("objects") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.ExtAttributesList.ExtCommunity, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.ExtAttributesList.ExtCommunity, self).__setattr__(name, value)

                                            def has_data(self):
                                                return self.objects.is_set

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.objects.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "ext-community" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.objects.is_set or self.objects.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.objects.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "objects"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "objects"):
                                                    self.objects = value
                                                    self.objects.value_namespace = name_space
                                                    self.objects.value_namespace_prefix = name_space_prefix


                                        class UnknownAttributes(Entity):
                                            """
                                            UnknownAttributes
                                            
                                            .. attribute:: attribute_length
                                            
                                            	AttributeLength
                                            	**type**\:  int
                                            
                                            	**range:** 0..65535
                                            
                                            .. attribute:: attribute_type
                                            
                                            	AttributeType
                                            	**type**\:  int
                                            
                                            	**range:** 0..65535
                                            
                                            .. attribute:: attribute_value
                                            
                                            	Atributevalue
                                            	**type**\:  str
                                            
                                            	**pattern:** ([0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2})\*)?
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-oc-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.ExtAttributesList.UnknownAttributes, self).__init__()

                                                self.yang_name = "unknown-attributes"
                                                self.yang_parent_name = "ext-attributes-list"

                                                self.attribute_length = YLeaf(YType.uint16, "attribute-length")

                                                self.attribute_type = YLeaf(YType.uint16, "attribute-type")

                                                self.attribute_value = YLeaf(YType.str, "attribute-value")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("attribute_length",
                                                                "attribute_type",
                                                                "attribute_value") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.ExtAttributesList.UnknownAttributes, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.ExtAttributesList.UnknownAttributes, self).__setattr__(name, value)

                                            def has_data(self):
                                                return (
                                                    self.attribute_length.is_set or
                                                    self.attribute_type.is_set or
                                                    self.attribute_value.is_set)

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.attribute_length.yfilter != YFilter.not_set or
                                                    self.attribute_type.yfilter != YFilter.not_set or
                                                    self.attribute_value.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "unknown-attributes" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.attribute_length.is_set or self.attribute_length.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.attribute_length.get_name_leafdata())
                                                if (self.attribute_type.is_set or self.attribute_type.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.attribute_type.get_name_leafdata())
                                                if (self.attribute_value.is_set or self.attribute_value.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.attribute_value.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "attribute-length" or name == "attribute-type" or name == "attribute-value"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "attribute-length"):
                                                    self.attribute_length = value
                                                    self.attribute_length.value_namespace = name_space
                                                    self.attribute_length.value_namespace_prefix = name_space_prefix
                                                if(value_path == "attribute-type"):
                                                    self.attribute_type = value
                                                    self.attribute_type.value_namespace = name_space
                                                    self.attribute_type.value_namespace_prefix = name_space_prefix
                                                if(value_path == "attribute-value"):
                                                    self.attribute_value = value
                                                    self.attribute_value.value_namespace = name_space
                                                    self.attribute_value.value_namespace_prefix = name_space_prefix

                                        def has_data(self):
                                            for c in self.ext_community:
                                                if (c.has_data()):
                                                    return True
                                            for c in self.unknown_attributes:
                                                if (c.has_data()):
                                                    return True
                                            for leaf in self.cluster.getYLeafs():
                                                if (leaf.yfilter != YFilter.not_set):
                                                    return True
                                            return (
                                                self.aigp.is_set or
                                                self.originator_id.is_set or
                                                self.path_id.is_set)

                                        def has_operation(self):
                                            for c in self.ext_community:
                                                if (c.has_operation()):
                                                    return True
                                            for c in self.unknown_attributes:
                                                if (c.has_operation()):
                                                    return True
                                            for leaf in self.cluster.getYLeafs():
                                                if (leaf.is_set):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.aigp.yfilter != YFilter.not_set or
                                                self.cluster.yfilter != YFilter.not_set or
                                                self.originator_id.yfilter != YFilter.not_set or
                                                self.path_id.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "ext-attributes-list" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.aigp.is_set or self.aigp.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.aigp.get_name_leafdata())
                                            if (self.originator_id.is_set or self.originator_id.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.originator_id.get_name_leafdata())
                                            if (self.path_id.is_set or self.path_id.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.path_id.get_name_leafdata())

                                            leaf_name_data.extend(self.cluster.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            if (child_yang_name == "ext-community"):
                                                for c in self.ext_community:
                                                    segment = c.get_segment_path()
                                                    if (segment_path == segment):
                                                        return c
                                                c = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.ExtAttributesList.ExtCommunity()
                                                c.parent = self
                                                local_reference_key = "ydk::seg::%s" % segment_path
                                                self._local_refs[local_reference_key] = c
                                                self.ext_community.append(c)
                                                return c

                                            if (child_yang_name == "unknown-attributes"):
                                                for c in self.unknown_attributes:
                                                    segment = c.get_segment_path()
                                                    if (segment_path == segment):
                                                        return c
                                                c = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.ExtAttributesList.UnknownAttributes()
                                                c.parent = self
                                                local_reference_key = "ydk::seg::%s" % segment_path
                                                self._local_refs[local_reference_key] = c
                                                self.unknown_attributes.append(c)
                                                return c

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "ext-community" or name == "unknown-attributes" or name == "aigp" or name == "cluster" or name == "originator-id" or name == "path-id"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "aigp"):
                                                self.aigp = value
                                                self.aigp.value_namespace = name_space
                                                self.aigp.value_namespace_prefix = name_space_prefix
                                            if(value_path == "cluster"):
                                                self.cluster.append(value)
                                            if(value_path == "originator-id"):
                                                self.originator_id = value
                                                self.originator_id.value_namespace = name_space
                                                self.originator_id.value_namespace_prefix = name_space_prefix
                                            if(value_path == "path-id"):
                                                self.path_id = value
                                                self.path_id.value_namespace = name_space
                                                self.path_id.value_namespace_prefix = name_space_prefix


                                    class LastModifiedDate(Entity):
                                        """
                                        LastModifiedDate
                                        
                                        .. attribute:: time_value
                                        
                                        	TimeValue
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-oc-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.LastModifiedDate, self).__init__()

                                            self.yang_name = "last-modified-date"
                                            self.yang_parent_name = "route"

                                            self.time_value = YLeaf(YType.str, "time-value")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("time_value") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.LastModifiedDate, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.LastModifiedDate, self).__setattr__(name, value)

                                        def has_data(self):
                                            return self.time_value.is_set

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.time_value.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "last-modified-date" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.time_value.is_set or self.time_value.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.time_value.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "time-value"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "time-value"):
                                                self.time_value = value
                                                self.time_value.value_namespace = name_space
                                                self.time_value.value_namespace_prefix = name_space_prefix


                                    class LastUpdateRecieved(Entity):
                                        """
                                        LastUpdateRecieved
                                        
                                        .. attribute:: time_value
                                        
                                        	TimeValue
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-oc-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.LastUpdateRecieved, self).__init__()

                                            self.yang_name = "last-update-recieved"
                                            self.yang_parent_name = "route"

                                            self.time_value = YLeaf(YType.str, "time-value")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("time_value") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.LastUpdateRecieved, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.LastUpdateRecieved, self).__setattr__(name, value)

                                        def has_data(self):
                                            return self.time_value.is_set

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.time_value.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "last-update-recieved" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.time_value.is_set or self.time_value.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.time_value.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "time-value"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "time-value"):
                                                self.time_value = value
                                                self.time_value.value_namespace = name_space
                                                self.time_value.value_namespace_prefix = name_space_prefix

                                    def has_data(self):
                                        return (
                                            self.best_path.is_set or
                                            self.invalid_reason.is_set or
                                            self.neighbor_address.is_set or
                                            self.path_id.is_set or
                                            self.route.is_set or
                                            self.valid_route.is_set or
                                            (self.ext_attributes_list is not None and self.ext_attributes_list.has_data()) or
                                            (self.last_modified_date is not None and self.last_modified_date.has_data()) or
                                            (self.last_update_recieved is not None and self.last_update_recieved.has_data()) or
                                            (self.prefix_name is not None and self.prefix_name.has_data()) or
                                            (self.route_attr_list is not None and self.route_attr_list.has_data()))

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.best_path.yfilter != YFilter.not_set or
                                            self.invalid_reason.yfilter != YFilter.not_set or
                                            self.neighbor_address.yfilter != YFilter.not_set or
                                            self.path_id.yfilter != YFilter.not_set or
                                            self.route.yfilter != YFilter.not_set or
                                            self.valid_route.yfilter != YFilter.not_set or
                                            (self.ext_attributes_list is not None and self.ext_attributes_list.has_operation()) or
                                            (self.last_modified_date is not None and self.last_modified_date.has_operation()) or
                                            (self.last_update_recieved is not None and self.last_update_recieved.has_operation()) or
                                            (self.prefix_name is not None and self.prefix_name.has_operation()) or
                                            (self.route_attr_list is not None and self.route_attr_list.has_operation()))

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "route" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.best_path.is_set or self.best_path.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.best_path.get_name_leafdata())
                                        if (self.invalid_reason.is_set or self.invalid_reason.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.invalid_reason.get_name_leafdata())
                                        if (self.neighbor_address.is_set or self.neighbor_address.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.neighbor_address.get_name_leafdata())
                                        if (self.path_id.is_set or self.path_id.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.path_id.get_name_leafdata())
                                        if (self.route.is_set or self.route.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.route.get_name_leafdata())
                                        if (self.valid_route.is_set or self.valid_route.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.valid_route.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "ext-attributes-list"):
                                            if (self.ext_attributes_list is None):
                                                self.ext_attributes_list = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.ExtAttributesList()
                                                self.ext_attributes_list.parent = self
                                                self._children_name_map["ext_attributes_list"] = "ext-attributes-list"
                                            return self.ext_attributes_list

                                        if (child_yang_name == "last-modified-date"):
                                            if (self.last_modified_date is None):
                                                self.last_modified_date = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.LastModifiedDate()
                                                self.last_modified_date.parent = self
                                                self._children_name_map["last_modified_date"] = "last-modified-date"
                                            return self.last_modified_date

                                        if (child_yang_name == "last-update-recieved"):
                                            if (self.last_update_recieved is None):
                                                self.last_update_recieved = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.LastUpdateRecieved()
                                                self.last_update_recieved.parent = self
                                                self._children_name_map["last_update_recieved"] = "last-update-recieved"
                                            return self.last_update_recieved

                                        if (child_yang_name == "prefix-name"):
                                            if (self.prefix_name is None):
                                                self.prefix_name = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.PrefixName()
                                                self.prefix_name.parent = self
                                                self._children_name_map["prefix_name"] = "prefix-name"
                                            return self.prefix_name

                                        if (child_yang_name == "route-attr-list"):
                                            if (self.route_attr_list is None):
                                                self.route_attr_list = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route.RouteAttrList()
                                                self.route_attr_list.parent = self
                                                self._children_name_map["route_attr_list"] = "route-attr-list"
                                            return self.route_attr_list

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "ext-attributes-list" or name == "last-modified-date" or name == "last-update-recieved" or name == "prefix-name" or name == "route-attr-list" or name == "best-path" or name == "invalid-reason" or name == "neighbor-address" or name == "path-id" or name == "route" or name == "valid-route"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "best-path"):
                                            self.best_path = value
                                            self.best_path.value_namespace = name_space
                                            self.best_path.value_namespace_prefix = name_space_prefix
                                        if(value_path == "invalid-reason"):
                                            self.invalid_reason = value
                                            self.invalid_reason.value_namespace = name_space
                                            self.invalid_reason.value_namespace_prefix = name_space_prefix
                                        if(value_path == "neighbor-address"):
                                            self.neighbor_address = value
                                            self.neighbor_address.value_namespace = name_space
                                            self.neighbor_address.value_namespace_prefix = name_space_prefix
                                        if(value_path == "path-id"):
                                            self.path_id = value
                                            self.path_id.value_namespace = name_space
                                            self.path_id.value_namespace_prefix = name_space_prefix
                                        if(value_path == "route"):
                                            self.route = value
                                            self.route.value_namespace = name_space
                                            self.route.value_namespace_prefix = name_space_prefix
                                        if(value_path == "valid-route"):
                                            self.valid_route = value
                                            self.valid_route.value_namespace = name_space
                                            self.valid_route.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.route:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.route:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "routes" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "route"):
                                        for c in self.route:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes.Route()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.route.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "route"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class NumRoutes(Entity):
                                """
                                Number of routes in adjacency rib out\-bound
                                post\-policy table
                                
                                .. attribute:: num_routes
                                
                                	NumRoutes
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv4-bgp-oc-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.NumRoutes, self).__init__()

                                    self.yang_name = "num-routes"
                                    self.yang_parent_name = "adj-rib-out-post"

                                    self.num_routes = YLeaf(YType.uint64, "num-routes")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("num_routes") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.NumRoutes, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.NumRoutes, self).__setattr__(name, value)

                                def has_data(self):
                                    return self.num_routes.is_set

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.num_routes.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "num-routes" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.num_routes.is_set or self.num_routes.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.num_routes.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "num-routes"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "num-routes"):
                                        self.num_routes = value
                                        self.num_routes.value_namespace = name_space
                                        self.num_routes.value_namespace_prefix = name_space_prefix

                            def has_data(self):
                                return (
                                    (self.num_routes is not None and self.num_routes.has_data()) or
                                    (self.routes is not None and self.routes.has_data()))

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    (self.num_routes is not None and self.num_routes.has_operation()) or
                                    (self.routes is not None and self.routes.has_operation()))

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "adj-rib-out-post" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "num-routes"):
                                    if (self.num_routes is None):
                                        self.num_routes = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.NumRoutes()
                                        self.num_routes.parent = self
                                        self._children_name_map["num_routes"] = "num-routes"
                                    return self.num_routes

                                if (child_yang_name == "routes"):
                                    if (self.routes is None):
                                        self.routes = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost.Routes()
                                        self.routes.parent = self
                                        self._children_name_map["routes"] = "routes"
                                    return self.routes

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "num-routes" or name == "routes"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                pass


                        class AdjRibOutPre(Entity):
                            """
                            Adjacency rib out\-bound pre\-policy table
                            
                            .. attribute:: num_routes
                            
                            	Number of routes in adjacency rib out\-bound post\-policy table
                            	**type**\:   :py:class:`NumRoutes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.NumRoutes>`
                            
                            .. attribute:: routes
                            
                            	routes table
                            	**type**\:   :py:class:`Routes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes>`
                            
                            

                            """

                            _prefix = 'ipv4-bgp-oc-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre, self).__init__()

                                self.yang_name = "adj-rib-out-pre"
                                self.yang_parent_name = "open-config-neighbor"

                                self.num_routes = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.NumRoutes()
                                self.num_routes.parent = self
                                self._children_name_map["num_routes"] = "num-routes"
                                self._children_yang_names.add("num-routes")

                                self.routes = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes()
                                self.routes.parent = self
                                self._children_name_map["routes"] = "routes"
                                self._children_yang_names.add("routes")


                            class Routes(Entity):
                                """
                                routes table
                                
                                .. attribute:: route
                                
                                	route entry
                                	**type**\: list of    :py:class:`Route <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route>`
                                
                                

                                """

                                _prefix = 'ipv4-bgp-oc-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes, self).__init__()

                                    self.yang_name = "routes"
                                    self.yang_parent_name = "adj-rib-out-pre"

                                    self.route = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes, self).__setattr__(name, value)


                                class Route(Entity):
                                    """
                                    route entry
                                    
                                    .. attribute:: best_path
                                    
                                    	BestPath
                                    	**type**\:  bool
                                    
                                    .. attribute:: ext_attributes_list
                                    
                                    	ExtAttributesList
                                    	**type**\:   :py:class:`ExtAttributesList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.ExtAttributesList>`
                                    
                                    .. attribute:: invalid_reason
                                    
                                    	IndentityRef
                                    	**type**\:   :py:class:`BgpOcInvalidRouteReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.BgpOcInvalidRouteReason>`
                                    
                                    .. attribute:: last_modified_date
                                    
                                    	LastModifiedDate
                                    	**type**\:   :py:class:`LastModifiedDate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.LastModifiedDate>`
                                    
                                    .. attribute:: last_update_recieved
                                    
                                    	LastUpdateRecieved
                                    	**type**\:   :py:class:`LastUpdateRecieved <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.LastUpdateRecieved>`
                                    
                                    .. attribute:: neighbor_address
                                    
                                    	Neighbor address
                                    	**type**\: one of the below types:
                                    
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    
                                    ----
                                    	**type**\:  str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    
                                    ----
                                    .. attribute:: path_id
                                    
                                    	Path ID
                                    	**type**\:  int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    .. attribute:: prefix_name
                                    
                                    	Prefix
                                    	**type**\:   :py:class:`PrefixName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.PrefixName>`
                                    
                                    .. attribute:: route
                                    
                                    	Network in prefix/length format
                                    	**type**\: one of the below types:
                                    
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                    
                                    
                                    ----
                                    	**type**\:  str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                    
                                    
                                    ----
                                    .. attribute:: route_attr_list
                                    
                                    	RouteAttributesList
                                    	**type**\:   :py:class:`RouteAttrList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.RouteAttrList>`
                                    
                                    .. attribute:: valid_route
                                    
                                    	ValidRoute
                                    	**type**\:  bool
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-oc-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route, self).__init__()

                                        self.yang_name = "route"
                                        self.yang_parent_name = "routes"

                                        self.best_path = YLeaf(YType.boolean, "best-path")

                                        self.invalid_reason = YLeaf(YType.enumeration, "invalid-reason")

                                        self.neighbor_address = YLeaf(YType.str, "neighbor-address")

                                        self.path_id = YLeaf(YType.int32, "path-id")

                                        self.route = YLeaf(YType.str, "route")

                                        self.valid_route = YLeaf(YType.boolean, "valid-route")

                                        self.ext_attributes_list = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.ExtAttributesList()
                                        self.ext_attributes_list.parent = self
                                        self._children_name_map["ext_attributes_list"] = "ext-attributes-list"
                                        self._children_yang_names.add("ext-attributes-list")

                                        self.last_modified_date = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.LastModifiedDate()
                                        self.last_modified_date.parent = self
                                        self._children_name_map["last_modified_date"] = "last-modified-date"
                                        self._children_yang_names.add("last-modified-date")

                                        self.last_update_recieved = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.LastUpdateRecieved()
                                        self.last_update_recieved.parent = self
                                        self._children_name_map["last_update_recieved"] = "last-update-recieved"
                                        self._children_yang_names.add("last-update-recieved")

                                        self.prefix_name = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.PrefixName()
                                        self.prefix_name.parent = self
                                        self._children_name_map["prefix_name"] = "prefix-name"
                                        self._children_yang_names.add("prefix-name")

                                        self.route_attr_list = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.RouteAttrList()
                                        self.route_attr_list.parent = self
                                        self._children_name_map["route_attr_list"] = "route-attr-list"
                                        self._children_yang_names.add("route-attr-list")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("best_path",
                                                        "invalid_reason",
                                                        "neighbor_address",
                                                        "path_id",
                                                        "route",
                                                        "valid_route") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route, self).__setattr__(name, value)


                                    class PrefixName(Entity):
                                        """
                                        Prefix
                                        
                                        .. attribute:: prefix
                                        
                                        	Prefix
                                        	**type**\:   :py:class:`Prefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.PrefixName.Prefix>`
                                        
                                        .. attribute:: prefix_length
                                        
                                        	Prefix length
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-oc-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.PrefixName, self).__init__()

                                            self.yang_name = "prefix-name"
                                            self.yang_parent_name = "route"

                                            self.prefix_length = YLeaf(YType.uint8, "prefix-length")

                                            self.prefix = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.PrefixName.Prefix()
                                            self.prefix.parent = self
                                            self._children_name_map["prefix"] = "prefix"
                                            self._children_yang_names.add("prefix")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("prefix_length") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.PrefixName, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.PrefixName, self).__setattr__(name, value)


                                        class Prefix(Entity):
                                            """
                                            Prefix
                                            
                                            .. attribute:: afi
                                            
                                            	AFI
                                            	**type**\:   :py:class:`BgpOcAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.BgpOcAfi>`
                                            
                                            .. attribute:: ipv4_address
                                            
                                            	IPv4 Addr
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: ipv6_address
                                            
                                            	IPv6 Addr
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-oc-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.PrefixName.Prefix, self).__init__()

                                                self.yang_name = "prefix"
                                                self.yang_parent_name = "prefix-name"

                                                self.afi = YLeaf(YType.enumeration, "afi")

                                                self.ipv4_address = YLeaf(YType.str, "ipv4-address")

                                                self.ipv6_address = YLeaf(YType.str, "ipv6-address")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("afi",
                                                                "ipv4_address",
                                                                "ipv6_address") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.PrefixName.Prefix, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.PrefixName.Prefix, self).__setattr__(name, value)

                                            def has_data(self):
                                                return (
                                                    self.afi.is_set or
                                                    self.ipv4_address.is_set or
                                                    self.ipv6_address.is_set)

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.afi.yfilter != YFilter.not_set or
                                                    self.ipv4_address.yfilter != YFilter.not_set or
                                                    self.ipv6_address.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "prefix" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.afi.is_set or self.afi.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.afi.get_name_leafdata())
                                                if (self.ipv4_address.is_set or self.ipv4_address.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.ipv4_address.get_name_leafdata())
                                                if (self.ipv6_address.is_set or self.ipv6_address.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.ipv6_address.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "afi" or name == "ipv4-address" or name == "ipv6-address"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "afi"):
                                                    self.afi = value
                                                    self.afi.value_namespace = name_space
                                                    self.afi.value_namespace_prefix = name_space_prefix
                                                if(value_path == "ipv4-address"):
                                                    self.ipv4_address = value
                                                    self.ipv4_address.value_namespace = name_space
                                                    self.ipv4_address.value_namespace_prefix = name_space_prefix
                                                if(value_path == "ipv6-address"):
                                                    self.ipv6_address = value
                                                    self.ipv6_address.value_namespace = name_space
                                                    self.ipv6_address.value_namespace_prefix = name_space_prefix

                                        def has_data(self):
                                            return (
                                                self.prefix_length.is_set or
                                                (self.prefix is not None and self.prefix.has_data()))

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.prefix_length.yfilter != YFilter.not_set or
                                                (self.prefix is not None and self.prefix.has_operation()))

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "prefix-name" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.prefix_length.is_set or self.prefix_length.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.prefix_length.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            if (child_yang_name == "prefix"):
                                                if (self.prefix is None):
                                                    self.prefix = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.PrefixName.Prefix()
                                                    self.prefix.parent = self
                                                    self._children_name_map["prefix"] = "prefix"
                                                return self.prefix

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "prefix" or name == "prefix-length"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "prefix-length"):
                                                self.prefix_length = value
                                                self.prefix_length.value_namespace = name_space
                                                self.prefix_length.value_namespace_prefix = name_space_prefix


                                    class RouteAttrList(Entity):
                                        """
                                        RouteAttributesList
                                        
                                        .. attribute:: aggregrator_attributes
                                        
                                        	AggregatorList
                                        	**type**\:   :py:class:`AggregratorAttributes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.RouteAttrList.AggregratorAttributes>`
                                        
                                        .. attribute:: as4_path
                                        
                                        	AS4 Path
                                        	**type**\:  str
                                        
                                        .. attribute:: as_path
                                        
                                        	AS Path
                                        	**type**\:  str
                                        
                                        .. attribute:: atomic_aggr
                                        
                                        	AtomicAggr
                                        	**type**\:  bool
                                        
                                        .. attribute:: community
                                        
                                        	CommunityArray
                                        	**type**\: list of    :py:class:`Community <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.RouteAttrList.Community>`
                                        
                                        .. attribute:: local_pref
                                        
                                        	LocalPref
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: med
                                        
                                        	Med
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: next_hop
                                        
                                        	NextHopAddress
                                        	**type**\:   :py:class:`NextHop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.RouteAttrList.NextHop>`
                                        
                                        .. attribute:: origin_type
                                        
                                        	Origin Attribute Type
                                        	**type**\:   :py:class:`BgpOcOriginAttr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.BgpOcOriginAttr>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-oc-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.RouteAttrList, self).__init__()

                                            self.yang_name = "route-attr-list"
                                            self.yang_parent_name = "route"

                                            self.as4_path = YLeaf(YType.str, "as4-path")

                                            self.as_path = YLeaf(YType.str, "as-path")

                                            self.atomic_aggr = YLeaf(YType.boolean, "atomic-aggr")

                                            self.local_pref = YLeaf(YType.uint32, "local-pref")

                                            self.med = YLeaf(YType.uint32, "med")

                                            self.origin_type = YLeaf(YType.enumeration, "origin-type")

                                            self.aggregrator_attributes = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.RouteAttrList.AggregratorAttributes()
                                            self.aggregrator_attributes.parent = self
                                            self._children_name_map["aggregrator_attributes"] = "aggregrator-attributes"
                                            self._children_yang_names.add("aggregrator-attributes")

                                            self.next_hop = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.RouteAttrList.NextHop()
                                            self.next_hop.parent = self
                                            self._children_name_map["next_hop"] = "next-hop"
                                            self._children_yang_names.add("next-hop")

                                            self.community = YList(self)

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("as4_path",
                                                            "as_path",
                                                            "atomic_aggr",
                                                            "local_pref",
                                                            "med",
                                                            "origin_type") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.RouteAttrList, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.RouteAttrList, self).__setattr__(name, value)


                                        class NextHop(Entity):
                                            """
                                            NextHopAddress
                                            
                                            .. attribute:: afi
                                            
                                            	AFI
                                            	**type**\:   :py:class:`BgpOcAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.BgpOcAfi>`
                                            
                                            .. attribute:: ipv4_address
                                            
                                            	IPv4 Addr
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: ipv6_address
                                            
                                            	IPv6 Addr
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-oc-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.RouteAttrList.NextHop, self).__init__()

                                                self.yang_name = "next-hop"
                                                self.yang_parent_name = "route-attr-list"

                                                self.afi = YLeaf(YType.enumeration, "afi")

                                                self.ipv4_address = YLeaf(YType.str, "ipv4-address")

                                                self.ipv6_address = YLeaf(YType.str, "ipv6-address")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("afi",
                                                                "ipv4_address",
                                                                "ipv6_address") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.RouteAttrList.NextHop, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.RouteAttrList.NextHop, self).__setattr__(name, value)

                                            def has_data(self):
                                                return (
                                                    self.afi.is_set or
                                                    self.ipv4_address.is_set or
                                                    self.ipv6_address.is_set)

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.afi.yfilter != YFilter.not_set or
                                                    self.ipv4_address.yfilter != YFilter.not_set or
                                                    self.ipv6_address.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "next-hop" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.afi.is_set or self.afi.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.afi.get_name_leafdata())
                                                if (self.ipv4_address.is_set or self.ipv4_address.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.ipv4_address.get_name_leafdata())
                                                if (self.ipv6_address.is_set or self.ipv6_address.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.ipv6_address.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "afi" or name == "ipv4-address" or name == "ipv6-address"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "afi"):
                                                    self.afi = value
                                                    self.afi.value_namespace = name_space
                                                    self.afi.value_namespace_prefix = name_space_prefix
                                                if(value_path == "ipv4-address"):
                                                    self.ipv4_address = value
                                                    self.ipv4_address.value_namespace = name_space
                                                    self.ipv4_address.value_namespace_prefix = name_space_prefix
                                                if(value_path == "ipv6-address"):
                                                    self.ipv6_address = value
                                                    self.ipv6_address.value_namespace = name_space
                                                    self.ipv6_address.value_namespace_prefix = name_space_prefix


                                        class AggregratorAttributes(Entity):
                                            """
                                            AggregatorList
                                            
                                            .. attribute:: address
                                            
                                            	IPv4 address
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: as4
                                            
                                            	AS4 number
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: as_
                                            
                                            	AS number
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-oc-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.RouteAttrList.AggregratorAttributes, self).__init__()

                                                self.yang_name = "aggregrator-attributes"
                                                self.yang_parent_name = "route-attr-list"

                                                self.address = YLeaf(YType.str, "address")

                                                self.as4 = YLeaf(YType.uint32, "as4")

                                                self.as_ = YLeaf(YType.uint32, "as")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("address",
                                                                "as4",
                                                                "as_") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.RouteAttrList.AggregratorAttributes, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.RouteAttrList.AggregratorAttributes, self).__setattr__(name, value)

                                            def has_data(self):
                                                return (
                                                    self.address.is_set or
                                                    self.as4.is_set or
                                                    self.as_.is_set)

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.address.yfilter != YFilter.not_set or
                                                    self.as4.yfilter != YFilter.not_set or
                                                    self.as_.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "aggregrator-attributes" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.address.is_set or self.address.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.address.get_name_leafdata())
                                                if (self.as4.is_set or self.as4.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.as4.get_name_leafdata())
                                                if (self.as_.is_set or self.as_.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.as_.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "address" or name == "as4" or name == "as"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "address"):
                                                    self.address = value
                                                    self.address.value_namespace = name_space
                                                    self.address.value_namespace_prefix = name_space_prefix
                                                if(value_path == "as4"):
                                                    self.as4 = value
                                                    self.as4.value_namespace = name_space
                                                    self.as4.value_namespace_prefix = name_space_prefix
                                                if(value_path == "as"):
                                                    self.as_ = value
                                                    self.as_.value_namespace = name_space
                                                    self.as_.value_namespace_prefix = name_space_prefix


                                        class Community(Entity):
                                            """
                                            CommunityArray
                                            
                                            .. attribute:: objects
                                            
                                            	BGP OC objects
                                            	**type**\:  str
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-oc-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.RouteAttrList.Community, self).__init__()

                                                self.yang_name = "community"
                                                self.yang_parent_name = "route-attr-list"

                                                self.objects = YLeaf(YType.str, "objects")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("objects") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.RouteAttrList.Community, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.RouteAttrList.Community, self).__setattr__(name, value)

                                            def has_data(self):
                                                return self.objects.is_set

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.objects.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "community" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.objects.is_set or self.objects.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.objects.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "objects"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "objects"):
                                                    self.objects = value
                                                    self.objects.value_namespace = name_space
                                                    self.objects.value_namespace_prefix = name_space_prefix

                                        def has_data(self):
                                            for c in self.community:
                                                if (c.has_data()):
                                                    return True
                                            return (
                                                self.as4_path.is_set or
                                                self.as_path.is_set or
                                                self.atomic_aggr.is_set or
                                                self.local_pref.is_set or
                                                self.med.is_set or
                                                self.origin_type.is_set or
                                                (self.aggregrator_attributes is not None and self.aggregrator_attributes.has_data()) or
                                                (self.next_hop is not None and self.next_hop.has_data()))

                                        def has_operation(self):
                                            for c in self.community:
                                                if (c.has_operation()):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.as4_path.yfilter != YFilter.not_set or
                                                self.as_path.yfilter != YFilter.not_set or
                                                self.atomic_aggr.yfilter != YFilter.not_set or
                                                self.local_pref.yfilter != YFilter.not_set or
                                                self.med.yfilter != YFilter.not_set or
                                                self.origin_type.yfilter != YFilter.not_set or
                                                (self.aggregrator_attributes is not None and self.aggregrator_attributes.has_operation()) or
                                                (self.next_hop is not None and self.next_hop.has_operation()))

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "route-attr-list" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.as4_path.is_set or self.as4_path.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.as4_path.get_name_leafdata())
                                            if (self.as_path.is_set or self.as_path.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.as_path.get_name_leafdata())
                                            if (self.atomic_aggr.is_set or self.atomic_aggr.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.atomic_aggr.get_name_leafdata())
                                            if (self.local_pref.is_set or self.local_pref.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.local_pref.get_name_leafdata())
                                            if (self.med.is_set or self.med.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.med.get_name_leafdata())
                                            if (self.origin_type.is_set or self.origin_type.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.origin_type.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            if (child_yang_name == "aggregrator-attributes"):
                                                if (self.aggregrator_attributes is None):
                                                    self.aggregrator_attributes = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.RouteAttrList.AggregratorAttributes()
                                                    self.aggregrator_attributes.parent = self
                                                    self._children_name_map["aggregrator_attributes"] = "aggregrator-attributes"
                                                return self.aggregrator_attributes

                                            if (child_yang_name == "community"):
                                                for c in self.community:
                                                    segment = c.get_segment_path()
                                                    if (segment_path == segment):
                                                        return c
                                                c = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.RouteAttrList.Community()
                                                c.parent = self
                                                local_reference_key = "ydk::seg::%s" % segment_path
                                                self._local_refs[local_reference_key] = c
                                                self.community.append(c)
                                                return c

                                            if (child_yang_name == "next-hop"):
                                                if (self.next_hop is None):
                                                    self.next_hop = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.RouteAttrList.NextHop()
                                                    self.next_hop.parent = self
                                                    self._children_name_map["next_hop"] = "next-hop"
                                                return self.next_hop

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "aggregrator-attributes" or name == "community" or name == "next-hop" or name == "as4-path" or name == "as-path" or name == "atomic-aggr" or name == "local-pref" or name == "med" or name == "origin-type"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "as4-path"):
                                                self.as4_path = value
                                                self.as4_path.value_namespace = name_space
                                                self.as4_path.value_namespace_prefix = name_space_prefix
                                            if(value_path == "as-path"):
                                                self.as_path = value
                                                self.as_path.value_namespace = name_space
                                                self.as_path.value_namespace_prefix = name_space_prefix
                                            if(value_path == "atomic-aggr"):
                                                self.atomic_aggr = value
                                                self.atomic_aggr.value_namespace = name_space
                                                self.atomic_aggr.value_namespace_prefix = name_space_prefix
                                            if(value_path == "local-pref"):
                                                self.local_pref = value
                                                self.local_pref.value_namespace = name_space
                                                self.local_pref.value_namespace_prefix = name_space_prefix
                                            if(value_path == "med"):
                                                self.med = value
                                                self.med.value_namespace = name_space
                                                self.med.value_namespace_prefix = name_space_prefix
                                            if(value_path == "origin-type"):
                                                self.origin_type = value
                                                self.origin_type.value_namespace = name_space
                                                self.origin_type.value_namespace_prefix = name_space_prefix


                                    class ExtAttributesList(Entity):
                                        """
                                        ExtAttributesList
                                        
                                        .. attribute:: aigp
                                        
                                        	AIGP
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: cluster
                                        
                                        	ClusterList
                                        	**type**\:  list of str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        .. attribute:: ext_community
                                        
                                        	ExtendedCommunityArray
                                        	**type**\: list of    :py:class:`ExtCommunity <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.ExtAttributesList.ExtCommunity>`
                                        
                                        .. attribute:: originator_id
                                        
                                        	OriginatorID
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        .. attribute:: path_id
                                        
                                        	PathId
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: unknown_attributes
                                        
                                        	UnknownAttributes
                                        	**type**\: list of    :py:class:`UnknownAttributes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.ExtAttributesList.UnknownAttributes>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-oc-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.ExtAttributesList, self).__init__()

                                            self.yang_name = "ext-attributes-list"
                                            self.yang_parent_name = "route"

                                            self.aigp = YLeaf(YType.uint64, "aigp")

                                            self.cluster = YLeafList(YType.str, "cluster")

                                            self.originator_id = YLeaf(YType.str, "originator-id")

                                            self.path_id = YLeaf(YType.uint32, "path-id")

                                            self.ext_community = YList(self)
                                            self.unknown_attributes = YList(self)

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("aigp",
                                                            "cluster",
                                                            "originator_id",
                                                            "path_id") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.ExtAttributesList, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.ExtAttributesList, self).__setattr__(name, value)


                                        class ExtCommunity(Entity):
                                            """
                                            ExtendedCommunityArray
                                            
                                            .. attribute:: objects
                                            
                                            	BGP OC objects
                                            	**type**\:  str
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-oc-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.ExtAttributesList.ExtCommunity, self).__init__()

                                                self.yang_name = "ext-community"
                                                self.yang_parent_name = "ext-attributes-list"

                                                self.objects = YLeaf(YType.str, "objects")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("objects") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.ExtAttributesList.ExtCommunity, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.ExtAttributesList.ExtCommunity, self).__setattr__(name, value)

                                            def has_data(self):
                                                return self.objects.is_set

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.objects.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "ext-community" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.objects.is_set or self.objects.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.objects.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "objects"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "objects"):
                                                    self.objects = value
                                                    self.objects.value_namespace = name_space
                                                    self.objects.value_namespace_prefix = name_space_prefix


                                        class UnknownAttributes(Entity):
                                            """
                                            UnknownAttributes
                                            
                                            .. attribute:: attribute_length
                                            
                                            	AttributeLength
                                            	**type**\:  int
                                            
                                            	**range:** 0..65535
                                            
                                            .. attribute:: attribute_type
                                            
                                            	AttributeType
                                            	**type**\:  int
                                            
                                            	**range:** 0..65535
                                            
                                            .. attribute:: attribute_value
                                            
                                            	Atributevalue
                                            	**type**\:  str
                                            
                                            	**pattern:** ([0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2})\*)?
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-oc-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.ExtAttributesList.UnknownAttributes, self).__init__()

                                                self.yang_name = "unknown-attributes"
                                                self.yang_parent_name = "ext-attributes-list"

                                                self.attribute_length = YLeaf(YType.uint16, "attribute-length")

                                                self.attribute_type = YLeaf(YType.uint16, "attribute-type")

                                                self.attribute_value = YLeaf(YType.str, "attribute-value")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("attribute_length",
                                                                "attribute_type",
                                                                "attribute_value") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.ExtAttributesList.UnknownAttributes, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.ExtAttributesList.UnknownAttributes, self).__setattr__(name, value)

                                            def has_data(self):
                                                return (
                                                    self.attribute_length.is_set or
                                                    self.attribute_type.is_set or
                                                    self.attribute_value.is_set)

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.attribute_length.yfilter != YFilter.not_set or
                                                    self.attribute_type.yfilter != YFilter.not_set or
                                                    self.attribute_value.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "unknown-attributes" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.attribute_length.is_set or self.attribute_length.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.attribute_length.get_name_leafdata())
                                                if (self.attribute_type.is_set or self.attribute_type.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.attribute_type.get_name_leafdata())
                                                if (self.attribute_value.is_set or self.attribute_value.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.attribute_value.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "attribute-length" or name == "attribute-type" or name == "attribute-value"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "attribute-length"):
                                                    self.attribute_length = value
                                                    self.attribute_length.value_namespace = name_space
                                                    self.attribute_length.value_namespace_prefix = name_space_prefix
                                                if(value_path == "attribute-type"):
                                                    self.attribute_type = value
                                                    self.attribute_type.value_namespace = name_space
                                                    self.attribute_type.value_namespace_prefix = name_space_prefix
                                                if(value_path == "attribute-value"):
                                                    self.attribute_value = value
                                                    self.attribute_value.value_namespace = name_space
                                                    self.attribute_value.value_namespace_prefix = name_space_prefix

                                        def has_data(self):
                                            for c in self.ext_community:
                                                if (c.has_data()):
                                                    return True
                                            for c in self.unknown_attributes:
                                                if (c.has_data()):
                                                    return True
                                            for leaf in self.cluster.getYLeafs():
                                                if (leaf.yfilter != YFilter.not_set):
                                                    return True
                                            return (
                                                self.aigp.is_set or
                                                self.originator_id.is_set or
                                                self.path_id.is_set)

                                        def has_operation(self):
                                            for c in self.ext_community:
                                                if (c.has_operation()):
                                                    return True
                                            for c in self.unknown_attributes:
                                                if (c.has_operation()):
                                                    return True
                                            for leaf in self.cluster.getYLeafs():
                                                if (leaf.is_set):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.aigp.yfilter != YFilter.not_set or
                                                self.cluster.yfilter != YFilter.not_set or
                                                self.originator_id.yfilter != YFilter.not_set or
                                                self.path_id.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "ext-attributes-list" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.aigp.is_set or self.aigp.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.aigp.get_name_leafdata())
                                            if (self.originator_id.is_set or self.originator_id.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.originator_id.get_name_leafdata())
                                            if (self.path_id.is_set or self.path_id.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.path_id.get_name_leafdata())

                                            leaf_name_data.extend(self.cluster.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            if (child_yang_name == "ext-community"):
                                                for c in self.ext_community:
                                                    segment = c.get_segment_path()
                                                    if (segment_path == segment):
                                                        return c
                                                c = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.ExtAttributesList.ExtCommunity()
                                                c.parent = self
                                                local_reference_key = "ydk::seg::%s" % segment_path
                                                self._local_refs[local_reference_key] = c
                                                self.ext_community.append(c)
                                                return c

                                            if (child_yang_name == "unknown-attributes"):
                                                for c in self.unknown_attributes:
                                                    segment = c.get_segment_path()
                                                    if (segment_path == segment):
                                                        return c
                                                c = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.ExtAttributesList.UnknownAttributes()
                                                c.parent = self
                                                local_reference_key = "ydk::seg::%s" % segment_path
                                                self._local_refs[local_reference_key] = c
                                                self.unknown_attributes.append(c)
                                                return c

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "ext-community" or name == "unknown-attributes" or name == "aigp" or name == "cluster" or name == "originator-id" or name == "path-id"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "aigp"):
                                                self.aigp = value
                                                self.aigp.value_namespace = name_space
                                                self.aigp.value_namespace_prefix = name_space_prefix
                                            if(value_path == "cluster"):
                                                self.cluster.append(value)
                                            if(value_path == "originator-id"):
                                                self.originator_id = value
                                                self.originator_id.value_namespace = name_space
                                                self.originator_id.value_namespace_prefix = name_space_prefix
                                            if(value_path == "path-id"):
                                                self.path_id = value
                                                self.path_id.value_namespace = name_space
                                                self.path_id.value_namespace_prefix = name_space_prefix


                                    class LastModifiedDate(Entity):
                                        """
                                        LastModifiedDate
                                        
                                        .. attribute:: time_value
                                        
                                        	TimeValue
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-oc-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.LastModifiedDate, self).__init__()

                                            self.yang_name = "last-modified-date"
                                            self.yang_parent_name = "route"

                                            self.time_value = YLeaf(YType.str, "time-value")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("time_value") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.LastModifiedDate, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.LastModifiedDate, self).__setattr__(name, value)

                                        def has_data(self):
                                            return self.time_value.is_set

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.time_value.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "last-modified-date" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.time_value.is_set or self.time_value.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.time_value.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "time-value"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "time-value"):
                                                self.time_value = value
                                                self.time_value.value_namespace = name_space
                                                self.time_value.value_namespace_prefix = name_space_prefix


                                    class LastUpdateRecieved(Entity):
                                        """
                                        LastUpdateRecieved
                                        
                                        .. attribute:: time_value
                                        
                                        	TimeValue
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-oc-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.LastUpdateRecieved, self).__init__()

                                            self.yang_name = "last-update-recieved"
                                            self.yang_parent_name = "route"

                                            self.time_value = YLeaf(YType.str, "time-value")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("time_value") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.LastUpdateRecieved, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.LastUpdateRecieved, self).__setattr__(name, value)

                                        def has_data(self):
                                            return self.time_value.is_set

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.time_value.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "last-update-recieved" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.time_value.is_set or self.time_value.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.time_value.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "time-value"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "time-value"):
                                                self.time_value = value
                                                self.time_value.value_namespace = name_space
                                                self.time_value.value_namespace_prefix = name_space_prefix

                                    def has_data(self):
                                        return (
                                            self.best_path.is_set or
                                            self.invalid_reason.is_set or
                                            self.neighbor_address.is_set or
                                            self.path_id.is_set or
                                            self.route.is_set or
                                            self.valid_route.is_set or
                                            (self.ext_attributes_list is not None and self.ext_attributes_list.has_data()) or
                                            (self.last_modified_date is not None and self.last_modified_date.has_data()) or
                                            (self.last_update_recieved is not None and self.last_update_recieved.has_data()) or
                                            (self.prefix_name is not None and self.prefix_name.has_data()) or
                                            (self.route_attr_list is not None and self.route_attr_list.has_data()))

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.best_path.yfilter != YFilter.not_set or
                                            self.invalid_reason.yfilter != YFilter.not_set or
                                            self.neighbor_address.yfilter != YFilter.not_set or
                                            self.path_id.yfilter != YFilter.not_set or
                                            self.route.yfilter != YFilter.not_set or
                                            self.valid_route.yfilter != YFilter.not_set or
                                            (self.ext_attributes_list is not None and self.ext_attributes_list.has_operation()) or
                                            (self.last_modified_date is not None and self.last_modified_date.has_operation()) or
                                            (self.last_update_recieved is not None and self.last_update_recieved.has_operation()) or
                                            (self.prefix_name is not None and self.prefix_name.has_operation()) or
                                            (self.route_attr_list is not None and self.route_attr_list.has_operation()))

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "route" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.best_path.is_set or self.best_path.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.best_path.get_name_leafdata())
                                        if (self.invalid_reason.is_set or self.invalid_reason.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.invalid_reason.get_name_leafdata())
                                        if (self.neighbor_address.is_set or self.neighbor_address.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.neighbor_address.get_name_leafdata())
                                        if (self.path_id.is_set or self.path_id.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.path_id.get_name_leafdata())
                                        if (self.route.is_set or self.route.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.route.get_name_leafdata())
                                        if (self.valid_route.is_set or self.valid_route.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.valid_route.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "ext-attributes-list"):
                                            if (self.ext_attributes_list is None):
                                                self.ext_attributes_list = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.ExtAttributesList()
                                                self.ext_attributes_list.parent = self
                                                self._children_name_map["ext_attributes_list"] = "ext-attributes-list"
                                            return self.ext_attributes_list

                                        if (child_yang_name == "last-modified-date"):
                                            if (self.last_modified_date is None):
                                                self.last_modified_date = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.LastModifiedDate()
                                                self.last_modified_date.parent = self
                                                self._children_name_map["last_modified_date"] = "last-modified-date"
                                            return self.last_modified_date

                                        if (child_yang_name == "last-update-recieved"):
                                            if (self.last_update_recieved is None):
                                                self.last_update_recieved = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.LastUpdateRecieved()
                                                self.last_update_recieved.parent = self
                                                self._children_name_map["last_update_recieved"] = "last-update-recieved"
                                            return self.last_update_recieved

                                        if (child_yang_name == "prefix-name"):
                                            if (self.prefix_name is None):
                                                self.prefix_name = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.PrefixName()
                                                self.prefix_name.parent = self
                                                self._children_name_map["prefix_name"] = "prefix-name"
                                            return self.prefix_name

                                        if (child_yang_name == "route-attr-list"):
                                            if (self.route_attr_list is None):
                                                self.route_attr_list = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route.RouteAttrList()
                                                self.route_attr_list.parent = self
                                                self._children_name_map["route_attr_list"] = "route-attr-list"
                                            return self.route_attr_list

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "ext-attributes-list" or name == "last-modified-date" or name == "last-update-recieved" or name == "prefix-name" or name == "route-attr-list" or name == "best-path" or name == "invalid-reason" or name == "neighbor-address" or name == "path-id" or name == "route" or name == "valid-route"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "best-path"):
                                            self.best_path = value
                                            self.best_path.value_namespace = name_space
                                            self.best_path.value_namespace_prefix = name_space_prefix
                                        if(value_path == "invalid-reason"):
                                            self.invalid_reason = value
                                            self.invalid_reason.value_namespace = name_space
                                            self.invalid_reason.value_namespace_prefix = name_space_prefix
                                        if(value_path == "neighbor-address"):
                                            self.neighbor_address = value
                                            self.neighbor_address.value_namespace = name_space
                                            self.neighbor_address.value_namespace_prefix = name_space_prefix
                                        if(value_path == "path-id"):
                                            self.path_id = value
                                            self.path_id.value_namespace = name_space
                                            self.path_id.value_namespace_prefix = name_space_prefix
                                        if(value_path == "route"):
                                            self.route = value
                                            self.route.value_namespace = name_space
                                            self.route.value_namespace_prefix = name_space_prefix
                                        if(value_path == "valid-route"):
                                            self.valid_route = value
                                            self.valid_route.value_namespace = name_space
                                            self.valid_route.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.route:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.route:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "routes" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "route"):
                                        for c in self.route:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes.Route()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.route.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "route"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class NumRoutes(Entity):
                                """
                                Number of routes in adjacency rib out\-bound
                                post\-policy table
                                
                                .. attribute:: num_routes
                                
                                	NumRoutes
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv4-bgp-oc-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.NumRoutes, self).__init__()

                                    self.yang_name = "num-routes"
                                    self.yang_parent_name = "adj-rib-out-pre"

                                    self.num_routes = YLeaf(YType.uint64, "num-routes")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("num_routes") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.NumRoutes, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.NumRoutes, self).__setattr__(name, value)

                                def has_data(self):
                                    return self.num_routes.is_set

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.num_routes.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "num-routes" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.num_routes.is_set or self.num_routes.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.num_routes.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "num-routes"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "num-routes"):
                                        self.num_routes = value
                                        self.num_routes.value_namespace = name_space
                                        self.num_routes.value_namespace_prefix = name_space_prefix

                            def has_data(self):
                                return (
                                    (self.num_routes is not None and self.num_routes.has_data()) or
                                    (self.routes is not None and self.routes.has_data()))

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    (self.num_routes is not None and self.num_routes.has_operation()) or
                                    (self.routes is not None and self.routes.has_operation()))

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "adj-rib-out-pre" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "num-routes"):
                                    if (self.num_routes is None):
                                        self.num_routes = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.NumRoutes()
                                        self.num_routes.parent = self
                                        self._children_name_map["num_routes"] = "num-routes"
                                    return self.num_routes

                                if (child_yang_name == "routes"):
                                    if (self.routes is None):
                                        self.routes = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre.Routes()
                                        self.routes.parent = self
                                        self._children_name_map["routes"] = "routes"
                                    return self.routes

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "num-routes" or name == "routes"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                pass


                        class AdjRibInPre(Entity):
                            """
                            Adjacency rib in\-bound pre\-policy table
                            
                            .. attribute:: num_routes
                            
                            	Number of routes in adjacency rib out\-bound post\-policy table
                            	**type**\:   :py:class:`NumRoutes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.NumRoutes>`
                            
                            .. attribute:: routes
                            
                            	routes table
                            	**type**\:   :py:class:`Routes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes>`
                            
                            

                            """

                            _prefix = 'ipv4-bgp-oc-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre, self).__init__()

                                self.yang_name = "adj-rib-in-pre"
                                self.yang_parent_name = "open-config-neighbor"

                                self.num_routes = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.NumRoutes()
                                self.num_routes.parent = self
                                self._children_name_map["num_routes"] = "num-routes"
                                self._children_yang_names.add("num-routes")

                                self.routes = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes()
                                self.routes.parent = self
                                self._children_name_map["routes"] = "routes"
                                self._children_yang_names.add("routes")


                            class Routes(Entity):
                                """
                                routes table
                                
                                .. attribute:: route
                                
                                	route entry
                                	**type**\: list of    :py:class:`Route <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route>`
                                
                                

                                """

                                _prefix = 'ipv4-bgp-oc-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes, self).__init__()

                                    self.yang_name = "routes"
                                    self.yang_parent_name = "adj-rib-in-pre"

                                    self.route = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes, self).__setattr__(name, value)


                                class Route(Entity):
                                    """
                                    route entry
                                    
                                    .. attribute:: best_path
                                    
                                    	BestPath
                                    	**type**\:  bool
                                    
                                    .. attribute:: ext_attributes_list
                                    
                                    	ExtAttributesList
                                    	**type**\:   :py:class:`ExtAttributesList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.ExtAttributesList>`
                                    
                                    .. attribute:: invalid_reason
                                    
                                    	IndentityRef
                                    	**type**\:   :py:class:`BgpOcInvalidRouteReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.BgpOcInvalidRouteReason>`
                                    
                                    .. attribute:: last_modified_date
                                    
                                    	LastModifiedDate
                                    	**type**\:   :py:class:`LastModifiedDate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.LastModifiedDate>`
                                    
                                    .. attribute:: last_update_recieved
                                    
                                    	LastUpdateRecieved
                                    	**type**\:   :py:class:`LastUpdateRecieved <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.LastUpdateRecieved>`
                                    
                                    .. attribute:: neighbor_address
                                    
                                    	Neighbor address
                                    	**type**\: one of the below types:
                                    
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    
                                    ----
                                    	**type**\:  str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    
                                    ----
                                    .. attribute:: path_id
                                    
                                    	Path ID
                                    	**type**\:  int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    .. attribute:: prefix_name
                                    
                                    	Prefix
                                    	**type**\:   :py:class:`PrefixName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.PrefixName>`
                                    
                                    .. attribute:: route
                                    
                                    	Network in prefix/length format
                                    	**type**\: one of the below types:
                                    
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                    
                                    
                                    ----
                                    	**type**\:  str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                    
                                    
                                    ----
                                    .. attribute:: route_attr_list
                                    
                                    	RouteAttributesList
                                    	**type**\:   :py:class:`RouteAttrList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.RouteAttrList>`
                                    
                                    .. attribute:: valid_route
                                    
                                    	ValidRoute
                                    	**type**\:  bool
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-oc-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route, self).__init__()

                                        self.yang_name = "route"
                                        self.yang_parent_name = "routes"

                                        self.best_path = YLeaf(YType.boolean, "best-path")

                                        self.invalid_reason = YLeaf(YType.enumeration, "invalid-reason")

                                        self.neighbor_address = YLeaf(YType.str, "neighbor-address")

                                        self.path_id = YLeaf(YType.int32, "path-id")

                                        self.route = YLeaf(YType.str, "route")

                                        self.valid_route = YLeaf(YType.boolean, "valid-route")

                                        self.ext_attributes_list = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.ExtAttributesList()
                                        self.ext_attributes_list.parent = self
                                        self._children_name_map["ext_attributes_list"] = "ext-attributes-list"
                                        self._children_yang_names.add("ext-attributes-list")

                                        self.last_modified_date = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.LastModifiedDate()
                                        self.last_modified_date.parent = self
                                        self._children_name_map["last_modified_date"] = "last-modified-date"
                                        self._children_yang_names.add("last-modified-date")

                                        self.last_update_recieved = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.LastUpdateRecieved()
                                        self.last_update_recieved.parent = self
                                        self._children_name_map["last_update_recieved"] = "last-update-recieved"
                                        self._children_yang_names.add("last-update-recieved")

                                        self.prefix_name = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.PrefixName()
                                        self.prefix_name.parent = self
                                        self._children_name_map["prefix_name"] = "prefix-name"
                                        self._children_yang_names.add("prefix-name")

                                        self.route_attr_list = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.RouteAttrList()
                                        self.route_attr_list.parent = self
                                        self._children_name_map["route_attr_list"] = "route-attr-list"
                                        self._children_yang_names.add("route-attr-list")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("best_path",
                                                        "invalid_reason",
                                                        "neighbor_address",
                                                        "path_id",
                                                        "route",
                                                        "valid_route") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route, self).__setattr__(name, value)


                                    class PrefixName(Entity):
                                        """
                                        Prefix
                                        
                                        .. attribute:: prefix
                                        
                                        	Prefix
                                        	**type**\:   :py:class:`Prefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.PrefixName.Prefix>`
                                        
                                        .. attribute:: prefix_length
                                        
                                        	Prefix length
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-oc-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.PrefixName, self).__init__()

                                            self.yang_name = "prefix-name"
                                            self.yang_parent_name = "route"

                                            self.prefix_length = YLeaf(YType.uint8, "prefix-length")

                                            self.prefix = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.PrefixName.Prefix()
                                            self.prefix.parent = self
                                            self._children_name_map["prefix"] = "prefix"
                                            self._children_yang_names.add("prefix")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("prefix_length") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.PrefixName, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.PrefixName, self).__setattr__(name, value)


                                        class Prefix(Entity):
                                            """
                                            Prefix
                                            
                                            .. attribute:: afi
                                            
                                            	AFI
                                            	**type**\:   :py:class:`BgpOcAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.BgpOcAfi>`
                                            
                                            .. attribute:: ipv4_address
                                            
                                            	IPv4 Addr
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: ipv6_address
                                            
                                            	IPv6 Addr
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-oc-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.PrefixName.Prefix, self).__init__()

                                                self.yang_name = "prefix"
                                                self.yang_parent_name = "prefix-name"

                                                self.afi = YLeaf(YType.enumeration, "afi")

                                                self.ipv4_address = YLeaf(YType.str, "ipv4-address")

                                                self.ipv6_address = YLeaf(YType.str, "ipv6-address")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("afi",
                                                                "ipv4_address",
                                                                "ipv6_address") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.PrefixName.Prefix, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.PrefixName.Prefix, self).__setattr__(name, value)

                                            def has_data(self):
                                                return (
                                                    self.afi.is_set or
                                                    self.ipv4_address.is_set or
                                                    self.ipv6_address.is_set)

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.afi.yfilter != YFilter.not_set or
                                                    self.ipv4_address.yfilter != YFilter.not_set or
                                                    self.ipv6_address.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "prefix" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.afi.is_set or self.afi.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.afi.get_name_leafdata())
                                                if (self.ipv4_address.is_set or self.ipv4_address.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.ipv4_address.get_name_leafdata())
                                                if (self.ipv6_address.is_set or self.ipv6_address.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.ipv6_address.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "afi" or name == "ipv4-address" or name == "ipv6-address"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "afi"):
                                                    self.afi = value
                                                    self.afi.value_namespace = name_space
                                                    self.afi.value_namespace_prefix = name_space_prefix
                                                if(value_path == "ipv4-address"):
                                                    self.ipv4_address = value
                                                    self.ipv4_address.value_namespace = name_space
                                                    self.ipv4_address.value_namespace_prefix = name_space_prefix
                                                if(value_path == "ipv6-address"):
                                                    self.ipv6_address = value
                                                    self.ipv6_address.value_namespace = name_space
                                                    self.ipv6_address.value_namespace_prefix = name_space_prefix

                                        def has_data(self):
                                            return (
                                                self.prefix_length.is_set or
                                                (self.prefix is not None and self.prefix.has_data()))

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.prefix_length.yfilter != YFilter.not_set or
                                                (self.prefix is not None and self.prefix.has_operation()))

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "prefix-name" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.prefix_length.is_set or self.prefix_length.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.prefix_length.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            if (child_yang_name == "prefix"):
                                                if (self.prefix is None):
                                                    self.prefix = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.PrefixName.Prefix()
                                                    self.prefix.parent = self
                                                    self._children_name_map["prefix"] = "prefix"
                                                return self.prefix

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "prefix" or name == "prefix-length"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "prefix-length"):
                                                self.prefix_length = value
                                                self.prefix_length.value_namespace = name_space
                                                self.prefix_length.value_namespace_prefix = name_space_prefix


                                    class RouteAttrList(Entity):
                                        """
                                        RouteAttributesList
                                        
                                        .. attribute:: aggregrator_attributes
                                        
                                        	AggregatorList
                                        	**type**\:   :py:class:`AggregratorAttributes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.RouteAttrList.AggregratorAttributes>`
                                        
                                        .. attribute:: as4_path
                                        
                                        	AS4 Path
                                        	**type**\:  str
                                        
                                        .. attribute:: as_path
                                        
                                        	AS Path
                                        	**type**\:  str
                                        
                                        .. attribute:: atomic_aggr
                                        
                                        	AtomicAggr
                                        	**type**\:  bool
                                        
                                        .. attribute:: community
                                        
                                        	CommunityArray
                                        	**type**\: list of    :py:class:`Community <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.RouteAttrList.Community>`
                                        
                                        .. attribute:: local_pref
                                        
                                        	LocalPref
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: med
                                        
                                        	Med
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: next_hop
                                        
                                        	NextHopAddress
                                        	**type**\:   :py:class:`NextHop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.RouteAttrList.NextHop>`
                                        
                                        .. attribute:: origin_type
                                        
                                        	Origin Attribute Type
                                        	**type**\:   :py:class:`BgpOcOriginAttr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.BgpOcOriginAttr>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-oc-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.RouteAttrList, self).__init__()

                                            self.yang_name = "route-attr-list"
                                            self.yang_parent_name = "route"

                                            self.as4_path = YLeaf(YType.str, "as4-path")

                                            self.as_path = YLeaf(YType.str, "as-path")

                                            self.atomic_aggr = YLeaf(YType.boolean, "atomic-aggr")

                                            self.local_pref = YLeaf(YType.uint32, "local-pref")

                                            self.med = YLeaf(YType.uint32, "med")

                                            self.origin_type = YLeaf(YType.enumeration, "origin-type")

                                            self.aggregrator_attributes = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.RouteAttrList.AggregratorAttributes()
                                            self.aggregrator_attributes.parent = self
                                            self._children_name_map["aggregrator_attributes"] = "aggregrator-attributes"
                                            self._children_yang_names.add("aggregrator-attributes")

                                            self.next_hop = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.RouteAttrList.NextHop()
                                            self.next_hop.parent = self
                                            self._children_name_map["next_hop"] = "next-hop"
                                            self._children_yang_names.add("next-hop")

                                            self.community = YList(self)

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("as4_path",
                                                            "as_path",
                                                            "atomic_aggr",
                                                            "local_pref",
                                                            "med",
                                                            "origin_type") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.RouteAttrList, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.RouteAttrList, self).__setattr__(name, value)


                                        class NextHop(Entity):
                                            """
                                            NextHopAddress
                                            
                                            .. attribute:: afi
                                            
                                            	AFI
                                            	**type**\:   :py:class:`BgpOcAfi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.BgpOcAfi>`
                                            
                                            .. attribute:: ipv4_address
                                            
                                            	IPv4 Addr
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: ipv6_address
                                            
                                            	IPv6 Addr
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-oc-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.RouteAttrList.NextHop, self).__init__()

                                                self.yang_name = "next-hop"
                                                self.yang_parent_name = "route-attr-list"

                                                self.afi = YLeaf(YType.enumeration, "afi")

                                                self.ipv4_address = YLeaf(YType.str, "ipv4-address")

                                                self.ipv6_address = YLeaf(YType.str, "ipv6-address")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("afi",
                                                                "ipv4_address",
                                                                "ipv6_address") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.RouteAttrList.NextHop, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.RouteAttrList.NextHop, self).__setattr__(name, value)

                                            def has_data(self):
                                                return (
                                                    self.afi.is_set or
                                                    self.ipv4_address.is_set or
                                                    self.ipv6_address.is_set)

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.afi.yfilter != YFilter.not_set or
                                                    self.ipv4_address.yfilter != YFilter.not_set or
                                                    self.ipv6_address.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "next-hop" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.afi.is_set or self.afi.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.afi.get_name_leafdata())
                                                if (self.ipv4_address.is_set or self.ipv4_address.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.ipv4_address.get_name_leafdata())
                                                if (self.ipv6_address.is_set or self.ipv6_address.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.ipv6_address.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "afi" or name == "ipv4-address" or name == "ipv6-address"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "afi"):
                                                    self.afi = value
                                                    self.afi.value_namespace = name_space
                                                    self.afi.value_namespace_prefix = name_space_prefix
                                                if(value_path == "ipv4-address"):
                                                    self.ipv4_address = value
                                                    self.ipv4_address.value_namespace = name_space
                                                    self.ipv4_address.value_namespace_prefix = name_space_prefix
                                                if(value_path == "ipv6-address"):
                                                    self.ipv6_address = value
                                                    self.ipv6_address.value_namespace = name_space
                                                    self.ipv6_address.value_namespace_prefix = name_space_prefix


                                        class AggregratorAttributes(Entity):
                                            """
                                            AggregatorList
                                            
                                            .. attribute:: address
                                            
                                            	IPv4 address
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: as4
                                            
                                            	AS4 number
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: as_
                                            
                                            	AS number
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-oc-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.RouteAttrList.AggregratorAttributes, self).__init__()

                                                self.yang_name = "aggregrator-attributes"
                                                self.yang_parent_name = "route-attr-list"

                                                self.address = YLeaf(YType.str, "address")

                                                self.as4 = YLeaf(YType.uint32, "as4")

                                                self.as_ = YLeaf(YType.uint32, "as")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("address",
                                                                "as4",
                                                                "as_") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.RouteAttrList.AggregratorAttributes, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.RouteAttrList.AggregratorAttributes, self).__setattr__(name, value)

                                            def has_data(self):
                                                return (
                                                    self.address.is_set or
                                                    self.as4.is_set or
                                                    self.as_.is_set)

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.address.yfilter != YFilter.not_set or
                                                    self.as4.yfilter != YFilter.not_set or
                                                    self.as_.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "aggregrator-attributes" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.address.is_set or self.address.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.address.get_name_leafdata())
                                                if (self.as4.is_set or self.as4.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.as4.get_name_leafdata())
                                                if (self.as_.is_set or self.as_.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.as_.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "address" or name == "as4" or name == "as"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "address"):
                                                    self.address = value
                                                    self.address.value_namespace = name_space
                                                    self.address.value_namespace_prefix = name_space_prefix
                                                if(value_path == "as4"):
                                                    self.as4 = value
                                                    self.as4.value_namespace = name_space
                                                    self.as4.value_namespace_prefix = name_space_prefix
                                                if(value_path == "as"):
                                                    self.as_ = value
                                                    self.as_.value_namespace = name_space
                                                    self.as_.value_namespace_prefix = name_space_prefix


                                        class Community(Entity):
                                            """
                                            CommunityArray
                                            
                                            .. attribute:: objects
                                            
                                            	BGP OC objects
                                            	**type**\:  str
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-oc-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.RouteAttrList.Community, self).__init__()

                                                self.yang_name = "community"
                                                self.yang_parent_name = "route-attr-list"

                                                self.objects = YLeaf(YType.str, "objects")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("objects") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.RouteAttrList.Community, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.RouteAttrList.Community, self).__setattr__(name, value)

                                            def has_data(self):
                                                return self.objects.is_set

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.objects.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "community" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.objects.is_set or self.objects.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.objects.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "objects"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "objects"):
                                                    self.objects = value
                                                    self.objects.value_namespace = name_space
                                                    self.objects.value_namespace_prefix = name_space_prefix

                                        def has_data(self):
                                            for c in self.community:
                                                if (c.has_data()):
                                                    return True
                                            return (
                                                self.as4_path.is_set or
                                                self.as_path.is_set or
                                                self.atomic_aggr.is_set or
                                                self.local_pref.is_set or
                                                self.med.is_set or
                                                self.origin_type.is_set or
                                                (self.aggregrator_attributes is not None and self.aggregrator_attributes.has_data()) or
                                                (self.next_hop is not None and self.next_hop.has_data()))

                                        def has_operation(self):
                                            for c in self.community:
                                                if (c.has_operation()):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.as4_path.yfilter != YFilter.not_set or
                                                self.as_path.yfilter != YFilter.not_set or
                                                self.atomic_aggr.yfilter != YFilter.not_set or
                                                self.local_pref.yfilter != YFilter.not_set or
                                                self.med.yfilter != YFilter.not_set or
                                                self.origin_type.yfilter != YFilter.not_set or
                                                (self.aggregrator_attributes is not None and self.aggregrator_attributes.has_operation()) or
                                                (self.next_hop is not None and self.next_hop.has_operation()))

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "route-attr-list" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.as4_path.is_set or self.as4_path.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.as4_path.get_name_leafdata())
                                            if (self.as_path.is_set or self.as_path.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.as_path.get_name_leafdata())
                                            if (self.atomic_aggr.is_set or self.atomic_aggr.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.atomic_aggr.get_name_leafdata())
                                            if (self.local_pref.is_set or self.local_pref.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.local_pref.get_name_leafdata())
                                            if (self.med.is_set or self.med.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.med.get_name_leafdata())
                                            if (self.origin_type.is_set or self.origin_type.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.origin_type.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            if (child_yang_name == "aggregrator-attributes"):
                                                if (self.aggregrator_attributes is None):
                                                    self.aggregrator_attributes = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.RouteAttrList.AggregratorAttributes()
                                                    self.aggregrator_attributes.parent = self
                                                    self._children_name_map["aggregrator_attributes"] = "aggregrator-attributes"
                                                return self.aggregrator_attributes

                                            if (child_yang_name == "community"):
                                                for c in self.community:
                                                    segment = c.get_segment_path()
                                                    if (segment_path == segment):
                                                        return c
                                                c = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.RouteAttrList.Community()
                                                c.parent = self
                                                local_reference_key = "ydk::seg::%s" % segment_path
                                                self._local_refs[local_reference_key] = c
                                                self.community.append(c)
                                                return c

                                            if (child_yang_name == "next-hop"):
                                                if (self.next_hop is None):
                                                    self.next_hop = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.RouteAttrList.NextHop()
                                                    self.next_hop.parent = self
                                                    self._children_name_map["next_hop"] = "next-hop"
                                                return self.next_hop

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "aggregrator-attributes" or name == "community" or name == "next-hop" or name == "as4-path" or name == "as-path" or name == "atomic-aggr" or name == "local-pref" or name == "med" or name == "origin-type"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "as4-path"):
                                                self.as4_path = value
                                                self.as4_path.value_namespace = name_space
                                                self.as4_path.value_namespace_prefix = name_space_prefix
                                            if(value_path == "as-path"):
                                                self.as_path = value
                                                self.as_path.value_namespace = name_space
                                                self.as_path.value_namespace_prefix = name_space_prefix
                                            if(value_path == "atomic-aggr"):
                                                self.atomic_aggr = value
                                                self.atomic_aggr.value_namespace = name_space
                                                self.atomic_aggr.value_namespace_prefix = name_space_prefix
                                            if(value_path == "local-pref"):
                                                self.local_pref = value
                                                self.local_pref.value_namespace = name_space
                                                self.local_pref.value_namespace_prefix = name_space_prefix
                                            if(value_path == "med"):
                                                self.med = value
                                                self.med.value_namespace = name_space
                                                self.med.value_namespace_prefix = name_space_prefix
                                            if(value_path == "origin-type"):
                                                self.origin_type = value
                                                self.origin_type.value_namespace = name_space
                                                self.origin_type.value_namespace_prefix = name_space_prefix


                                    class ExtAttributesList(Entity):
                                        """
                                        ExtAttributesList
                                        
                                        .. attribute:: aigp
                                        
                                        	AIGP
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: cluster
                                        
                                        	ClusterList
                                        	**type**\:  list of str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        .. attribute:: ext_community
                                        
                                        	ExtendedCommunityArray
                                        	**type**\: list of    :py:class:`ExtCommunity <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.ExtAttributesList.ExtCommunity>`
                                        
                                        .. attribute:: originator_id
                                        
                                        	OriginatorID
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        .. attribute:: path_id
                                        
                                        	PathId
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: unknown_attributes
                                        
                                        	UnknownAttributes
                                        	**type**\: list of    :py:class:`UnknownAttributes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_oc_oper.OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.ExtAttributesList.UnknownAttributes>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-oc-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.ExtAttributesList, self).__init__()

                                            self.yang_name = "ext-attributes-list"
                                            self.yang_parent_name = "route"

                                            self.aigp = YLeaf(YType.uint64, "aigp")

                                            self.cluster = YLeafList(YType.str, "cluster")

                                            self.originator_id = YLeaf(YType.str, "originator-id")

                                            self.path_id = YLeaf(YType.uint32, "path-id")

                                            self.ext_community = YList(self)
                                            self.unknown_attributes = YList(self)

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("aigp",
                                                            "cluster",
                                                            "originator_id",
                                                            "path_id") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.ExtAttributesList, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.ExtAttributesList, self).__setattr__(name, value)


                                        class ExtCommunity(Entity):
                                            """
                                            ExtendedCommunityArray
                                            
                                            .. attribute:: objects
                                            
                                            	BGP OC objects
                                            	**type**\:  str
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-oc-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.ExtAttributesList.ExtCommunity, self).__init__()

                                                self.yang_name = "ext-community"
                                                self.yang_parent_name = "ext-attributes-list"

                                                self.objects = YLeaf(YType.str, "objects")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("objects") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.ExtAttributesList.ExtCommunity, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.ExtAttributesList.ExtCommunity, self).__setattr__(name, value)

                                            def has_data(self):
                                                return self.objects.is_set

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.objects.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "ext-community" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.objects.is_set or self.objects.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.objects.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "objects"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "objects"):
                                                    self.objects = value
                                                    self.objects.value_namespace = name_space
                                                    self.objects.value_namespace_prefix = name_space_prefix


                                        class UnknownAttributes(Entity):
                                            """
                                            UnknownAttributes
                                            
                                            .. attribute:: attribute_length
                                            
                                            	AttributeLength
                                            	**type**\:  int
                                            
                                            	**range:** 0..65535
                                            
                                            .. attribute:: attribute_type
                                            
                                            	AttributeType
                                            	**type**\:  int
                                            
                                            	**range:** 0..65535
                                            
                                            .. attribute:: attribute_value
                                            
                                            	Atributevalue
                                            	**type**\:  str
                                            
                                            	**pattern:** ([0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2})\*)?
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-oc-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.ExtAttributesList.UnknownAttributes, self).__init__()

                                                self.yang_name = "unknown-attributes"
                                                self.yang_parent_name = "ext-attributes-list"

                                                self.attribute_length = YLeaf(YType.uint16, "attribute-length")

                                                self.attribute_type = YLeaf(YType.uint16, "attribute-type")

                                                self.attribute_value = YLeaf(YType.str, "attribute-value")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("attribute_length",
                                                                "attribute_type",
                                                                "attribute_value") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.ExtAttributesList.UnknownAttributes, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.ExtAttributesList.UnknownAttributes, self).__setattr__(name, value)

                                            def has_data(self):
                                                return (
                                                    self.attribute_length.is_set or
                                                    self.attribute_type.is_set or
                                                    self.attribute_value.is_set)

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.attribute_length.yfilter != YFilter.not_set or
                                                    self.attribute_type.yfilter != YFilter.not_set or
                                                    self.attribute_value.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "unknown-attributes" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.attribute_length.is_set or self.attribute_length.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.attribute_length.get_name_leafdata())
                                                if (self.attribute_type.is_set or self.attribute_type.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.attribute_type.get_name_leafdata())
                                                if (self.attribute_value.is_set or self.attribute_value.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.attribute_value.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "attribute-length" or name == "attribute-type" or name == "attribute-value"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "attribute-length"):
                                                    self.attribute_length = value
                                                    self.attribute_length.value_namespace = name_space
                                                    self.attribute_length.value_namespace_prefix = name_space_prefix
                                                if(value_path == "attribute-type"):
                                                    self.attribute_type = value
                                                    self.attribute_type.value_namespace = name_space
                                                    self.attribute_type.value_namespace_prefix = name_space_prefix
                                                if(value_path == "attribute-value"):
                                                    self.attribute_value = value
                                                    self.attribute_value.value_namespace = name_space
                                                    self.attribute_value.value_namespace_prefix = name_space_prefix

                                        def has_data(self):
                                            for c in self.ext_community:
                                                if (c.has_data()):
                                                    return True
                                            for c in self.unknown_attributes:
                                                if (c.has_data()):
                                                    return True
                                            for leaf in self.cluster.getYLeafs():
                                                if (leaf.yfilter != YFilter.not_set):
                                                    return True
                                            return (
                                                self.aigp.is_set or
                                                self.originator_id.is_set or
                                                self.path_id.is_set)

                                        def has_operation(self):
                                            for c in self.ext_community:
                                                if (c.has_operation()):
                                                    return True
                                            for c in self.unknown_attributes:
                                                if (c.has_operation()):
                                                    return True
                                            for leaf in self.cluster.getYLeafs():
                                                if (leaf.is_set):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.aigp.yfilter != YFilter.not_set or
                                                self.cluster.yfilter != YFilter.not_set or
                                                self.originator_id.yfilter != YFilter.not_set or
                                                self.path_id.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "ext-attributes-list" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.aigp.is_set or self.aigp.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.aigp.get_name_leafdata())
                                            if (self.originator_id.is_set or self.originator_id.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.originator_id.get_name_leafdata())
                                            if (self.path_id.is_set or self.path_id.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.path_id.get_name_leafdata())

                                            leaf_name_data.extend(self.cluster.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            if (child_yang_name == "ext-community"):
                                                for c in self.ext_community:
                                                    segment = c.get_segment_path()
                                                    if (segment_path == segment):
                                                        return c
                                                c = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.ExtAttributesList.ExtCommunity()
                                                c.parent = self
                                                local_reference_key = "ydk::seg::%s" % segment_path
                                                self._local_refs[local_reference_key] = c
                                                self.ext_community.append(c)
                                                return c

                                            if (child_yang_name == "unknown-attributes"):
                                                for c in self.unknown_attributes:
                                                    segment = c.get_segment_path()
                                                    if (segment_path == segment):
                                                        return c
                                                c = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.ExtAttributesList.UnknownAttributes()
                                                c.parent = self
                                                local_reference_key = "ydk::seg::%s" % segment_path
                                                self._local_refs[local_reference_key] = c
                                                self.unknown_attributes.append(c)
                                                return c

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "ext-community" or name == "unknown-attributes" or name == "aigp" or name == "cluster" or name == "originator-id" or name == "path-id"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "aigp"):
                                                self.aigp = value
                                                self.aigp.value_namespace = name_space
                                                self.aigp.value_namespace_prefix = name_space_prefix
                                            if(value_path == "cluster"):
                                                self.cluster.append(value)
                                            if(value_path == "originator-id"):
                                                self.originator_id = value
                                                self.originator_id.value_namespace = name_space
                                                self.originator_id.value_namespace_prefix = name_space_prefix
                                            if(value_path == "path-id"):
                                                self.path_id = value
                                                self.path_id.value_namespace = name_space
                                                self.path_id.value_namespace_prefix = name_space_prefix


                                    class LastModifiedDate(Entity):
                                        """
                                        LastModifiedDate
                                        
                                        .. attribute:: time_value
                                        
                                        	TimeValue
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-oc-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.LastModifiedDate, self).__init__()

                                            self.yang_name = "last-modified-date"
                                            self.yang_parent_name = "route"

                                            self.time_value = YLeaf(YType.str, "time-value")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("time_value") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.LastModifiedDate, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.LastModifiedDate, self).__setattr__(name, value)

                                        def has_data(self):
                                            return self.time_value.is_set

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.time_value.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "last-modified-date" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.time_value.is_set or self.time_value.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.time_value.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "time-value"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "time-value"):
                                                self.time_value = value
                                                self.time_value.value_namespace = name_space
                                                self.time_value.value_namespace_prefix = name_space_prefix


                                    class LastUpdateRecieved(Entity):
                                        """
                                        LastUpdateRecieved
                                        
                                        .. attribute:: time_value
                                        
                                        	TimeValue
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-oc-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.LastUpdateRecieved, self).__init__()

                                            self.yang_name = "last-update-recieved"
                                            self.yang_parent_name = "route"

                                            self.time_value = YLeaf(YType.str, "time-value")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("time_value") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.LastUpdateRecieved, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.LastUpdateRecieved, self).__setattr__(name, value)

                                        def has_data(self):
                                            return self.time_value.is_set

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.time_value.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "last-update-recieved" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.time_value.is_set or self.time_value.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.time_value.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "time-value"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "time-value"):
                                                self.time_value = value
                                                self.time_value.value_namespace = name_space
                                                self.time_value.value_namespace_prefix = name_space_prefix

                                    def has_data(self):
                                        return (
                                            self.best_path.is_set or
                                            self.invalid_reason.is_set or
                                            self.neighbor_address.is_set or
                                            self.path_id.is_set or
                                            self.route.is_set or
                                            self.valid_route.is_set or
                                            (self.ext_attributes_list is not None and self.ext_attributes_list.has_data()) or
                                            (self.last_modified_date is not None and self.last_modified_date.has_data()) or
                                            (self.last_update_recieved is not None and self.last_update_recieved.has_data()) or
                                            (self.prefix_name is not None and self.prefix_name.has_data()) or
                                            (self.route_attr_list is not None and self.route_attr_list.has_data()))

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.best_path.yfilter != YFilter.not_set or
                                            self.invalid_reason.yfilter != YFilter.not_set or
                                            self.neighbor_address.yfilter != YFilter.not_set or
                                            self.path_id.yfilter != YFilter.not_set or
                                            self.route.yfilter != YFilter.not_set or
                                            self.valid_route.yfilter != YFilter.not_set or
                                            (self.ext_attributes_list is not None and self.ext_attributes_list.has_operation()) or
                                            (self.last_modified_date is not None and self.last_modified_date.has_operation()) or
                                            (self.last_update_recieved is not None and self.last_update_recieved.has_operation()) or
                                            (self.prefix_name is not None and self.prefix_name.has_operation()) or
                                            (self.route_attr_list is not None and self.route_attr_list.has_operation()))

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "route" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.best_path.is_set or self.best_path.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.best_path.get_name_leafdata())
                                        if (self.invalid_reason.is_set or self.invalid_reason.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.invalid_reason.get_name_leafdata())
                                        if (self.neighbor_address.is_set or self.neighbor_address.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.neighbor_address.get_name_leafdata())
                                        if (self.path_id.is_set or self.path_id.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.path_id.get_name_leafdata())
                                        if (self.route.is_set or self.route.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.route.get_name_leafdata())
                                        if (self.valid_route.is_set or self.valid_route.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.valid_route.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "ext-attributes-list"):
                                            if (self.ext_attributes_list is None):
                                                self.ext_attributes_list = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.ExtAttributesList()
                                                self.ext_attributes_list.parent = self
                                                self._children_name_map["ext_attributes_list"] = "ext-attributes-list"
                                            return self.ext_attributes_list

                                        if (child_yang_name == "last-modified-date"):
                                            if (self.last_modified_date is None):
                                                self.last_modified_date = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.LastModifiedDate()
                                                self.last_modified_date.parent = self
                                                self._children_name_map["last_modified_date"] = "last-modified-date"
                                            return self.last_modified_date

                                        if (child_yang_name == "last-update-recieved"):
                                            if (self.last_update_recieved is None):
                                                self.last_update_recieved = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.LastUpdateRecieved()
                                                self.last_update_recieved.parent = self
                                                self._children_name_map["last_update_recieved"] = "last-update-recieved"
                                            return self.last_update_recieved

                                        if (child_yang_name == "prefix-name"):
                                            if (self.prefix_name is None):
                                                self.prefix_name = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.PrefixName()
                                                self.prefix_name.parent = self
                                                self._children_name_map["prefix_name"] = "prefix-name"
                                            return self.prefix_name

                                        if (child_yang_name == "route-attr-list"):
                                            if (self.route_attr_list is None):
                                                self.route_attr_list = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route.RouteAttrList()
                                                self.route_attr_list.parent = self
                                                self._children_name_map["route_attr_list"] = "route-attr-list"
                                            return self.route_attr_list

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "ext-attributes-list" or name == "last-modified-date" or name == "last-update-recieved" or name == "prefix-name" or name == "route-attr-list" or name == "best-path" or name == "invalid-reason" or name == "neighbor-address" or name == "path-id" or name == "route" or name == "valid-route"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "best-path"):
                                            self.best_path = value
                                            self.best_path.value_namespace = name_space
                                            self.best_path.value_namespace_prefix = name_space_prefix
                                        if(value_path == "invalid-reason"):
                                            self.invalid_reason = value
                                            self.invalid_reason.value_namespace = name_space
                                            self.invalid_reason.value_namespace_prefix = name_space_prefix
                                        if(value_path == "neighbor-address"):
                                            self.neighbor_address = value
                                            self.neighbor_address.value_namespace = name_space
                                            self.neighbor_address.value_namespace_prefix = name_space_prefix
                                        if(value_path == "path-id"):
                                            self.path_id = value
                                            self.path_id.value_namespace = name_space
                                            self.path_id.value_namespace_prefix = name_space_prefix
                                        if(value_path == "route"):
                                            self.route = value
                                            self.route.value_namespace = name_space
                                            self.route.value_namespace_prefix = name_space_prefix
                                        if(value_path == "valid-route"):
                                            self.valid_route = value
                                            self.valid_route.value_namespace = name_space
                                            self.valid_route.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.route:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.route:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "routes" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "route"):
                                        for c in self.route:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes.Route()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.route.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "route"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class NumRoutes(Entity):
                                """
                                Number of routes in adjacency rib out\-bound
                                post\-policy table
                                
                                .. attribute:: num_routes
                                
                                	NumRoutes
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv4-bgp-oc-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.NumRoutes, self).__init__()

                                    self.yang_name = "num-routes"
                                    self.yang_parent_name = "adj-rib-in-pre"

                                    self.num_routes = YLeaf(YType.uint64, "num-routes")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("num_routes") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.NumRoutes, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.NumRoutes, self).__setattr__(name, value)

                                def has_data(self):
                                    return self.num_routes.is_set

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.num_routes.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "num-routes" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.num_routes.is_set or self.num_routes.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.num_routes.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "num-routes"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "num-routes"):
                                        self.num_routes = value
                                        self.num_routes.value_namespace = name_space
                                        self.num_routes.value_namespace_prefix = name_space_prefix

                            def has_data(self):
                                return (
                                    (self.num_routes is not None and self.num_routes.has_data()) or
                                    (self.routes is not None and self.routes.has_data()))

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    (self.num_routes is not None and self.num_routes.has_operation()) or
                                    (self.routes is not None and self.routes.has_operation()))

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "adj-rib-in-pre" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "num-routes"):
                                    if (self.num_routes is None):
                                        self.num_routes = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.NumRoutes()
                                        self.num_routes.parent = self
                                        self._children_name_map["num_routes"] = "num-routes"
                                    return self.num_routes

                                if (child_yang_name == "routes"):
                                    if (self.routes is None):
                                        self.routes = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre.Routes()
                                        self.routes.parent = self
                                        self._children_name_map["routes"] = "routes"
                                    return self.routes

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "num-routes" or name == "routes"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                pass

                        def has_data(self):
                            return (
                                self.neighbor_address.is_set or
                                (self.adj_rib_in_post is not None and self.adj_rib_in_post.has_data()) or
                                (self.adj_rib_in_pre is not None and self.adj_rib_in_pre.has_data()) or
                                (self.adj_rib_out_post is not None and self.adj_rib_out_post.has_data()) or
                                (self.adj_rib_out_pre is not None and self.adj_rib_out_pre.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.neighbor_address.yfilter != YFilter.not_set or
                                (self.adj_rib_in_post is not None and self.adj_rib_in_post.has_operation()) or
                                (self.adj_rib_in_pre is not None and self.adj_rib_in_pre.has_operation()) or
                                (self.adj_rib_out_post is not None and self.adj_rib_out_post.has_operation()) or
                                (self.adj_rib_out_pre is not None and self.adj_rib_out_pre.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "open-config-neighbor" + "[neighbor-address='" + self.neighbor_address.get() + "']" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                path_buffer = "Cisco-IOS-XR-ipv4-bgp-oc-oper:oc-bgp/bgp-rib/afi-safi-table/ipv6-unicast/open-config-neighbors/%s" % self.get_segment_path()
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.neighbor_address.is_set or self.neighbor_address.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.neighbor_address.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "adj-rib-in-post"):
                                if (self.adj_rib_in_post is None):
                                    self.adj_rib_in_post = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPost()
                                    self.adj_rib_in_post.parent = self
                                    self._children_name_map["adj_rib_in_post"] = "adj-rib-in-post"
                                return self.adj_rib_in_post

                            if (child_yang_name == "adj-rib-in-pre"):
                                if (self.adj_rib_in_pre is None):
                                    self.adj_rib_in_pre = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibInPre()
                                    self.adj_rib_in_pre.parent = self
                                    self._children_name_map["adj_rib_in_pre"] = "adj-rib-in-pre"
                                return self.adj_rib_in_pre

                            if (child_yang_name == "adj-rib-out-post"):
                                if (self.adj_rib_out_post is None):
                                    self.adj_rib_out_post = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPost()
                                    self.adj_rib_out_post.parent = self
                                    self._children_name_map["adj_rib_out_post"] = "adj-rib-out-post"
                                return self.adj_rib_out_post

                            if (child_yang_name == "adj-rib-out-pre"):
                                if (self.adj_rib_out_pre is None):
                                    self.adj_rib_out_pre = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor.AdjRibOutPre()
                                    self.adj_rib_out_pre.parent = self
                                    self._children_name_map["adj_rib_out_pre"] = "adj-rib-out-pre"
                                return self.adj_rib_out_pre

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "adj-rib-in-post" or name == "adj-rib-in-pre" or name == "adj-rib-out-post" or name == "adj-rib-out-pre" or name == "neighbor-address"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "neighbor-address"):
                                self.neighbor_address = value
                                self.neighbor_address.value_namespace = name_space
                                self.neighbor_address.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.open_config_neighbor:
                            if (c.has_data()):
                                return True
                        return False

                    def has_operation(self):
                        for c in self.open_config_neighbor:
                            if (c.has_operation()):
                                return True
                        return self.yfilter != YFilter.not_set

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "open-config-neighbors" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-ipv4-bgp-oc-oper:oc-bgp/bgp-rib/afi-safi-table/ipv6-unicast/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "open-config-neighbor"):
                            for c in self.open_config_neighbor:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors.OpenConfigNeighbor()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.open_config_neighbor.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "open-config-neighbor"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass

                def has_data(self):
                    return (
                        (self.loc_rib is not None and self.loc_rib.has_data()) or
                        (self.open_config_neighbors is not None and self.open_config_neighbors.has_data()))

                def has_operation(self):
                    return (
                        self.yfilter != YFilter.not_set or
                        (self.loc_rib is not None and self.loc_rib.has_operation()) or
                        (self.open_config_neighbors is not None and self.open_config_neighbors.has_operation()))

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "ipv6-unicast" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-ipv4-bgp-oc-oper:oc-bgp/bgp-rib/afi-safi-table/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "loc-rib"):
                        if (self.loc_rib is None):
                            self.loc_rib = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.LocRib()
                            self.loc_rib.parent = self
                            self._children_name_map["loc_rib"] = "loc-rib"
                        return self.loc_rib

                    if (child_yang_name == "open-config-neighbors"):
                        if (self.open_config_neighbors is None):
                            self.open_config_neighbors = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast.OpenConfigNeighbors()
                            self.open_config_neighbors.parent = self
                            self._children_name_map["open_config_neighbors"] = "open-config-neighbors"
                        return self.open_config_neighbors

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "loc-rib" or name == "open-config-neighbors"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass

            def has_data(self):
                return (
                    (self.ipv4_unicast is not None and self.ipv4_unicast.has_data()) or
                    (self.ipv6_unicast is not None and self.ipv6_unicast.has_data()))

            def has_operation(self):
                return (
                    self.yfilter != YFilter.not_set or
                    (self.ipv4_unicast is not None and self.ipv4_unicast.has_operation()) or
                    (self.ipv6_unicast is not None and self.ipv6_unicast.has_operation()))

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "afi-safi-table" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-ipv4-bgp-oc-oper:oc-bgp/bgp-rib/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                if (child_yang_name == "ipv4-unicast"):
                    if (self.ipv4_unicast is None):
                        self.ipv4_unicast = OcBgp.BgpRib.AfiSafiTable.Ipv4Unicast()
                        self.ipv4_unicast.parent = self
                        self._children_name_map["ipv4_unicast"] = "ipv4-unicast"
                    return self.ipv4_unicast

                if (child_yang_name == "ipv6-unicast"):
                    if (self.ipv6_unicast is None):
                        self.ipv6_unicast = OcBgp.BgpRib.AfiSafiTable.Ipv6Unicast()
                        self.ipv6_unicast.parent = self
                        self._children_name_map["ipv6_unicast"] = "ipv6-unicast"
                    return self.ipv6_unicast

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "ipv4-unicast" or name == "ipv6-unicast"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                pass

        def has_data(self):
            return (self.afi_safi_table is not None and self.afi_safi_table.has_data())

        def has_operation(self):
            return (
                self.yfilter != YFilter.not_set or
                (self.afi_safi_table is not None and self.afi_safi_table.has_operation()))

        def get_segment_path(self):
            path_buffer = ""
            path_buffer = "bgp-rib" + path_buffer

            return path_buffer

        def get_entity_path(self, ancestor):
            path_buffer = ""
            if (ancestor is None):
                path_buffer = "Cisco-IOS-XR-ipv4-bgp-oc-oper:oc-bgp/%s" % self.get_segment_path()
            else:
                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

            leaf_name_data = LeafDataList()

            entity_path = EntityPath(path_buffer, leaf_name_data)
            return entity_path

        def get_child_by_name(self, child_yang_name, segment_path):
            child = self._get_child_by_seg_name([child_yang_name, segment_path])
            if child is not None:
                return child

            if (child_yang_name == "afi-safi-table"):
                if (self.afi_safi_table is None):
                    self.afi_safi_table = OcBgp.BgpRib.AfiSafiTable()
                    self.afi_safi_table.parent = self
                    self._children_name_map["afi_safi_table"] = "afi-safi-table"
                return self.afi_safi_table

            return None

        def has_leaf_or_child_of_name(self, name):
            if(name == "afi-safi-table"):
                return True
            return False

        def set_value(self, value_path, value, name_space, name_space_prefix):
            pass

    def has_data(self):
        return (self.bgp_rib is not None and self.bgp_rib.has_data())

    def has_operation(self):
        return (
            self.yfilter != YFilter.not_set or
            (self.bgp_rib is not None and self.bgp_rib.has_operation()))

    def get_segment_path(self):
        path_buffer = ""
        path_buffer = "Cisco-IOS-XR-ipv4-bgp-oc-oper:oc-bgp" + path_buffer

        return path_buffer

    def get_entity_path(self, ancestor):
        path_buffer = ""
        if (not ancestor is None):
            raise YPYModelError("ancestor has to be None for top-level node")

        path_buffer = self.get_segment_path()
        leaf_name_data = LeafDataList()

        entity_path = EntityPath(path_buffer, leaf_name_data)
        return entity_path

    def get_child_by_name(self, child_yang_name, segment_path):
        child = self._get_child_by_seg_name([child_yang_name, segment_path])
        if child is not None:
            return child

        if (child_yang_name == "bgp-rib"):
            if (self.bgp_rib is None):
                self.bgp_rib = OcBgp.BgpRib()
                self.bgp_rib.parent = self
                self._children_name_map["bgp_rib"] = "bgp-rib"
            return self.bgp_rib

        return None

    def has_leaf_or_child_of_name(self, name):
        if(name == "bgp-rib"):
            return True
        return False

    def set_value(self, value_path, value, name_space, name_space_prefix):
        pass

    def clone_ptr(self):
        self._top_entity = OcBgp()
        return self._top_entity

