""" CISCO_IETF_ISIS_MIB 

This document describes a management information base for
the IS\-IS Routing protocol, as described in ISO 10589,
when it is used to construct routing tables for IP networks,
as described in RFC 1195. This MIB is entirely based upon
the IETF draft draft\-ietf\-isis\-wg\-mib\-16.

"""
from collections import OrderedDict

from ydk.types import Entity, EntityPath, Identity, Enum, YType, YLeaf, YLeafList, YList, LeafDataList, Bits, Empty, Decimal64
from ydk.filters import YFilter
from ydk.errors import YError, YModelError
from ydk.errors.error_handler import handle_type_error as _handle_type_error



class CiiAdminState(Enum):
    """
    CiiAdminState (Enum Class)

    Type used in enabling and disabling a row.

    Values match those in RFC 2863.

    .. data:: on = 1

    .. data:: off = 2

    """

    on = Enum.YLeaf(1, "on")

    off = Enum.YLeaf(2, "off")


class CiiISLevel(Enum):
    """
    CiiISLevel (Enum Class)

    Identifies a level.

    .. data:: none = 0

    .. data:: area = 1

    .. data:: domain = 2

    """

    none = Enum.YLeaf(0, "none")

    area = Enum.YLeaf(1, "area")

    domain = Enum.YLeaf(2, "domain")


class CiiLevelState(Enum):
    """
    CiiLevelState (Enum Class)

    States of the IS\-IS protocol.

    .. data:: off = 1

    .. data:: on = 2

    .. data:: waiting = 3

    .. data:: overloaded = 4

    """

    off = Enum.YLeaf(1, "off")

    on = Enum.YLeaf(2, "on")

    waiting = Enum.YLeaf(3, "waiting")

    overloaded = Enum.YLeaf(4, "overloaded")


class CiiMetricStyle(Enum):
    """
    CiiMetricStyle (Enum Class)

    Do we use 1195 style Metrics or wide metrics.

    .. data:: narrow = 1

    .. data:: wide = 2

    .. data:: both = 3

    """

    narrow = Enum.YLeaf(1, "narrow")

    wide = Enum.YLeaf(2, "wide")

    both = Enum.YLeaf(3, "both")


class CiiMetricType(Enum):
    """
    CiiMetricType (Enum Class)

    Is this an Internal or External Metric?

    .. data:: internal = 1

    .. data:: external = 2

    """

    internal = Enum.YLeaf(1, "internal")

    external = Enum.YLeaf(2, "external")


class CiiSupportedProtocol(Enum):
    """
    CiiSupportedProtocol (Enum Class)

    Types of network protocol supported by Integrated IS\-IS.

    The values for ISO8473 and IP are those registered for

    these protocols in ISO TR9577.

    .. data:: iso8473 = 129

    .. data:: ipV6 = 142

    .. data:: ip = 204

    """

    iso8473 = Enum.YLeaf(129, "iso8473")

    ipV6 = Enum.YLeaf(142, "ipV6")

    ip = Enum.YLeaf(204, "ip")



class CISCOIETFISISMIB(Entity):
    """
    
    
    .. attribute:: ciisysobject
    
    	
    	**type**\:  :py:class:`CiiSysObject <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiSysObject>`
    
    	**config**\: False
    
    .. attribute:: ciicirc
    
    	
    	**type**\:  :py:class:`CiiCirc <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiCirc>`
    
    	**config**\: False
    
    .. attribute:: ciimanareaaddrtable
    
    	The set of manual area addresses configured on this Intermediate System
    	**type**\:  :py:class:`CiiManAreaAddrTable <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiManAreaAddrTable>`
    
    	**config**\: False
    
    .. attribute:: ciiareaaddrtable
    
    	The union of the sets of area addresses reported in all Level 1 LSPs with fragment number zero generated by this Intermediate System, or received from other Intermediate Systems which are reachable via Level 1 routing
    	**type**\:  :py:class:`CiiAreaAddrTable <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiAreaAddrTable>`
    
    	**config**\: False
    
    .. attribute:: ciisysprotsupptable
    
    	This table contains the manually configured set of protocols supported by this Intermediate System
    	**type**\:  :py:class:`CiiSysProtSuppTable <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiSysProtSuppTable>`
    
    	**config**\: False
    
    .. attribute:: ciisummaddrtable
    
    	The set of IP summary addresses to use in forming summary TLVs originated by this Intermediate System.  An administrator may use a summary address to combine and modify IP Reachability announcements.  If the Intermediate system can reach any subset of the summary address, the summary address will be announced instead, at the configured metric
    	**type**\:  :py:class:`CiiSummAddrTable <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiSummAddrTable>`
    
    	**config**\: False
    
    .. attribute:: ciiredistributeaddrtable
    
    	This table provides criteria to decide if a route should be leaked from L2 to L1 when Domain Wide Prefix leaking is enabled.  Addresses that match the summary mask in the table will be announced at L1 by routers when ciiSysL2toL1Leaking is enabled.  Routes that fall into the ranges specified are announced as is, without being summarized.  Routes that do not match a summary mask are not announced
    	**type**\:  :py:class:`CiiRedistributeAddrTable <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiRedistributeAddrTable>`
    
    	**config**\: False
    
    .. attribute:: ciiroutertable
    
    	The set of hostnames and router ID
    	**type**\:  :py:class:`CiiRouterTable <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiRouterTable>`
    
    	**config**\: False
    
    .. attribute:: ciisysleveltable
    
    	Level specific information about the System
    	**type**\:  :py:class:`CiiSysLevelTable <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiSysLevelTable>`
    
    	**config**\: False
    
    .. attribute:: ciicirctable
    
    	The table of circuits used by this Intermediate System
    	**type**\:  :py:class:`CiiCircTable <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiCircTable>`
    
    	**config**\: False
    
    .. attribute:: ciicircleveltable
    
    	Level specific information about circuits used by IS\-IS
    	**type**\:  :py:class:`CiiCircLevelTable <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiCircLevelTable>`
    
    	**config**\: False
    
    .. attribute:: ciisystemcountertable
    
    	System wide counters for this Intermediate System
    	**type**\:  :py:class:`CiiSystemCounterTable <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiSystemCounterTable>`
    
    	**config**\: False
    
    .. attribute:: ciicircuitcountertable
    
    	Circuit specific counters for this Intermediate System
    	**type**\:  :py:class:`CiiCircuitCounterTable <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiCircuitCounterTable>`
    
    	**config**\: False
    
    .. attribute:: ciipacketcountertable
    
    	Information about IS\-IS protocol traffic at one level on one circuit in one direction
    	**type**\:  :py:class:`CiiPacketCounterTable <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiPacketCounterTable>`
    
    	**config**\: False
    
    .. attribute:: ciiisadjtable
    
    	The table of adjacencies to Intermediate Systems
    	**type**\:  :py:class:`CiiISAdjTable <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiISAdjTable>`
    
    	**config**\: False
    
    .. attribute:: ciiisadjareaaddrtable
    
    	This table contains the set of Area Addresses of neighboring Intermediate Systems as reported in received IIH PDUs
    	**type**\:  :py:class:`CiiISAdjAreaAddrTable <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiISAdjAreaAddrTable>`
    
    	**config**\: False
    
    .. attribute:: ciiisadjipaddrtable
    
    	This table contains the set of IP Addresses of neighboring Intermediate Systems as reported in received IIH PDUs
    	**type**\:  :py:class:`CiiISAdjIPAddrTable <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiISAdjIPAddrTable>`
    
    	**config**\: False
    
    .. attribute:: ciiisadjprotsupptable
    
    	This table contains the set of protocols supported by neighboring Intermediate Systems as reported in received IIH PDUs
    	**type**\:  :py:class:`CiiISAdjProtSuppTable <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiISAdjProtSuppTable>`
    
    	**config**\: False
    
    .. attribute:: ciiratable
    
    	The table of Reachable Addresses to NSAPs or Address Prefixes
    	**type**\:  :py:class:`CiiRATable <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiRATable>`
    
    	**config**\: False
    
    .. attribute:: ciiipratable
    
    	The table of IP Reachable Addresses to networks, subnetworks or hosts either manually configured or learned from another protocol
    	**type**\:  :py:class:`CiiIPRATable <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiIPRATable>`
    
    	**config**\: False
    
    .. attribute:: ciilspsummarytable
    
    	The table of LSP Headers
    	**type**\:  :py:class:`CiiLSPSummaryTable <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiLSPSummaryTable>`
    
    	**config**\: False
    
    .. attribute:: ciilsptlvtable
    
    	The contents of each LSP
    	**type**\:  :py:class:`CiiLSPTLVTable <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiLSPTLVTable>`
    
    	**config**\: False
    
    

    """

    _prefix = 'CISCO-IETF-ISIS-MIB'
    _revision = '2005-08-16'

    def __init__(self):
        super(CISCOIETFISISMIB, self).__init__()
        self._top_entity = None

        self.yang_name = "CISCO-IETF-ISIS-MIB"
        self.yang_parent_name = "CISCO-IETF-ISIS-MIB"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([("ciiSysObject", ("ciisysobject", CISCOIETFISISMIB.CiiSysObject)), ("ciiCirc", ("ciicirc", CISCOIETFISISMIB.CiiCirc)), ("ciiManAreaAddrTable", ("ciimanareaaddrtable", CISCOIETFISISMIB.CiiManAreaAddrTable)), ("ciiAreaAddrTable", ("ciiareaaddrtable", CISCOIETFISISMIB.CiiAreaAddrTable)), ("ciiSysProtSuppTable", ("ciisysprotsupptable", CISCOIETFISISMIB.CiiSysProtSuppTable)), ("ciiSummAddrTable", ("ciisummaddrtable", CISCOIETFISISMIB.CiiSummAddrTable)), ("ciiRedistributeAddrTable", ("ciiredistributeaddrtable", CISCOIETFISISMIB.CiiRedistributeAddrTable)), ("ciiRouterTable", ("ciiroutertable", CISCOIETFISISMIB.CiiRouterTable)), ("ciiSysLevelTable", ("ciisysleveltable", CISCOIETFISISMIB.CiiSysLevelTable)), ("ciiCircTable", ("ciicirctable", CISCOIETFISISMIB.CiiCircTable)), ("ciiCircLevelTable", ("ciicircleveltable", CISCOIETFISISMIB.CiiCircLevelTable)), ("ciiSystemCounterTable", ("ciisystemcountertable", CISCOIETFISISMIB.CiiSystemCounterTable)), ("ciiCircuitCounterTable", ("ciicircuitcountertable", CISCOIETFISISMIB.CiiCircuitCounterTable)), ("ciiPacketCounterTable", ("ciipacketcountertable", CISCOIETFISISMIB.CiiPacketCounterTable)), ("ciiISAdjTable", ("ciiisadjtable", CISCOIETFISISMIB.CiiISAdjTable)), ("ciiISAdjAreaAddrTable", ("ciiisadjareaaddrtable", CISCOIETFISISMIB.CiiISAdjAreaAddrTable)), ("ciiISAdjIPAddrTable", ("ciiisadjipaddrtable", CISCOIETFISISMIB.CiiISAdjIPAddrTable)), ("ciiISAdjProtSuppTable", ("ciiisadjprotsupptable", CISCOIETFISISMIB.CiiISAdjProtSuppTable)), ("ciiRATable", ("ciiratable", CISCOIETFISISMIB.CiiRATable)), ("ciiIPRATable", ("ciiipratable", CISCOIETFISISMIB.CiiIPRATable)), ("ciiLSPSummaryTable", ("ciilspsummarytable", CISCOIETFISISMIB.CiiLSPSummaryTable)), ("ciiLSPTLVTable", ("ciilsptlvtable", CISCOIETFISISMIB.CiiLSPTLVTable))])
        self._leafs = OrderedDict()

        self.ciisysobject = CISCOIETFISISMIB.CiiSysObject()
        self.ciisysobject.parent = self
        self._children_name_map["ciisysobject"] = "ciiSysObject"

        self.ciicirc = CISCOIETFISISMIB.CiiCirc()
        self.ciicirc.parent = self
        self._children_name_map["ciicirc"] = "ciiCirc"

        self.ciimanareaaddrtable = CISCOIETFISISMIB.CiiManAreaAddrTable()
        self.ciimanareaaddrtable.parent = self
        self._children_name_map["ciimanareaaddrtable"] = "ciiManAreaAddrTable"

        self.ciiareaaddrtable = CISCOIETFISISMIB.CiiAreaAddrTable()
        self.ciiareaaddrtable.parent = self
        self._children_name_map["ciiareaaddrtable"] = "ciiAreaAddrTable"

        self.ciisysprotsupptable = CISCOIETFISISMIB.CiiSysProtSuppTable()
        self.ciisysprotsupptable.parent = self
        self._children_name_map["ciisysprotsupptable"] = "ciiSysProtSuppTable"

        self.ciisummaddrtable = CISCOIETFISISMIB.CiiSummAddrTable()
        self.ciisummaddrtable.parent = self
        self._children_name_map["ciisummaddrtable"] = "ciiSummAddrTable"

        self.ciiredistributeaddrtable = CISCOIETFISISMIB.CiiRedistributeAddrTable()
        self.ciiredistributeaddrtable.parent = self
        self._children_name_map["ciiredistributeaddrtable"] = "ciiRedistributeAddrTable"

        self.ciiroutertable = CISCOIETFISISMIB.CiiRouterTable()
        self.ciiroutertable.parent = self
        self._children_name_map["ciiroutertable"] = "ciiRouterTable"

        self.ciisysleveltable = CISCOIETFISISMIB.CiiSysLevelTable()
        self.ciisysleveltable.parent = self
        self._children_name_map["ciisysleveltable"] = "ciiSysLevelTable"

        self.ciicirctable = CISCOIETFISISMIB.CiiCircTable()
        self.ciicirctable.parent = self
        self._children_name_map["ciicirctable"] = "ciiCircTable"

        self.ciicircleveltable = CISCOIETFISISMIB.CiiCircLevelTable()
        self.ciicircleveltable.parent = self
        self._children_name_map["ciicircleveltable"] = "ciiCircLevelTable"

        self.ciisystemcountertable = CISCOIETFISISMIB.CiiSystemCounterTable()
        self.ciisystemcountertable.parent = self
        self._children_name_map["ciisystemcountertable"] = "ciiSystemCounterTable"

        self.ciicircuitcountertable = CISCOIETFISISMIB.CiiCircuitCounterTable()
        self.ciicircuitcountertable.parent = self
        self._children_name_map["ciicircuitcountertable"] = "ciiCircuitCounterTable"

        self.ciipacketcountertable = CISCOIETFISISMIB.CiiPacketCounterTable()
        self.ciipacketcountertable.parent = self
        self._children_name_map["ciipacketcountertable"] = "ciiPacketCounterTable"

        self.ciiisadjtable = CISCOIETFISISMIB.CiiISAdjTable()
        self.ciiisadjtable.parent = self
        self._children_name_map["ciiisadjtable"] = "ciiISAdjTable"

        self.ciiisadjareaaddrtable = CISCOIETFISISMIB.CiiISAdjAreaAddrTable()
        self.ciiisadjareaaddrtable.parent = self
        self._children_name_map["ciiisadjareaaddrtable"] = "ciiISAdjAreaAddrTable"

        self.ciiisadjipaddrtable = CISCOIETFISISMIB.CiiISAdjIPAddrTable()
        self.ciiisadjipaddrtable.parent = self
        self._children_name_map["ciiisadjipaddrtable"] = "ciiISAdjIPAddrTable"

        self.ciiisadjprotsupptable = CISCOIETFISISMIB.CiiISAdjProtSuppTable()
        self.ciiisadjprotsupptable.parent = self
        self._children_name_map["ciiisadjprotsupptable"] = "ciiISAdjProtSuppTable"

        self.ciiratable = CISCOIETFISISMIB.CiiRATable()
        self.ciiratable.parent = self
        self._children_name_map["ciiratable"] = "ciiRATable"

        self.ciiipratable = CISCOIETFISISMIB.CiiIPRATable()
        self.ciiipratable.parent = self
        self._children_name_map["ciiipratable"] = "ciiIPRATable"

        self.ciilspsummarytable = CISCOIETFISISMIB.CiiLSPSummaryTable()
        self.ciilspsummarytable.parent = self
        self._children_name_map["ciilspsummarytable"] = "ciiLSPSummaryTable"

        self.ciilsptlvtable = CISCOIETFISISMIB.CiiLSPTLVTable()
        self.ciilsptlvtable.parent = self
        self._children_name_map["ciilsptlvtable"] = "ciiLSPTLVTable"
        self._segment_path = lambda: "CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB"
        self._is_frozen = True

    def __setattr__(self, name, value):
        self._perform_setattr(CISCOIETFISISMIB, [], name, value)


    class CiiSysObject(Entity):
        """
        
        
        .. attribute:: ciisysversion
        
        	The version number of the IS\-IS protocol that is implemented
        	**type**\:  :py:class:`CiiSysVersion <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiSysObject.CiiSysVersion>`
        
        	**config**\: False
        
        .. attribute:: ciisystype
        
        	At which levels is the Intermediate System running? This object follows the replaceOnlyWhileDisabled behavior
        	**type**\:  :py:class:`CiiSysType <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiSysObject.CiiSysType>`
        
        	**config**\: False
        
        .. attribute:: ciisysid
        
        	The ID for this Intermediate System. This value is appended to each of the area addresses to form the Network Entity Titles. The derivation of a value for this object is implementation\-specific.  Some implementations may automatically assign values and not permit an SNMP write, while others may require the value to be set manually
        	**type**\: str
        
        	**length:** 6..6
        
        	**config**\: False
        
        .. attribute:: ciisysmaxpathsplits
        
        	Maximum number of paths with equal routing metric value which it is permitted to split between. This object follows the replaceOnlyWhileDisabled behavior
        	**type**\: int
        
        	**range:** 1..32
        
        	**config**\: False
        
        .. attribute:: ciisysmaxlspgenint
        
        	Maximum interval, in seconds, between generated LSPs by this Intermediate System. This object follows the resettingTimer behavior.  The value must be greater than any value configured for ciiSysLevelMinLSPGenInt, and should be at least 300 seconds less than ciiSysMaxAge
        	**type**\: int
        
        	**range:** 1..65235
        
        	**config**\: False
        
        	**units**\: seconds
        
        .. attribute:: ciisyspolleshellorate
        
        	The value, in seconds, to be used for the suggested ES configuration timer in ISH PDUs when soliciting the ES configuration
        	**type**\: int
        
        	**range:** 0..65535
        
        	**config**\: False
        
        	**units**\: seconds
        
        .. attribute:: ciisyswaittime
        
        	Number of seconds to delay in 'waiting' state before entering 'on' state. This object follows the resettingTimer behavior
        	**type**\: int
        
        	**range:** 1..65535
        
        	**config**\: False
        
        	**units**\: seconds
        
        .. attribute:: ciisysadminstate
        
        	The administrative state of this Intermediate System.  Setting this object to the value 'on' when its current value is 'off' enables the Intermediate System
        	**type**\:  :py:class:`CiiAdminState <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CiiAdminState>`
        
        	**config**\: False
        
        .. attribute:: ciisysl2tol1leaking
        
        	If true, allow the router to leak L2 routes into L1
        	**type**\: bool
        
        	**config**\: False
        
        .. attribute:: ciisysmaxage
        
        	Value to place in RemainingLifeTime field of the LSPs we generate. This should be at least 300 seconds greater than ciiSysMaxLSPGenInt
        	**type**\: int
        
        	**range:** 350..65535
        
        	**config**\: False
        
        	**units**\: seconds
        
        .. attribute:: ciisysreceivelspbuffersize
        
        	Size of the largest Buffer we are designed or configured to store.  This should be at least as big as the maximum ciiSysLevelOrigLSPBuffSize supported by the system.  If resources allow, we will store and flood LSPs larger than ciiSysReceiveLSPBufferSize, as this can help avoid problems in networks with different values for ciiSysLevelOrigLSPBuffSize
        	**type**\: int
        
        	**range:** 1492..16000
        
        	**config**\: False
        
        	**units**\: bytes
        
        

        """

        _prefix = 'CISCO-IETF-ISIS-MIB'
        _revision = '2005-08-16'

        def __init__(self):
            super(CISCOIETFISISMIB.CiiSysObject, self).__init__()

            self.yang_name = "ciiSysObject"
            self.yang_parent_name = "CISCO-IETF-ISIS-MIB"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('ciisysversion', (YLeaf(YType.enumeration, 'ciiSysVersion'), [('ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB', 'CISCOIETFISISMIB', 'CiiSysObject.CiiSysVersion')])),
                ('ciisystype', (YLeaf(YType.enumeration, 'ciiSysType'), [('ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB', 'CISCOIETFISISMIB', 'CiiSysObject.CiiSysType')])),
                ('ciisysid', (YLeaf(YType.str, 'ciiSysID'), ['str'])),
                ('ciisysmaxpathsplits', (YLeaf(YType.int32, 'ciiSysMaxPathSplits'), ['int'])),
                ('ciisysmaxlspgenint', (YLeaf(YType.int32, 'ciiSysMaxLSPGenInt'), ['int'])),
                ('ciisyspolleshellorate', (YLeaf(YType.uint32, 'ciiSysPollESHelloRate'), ['int'])),
                ('ciisyswaittime', (YLeaf(YType.uint32, 'ciiSysWaitTime'), ['int'])),
                ('ciisysadminstate', (YLeaf(YType.enumeration, 'ciiSysAdminState'), [('ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB', 'CiiAdminState', '')])),
                ('ciisysl2tol1leaking', (YLeaf(YType.boolean, 'ciiSysL2toL1Leaking'), ['bool'])),
                ('ciisysmaxage', (YLeaf(YType.uint32, 'ciiSysMaxAge'), ['int'])),
                ('ciisysreceivelspbuffersize', (YLeaf(YType.uint32, 'ciiSysReceiveLSPBufferSize'), ['int'])),
            ])
            self.ciisysversion = None
            self.ciisystype = None
            self.ciisysid = None
            self.ciisysmaxpathsplits = None
            self.ciisysmaxlspgenint = None
            self.ciisyspolleshellorate = None
            self.ciisyswaittime = None
            self.ciisysadminstate = None
            self.ciisysl2tol1leaking = None
            self.ciisysmaxage = None
            self.ciisysreceivelspbuffersize = None
            self._segment_path = lambda: "ciiSysObject"
            self._absolute_path = lambda: "CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(CISCOIETFISISMIB.CiiSysObject, ['ciisysversion', 'ciisystype', 'ciisysid', 'ciisysmaxpathsplits', 'ciisysmaxlspgenint', 'ciisyspolleshellorate', 'ciisyswaittime', 'ciisysadminstate', 'ciisysl2tol1leaking', 'ciisysmaxage', 'ciisysreceivelspbuffersize'], name, value)

        class CiiSysType(Enum):
            """
            CiiSysType (Enum Class)

            At which levels is the Intermediate System

            running? This object follows the

            replaceOnlyWhileDisabled behavior.

            .. data:: level1IS = 1

            .. data:: level2IS = 2

            .. data:: level1L2IS = 3

            """

            level1IS = Enum.YLeaf(1, "level1IS")

            level2IS = Enum.YLeaf(2, "level2IS")

            level1L2IS = Enum.YLeaf(3, "level1L2IS")


        class CiiSysVersion(Enum):
            """
            CiiSysVersion (Enum Class)

            The version number of the IS\-IS protocol that

            is implemented.

            .. data:: unknown = 0

            .. data:: one = 1

            """

            unknown = Enum.YLeaf(0, "unknown")

            one = Enum.YLeaf(1, "one")




    class CiiCirc(Entity):
        """
        
        
        .. attribute:: ciinextcircindex
        
        	This object is used to assign values to ciiCircIndex as described in 'Textual Conventions for SNMPv2'.  The network manager reads this object, and then writes the value back as the ciiCircIndex in a SET that creates a new instance of ciiCircEntry.  If the SET fails with the code 'inconsistentValue', then the process must be repeated; If the SET succeeds, then the object is incremented, and the new ciiCircEntry is created according to the manager's directions
        	**type**\: int
        
        	**range:** 0..4294967295
        
        	**config**\: False
        
        

        """

        _prefix = 'CISCO-IETF-ISIS-MIB'
        _revision = '2005-08-16'

        def __init__(self):
            super(CISCOIETFISISMIB.CiiCirc, self).__init__()

            self.yang_name = "ciiCirc"
            self.yang_parent_name = "CISCO-IETF-ISIS-MIB"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('ciinextcircindex', (YLeaf(YType.uint32, 'ciiNextCircIndex'), ['int'])),
            ])
            self.ciinextcircindex = None
            self._segment_path = lambda: "ciiCirc"
            self._absolute_path = lambda: "CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(CISCOIETFISISMIB.CiiCirc, ['ciinextcircindex'], name, value)



    class CiiManAreaAddrTable(Entity):
        """
        The set of manual area addresses configured on this
        Intermediate System.
        
        .. attribute:: ciimanareaaddrentry
        
        	Each entry contains one area address manually configured on this system
        	**type**\: list of  		 :py:class:`CiiManAreaAddrEntry <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiManAreaAddrTable.CiiManAreaAddrEntry>`
        
        	**config**\: False
        
        

        """

        _prefix = 'CISCO-IETF-ISIS-MIB'
        _revision = '2005-08-16'

        def __init__(self):
            super(CISCOIETFISISMIB.CiiManAreaAddrTable, self).__init__()

            self.yang_name = "ciiManAreaAddrTable"
            self.yang_parent_name = "CISCO-IETF-ISIS-MIB"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([("ciiManAreaAddrEntry", ("ciimanareaaddrentry", CISCOIETFISISMIB.CiiManAreaAddrTable.CiiManAreaAddrEntry))])
            self._leafs = OrderedDict()

            self.ciimanareaaddrentry = YList(self)
            self._segment_path = lambda: "ciiManAreaAddrTable"
            self._absolute_path = lambda: "CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(CISCOIETFISISMIB.CiiManAreaAddrTable, [], name, value)


        class CiiManAreaAddrEntry(Entity):
            """
            Each entry contains one area address manually configured
            on this system
            
            .. attribute:: ciimanareaaddr  (key)
            
            	A manually configured area address for this system. This object follows the index behavior.  Note\: an index for the entry {1, {49.0001} active} in this table would be the ordered pair (1, (0x03 0x49 0x00 0x01)), as the length of an Octet string is part of the OID
            	**type**\: str
            
            	**length:** 0..20
            
            	**config**\: False
            
            .. attribute:: ciimanareaaddrexiststate
            
            	The state of the ciiManAreaAddrEntry. This object follows the Row Status behavior. If the ciiSysAdminState for this Intermediate System is 'on', and an attempt is made to set this object to the value 'destroy' or 'notInService' when this is the only ciiManAreaAddrEntry in state 'active' for this Intermediate System should return inconsistentValue
            	**type**\:  :py:class:`RowStatus <ydk.models.cisco_ios_xe.SNMPv2_TC.RowStatus>`
            
            	**config**\: False
            
            

            """

            _prefix = 'CISCO-IETF-ISIS-MIB'
            _revision = '2005-08-16'

            def __init__(self):
                super(CISCOIETFISISMIB.CiiManAreaAddrTable.CiiManAreaAddrEntry, self).__init__()

                self.yang_name = "ciiManAreaAddrEntry"
                self.yang_parent_name = "ciiManAreaAddrTable"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['ciimanareaaddr']
                self._child_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('ciimanareaaddr', (YLeaf(YType.str, 'ciiManAreaAddr'), ['str'])),
                    ('ciimanareaaddrexiststate', (YLeaf(YType.enumeration, 'ciiManAreaAddrExistState'), [('ydk.models.cisco_ios_xe.SNMPv2_TC', 'RowStatus', '')])),
                ])
                self.ciimanareaaddr = None
                self.ciimanareaaddrexiststate = None
                self._segment_path = lambda: "ciiManAreaAddrEntry" + "[ciiManAreaAddr='" + str(self.ciimanareaaddr) + "']"
                self._absolute_path = lambda: "CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/ciiManAreaAddrTable/%s" % self._segment_path()
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(CISCOIETFISISMIB.CiiManAreaAddrTable.CiiManAreaAddrEntry, ['ciimanareaaddr', 'ciimanareaaddrexiststate'], name, value)




    class CiiAreaAddrTable(Entity):
        """
        The union of the sets of area addresses reported in all
        Level 1 LSPs with fragment number zero generated by this
        Intermediate System, or received from other Intermediate
        Systems which are reachable via Level 1 routing.
        
        .. attribute:: ciiareaaddrentry
        
        	Each entry contains one area address reported in a Level 1 LSP generated or received by this Intermediate System
        	**type**\: list of  		 :py:class:`CiiAreaAddrEntry <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiAreaAddrTable.CiiAreaAddrEntry>`
        
        	**config**\: False
        
        

        """

        _prefix = 'CISCO-IETF-ISIS-MIB'
        _revision = '2005-08-16'

        def __init__(self):
            super(CISCOIETFISISMIB.CiiAreaAddrTable, self).__init__()

            self.yang_name = "ciiAreaAddrTable"
            self.yang_parent_name = "CISCO-IETF-ISIS-MIB"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([("ciiAreaAddrEntry", ("ciiareaaddrentry", CISCOIETFISISMIB.CiiAreaAddrTable.CiiAreaAddrEntry))])
            self._leafs = OrderedDict()

            self.ciiareaaddrentry = YList(self)
            self._segment_path = lambda: "ciiAreaAddrTable"
            self._absolute_path = lambda: "CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(CISCOIETFISISMIB.CiiAreaAddrTable, [], name, value)


        class CiiAreaAddrEntry(Entity):
            """
            Each entry contains one area address reported in a
            Level 1 LSP generated or received by this Intermediate
            System.
            
            .. attribute:: ciiareaaddr  (key)
            
            	An area address reported in a Level 1 LSP
            	**type**\: str
            
            	**length:** 0..20
            
            	**config**\: False
            
            

            """

            _prefix = 'CISCO-IETF-ISIS-MIB'
            _revision = '2005-08-16'

            def __init__(self):
                super(CISCOIETFISISMIB.CiiAreaAddrTable.CiiAreaAddrEntry, self).__init__()

                self.yang_name = "ciiAreaAddrEntry"
                self.yang_parent_name = "ciiAreaAddrTable"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['ciiareaaddr']
                self._child_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('ciiareaaddr', (YLeaf(YType.str, 'ciiAreaAddr'), ['str'])),
                ])
                self.ciiareaaddr = None
                self._segment_path = lambda: "ciiAreaAddrEntry" + "[ciiAreaAddr='" + str(self.ciiareaaddr) + "']"
                self._absolute_path = lambda: "CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/ciiAreaAddrTable/%s" % self._segment_path()
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(CISCOIETFISISMIB.CiiAreaAddrTable.CiiAreaAddrEntry, ['ciiareaaddr'], name, value)




    class CiiSysProtSuppTable(Entity):
        """
        This table contains the manually configured set of
        protocols supported by this Intermediate System.
        
        .. attribute:: ciisysprotsuppentry
        
        	Each entry contains one protocol supported by this Intermediate System
        	**type**\: list of  		 :py:class:`CiiSysProtSuppEntry <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiSysProtSuppTable.CiiSysProtSuppEntry>`
        
        	**config**\: False
        
        

        """

        _prefix = 'CISCO-IETF-ISIS-MIB'
        _revision = '2005-08-16'

        def __init__(self):
            super(CISCOIETFISISMIB.CiiSysProtSuppTable, self).__init__()

            self.yang_name = "ciiSysProtSuppTable"
            self.yang_parent_name = "CISCO-IETF-ISIS-MIB"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([("ciiSysProtSuppEntry", ("ciisysprotsuppentry", CISCOIETFISISMIB.CiiSysProtSuppTable.CiiSysProtSuppEntry))])
            self._leafs = OrderedDict()

            self.ciisysprotsuppentry = YList(self)
            self._segment_path = lambda: "ciiSysProtSuppTable"
            self._absolute_path = lambda: "CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(CISCOIETFISISMIB.CiiSysProtSuppTable, [], name, value)


        class CiiSysProtSuppEntry(Entity):
            """
            Each entry contains one protocol supported by
            this Intermediate System.
            
            .. attribute:: ciisysprotsuppprotocol  (key)
            
            	One supported protocol. This object follows the index behavior
            	**type**\:  :py:class:`CiiSupportedProtocol <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CiiSupportedProtocol>`
            
            	**config**\: False
            
            .. attribute:: ciisysprotsuppexiststate
            
            	The state of the ciiSysProtSuppEntry. This object follows the RowStatus behavior
            	**type**\:  :py:class:`RowStatus <ydk.models.cisco_ios_xe.SNMPv2_TC.RowStatus>`
            
            	**config**\: False
            
            

            """

            _prefix = 'CISCO-IETF-ISIS-MIB'
            _revision = '2005-08-16'

            def __init__(self):
                super(CISCOIETFISISMIB.CiiSysProtSuppTable.CiiSysProtSuppEntry, self).__init__()

                self.yang_name = "ciiSysProtSuppEntry"
                self.yang_parent_name = "ciiSysProtSuppTable"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['ciisysprotsuppprotocol']
                self._child_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('ciisysprotsuppprotocol', (YLeaf(YType.enumeration, 'ciiSysProtSuppProtocol'), [('ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB', 'CiiSupportedProtocol', '')])),
                    ('ciisysprotsuppexiststate', (YLeaf(YType.enumeration, 'ciiSysProtSuppExistState'), [('ydk.models.cisco_ios_xe.SNMPv2_TC', 'RowStatus', '')])),
                ])
                self.ciisysprotsuppprotocol = None
                self.ciisysprotsuppexiststate = None
                self._segment_path = lambda: "ciiSysProtSuppEntry" + "[ciiSysProtSuppProtocol='" + str(self.ciisysprotsuppprotocol) + "']"
                self._absolute_path = lambda: "CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/ciiSysProtSuppTable/%s" % self._segment_path()
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(CISCOIETFISISMIB.CiiSysProtSuppTable.CiiSysProtSuppEntry, ['ciisysprotsuppprotocol', 'ciisysprotsuppexiststate'], name, value)




    class CiiSummAddrTable(Entity):
        """
        The set of IP summary addresses to use in forming
        summary TLVs originated by this Intermediate System.
        
        An administrator may use a summary address to combine
        and modify IP Reachability announcements.  If the
        Intermediate system can reach any subset of the summary
        address, the summary address will be announced instead,
        at the configured metric.
        
        .. attribute:: ciisummaddrentry
        
        	Each entry contains one IP summary address
        	**type**\: list of  		 :py:class:`CiiSummAddrEntry <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiSummAddrTable.CiiSummAddrEntry>`
        
        	**config**\: False
        
        

        """

        _prefix = 'CISCO-IETF-ISIS-MIB'
        _revision = '2005-08-16'

        def __init__(self):
            super(CISCOIETFISISMIB.CiiSummAddrTable, self).__init__()

            self.yang_name = "ciiSummAddrTable"
            self.yang_parent_name = "CISCO-IETF-ISIS-MIB"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([("ciiSummAddrEntry", ("ciisummaddrentry", CISCOIETFISISMIB.CiiSummAddrTable.CiiSummAddrEntry))])
            self._leafs = OrderedDict()

            self.ciisummaddrentry = YList(self)
            self._segment_path = lambda: "ciiSummAddrTable"
            self._absolute_path = lambda: "CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(CISCOIETFISISMIB.CiiSummAddrTable, [], name, value)


        class CiiSummAddrEntry(Entity):
            """
            Each entry contains one IP summary address.
            
            .. attribute:: ciisummaddresstype  (key)
            
            	The Type of IP address for this summary address. This object follows the index behavior
            	**type**\:  :py:class:`InetAddressType <ydk.models.cisco_ios_xe.INET_ADDRESS_MIB.InetAddressType>`
            
            	**config**\: False
            
            .. attribute:: ciisummaddress  (key)
            
            	The IP Address value for this summary address. This object follows the index behavior
            	**type**\: str
            
            	**length:** 4..4 \| 16..16
            
            	**config**\: False
            
            .. attribute:: ciisummaddrprefixlen  (key)
            
            	The Length of the IP NetMask for this summary address
            	**type**\: int
            
            	**range:** 0..128
            
            	**config**\: False
            
            .. attribute:: ciisummaddrexiststate
            
            	The existence state of this summary address. This object follows the row status behavior
            	**type**\:  :py:class:`RowStatus <ydk.models.cisco_ios_xe.SNMPv2_TC.RowStatus>`
            
            	**config**\: False
            
            .. attribute:: ciisummaddrmetric
            
            	The metric value to announce this summary address with in LSPs generated by this system
            	**type**\: int
            
            	**range:** 0..63
            
            	**config**\: False
            
            .. attribute:: ciisummaddrfullmetric
            
            	The wide metric value to announce this summary address with in LSPs generated by this system
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**config**\: False
            
            

            """

            _prefix = 'CISCO-IETF-ISIS-MIB'
            _revision = '2005-08-16'

            def __init__(self):
                super(CISCOIETFISISMIB.CiiSummAddrTable.CiiSummAddrEntry, self).__init__()

                self.yang_name = "ciiSummAddrEntry"
                self.yang_parent_name = "ciiSummAddrTable"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['ciisummaddresstype','ciisummaddress','ciisummaddrprefixlen']
                self._child_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('ciisummaddresstype', (YLeaf(YType.enumeration, 'ciiSummAddressType'), [('ydk.models.cisco_ios_xe.INET_ADDRESS_MIB', 'InetAddressType', '')])),
                    ('ciisummaddress', (YLeaf(YType.str, 'ciiSummAddress'), ['str'])),
                    ('ciisummaddrprefixlen', (YLeaf(YType.uint32, 'ciiSummAddrPrefixLen'), ['int'])),
                    ('ciisummaddrexiststate', (YLeaf(YType.enumeration, 'ciiSummAddrExistState'), [('ydk.models.cisco_ios_xe.SNMPv2_TC', 'RowStatus', '')])),
                    ('ciisummaddrmetric', (YLeaf(YType.int32, 'ciiSummAddrMetric'), ['int'])),
                    ('ciisummaddrfullmetric', (YLeaf(YType.uint32, 'ciiSummAddrFullMetric'), ['int'])),
                ])
                self.ciisummaddresstype = None
                self.ciisummaddress = None
                self.ciisummaddrprefixlen = None
                self.ciisummaddrexiststate = None
                self.ciisummaddrmetric = None
                self.ciisummaddrfullmetric = None
                self._segment_path = lambda: "ciiSummAddrEntry" + "[ciiSummAddressType='" + str(self.ciisummaddresstype) + "']" + "[ciiSummAddress='" + str(self.ciisummaddress) + "']" + "[ciiSummAddrPrefixLen='" + str(self.ciisummaddrprefixlen) + "']"
                self._absolute_path = lambda: "CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/ciiSummAddrTable/%s" % self._segment_path()
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(CISCOIETFISISMIB.CiiSummAddrTable.CiiSummAddrEntry, ['ciisummaddresstype', 'ciisummaddress', 'ciisummaddrprefixlen', 'ciisummaddrexiststate', 'ciisummaddrmetric', 'ciisummaddrfullmetric'], name, value)




    class CiiRedistributeAddrTable(Entity):
        """
        This table provides criteria to decide if a route should
        be leaked from L2 to L1 when Domain Wide Prefix leaking is
        enabled.
        
        Addresses that match the summary mask in the table will
        be announced at L1 by routers when ciiSysL2toL1Leaking
        is enabled.  Routes that fall into the ranges specified
        are announced as is, without being summarized.  Routes
        that do not match a summary mask are not announced.
        
        .. attribute:: ciiredistributeaddrentry
        
        	Each entry contains one IP summary address to manage leaking L2 addresses into L1
        	**type**\: list of  		 :py:class:`CiiRedistributeAddrEntry <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiRedistributeAddrTable.CiiRedistributeAddrEntry>`
        
        	**config**\: False
        
        

        """

        _prefix = 'CISCO-IETF-ISIS-MIB'
        _revision = '2005-08-16'

        def __init__(self):
            super(CISCOIETFISISMIB.CiiRedistributeAddrTable, self).__init__()

            self.yang_name = "ciiRedistributeAddrTable"
            self.yang_parent_name = "CISCO-IETF-ISIS-MIB"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([("ciiRedistributeAddrEntry", ("ciiredistributeaddrentry", CISCOIETFISISMIB.CiiRedistributeAddrTable.CiiRedistributeAddrEntry))])
            self._leafs = OrderedDict()

            self.ciiredistributeaddrentry = YList(self)
            self._segment_path = lambda: "ciiRedistributeAddrTable"
            self._absolute_path = lambda: "CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(CISCOIETFISISMIB.CiiRedistributeAddrTable, [], name, value)


        class CiiRedistributeAddrEntry(Entity):
            """
            Each entry contains one IP summary address to
            manage leaking L2 addresses into L1.
            
            .. attribute:: ciiredistributeaddrtype  (key)
            
            	The Type of IP address for this summary address. This object follows the index behavior
            	**type**\:  :py:class:`InetAddressType <ydk.models.cisco_ios_xe.INET_ADDRESS_MIB.InetAddressType>`
            
            	**config**\: False
            
            .. attribute:: ciiredistributeaddraddress  (key)
            
            	The IP Address value for this summary address. This object follows the index behavior
            	**type**\: str
            
            	**length:** 4..4 \| 16..16
            
            	**config**\: False
            
            .. attribute:: ciiredistributeaddrprefixlen  (key)
            
            	The Length of the IP NetMask for this summary address
            	**type**\: int
            
            	**range:** 0..128
            
            	**config**\: False
            
            .. attribute:: ciiredistributeaddrexiststate
            
            	The existence state of this summary address. This object follows the row status behavior
            	**type**\:  :py:class:`RowStatus <ydk.models.cisco_ios_xe.SNMPv2_TC.RowStatus>`
            
            	**config**\: False
            
            

            """

            _prefix = 'CISCO-IETF-ISIS-MIB'
            _revision = '2005-08-16'

            def __init__(self):
                super(CISCOIETFISISMIB.CiiRedistributeAddrTable.CiiRedistributeAddrEntry, self).__init__()

                self.yang_name = "ciiRedistributeAddrEntry"
                self.yang_parent_name = "ciiRedistributeAddrTable"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['ciiredistributeaddrtype','ciiredistributeaddraddress','ciiredistributeaddrprefixlen']
                self._child_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('ciiredistributeaddrtype', (YLeaf(YType.enumeration, 'ciiRedistributeAddrType'), [('ydk.models.cisco_ios_xe.INET_ADDRESS_MIB', 'InetAddressType', '')])),
                    ('ciiredistributeaddraddress', (YLeaf(YType.str, 'ciiRedistributeAddrAddress'), ['str'])),
                    ('ciiredistributeaddrprefixlen', (YLeaf(YType.uint32, 'ciiRedistributeAddrPrefixLen'), ['int'])),
                    ('ciiredistributeaddrexiststate', (YLeaf(YType.enumeration, 'ciiRedistributeAddrExistState'), [('ydk.models.cisco_ios_xe.SNMPv2_TC', 'RowStatus', '')])),
                ])
                self.ciiredistributeaddrtype = None
                self.ciiredistributeaddraddress = None
                self.ciiredistributeaddrprefixlen = None
                self.ciiredistributeaddrexiststate = None
                self._segment_path = lambda: "ciiRedistributeAddrEntry" + "[ciiRedistributeAddrType='" + str(self.ciiredistributeaddrtype) + "']" + "[ciiRedistributeAddrAddress='" + str(self.ciiredistributeaddraddress) + "']" + "[ciiRedistributeAddrPrefixLen='" + str(self.ciiredistributeaddrprefixlen) + "']"
                self._absolute_path = lambda: "CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/ciiRedistributeAddrTable/%s" % self._segment_path()
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(CISCOIETFISISMIB.CiiRedistributeAddrTable.CiiRedistributeAddrEntry, ['ciiredistributeaddrtype', 'ciiredistributeaddraddress', 'ciiredistributeaddrprefixlen', 'ciiredistributeaddrexiststate'], name, value)




    class CiiRouterTable(Entity):
        """
        The set of hostnames and router ID.
        
        .. attribute:: ciirouterentry
        
        	Each entry tracks information about one peer at one level
        	**type**\: list of  		 :py:class:`CiiRouterEntry <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiRouterTable.CiiRouterEntry>`
        
        	**config**\: False
        
        

        """

        _prefix = 'CISCO-IETF-ISIS-MIB'
        _revision = '2005-08-16'

        def __init__(self):
            super(CISCOIETFISISMIB.CiiRouterTable, self).__init__()

            self.yang_name = "ciiRouterTable"
            self.yang_parent_name = "CISCO-IETF-ISIS-MIB"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([("ciiRouterEntry", ("ciirouterentry", CISCOIETFISISMIB.CiiRouterTable.CiiRouterEntry))])
            self._leafs = OrderedDict()

            self.ciirouterentry = YList(self)
            self._segment_path = lambda: "ciiRouterTable"
            self._absolute_path = lambda: "CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(CISCOIETFISISMIB.CiiRouterTable, [], name, value)


        class CiiRouterEntry(Entity):
            """
            Each entry tracks information about one peer at
            one level.
            
            .. attribute:: ciiroutersysid  (key)
            
            	The System ID of the Router Peer
            	**type**\: str
            
            	**length:** 6..6
            
            	**config**\: False
            
            .. attribute:: ciirouterlevel  (key)
            
            	The level of this Intermediate System
            	**type**\:  :py:class:`CiiISLevel <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CiiISLevel>`
            
            	**config**\: False
            
            .. attribute:: ciirouterhostname
            
            	The hostname listed in LSP, or zero\-length string if none
            	**type**\: str
            
            	**config**\: False
            
            .. attribute:: ciirouterid
            
            	The Router ID of the Peer found in LSP, or zero if none
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**config**\: False
            
            

            """

            _prefix = 'CISCO-IETF-ISIS-MIB'
            _revision = '2005-08-16'

            def __init__(self):
                super(CISCOIETFISISMIB.CiiRouterTable.CiiRouterEntry, self).__init__()

                self.yang_name = "ciiRouterEntry"
                self.yang_parent_name = "ciiRouterTable"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['ciiroutersysid','ciirouterlevel']
                self._child_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('ciiroutersysid', (YLeaf(YType.str, 'ciiRouterSysID'), ['str'])),
                    ('ciirouterlevel', (YLeaf(YType.enumeration, 'ciiRouterLevel'), [('ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB', 'CiiISLevel', '')])),
                    ('ciirouterhostname', (YLeaf(YType.str, 'ciiRouterHostName'), ['str'])),
                    ('ciirouterid', (YLeaf(YType.uint32, 'ciiRouterID'), ['int'])),
                ])
                self.ciiroutersysid = None
                self.ciirouterlevel = None
                self.ciirouterhostname = None
                self.ciirouterid = None
                self._segment_path = lambda: "ciiRouterEntry" + "[ciiRouterSysID='" + str(self.ciiroutersysid) + "']" + "[ciiRouterLevel='" + str(self.ciirouterlevel) + "']"
                self._absolute_path = lambda: "CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/ciiRouterTable/%s" % self._segment_path()
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(CISCOIETFISISMIB.CiiRouterTable.CiiRouterEntry, ['ciiroutersysid', 'ciirouterlevel', 'ciirouterhostname', 'ciirouterid'], name, value)




    class CiiSysLevelTable(Entity):
        """
        Level specific information about the System.
        
        .. attribute:: ciisyslevelentry
        
        	Describe variables defined for Area or Domain
        	**type**\: list of  		 :py:class:`CiiSysLevelEntry <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiSysLevelTable.CiiSysLevelEntry>`
        
        	**config**\: False
        
        

        """

        _prefix = 'CISCO-IETF-ISIS-MIB'
        _revision = '2005-08-16'

        def __init__(self):
            super(CISCOIETFISISMIB.CiiSysLevelTable, self).__init__()

            self.yang_name = "ciiSysLevelTable"
            self.yang_parent_name = "CISCO-IETF-ISIS-MIB"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([("ciiSysLevelEntry", ("ciisyslevelentry", CISCOIETFISISMIB.CiiSysLevelTable.CiiSysLevelEntry))])
            self._leafs = OrderedDict()

            self.ciisyslevelentry = YList(self)
            self._segment_path = lambda: "ciiSysLevelTable"
            self._absolute_path = lambda: "CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(CISCOIETFISISMIB.CiiSysLevelTable, [], name, value)


        class CiiSysLevelEntry(Entity):
            """
            Describe variables defined for Area or Domain.
            
            .. attribute:: ciisyslevelindex  (key)
            
            	The level that this entry describes
            	**type**\:  :py:class:`CiiSysLevelIndex <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiSysLevelTable.CiiSysLevelEntry.CiiSysLevelIndex>`
            
            	**config**\: False
            
            .. attribute:: ciisysleveloriglspbuffsize
            
            	The maximum size of LSPs and SNPs originated by this Intermediate System at this level. This object follows the replaceOnlyWhileDisabled behavior
            	**type**\: int
            
            	**range:** 512..16000
            
            	**config**\: False
            
            .. attribute:: ciisyslevelminlspgenint
            
            	Minimum interval, in seconds, between successive generation of LSPs with the same LSPID at this level by this Intermediate System.  This object follows the resettingTimer behavior
            	**type**\: int
            
            	**range:** 1..65535
            
            	**config**\: False
            
            	**units**\: seconds
            
            .. attribute:: ciisysleveloverloadstate
            
            	The state of the database at this level. The value 'off' indicates that IS\-IS is not active at this level. The value 'on' indicates that IS\-IS is active at this level, and not overloaded. The value 'waiting' indicates a database that is low on an essential resource, such as memory. The administrator may force the state to 'overloaded' by setting the object ciiSysLevelSetOverload. If the state is 'waiting' or 'overloaded', we originate LSPs with the Overload bit set
            	**type**\:  :py:class:`CiiLevelState <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CiiLevelState>`
            
            	**config**\: False
            
            .. attribute:: ciisyslevelsetoverload
            
            	Administratively set the overload bit for the level. The overload bit will continue to be set if the implementation runs out of memory, independent of this variable
            	**type**\: bool
            
            	**config**\: False
            
            .. attribute:: ciisyslevelsetoverloaduntil
            
            	If set, the overload bit should be set, and cleared after sysUpTime exceeds this value
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**config**\: False
            
            .. attribute:: ciisyslevelmetricstyle
            
            	Which style of Metric do we generate in our LSPs at this level? This object follows the replaceOnlyWhileDisabled behavior
            	**type**\:  :py:class:`CiiMetricStyle <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CiiMetricStyle>`
            
            	**config**\: False
            
            .. attribute:: ciisyslevelspfconsiders
            
            	Which style of Metric do we consider in our SPF computation at this level?
            	**type**\:  :py:class:`CiiMetricStyle <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CiiMetricStyle>`
            
            	**config**\: False
            
            .. attribute:: ciisyslevelteenabled
            
            	Do we do Traffic Engineering at this level?
            	**type**\: bool
            
            	**config**\: False
            
            

            """

            _prefix = 'CISCO-IETF-ISIS-MIB'
            _revision = '2005-08-16'

            def __init__(self):
                super(CISCOIETFISISMIB.CiiSysLevelTable.CiiSysLevelEntry, self).__init__()

                self.yang_name = "ciiSysLevelEntry"
                self.yang_parent_name = "ciiSysLevelTable"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['ciisyslevelindex']
                self._child_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('ciisyslevelindex', (YLeaf(YType.enumeration, 'ciiSysLevelIndex'), [('ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB', 'CISCOIETFISISMIB', 'CiiSysLevelTable.CiiSysLevelEntry.CiiSysLevelIndex')])),
                    ('ciisysleveloriglspbuffsize', (YLeaf(YType.int32, 'ciiSysLevelOrigLSPBuffSize'), ['int'])),
                    ('ciisyslevelminlspgenint', (YLeaf(YType.uint32, 'ciiSysLevelMinLSPGenInt'), ['int'])),
                    ('ciisysleveloverloadstate', (YLeaf(YType.enumeration, 'ciiSysLevelOverloadState'), [('ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB', 'CiiLevelState', '')])),
                    ('ciisyslevelsetoverload', (YLeaf(YType.boolean, 'ciiSysLevelSetOverload'), ['bool'])),
                    ('ciisyslevelsetoverloaduntil', (YLeaf(YType.uint32, 'ciiSysLevelSetOverloadUntil'), ['int'])),
                    ('ciisyslevelmetricstyle', (YLeaf(YType.enumeration, 'ciiSysLevelMetricStyle'), [('ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB', 'CiiMetricStyle', '')])),
                    ('ciisyslevelspfconsiders', (YLeaf(YType.enumeration, 'ciiSysLevelSPFConsiders'), [('ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB', 'CiiMetricStyle', '')])),
                    ('ciisyslevelteenabled', (YLeaf(YType.boolean, 'ciiSysLevelTEEnabled'), ['bool'])),
                ])
                self.ciisyslevelindex = None
                self.ciisysleveloriglspbuffsize = None
                self.ciisyslevelminlspgenint = None
                self.ciisysleveloverloadstate = None
                self.ciisyslevelsetoverload = None
                self.ciisyslevelsetoverloaduntil = None
                self.ciisyslevelmetricstyle = None
                self.ciisyslevelspfconsiders = None
                self.ciisyslevelteenabled = None
                self._segment_path = lambda: "ciiSysLevelEntry" + "[ciiSysLevelIndex='" + str(self.ciisyslevelindex) + "']"
                self._absolute_path = lambda: "CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/ciiSysLevelTable/%s" % self._segment_path()
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(CISCOIETFISISMIB.CiiSysLevelTable.CiiSysLevelEntry, ['ciisyslevelindex', 'ciisysleveloriglspbuffsize', 'ciisyslevelminlspgenint', 'ciisysleveloverloadstate', 'ciisyslevelsetoverload', 'ciisyslevelsetoverloaduntil', 'ciisyslevelmetricstyle', 'ciisyslevelspfconsiders', 'ciisyslevelteenabled'], name, value)

            class CiiSysLevelIndex(Enum):
                """
                CiiSysLevelIndex (Enum Class)

                The level that this entry describes.

                .. data:: level1IS = 1

                .. data:: level2IS = 2

                """

                level1IS = Enum.YLeaf(1, "level1IS")

                level2IS = Enum.YLeaf(2, "level2IS")





    class CiiCircTable(Entity):
        """
        The table of circuits used by this
        Intermediate System.
        
        .. attribute:: ciicircentry
        
        	An ciiCircEntry exists for each circuit used by Integrated IS\-IS on this system
        	**type**\: list of  		 :py:class:`CiiCircEntry <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiCircTable.CiiCircEntry>`
        
        	**config**\: False
        
        

        """

        _prefix = 'CISCO-IETF-ISIS-MIB'
        _revision = '2005-08-16'

        def __init__(self):
            super(CISCOIETFISISMIB.CiiCircTable, self).__init__()

            self.yang_name = "ciiCircTable"
            self.yang_parent_name = "CISCO-IETF-ISIS-MIB"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([("ciiCircEntry", ("ciicircentry", CISCOIETFISISMIB.CiiCircTable.CiiCircEntry))])
            self._leafs = OrderedDict()

            self.ciicircentry = YList(self)
            self._segment_path = lambda: "ciiCircTable"
            self._absolute_path = lambda: "CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(CISCOIETFISISMIB.CiiCircTable, [], name, value)


        class CiiCircEntry(Entity):
            """
            An ciiCircEntry exists for each circuit used by
            Integrated IS\-IS on this system.
            
            .. attribute:: ciicircindex  (key)
            
            	The identifier of this circuit, unique within the Intermediate System.  This object follows the index behavior.  This is for SNMP Indexing purposes only and need not have any relation to any protocol value
            	**type**\: int
            
            	**range:** 1..2147483647
            
            	**config**\: False
            
            .. attribute:: ciicircifindex
            
            	The value of ifIndex for the interface to which this circuit corresponds.   This object cannot be modified after creation
            	**type**\: int
            
            	**range:** 1..2147483647
            
            	**config**\: False
            
            .. attribute:: ciicircifsubindex
            
            	A specifier for the part of the interface ifIndex to which this circuit corresponds, such as a DLCI or VPI/VCI. This object cannot be modified after creation
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            	**config**\: False
            
            .. attribute:: ciicircadminstate
            
            	The administrative state of the circuit. This object follows the CiiAdminState behavior
            	**type**\:  :py:class:`CiiAdminState <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CiiAdminState>`
            
            	**config**\: False
            
            .. attribute:: ciicircexiststate
            
            	The existence state of this circuit. This object follows the RowStatus behavior.  Setting the state to 'notInService' halts the generation and processing of IS\-IS protocol PDUs on this circuit.  Setting the state to 'destroy' will also erase any configuration associated with the circuit
            	**type**\:  :py:class:`RowStatus <ydk.models.cisco_ios_xe.SNMPv2_TC.RowStatus>`
            
            	**config**\: False
            
            .. attribute:: ciicirctype
            
            	The type of the circuit. This object follows the replaceOnlyWhileDisabled behavior. The type specified must be compatible with the type of the interface defined by the value of ciiCircIfIndex
            	**type**\:  :py:class:`CiiCircType <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiCircTable.CiiCircEntry.CiiCircType>`
            
            	**config**\: False
            
            .. attribute:: ciicircextdomain
            
            	If true, suppress normal transmission of and interpretation of Intra\-domain IS\-IS PDUs on this circuit
            	**type**\: bool
            
            	**config**\: False
            
            .. attribute:: ciicirclevel
            
            	Indicates which type of packets will be sent and accepted on this circuit. The values used will be modified by the settings of ciiSysType. This object follows the replaceOnlyWhileDisabled behavior
            	**type**\:  :py:class:`CiiCircLevel <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiCircTable.CiiCircEntry.CiiCircLevel>`
            
            	**config**\: False
            
            .. attribute:: ciicircpassivecircuit
            
            	Should we include this interface in LSPs, even if it is not running the IS\-IS Protocol?
            	**type**\: bool
            
            	**config**\: False
            
            .. attribute:: ciicircmeshgroupenabled
            
            	Is this port a member of a mesh group, or blocked? Circuits in the same mesh group act as a virtual multiaccess network.  LSPs seen on one circuit in a mesh group will not be flooded to another circuit in the same mesh group
            	**type**\:  :py:class:`CiiCircMeshGroupEnabled <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiCircTable.CiiCircEntry.CiiCircMeshGroupEnabled>`
            
            	**config**\: False
            
            .. attribute:: ciicircmeshgroup
            
            	Circuits in the same mesh group act as a virtual multiaccess network.  LSPs seen on one circuit in a mesh group will not be flooded to another circuit in the same mesh group.  If ciiCircMeshGroupEnabled is inactive or blocked, this value is ignored
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**config**\: False
            
            .. attribute:: ciicircsmallhellos
            
            	Can we send unpadded hellos on LAN circuits?  'false' means LAN Hellos must be padded. Implementations should allow the administrator to read this value.  An implementation need not be able to support unpadded hellos to be conformant
            	**type**\: bool
            
            	**config**\: False
            
            .. attribute:: ciicirclastuptime
            
            	If the circuit is enabled, the value of sysUpTime when ciiCircAdminState most recently entered the state 'on'.  If the circuit is not 'on', the value of sysUpTime when the circuit last entered state 'on', 0 if the circuit has never been 'on'
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**config**\: False
            
            .. attribute:: ciicirc3wayenabled
            
            	Is this circuit enabled to run 3Way handshake?
            	**type**\: bool
            
            	**config**\: False
            
            .. attribute:: ciicircextendedcircid
            
            	The value to be used as the extended circuit ID in 3Way handshake.  This value is only used if ciiCirc3WayEnabled is true, and must be unique across all circuits on this IS
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**config**\: False
            
            

            """

            _prefix = 'CISCO-IETF-ISIS-MIB'
            _revision = '2005-08-16'

            def __init__(self):
                super(CISCOIETFISISMIB.CiiCircTable.CiiCircEntry, self).__init__()

                self.yang_name = "ciiCircEntry"
                self.yang_parent_name = "ciiCircTable"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['ciicircindex']
                self._child_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('ciicircindex', (YLeaf(YType.int32, 'ciiCircIndex'), ['int'])),
                    ('ciicircifindex', (YLeaf(YType.int32, 'ciiCircIfIndex'), ['int'])),
                    ('ciicircifsubindex', (YLeaf(YType.int32, 'ciiCircIfSubIndex'), ['int'])),
                    ('ciicircadminstate', (YLeaf(YType.enumeration, 'ciiCircAdminState'), [('ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB', 'CiiAdminState', '')])),
                    ('ciicircexiststate', (YLeaf(YType.enumeration, 'ciiCircExistState'), [('ydk.models.cisco_ios_xe.SNMPv2_TC', 'RowStatus', '')])),
                    ('ciicirctype', (YLeaf(YType.enumeration, 'ciiCircType'), [('ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB', 'CISCOIETFISISMIB', 'CiiCircTable.CiiCircEntry.CiiCircType')])),
                    ('ciicircextdomain', (YLeaf(YType.boolean, 'ciiCircExtDomain'), ['bool'])),
                    ('ciicirclevel', (YLeaf(YType.enumeration, 'ciiCircLevel'), [('ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB', 'CISCOIETFISISMIB', 'CiiCircTable.CiiCircEntry.CiiCircLevel')])),
                    ('ciicircpassivecircuit', (YLeaf(YType.boolean, 'ciiCircPassiveCircuit'), ['bool'])),
                    ('ciicircmeshgroupenabled', (YLeaf(YType.enumeration, 'ciiCircMeshGroupEnabled'), [('ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB', 'CISCOIETFISISMIB', 'CiiCircTable.CiiCircEntry.CiiCircMeshGroupEnabled')])),
                    ('ciicircmeshgroup', (YLeaf(YType.uint32, 'ciiCircMeshGroup'), ['int'])),
                    ('ciicircsmallhellos', (YLeaf(YType.boolean, 'ciiCircSmallHellos'), ['bool'])),
                    ('ciicirclastuptime', (YLeaf(YType.uint32, 'ciiCircLastUpTime'), ['int'])),
                    ('ciicirc3wayenabled', (YLeaf(YType.boolean, 'ciiCirc3WayEnabled'), ['bool'])),
                    ('ciicircextendedcircid', (YLeaf(YType.uint32, 'ciiCircExtendedCircID'), ['int'])),
                ])
                self.ciicircindex = None
                self.ciicircifindex = None
                self.ciicircifsubindex = None
                self.ciicircadminstate = None
                self.ciicircexiststate = None
                self.ciicirctype = None
                self.ciicircextdomain = None
                self.ciicirclevel = None
                self.ciicircpassivecircuit = None
                self.ciicircmeshgroupenabled = None
                self.ciicircmeshgroup = None
                self.ciicircsmallhellos = None
                self.ciicirclastuptime = None
                self.ciicirc3wayenabled = None
                self.ciicircextendedcircid = None
                self._segment_path = lambda: "ciiCircEntry" + "[ciiCircIndex='" + str(self.ciicircindex) + "']"
                self._absolute_path = lambda: "CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/ciiCircTable/%s" % self._segment_path()
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(CISCOIETFISISMIB.CiiCircTable.CiiCircEntry, ['ciicircindex', 'ciicircifindex', 'ciicircifsubindex', 'ciicircadminstate', 'ciicircexiststate', 'ciicirctype', 'ciicircextdomain', 'ciicirclevel', 'ciicircpassivecircuit', 'ciicircmeshgroupenabled', 'ciicircmeshgroup', 'ciicircsmallhellos', 'ciicirclastuptime', 'ciicirc3wayenabled', 'ciicircextendedcircid'], name, value)

            class CiiCircLevel(Enum):
                """
                CiiCircLevel (Enum Class)

                Indicates which type of packets will be sent and

                accepted on this circuit. The values used will be

                modified by the settings of ciiSysType. This

                object follows the replaceOnlyWhileDisabled behavior.

                .. data:: level1 = 1

                .. data:: level2 = 2

                .. data:: level1L2 = 3

                """

                level1 = Enum.YLeaf(1, "level1")

                level2 = Enum.YLeaf(2, "level2")

                level1L2 = Enum.YLeaf(3, "level1L2")


            class CiiCircMeshGroupEnabled(Enum):
                """
                CiiCircMeshGroupEnabled (Enum Class)

                Is this port a member of a mesh group, or blocked?

                Circuits in the same mesh group act as a virtual

                multiaccess network.  LSPs seen on one circuit in

                a mesh group will not be flooded to another circuit

                in the same mesh group.

                .. data:: inactive = 1

                .. data:: blocked = 2

                .. data:: set = 3

                """

                inactive = Enum.YLeaf(1, "inactive")

                blocked = Enum.YLeaf(2, "blocked")

                set = Enum.YLeaf(3, "set")


            class CiiCircType(Enum):
                """
                CiiCircType (Enum Class)

                The type of the circuit. This object follows the

                replaceOnlyWhileDisabled behavior. The type specified

                must be compatible with the type of the interface defined

                by the value of ciiCircIfIndex.

                .. data:: broadcast = 1

                .. data:: ptToPt = 2

                .. data:: staticIn = 3

                .. data:: staticOut = 4

                .. data:: dA = 5

                """

                broadcast = Enum.YLeaf(1, "broadcast")

                ptToPt = Enum.YLeaf(2, "ptToPt")

                staticIn = Enum.YLeaf(3, "staticIn")

                staticOut = Enum.YLeaf(4, "staticOut")

                dA = Enum.YLeaf(5, "dA")





    class CiiCircLevelTable(Entity):
        """
        Level specific information about circuits used by IS\-IS
        
        .. attribute:: ciicirclevelentry
        
        	An ciiCircLevelEntry exists for each level on each circuit used by Integrated IS\-IS on this system
        	**type**\: list of  		 :py:class:`CiiCircLevelEntry <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiCircLevelTable.CiiCircLevelEntry>`
        
        	**config**\: False
        
        

        """

        _prefix = 'CISCO-IETF-ISIS-MIB'
        _revision = '2005-08-16'

        def __init__(self):
            super(CISCOIETFISISMIB.CiiCircLevelTable, self).__init__()

            self.yang_name = "ciiCircLevelTable"
            self.yang_parent_name = "CISCO-IETF-ISIS-MIB"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([("ciiCircLevelEntry", ("ciicirclevelentry", CISCOIETFISISMIB.CiiCircLevelTable.CiiCircLevelEntry))])
            self._leafs = OrderedDict()

            self.ciicirclevelentry = YList(self)
            self._segment_path = lambda: "ciiCircLevelTable"
            self._absolute_path = lambda: "CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(CISCOIETFISISMIB.CiiCircLevelTable, [], name, value)


        class CiiCircLevelEntry(Entity):
            """
            An ciiCircLevelEntry exists for each level on
            each circuit used by Integrated IS\-IS on this system.
            
            .. attribute:: ciicircindex  (key)
            
            	
            	**type**\: int
            
            	**range:** 1..2147483647
            
            	**refers to**\:  :py:class:`ciicircindex <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiCircTable.CiiCircEntry>`
            
            	**config**\: False
            
            .. attribute:: ciicirclevelindex  (key)
            
            	The level that this entry describes
            	**type**\:  :py:class:`CiiCircLevelIndex <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiCircLevelTable.CiiCircLevelEntry.CiiCircLevelIndex>`
            
            	**config**\: False
            
            .. attribute:: ciicirclevelmetric
            
            	The metric value of this circuit for this level
            	**type**\: int
            
            	**range:** 0..63
            
            	**config**\: False
            
            .. attribute:: ciicirclevelwidemetric
            
            	The wide metric value of this circuit for this level
            	**type**\: int
            
            	**range:** 0..16777215
            
            	**config**\: False
            
            .. attribute:: ciicirclevelispriority
            
            	The priority for becoming LAN Designated Intermediate System at this level
            	**type**\: int
            
            	**range:** 0..127
            
            	**config**\: False
            
            .. attribute:: ciicirclevelidoctet
            
            	A one byte identifier that can be used in protocol packets to identify a circuit.  Values of ciiCircLevelIDOctet do not need to be unique.  They are only required to differ on LANs where the Intermediate System is the Designated Intermediate System
            	**type**\: int
            
            	**range:** 0..255
            
            	**config**\: False
            
            .. attribute:: ciicirclevelid
            
            	On a point to point circuit with a fully initialized adjacency to a peer IS, the value of this object is the circuit ID negotiated during adjacency initialization. On a point to point circuit without such an adjacency, the value is the concatenation of the local system ID and the one byte ciiCircLevelIDOctet for this circuit i.e. the value that would be proposed for the circuit ID.  On other circuit types, the value returned is the zero length OCTET STRING
            	**type**\: str
            
            	**length:** 0..0 \| 7..7
            
            	**config**\: False
            
            .. attribute:: ciicircleveldesis
            
            	The ID of the LAN Designated Intermediate System on this circuit at this level. If, for any reason, this system is not partaking in the relevant Designated Intermediate System election process, then the value returned is the zero length OCTET STRING
            	**type**\: str
            
            	**length:** 0..0 \| 7..7
            
            	**config**\: False
            
            .. attribute:: ciicirclevelhellomultiplier
            
            	This value is multiplied by the corresponding HelloTimer and the result in seconds (rounded up) is used as the holding time in transmitted hellos, to be used by receivers of hello packets from this IS
            	**type**\: int
            
            	**range:** 2..100
            
            	**config**\: False
            
            .. attribute:: ciicirclevelhellotimer
            
            	Maximum period, in milliseconds, between IIH PDUs on multiaccess networks at this level for LANs. The value at L1 is used as the period between Hellos on L1L2 point to point circuits.  Setting this value at level 2 on an L1L2 point to point circuit will result in an error of InconsistentValue.  This object follows the resettingTimer behavior
            	**type**\: int
            
            	**range:** 10..600000
            
            	**config**\: False
            
            	**units**\: milliseconds
            
            .. attribute:: ciicircleveldrhellotimer
            
            	Period, in milliseconds, between Hello PDUs on multiaccess networks when this IS is the Designated Intermediate System.  This object follows the resettingTimer behavior
            	**type**\: int
            
            	**range:** 10..120000
            
            	**config**\: False
            
            	**units**\: milliseconds
            
            .. attribute:: ciicirclevellspthrottle
            
            	Minimal interval of time, in milliseconds, between transmissions of LSPs on an interface at this level
            	**type**\: int
            
            	**range:** 1..65535
            
            	**config**\: False
            
            	**units**\: milliseconds
            
            .. attribute:: ciicirclevelminlspretransint
            
            	Minimum interval, in seconds, between re\-transmission of an LSP at this level. This object follows the resettingTimer behavior.  Note that ciiCircLevelLSPThrottle controls how fast we send back to back LSPs.  This variable controls how fast we re\-send the same LSP
            	**type**\: int
            
            	**range:** 1..300
            
            	**config**\: False
            
            	**units**\: seconds
            
            .. attribute:: ciicirclevelcsnpinterval
            
            	Interval of time, in seconds, between periodic transmission of a complete set of CSNPs on multiaccess networks if this router is the designated router at this level.  This object follows the resettingTimer behavior
            	**type**\: int
            
            	**range:** 1..600
            
            	**config**\: False
            
            	**units**\: seconds
            
            .. attribute:: ciicirclevelpartsnpinterval
            
            	Minimum interval in seconds between sending Partial Sequence Number PDUs at this level. This object follows the resettingTimer behavior
            	**type**\: int
            
            	**range:** 1..120
            
            	**config**\: False
            
            	**units**\: seconds
            
            

            """

            _prefix = 'CISCO-IETF-ISIS-MIB'
            _revision = '2005-08-16'

            def __init__(self):
                super(CISCOIETFISISMIB.CiiCircLevelTable.CiiCircLevelEntry, self).__init__()

                self.yang_name = "ciiCircLevelEntry"
                self.yang_parent_name = "ciiCircLevelTable"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['ciicircindex','ciicirclevelindex']
                self._child_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('ciicircindex', (YLeaf(YType.str, 'ciiCircIndex'), ['int'])),
                    ('ciicirclevelindex', (YLeaf(YType.enumeration, 'ciiCircLevelIndex'), [('ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB', 'CISCOIETFISISMIB', 'CiiCircLevelTable.CiiCircLevelEntry.CiiCircLevelIndex')])),
                    ('ciicirclevelmetric', (YLeaf(YType.int32, 'ciiCircLevelMetric'), ['int'])),
                    ('ciicirclevelwidemetric', (YLeaf(YType.uint32, 'ciiCircLevelWideMetric'), ['int'])),
                    ('ciicirclevelispriority', (YLeaf(YType.int32, 'ciiCircLevelISPriority'), ['int'])),
                    ('ciicirclevelidoctet', (YLeaf(YType.int32, 'ciiCircLevelIDOctet'), ['int'])),
                    ('ciicirclevelid', (YLeaf(YType.str, 'ciiCircLevelID'), ['str'])),
                    ('ciicircleveldesis', (YLeaf(YType.str, 'ciiCircLevelDesIS'), ['str'])),
                    ('ciicirclevelhellomultiplier', (YLeaf(YType.int32, 'ciiCircLevelHelloMultiplier'), ['int'])),
                    ('ciicirclevelhellotimer', (YLeaf(YType.int32, 'ciiCircLevelHelloTimer'), ['int'])),
                    ('ciicircleveldrhellotimer', (YLeaf(YType.int32, 'ciiCircLevelDRHelloTimer'), ['int'])),
                    ('ciicirclevellspthrottle', (YLeaf(YType.uint32, 'ciiCircLevelLSPThrottle'), ['int'])),
                    ('ciicirclevelminlspretransint', (YLeaf(YType.int32, 'ciiCircLevelMinLSPRetransInt'), ['int'])),
                    ('ciicirclevelcsnpinterval', (YLeaf(YType.int32, 'ciiCircLevelCSNPInterval'), ['int'])),
                    ('ciicirclevelpartsnpinterval', (YLeaf(YType.int32, 'ciiCircLevelPartSNPInterval'), ['int'])),
                ])
                self.ciicircindex = None
                self.ciicirclevelindex = None
                self.ciicirclevelmetric = None
                self.ciicirclevelwidemetric = None
                self.ciicirclevelispriority = None
                self.ciicirclevelidoctet = None
                self.ciicirclevelid = None
                self.ciicircleveldesis = None
                self.ciicirclevelhellomultiplier = None
                self.ciicirclevelhellotimer = None
                self.ciicircleveldrhellotimer = None
                self.ciicirclevellspthrottle = None
                self.ciicirclevelminlspretransint = None
                self.ciicirclevelcsnpinterval = None
                self.ciicirclevelpartsnpinterval = None
                self._segment_path = lambda: "ciiCircLevelEntry" + "[ciiCircIndex='" + str(self.ciicircindex) + "']" + "[ciiCircLevelIndex='" + str(self.ciicirclevelindex) + "']"
                self._absolute_path = lambda: "CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/ciiCircLevelTable/%s" % self._segment_path()
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(CISCOIETFISISMIB.CiiCircLevelTable.CiiCircLevelEntry, ['ciicircindex', 'ciicirclevelindex', 'ciicirclevelmetric', 'ciicirclevelwidemetric', 'ciicirclevelispriority', 'ciicirclevelidoctet', 'ciicirclevelid', 'ciicircleveldesis', 'ciicirclevelhellomultiplier', 'ciicirclevelhellotimer', 'ciicircleveldrhellotimer', 'ciicirclevellspthrottle', 'ciicirclevelminlspretransint', 'ciicirclevelcsnpinterval', 'ciicirclevelpartsnpinterval'], name, value)

            class CiiCircLevelIndex(Enum):
                """
                CiiCircLevelIndex (Enum Class)

                The level that this entry describes.

                .. data:: level1IS = 1

                .. data:: level2IS = 2

                """

                level1IS = Enum.YLeaf(1, "level1IS")

                level2IS = Enum.YLeaf(2, "level2IS")





    class CiiSystemCounterTable(Entity):
        """
        System wide counters for this Intermediate System.
        
        .. attribute:: ciisystemcounterentry
        
        	System\-wide IS\-IS counters
        	**type**\: list of  		 :py:class:`CiiSystemCounterEntry <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiSystemCounterTable.CiiSystemCounterEntry>`
        
        	**config**\: False
        
        

        """

        _prefix = 'CISCO-IETF-ISIS-MIB'
        _revision = '2005-08-16'

        def __init__(self):
            super(CISCOIETFISISMIB.CiiSystemCounterTable, self).__init__()

            self.yang_name = "ciiSystemCounterTable"
            self.yang_parent_name = "CISCO-IETF-ISIS-MIB"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([("ciiSystemCounterEntry", ("ciisystemcounterentry", CISCOIETFISISMIB.CiiSystemCounterTable.CiiSystemCounterEntry))])
            self._leafs = OrderedDict()

            self.ciisystemcounterentry = YList(self)
            self._segment_path = lambda: "ciiSystemCounterTable"
            self._absolute_path = lambda: "CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(CISCOIETFISISMIB.CiiSystemCounterTable, [], name, value)


        class CiiSystemCounterEntry(Entity):
            """
            System\-wide IS\-IS counters.
            
            .. attribute:: ciisysstatlevel  (key)
            
            	The level that this entry describes
            	**type**\:  :py:class:`CiiSysStatLevel <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiSystemCounterTable.CiiSystemCounterEntry.CiiSysStatLevel>`
            
            	**config**\: False
            
            .. attribute:: ciisysstatcorrlsps
            
            	Number of corrupted in\-memory LSP frames detected.  LSPs received from the wire with a bad checksum are silently dropped and not counted.  LSPs received from the wire with parse errors are counted by ciiSysStatLSPErrors
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**config**\: False
            
            	**units**\: frames
            
            .. attribute:: ciisysstatauthtypefails
            
            	The number of frames with authentication type mismatches recognized by this Intermediate System
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**config**\: False
            
            	**units**\: frames
            
            .. attribute:: ciisysstatauthfails
            
            	The number of frames with authentication failures recognized by this Intermediate System
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**config**\: False
            
            	**units**\: frames
            
            .. attribute:: ciisysstatlspdbaseoloads
            
            	Number of times the LSP database has become overloaded
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**config**\: False
            
            .. attribute:: ciisysstatmanaddrdropfromareas
            
            	Number of times a manual address has been dropped from the area
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**config**\: False
            
            .. attribute:: ciisysstatattmpttoexmaxseqnums
            
            	Number of times the IS has attempted to exceed the maximum sequence number
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**config**\: False
            
            .. attribute:: ciisysstatseqnumskips
            
            	Number of times a sequence number skip has occurred
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**config**\: False
            
            .. attribute:: ciisysstatownlsppurges
            
            	Number of times a zero\-aged copy of the system's own LSP is received from some other node
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**config**\: False
            
            .. attribute:: ciisysstatidfieldlenmismatches
            
            	Number of times a PDU is received with a different value for ID field length to that of the receiving system
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**config**\: False
            
            	**units**\: frames
            
            .. attribute:: ciisysstatpartchanges
            
            	Partition changes
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**config**\: False
            
            .. attribute:: ciisysstatspfruns
            
            	Number of times we ran SPF at this level
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**config**\: False
            
            .. attribute:: ciisysstatlsperrors
            
            	Number of LSP frames with errors we have received
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**config**\: False
            
            	**units**\: frames
            
            

            """

            _prefix = 'CISCO-IETF-ISIS-MIB'
            _revision = '2005-08-16'

            def __init__(self):
                super(CISCOIETFISISMIB.CiiSystemCounterTable.CiiSystemCounterEntry, self).__init__()

                self.yang_name = "ciiSystemCounterEntry"
                self.yang_parent_name = "ciiSystemCounterTable"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['ciisysstatlevel']
                self._child_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('ciisysstatlevel', (YLeaf(YType.enumeration, 'ciiSysStatLevel'), [('ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB', 'CISCOIETFISISMIB', 'CiiSystemCounterTable.CiiSystemCounterEntry.CiiSysStatLevel')])),
                    ('ciisysstatcorrlsps', (YLeaf(YType.uint32, 'ciiSysStatCorrLSPs'), ['int'])),
                    ('ciisysstatauthtypefails', (YLeaf(YType.uint32, 'ciiSysStatAuthTypeFails'), ['int'])),
                    ('ciisysstatauthfails', (YLeaf(YType.uint32, 'ciiSysStatAuthFails'), ['int'])),
                    ('ciisysstatlspdbaseoloads', (YLeaf(YType.uint32, 'ciiSysStatLSPDbaseOloads'), ['int'])),
                    ('ciisysstatmanaddrdropfromareas', (YLeaf(YType.uint32, 'ciiSysStatManAddrDropFromAreas'), ['int'])),
                    ('ciisysstatattmpttoexmaxseqnums', (YLeaf(YType.uint32, 'ciiSysStatAttmptToExMaxSeqNums'), ['int'])),
                    ('ciisysstatseqnumskips', (YLeaf(YType.uint32, 'ciiSysStatSeqNumSkips'), ['int'])),
                    ('ciisysstatownlsppurges', (YLeaf(YType.uint32, 'ciiSysStatOwnLSPPurges'), ['int'])),
                    ('ciisysstatidfieldlenmismatches', (YLeaf(YType.uint32, 'ciiSysStatIDFieldLenMismatches'), ['int'])),
                    ('ciisysstatpartchanges', (YLeaf(YType.uint32, 'ciiSysStatPartChanges'), ['int'])),
                    ('ciisysstatspfruns', (YLeaf(YType.uint32, 'ciiSysStatSPFRuns'), ['int'])),
                    ('ciisysstatlsperrors', (YLeaf(YType.uint32, 'ciiSysStatLSPErrors'), ['int'])),
                ])
                self.ciisysstatlevel = None
                self.ciisysstatcorrlsps = None
                self.ciisysstatauthtypefails = None
                self.ciisysstatauthfails = None
                self.ciisysstatlspdbaseoloads = None
                self.ciisysstatmanaddrdropfromareas = None
                self.ciisysstatattmpttoexmaxseqnums = None
                self.ciisysstatseqnumskips = None
                self.ciisysstatownlsppurges = None
                self.ciisysstatidfieldlenmismatches = None
                self.ciisysstatpartchanges = None
                self.ciisysstatspfruns = None
                self.ciisysstatlsperrors = None
                self._segment_path = lambda: "ciiSystemCounterEntry" + "[ciiSysStatLevel='" + str(self.ciisysstatlevel) + "']"
                self._absolute_path = lambda: "CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/ciiSystemCounterTable/%s" % self._segment_path()
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(CISCOIETFISISMIB.CiiSystemCounterTable.CiiSystemCounterEntry, ['ciisysstatlevel', 'ciisysstatcorrlsps', 'ciisysstatauthtypefails', 'ciisysstatauthfails', 'ciisysstatlspdbaseoloads', 'ciisysstatmanaddrdropfromareas', 'ciisysstatattmpttoexmaxseqnums', 'ciisysstatseqnumskips', 'ciisysstatownlsppurges', 'ciisysstatidfieldlenmismatches', 'ciisysstatpartchanges', 'ciisysstatspfruns', 'ciisysstatlsperrors'], name, value)

            class CiiSysStatLevel(Enum):
                """
                CiiSysStatLevel (Enum Class)

                The level that this entry describes.

                .. data:: level1IS = 1

                .. data:: level2IS = 2

                """

                level1IS = Enum.YLeaf(1, "level1IS")

                level2IS = Enum.YLeaf(2, "level2IS")





    class CiiCircuitCounterTable(Entity):
        """
        Circuit specific counters for this
        Intermediate System.
        
        .. attribute:: ciicircuitcounterentry
        
        	An ciiCircuitCounterEntry exists for each circuit used by Integrated IS\-IS on this system
        	**type**\: list of  		 :py:class:`CiiCircuitCounterEntry <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiCircuitCounterTable.CiiCircuitCounterEntry>`
        
        	**config**\: False
        
        

        """

        _prefix = 'CISCO-IETF-ISIS-MIB'
        _revision = '2005-08-16'

        def __init__(self):
            super(CISCOIETFISISMIB.CiiCircuitCounterTable, self).__init__()

            self.yang_name = "ciiCircuitCounterTable"
            self.yang_parent_name = "CISCO-IETF-ISIS-MIB"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([("ciiCircuitCounterEntry", ("ciicircuitcounterentry", CISCOIETFISISMIB.CiiCircuitCounterTable.CiiCircuitCounterEntry))])
            self._leafs = OrderedDict()

            self.ciicircuitcounterentry = YList(self)
            self._segment_path = lambda: "ciiCircuitCounterTable"
            self._absolute_path = lambda: "CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(CISCOIETFISISMIB.CiiCircuitCounterTable, [], name, value)


        class CiiCircuitCounterEntry(Entity):
            """
            An ciiCircuitCounterEntry exists for each circuit
            used by Integrated IS\-IS on this system.
            
            .. attribute:: ciicircindex  (key)
            
            	
            	**type**\: int
            
            	**range:** 1..2147483647
            
            	**refers to**\:  :py:class:`ciicircindex <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiCircTable.CiiCircEntry>`
            
            	**config**\: False
            
            .. attribute:: ciicircuittype  (key)
            
            	What type of circuit saw these counts?  The point to point Hello PDU includes both L1 and L2, and ISs form a single adjacency on point to point links. Thus we combine counts on point to point links into one group
            	**type**\:  :py:class:`CiiCircuitType <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiCircuitCounterTable.CiiCircuitCounterEntry.CiiCircuitType>`
            
            	**config**\: False
            
            .. attribute:: ciicircadjchanges
            
            	The number of times an adjacency state change has occurred on this circuit
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**config**\: False
            
            .. attribute:: ciicircnumadj
            
            	The number of adjacencies on this circuit
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**config**\: False
            
            .. attribute:: ciicircinitfails
            
            	The number of times initialization of this circuit has failed.  This counts events such as PPP NCP failures. Failures to form an adjacency are counted by ciiCircRejAdjs
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**config**\: False
            
            .. attribute:: ciicircrejadjs
            
            	The number of times an adjacency has been rejected on this circuit
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**config**\: False
            
            .. attribute:: ciicircidfieldlenmismatches
            
            	The number of times an IS\-IS control PDU with an ID field length different to that for this system has been received
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**config**\: False
            
            	**units**\: frames
            
            .. attribute:: ciicircmaxareaaddrmismatches
            
            	The number of times an IS\-IS control PDU with a max area address field different to that for this system has been received
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**config**\: False
            
            .. attribute:: ciicircauthtypefails
            
            	The number of times an IS\-IS control PDU with an auth type field different to that for this system has been received
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**config**\: False
            
            .. attribute:: ciicircauthfails
            
            	The number of times an IS\-IS control PDU with the correct auth type has failed to pass authentication validation
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**config**\: False
            
            .. attribute:: ciicirclandesischanges
            
            	The number of times the Designated IS has changed on this circuit at this level.  If the circuit is point to point, this count is zero
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**config**\: False
            
            

            """

            _prefix = 'CISCO-IETF-ISIS-MIB'
            _revision = '2005-08-16'

            def __init__(self):
                super(CISCOIETFISISMIB.CiiCircuitCounterTable.CiiCircuitCounterEntry, self).__init__()

                self.yang_name = "ciiCircuitCounterEntry"
                self.yang_parent_name = "ciiCircuitCounterTable"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['ciicircindex','ciicircuittype']
                self._child_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('ciicircindex', (YLeaf(YType.str, 'ciiCircIndex'), ['int'])),
                    ('ciicircuittype', (YLeaf(YType.enumeration, 'ciiCircuitType'), [('ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB', 'CISCOIETFISISMIB', 'CiiCircuitCounterTable.CiiCircuitCounterEntry.CiiCircuitType')])),
                    ('ciicircadjchanges', (YLeaf(YType.uint32, 'ciiCircAdjChanges'), ['int'])),
                    ('ciicircnumadj', (YLeaf(YType.uint32, 'ciiCircNumAdj'), ['int'])),
                    ('ciicircinitfails', (YLeaf(YType.uint32, 'ciiCircInitFails'), ['int'])),
                    ('ciicircrejadjs', (YLeaf(YType.uint32, 'ciiCircRejAdjs'), ['int'])),
                    ('ciicircidfieldlenmismatches', (YLeaf(YType.uint32, 'ciiCircIDFieldLenMismatches'), ['int'])),
                    ('ciicircmaxareaaddrmismatches', (YLeaf(YType.uint32, 'ciiCircMaxAreaAddrMismatches'), ['int'])),
                    ('ciicircauthtypefails', (YLeaf(YType.uint32, 'ciiCircAuthTypeFails'), ['int'])),
                    ('ciicircauthfails', (YLeaf(YType.uint32, 'ciiCircAuthFails'), ['int'])),
                    ('ciicirclandesischanges', (YLeaf(YType.uint32, 'ciiCircLANDesISChanges'), ['int'])),
                ])
                self.ciicircindex = None
                self.ciicircuittype = None
                self.ciicircadjchanges = None
                self.ciicircnumadj = None
                self.ciicircinitfails = None
                self.ciicircrejadjs = None
                self.ciicircidfieldlenmismatches = None
                self.ciicircmaxareaaddrmismatches = None
                self.ciicircauthtypefails = None
                self.ciicircauthfails = None
                self.ciicirclandesischanges = None
                self._segment_path = lambda: "ciiCircuitCounterEntry" + "[ciiCircIndex='" + str(self.ciicircindex) + "']" + "[ciiCircuitType='" + str(self.ciicircuittype) + "']"
                self._absolute_path = lambda: "CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/ciiCircuitCounterTable/%s" % self._segment_path()
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(CISCOIETFISISMIB.CiiCircuitCounterTable.CiiCircuitCounterEntry, ['ciicircindex', 'ciicircuittype', 'ciicircadjchanges', 'ciicircnumadj', 'ciicircinitfails', 'ciicircrejadjs', 'ciicircidfieldlenmismatches', 'ciicircmaxareaaddrmismatches', 'ciicircauthtypefails', 'ciicircauthfails', 'ciicirclandesischanges'], name, value)

            class CiiCircuitType(Enum):
                """
                CiiCircuitType (Enum Class)

                What type of circuit saw these counts?

                The point to point Hello PDU includes

                both L1 and L2, and ISs form a single

                adjacency on point to point links.

                Thus we combine counts on

                point to point links into one group.

                .. data:: lanlevel1 = 1

                .. data:: lanlevel2 = 2

                .. data:: p2pcircuit = 3

                """

                lanlevel1 = Enum.YLeaf(1, "lanlevel1")

                lanlevel2 = Enum.YLeaf(2, "lanlevel2")

                p2pcircuit = Enum.YLeaf(3, "p2pcircuit")





    class CiiPacketCounterTable(Entity):
        """
        Information about IS\-IS protocol traffic at one level
        on one circuit in one direction
        
        .. attribute:: ciipacketcounterentry
        
        	Information about IS\-IS protocol traffic at one level on one circuit in one direction
        	**type**\: list of  		 :py:class:`CiiPacketCounterEntry <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiPacketCounterTable.CiiPacketCounterEntry>`
        
        	**config**\: False
        
        

        """

        _prefix = 'CISCO-IETF-ISIS-MIB'
        _revision = '2005-08-16'

        def __init__(self):
            super(CISCOIETFISISMIB.CiiPacketCounterTable, self).__init__()

            self.yang_name = "ciiPacketCounterTable"
            self.yang_parent_name = "CISCO-IETF-ISIS-MIB"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([("ciiPacketCounterEntry", ("ciipacketcounterentry", CISCOIETFISISMIB.CiiPacketCounterTable.CiiPacketCounterEntry))])
            self._leafs = OrderedDict()

            self.ciipacketcounterentry = YList(self)
            self._segment_path = lambda: "ciiPacketCounterTable"
            self._absolute_path = lambda: "CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(CISCOIETFISISMIB.CiiPacketCounterTable, [], name, value)


        class CiiPacketCounterEntry(Entity):
            """
            Information about IS\-IS protocol traffic at one level
            on one circuit in one direction
            
            .. attribute:: ciicircindex  (key)
            
            	
            	**type**\: int
            
            	**range:** 1..2147483647
            
            	**refers to**\:  :py:class:`ciicircindex <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiCircTable.CiiCircEntry>`
            
            	**config**\: False
            
            .. attribute:: ciipacketcountlevel  (key)
            
            	The level at which these PDU counts have been collected
            	**type**\:  :py:class:`CiiPacketCountLevel <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiPacketCounterTable.CiiPacketCounterEntry.CiiPacketCountLevel>`
            
            	**config**\: False
            
            .. attribute:: ciipacketcountdirection  (key)
            
            	Were we sending or receiving these PDUs?
            	**type**\:  :py:class:`CiiPacketCountDirection <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiPacketCounterTable.CiiPacketCounterEntry.CiiPacketCountDirection>`
            
            	**config**\: False
            
            .. attribute:: ciipacketcountiihellos
            
            	The number of IS\-IS Hello PDU frames seen in this direction at this level.  Point\-to\-Point IIH PDUs are counted at the lowest enabled level\: at L1 on L1 or L1L2 circuits, and at L2 otherwise
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**config**\: False
            
            	**units**\: frames
            
            .. attribute:: ciipacketcountishellos
            
            	The number of ES\-IS Hello PDU frames seen in this direction.  ISH PDUs are counted at the lowest enabled level\: at L1 on L1 or L1L2 circuits, and at L2 otherwise
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**config**\: False
            
            	**units**\: frames
            
            .. attribute:: ciipacketcounteshellos
            
            	The number of ES Hello PDU frames seen in this direction.  ESH PDUs are counted at the lowest enabled level\: at L1 on L1 or L1L2 circuits, and at L2 otherwise
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**config**\: False
            
            	**units**\: frames
            
            .. attribute:: ciipacketcountlsps
            
            	The number of IS\-IS LSP frames seen in this direction at this level
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**config**\: False
            
            	**units**\: frames
            
            .. attribute:: ciipacketcountcsnps
            
            	The number of IS\-IS CSNP frames seen in this direction at this level
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**config**\: False
            
            	**units**\: frames
            
            .. attribute:: ciipacketcountpsnps
            
            	The number of IS\-IS PSNP frames seen in this direction at this level
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**config**\: False
            
            	**units**\: frames
            
            .. attribute:: ciipacketcountunknowns
            
            	The number of unknown IS\-IS PDU frames seen at this level
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**config**\: False
            
            	**units**\: frames
            
            

            """

            _prefix = 'CISCO-IETF-ISIS-MIB'
            _revision = '2005-08-16'

            def __init__(self):
                super(CISCOIETFISISMIB.CiiPacketCounterTable.CiiPacketCounterEntry, self).__init__()

                self.yang_name = "ciiPacketCounterEntry"
                self.yang_parent_name = "ciiPacketCounterTable"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['ciicircindex','ciipacketcountlevel','ciipacketcountdirection']
                self._child_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('ciicircindex', (YLeaf(YType.str, 'ciiCircIndex'), ['int'])),
                    ('ciipacketcountlevel', (YLeaf(YType.enumeration, 'ciiPacketCountLevel'), [('ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB', 'CISCOIETFISISMIB', 'CiiPacketCounterTable.CiiPacketCounterEntry.CiiPacketCountLevel')])),
                    ('ciipacketcountdirection', (YLeaf(YType.enumeration, 'ciiPacketCountDirection'), [('ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB', 'CISCOIETFISISMIB', 'CiiPacketCounterTable.CiiPacketCounterEntry.CiiPacketCountDirection')])),
                    ('ciipacketcountiihellos', (YLeaf(YType.uint32, 'ciiPacketCountIIHellos'), ['int'])),
                    ('ciipacketcountishellos', (YLeaf(YType.uint32, 'ciiPacketCountISHellos'), ['int'])),
                    ('ciipacketcounteshellos', (YLeaf(YType.uint32, 'ciiPacketCountESHellos'), ['int'])),
                    ('ciipacketcountlsps', (YLeaf(YType.uint32, 'ciiPacketCountLSPs'), ['int'])),
                    ('ciipacketcountcsnps', (YLeaf(YType.uint32, 'ciiPacketCountCSNPs'), ['int'])),
                    ('ciipacketcountpsnps', (YLeaf(YType.uint32, 'ciiPacketCountPSNPs'), ['int'])),
                    ('ciipacketcountunknowns', (YLeaf(YType.uint32, 'ciiPacketCountUnknowns'), ['int'])),
                ])
                self.ciicircindex = None
                self.ciipacketcountlevel = None
                self.ciipacketcountdirection = None
                self.ciipacketcountiihellos = None
                self.ciipacketcountishellos = None
                self.ciipacketcounteshellos = None
                self.ciipacketcountlsps = None
                self.ciipacketcountcsnps = None
                self.ciipacketcountpsnps = None
                self.ciipacketcountunknowns = None
                self._segment_path = lambda: "ciiPacketCounterEntry" + "[ciiCircIndex='" + str(self.ciicircindex) + "']" + "[ciiPacketCountLevel='" + str(self.ciipacketcountlevel) + "']" + "[ciiPacketCountDirection='" + str(self.ciipacketcountdirection) + "']"
                self._absolute_path = lambda: "CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/ciiPacketCounterTable/%s" % self._segment_path()
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(CISCOIETFISISMIB.CiiPacketCounterTable.CiiPacketCounterEntry, ['ciicircindex', 'ciipacketcountlevel', 'ciipacketcountdirection', 'ciipacketcountiihellos', 'ciipacketcountishellos', 'ciipacketcounteshellos', 'ciipacketcountlsps', 'ciipacketcountcsnps', 'ciipacketcountpsnps', 'ciipacketcountunknowns'], name, value)

            class CiiPacketCountDirection(Enum):
                """
                CiiPacketCountDirection (Enum Class)

                Were we sending or receiving these PDUs?

                .. data:: sending = 1

                .. data:: receiving = 2

                """

                sending = Enum.YLeaf(1, "sending")

                receiving = Enum.YLeaf(2, "receiving")


            class CiiPacketCountLevel(Enum):
                """
                CiiPacketCountLevel (Enum Class)

                The level at which these PDU counts have been collected.

                .. data:: level1 = 1

                .. data:: level2 = 2

                """

                level1 = Enum.YLeaf(1, "level1")

                level2 = Enum.YLeaf(2, "level2")





    class CiiISAdjTable(Entity):
        """
        The table of adjacencies to Intermediate Systems.
        
        .. attribute:: ciiisadjentry
        
        	Each entry corresponds to one adjacency to an Intermediate System on this system
        	**type**\: list of  		 :py:class:`CiiISAdjEntry <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiISAdjTable.CiiISAdjEntry>`
        
        	**config**\: False
        
        

        """

        _prefix = 'CISCO-IETF-ISIS-MIB'
        _revision = '2005-08-16'

        def __init__(self):
            super(CISCOIETFISISMIB.CiiISAdjTable, self).__init__()

            self.yang_name = "ciiISAdjTable"
            self.yang_parent_name = "CISCO-IETF-ISIS-MIB"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([("ciiISAdjEntry", ("ciiisadjentry", CISCOIETFISISMIB.CiiISAdjTable.CiiISAdjEntry))])
            self._leafs = OrderedDict()

            self.ciiisadjentry = YList(self)
            self._segment_path = lambda: "ciiISAdjTable"
            self._absolute_path = lambda: "CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(CISCOIETFISISMIB.CiiISAdjTable, [], name, value)


        class CiiISAdjEntry(Entity):
            """
            Each entry corresponds to one adjacency to an
            Intermediate System on this system.
            
            .. attribute:: ciicircindex  (key)
            
            	
            	**type**\: int
            
            	**range:** 1..2147483647
            
            	**refers to**\:  :py:class:`ciicircindex <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiCircTable.CiiCircEntry>`
            
            	**config**\: False
            
            .. attribute:: ciiisadjindex  (key)
            
            	A unique value identifying the IS adjacency from all other such adjacencies on this circuit. This value is automatically assigned by the system when the adjacency is created
            	**type**\: int
            
            	**range:** 1..2000000000
            
            	**config**\: False
            
            .. attribute:: ciiisadjstate
            
            	The state of the adjacency
            	**type**\:  :py:class:`CiiISAdjState <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiISAdjTable.CiiISAdjEntry.CiiISAdjState>`
            
            	**config**\: False
            
            .. attribute:: ciiisadj3waystate
            
            	The 3Way state of the adjacency.  These are picked to match the historical on\-the\-wire representation of the 3Way state, and are not intended to match ciiISAdjState
            	**type**\:  :py:class:`CiiISAdj3WayState <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiISAdjTable.CiiISAdjEntry.CiiISAdj3WayState>`
            
            	**config**\: False
            
            .. attribute:: ciiisadjneighsnpaaddress
            
            	The SNPA address of the neighboring system
            	**type**\: str
            
            	**length:** 0..20
            
            	**config**\: False
            
            .. attribute:: ciiisadjneighsystype
            
            	The type of the neighboring system
            	**type**\:  :py:class:`CiiISAdjNeighSysType <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiISAdjTable.CiiISAdjEntry.CiiISAdjNeighSysType>`
            
            	**config**\: False
            
            .. attribute:: ciiisadjneighsysid
            
            	The system ID of the neighboring Intermediate System
            	**type**\: str
            
            	**length:** 6..6
            
            	**config**\: False
            
            .. attribute:: ciiisadjnbrextendedcircid
            
            	The 4 byte Extended Circuit ID learned from the Neighbor during 3\-way handshake, or 0
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**config**\: False
            
            .. attribute:: ciiisadjusage
            
            	How is the adjacency used?  On a point\-to\-point link, this might be level1and2, but on a LAN, the usage will be level1 on the adjacency between peers at L1, and level2 for the adjacency between peers at L2
            	**type**\:  :py:class:`CiiISAdjUsage <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiISAdjTable.CiiISAdjEntry.CiiISAdjUsage>`
            
            	**config**\: False
            
            .. attribute:: ciiisadjholdtimer
            
            	The holding time in seconds for this adjacency. This value is based on received IIH PDUs and the elapsed time since receipt
            	**type**\: int
            
            	**range:** 1..65535
            
            	**config**\: False
            
            	**units**\: seconds
            
            .. attribute:: ciiisadjneighpriority
            
            	Priority of the neighboring Intermediate System for becoming the Designated Intermediate System
            	**type**\: int
            
            	**range:** 0..127
            
            	**config**\: False
            
            .. attribute:: ciiisadjlastuptime
            
            	If the ciiISAdjState is in state 'up', the value of sysUpTime when the adjacency most recently entered the state 'up',  or 0 if it has never been in state 'up'
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**config**\: False
            
            	**units**\: hundredths of a second
            
            

            """

            _prefix = 'CISCO-IETF-ISIS-MIB'
            _revision = '2005-08-16'

            def __init__(self):
                super(CISCOIETFISISMIB.CiiISAdjTable.CiiISAdjEntry, self).__init__()

                self.yang_name = "ciiISAdjEntry"
                self.yang_parent_name = "ciiISAdjTable"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['ciicircindex','ciiisadjindex']
                self._child_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('ciicircindex', (YLeaf(YType.str, 'ciiCircIndex'), ['int'])),
                    ('ciiisadjindex', (YLeaf(YType.int32, 'ciiISAdjIndex'), ['int'])),
                    ('ciiisadjstate', (YLeaf(YType.enumeration, 'ciiISAdjState'), [('ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB', 'CISCOIETFISISMIB', 'CiiISAdjTable.CiiISAdjEntry.CiiISAdjState')])),
                    ('ciiisadj3waystate', (YLeaf(YType.enumeration, 'ciiISAdj3WayState'), [('ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB', 'CISCOIETFISISMIB', 'CiiISAdjTable.CiiISAdjEntry.CiiISAdj3WayState')])),
                    ('ciiisadjneighsnpaaddress', (YLeaf(YType.str, 'ciiISAdjNeighSNPAAddress'), ['str'])),
                    ('ciiisadjneighsystype', (YLeaf(YType.enumeration, 'ciiISAdjNeighSysType'), [('ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB', 'CISCOIETFISISMIB', 'CiiISAdjTable.CiiISAdjEntry.CiiISAdjNeighSysType')])),
                    ('ciiisadjneighsysid', (YLeaf(YType.str, 'ciiISAdjNeighSysID'), ['str'])),
                    ('ciiisadjnbrextendedcircid', (YLeaf(YType.uint32, 'ciiISAdjNbrExtendedCircID'), ['int'])),
                    ('ciiisadjusage', (YLeaf(YType.enumeration, 'ciiISAdjUsage'), [('ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB', 'CISCOIETFISISMIB', 'CiiISAdjTable.CiiISAdjEntry.CiiISAdjUsage')])),
                    ('ciiisadjholdtimer', (YLeaf(YType.uint32, 'ciiISAdjHoldTimer'), ['int'])),
                    ('ciiisadjneighpriority', (YLeaf(YType.int32, 'ciiISAdjNeighPriority'), ['int'])),
                    ('ciiisadjlastuptime', (YLeaf(YType.uint32, 'ciiISAdjLastUpTime'), ['int'])),
                ])
                self.ciicircindex = None
                self.ciiisadjindex = None
                self.ciiisadjstate = None
                self.ciiisadj3waystate = None
                self.ciiisadjneighsnpaaddress = None
                self.ciiisadjneighsystype = None
                self.ciiisadjneighsysid = None
                self.ciiisadjnbrextendedcircid = None
                self.ciiisadjusage = None
                self.ciiisadjholdtimer = None
                self.ciiisadjneighpriority = None
                self.ciiisadjlastuptime = None
                self._segment_path = lambda: "ciiISAdjEntry" + "[ciiCircIndex='" + str(self.ciicircindex) + "']" + "[ciiISAdjIndex='" + str(self.ciiisadjindex) + "']"
                self._absolute_path = lambda: "CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/ciiISAdjTable/%s" % self._segment_path()
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(CISCOIETFISISMIB.CiiISAdjTable.CiiISAdjEntry, ['ciicircindex', 'ciiisadjindex', 'ciiisadjstate', 'ciiisadj3waystate', 'ciiisadjneighsnpaaddress', 'ciiisadjneighsystype', 'ciiisadjneighsysid', 'ciiisadjnbrextendedcircid', 'ciiisadjusage', 'ciiisadjholdtimer', 'ciiisadjneighpriority', 'ciiisadjlastuptime'], name, value)

            class CiiISAdj3WayState(Enum):
                """
                CiiISAdj3WayState (Enum Class)

                The 3Way state of the adjacency.  These are picked

                to match the historical on\-the\-wire representation

                of the 3Way state, and are not intended to match

                ciiISAdjState.

                .. data:: up = 0

                .. data:: initializing = 1

                .. data:: down = 2

                .. data:: failed = 3

                """

                up = Enum.YLeaf(0, "up")

                initializing = Enum.YLeaf(1, "initializing")

                down = Enum.YLeaf(2, "down")

                failed = Enum.YLeaf(3, "failed")


            class CiiISAdjNeighSysType(Enum):
                """
                CiiISAdjNeighSysType (Enum Class)

                The type of the neighboring system.

                .. data:: l1IntermediateSystem = 1

                .. data:: l2IntermediateSystem = 2

                .. data:: l1L2IntermediateSystem = 3

                .. data:: unknown = 4

                """

                l1IntermediateSystem = Enum.YLeaf(1, "l1IntermediateSystem")

                l2IntermediateSystem = Enum.YLeaf(2, "l2IntermediateSystem")

                l1L2IntermediateSystem = Enum.YLeaf(3, "l1L2IntermediateSystem")

                unknown = Enum.YLeaf(4, "unknown")


            class CiiISAdjState(Enum):
                """
                CiiISAdjState (Enum Class)

                The state of the adjacency

                .. data:: down = 1

                .. data:: initializing = 2

                .. data:: up = 3

                .. data:: failed = 4

                """

                down = Enum.YLeaf(1, "down")

                initializing = Enum.YLeaf(2, "initializing")

                up = Enum.YLeaf(3, "up")

                failed = Enum.YLeaf(4, "failed")


            class CiiISAdjUsage(Enum):
                """
                CiiISAdjUsage (Enum Class)

                How is the adjacency used?  On a point\-to\-point link,

                this might be level1and2, but on a LAN, the usage will

                be level1 on the adjacency between peers at L1,

                and level2 for the adjacency between peers at L2.

                .. data:: level1 = 1

                .. data:: level2 = 2

                .. data:: level1and2 = 3

                """

                level1 = Enum.YLeaf(1, "level1")

                level2 = Enum.YLeaf(2, "level2")

                level1and2 = Enum.YLeaf(3, "level1and2")





    class CiiISAdjAreaAddrTable(Entity):
        """
        This table contains the set of Area Addresses of
        neighboring Intermediate Systems as reported in received
        IIH PDUs.
        
        .. attribute:: ciiisadjareaaddrentry
        
        	Each entry contains one Area Address reported by a neighboring Intermediate System in its IIH PDUs
        	**type**\: list of  		 :py:class:`CiiISAdjAreaAddrEntry <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiISAdjAreaAddrTable.CiiISAdjAreaAddrEntry>`
        
        	**config**\: False
        
        

        """

        _prefix = 'CISCO-IETF-ISIS-MIB'
        _revision = '2005-08-16'

        def __init__(self):
            super(CISCOIETFISISMIB.CiiISAdjAreaAddrTable, self).__init__()

            self.yang_name = "ciiISAdjAreaAddrTable"
            self.yang_parent_name = "CISCO-IETF-ISIS-MIB"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([("ciiISAdjAreaAddrEntry", ("ciiisadjareaaddrentry", CISCOIETFISISMIB.CiiISAdjAreaAddrTable.CiiISAdjAreaAddrEntry))])
            self._leafs = OrderedDict()

            self.ciiisadjareaaddrentry = YList(self)
            self._segment_path = lambda: "ciiISAdjAreaAddrTable"
            self._absolute_path = lambda: "CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(CISCOIETFISISMIB.CiiISAdjAreaAddrTable, [], name, value)


        class CiiISAdjAreaAddrEntry(Entity):
            """
            Each entry contains one Area Address reported by a
            neighboring Intermediate System in its IIH PDUs.
            
            .. attribute:: ciicircindex  (key)
            
            	
            	**type**\: int
            
            	**range:** 1..2147483647
            
            	**refers to**\:  :py:class:`ciicircindex <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiCircTable.CiiCircEntry>`
            
            	**config**\: False
            
            .. attribute:: ciiisadjindex  (key)
            
            	
            	**type**\: int
            
            	**range:** 1..2000000000
            
            	**refers to**\:  :py:class:`ciiisadjindex <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiISAdjTable.CiiISAdjEntry>`
            
            	**config**\: False
            
            .. attribute:: ciiisadjareaaddrindex  (key)
            
            	An index for the areas associated with one neighbor. This provides a simple way to walk the table
            	**type**\: int
            
            	**range:** 1..2000000000
            
            	**config**\: False
            
            .. attribute:: ciiisadjareaaddress
            
            	One Area Address as reported in IIH PDUs received from the neighbor
            	**type**\: str
            
            	**length:** 0..20
            
            	**config**\: False
            
            

            """

            _prefix = 'CISCO-IETF-ISIS-MIB'
            _revision = '2005-08-16'

            def __init__(self):
                super(CISCOIETFISISMIB.CiiISAdjAreaAddrTable.CiiISAdjAreaAddrEntry, self).__init__()

                self.yang_name = "ciiISAdjAreaAddrEntry"
                self.yang_parent_name = "ciiISAdjAreaAddrTable"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['ciicircindex','ciiisadjindex','ciiisadjareaaddrindex']
                self._child_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('ciicircindex', (YLeaf(YType.str, 'ciiCircIndex'), ['int'])),
                    ('ciiisadjindex', (YLeaf(YType.str, 'ciiISAdjIndex'), ['int'])),
                    ('ciiisadjareaaddrindex', (YLeaf(YType.int32, 'ciiISAdjAreaAddrIndex'), ['int'])),
                    ('ciiisadjareaaddress', (YLeaf(YType.str, 'ciiISAdjAreaAddress'), ['str'])),
                ])
                self.ciicircindex = None
                self.ciiisadjindex = None
                self.ciiisadjareaaddrindex = None
                self.ciiisadjareaaddress = None
                self._segment_path = lambda: "ciiISAdjAreaAddrEntry" + "[ciiCircIndex='" + str(self.ciicircindex) + "']" + "[ciiISAdjIndex='" + str(self.ciiisadjindex) + "']" + "[ciiISAdjAreaAddrIndex='" + str(self.ciiisadjareaaddrindex) + "']"
                self._absolute_path = lambda: "CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/ciiISAdjAreaAddrTable/%s" % self._segment_path()
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(CISCOIETFISISMIB.CiiISAdjAreaAddrTable.CiiISAdjAreaAddrEntry, ['ciicircindex', 'ciiisadjindex', 'ciiisadjareaaddrindex', 'ciiisadjareaaddress'], name, value)




    class CiiISAdjIPAddrTable(Entity):
        """
        This table contains the set of IP Addresses of
        neighboring Intermediate Systems as reported in received
        IIH PDUs.
        
        .. attribute:: ciiisadjipaddrentry
        
        	Each entry contains one IP Address reported by a neighboring Intermediate System in its IIH PDUs
        	**type**\: list of  		 :py:class:`CiiISAdjIPAddrEntry <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiISAdjIPAddrTable.CiiISAdjIPAddrEntry>`
        
        	**config**\: False
        
        

        """

        _prefix = 'CISCO-IETF-ISIS-MIB'
        _revision = '2005-08-16'

        def __init__(self):
            super(CISCOIETFISISMIB.CiiISAdjIPAddrTable, self).__init__()

            self.yang_name = "ciiISAdjIPAddrTable"
            self.yang_parent_name = "CISCO-IETF-ISIS-MIB"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([("ciiISAdjIPAddrEntry", ("ciiisadjipaddrentry", CISCOIETFISISMIB.CiiISAdjIPAddrTable.CiiISAdjIPAddrEntry))])
            self._leafs = OrderedDict()

            self.ciiisadjipaddrentry = YList(self)
            self._segment_path = lambda: "ciiISAdjIPAddrTable"
            self._absolute_path = lambda: "CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(CISCOIETFISISMIB.CiiISAdjIPAddrTable, [], name, value)


        class CiiISAdjIPAddrEntry(Entity):
            """
            Each entry contains one IP Address reported by a
            neighboring Intermediate System in its IIH PDUs.
            
            .. attribute:: ciicircindex  (key)
            
            	
            	**type**\: int
            
            	**range:** 1..2147483647
            
            	**refers to**\:  :py:class:`ciicircindex <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiCircTable.CiiCircEntry>`
            
            	**config**\: False
            
            .. attribute:: ciiisadjindex  (key)
            
            	
            	**type**\: int
            
            	**range:** 1..2000000000
            
            	**refers to**\:  :py:class:`ciiisadjindex <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiISAdjTable.CiiISAdjEntry>`
            
            	**config**\: False
            
            .. attribute:: ciiisadjipaddrindex  (key)
            
            	An index to this table which identifies the IP addresses to which this entry belongs
            	**type**\: int
            
            	**range:** 1..2000000000
            
            	**config**\: False
            
            .. attribute:: ciiisadjipaddrtype
            
            	The type of one IP Address as reported in IIH PDUs received from the neighbor
            	**type**\:  :py:class:`InetAddressType <ydk.models.cisco_ios_xe.INET_ADDRESS_MIB.InetAddressType>`
            
            	**config**\: False
            
            .. attribute:: ciiisadjipaddraddress
            
            	One IP Address as reported in IIH PDUs received from the neighbor
            	**type**\: str
            
            	**length:** 4..4 \| 16..16
            
            	**config**\: False
            
            

            """

            _prefix = 'CISCO-IETF-ISIS-MIB'
            _revision = '2005-08-16'

            def __init__(self):
                super(CISCOIETFISISMIB.CiiISAdjIPAddrTable.CiiISAdjIPAddrEntry, self).__init__()

                self.yang_name = "ciiISAdjIPAddrEntry"
                self.yang_parent_name = "ciiISAdjIPAddrTable"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['ciicircindex','ciiisadjindex','ciiisadjipaddrindex']
                self._child_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('ciicircindex', (YLeaf(YType.str, 'ciiCircIndex'), ['int'])),
                    ('ciiisadjindex', (YLeaf(YType.str, 'ciiISAdjIndex'), ['int'])),
                    ('ciiisadjipaddrindex', (YLeaf(YType.int32, 'ciiISAdjIPAddrIndex'), ['int'])),
                    ('ciiisadjipaddrtype', (YLeaf(YType.enumeration, 'ciiISAdjIPAddrType'), [('ydk.models.cisco_ios_xe.INET_ADDRESS_MIB', 'InetAddressType', '')])),
                    ('ciiisadjipaddraddress', (YLeaf(YType.str, 'ciiISAdjIPAddrAddress'), ['str'])),
                ])
                self.ciicircindex = None
                self.ciiisadjindex = None
                self.ciiisadjipaddrindex = None
                self.ciiisadjipaddrtype = None
                self.ciiisadjipaddraddress = None
                self._segment_path = lambda: "ciiISAdjIPAddrEntry" + "[ciiCircIndex='" + str(self.ciicircindex) + "']" + "[ciiISAdjIndex='" + str(self.ciiisadjindex) + "']" + "[ciiISAdjIPAddrIndex='" + str(self.ciiisadjipaddrindex) + "']"
                self._absolute_path = lambda: "CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/ciiISAdjIPAddrTable/%s" % self._segment_path()
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(CISCOIETFISISMIB.CiiISAdjIPAddrTable.CiiISAdjIPAddrEntry, ['ciicircindex', 'ciiisadjindex', 'ciiisadjipaddrindex', 'ciiisadjipaddrtype', 'ciiisadjipaddraddress'], name, value)




    class CiiISAdjProtSuppTable(Entity):
        """
        This table contains the set of protocols supported by
        neighboring Intermediate Systems as reported in received
        IIH PDUs.
        
        .. attribute:: ciiisadjprotsuppentry
        
        	Each entry contains one protocol supported by a neighboring Intermediate System as reported in its IIH PDUs
        	**type**\: list of  		 :py:class:`CiiISAdjProtSuppEntry <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiISAdjProtSuppTable.CiiISAdjProtSuppEntry>`
        
        	**config**\: False
        
        

        """

        _prefix = 'CISCO-IETF-ISIS-MIB'
        _revision = '2005-08-16'

        def __init__(self):
            super(CISCOIETFISISMIB.CiiISAdjProtSuppTable, self).__init__()

            self.yang_name = "ciiISAdjProtSuppTable"
            self.yang_parent_name = "CISCO-IETF-ISIS-MIB"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([("ciiISAdjProtSuppEntry", ("ciiisadjprotsuppentry", CISCOIETFISISMIB.CiiISAdjProtSuppTable.CiiISAdjProtSuppEntry))])
            self._leafs = OrderedDict()

            self.ciiisadjprotsuppentry = YList(self)
            self._segment_path = lambda: "ciiISAdjProtSuppTable"
            self._absolute_path = lambda: "CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(CISCOIETFISISMIB.CiiISAdjProtSuppTable, [], name, value)


        class CiiISAdjProtSuppEntry(Entity):
            """
            Each entry contains one protocol supported by a
            neighboring Intermediate System as reported in its IIH
            PDUs.
            
            .. attribute:: ciicircindex  (key)
            
            	
            	**type**\: int
            
            	**range:** 1..2147483647
            
            	**refers to**\:  :py:class:`ciicircindex <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiCircTable.CiiCircEntry>`
            
            	**config**\: False
            
            .. attribute:: ciiisadjindex  (key)
            
            	
            	**type**\: int
            
            	**range:** 1..2000000000
            
            	**refers to**\:  :py:class:`ciiisadjindex <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiISAdjTable.CiiISAdjEntry>`
            
            	**config**\: False
            
            .. attribute:: ciiisadjprotsuppprotocol  (key)
            
            	One supported protocol as reported in IIH PDUs received from the neighbor
            	**type**\:  :py:class:`CiiSupportedProtocol <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CiiSupportedProtocol>`
            
            	**config**\: False
            
            

            """

            _prefix = 'CISCO-IETF-ISIS-MIB'
            _revision = '2005-08-16'

            def __init__(self):
                super(CISCOIETFISISMIB.CiiISAdjProtSuppTable.CiiISAdjProtSuppEntry, self).__init__()

                self.yang_name = "ciiISAdjProtSuppEntry"
                self.yang_parent_name = "ciiISAdjProtSuppTable"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['ciicircindex','ciiisadjindex','ciiisadjprotsuppprotocol']
                self._child_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('ciicircindex', (YLeaf(YType.str, 'ciiCircIndex'), ['int'])),
                    ('ciiisadjindex', (YLeaf(YType.str, 'ciiISAdjIndex'), ['int'])),
                    ('ciiisadjprotsuppprotocol', (YLeaf(YType.enumeration, 'ciiISAdjProtSuppProtocol'), [('ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB', 'CiiSupportedProtocol', '')])),
                ])
                self.ciicircindex = None
                self.ciiisadjindex = None
                self.ciiisadjprotsuppprotocol = None
                self._segment_path = lambda: "ciiISAdjProtSuppEntry" + "[ciiCircIndex='" + str(self.ciicircindex) + "']" + "[ciiISAdjIndex='" + str(self.ciiisadjindex) + "']" + "[ciiISAdjProtSuppProtocol='" + str(self.ciiisadjprotsuppprotocol) + "']"
                self._absolute_path = lambda: "CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/ciiISAdjProtSuppTable/%s" % self._segment_path()
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(CISCOIETFISISMIB.CiiISAdjProtSuppTable.CiiISAdjProtSuppEntry, ['ciicircindex', 'ciiisadjindex', 'ciiisadjprotsuppprotocol'], name, value)




    class CiiRATable(Entity):
        """
        The table of Reachable Addresses to NSAPs or Address
        Prefixes.
        
        .. attribute:: ciiraentry
        
        	Each entry defines a Reachable Address to a NSAP or Address Prefix
        	**type**\: list of  		 :py:class:`CiiRAEntry <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiRATable.CiiRAEntry>`
        
        	**config**\: False
        
        

        """

        _prefix = 'CISCO-IETF-ISIS-MIB'
        _revision = '2005-08-16'

        def __init__(self):
            super(CISCOIETFISISMIB.CiiRATable, self).__init__()

            self.yang_name = "ciiRATable"
            self.yang_parent_name = "CISCO-IETF-ISIS-MIB"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([("ciiRAEntry", ("ciiraentry", CISCOIETFISISMIB.CiiRATable.CiiRAEntry))])
            self._leafs = OrderedDict()

            self.ciiraentry = YList(self)
            self._segment_path = lambda: "ciiRATable"
            self._absolute_path = lambda: "CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(CISCOIETFISISMIB.CiiRATable, [], name, value)


        class CiiRAEntry(Entity):
            """
            Each entry defines a Reachable Address to a NSAP or
            Address Prefix.
            
            .. attribute:: ciicircindex  (key)
            
            	
            	**type**\: int
            
            	**range:** 1..2147483647
            
            	**refers to**\:  :py:class:`ciicircindex <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiCircTable.CiiCircEntry>`
            
            	**config**\: False
            
            .. attribute:: ciiraindex  (key)
            
            	The identifier for this ciiRAEntry. This value must be unique amongst all Reachable Addresses on the same parent Circuit. This object follows the index and ManualOrAutomatic behaviors
            	**type**\: int
            
            	**range:** 1..2000000000
            
            	**config**\: False
            
            .. attribute:: ciiraexiststate
            
            	The existence state of this Reachable Address. This object follows the ManualOrAutomatic behaviors
            	**type**\:  :py:class:`RowStatus <ydk.models.cisco_ios_xe.SNMPv2_TC.RowStatus>`
            
            	**config**\: False
            
            .. attribute:: ciiraadminstate
            
            	The administrative state of the Reachable Address. This object follows the CiiAdminState and ManualOrAutomatic behaviors
            	**type**\:  :py:class:`CiiAdminState <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CiiAdminState>`
            
            	**config**\: False
            
            .. attribute:: ciiraaddrprefix
            
            	The destination of this Reachable Address. This is an Address Prefix. This object follows the replaceOnlyWhileDisabled and ManualOrAutomatic behaviors
            	**type**\: str
            
            	**length:** 0..20
            
            	**config**\: False
            
            .. attribute:: ciiramaptype
            
            	The type of mapping to be employed to ascertain the SNPA Address which should be used in forwarding PDUs for this Reachable Address prefix. This object follows the ManualOrAutomatic behavior. The following values of mapping type are defined\:      none\: The mapping is null because the neighbor SNPA is           implicit by nature of the subnetwork (e.g. a           point\-to\-point linkage).      explicit\: The subnetwork addresses in the object           ciiRASNPAAddress is to be used.      extractIDI\: The SNPA is embedded in the IDI of           the destination NSAP Address. The mapping           algorithm extracts the SNPA to be used           according to the format and encoding rules of           ISO8473/Add2. This SNPA extraction algorithm can           be used in conjunction with Reachable Address           prefixes from the X.121, F.69, E.163 and E.164           addressing subdomains.      extractDSP\: All, or a suffix, of the SNPA is embedded           in the DSP of the destination address. This SNPA           extraction algorithm extracts the embedded           subnetwork addressing information by performing a           logical AND of the ciiRASNPAMask object value           with the destination address. The part of the           SNPA extracted from the destination NSAP is           appended to the ciiRASNPAPrefix object value to           form the next hop subnetwork addressing           information
            	**type**\:  :py:class:`CiiRAMapType <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiRATable.CiiRAEntry.CiiRAMapType>`
            
            	**config**\: False
            
            .. attribute:: ciirametric
            
            	The metric value for reaching the specified prefix over this circuit. This object follows the ManualOrAutomatic behavior
            	**type**\: int
            
            	**range:** 0..63
            
            	**config**\: False
            
            .. attribute:: ciirametrictype
            
            	Indicates whether the metric is internal or external. This object follows the ManualOrAutomatic behavior
            	**type**\:  :py:class:`CiiMetricType <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CiiMetricType>`
            
            	**config**\: False
            
            .. attribute:: ciirasnpaaddress
            
            	The SNPA Address to which a PDU may be forwarded in order to reach a destination which matches the address prefix of the Reachable Address. This object follows the ManualOrAutomatic behavior
            	**type**\: str
            
            	**length:** 0..20
            
            	**config**\: False
            
            .. attribute:: ciirasnpamask
            
            	A bit mask with 1 bits indicating the positions in the effective destination address from which embedded SNPA information is to be extracted. For the extraction the first octet of the ciiRASNPAMask object value is aligned with the first octet (AFI) of the NSAP Address. If the ciiRASNPAMask object value and NSAP Address are of different lengths, the shorter of the two is logically padded with zeros before performing the extraction. This object follows the ManualOrAutomatic behavior
            	**type**\: str
            
            	**length:** 0..20
            
            	**config**\: False
            
            .. attribute:: ciirasnpaprefix
            
            	A fixed SNPA prefix for use when the ciiRAMapType is extractDSP. The SNPA Address to use is formed by concatenating the fixed SNPA prefix with a variable SNPA part that is extracted from the effective destination address. For Reachable Address prefixes in which the entire SNPA is embedded in the DSP the SNPA Prefix shall be null. This object follows the ManualOrAutomatic behavior
            	**type**\: str
            
            	**length:** 0..20
            
            	**config**\: False
            
            .. attribute:: ciiratype
            
            	The type of Reachable address. Those of type manual are created by the network manager. Those of type automatic are created through propagation of routing information from another routing protocol (eg. IDRP). 
            	**type**\:  :py:class:`CiiRAType <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiRATable.CiiRAEntry.CiiRAType>`
            
            	**config**\: False
            
            

            """

            _prefix = 'CISCO-IETF-ISIS-MIB'
            _revision = '2005-08-16'

            def __init__(self):
                super(CISCOIETFISISMIB.CiiRATable.CiiRAEntry, self).__init__()

                self.yang_name = "ciiRAEntry"
                self.yang_parent_name = "ciiRATable"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['ciicircindex','ciiraindex']
                self._child_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('ciicircindex', (YLeaf(YType.str, 'ciiCircIndex'), ['int'])),
                    ('ciiraindex', (YLeaf(YType.int32, 'ciiRAIndex'), ['int'])),
                    ('ciiraexiststate', (YLeaf(YType.enumeration, 'ciiRAExistState'), [('ydk.models.cisco_ios_xe.SNMPv2_TC', 'RowStatus', '')])),
                    ('ciiraadminstate', (YLeaf(YType.enumeration, 'ciiRAAdminState'), [('ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB', 'CiiAdminState', '')])),
                    ('ciiraaddrprefix', (YLeaf(YType.str, 'ciiRAAddrPrefix'), ['str'])),
                    ('ciiramaptype', (YLeaf(YType.enumeration, 'ciiRAMapType'), [('ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB', 'CISCOIETFISISMIB', 'CiiRATable.CiiRAEntry.CiiRAMapType')])),
                    ('ciirametric', (YLeaf(YType.int32, 'ciiRAMetric'), ['int'])),
                    ('ciirametrictype', (YLeaf(YType.enumeration, 'ciiRAMetricType'), [('ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB', 'CiiMetricType', '')])),
                    ('ciirasnpaaddress', (YLeaf(YType.str, 'ciiRASNPAAddress'), ['str'])),
                    ('ciirasnpamask', (YLeaf(YType.str, 'ciiRASNPAMask'), ['str'])),
                    ('ciirasnpaprefix', (YLeaf(YType.str, 'ciiRASNPAPrefix'), ['str'])),
                    ('ciiratype', (YLeaf(YType.enumeration, 'ciiRAType'), [('ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB', 'CISCOIETFISISMIB', 'CiiRATable.CiiRAEntry.CiiRAType')])),
                ])
                self.ciicircindex = None
                self.ciiraindex = None
                self.ciiraexiststate = None
                self.ciiraadminstate = None
                self.ciiraaddrprefix = None
                self.ciiramaptype = None
                self.ciirametric = None
                self.ciirametrictype = None
                self.ciirasnpaaddress = None
                self.ciirasnpamask = None
                self.ciirasnpaprefix = None
                self.ciiratype = None
                self._segment_path = lambda: "ciiRAEntry" + "[ciiCircIndex='" + str(self.ciicircindex) + "']" + "[ciiRAIndex='" + str(self.ciiraindex) + "']"
                self._absolute_path = lambda: "CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/ciiRATable/%s" % self._segment_path()
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(CISCOIETFISISMIB.CiiRATable.CiiRAEntry, ['ciicircindex', 'ciiraindex', 'ciiraexiststate', 'ciiraadminstate', 'ciiraaddrprefix', 'ciiramaptype', 'ciirametric', 'ciirametrictype', 'ciirasnpaaddress', 'ciirasnpamask', 'ciirasnpaprefix', 'ciiratype'], name, value)

            class CiiRAMapType(Enum):
                """
                CiiRAMapType (Enum Class)

                The type of mapping to be employed to ascertain the SNPA

                Address which should be used in forwarding PDUs for this

                Reachable Address prefix. This object follows the

                ManualOrAutomatic behavior. The following values of

                mapping type are defined\:

                    none\: The mapping is null because the neighbor SNPA is

                          implicit by nature of the subnetwork (e.g. a

                          point\-to\-point linkage).

                    explicit\: The subnetwork addresses in the object

                          ciiRASNPAAddress is to be used.

                    extractIDI\: The SNPA is embedded in the IDI of

                          the destination NSAP Address. The mapping

                          algorithm extracts the SNPA to be used

                          according to the format and encoding rules of

                          ISO8473/Add2. This SNPA extraction algorithm can

                          be used in conjunction with Reachable Address

                          prefixes from the X.121, F.69, E.163 and E.164

                          addressing subdomains.

                    extractDSP\: All, or a suffix, of the SNPA is embedded

                          in the DSP of the destination address. This SNPA

                          extraction algorithm extracts the embedded

                          subnetwork addressing information by performing a

                          logical AND of the ciiRASNPAMask object value

                          with the destination address. The part of the

                          SNPA extracted from the destination NSAP is

                          appended to the ciiRASNPAPrefix object value to

                          form the next hop subnetwork addressing

                          information.

                .. data:: none = 1

                .. data:: explicit = 2

                .. data:: extractIDI = 3

                .. data:: extractDSP = 4

                """

                none = Enum.YLeaf(1, "none")

                explicit = Enum.YLeaf(2, "explicit")

                extractIDI = Enum.YLeaf(3, "extractIDI")

                extractDSP = Enum.YLeaf(4, "extractDSP")


            class CiiRAType(Enum):
                """
                CiiRAType (Enum Class)

                The type of Reachable address. Those of type

                manual are created by the network manager. Those

                of type automatic are created through propagation

                of routing information from another routing

                protocol (eg. IDRP). 

                .. data:: manual = 1

                .. data:: automatic = 2

                """

                manual = Enum.YLeaf(1, "manual")

                automatic = Enum.YLeaf(2, "automatic")





    class CiiIPRATable(Entity):
        """
        The table of IP Reachable Addresses to networks,
        subnetworks or hosts either manually configured or
        learned from another protocol.
        
        .. attribute:: ciiipraentry
        
        	Each entry defines an IP Reachable Address to a network, subnetwork or host.  Each IP Reachable Address may have multiple entries in the table, one for each equal cost path to the reachable address
        	**type**\: list of  		 :py:class:`CiiIPRAEntry <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiIPRATable.CiiIPRAEntry>`
        
        	**config**\: False
        
        

        """

        _prefix = 'CISCO-IETF-ISIS-MIB'
        _revision = '2005-08-16'

        def __init__(self):
            super(CISCOIETFISISMIB.CiiIPRATable, self).__init__()

            self.yang_name = "ciiIPRATable"
            self.yang_parent_name = "CISCO-IETF-ISIS-MIB"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([("ciiIPRAEntry", ("ciiipraentry", CISCOIETFISISMIB.CiiIPRATable.CiiIPRAEntry))])
            self._leafs = OrderedDict()

            self.ciiipraentry = YList(self)
            self._segment_path = lambda: "ciiIPRATable"
            self._absolute_path = lambda: "CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(CISCOIETFISISMIB.CiiIPRATable, [], name, value)


        class CiiIPRAEntry(Entity):
            """
            Each entry defines an IP Reachable Address to a network,
            subnetwork or host.
            
            Each IP Reachable Address may have multiple entries in the
            table, one for each equal cost path to the reachable address.
            
            .. attribute:: ciiipradesttype  (key)
            
            	The type of this IP Reachable Address.  This object follows the ManualOrAutomatic behavior
            	**type**\:  :py:class:`InetAddressType <ydk.models.cisco_ios_xe.INET_ADDRESS_MIB.InetAddressType>`
            
            	**config**\: False
            
            .. attribute:: ciiipradest  (key)
            
            	The destination of this IP Reachable Address. This is either a network address, subnetwork address or host address. This object follows the ManualOrAutomatic behavior
            	**type**\: str
            
            	**length:** 4..4 \| 16..16
            
            	**config**\: False
            
            .. attribute:: ciiipradestprefixlen  (key)
            
            	The length of the IP Netmask for Reachability Address. This object follows the ManualOrAutomatic behavior
            	**type**\: int
            
            	**range:** 0..128
            
            	**config**\: False
            
            .. attribute:: ciiipranexthopindex  (key)
            
            	Index of next hop.  Used when there are multiple Equal Cost Multipath alternatives for the same destination
            	**type**\: int
            
            	**range:** 1..65535
            
            	**config**\: False
            
            .. attribute:: ciiipranexthoptype
            
            	The type of the IP next hop address
            	**type**\:  :py:class:`InetAddressType <ydk.models.cisco_ios_xe.INET_ADDRESS_MIB.InetAddressType>`
            
            	**config**\: False
            
            .. attribute:: ciiipranexthop
            
            	The IP next hop to this destination
            	**type**\: str
            
            	**length:** 4..4 \| 16..16
            
            	**config**\: False
            
            .. attribute:: ciiipratype
            
            	The type of this IP Reachable Address. Those of type manual are created by the network manager. Those of type automatic are created through propagation of routing information from another routing protocol.  This object follows the ManualOrAutomatic behavior
            	**type**\:  :py:class:`CiiIPRAType <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiIPRATable.CiiIPRAEntry.CiiIPRAType>`
            
            	**config**\: False
            
            .. attribute:: ciiipraexiststate
            
            	The state of this IP Reachable Address. This object follows the ExistenceState and ManualOrAutomatic behaviors
            	**type**\:  :py:class:`RowStatus <ydk.models.cisco_ios_xe.SNMPv2_TC.RowStatus>`
            
            	**config**\: False
            
            .. attribute:: ciiipraadminstate
            
            	The administrative state of the IP Reachable Address. This object follows the CiiAdminState and ManualOrAutomatic behaviors
            	**type**\:  :py:class:`CiiAdminState <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CiiAdminState>`
            
            	**config**\: False
            
            .. attribute:: ciiiprametric
            
            	The metric value for reaching the specified destination over this circuit. This object follows the ManualOrAutomatic behavior
            	**type**\: int
            
            	**range:** 0..63
            
            	**config**\: False
            
            .. attribute:: ciiiprametrictype
            
            	Indicates whether the metric is internal or external. This object follows the ManualOrAutomatic behavior
            	**type**\:  :py:class:`CiiMetricType <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CiiMetricType>`
            
            	**config**\: False
            
            .. attribute:: ciiiprafullmetric
            
            	The wide metric value for reaching the specified destination over this circuit. This object follows the ManualOrAutomatic behavior
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**config**\: False
            
            .. attribute:: ciiiprasnpaaddress
            
            	The SNPA Address to which a PDU may be forwarded in order to reach a destination which matches this IP Reachable Address. This object follows the ManualOrAutomatic behavior
            	**type**\: str
            
            	**length:** 0..20
            
            	**config**\: False
            
            .. attribute:: ciiiprasourcetype
            
            	The origin of this route
            	**type**\:  :py:class:`CiiIPRASourceType <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiIPRATable.CiiIPRAEntry.CiiIPRASourceType>`
            
            	**config**\: False
            
            

            """

            _prefix = 'CISCO-IETF-ISIS-MIB'
            _revision = '2005-08-16'

            def __init__(self):
                super(CISCOIETFISISMIB.CiiIPRATable.CiiIPRAEntry, self).__init__()

                self.yang_name = "ciiIPRAEntry"
                self.yang_parent_name = "ciiIPRATable"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['ciiipradesttype','ciiipradest','ciiipradestprefixlen','ciiipranexthopindex']
                self._child_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('ciiipradesttype', (YLeaf(YType.enumeration, 'ciiIPRADestType'), [('ydk.models.cisco_ios_xe.INET_ADDRESS_MIB', 'InetAddressType', '')])),
                    ('ciiipradest', (YLeaf(YType.str, 'ciiIPRADest'), ['str'])),
                    ('ciiipradestprefixlen', (YLeaf(YType.uint32, 'ciiIPRADestPrefixLen'), ['int'])),
                    ('ciiipranexthopindex', (YLeaf(YType.int32, 'ciiIPRANextHopIndex'), ['int'])),
                    ('ciiipranexthoptype', (YLeaf(YType.enumeration, 'ciiIPRANextHopType'), [('ydk.models.cisco_ios_xe.INET_ADDRESS_MIB', 'InetAddressType', '')])),
                    ('ciiipranexthop', (YLeaf(YType.str, 'ciiIPRANextHop'), ['str'])),
                    ('ciiipratype', (YLeaf(YType.enumeration, 'ciiIPRAType'), [('ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB', 'CISCOIETFISISMIB', 'CiiIPRATable.CiiIPRAEntry.CiiIPRAType')])),
                    ('ciiipraexiststate', (YLeaf(YType.enumeration, 'ciiIPRAExistState'), [('ydk.models.cisco_ios_xe.SNMPv2_TC', 'RowStatus', '')])),
                    ('ciiipraadminstate', (YLeaf(YType.enumeration, 'ciiIPRAAdminState'), [('ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB', 'CiiAdminState', '')])),
                    ('ciiiprametric', (YLeaf(YType.int32, 'ciiIPRAMetric'), ['int'])),
                    ('ciiiprametrictype', (YLeaf(YType.enumeration, 'ciiIPRAMetricType'), [('ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB', 'CiiMetricType', '')])),
                    ('ciiiprafullmetric', (YLeaf(YType.uint32, 'ciiIPRAFullMetric'), ['int'])),
                    ('ciiiprasnpaaddress', (YLeaf(YType.str, 'ciiIPRASNPAAddress'), ['str'])),
                    ('ciiiprasourcetype', (YLeaf(YType.enumeration, 'ciiIPRASourceType'), [('ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB', 'CISCOIETFISISMIB', 'CiiIPRATable.CiiIPRAEntry.CiiIPRASourceType')])),
                ])
                self.ciiipradesttype = None
                self.ciiipradest = None
                self.ciiipradestprefixlen = None
                self.ciiipranexthopindex = None
                self.ciiipranexthoptype = None
                self.ciiipranexthop = None
                self.ciiipratype = None
                self.ciiipraexiststate = None
                self.ciiipraadminstate = None
                self.ciiiprametric = None
                self.ciiiprametrictype = None
                self.ciiiprafullmetric = None
                self.ciiiprasnpaaddress = None
                self.ciiiprasourcetype = None
                self._segment_path = lambda: "ciiIPRAEntry" + "[ciiIPRADestType='" + str(self.ciiipradesttype) + "']" + "[ciiIPRADest='" + str(self.ciiipradest) + "']" + "[ciiIPRADestPrefixLen='" + str(self.ciiipradestprefixlen) + "']" + "[ciiIPRANextHopIndex='" + str(self.ciiipranexthopindex) + "']"
                self._absolute_path = lambda: "CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/ciiIPRATable/%s" % self._segment_path()
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(CISCOIETFISISMIB.CiiIPRATable.CiiIPRAEntry, ['ciiipradesttype', 'ciiipradest', 'ciiipradestprefixlen', 'ciiipranexthopindex', 'ciiipranexthoptype', 'ciiipranexthop', 'ciiipratype', 'ciiipraexiststate', 'ciiipraadminstate', 'ciiiprametric', 'ciiiprametrictype', 'ciiiprafullmetric', 'ciiiprasnpaaddress', 'ciiiprasourcetype'], name, value)

            class CiiIPRASourceType(Enum):
                """
                CiiIPRASourceType (Enum Class)

                The origin of this route.

                .. data:: static = 1

                .. data:: direct = 2

                .. data:: ospfv2 = 3

                .. data:: ospfv3 = 4

                .. data:: isis = 5

                .. data:: rip = 6

                .. data:: igrp = 7

                .. data:: eigrp = 8

                .. data:: bgp = 9

                .. data:: other = 10

                """

                static = Enum.YLeaf(1, "static")

                direct = Enum.YLeaf(2, "direct")

                ospfv2 = Enum.YLeaf(3, "ospfv2")

                ospfv3 = Enum.YLeaf(4, "ospfv3")

                isis = Enum.YLeaf(5, "isis")

                rip = Enum.YLeaf(6, "rip")

                igrp = Enum.YLeaf(7, "igrp")

                eigrp = Enum.YLeaf(8, "eigrp")

                bgp = Enum.YLeaf(9, "bgp")

                other = Enum.YLeaf(10, "other")


            class CiiIPRAType(Enum):
                """
                CiiIPRAType (Enum Class)

                The type of this IP Reachable Address. Those of type

                manual are created by the network manager. Those of type

                automatic are created through propagation of routing

                information from another routing protocol.  This object

                follows the ManualOrAutomatic behavior.

                .. data:: manual = 1

                .. data:: automatic = 2

                """

                manual = Enum.YLeaf(1, "manual")

                automatic = Enum.YLeaf(2, "automatic")





    class CiiLSPSummaryTable(Entity):
        """
        The table of LSP Headers.
        
        .. attribute:: ciilspsummaryentry
        
        	Each entry provides a summary describing an LSP currently stored in the system
        	**type**\: list of  		 :py:class:`CiiLSPSummaryEntry <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiLSPSummaryTable.CiiLSPSummaryEntry>`
        
        	**config**\: False
        
        

        """

        _prefix = 'CISCO-IETF-ISIS-MIB'
        _revision = '2005-08-16'

        def __init__(self):
            super(CISCOIETFISISMIB.CiiLSPSummaryTable, self).__init__()

            self.yang_name = "ciiLSPSummaryTable"
            self.yang_parent_name = "CISCO-IETF-ISIS-MIB"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([("ciiLSPSummaryEntry", ("ciilspsummaryentry", CISCOIETFISISMIB.CiiLSPSummaryTable.CiiLSPSummaryEntry))])
            self._leafs = OrderedDict()

            self.ciilspsummaryentry = YList(self)
            self._segment_path = lambda: "ciiLSPSummaryTable"
            self._absolute_path = lambda: "CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(CISCOIETFISISMIB.CiiLSPSummaryTable, [], name, value)


        class CiiLSPSummaryEntry(Entity):
            """
            Each entry provides a summary describing an
            LSP currently stored in the system.
            
            .. attribute:: ciilsplevel  (key)
            
            	At which level does this LSP appear?
            	**type**\:  :py:class:`CiiISLevel <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CiiISLevel>`
            
            	**config**\: False
            
            .. attribute:: ciilspid  (key)
            
            	The 8 byte LSP ID, consisting of the SystemID, Circuit ID, and Fragment Number
            	**type**\: str
            
            	**length:** 0..0 \| 8..8
            
            	**config**\: False
            
            .. attribute:: ciilspseq
            
            	The sequence number for this LSP
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**config**\: False
            
            .. attribute:: ciilspzerolife
            
            	Is this LSP being purged by this System?
            	**type**\: bool
            
            	**config**\: False
            
            .. attribute:: ciilspchecksum
            
            	The 16 bit Fletcher Checksum
            	**type**\: int
            
            	**range:** 0..65535
            
            	**config**\: False
            
            .. attribute:: ciilsplifetimeremain
            
            	The remaining lifetime in seconds for this LSP
            	**type**\: int
            
            	**range:** 0..65535
            
            	**config**\: False
            
            	**units**\: seconds
            
            .. attribute:: ciilsppdulength
            
            	The length of this LSP
            	**type**\: int
            
            	**range:** 0..65535
            
            	**config**\: False
            
            .. attribute:: ciilspattributes
            
            	Flags carried by the LSP
            	**type**\: int
            
            	**range:** 0..255
            
            	**config**\: False
            
            

            """

            _prefix = 'CISCO-IETF-ISIS-MIB'
            _revision = '2005-08-16'

            def __init__(self):
                super(CISCOIETFISISMIB.CiiLSPSummaryTable.CiiLSPSummaryEntry, self).__init__()

                self.yang_name = "ciiLSPSummaryEntry"
                self.yang_parent_name = "ciiLSPSummaryTable"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['ciilsplevel','ciilspid']
                self._child_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('ciilsplevel', (YLeaf(YType.enumeration, 'ciiLSPLevel'), [('ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB', 'CiiISLevel', '')])),
                    ('ciilspid', (YLeaf(YType.str, 'ciiLSPID'), ['str'])),
                    ('ciilspseq', (YLeaf(YType.uint32, 'ciiLSPSeq'), ['int'])),
                    ('ciilspzerolife', (YLeaf(YType.boolean, 'ciiLSPZeroLife'), ['bool'])),
                    ('ciilspchecksum', (YLeaf(YType.uint32, 'ciiLSPChecksum'), ['int'])),
                    ('ciilsplifetimeremain', (YLeaf(YType.uint32, 'ciiLSPLifetimeRemain'), ['int'])),
                    ('ciilsppdulength', (YLeaf(YType.uint32, 'ciiLSPPDULength'), ['int'])),
                    ('ciilspattributes', (YLeaf(YType.uint32, 'ciiLSPAttributes'), ['int'])),
                ])
                self.ciilsplevel = None
                self.ciilspid = None
                self.ciilspseq = None
                self.ciilspzerolife = None
                self.ciilspchecksum = None
                self.ciilsplifetimeremain = None
                self.ciilsppdulength = None
                self.ciilspattributes = None
                self._segment_path = lambda: "ciiLSPSummaryEntry" + "[ciiLSPLevel='" + str(self.ciilsplevel) + "']" + "[ciiLSPID='" + str(self.ciilspid) + "']"
                self._absolute_path = lambda: "CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/ciiLSPSummaryTable/%s" % self._segment_path()
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(CISCOIETFISISMIB.CiiLSPSummaryTable.CiiLSPSummaryEntry, ['ciilsplevel', 'ciilspid', 'ciilspseq', 'ciilspzerolife', 'ciilspchecksum', 'ciilsplifetimeremain', 'ciilsppdulength', 'ciilspattributes'], name, value)




    class CiiLSPTLVTable(Entity):
        """
        The contents of each LSP.
        
        .. attribute:: ciilsptlventry
        
        	Each entry describes an LSP current stored in the system
        	**type**\: list of  		 :py:class:`CiiLSPTLVEntry <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiLSPTLVTable.CiiLSPTLVEntry>`
        
        	**config**\: False
        
        

        """

        _prefix = 'CISCO-IETF-ISIS-MIB'
        _revision = '2005-08-16'

        def __init__(self):
            super(CISCOIETFISISMIB.CiiLSPTLVTable, self).__init__()

            self.yang_name = "ciiLSPTLVTable"
            self.yang_parent_name = "CISCO-IETF-ISIS-MIB"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([("ciiLSPTLVEntry", ("ciilsptlventry", CISCOIETFISISMIB.CiiLSPTLVTable.CiiLSPTLVEntry))])
            self._leafs = OrderedDict()

            self.ciilsptlventry = YList(self)
            self._segment_path = lambda: "ciiLSPTLVTable"
            self._absolute_path = lambda: "CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(CISCOIETFISISMIB.CiiLSPTLVTable, [], name, value)


        class CiiLSPTLVEntry(Entity):
            """
            Each entry describes an LSP current stored in the
            system.
            
            .. attribute:: ciilsplevel  (key)
            
            	
            	**type**\:  :py:class:`CiiISLevel <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CiiISLevel>`
            
            	**config**\: False
            
            .. attribute:: ciilspid  (key)
            
            	
            	**type**\: str
            
            	**length:** 0..0 \| 8..8
            
            	**refers to**\:  :py:class:`ciilspid <ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiLSPSummaryTable.CiiLSPSummaryEntry>`
            
            	**config**\: False
            
            .. attribute:: ciilsptlvindex  (key)
            
            	The index of this TLV in the LSP.  The first TLV has index 1 and the Nth TLV has an index of N
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**config**\: False
            
            .. attribute:: ciilsptlvseq
            
            	The sequence number for this LSP
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**config**\: False
            
            .. attribute:: ciilsptlvchecksum
            
            	The 16 bit Fletcher Checksum
            	**type**\: int
            
            	**range:** 0..65535
            
            	**config**\: False
            
            .. attribute:: ciilsptlvtype
            
            	The type of this TLV
            	**type**\: int
            
            	**range:** 0..255
            
            	**config**\: False
            
            .. attribute:: ciilsptlvlen
            
            	The length of this TLV
            	**type**\: int
            
            	**range:** 0..255
            
            	**config**\: False
            
            .. attribute:: ciilsptlvvalue
            
            	The value of this TLV
            	**type**\: str
            
            	**length:** 0..255
            
            	**config**\: False
            
            

            """

            _prefix = 'CISCO-IETF-ISIS-MIB'
            _revision = '2005-08-16'

            def __init__(self):
                super(CISCOIETFISISMIB.CiiLSPTLVTable.CiiLSPTLVEntry, self).__init__()

                self.yang_name = "ciiLSPTLVEntry"
                self.yang_parent_name = "ciiLSPTLVTable"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['ciilsplevel','ciilspid','ciilsptlvindex']
                self._child_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('ciilsplevel', (YLeaf(YType.enumeration, 'ciiLSPLevel'), [('ydk.models.cisco_ios_xe.CISCO_IETF_ISIS_MIB', 'CiiISLevel', '')])),
                    ('ciilspid', (YLeaf(YType.str, 'ciiLSPID'), ['str'])),
                    ('ciilsptlvindex', (YLeaf(YType.uint32, 'ciiLSPTLVIndex'), ['int'])),
                    ('ciilsptlvseq', (YLeaf(YType.uint32, 'ciiLSPTLVSeq'), ['int'])),
                    ('ciilsptlvchecksum', (YLeaf(YType.uint32, 'ciiLSPTLVChecksum'), ['int'])),
                    ('ciilsptlvtype', (YLeaf(YType.uint32, 'ciiLSPTLVType'), ['int'])),
                    ('ciilsptlvlen', (YLeaf(YType.uint32, 'ciiLSPTLVLen'), ['int'])),
                    ('ciilsptlvvalue', (YLeaf(YType.str, 'ciiLSPTLVValue'), ['str'])),
                ])
                self.ciilsplevel = None
                self.ciilspid = None
                self.ciilsptlvindex = None
                self.ciilsptlvseq = None
                self.ciilsptlvchecksum = None
                self.ciilsptlvtype = None
                self.ciilsptlvlen = None
                self.ciilsptlvvalue = None
                self._segment_path = lambda: "ciiLSPTLVEntry" + "[ciiLSPLevel='" + str(self.ciilsplevel) + "']" + "[ciiLSPID='" + str(self.ciilspid) + "']" + "[ciiLSPTLVIndex='" + str(self.ciilsptlvindex) + "']"
                self._absolute_path = lambda: "CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/ciiLSPTLVTable/%s" % self._segment_path()
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(CISCOIETFISISMIB.CiiLSPTLVTable.CiiLSPTLVEntry, ['ciilsplevel', 'ciilspid', 'ciilsptlvindex', 'ciilsptlvseq', 'ciilsptlvchecksum', 'ciilsptlvtype', 'ciilsptlvlen', 'ciilsptlvvalue'], name, value)



    def clone_ptr(self):
        self._top_entity = CISCOIETFISISMIB()
        return self._top_entity



