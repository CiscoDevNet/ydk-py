""" CISCO_EMBEDDED_EVENT_MGR_MIB 

The MIB module to describe and store events generated
by the Cisco Embedded Event Manager.  

The Cisco Embedded Event Manager detects hardware and software 
faults, and other events (such as OIRs) for the system.
It also enables users to configure fault recovery services
for system wide components.  The Embedded Event Manager also 
provides process reliability statistics.

The Embedded Event Manager is a policy driven process through 
which faults in the system are reported through a defined API.
The Embedded Event Manager policy engine receives notifications
when faults and other events occur.  Embedded Event Manager 
policies implement recovery based on the current state of the 
system and the actions specified in the policy for a given 
event.  Recovery actions are triggered when the policy is 
run.  Developers write and customize Embedded Event Manager 
policies to handle faults and events.

"""
from collections import OrderedDict

from ydk.types import Entity, EntityPath, Identity, Enum, YType, YLeaf, YLeafList, YList, LeafDataList, Bits, Empty, Decimal64
from ydk.filters import YFilter
from ydk.errors import YError, YModelError
from ydk.errors.error_handler import handle_type_error as _handle_type_error


class NotifySource(Enum):
    """
    NotifySource (Enum Class)

    The notification source of the history entry.

    server \- Notification was sent by the Embedded Event 

             Manager server.

    policy \- Notification was sent from within an Embedded 

             Event Manager policy.

    .. data:: server = 1

    .. data:: policy = 2

    """

    server = Enum.YLeaf(1, "server")

    policy = Enum.YLeaf(2, "policy")



class CISCOEMBEDDEDEVENTMGRMIB(Entity):
    """
    
    
    .. attribute:: ceemhistory
    
    	
    	**type**\:  :py:class:`Ceemhistory <ydk.models.cisco_ios_xe.CISCO_EMBEDDED_EVENT_MGR_MIB.CISCOEMBEDDEDEVENTMGRMIB.Ceemhistory>`
    
    .. attribute:: ceemeventmaptable
    
    	A table containing information about ceemEventIndex value mapping.  Each conceptual row specifies a  unique mapping between a ceemEventIndex value, and a  Embedded Event Manager event type.  Rows are added  dynamically as the Embedded Event Manager server learns of new event types.  This occurs when Embedded Event  Manager Event Detectors register with the Embedded  Event Manager server
    	**type**\:  :py:class:`Ceemeventmaptable <ydk.models.cisco_ios_xe.CISCO_EMBEDDED_EVENT_MGR_MIB.CISCOEMBEDDEDEVENTMGRMIB.Ceemeventmaptable>`
    
    .. attribute:: ceemhistoryeventtable
    
    	A table of Embedded Event Manager events generated by this router.  Conceptual row entries are dynamically added into  this table when Embedded Event Manager events occur.  Entries are stored in FIFO order.  When the maximum number  of entries has been reached in the table, the oldest entry  in the table is removed immediately.    When a table is reduced to a smaller size N, the oldest entries are immediately removed from the table leaving  a maximum of N entries
    	**type**\:  :py:class:`Ceemhistoryeventtable <ydk.models.cisco_ios_xe.CISCO_EMBEDDED_EVENT_MGR_MIB.CISCOEMBEDDEDEVENTMGRMIB.Ceemhistoryeventtable>`
    
    .. attribute:: ceemregisteredpolicytable
    
    	A table of Embedded Event Manager policies registered on a system. The number of entries depends on the configuration of the system.  The  maximum number is implementation dependent
    	**type**\:  :py:class:`Ceemregisteredpolicytable <ydk.models.cisco_ios_xe.CISCO_EMBEDDED_EVENT_MGR_MIB.CISCOEMBEDDEDEVENTMGRMIB.Ceemregisteredpolicytable>`
    
    

    """

    _prefix = 'CISCO-EMBEDDED-EVENT-MGR-MIB'
    _revision = '2006-11-07'

    def __init__(self):
        super(CISCOEMBEDDEDEVENTMGRMIB, self).__init__()
        self._top_entity = None

        self.yang_name = "CISCO-EMBEDDED-EVENT-MGR-MIB"
        self.yang_parent_name = "CISCO-EMBEDDED-EVENT-MGR-MIB"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([("ceemHistory", ("ceemhistory", CISCOEMBEDDEDEVENTMGRMIB.Ceemhistory)), ("ceemEventMapTable", ("ceemeventmaptable", CISCOEMBEDDEDEVENTMGRMIB.Ceemeventmaptable)), ("ceemHistoryEventTable", ("ceemhistoryeventtable", CISCOEMBEDDEDEVENTMGRMIB.Ceemhistoryeventtable)), ("ceemRegisteredPolicyTable", ("ceemregisteredpolicytable", CISCOEMBEDDEDEVENTMGRMIB.Ceemregisteredpolicytable))])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.ceemhistory = CISCOEMBEDDEDEVENTMGRMIB.Ceemhistory()
        self.ceemhistory.parent = self
        self._children_name_map["ceemhistory"] = "ceemHistory"
        self._children_yang_names.add("ceemHistory")

        self.ceemeventmaptable = CISCOEMBEDDEDEVENTMGRMIB.Ceemeventmaptable()
        self.ceemeventmaptable.parent = self
        self._children_name_map["ceemeventmaptable"] = "ceemEventMapTable"
        self._children_yang_names.add("ceemEventMapTable")

        self.ceemhistoryeventtable = CISCOEMBEDDEDEVENTMGRMIB.Ceemhistoryeventtable()
        self.ceemhistoryeventtable.parent = self
        self._children_name_map["ceemhistoryeventtable"] = "ceemHistoryEventTable"
        self._children_yang_names.add("ceemHistoryEventTable")

        self.ceemregisteredpolicytable = CISCOEMBEDDEDEVENTMGRMIB.Ceemregisteredpolicytable()
        self.ceemregisteredpolicytable.parent = self
        self._children_name_map["ceemregisteredpolicytable"] = "ceemRegisteredPolicyTable"
        self._children_yang_names.add("ceemRegisteredPolicyTable")
        self._segment_path = lambda: "CISCO-EMBEDDED-EVENT-MGR-MIB:CISCO-EMBEDDED-EVENT-MGR-MIB"


    class Ceemhistory(Entity):
        """
        
        
        .. attribute:: ceemhistorymaxevententries
        
        	The maximum number of entries that can be held in ceemHistoryEventTable
        	**type**\: int
        
        	**range:** 0..50
        
        .. attribute:: ceemhistorylastevententry
        
        	Index of last entry created in ceemHistoryEventTable
        	**type**\: int
        
        	**range:** 1..4294967295
        
        

        """

        _prefix = 'CISCO-EMBEDDED-EVENT-MGR-MIB'
        _revision = '2006-11-07'

        def __init__(self):
            super(CISCOEMBEDDEDEVENTMGRMIB.Ceemhistory, self).__init__()

            self.yang_name = "ceemHistory"
            self.yang_parent_name = "CISCO-EMBEDDED-EVENT-MGR-MIB"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('ceemhistorymaxevententries', YLeaf(YType.int32, 'ceemHistoryMaxEventEntries')),
                ('ceemhistorylastevententry', YLeaf(YType.uint32, 'ceemHistoryLastEventEntry')),
            ])
            self.ceemhistorymaxevententries = None
            self.ceemhistorylastevententry = None
            self._segment_path = lambda: "ceemHistory"
            self._absolute_path = lambda: "CISCO-EMBEDDED-EVENT-MGR-MIB:CISCO-EMBEDDED-EVENT-MGR-MIB/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(CISCOEMBEDDEDEVENTMGRMIB.Ceemhistory, ['ceemhistorymaxevententries', 'ceemhistorylastevententry'], name, value)


    class Ceemeventmaptable(Entity):
        """
        A table containing information about ceemEventIndex
        value mapping.  Each conceptual row specifies a 
        unique mapping between a ceemEventIndex value, and a 
        Embedded Event Manager event type.  Rows are added 
        dynamically as the Embedded Event Manager server learns
        of new event types.  This occurs when Embedded Event 
        Manager Event Detectors register with the Embedded 
        Event Manager server.
        
        .. attribute:: ceemeventmapentry
        
        	A mapping between an event type and an event description
        	**type**\: list of  		 :py:class:`Ceemeventmapentry <ydk.models.cisco_ios_xe.CISCO_EMBEDDED_EVENT_MGR_MIB.CISCOEMBEDDEDEVENTMGRMIB.Ceemeventmaptable.Ceemeventmapentry>`
        
        

        """

        _prefix = 'CISCO-EMBEDDED-EVENT-MGR-MIB'
        _revision = '2006-11-07'

        def __init__(self):
            super(CISCOEMBEDDEDEVENTMGRMIB.Ceemeventmaptable, self).__init__()

            self.yang_name = "ceemEventMapTable"
            self.yang_parent_name = "CISCO-EMBEDDED-EVENT-MGR-MIB"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("ceemEventMapEntry", ("ceemeventmapentry", CISCOEMBEDDEDEVENTMGRMIB.Ceemeventmaptable.Ceemeventmapentry))])
            self._leafs = OrderedDict()

            self.ceemeventmapentry = YList(self)
            self._segment_path = lambda: "ceemEventMapTable"
            self._absolute_path = lambda: "CISCO-EMBEDDED-EVENT-MGR-MIB:CISCO-EMBEDDED-EVENT-MGR-MIB/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(CISCOEMBEDDEDEVENTMGRMIB.Ceemeventmaptable, [], name, value)


        class Ceemeventmapentry(Entity):
            """
            A mapping between an event type and an event description.
            
            .. attribute:: ceemeventindex  (key)
            
            	This object uniquely identifies an event.  Events are not persisted across reloads
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: ceemeventname
            
            	The name of the Embedded Event Manager event
            	**type**\: str
            
            	**length:** 1..128
            
            .. attribute:: ceemeventdescrtext
            
            	This object specifies a human\-readable message describing information about the  Embedded Event Manager event
            	**type**\: str
            
            

            """

            _prefix = 'CISCO-EMBEDDED-EVENT-MGR-MIB'
            _revision = '2006-11-07'

            def __init__(self):
                super(CISCOEMBEDDEDEVENTMGRMIB.Ceemeventmaptable.Ceemeventmapentry, self).__init__()

                self.yang_name = "ceemEventMapEntry"
                self.yang_parent_name = "ceemEventMapTable"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['ceemeventindex']
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('ceemeventindex', YLeaf(YType.uint32, 'ceemEventIndex')),
                    ('ceemeventname', YLeaf(YType.str, 'ceemEventName')),
                    ('ceemeventdescrtext', YLeaf(YType.str, 'ceemEventDescrText')),
                ])
                self.ceemeventindex = None
                self.ceemeventname = None
                self.ceemeventdescrtext = None
                self._segment_path = lambda: "ceemEventMapEntry" + "[ceemEventIndex='" + str(self.ceemeventindex) + "']"
                self._absolute_path = lambda: "CISCO-EMBEDDED-EVENT-MGR-MIB:CISCO-EMBEDDED-EVENT-MGR-MIB/ceemEventMapTable/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(CISCOEMBEDDEDEVENTMGRMIB.Ceemeventmaptable.Ceemeventmapentry, ['ceemeventindex', 'ceemeventname', 'ceemeventdescrtext'], name, value)


    class Ceemhistoryeventtable(Entity):
        """
        A table of Embedded Event Manager events generated by this
        router.  Conceptual row entries are dynamically added into 
        this table when Embedded Event Manager events occur.
        
        Entries are stored in FIFO order.  When the maximum number 
        of entries has been reached in the table, the oldest entry 
        in the table is removed immediately.  
        
        When a table is reduced to a smaller size N, the oldest
        entries are immediately removed from the table leaving 
        a maximum of N entries.
        
        .. attribute:: ceemhistoryevententry
        
        	Information about an Embedded Event Manager event which has been generated by this router.  It provides up to four event types to support complex event specifications that are triggered when multiple events are published within a certain period of time
        	**type**\: list of  		 :py:class:`Ceemhistoryevententry <ydk.models.cisco_ios_xe.CISCO_EMBEDDED_EVENT_MGR_MIB.CISCOEMBEDDEDEVENTMGRMIB.Ceemhistoryeventtable.Ceemhistoryevententry>`
        
        

        """

        _prefix = 'CISCO-EMBEDDED-EVENT-MGR-MIB'
        _revision = '2006-11-07'

        def __init__(self):
            super(CISCOEMBEDDEDEVENTMGRMIB.Ceemhistoryeventtable, self).__init__()

            self.yang_name = "ceemHistoryEventTable"
            self.yang_parent_name = "CISCO-EMBEDDED-EVENT-MGR-MIB"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("ceemHistoryEventEntry", ("ceemhistoryevententry", CISCOEMBEDDEDEVENTMGRMIB.Ceemhistoryeventtable.Ceemhistoryevententry))])
            self._leafs = OrderedDict()

            self.ceemhistoryevententry = YList(self)
            self._segment_path = lambda: "ceemHistoryEventTable"
            self._absolute_path = lambda: "CISCO-EMBEDDED-EVENT-MGR-MIB:CISCO-EMBEDDED-EVENT-MGR-MIB/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(CISCOEMBEDDEDEVENTMGRMIB.Ceemhistoryeventtable, [], name, value)


        class Ceemhistoryevententry(Entity):
            """
            Information about an Embedded Event Manager event which has
            been generated by this router.  It provides up to four event
            types to support complex event specifications that are
            triggered when multiple events are published within a certain
            period of time.
            
            .. attribute:: ceemhistoryeventindex  (key)
            
            	A monotonically increasing non\-zero integer uniquely identifying a generated event.  When it reaches the  maximum value, the agent wraps the value back to 1  and may flush all existing entries in the event table
            	**type**\: int
            
            	**range:** 1..4294967295
            
            .. attribute:: ceemhistoryeventtype1
            
            	The type of Embedded Event Manager event which was detected. The value corresponds to an entry in the  ceemEventTable
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: ceemhistoryeventtype2
            
            	The type of Embedded Event Manager event which was detected. The value corresponds to an entry in the  ceemEventTable
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: ceemhistoryeventtype3
            
            	The type of Embedded Event Manager event which was detected. The value corresponds to an entry in the  ceemEventTable
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: ceemhistoryeventtype4
            
            	The type of Embedded Event Manager event which was detected. The value corresponds to an entry in the ceemEventTable
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: ceemhistorypolicypath
            
            	The file path on the router where the Embedded Event Manager policy that was triggered is stored.  If the size of the  file path string is larger than 128, the end characters  will be truncated
            	**type**\: str
            
            	**length:** 0..128
            
            .. attribute:: ceemhistorypolicyname
            
            	The name of the Embedded Event Manager policy that was triggered because of an Embedded Event Manager event. The name must be a valid Embedded Event Manager policy name.  It must be in the form of a valid Posix filename
            	**type**\: str
            
            	**length:** 0..128
            
            .. attribute:: ceemhistorypolicyexitstatus
            
            	The exit status of the Embedded Event Manager policy execution.  This value corresponds to the Posix process  exit status
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: ceemhistorypolicyintdata1
            
            	Arbitrary integer data that the Embedded Event Manager policy can use. Use of this object is optional. If unused by a policy, this object will not be instantiated for  that policy
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: ceemhistorypolicyintdata2
            
            	Arbitrary integer data that the Embedded Event Manager policy can use. Use of this object is optional. If unused by a policy, this object will not be instantiated for  that policy
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: ceemhistorypolicystrdata
            
            	Arbitrary string data the Embedded Event Manager policy can use.  Use of this object is optional.  If unused by a policy, this object will not be instantiated for  that policy
            	**type**\: str
            
            	**length:** 0..255
            
            .. attribute:: ceemhistorynotifytype
            
            	The notification type that was sent from the Embedded Event Manager.  The valid values are server or policy
            	**type**\:  :py:class:`NotifySource <ydk.models.cisco_ios_xe.CISCO_EMBEDDED_EVENT_MGR_MIB.NotifySource>`
            
            .. attribute:: ceemhistoryeventtype5
            
            	The type of Embedded Event Manager event which was detected. The value corresponds to an entry in the  ceemEventTable
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: ceemhistoryeventtype6
            
            	The type of Embedded Event Manager event which was detected. The value corresponds to an entry in the  ceemEventTable
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: ceemhistoryeventtype7
            
            	The type of Embedded Event Manager event which was detected. The value corresponds to an entry in the  ceemEventTable
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: ceemhistoryeventtype8
            
            	The type of Embedded Event Manager event which was detected. The value corresponds to an entry in the  ceemEventTable
            	**type**\: int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'CISCO-EMBEDDED-EVENT-MGR-MIB'
            _revision = '2006-11-07'

            def __init__(self):
                super(CISCOEMBEDDEDEVENTMGRMIB.Ceemhistoryeventtable.Ceemhistoryevententry, self).__init__()

                self.yang_name = "ceemHistoryEventEntry"
                self.yang_parent_name = "ceemHistoryEventTable"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['ceemhistoryeventindex']
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('ceemhistoryeventindex', YLeaf(YType.uint32, 'ceemHistoryEventIndex')),
                    ('ceemhistoryeventtype1', YLeaf(YType.uint32, 'ceemHistoryEventType1')),
                    ('ceemhistoryeventtype2', YLeaf(YType.uint32, 'ceemHistoryEventType2')),
                    ('ceemhistoryeventtype3', YLeaf(YType.uint32, 'ceemHistoryEventType3')),
                    ('ceemhistoryeventtype4', YLeaf(YType.uint32, 'ceemHistoryEventType4')),
                    ('ceemhistorypolicypath', YLeaf(YType.str, 'ceemHistoryPolicyPath')),
                    ('ceemhistorypolicyname', YLeaf(YType.str, 'ceemHistoryPolicyName')),
                    ('ceemhistorypolicyexitstatus', YLeaf(YType.int32, 'ceemHistoryPolicyExitStatus')),
                    ('ceemhistorypolicyintdata1', YLeaf(YType.int32, 'ceemHistoryPolicyIntData1')),
                    ('ceemhistorypolicyintdata2', YLeaf(YType.int32, 'ceemHistoryPolicyIntData2')),
                    ('ceemhistorypolicystrdata', YLeaf(YType.str, 'ceemHistoryPolicyStrData')),
                    ('ceemhistorynotifytype', YLeaf(YType.enumeration, 'ceemHistoryNotifyType')),
                    ('ceemhistoryeventtype5', YLeaf(YType.uint32, 'ceemHistoryEventType5')),
                    ('ceemhistoryeventtype6', YLeaf(YType.uint32, 'ceemHistoryEventType6')),
                    ('ceemhistoryeventtype7', YLeaf(YType.uint32, 'ceemHistoryEventType7')),
                    ('ceemhistoryeventtype8', YLeaf(YType.uint32, 'ceemHistoryEventType8')),
                ])
                self.ceemhistoryeventindex = None
                self.ceemhistoryeventtype1 = None
                self.ceemhistoryeventtype2 = None
                self.ceemhistoryeventtype3 = None
                self.ceemhistoryeventtype4 = None
                self.ceemhistorypolicypath = None
                self.ceemhistorypolicyname = None
                self.ceemhistorypolicyexitstatus = None
                self.ceemhistorypolicyintdata1 = None
                self.ceemhistorypolicyintdata2 = None
                self.ceemhistorypolicystrdata = None
                self.ceemhistorynotifytype = None
                self.ceemhistoryeventtype5 = None
                self.ceemhistoryeventtype6 = None
                self.ceemhistoryeventtype7 = None
                self.ceemhistoryeventtype8 = None
                self._segment_path = lambda: "ceemHistoryEventEntry" + "[ceemHistoryEventIndex='" + str(self.ceemhistoryeventindex) + "']"
                self._absolute_path = lambda: "CISCO-EMBEDDED-EVENT-MGR-MIB:CISCO-EMBEDDED-EVENT-MGR-MIB/ceemHistoryEventTable/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(CISCOEMBEDDEDEVENTMGRMIB.Ceemhistoryeventtable.Ceemhistoryevententry, ['ceemhistoryeventindex', 'ceemhistoryeventtype1', 'ceemhistoryeventtype2', 'ceemhistoryeventtype3', 'ceemhistoryeventtype4', 'ceemhistorypolicypath', 'ceemhistorypolicyname', 'ceemhistorypolicyexitstatus', 'ceemhistorypolicyintdata1', 'ceemhistorypolicyintdata2', 'ceemhistorypolicystrdata', 'ceemhistorynotifytype', 'ceemhistoryeventtype5', 'ceemhistoryeventtype6', 'ceemhistoryeventtype7', 'ceemhistoryeventtype8'], name, value)


    class Ceemregisteredpolicytable(Entity):
        """
        A table of Embedded Event Manager policies registered on a system.
        The number of entries depends on the configuration of the system.  The 
        maximum number is implementation dependent.
        
        .. attribute:: ceemregisteredpolicyentry
        
        	An entry in the table of Embedded Event Manager policies that are registered.  It provides up to four event types to support complex  event specifications that are triggered when multiple events are  published within a certain period of time.  A row in this table  cannot be created or deleted by SNMP operations on columns of the  table
        	**type**\: list of  		 :py:class:`Ceemregisteredpolicyentry <ydk.models.cisco_ios_xe.CISCO_EMBEDDED_EVENT_MGR_MIB.CISCOEMBEDDEDEVENTMGRMIB.Ceemregisteredpolicytable.Ceemregisteredpolicyentry>`
        
        

        """

        _prefix = 'CISCO-EMBEDDED-EVENT-MGR-MIB'
        _revision = '2006-11-07'

        def __init__(self):
            super(CISCOEMBEDDEDEVENTMGRMIB.Ceemregisteredpolicytable, self).__init__()

            self.yang_name = "ceemRegisteredPolicyTable"
            self.yang_parent_name = "CISCO-EMBEDDED-EVENT-MGR-MIB"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("ceemRegisteredPolicyEntry", ("ceemregisteredpolicyentry", CISCOEMBEDDEDEVENTMGRMIB.Ceemregisteredpolicytable.Ceemregisteredpolicyentry))])
            self._leafs = OrderedDict()

            self.ceemregisteredpolicyentry = YList(self)
            self._segment_path = lambda: "ceemRegisteredPolicyTable"
            self._absolute_path = lambda: "CISCO-EMBEDDED-EVENT-MGR-MIB:CISCO-EMBEDDED-EVENT-MGR-MIB/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(CISCOEMBEDDEDEVENTMGRMIB.Ceemregisteredpolicytable, [], name, value)


        class Ceemregisteredpolicyentry(Entity):
            """
            An entry in the table of Embedded Event Manager policies that are
            registered.  It provides up to four event types to support complex 
            event specifications that are triggered when multiple events are 
            published within a certain period of time.  A row in this table 
            cannot be created or deleted by SNMP operations on columns of the 
            table.
            
            .. attribute:: ceemregisteredpolicyindex  (key)
            
            	A monotonically increasing non\-zero integer uniquely identifying a policy registration.  When it reaches the maximum value, the agent wraps the value back to 1 upon  receiving the next policy registration
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: ceemregisteredpolicyname
            
            	The name of the Embedded Event Manager policy that was registered.  The name must be a valid Embedded Event  Manager policy name. It must be in the form of a valid  Posix filename
            	**type**\: str
            
            	**length:** 0..128
            
            .. attribute:: ceemregisteredpolicyeventtype1
            
            	The type of Embedded Event Manager event which was registered by the policy. The value corresponds to an entry in the ceemEventMapTable
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: ceemregisteredpolicyeventtype2
            
            	The type of Embedded Event Manager event which was registered by the policy. The value corresponds to an entry in the ceemEventMapTable
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: ceemregisteredpolicyeventtype3
            
            	The type of Embedded Event Manager event which was registered by the policy. The value corresponds to an entry in the ceemEventMapTable
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: ceemregisteredpolicyeventtype4
            
            	The type of Embedded Event Manager event which was registered by the policy. The value corresponds to an entry in the ceemEventMapTable
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: ceemregisteredpolicystatus
            
            	This status indicates whether the policy is enabled or disabled
            	**type**\:  :py:class:`Ceemregisteredpolicystatus <ydk.models.cisco_ios_xe.CISCO_EMBEDDED_EVENT_MGR_MIB.CISCOEMBEDDEDEVENTMGRMIB.Ceemregisteredpolicytable.Ceemregisteredpolicyentry.Ceemregisteredpolicystatus>`
            
            .. attribute:: ceemregisteredpolicytype
            
            	This variable indicates whether this is a user or system policy
            	**type**\:  :py:class:`Ceemregisteredpolicytype <ydk.models.cisco_ios_xe.CISCO_EMBEDDED_EVENT_MGR_MIB.CISCOEMBEDDEDEVENTMGRMIB.Ceemregisteredpolicytable.Ceemregisteredpolicyentry.Ceemregisteredpolicytype>`
            
            .. attribute:: ceemregisteredpolicynotifflag
            
            	This flag indicates if an SNMP notification will be sent when policy is triggered
            	**type**\: bool
            
            .. attribute:: ceemregisteredpolicyregtime
            
            	The time the policy was registered.  It is stored as a 32\-bit count of seconds since 0000 UTC, 1 January, 1970
            	**type**\: str
            
            .. attribute:: ceemregisteredpolicyenabledtime
            
            	The time the policy was last enabled.  It is stored as a 32\-bit count of seconds since 0000 UTC, 1 January, 1970
            	**type**\: str
            
            .. attribute:: ceemregisteredpolicyruntime
            
            	The last time the policy was run.  It is stored as a 32\-bit count of seconds since 0000 UTC, 1 January, 1970
            	**type**\: str
            
            .. attribute:: ceemregisteredpolicyruncount
            
            	The number of times the policy has been run
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: ceemregisteredpolicyeventtype5
            
            	The type of Embedded Event Manager event which was registered by the policy. The value corresponds to an entry in the ceemEventMapTable
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: ceemregisteredpolicyeventtype6
            
            	The type of Embedded Event Manager event which was registered by the policy. The value corresponds to an entry in the ceemEventMapTable
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: ceemregisteredpolicyeventtype7
            
            	The type of Embedded Event Manager event which was registered by the policy. The value corresponds to an entry in the ceemEventMapTable
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: ceemregisteredpolicyeventtype8
            
            	The type of Embedded Event Manager event which was registered by the policy. The value corresponds to an entry in the ceemEventMapTable
            	**type**\: int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'CISCO-EMBEDDED-EVENT-MGR-MIB'
            _revision = '2006-11-07'

            def __init__(self):
                super(CISCOEMBEDDEDEVENTMGRMIB.Ceemregisteredpolicytable.Ceemregisteredpolicyentry, self).__init__()

                self.yang_name = "ceemRegisteredPolicyEntry"
                self.yang_parent_name = "ceemRegisteredPolicyTable"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['ceemregisteredpolicyindex']
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('ceemregisteredpolicyindex', YLeaf(YType.uint32, 'ceemRegisteredPolicyIndex')),
                    ('ceemregisteredpolicyname', YLeaf(YType.str, 'ceemRegisteredPolicyName')),
                    ('ceemregisteredpolicyeventtype1', YLeaf(YType.uint32, 'ceemRegisteredPolicyEventType1')),
                    ('ceemregisteredpolicyeventtype2', YLeaf(YType.uint32, 'ceemRegisteredPolicyEventType2')),
                    ('ceemregisteredpolicyeventtype3', YLeaf(YType.uint32, 'ceemRegisteredPolicyEventType3')),
                    ('ceemregisteredpolicyeventtype4', YLeaf(YType.uint32, 'ceemRegisteredPolicyEventType4')),
                    ('ceemregisteredpolicystatus', YLeaf(YType.enumeration, 'ceemRegisteredPolicyStatus')),
                    ('ceemregisteredpolicytype', YLeaf(YType.enumeration, 'ceemRegisteredPolicyType')),
                    ('ceemregisteredpolicynotifflag', YLeaf(YType.boolean, 'ceemRegisteredPolicyNotifFlag')),
                    ('ceemregisteredpolicyregtime', YLeaf(YType.str, 'ceemRegisteredPolicyRegTime')),
                    ('ceemregisteredpolicyenabledtime', YLeaf(YType.str, 'ceemRegisteredPolicyEnabledTime')),
                    ('ceemregisteredpolicyruntime', YLeaf(YType.str, 'ceemRegisteredPolicyRunTime')),
                    ('ceemregisteredpolicyruncount', YLeaf(YType.uint32, 'ceemRegisteredPolicyRunCount')),
                    ('ceemregisteredpolicyeventtype5', YLeaf(YType.uint32, 'ceemRegisteredPolicyEventType5')),
                    ('ceemregisteredpolicyeventtype6', YLeaf(YType.uint32, 'ceemRegisteredPolicyEventType6')),
                    ('ceemregisteredpolicyeventtype7', YLeaf(YType.uint32, 'ceemRegisteredPolicyEventType7')),
                    ('ceemregisteredpolicyeventtype8', YLeaf(YType.uint32, 'ceemRegisteredPolicyEventType8')),
                ])
                self.ceemregisteredpolicyindex = None
                self.ceemregisteredpolicyname = None
                self.ceemregisteredpolicyeventtype1 = None
                self.ceemregisteredpolicyeventtype2 = None
                self.ceemregisteredpolicyeventtype3 = None
                self.ceemregisteredpolicyeventtype4 = None
                self.ceemregisteredpolicystatus = None
                self.ceemregisteredpolicytype = None
                self.ceemregisteredpolicynotifflag = None
                self.ceemregisteredpolicyregtime = None
                self.ceemregisteredpolicyenabledtime = None
                self.ceemregisteredpolicyruntime = None
                self.ceemregisteredpolicyruncount = None
                self.ceemregisteredpolicyeventtype5 = None
                self.ceemregisteredpolicyeventtype6 = None
                self.ceemregisteredpolicyeventtype7 = None
                self.ceemregisteredpolicyeventtype8 = None
                self._segment_path = lambda: "ceemRegisteredPolicyEntry" + "[ceemRegisteredPolicyIndex='" + str(self.ceemregisteredpolicyindex) + "']"
                self._absolute_path = lambda: "CISCO-EMBEDDED-EVENT-MGR-MIB:CISCO-EMBEDDED-EVENT-MGR-MIB/ceemRegisteredPolicyTable/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(CISCOEMBEDDEDEVENTMGRMIB.Ceemregisteredpolicytable.Ceemregisteredpolicyentry, ['ceemregisteredpolicyindex', 'ceemregisteredpolicyname', 'ceemregisteredpolicyeventtype1', 'ceemregisteredpolicyeventtype2', 'ceemregisteredpolicyeventtype3', 'ceemregisteredpolicyeventtype4', 'ceemregisteredpolicystatus', 'ceemregisteredpolicytype', 'ceemregisteredpolicynotifflag', 'ceemregisteredpolicyregtime', 'ceemregisteredpolicyenabledtime', 'ceemregisteredpolicyruntime', 'ceemregisteredpolicyruncount', 'ceemregisteredpolicyeventtype5', 'ceemregisteredpolicyeventtype6', 'ceemregisteredpolicyeventtype7', 'ceemregisteredpolicyeventtype8'], name, value)

            class Ceemregisteredpolicystatus(Enum):
                """
                Ceemregisteredpolicystatus (Enum Class)

                This status indicates whether the policy is enabled or disabled.

                .. data:: enabled = 1

                .. data:: disabled = 2

                """

                enabled = Enum.YLeaf(1, "enabled")

                disabled = Enum.YLeaf(2, "disabled")


            class Ceemregisteredpolicytype(Enum):
                """
                Ceemregisteredpolicytype (Enum Class)

                This variable indicates whether this is a user or system policy.

                .. data:: user = 1

                .. data:: system = 2

                """

                user = Enum.YLeaf(1, "user")

                system = Enum.YLeaf(2, "system")


    def clone_ptr(self):
        self._top_entity = CISCOEMBEDDEDEVENTMGRMIB()
        return self._top_entity

