""" CISCO_ETHER_CFM_MIB 

This MIB module defines the managed objects 
and notifications for Ethernet Connectivity 
Fault Management (CFM).

CFM is an end\-to\-end per service instance Ethernet layer 
Operations, Administration and Management (OAM) protocol. 

CFM events include\: 

\- Maintenance End\-Point (MEP) coming up\: establishing 
  connectivity

\- Maintenance End\-Point going down\: losing connectivity

\- Maintenance End\-Point unknown\: unexpected

\- Maintenance End\-Point missing\: expected but not reachable

\- Continuity Check Configuration Error\: collision in MEP IDs

\- Continuity Check Loop\: forwarding loop in network

\- Continuity Check Cross\-connect\: cross\-connected 
  forwarding path.

The following acronyms are used in this module\:

\- MEP\: Maintenance End Point

\- MEPID\: Maintenance End Point Identifier

\- CC\: Continuity Check

\- CCDB\: Continuity Check Database

\- SVLAN\: Service Provider Virtual Local Area Network

\- VLAN\: Virtual Local Area Network

\- CLI\: Command Line Interface.

\- OAM\: Operations Administration and Management.

"""
from ydk.entity_utils import get_relative_entity_path as _get_relative_entity_path
from ydk.types import Entity, EntityPath, Identity, Enum, YType, YLeaf, YLeafList, YList, LeafDataList, Bits, Empty, Decimal64
from ydk.filters import YFilter
from ydk.errors import YPYError, YPYModelError
from ydk.errors.error_handler import handle_type_error as _handle_type_error



class CiscoEtherCfmMib(Entity):
    """
    
    
    .. attribute:: ceccfmevents
    
    	
    	**type**\:   :py:class:`Ceccfmevents <ydk.models.cisco_ios_xe.CISCO_ETHER_CFM_MIB.CiscoEtherCfmMib.Ceccfmevents>`
    
    .. attribute:: cethercfmeventtable
    
    	This table contains a collection of Ethernet CFM notifications generated by the device. The notifications correspond to events recognized by the device and fall into the following classes\:  \- MEP\-Up  \- MEP\-Down  \- Configuration Error  \- Forwarding Loop  \- Cross\-connected Ethernet Connection  \- Crosscheck Missing MEP  \- Crosscheck Unknown MEP  \- Crosscheck Service Up  A conceptual row is created in this table whenever the device  encounters one of the events listed above. Rows can only be created by the agent, and not at the request of the management station.  Rows are deleted at the request of a management station by  setting the cEtherCfmEventDeleteRow object to 'delete'. Another way of deleting rows is through the CLI.  Although this table may be indexed uniquely by the  cEtherCfmEventIndex index, the first two indices  (cEtherCfmEventDomainIndex and cEtherCfmEventSvlan) are used to speed\-up queries per maintenance domain and per customer service instance. Furthermore, these two indices will help in defining the MIB views easily in order to restrict access to the MIB to particular entities (be it a service provider, or operator, or customer)
    	**type**\:   :py:class:`Cethercfmeventtable <ydk.models.cisco_ios_xe.CISCO_ETHER_CFM_MIB.CiscoEtherCfmMib.Cethercfmeventtable>`
    
    

    """

    _prefix = 'CISCO-ETHER-CFM-MIB'
    _revision = '2004-12-28'

    def __init__(self):
        super(CiscoEtherCfmMib, self).__init__()
        self._top_entity = None

        self.yang_name = "CISCO-ETHER-CFM-MIB"
        self.yang_parent_name = "CISCO-ETHER-CFM-MIB"

        self.ceccfmevents = CiscoEtherCfmMib.Ceccfmevents()
        self.ceccfmevents.parent = self
        self._children_name_map["ceccfmevents"] = "cecCfmEvents"
        self._children_yang_names.add("cecCfmEvents")

        self.cethercfmeventtable = CiscoEtherCfmMib.Cethercfmeventtable()
        self.cethercfmeventtable.parent = self
        self._children_name_map["cethercfmeventtable"] = "cEtherCfmEventTable"
        self._children_yang_names.add("cEtherCfmEventTable")


    class Ceccfmevents(Entity):
        """
        
        
        .. attribute:: cethercfmmaxeventindex
        
        	This object specifies the maximum upper value supported  for the cEtherCfmEventIndex index by this agent
        	**type**\:  int
        
        	**range:** 1..4294967295
        
        

        """

        _prefix = 'CISCO-ETHER-CFM-MIB'
        _revision = '2004-12-28'

        def __init__(self):
            super(CiscoEtherCfmMib.Ceccfmevents, self).__init__()

            self.yang_name = "cecCfmEvents"
            self.yang_parent_name = "CISCO-ETHER-CFM-MIB"

            self.cethercfmmaxeventindex = YLeaf(YType.uint32, "cEtherCfmMaxEventIndex")

        def __setattr__(self, name, value):
            self._check_monkey_patching_error(name, value)
            with _handle_type_error():
                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                        "Please use list append or extend method."
                                        .format(value))
                if isinstance(value, Enum.YLeaf):
                    value = value.name
                if name in ("cethercfmmaxeventindex") and name in self.__dict__:
                    if isinstance(value, YLeaf):
                        self.__dict__[name].set(value.get())
                    elif isinstance(value, YLeafList):
                        super(CiscoEtherCfmMib.Ceccfmevents, self).__setattr__(name, value)
                    else:
                        self.__dict__[name].set(value)
                else:
                    if hasattr(value, "parent") and name != "parent":
                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                            value.parent = self
                        elif value.parent is None and value.yang_name in self._children_yang_names:
                            value.parent = self
                    super(CiscoEtherCfmMib.Ceccfmevents, self).__setattr__(name, value)

        def has_data(self):
            return self.cethercfmmaxeventindex.is_set

        def has_operation(self):
            return (
                self.yfilter != YFilter.not_set or
                self.cethercfmmaxeventindex.yfilter != YFilter.not_set)

        def get_segment_path(self):
            path_buffer = ""
            path_buffer = "cecCfmEvents" + path_buffer

            return path_buffer

        def get_entity_path(self, ancestor):
            path_buffer = ""
            if (ancestor is None):
                path_buffer = "CISCO-ETHER-CFM-MIB:CISCO-ETHER-CFM-MIB/%s" % self.get_segment_path()
            else:
                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

            leaf_name_data = LeafDataList()
            if (self.cethercfmmaxeventindex.is_set or self.cethercfmmaxeventindex.yfilter != YFilter.not_set):
                leaf_name_data.append(self.cethercfmmaxeventindex.get_name_leafdata())

            entity_path = EntityPath(path_buffer, leaf_name_data)
            return entity_path

        def get_child_by_name(self, child_yang_name, segment_path):
            child = self._get_child_by_seg_name([child_yang_name, segment_path])
            if child is not None:
                return child

            return None

        def has_leaf_or_child_of_name(self, name):
            if(name == "cEtherCfmMaxEventIndex"):
                return True
            return False

        def set_value(self, value_path, value, name_space, name_space_prefix):
            if(value_path == "cEtherCfmMaxEventIndex"):
                self.cethercfmmaxeventindex = value
                self.cethercfmmaxeventindex.value_namespace = name_space
                self.cethercfmmaxeventindex.value_namespace_prefix = name_space_prefix


    class Cethercfmeventtable(Entity):
        """
        This table contains a collection of Ethernet CFM notifications
        generated by the device. The notifications correspond to events
        recognized by the device and fall into the following classes\:
        
        \- MEP\-Up
        
        \- MEP\-Down
        
        \- Configuration Error
        
        \- Forwarding Loop
        
        \- Cross\-connected Ethernet Connection
        
        \- Crosscheck Missing MEP
        
        \- Crosscheck Unknown MEP
        
        \- Crosscheck Service Up
        
        A conceptual row is created in this table whenever the device 
        encounters one of the events listed above. Rows can only be
        created by the agent, and not at the request of the management
        station.
        
        Rows are deleted at the request of a management station by 
        setting the cEtherCfmEventDeleteRow object to 'delete'.
        Another way of deleting rows is through the CLI.
        
        Although this table may be indexed uniquely by the 
        cEtherCfmEventIndex index, the first two indices 
        (cEtherCfmEventDomainIndex and cEtherCfmEventSvlan) are used
        to speed\-up queries per maintenance domain and per customer
        service instance. Furthermore, these two indices will help
        in defining the MIB views easily in order to restrict access
        to the MIB to particular entities (be it a service provider,
        or operator, or customer).
        
        .. attribute:: cethercfmevententry
        
        	An entry in this table is created for every event reported by Ethernet CFM
        	**type**\: list of    :py:class:`Cethercfmevententry <ydk.models.cisco_ios_xe.CISCO_ETHER_CFM_MIB.CiscoEtherCfmMib.Cethercfmeventtable.Cethercfmevententry>`
        
        

        """

        _prefix = 'CISCO-ETHER-CFM-MIB'
        _revision = '2004-12-28'

        def __init__(self):
            super(CiscoEtherCfmMib.Cethercfmeventtable, self).__init__()

            self.yang_name = "cEtherCfmEventTable"
            self.yang_parent_name = "CISCO-ETHER-CFM-MIB"

            self.cethercfmevententry = YList(self)

        def __setattr__(self, name, value):
            self._check_monkey_patching_error(name, value)
            with _handle_type_error():
                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                        "Please use list append or extend method."
                                        .format(value))
                if isinstance(value, Enum.YLeaf):
                    value = value.name
                if name in () and name in self.__dict__:
                    if isinstance(value, YLeaf):
                        self.__dict__[name].set(value.get())
                    elif isinstance(value, YLeafList):
                        super(CiscoEtherCfmMib.Cethercfmeventtable, self).__setattr__(name, value)
                    else:
                        self.__dict__[name].set(value)
                else:
                    if hasattr(value, "parent") and name != "parent":
                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                            value.parent = self
                        elif value.parent is None and value.yang_name in self._children_yang_names:
                            value.parent = self
                    super(CiscoEtherCfmMib.Cethercfmeventtable, self).__setattr__(name, value)


        class Cethercfmevententry(Entity):
            """
            An entry in this table is created for every event reported
            by Ethernet CFM.
            
            .. attribute:: cethercfmeventdomainindex  <key>
            
            	This object represents the ID which uniquely identifies  a CFM maintenance domain on the device. Every domain can be uniquely identified by its user\-defined  name (cEtherCfmEventDomainName) or device\-assigned ID (this object)
            	**type**\:  int
            
            	**range:** 1..4294967295
            
            .. attribute:: cethercfmeventsvlan  <key>
            
            	The service VLAN identifier of the customer service  instance to which the event belongs
            	**type**\:  int
            
            	**range:** 1..4094
            
            .. attribute:: cethercfmeventindex  <key>
            
            	A monotonically increasing integer for the sole purpose of indexing CFM events.  When it reaches the maximum value  supported by the agent, as defined in the  cEtherCfmMaxEventIndex object, the agent wraps the value back to 1 and may flush existing entries
            	**type**\:  int
            
            	**range:** 1..4294967295
            
            .. attribute:: cethercfmeventcode
            
            	This object is used in decoding 'mepUp' and 'mepDown' events.   \*\* For 'mepUp', the following codes are relevant\:      'new'           \- This is the very first time the device                        receives a CC message from the remote MEP.      'returning'     \- The device received a CC message from a                        remote MEP for which it had an expired                        CCDB entry.      'portState'     \- The device received a CC message from a                        remote MEP for which it has a valid CCDB                        entry, and the message indicates a port                        status change.  \*\* For 'mepDown', the following codes are relevant\:      'lastGasp'      \- The device received a CC message from a                       remote MEP with zero lifetime.      'timeout'       \- The local CCDB entry for the remote MEP                        expired.      'configClear'   \- A previous CC message from a MEP that                       triggered a configuration error event                       is cleared.          'loopClear'     \- A previous CC message from a MEP that                       triggered a loop error event is cleared.      'xconnectClear' \- A previous CC message from a MEP that                       triggered a crossconnect error event                        is cleared.      'unknownClear'  \- A previous CC message from a MEP that                       triggered an unknown MEP event is                        cleared
            	**type**\:   :py:class:`Cethercfmeventcode <ydk.models.cisco_ios_xe.CISCO_ETHER_CFM_MIB.CiscoEtherCfmMib.Cethercfmeventtable.Cethercfmevententry.Cethercfmeventcode>`
            
            .. attribute:: cethercfmeventdeleterow
            
            	This object allows the management station to  delete a row in the cEtherCfmEventTable in order to free system resources.  When reading this object the value of 'noop' will be  returned. This object can only be set to 'delete'.   When this object is set to 'delete', the conceptual row corresponding to this object will be deleted to free system resources. This is equivalent to clearing the event log. Should the trigger that caused the event to be logged reoccur, the event will be re\-asserted but in a different conceptual row
            	**type**\:   :py:class:`Cethercfmeventdeleterow <ydk.models.cisco_ios_xe.CISCO_ETHER_CFM_MIB.CiscoEtherCfmMib.Cethercfmeventtable.Cethercfmevententry.Cethercfmeventdeleterow>`
            
            .. attribute:: cethercfmeventdomainname
            
            	The name of the CFM maintenance domain
            	**type**\:  str
            
            .. attribute:: cethercfmeventlastchange
            
            	The value of sysUpTime at the time when this row was created
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: cethercfmeventlclifcount
            
            	The number of local interfaces affected by the event
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: cethercfmeventlclmacaddress
            
            	The MAC address of the device reporting the event
            	**type**\:  str
            
            	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
            
            .. attribute:: cethercfmeventlclmepcount
            
            	The number of local MEPs affected by the event
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: cethercfmeventlclmepid
            
            	The identifier of the local MEP impacted by the event
            	**type**\:  int
            
            	**range:** 0..8191
            
            .. attribute:: cethercfmeventrmtmacaddress
            
            	The MAC address of the remote maintenance point for which the event entry is being logged
            	**type**\:  str
            
            	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
            
            .. attribute:: cethercfmeventrmtmepid
            
            	The maintenance end\-point identifier of the remote  MEP causing the event entry to be logged
            	**type**\:  int
            
            	**range:** 0..8191
            
            .. attribute:: cethercfmeventrmtportstate
            
            	The operational state of the port on which the  remote MEP is configured. This information is  derived from the port\-state as indicated in the  CC message. The possible values are\:  'up'                    \- The port is operationally up.  'down'                  \- The port is operationally (but not                           administratively) down.  'adminDown'             \- The port is administratively down.  'test'                  \- The port is in test mode (perhaps                            due to an IEEE Standard 802.3ah OAM                           intrusive loopback operation).  'remoteExcessiveErrors' \- 802.3ah OAM reports that the other                            end of the link is receiving an                            excessive number of invalid frames.  'localExcessiveErrors'  \- 802.3ah OAM reports that this end of                           the link is receiving an excessive                            number of invalid frames.  'localNoData'           \- No data and no CFM messages have been                           received for an excessive length of                            time
            	**type**\:   :py:class:`Cethercfmeventrmtportstate <ydk.models.cisco_ios_xe.CISCO_ETHER_CFM_MIB.CiscoEtherCfmMib.Cethercfmeventtable.Cethercfmevententry.Cethercfmeventrmtportstate>`
            
            .. attribute:: cethercfmeventrmtserviceid
            
            	The ID that the remote device has configured for the  customer service instance (VLAN)
            	**type**\:  str
            
            	**length:** 1..100
            
            .. attribute:: cethercfmeventserviceid
            
            	The customer service instance to which the event belongs
            	**type**\:  str
            
            	**length:** 1..100
            
            .. attribute:: cethercfmeventtype
            
            	This object informs the management station of how to interpret the rest of the objects within a row, as summarized in the  following table\:  Legend I\: Ignored Object         V\: Valid Object  Object                                 cEtherCfmEventType                                \| 1 \| 2 \| 3 \| 4 \| 5 \| 6 \| 7 \| 8 ================================================================                                \|   \|   \|   \|   \|   \|   \|   \| cEtherCfmEventDomainIndex      \| V \| V \| V \| V \| V \| V \| V \| V                                \|   \|   \|   \|   \|   \|   \|   \| cEtherCfmEventSvlan            \| V \| V \| V \| V \| V \| V \| V \| V                                \|   \|   \|   \|   \|   \|   \|   \| cEtherCfmEventIndex            \| V \| V \| V \| V \| V \| V \| V \| V                                \|   \|   \|   \|   \|   \|   \|   \| cEtherCfmEventLastChange       \| V \| V \| V \| V \| V \| V \| V \| V                                \|   \|   \|   \|   \|   \|   \|   \| cEtherCfmEventServiceId        \| V \| V \| V \| V \| V \| V \| V \| V                                \|   \|   \|   \|   \|   \|   \|   \| cEtherCfmEventDomainName       \| V \| V \| V \| V \| V \| V \| V \| V                                \|   \|   \|   \|   \|   \|   \|   \| cEtherCfmEventLclMepid         \| I \| I \| I \| V \| V \| I \| I \| I                                \|   \|   \|   \|   \|   \|   \|   \| cEtherCfmEventLclMacAddress    \| V \| V \| V \| V \| V \| V \| V \| V                                \|   \|   \|   \|   \|   \|   \|   \| cEtherCfmEventLclMepCount      \| V \| V \| I \| I \| I \| I \| I \| I                                \|   \|   \|   \|   \|   \|   \|   \| cEtherCfmEventLclIfCount       \| V \| V \| I \| I \| I \| I \| I \| I                                \|   \|   \|   \|   \|   \|   \|   \| cEtherCfmEventRmtMepid         \| V \| V \| V \| I \| I \| V \| V \| I                                \|   \|   \|   \|   \|   \|   \|   \| cEtherCfmEventRmtMacAddress    \| V \| V \| V \| I \| V \| V \| V \| I                                \|   \|   \|   \|   \|   \|   \|   \| cEtherCfmEventRmtPortState     \| V \| I \| I \| I \| I \| I \| I \| I                                \|   \|   \|   \|   \|   \|   \|   \| cEtherCfmEventRmtServiceId     \| I \| I \| V \| I \| I \| I \| I \| I                                \|   \|   \|   \|   \|   \|   \|   \| cEtherCfmEventCode             \| V \| V \| I \| I \| I \| I \| I \| I                                \|   \|   \|   \|   \|   \|   \|   \| cEtherCfmEventDeleteRow        \| V \| V \| V \| V \| V \| V \| V \| V                                \|   \|   \|   \|   \|   \|   \|   \|  Note\: When reading any ignored object, a value of 0 will  be returned by the agent
            	**type**\:   :py:class:`Cethercfmeventtype <ydk.models.cisco_ios_xe.CISCO_ETHER_CFM_MIB.CiscoEtherCfmMib.Cethercfmeventtable.Cethercfmevententry.Cethercfmeventtype>`
            
            

            """

            _prefix = 'CISCO-ETHER-CFM-MIB'
            _revision = '2004-12-28'

            def __init__(self):
                super(CiscoEtherCfmMib.Cethercfmeventtable.Cethercfmevententry, self).__init__()

                self.yang_name = "cEtherCfmEventEntry"
                self.yang_parent_name = "cEtherCfmEventTable"

                self.cethercfmeventdomainindex = YLeaf(YType.uint32, "cEtherCfmEventDomainIndex")

                self.cethercfmeventsvlan = YLeaf(YType.int32, "cEtherCfmEventSvlan")

                self.cethercfmeventindex = YLeaf(YType.uint32, "cEtherCfmEventIndex")

                self.cethercfmeventcode = YLeaf(YType.enumeration, "cEtherCfmEventCode")

                self.cethercfmeventdeleterow = YLeaf(YType.enumeration, "cEtherCfmEventDeleteRow")

                self.cethercfmeventdomainname = YLeaf(YType.str, "cEtherCfmEventDomainName")

                self.cethercfmeventlastchange = YLeaf(YType.uint32, "cEtherCfmEventLastChange")

                self.cethercfmeventlclifcount = YLeaf(YType.uint32, "cEtherCfmEventLclIfCount")

                self.cethercfmeventlclmacaddress = YLeaf(YType.str, "cEtherCfmEventLclMacAddress")

                self.cethercfmeventlclmepcount = YLeaf(YType.uint32, "cEtherCfmEventLclMepCount")

                self.cethercfmeventlclmepid = YLeaf(YType.uint32, "cEtherCfmEventLclMepid")

                self.cethercfmeventrmtmacaddress = YLeaf(YType.str, "cEtherCfmEventRmtMacAddress")

                self.cethercfmeventrmtmepid = YLeaf(YType.uint32, "cEtherCfmEventRmtMepid")

                self.cethercfmeventrmtportstate = YLeaf(YType.enumeration, "cEtherCfmEventRmtPortState")

                self.cethercfmeventrmtserviceid = YLeaf(YType.str, "cEtherCfmEventRmtServiceId")

                self.cethercfmeventserviceid = YLeaf(YType.str, "cEtherCfmEventServiceId")

                self.cethercfmeventtype = YLeaf(YType.enumeration, "cEtherCfmEventType")

            def __setattr__(self, name, value):
                self._check_monkey_patching_error(name, value)
                with _handle_type_error():
                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                            "Please use list append or extend method."
                                            .format(value))
                    if isinstance(value, Enum.YLeaf):
                        value = value.name
                    if name in ("cethercfmeventdomainindex",
                                "cethercfmeventsvlan",
                                "cethercfmeventindex",
                                "cethercfmeventcode",
                                "cethercfmeventdeleterow",
                                "cethercfmeventdomainname",
                                "cethercfmeventlastchange",
                                "cethercfmeventlclifcount",
                                "cethercfmeventlclmacaddress",
                                "cethercfmeventlclmepcount",
                                "cethercfmeventlclmepid",
                                "cethercfmeventrmtmacaddress",
                                "cethercfmeventrmtmepid",
                                "cethercfmeventrmtportstate",
                                "cethercfmeventrmtserviceid",
                                "cethercfmeventserviceid",
                                "cethercfmeventtype") and name in self.__dict__:
                        if isinstance(value, YLeaf):
                            self.__dict__[name].set(value.get())
                        elif isinstance(value, YLeafList):
                            super(CiscoEtherCfmMib.Cethercfmeventtable.Cethercfmevententry, self).__setattr__(name, value)
                        else:
                            self.__dict__[name].set(value)
                    else:
                        if hasattr(value, "parent") and name != "parent":
                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                value.parent = self
                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                value.parent = self
                        super(CiscoEtherCfmMib.Cethercfmeventtable.Cethercfmevententry, self).__setattr__(name, value)

            class Cethercfmeventcode(Enum):
                """
                Cethercfmeventcode

                This object is used in decoding 'mepUp' and 'mepDown' events. 

                \*\* For 'mepUp', the following codes are relevant\:

                    'new'           \- This is the very first time the device 

                                      receives a CC message from the remote MEP.

                    'returning'     \- The device received a CC message from a 

                                      remote MEP for which it had an expired 

                                      CCDB entry.

                    'portState'     \- The device received a CC message from a 

                                      remote MEP for which it has a valid CCDB 

                                      entry, and the message indicates a port 

                                      status change.

                \*\* For 'mepDown', the following codes are relevant\:

                    'lastGasp'      \- The device received a CC message from a

                                      remote MEP with zero lifetime.

                    'timeout'       \- The local CCDB entry for the remote MEP 

                                      expired.

                    'configClear'   \- A previous CC message from a MEP that

                                      triggered a configuration error event

                                      is cleared.

                    'loopClear'     \- A previous CC message from a MEP that

                                      triggered a loop error event is cleared.

                    'xconnectClear' \- A previous CC message from a MEP that

                                      triggered a crossconnect error event 

                                      is cleared.

                    'unknownClear'  \- A previous CC message from a MEP that

                                      triggered an unknown MEP event is 

                                      cleared.

                .. data:: new = 1

                .. data:: returning = 2

                .. data:: portState = 3

                .. data:: lastGasp = 4

                .. data:: timeout = 5

                .. data:: configClear = 6

                .. data:: loopClear = 7

                .. data:: xconnectClear = 8

                .. data:: unknownClear = 9

                """

                new = Enum.YLeaf(1, "new")

                returning = Enum.YLeaf(2, "returning")

                portState = Enum.YLeaf(3, "portState")

                lastGasp = Enum.YLeaf(4, "lastGasp")

                timeout = Enum.YLeaf(5, "timeout")

                configClear = Enum.YLeaf(6, "configClear")

                loopClear = Enum.YLeaf(7, "loopClear")

                xconnectClear = Enum.YLeaf(8, "xconnectClear")

                unknownClear = Enum.YLeaf(9, "unknownClear")


            class Cethercfmeventdeleterow(Enum):
                """
                Cethercfmeventdeleterow

                This object allows the management station to 

                delete a row in the cEtherCfmEventTable in order

                to free system resources.

                When reading this object the value of 'noop' will be 

                returned. This object can only be set to 'delete'. 

                When this object is set to 'delete', the conceptual

                row corresponding to this object will be deleted to

                free system resources. This is equivalent to clearing

                the event log. Should the trigger that caused the event

                to be logged reoccur, the event will be re\-asserted but

                in a different conceptual row.

                .. data:: noop = 1

                .. data:: delete = 2

                """

                noop = Enum.YLeaf(1, "noop")

                delete = Enum.YLeaf(2, "delete")


            class Cethercfmeventrmtportstate(Enum):
                """
                Cethercfmeventrmtportstate

                The operational state of the port on which the 

                remote MEP is configured. This information is 

                derived from the port\-state as indicated in the 

                CC message. The possible values are\:

                'up'                    \- The port is operationally up.

                'down'                  \- The port is operationally (but not

                                          administratively) down.

                'adminDown'             \- The port is administratively down.

                'test'                  \- The port is in test mode (perhaps 

                                          due to an IEEE Standard 802.3ah OAM

                                          intrusive loopback operation).

                'remoteExcessiveErrors' \- 802.3ah OAM reports that the other 

                                          end of the link is receiving an 

                                          excessive number of invalid frames.

                'localExcessiveErrors'  \- 802.3ah OAM reports that this end of

                                          the link is receiving an excessive 

                                          number of invalid frames.

                'localNoData'           \- No data and no CFM messages have been

                                          received for an excessive length of 

                                          time.

                .. data:: up = 1

                .. data:: down = 2

                .. data:: adminDown = 3

                .. data:: test = 4

                .. data:: remoteExcessiveErrors = 5

                .. data:: localExcessiveErrors = 6

                .. data:: localNoData = 7

                """

                up = Enum.YLeaf(1, "up")

                down = Enum.YLeaf(2, "down")

                adminDown = Enum.YLeaf(3, "adminDown")

                test = Enum.YLeaf(4, "test")

                remoteExcessiveErrors = Enum.YLeaf(5, "remoteExcessiveErrors")

                localExcessiveErrors = Enum.YLeaf(6, "localExcessiveErrors")

                localNoData = Enum.YLeaf(7, "localNoData")


            class Cethercfmeventtype(Enum):
                """
                Cethercfmeventtype

                This object informs the management station of how to interpret

                the rest of the objects within a row, as summarized in the 

                following table\:

                Legend I\: Ignored Object 

                       V\: Valid Object

                Object                                 cEtherCfmEventType

                                               \| 1 \| 2 \| 3 \| 4 \| 5 \| 6 \| 7 \| 8

                ================================================================

                                               \|   \|   \|   \|   \|   \|   \|   \|

                cEtherCfmEventDomainIndex      \| V \| V \| V \| V \| V \| V \| V \| V

                                               \|   \|   \|   \|   \|   \|   \|   \|

                cEtherCfmEventSvlan            \| V \| V \| V \| V \| V \| V \| V \| V

                                               \|   \|   \|   \|   \|   \|   \|   \|

                cEtherCfmEventIndex            \| V \| V \| V \| V \| V \| V \| V \| V

                                               \|   \|   \|   \|   \|   \|   \|   \|

                cEtherCfmEventLastChange       \| V \| V \| V \| V \| V \| V \| V \| V

                                               \|   \|   \|   \|   \|   \|   \|   \|

                cEtherCfmEventServiceId        \| V \| V \| V \| V \| V \| V \| V \| V

                                               \|   \|   \|   \|   \|   \|   \|   \|

                cEtherCfmEventDomainName       \| V \| V \| V \| V \| V \| V \| V \| V

                                               \|   \|   \|   \|   \|   \|   \|   \|

                cEtherCfmEventLclMepid         \| I \| I \| I \| V \| V \| I \| I \| I

                                               \|   \|   \|   \|   \|   \|   \|   \|

                cEtherCfmEventLclMacAddress    \| V \| V \| V \| V \| V \| V \| V \| V

                                               \|   \|   \|   \|   \|   \|   \|   \|

                cEtherCfmEventLclMepCount      \| V \| V \| I \| I \| I \| I \| I \| I

                                               \|   \|   \|   \|   \|   \|   \|   \|

                cEtherCfmEventLclIfCount       \| V \| V \| I \| I \| I \| I \| I \| I

                                               \|   \|   \|   \|   \|   \|   \|   \|

                cEtherCfmEventRmtMepid         \| V \| V \| V \| I \| I \| V \| V \| I

                                               \|   \|   \|   \|   \|   \|   \|   \|

                cEtherCfmEventRmtMacAddress    \| V \| V \| V \| I \| V \| V \| V \| I

                                               \|   \|   \|   \|   \|   \|   \|   \|

                cEtherCfmEventRmtPortState     \| V \| I \| I \| I \| I \| I \| I \| I

                                               \|   \|   \|   \|   \|   \|   \|   \|

                cEtherCfmEventRmtServiceId     \| I \| I \| V \| I \| I \| I \| I \| I

                                               \|   \|   \|   \|   \|   \|   \|   \|

                cEtherCfmEventCode             \| V \| V \| I \| I \| I \| I \| I \| I

                                               \|   \|   \|   \|   \|   \|   \|   \|

                cEtherCfmEventDeleteRow        \| V \| V \| V \| V \| V \| V \| V \| V

                                               \|   \|   \|   \|   \|   \|   \|   \|

                Note\: When reading any ignored object, a value of 0 will 

                be returned by the agent.

                .. data:: mepUp = 1

                .. data:: mepDown = 2

                .. data:: xconnect = 3

                .. data:: loop = 4

                .. data:: config = 5

                .. data:: xcheckMissing = 6

                .. data:: xcheckUnknown = 7

                .. data:: xcheckServiceUp = 8

                """

                mepUp = Enum.YLeaf(1, "mepUp")

                mepDown = Enum.YLeaf(2, "mepDown")

                xconnect = Enum.YLeaf(3, "xconnect")

                loop = Enum.YLeaf(4, "loop")

                config = Enum.YLeaf(5, "config")

                xcheckMissing = Enum.YLeaf(6, "xcheckMissing")

                xcheckUnknown = Enum.YLeaf(7, "xcheckUnknown")

                xcheckServiceUp = Enum.YLeaf(8, "xcheckServiceUp")


            def has_data(self):
                return (
                    self.cethercfmeventdomainindex.is_set or
                    self.cethercfmeventsvlan.is_set or
                    self.cethercfmeventindex.is_set or
                    self.cethercfmeventcode.is_set or
                    self.cethercfmeventdeleterow.is_set or
                    self.cethercfmeventdomainname.is_set or
                    self.cethercfmeventlastchange.is_set or
                    self.cethercfmeventlclifcount.is_set or
                    self.cethercfmeventlclmacaddress.is_set or
                    self.cethercfmeventlclmepcount.is_set or
                    self.cethercfmeventlclmepid.is_set or
                    self.cethercfmeventrmtmacaddress.is_set or
                    self.cethercfmeventrmtmepid.is_set or
                    self.cethercfmeventrmtportstate.is_set or
                    self.cethercfmeventrmtserviceid.is_set or
                    self.cethercfmeventserviceid.is_set or
                    self.cethercfmeventtype.is_set)

            def has_operation(self):
                return (
                    self.yfilter != YFilter.not_set or
                    self.cethercfmeventdomainindex.yfilter != YFilter.not_set or
                    self.cethercfmeventsvlan.yfilter != YFilter.not_set or
                    self.cethercfmeventindex.yfilter != YFilter.not_set or
                    self.cethercfmeventcode.yfilter != YFilter.not_set or
                    self.cethercfmeventdeleterow.yfilter != YFilter.not_set or
                    self.cethercfmeventdomainname.yfilter != YFilter.not_set or
                    self.cethercfmeventlastchange.yfilter != YFilter.not_set or
                    self.cethercfmeventlclifcount.yfilter != YFilter.not_set or
                    self.cethercfmeventlclmacaddress.yfilter != YFilter.not_set or
                    self.cethercfmeventlclmepcount.yfilter != YFilter.not_set or
                    self.cethercfmeventlclmepid.yfilter != YFilter.not_set or
                    self.cethercfmeventrmtmacaddress.yfilter != YFilter.not_set or
                    self.cethercfmeventrmtmepid.yfilter != YFilter.not_set or
                    self.cethercfmeventrmtportstate.yfilter != YFilter.not_set or
                    self.cethercfmeventrmtserviceid.yfilter != YFilter.not_set or
                    self.cethercfmeventserviceid.yfilter != YFilter.not_set or
                    self.cethercfmeventtype.yfilter != YFilter.not_set)

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "cEtherCfmEventEntry" + "[cEtherCfmEventDomainIndex='" + self.cethercfmeventdomainindex.get() + "']" + "[cEtherCfmEventSvlan='" + self.cethercfmeventsvlan.get() + "']" + "[cEtherCfmEventIndex='" + self.cethercfmeventindex.get() + "']" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "CISCO-ETHER-CFM-MIB:CISCO-ETHER-CFM-MIB/cEtherCfmEventTable/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()
                if (self.cethercfmeventdomainindex.is_set or self.cethercfmeventdomainindex.yfilter != YFilter.not_set):
                    leaf_name_data.append(self.cethercfmeventdomainindex.get_name_leafdata())
                if (self.cethercfmeventsvlan.is_set or self.cethercfmeventsvlan.yfilter != YFilter.not_set):
                    leaf_name_data.append(self.cethercfmeventsvlan.get_name_leafdata())
                if (self.cethercfmeventindex.is_set or self.cethercfmeventindex.yfilter != YFilter.not_set):
                    leaf_name_data.append(self.cethercfmeventindex.get_name_leafdata())
                if (self.cethercfmeventcode.is_set or self.cethercfmeventcode.yfilter != YFilter.not_set):
                    leaf_name_data.append(self.cethercfmeventcode.get_name_leafdata())
                if (self.cethercfmeventdeleterow.is_set or self.cethercfmeventdeleterow.yfilter != YFilter.not_set):
                    leaf_name_data.append(self.cethercfmeventdeleterow.get_name_leafdata())
                if (self.cethercfmeventdomainname.is_set or self.cethercfmeventdomainname.yfilter != YFilter.not_set):
                    leaf_name_data.append(self.cethercfmeventdomainname.get_name_leafdata())
                if (self.cethercfmeventlastchange.is_set or self.cethercfmeventlastchange.yfilter != YFilter.not_set):
                    leaf_name_data.append(self.cethercfmeventlastchange.get_name_leafdata())
                if (self.cethercfmeventlclifcount.is_set or self.cethercfmeventlclifcount.yfilter != YFilter.not_set):
                    leaf_name_data.append(self.cethercfmeventlclifcount.get_name_leafdata())
                if (self.cethercfmeventlclmacaddress.is_set or self.cethercfmeventlclmacaddress.yfilter != YFilter.not_set):
                    leaf_name_data.append(self.cethercfmeventlclmacaddress.get_name_leafdata())
                if (self.cethercfmeventlclmepcount.is_set or self.cethercfmeventlclmepcount.yfilter != YFilter.not_set):
                    leaf_name_data.append(self.cethercfmeventlclmepcount.get_name_leafdata())
                if (self.cethercfmeventlclmepid.is_set or self.cethercfmeventlclmepid.yfilter != YFilter.not_set):
                    leaf_name_data.append(self.cethercfmeventlclmepid.get_name_leafdata())
                if (self.cethercfmeventrmtmacaddress.is_set or self.cethercfmeventrmtmacaddress.yfilter != YFilter.not_set):
                    leaf_name_data.append(self.cethercfmeventrmtmacaddress.get_name_leafdata())
                if (self.cethercfmeventrmtmepid.is_set or self.cethercfmeventrmtmepid.yfilter != YFilter.not_set):
                    leaf_name_data.append(self.cethercfmeventrmtmepid.get_name_leafdata())
                if (self.cethercfmeventrmtportstate.is_set or self.cethercfmeventrmtportstate.yfilter != YFilter.not_set):
                    leaf_name_data.append(self.cethercfmeventrmtportstate.get_name_leafdata())
                if (self.cethercfmeventrmtserviceid.is_set or self.cethercfmeventrmtserviceid.yfilter != YFilter.not_set):
                    leaf_name_data.append(self.cethercfmeventrmtserviceid.get_name_leafdata())
                if (self.cethercfmeventserviceid.is_set or self.cethercfmeventserviceid.yfilter != YFilter.not_set):
                    leaf_name_data.append(self.cethercfmeventserviceid.get_name_leafdata())
                if (self.cethercfmeventtype.is_set or self.cethercfmeventtype.yfilter != YFilter.not_set):
                    leaf_name_data.append(self.cethercfmeventtype.get_name_leafdata())

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "cEtherCfmEventDomainIndex" or name == "cEtherCfmEventSvlan" or name == "cEtherCfmEventIndex" or name == "cEtherCfmEventCode" or name == "cEtherCfmEventDeleteRow" or name == "cEtherCfmEventDomainName" or name == "cEtherCfmEventLastChange" or name == "cEtherCfmEventLclIfCount" or name == "cEtherCfmEventLclMacAddress" or name == "cEtherCfmEventLclMepCount" or name == "cEtherCfmEventLclMepid" or name == "cEtherCfmEventRmtMacAddress" or name == "cEtherCfmEventRmtMepid" or name == "cEtherCfmEventRmtPortState" or name == "cEtherCfmEventRmtServiceId" or name == "cEtherCfmEventServiceId" or name == "cEtherCfmEventType"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                if(value_path == "cEtherCfmEventDomainIndex"):
                    self.cethercfmeventdomainindex = value
                    self.cethercfmeventdomainindex.value_namespace = name_space
                    self.cethercfmeventdomainindex.value_namespace_prefix = name_space_prefix
                if(value_path == "cEtherCfmEventSvlan"):
                    self.cethercfmeventsvlan = value
                    self.cethercfmeventsvlan.value_namespace = name_space
                    self.cethercfmeventsvlan.value_namespace_prefix = name_space_prefix
                if(value_path == "cEtherCfmEventIndex"):
                    self.cethercfmeventindex = value
                    self.cethercfmeventindex.value_namespace = name_space
                    self.cethercfmeventindex.value_namespace_prefix = name_space_prefix
                if(value_path == "cEtherCfmEventCode"):
                    self.cethercfmeventcode = value
                    self.cethercfmeventcode.value_namespace = name_space
                    self.cethercfmeventcode.value_namespace_prefix = name_space_prefix
                if(value_path == "cEtherCfmEventDeleteRow"):
                    self.cethercfmeventdeleterow = value
                    self.cethercfmeventdeleterow.value_namespace = name_space
                    self.cethercfmeventdeleterow.value_namespace_prefix = name_space_prefix
                if(value_path == "cEtherCfmEventDomainName"):
                    self.cethercfmeventdomainname = value
                    self.cethercfmeventdomainname.value_namespace = name_space
                    self.cethercfmeventdomainname.value_namespace_prefix = name_space_prefix
                if(value_path == "cEtherCfmEventLastChange"):
                    self.cethercfmeventlastchange = value
                    self.cethercfmeventlastchange.value_namespace = name_space
                    self.cethercfmeventlastchange.value_namespace_prefix = name_space_prefix
                if(value_path == "cEtherCfmEventLclIfCount"):
                    self.cethercfmeventlclifcount = value
                    self.cethercfmeventlclifcount.value_namespace = name_space
                    self.cethercfmeventlclifcount.value_namespace_prefix = name_space_prefix
                if(value_path == "cEtherCfmEventLclMacAddress"):
                    self.cethercfmeventlclmacaddress = value
                    self.cethercfmeventlclmacaddress.value_namespace = name_space
                    self.cethercfmeventlclmacaddress.value_namespace_prefix = name_space_prefix
                if(value_path == "cEtherCfmEventLclMepCount"):
                    self.cethercfmeventlclmepcount = value
                    self.cethercfmeventlclmepcount.value_namespace = name_space
                    self.cethercfmeventlclmepcount.value_namespace_prefix = name_space_prefix
                if(value_path == "cEtherCfmEventLclMepid"):
                    self.cethercfmeventlclmepid = value
                    self.cethercfmeventlclmepid.value_namespace = name_space
                    self.cethercfmeventlclmepid.value_namespace_prefix = name_space_prefix
                if(value_path == "cEtherCfmEventRmtMacAddress"):
                    self.cethercfmeventrmtmacaddress = value
                    self.cethercfmeventrmtmacaddress.value_namespace = name_space
                    self.cethercfmeventrmtmacaddress.value_namespace_prefix = name_space_prefix
                if(value_path == "cEtherCfmEventRmtMepid"):
                    self.cethercfmeventrmtmepid = value
                    self.cethercfmeventrmtmepid.value_namespace = name_space
                    self.cethercfmeventrmtmepid.value_namespace_prefix = name_space_prefix
                if(value_path == "cEtherCfmEventRmtPortState"):
                    self.cethercfmeventrmtportstate = value
                    self.cethercfmeventrmtportstate.value_namespace = name_space
                    self.cethercfmeventrmtportstate.value_namespace_prefix = name_space_prefix
                if(value_path == "cEtherCfmEventRmtServiceId"):
                    self.cethercfmeventrmtserviceid = value
                    self.cethercfmeventrmtserviceid.value_namespace = name_space
                    self.cethercfmeventrmtserviceid.value_namespace_prefix = name_space_prefix
                if(value_path == "cEtherCfmEventServiceId"):
                    self.cethercfmeventserviceid = value
                    self.cethercfmeventserviceid.value_namespace = name_space
                    self.cethercfmeventserviceid.value_namespace_prefix = name_space_prefix
                if(value_path == "cEtherCfmEventType"):
                    self.cethercfmeventtype = value
                    self.cethercfmeventtype.value_namespace = name_space
                    self.cethercfmeventtype.value_namespace_prefix = name_space_prefix

        def has_data(self):
            for c in self.cethercfmevententry:
                if (c.has_data()):
                    return True
            return False

        def has_operation(self):
            for c in self.cethercfmevententry:
                if (c.has_operation()):
                    return True
            return self.yfilter != YFilter.not_set

        def get_segment_path(self):
            path_buffer = ""
            path_buffer = "cEtherCfmEventTable" + path_buffer

            return path_buffer

        def get_entity_path(self, ancestor):
            path_buffer = ""
            if (ancestor is None):
                path_buffer = "CISCO-ETHER-CFM-MIB:CISCO-ETHER-CFM-MIB/%s" % self.get_segment_path()
            else:
                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

            leaf_name_data = LeafDataList()

            entity_path = EntityPath(path_buffer, leaf_name_data)
            return entity_path

        def get_child_by_name(self, child_yang_name, segment_path):
            child = self._get_child_by_seg_name([child_yang_name, segment_path])
            if child is not None:
                return child

            if (child_yang_name == "cEtherCfmEventEntry"):
                for c in self.cethercfmevententry:
                    segment = c.get_segment_path()
                    if (segment_path == segment):
                        return c
                c = CiscoEtherCfmMib.Cethercfmeventtable.Cethercfmevententry()
                c.parent = self
                local_reference_key = "ydk::seg::%s" % segment_path
                self._local_refs[local_reference_key] = c
                self.cethercfmevententry.append(c)
                return c

            return None

        def has_leaf_or_child_of_name(self, name):
            if(name == "cEtherCfmEventEntry"):
                return True
            return False

        def set_value(self, value_path, value, name_space, name_space_prefix):
            pass

    def has_data(self):
        return (
            (self.ceccfmevents is not None and self.ceccfmevents.has_data()) or
            (self.cethercfmeventtable is not None and self.cethercfmeventtable.has_data()))

    def has_operation(self):
        return (
            self.yfilter != YFilter.not_set or
            (self.ceccfmevents is not None and self.ceccfmevents.has_operation()) or
            (self.cethercfmeventtable is not None and self.cethercfmeventtable.has_operation()))

    def get_segment_path(self):
        path_buffer = ""
        path_buffer = "CISCO-ETHER-CFM-MIB:CISCO-ETHER-CFM-MIB" + path_buffer

        return path_buffer

    def get_entity_path(self, ancestor):
        path_buffer = ""
        if (not ancestor is None):
            raise YPYModelError("ancestor has to be None for top-level node")

        path_buffer = self.get_segment_path()
        leaf_name_data = LeafDataList()

        entity_path = EntityPath(path_buffer, leaf_name_data)
        return entity_path

    def get_child_by_name(self, child_yang_name, segment_path):
        child = self._get_child_by_seg_name([child_yang_name, segment_path])
        if child is not None:
            return child

        if (child_yang_name == "cecCfmEvents"):
            if (self.ceccfmevents is None):
                self.ceccfmevents = CiscoEtherCfmMib.Ceccfmevents()
                self.ceccfmevents.parent = self
                self._children_name_map["ceccfmevents"] = "cecCfmEvents"
            return self.ceccfmevents

        if (child_yang_name == "cEtherCfmEventTable"):
            if (self.cethercfmeventtable is None):
                self.cethercfmeventtable = CiscoEtherCfmMib.Cethercfmeventtable()
                self.cethercfmeventtable.parent = self
                self._children_name_map["cethercfmeventtable"] = "cEtherCfmEventTable"
            return self.cethercfmeventtable

        return None

    def has_leaf_or_child_of_name(self, name):
        if(name == "cecCfmEvents" or name == "cEtherCfmEventTable"):
            return True
        return False

    def set_value(self, value_path, value, name_space, name_space_prefix):
        pass

    def clone_ptr(self):
        self._top_entity = CiscoEtherCfmMib()
        return self._top_entity

